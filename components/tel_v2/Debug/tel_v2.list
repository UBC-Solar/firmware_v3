
tel_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011b10  080001f0  080001f0  000011f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007a8  08011d00  08011d00  00012d00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080124a8  080124a8  00014330  2**0
                  CONTENTS
  4 .ARM          00000008  080124a8  080124a8  000134a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080124b0  080124b0  00014330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080124b0  080124b0  000134b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080124b4  080124b4  000134b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000330  20000000  080124b8  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000585c  20000330  080127e8  00014330  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005b8c  080127e8  00014b8c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00014330  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021174  00000000  00000000  00014359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000056c0  00000000  00000000  000354cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cb0  00000000  00000000  0003ab90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000162e  00000000  00000000  0003c840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020464  00000000  00000000  0003de6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000259f3  00000000  00000000  0005e2d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ae131  00000000  00000000  00083cc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00131df6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000090f4  00000000  00000000  00131e3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0013af30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000330 	.word	0x20000330
 800020c:	00000000 	.word	0x00000000
 8000210:	08011ce8 	.word	0x08011ce8

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000334 	.word	0x20000334
 800022c:	08011ce8 	.word	0x08011ce8

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr

08000244 <strlen>:
 8000244:	4603      	mov	r3, r0
 8000246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800024a:	2a00      	cmp	r2, #0
 800024c:	d1fb      	bne.n	8000246 <strlen+0x2>
 800024e:	1a18      	subs	r0, r3, r0
 8000250:	3801      	subs	r0, #1
 8000252:	4770      	bx	lr

08000254 <__aeabi_drsub>:
 8000254:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000258:	e002      	b.n	8000260 <__adddf3>
 800025a:	bf00      	nop

0800025c <__aeabi_dsub>:
 800025c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000260 <__adddf3>:
 8000260:	b530      	push	{r4, r5, lr}
 8000262:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000266:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800026a:	ea94 0f05 	teq	r4, r5
 800026e:	bf08      	it	eq
 8000270:	ea90 0f02 	teqeq	r0, r2
 8000274:	bf1f      	itttt	ne
 8000276:	ea54 0c00 	orrsne.w	ip, r4, r0
 800027a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000282:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000286:	f000 80e2 	beq.w	800044e <__adddf3+0x1ee>
 800028a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000292:	bfb8      	it	lt
 8000294:	426d      	neglt	r5, r5
 8000296:	dd0c      	ble.n	80002b2 <__adddf3+0x52>
 8000298:	442c      	add	r4, r5
 800029a:	ea80 0202 	eor.w	r2, r0, r2
 800029e:	ea81 0303 	eor.w	r3, r1, r3
 80002a2:	ea82 0000 	eor.w	r0, r2, r0
 80002a6:	ea83 0101 	eor.w	r1, r3, r1
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	2d36      	cmp	r5, #54	@ 0x36
 80002b4:	bf88      	it	hi
 80002b6:	bd30      	pophi	{r4, r5, pc}
 80002b8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002c0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x70>
 80002ca:	4240      	negs	r0, r0
 80002cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002dc:	d002      	beq.n	80002e4 <__adddf3+0x84>
 80002de:	4252      	negs	r2, r2
 80002e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e4:	ea94 0f05 	teq	r4, r5
 80002e8:	f000 80a7 	beq.w	800043a <__adddf3+0x1da>
 80002ec:	f1a4 0401 	sub.w	r4, r4, #1
 80002f0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f4:	db0d      	blt.n	8000312 <__adddf3+0xb2>
 80002f6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002fa:	fa22 f205 	lsr.w	r2, r2, r5
 80002fe:	1880      	adds	r0, r0, r2
 8000300:	f141 0100 	adc.w	r1, r1, #0
 8000304:	fa03 f20e 	lsl.w	r2, r3, lr
 8000308:	1880      	adds	r0, r0, r2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	4159      	adcs	r1, r3
 8000310:	e00e      	b.n	8000330 <__adddf3+0xd0>
 8000312:	f1a5 0520 	sub.w	r5, r5, #32
 8000316:	f10e 0e20 	add.w	lr, lr, #32
 800031a:	2a01      	cmp	r2, #1
 800031c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000320:	bf28      	it	cs
 8000322:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	18c0      	adds	r0, r0, r3
 800032c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000330:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000334:	d507      	bpl.n	8000346 <__adddf3+0xe6>
 8000336:	f04f 0e00 	mov.w	lr, #0
 800033a:	f1dc 0c00 	rsbs	ip, ip, #0
 800033e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000342:	eb6e 0101 	sbc.w	r1, lr, r1
 8000346:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800034a:	d31b      	bcc.n	8000384 <__adddf3+0x124>
 800034c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000350:	d30c      	bcc.n	800036c <__adddf3+0x10c>
 8000352:	0849      	lsrs	r1, r1, #1
 8000354:	ea5f 0030 	movs.w	r0, r0, rrx
 8000358:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800035c:	f104 0401 	add.w	r4, r4, #1
 8000360:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000364:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000368:	f080 809a 	bcs.w	80004a0 <__adddf3+0x240>
 800036c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000370:	bf08      	it	eq
 8000372:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000376:	f150 0000 	adcs.w	r0, r0, #0
 800037a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037e:	ea41 0105 	orr.w	r1, r1, r5
 8000382:	bd30      	pop	{r4, r5, pc}
 8000384:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000388:	4140      	adcs	r0, r0
 800038a:	eb41 0101 	adc.w	r1, r1, r1
 800038e:	3c01      	subs	r4, #1
 8000390:	bf28      	it	cs
 8000392:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000396:	d2e9      	bcs.n	800036c <__adddf3+0x10c>
 8000398:	f091 0f00 	teq	r1, #0
 800039c:	bf04      	itt	eq
 800039e:	4601      	moveq	r1, r0
 80003a0:	2000      	moveq	r0, #0
 80003a2:	fab1 f381 	clz	r3, r1
 80003a6:	bf08      	it	eq
 80003a8:	3320      	addeq	r3, #32
 80003aa:	f1a3 030b 	sub.w	r3, r3, #11
 80003ae:	f1b3 0220 	subs.w	r2, r3, #32
 80003b2:	da0c      	bge.n	80003ce <__adddf3+0x16e>
 80003b4:	320c      	adds	r2, #12
 80003b6:	dd08      	ble.n	80003ca <__adddf3+0x16a>
 80003b8:	f102 0c14 	add.w	ip, r2, #20
 80003bc:	f1c2 020c 	rsb	r2, r2, #12
 80003c0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c4:	fa21 f102 	lsr.w	r1, r1, r2
 80003c8:	e00c      	b.n	80003e4 <__adddf3+0x184>
 80003ca:	f102 0214 	add.w	r2, r2, #20
 80003ce:	bfd8      	it	le
 80003d0:	f1c2 0c20 	rsble	ip, r2, #32
 80003d4:	fa01 f102 	lsl.w	r1, r1, r2
 80003d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003dc:	bfdc      	itt	le
 80003de:	ea41 010c 	orrle.w	r1, r1, ip
 80003e2:	4090      	lslle	r0, r2
 80003e4:	1ae4      	subs	r4, r4, r3
 80003e6:	bfa2      	ittt	ge
 80003e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003ec:	4329      	orrge	r1, r5
 80003ee:	bd30      	popge	{r4, r5, pc}
 80003f0:	ea6f 0404 	mvn.w	r4, r4
 80003f4:	3c1f      	subs	r4, #31
 80003f6:	da1c      	bge.n	8000432 <__adddf3+0x1d2>
 80003f8:	340c      	adds	r4, #12
 80003fa:	dc0e      	bgt.n	800041a <__adddf3+0x1ba>
 80003fc:	f104 0414 	add.w	r4, r4, #20
 8000400:	f1c4 0220 	rsb	r2, r4, #32
 8000404:	fa20 f004 	lsr.w	r0, r0, r4
 8000408:	fa01 f302 	lsl.w	r3, r1, r2
 800040c:	ea40 0003 	orr.w	r0, r0, r3
 8000410:	fa21 f304 	lsr.w	r3, r1, r4
 8000414:	ea45 0103 	orr.w	r1, r5, r3
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	f1c4 040c 	rsb	r4, r4, #12
 800041e:	f1c4 0220 	rsb	r2, r4, #32
 8000422:	fa20 f002 	lsr.w	r0, r0, r2
 8000426:	fa01 f304 	lsl.w	r3, r1, r4
 800042a:	ea40 0003 	orr.w	r0, r0, r3
 800042e:	4629      	mov	r1, r5
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	fa21 f004 	lsr.w	r0, r1, r4
 8000436:	4629      	mov	r1, r5
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	f094 0f00 	teq	r4, #0
 800043e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000442:	bf06      	itte	eq
 8000444:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000448:	3401      	addeq	r4, #1
 800044a:	3d01      	subne	r5, #1
 800044c:	e74e      	b.n	80002ec <__adddf3+0x8c>
 800044e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000452:	bf18      	it	ne
 8000454:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000458:	d029      	beq.n	80004ae <__adddf3+0x24e>
 800045a:	ea94 0f05 	teq	r4, r5
 800045e:	bf08      	it	eq
 8000460:	ea90 0f02 	teqeq	r0, r2
 8000464:	d005      	beq.n	8000472 <__adddf3+0x212>
 8000466:	ea54 0c00 	orrs.w	ip, r4, r0
 800046a:	bf04      	itt	eq
 800046c:	4619      	moveq	r1, r3
 800046e:	4610      	moveq	r0, r2
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea91 0f03 	teq	r1, r3
 8000476:	bf1e      	ittt	ne
 8000478:	2100      	movne	r1, #0
 800047a:	2000      	movne	r0, #0
 800047c:	bd30      	popne	{r4, r5, pc}
 800047e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000482:	d105      	bne.n	8000490 <__adddf3+0x230>
 8000484:	0040      	lsls	r0, r0, #1
 8000486:	4149      	adcs	r1, r1
 8000488:	bf28      	it	cs
 800048a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800048e:	bd30      	pop	{r4, r5, pc}
 8000490:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000494:	bf3c      	itt	cc
 8000496:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800049a:	bd30      	popcc	{r4, r5, pc}
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004a4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004a8:	f04f 0000 	mov.w	r0, #0
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf1a      	itte	ne
 80004b4:	4619      	movne	r1, r3
 80004b6:	4610      	movne	r0, r2
 80004b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004bc:	bf1c      	itt	ne
 80004be:	460b      	movne	r3, r1
 80004c0:	4602      	movne	r2, r0
 80004c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c6:	bf06      	itte	eq
 80004c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004cc:	ea91 0f03 	teqeq	r1, r3
 80004d0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	bf00      	nop

080004d8 <__aeabi_ui2d>:
 80004d8:	f090 0f00 	teq	r0, #0
 80004dc:	bf04      	itt	eq
 80004de:	2100      	moveq	r1, #0
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ec:	f04f 0500 	mov.w	r5, #0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e750      	b.n	8000398 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_i2d>:
 80004f8:	f090 0f00 	teq	r0, #0
 80004fc:	bf04      	itt	eq
 80004fe:	2100      	moveq	r1, #0
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000508:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000510:	bf48      	it	mi
 8000512:	4240      	negmi	r0, r0
 8000514:	f04f 0100 	mov.w	r1, #0
 8000518:	e73e      	b.n	8000398 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_f2d>:
 800051c:	0042      	lsls	r2, r0, #1
 800051e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000522:	ea4f 0131 	mov.w	r1, r1, rrx
 8000526:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800052a:	bf1f      	itttt	ne
 800052c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000530:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000534:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000538:	4770      	bxne	lr
 800053a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800053e:	bf08      	it	eq
 8000540:	4770      	bxeq	lr
 8000542:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000546:	bf04      	itt	eq
 8000548:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000554:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000558:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800055c:	e71c      	b.n	8000398 <__adddf3+0x138>
 800055e:	bf00      	nop

08000560 <__aeabi_ul2d>:
 8000560:	ea50 0201 	orrs.w	r2, r0, r1
 8000564:	bf08      	it	eq
 8000566:	4770      	bxeq	lr
 8000568:	b530      	push	{r4, r5, lr}
 800056a:	f04f 0500 	mov.w	r5, #0
 800056e:	e00a      	b.n	8000586 <__aeabi_l2d+0x16>

08000570 <__aeabi_l2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800057e:	d502      	bpl.n	8000586 <__aeabi_l2d+0x16>
 8000580:	4240      	negs	r0, r0
 8000582:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000586:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800058a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800058e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000592:	f43f aed8 	beq.w	8000346 <__adddf3+0xe6>
 8000596:	f04f 0203 	mov.w	r2, #3
 800059a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059e:	bf18      	it	ne
 80005a0:	3203      	addne	r2, #3
 80005a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a6:	bf18      	it	ne
 80005a8:	3203      	addne	r2, #3
 80005aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ae:	f1c2 0320 	rsb	r3, r2, #32
 80005b2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ba:	fa01 fe03 	lsl.w	lr, r1, r3
 80005be:	ea40 000e 	orr.w	r0, r0, lr
 80005c2:	fa21 f102 	lsr.w	r1, r1, r2
 80005c6:	4414      	add	r4, r2
 80005c8:	e6bd      	b.n	8000346 <__adddf3+0xe6>
 80005ca:	bf00      	nop

080005cc <__aeabi_dmul>:
 80005cc:	b570      	push	{r4, r5, r6, lr}
 80005ce:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005d2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005da:	bf1d      	ittte	ne
 80005dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005e0:	ea94 0f0c 	teqne	r4, ip
 80005e4:	ea95 0f0c 	teqne	r5, ip
 80005e8:	f000 f8de 	bleq	80007a8 <__aeabi_dmul+0x1dc>
 80005ec:	442c      	add	r4, r5
 80005ee:	ea81 0603 	eor.w	r6, r1, r3
 80005f2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005fa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fe:	bf18      	it	ne
 8000600:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000604:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000608:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800060c:	d038      	beq.n	8000680 <__aeabi_dmul+0xb4>
 800060e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000612:	f04f 0500 	mov.w	r5, #0
 8000616:	fbe1 e502 	umlal	lr, r5, r1, r2
 800061a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800061e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000622:	f04f 0600 	mov.w	r6, #0
 8000626:	fbe1 5603 	umlal	r5, r6, r1, r3
 800062a:	f09c 0f00 	teq	ip, #0
 800062e:	bf18      	it	ne
 8000630:	f04e 0e01 	orrne.w	lr, lr, #1
 8000634:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000638:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800063c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000640:	d204      	bcs.n	800064c <__aeabi_dmul+0x80>
 8000642:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000646:	416d      	adcs	r5, r5
 8000648:	eb46 0606 	adc.w	r6, r6, r6
 800064c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000650:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000654:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000658:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800065c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000660:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000664:	bf88      	it	hi
 8000666:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800066a:	d81e      	bhi.n	80006aa <__aeabi_dmul+0xde>
 800066c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000670:	bf08      	it	eq
 8000672:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000676:	f150 0000 	adcs.w	r0, r0, #0
 800067a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000684:	ea46 0101 	orr.w	r1, r6, r1
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	ea81 0103 	eor.w	r1, r1, r3
 8000690:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000694:	bfc2      	ittt	gt
 8000696:	ebd4 050c 	rsbsgt	r5, r4, ip
 800069a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069e:	bd70      	popgt	{r4, r5, r6, pc}
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f04f 0e00 	mov.w	lr, #0
 80006a8:	3c01      	subs	r4, #1
 80006aa:	f300 80ab 	bgt.w	8000804 <__aeabi_dmul+0x238>
 80006ae:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006b2:	bfde      	ittt	le
 80006b4:	2000      	movle	r0, #0
 80006b6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ba:	bd70      	pople	{r4, r5, r6, pc}
 80006bc:	f1c4 0400 	rsb	r4, r4, #0
 80006c0:	3c20      	subs	r4, #32
 80006c2:	da35      	bge.n	8000730 <__aeabi_dmul+0x164>
 80006c4:	340c      	adds	r4, #12
 80006c6:	dc1b      	bgt.n	8000700 <__aeabi_dmul+0x134>
 80006c8:	f104 0414 	add.w	r4, r4, #20
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f305 	lsl.w	r3, r0, r5
 80006d4:	fa20 f004 	lsr.w	r0, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	fa21 f604 	lsr.w	r6, r1, r4
 80006f0:	eb42 0106 	adc.w	r1, r2, r6
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f1c4 040c 	rsb	r4, r4, #12
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f304 	lsl.w	r3, r0, r4
 800070c:	fa20 f005 	lsr.w	r0, r0, r5
 8000710:	fa01 f204 	lsl.w	r2, r1, r4
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	f141 0100 	adc.w	r1, r1, #0
 8000724:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000728:	bf08      	it	eq
 800072a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072e:	bd70      	pop	{r4, r5, r6, pc}
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f205 	lsl.w	r2, r0, r5
 8000738:	ea4e 0e02 	orr.w	lr, lr, r2
 800073c:	fa20 f304 	lsr.w	r3, r0, r4
 8000740:	fa01 f205 	lsl.w	r2, r1, r5
 8000744:	ea43 0302 	orr.w	r3, r3, r2
 8000748:	fa21 f004 	lsr.w	r0, r1, r4
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	fa21 f204 	lsr.w	r2, r1, r4
 8000754:	ea20 0002 	bic.w	r0, r0, r2
 8000758:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800075c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000760:	bf08      	it	eq
 8000762:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000766:	bd70      	pop	{r4, r5, r6, pc}
 8000768:	f094 0f00 	teq	r4, #0
 800076c:	d10f      	bne.n	800078e <__aeabi_dmul+0x1c2>
 800076e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000772:	0040      	lsls	r0, r0, #1
 8000774:	eb41 0101 	adc.w	r1, r1, r1
 8000778:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800077c:	bf08      	it	eq
 800077e:	3c01      	subeq	r4, #1
 8000780:	d0f7      	beq.n	8000772 <__aeabi_dmul+0x1a6>
 8000782:	ea41 0106 	orr.w	r1, r1, r6
 8000786:	f095 0f00 	teq	r5, #0
 800078a:	bf18      	it	ne
 800078c:	4770      	bxne	lr
 800078e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000792:	0052      	lsls	r2, r2, #1
 8000794:	eb43 0303 	adc.w	r3, r3, r3
 8000798:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800079c:	bf08      	it	eq
 800079e:	3d01      	subeq	r5, #1
 80007a0:	d0f7      	beq.n	8000792 <__aeabi_dmul+0x1c6>
 80007a2:	ea43 0306 	orr.w	r3, r3, r6
 80007a6:	4770      	bx	lr
 80007a8:	ea94 0f0c 	teq	r4, ip
 80007ac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007b0:	bf18      	it	ne
 80007b2:	ea95 0f0c 	teqne	r5, ip
 80007b6:	d00c      	beq.n	80007d2 <__aeabi_dmul+0x206>
 80007b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007bc:	bf18      	it	ne
 80007be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c2:	d1d1      	bne.n	8000768 <__aeabi_dmul+0x19c>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d6:	bf06      	itte	eq
 80007d8:	4610      	moveq	r0, r2
 80007da:	4619      	moveq	r1, r3
 80007dc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e0:	d019      	beq.n	8000816 <__aeabi_dmul+0x24a>
 80007e2:	ea94 0f0c 	teq	r4, ip
 80007e6:	d102      	bne.n	80007ee <__aeabi_dmul+0x222>
 80007e8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007ec:	d113      	bne.n	8000816 <__aeabi_dmul+0x24a>
 80007ee:	ea95 0f0c 	teq	r5, ip
 80007f2:	d105      	bne.n	8000800 <__aeabi_dmul+0x234>
 80007f4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f8:	bf1c      	itt	ne
 80007fa:	4610      	movne	r0, r2
 80007fc:	4619      	movne	r1, r3
 80007fe:	d10a      	bne.n	8000816 <__aeabi_dmul+0x24a>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800080c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800081a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800081e:	bd70      	pop	{r4, r5, r6, pc}

08000820 <__aeabi_ddiv>:
 8000820:	b570      	push	{r4, r5, r6, lr}
 8000822:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000826:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800082a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082e:	bf1d      	ittte	ne
 8000830:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000834:	ea94 0f0c 	teqne	r4, ip
 8000838:	ea95 0f0c 	teqne	r5, ip
 800083c:	f000 f8a7 	bleq	800098e <__aeabi_ddiv+0x16e>
 8000840:	eba4 0405 	sub.w	r4, r4, r5
 8000844:	ea81 0e03 	eor.w	lr, r1, r3
 8000848:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800084c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000850:	f000 8088 	beq.w	8000964 <__aeabi_ddiv+0x144>
 8000854:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000858:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800085c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000860:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000864:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000868:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800086c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000870:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000874:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000878:	429d      	cmp	r5, r3
 800087a:	bf08      	it	eq
 800087c:	4296      	cmpeq	r6, r2
 800087e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000882:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000886:	d202      	bcs.n	800088e <__aeabi_ddiv+0x6e>
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	1ab6      	subs	r6, r6, r2
 8000890:	eb65 0503 	sbc.w	r5, r5, r3
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800089e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008aa:	bf22      	ittt	cs
 80008ac:	1ab6      	subcs	r6, r6, r2
 80008ae:	4675      	movcs	r5, lr
 80008b0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80008be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c2:	bf22      	ittt	cs
 80008c4:	1ab6      	subcs	r6, r6, r2
 80008c6:	4675      	movcs	r5, lr
 80008c8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008da:	bf22      	ittt	cs
 80008dc:	1ab6      	subcs	r6, r6, r2
 80008de:	4675      	movcs	r5, lr
 80008e0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f2:	bf22      	ittt	cs
 80008f4:	1ab6      	subcs	r6, r6, r2
 80008f6:	4675      	movcs	r5, lr
 80008f8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008fc:	ea55 0e06 	orrs.w	lr, r5, r6
 8000900:	d018      	beq.n	8000934 <__aeabi_ddiv+0x114>
 8000902:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000906:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800090a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000912:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000916:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800091a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091e:	d1c0      	bne.n	80008a2 <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000924:	d10b      	bne.n	800093e <__aeabi_ddiv+0x11e>
 8000926:	ea41 0100 	orr.w	r1, r1, r0
 800092a:	f04f 0000 	mov.w	r0, #0
 800092e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000932:	e7b6      	b.n	80008a2 <__aeabi_ddiv+0x82>
 8000934:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000938:	bf04      	itt	eq
 800093a:	4301      	orreq	r1, r0
 800093c:	2000      	moveq	r0, #0
 800093e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000942:	bf88      	it	hi
 8000944:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000948:	f63f aeaf 	bhi.w	80006aa <__aeabi_dmul+0xde>
 800094c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000950:	bf04      	itt	eq
 8000952:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000956:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800095a:	f150 0000 	adcs.w	r0, r0, #0
 800095e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000962:	bd70      	pop	{r4, r5, r6, pc}
 8000964:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000968:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800096c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000970:	bfc2      	ittt	gt
 8000972:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000976:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800097a:	bd70      	popgt	{r4, r5, r6, pc}
 800097c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000980:	f04f 0e00 	mov.w	lr, #0
 8000984:	3c01      	subs	r4, #1
 8000986:	e690      	b.n	80006aa <__aeabi_dmul+0xde>
 8000988:	ea45 0e06 	orr.w	lr, r5, r6
 800098c:	e68d      	b.n	80006aa <__aeabi_dmul+0xde>
 800098e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000992:	ea94 0f0c 	teq	r4, ip
 8000996:	bf08      	it	eq
 8000998:	ea95 0f0c 	teqeq	r5, ip
 800099c:	f43f af3b 	beq.w	8000816 <__aeabi_dmul+0x24a>
 80009a0:	ea94 0f0c 	teq	r4, ip
 80009a4:	d10a      	bne.n	80009bc <__aeabi_ddiv+0x19c>
 80009a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009aa:	f47f af34 	bne.w	8000816 <__aeabi_dmul+0x24a>
 80009ae:	ea95 0f0c 	teq	r5, ip
 80009b2:	f47f af25 	bne.w	8000800 <__aeabi_dmul+0x234>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e72c      	b.n	8000816 <__aeabi_dmul+0x24a>
 80009bc:	ea95 0f0c 	teq	r5, ip
 80009c0:	d106      	bne.n	80009d0 <__aeabi_ddiv+0x1b0>
 80009c2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c6:	f43f aefd 	beq.w	80007c4 <__aeabi_dmul+0x1f8>
 80009ca:	4610      	mov	r0, r2
 80009cc:	4619      	mov	r1, r3
 80009ce:	e722      	b.n	8000816 <__aeabi_dmul+0x24a>
 80009d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d4:	bf18      	it	ne
 80009d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009da:	f47f aec5 	bne.w	8000768 <__aeabi_dmul+0x19c>
 80009de:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009e2:	f47f af0d 	bne.w	8000800 <__aeabi_dmul+0x234>
 80009e6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ea:	f47f aeeb 	bne.w	80007c4 <__aeabi_dmul+0x1f8>
 80009ee:	e712      	b.n	8000816 <__aeabi_dmul+0x24a>

080009f0 <__gedf2>:
 80009f0:	f04f 3cff 	mov.w	ip, #4294967295
 80009f4:	e006      	b.n	8000a04 <__cmpdf2+0x4>
 80009f6:	bf00      	nop

080009f8 <__ledf2>:
 80009f8:	f04f 0c01 	mov.w	ip, #1
 80009fc:	e002      	b.n	8000a04 <__cmpdf2+0x4>
 80009fe:	bf00      	nop

08000a00 <__cmpdf2>:
 8000a00:	f04f 0c01 	mov.w	ip, #1
 8000a04:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a1a:	d01b      	beq.n	8000a54 <__cmpdf2+0x54>
 8000a1c:	b001      	add	sp, #4
 8000a1e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a22:	bf0c      	ite	eq
 8000a24:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a28:	ea91 0f03 	teqne	r1, r3
 8000a2c:	bf02      	ittt	eq
 8000a2e:	ea90 0f02 	teqeq	r0, r2
 8000a32:	2000      	moveq	r0, #0
 8000a34:	4770      	bxeq	lr
 8000a36:	f110 0f00 	cmn.w	r0, #0
 8000a3a:	ea91 0f03 	teq	r1, r3
 8000a3e:	bf58      	it	pl
 8000a40:	4299      	cmppl	r1, r3
 8000a42:	bf08      	it	eq
 8000a44:	4290      	cmpeq	r0, r2
 8000a46:	bf2c      	ite	cs
 8000a48:	17d8      	asrcs	r0, r3, #31
 8000a4a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4e:	f040 0001 	orr.w	r0, r0, #1
 8000a52:	4770      	bx	lr
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	d102      	bne.n	8000a64 <__cmpdf2+0x64>
 8000a5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a62:	d107      	bne.n	8000a74 <__cmpdf2+0x74>
 8000a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	d1d6      	bne.n	8000a1c <__cmpdf2+0x1c>
 8000a6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a72:	d0d3      	beq.n	8000a1c <__cmpdf2+0x1c>
 8000a74:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_cdrcmple>:
 8000a7c:	4684      	mov	ip, r0
 8000a7e:	4610      	mov	r0, r2
 8000a80:	4662      	mov	r2, ip
 8000a82:	468c      	mov	ip, r1
 8000a84:	4619      	mov	r1, r3
 8000a86:	4663      	mov	r3, ip
 8000a88:	e000      	b.n	8000a8c <__aeabi_cdcmpeq>
 8000a8a:	bf00      	nop

08000a8c <__aeabi_cdcmpeq>:
 8000a8c:	b501      	push	{r0, lr}
 8000a8e:	f7ff ffb7 	bl	8000a00 <__cmpdf2>
 8000a92:	2800      	cmp	r0, #0
 8000a94:	bf48      	it	mi
 8000a96:	f110 0f00 	cmnmi.w	r0, #0
 8000a9a:	bd01      	pop	{r0, pc}

08000a9c <__aeabi_dcmpeq>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff fff4 	bl	8000a8c <__aeabi_cdcmpeq>
 8000aa4:	bf0c      	ite	eq
 8000aa6:	2001      	moveq	r0, #1
 8000aa8:	2000      	movne	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmplt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffea 	bl	8000a8c <__aeabi_cdcmpeq>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmple>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffe0 	bl	8000a8c <__aeabi_cdcmpeq>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpge>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffce 	bl	8000a7c <__aeabi_cdrcmple>
 8000ae0:	bf94      	ite	ls
 8000ae2:	2001      	movls	r0, #1
 8000ae4:	2000      	movhi	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpgt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffc4 	bl	8000a7c <__aeabi_cdrcmple>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmpun>:
 8000b00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d102      	bne.n	8000b10 <__aeabi_dcmpun+0x10>
 8000b0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0e:	d10a      	bne.n	8000b26 <__aeabi_dcmpun+0x26>
 8000b10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__aeabi_dcmpun+0x20>
 8000b1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1e:	d102      	bne.n	8000b26 <__aeabi_dcmpun+0x26>
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	f04f 0001 	mov.w	r0, #1
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_frsub>:
 8000c5c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c60:	e002      	b.n	8000c68 <__addsf3>
 8000c62:	bf00      	nop

08000c64 <__aeabi_fsub>:
 8000c64:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c68 <__addsf3>:
 8000c68:	0042      	lsls	r2, r0, #1
 8000c6a:	bf1f      	itttt	ne
 8000c6c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c70:	ea92 0f03 	teqne	r2, r3
 8000c74:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c78:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c7c:	d06a      	beq.n	8000d54 <__addsf3+0xec>
 8000c7e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c82:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c86:	bfc1      	itttt	gt
 8000c88:	18d2      	addgt	r2, r2, r3
 8000c8a:	4041      	eorgt	r1, r0
 8000c8c:	4048      	eorgt	r0, r1
 8000c8e:	4041      	eorgt	r1, r0
 8000c90:	bfb8      	it	lt
 8000c92:	425b      	neglt	r3, r3
 8000c94:	2b19      	cmp	r3, #25
 8000c96:	bf88      	it	hi
 8000c98:	4770      	bxhi	lr
 8000c9a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ca6:	bf18      	it	ne
 8000ca8:	4240      	negne	r0, r0
 8000caa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000cae:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000cb2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000cb6:	bf18      	it	ne
 8000cb8:	4249      	negne	r1, r1
 8000cba:	ea92 0f03 	teq	r2, r3
 8000cbe:	d03f      	beq.n	8000d40 <__addsf3+0xd8>
 8000cc0:	f1a2 0201 	sub.w	r2, r2, #1
 8000cc4:	fa41 fc03 	asr.w	ip, r1, r3
 8000cc8:	eb10 000c 	adds.w	r0, r0, ip
 8000ccc:	f1c3 0320 	rsb	r3, r3, #32
 8000cd0:	fa01 f103 	lsl.w	r1, r1, r3
 8000cd4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cd8:	d502      	bpl.n	8000ce0 <__addsf3+0x78>
 8000cda:	4249      	negs	r1, r1
 8000cdc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ce0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000ce4:	d313      	bcc.n	8000d0e <__addsf3+0xa6>
 8000ce6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000cea:	d306      	bcc.n	8000cfa <__addsf3+0x92>
 8000cec:	0840      	lsrs	r0, r0, #1
 8000cee:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cf2:	f102 0201 	add.w	r2, r2, #1
 8000cf6:	2afe      	cmp	r2, #254	@ 0xfe
 8000cf8:	d251      	bcs.n	8000d9e <__addsf3+0x136>
 8000cfa:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	ea40 0003 	orr.w	r0, r0, r3
 8000d0c:	4770      	bx	lr
 8000d0e:	0049      	lsls	r1, r1, #1
 8000d10:	eb40 0000 	adc.w	r0, r0, r0
 8000d14:	3a01      	subs	r2, #1
 8000d16:	bf28      	it	cs
 8000d18:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d1c:	d2ed      	bcs.n	8000cfa <__addsf3+0x92>
 8000d1e:	fab0 fc80 	clz	ip, r0
 8000d22:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d26:	ebb2 020c 	subs.w	r2, r2, ip
 8000d2a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d2e:	bfaa      	itet	ge
 8000d30:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d34:	4252      	neglt	r2, r2
 8000d36:	4318      	orrge	r0, r3
 8000d38:	bfbc      	itt	lt
 8000d3a:	40d0      	lsrlt	r0, r2
 8000d3c:	4318      	orrlt	r0, r3
 8000d3e:	4770      	bx	lr
 8000d40:	f092 0f00 	teq	r2, #0
 8000d44:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d48:	bf06      	itte	eq
 8000d4a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d4e:	3201      	addeq	r2, #1
 8000d50:	3b01      	subne	r3, #1
 8000d52:	e7b5      	b.n	8000cc0 <__addsf3+0x58>
 8000d54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d5c:	bf18      	it	ne
 8000d5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d62:	d021      	beq.n	8000da8 <__addsf3+0x140>
 8000d64:	ea92 0f03 	teq	r2, r3
 8000d68:	d004      	beq.n	8000d74 <__addsf3+0x10c>
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	bf08      	it	eq
 8000d70:	4608      	moveq	r0, r1
 8000d72:	4770      	bx	lr
 8000d74:	ea90 0f01 	teq	r0, r1
 8000d78:	bf1c      	itt	ne
 8000d7a:	2000      	movne	r0, #0
 8000d7c:	4770      	bxne	lr
 8000d7e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d82:	d104      	bne.n	8000d8e <__addsf3+0x126>
 8000d84:	0040      	lsls	r0, r0, #1
 8000d86:	bf28      	it	cs
 8000d88:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d8c:	4770      	bx	lr
 8000d8e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d92:	bf3c      	itt	cc
 8000d94:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d98:	4770      	bxcc	lr
 8000d9a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d9e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000da2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000da6:	4770      	bx	lr
 8000da8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dac:	bf16      	itet	ne
 8000dae:	4608      	movne	r0, r1
 8000db0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000db4:	4601      	movne	r1, r0
 8000db6:	0242      	lsls	r2, r0, #9
 8000db8:	bf06      	itte	eq
 8000dba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dbe:	ea90 0f01 	teqeq	r0, r1
 8000dc2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000dc6:	4770      	bx	lr

08000dc8 <__aeabi_ui2f>:
 8000dc8:	f04f 0300 	mov.w	r3, #0
 8000dcc:	e004      	b.n	8000dd8 <__aeabi_i2f+0x8>
 8000dce:	bf00      	nop

08000dd0 <__aeabi_i2f>:
 8000dd0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000dd4:	bf48      	it	mi
 8000dd6:	4240      	negmi	r0, r0
 8000dd8:	ea5f 0c00 	movs.w	ip, r0
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000de4:	4601      	mov	r1, r0
 8000de6:	f04f 0000 	mov.w	r0, #0
 8000dea:	e01c      	b.n	8000e26 <__aeabi_l2f+0x2a>

08000dec <__aeabi_ul2f>:
 8000dec:	ea50 0201 	orrs.w	r2, r0, r1
 8000df0:	bf08      	it	eq
 8000df2:	4770      	bxeq	lr
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e00a      	b.n	8000e10 <__aeabi_l2f+0x14>
 8000dfa:	bf00      	nop

08000dfc <__aeabi_l2f>:
 8000dfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000e00:	bf08      	it	eq
 8000e02:	4770      	bxeq	lr
 8000e04:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e08:	d502      	bpl.n	8000e10 <__aeabi_l2f+0x14>
 8000e0a:	4240      	negs	r0, r0
 8000e0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e10:	ea5f 0c01 	movs.w	ip, r1
 8000e14:	bf02      	ittt	eq
 8000e16:	4684      	moveq	ip, r0
 8000e18:	4601      	moveq	r1, r0
 8000e1a:	2000      	moveq	r0, #0
 8000e1c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e20:	bf08      	it	eq
 8000e22:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e26:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e2a:	fabc f28c 	clz	r2, ip
 8000e2e:	3a08      	subs	r2, #8
 8000e30:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e34:	db10      	blt.n	8000e58 <__aeabi_l2f+0x5c>
 8000e36:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e40:	f1c2 0220 	rsb	r2, r2, #32
 8000e44:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e48:	fa20 f202 	lsr.w	r2, r0, r2
 8000e4c:	eb43 0002 	adc.w	r0, r3, r2
 8000e50:	bf08      	it	eq
 8000e52:	f020 0001 	biceq.w	r0, r0, #1
 8000e56:	4770      	bx	lr
 8000e58:	f102 0220 	add.w	r2, r2, #32
 8000e5c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e60:	f1c2 0220 	rsb	r2, r2, #32
 8000e64:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e68:	fa21 f202 	lsr.w	r2, r1, r2
 8000e6c:	eb43 0002 	adc.w	r0, r3, r2
 8000e70:	bf08      	it	eq
 8000e72:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e76:	4770      	bx	lr

08000e78 <__aeabi_fmul>:
 8000e78:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e7c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e80:	bf1e      	ittt	ne
 8000e82:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e86:	ea92 0f0c 	teqne	r2, ip
 8000e8a:	ea93 0f0c 	teqne	r3, ip
 8000e8e:	d06f      	beq.n	8000f70 <__aeabi_fmul+0xf8>
 8000e90:	441a      	add	r2, r3
 8000e92:	ea80 0c01 	eor.w	ip, r0, r1
 8000e96:	0240      	lsls	r0, r0, #9
 8000e98:	bf18      	it	ne
 8000e9a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e9e:	d01e      	beq.n	8000ede <__aeabi_fmul+0x66>
 8000ea0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000ea4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ea8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000eac:	fba0 3101 	umull	r3, r1, r0, r1
 8000eb0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000eb4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000eb8:	bf3e      	ittt	cc
 8000eba:	0049      	lslcc	r1, r1, #1
 8000ebc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ec0:	005b      	lslcc	r3, r3, #1
 8000ec2:	ea40 0001 	orr.w	r0, r0, r1
 8000ec6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000eca:	2afd      	cmp	r2, #253	@ 0xfd
 8000ecc:	d81d      	bhi.n	8000f0a <__aeabi_fmul+0x92>
 8000ece:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000ed2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ed6:	bf08      	it	eq
 8000ed8:	f020 0001 	biceq.w	r0, r0, #1
 8000edc:	4770      	bx	lr
 8000ede:	f090 0f00 	teq	r0, #0
 8000ee2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ee6:	bf08      	it	eq
 8000ee8:	0249      	lsleq	r1, r1, #9
 8000eea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ef2:	3a7f      	subs	r2, #127	@ 0x7f
 8000ef4:	bfc2      	ittt	gt
 8000ef6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000efa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000efe:	4770      	bxgt	lr
 8000f00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f04:	f04f 0300 	mov.w	r3, #0
 8000f08:	3a01      	subs	r2, #1
 8000f0a:	dc5d      	bgt.n	8000fc8 <__aeabi_fmul+0x150>
 8000f0c:	f112 0f19 	cmn.w	r2, #25
 8000f10:	bfdc      	itt	le
 8000f12:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000f16:	4770      	bxle	lr
 8000f18:	f1c2 0200 	rsb	r2, r2, #0
 8000f1c:	0041      	lsls	r1, r0, #1
 8000f1e:	fa21 f102 	lsr.w	r1, r1, r2
 8000f22:	f1c2 0220 	rsb	r2, r2, #32
 8000f26:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f2a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f2e:	f140 0000 	adc.w	r0, r0, #0
 8000f32:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f36:	bf08      	it	eq
 8000f38:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f3c:	4770      	bx	lr
 8000f3e:	f092 0f00 	teq	r2, #0
 8000f42:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f46:	bf02      	ittt	eq
 8000f48:	0040      	lsleq	r0, r0, #1
 8000f4a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f4e:	3a01      	subeq	r2, #1
 8000f50:	d0f9      	beq.n	8000f46 <__aeabi_fmul+0xce>
 8000f52:	ea40 000c 	orr.w	r0, r0, ip
 8000f56:	f093 0f00 	teq	r3, #0
 8000f5a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0049      	lsleq	r1, r1, #1
 8000f62:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f66:	3b01      	subeq	r3, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fmul+0xe6>
 8000f6a:	ea41 010c 	orr.w	r1, r1, ip
 8000f6e:	e78f      	b.n	8000e90 <__aeabi_fmul+0x18>
 8000f70:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f74:	ea92 0f0c 	teq	r2, ip
 8000f78:	bf18      	it	ne
 8000f7a:	ea93 0f0c 	teqne	r3, ip
 8000f7e:	d00a      	beq.n	8000f96 <__aeabi_fmul+0x11e>
 8000f80:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f84:	bf18      	it	ne
 8000f86:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f8a:	d1d8      	bne.n	8000f3e <__aeabi_fmul+0xc6>
 8000f8c:	ea80 0001 	eor.w	r0, r0, r1
 8000f90:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f94:	4770      	bx	lr
 8000f96:	f090 0f00 	teq	r0, #0
 8000f9a:	bf17      	itett	ne
 8000f9c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000fa0:	4608      	moveq	r0, r1
 8000fa2:	f091 0f00 	teqne	r1, #0
 8000fa6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000faa:	d014      	beq.n	8000fd6 <__aeabi_fmul+0x15e>
 8000fac:	ea92 0f0c 	teq	r2, ip
 8000fb0:	d101      	bne.n	8000fb6 <__aeabi_fmul+0x13e>
 8000fb2:	0242      	lsls	r2, r0, #9
 8000fb4:	d10f      	bne.n	8000fd6 <__aeabi_fmul+0x15e>
 8000fb6:	ea93 0f0c 	teq	r3, ip
 8000fba:	d103      	bne.n	8000fc4 <__aeabi_fmul+0x14c>
 8000fbc:	024b      	lsls	r3, r1, #9
 8000fbe:	bf18      	it	ne
 8000fc0:	4608      	movne	r0, r1
 8000fc2:	d108      	bne.n	8000fd6 <__aeabi_fmul+0x15e>
 8000fc4:	ea80 0001 	eor.w	r0, r0, r1
 8000fc8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000fcc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fd4:	4770      	bx	lr
 8000fd6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fda:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000fde:	4770      	bx	lr

08000fe0 <__aeabi_fdiv>:
 8000fe0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000fe4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fe8:	bf1e      	ittt	ne
 8000fea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fee:	ea92 0f0c 	teqne	r2, ip
 8000ff2:	ea93 0f0c 	teqne	r3, ip
 8000ff6:	d069      	beq.n	80010cc <__aeabi_fdiv+0xec>
 8000ff8:	eba2 0203 	sub.w	r2, r2, r3
 8000ffc:	ea80 0c01 	eor.w	ip, r0, r1
 8001000:	0249      	lsls	r1, r1, #9
 8001002:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8001006:	d037      	beq.n	8001078 <__aeabi_fdiv+0x98>
 8001008:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800100c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8001010:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8001014:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8001018:	428b      	cmp	r3, r1
 800101a:	bf38      	it	cc
 800101c:	005b      	lslcc	r3, r3, #1
 800101e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8001022:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8001026:	428b      	cmp	r3, r1
 8001028:	bf24      	itt	cs
 800102a:	1a5b      	subcs	r3, r3, r1
 800102c:	ea40 000c 	orrcs.w	r0, r0, ip
 8001030:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001034:	bf24      	itt	cs
 8001036:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800103a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800103e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001042:	bf24      	itt	cs
 8001044:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001048:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800104c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001050:	bf24      	itt	cs
 8001052:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001056:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800105a:	011b      	lsls	r3, r3, #4
 800105c:	bf18      	it	ne
 800105e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001062:	d1e0      	bne.n	8001026 <__aeabi_fdiv+0x46>
 8001064:	2afd      	cmp	r2, #253	@ 0xfd
 8001066:	f63f af50 	bhi.w	8000f0a <__aeabi_fmul+0x92>
 800106a:	428b      	cmp	r3, r1
 800106c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001070:	bf08      	it	eq
 8001072:	f020 0001 	biceq.w	r0, r0, #1
 8001076:	4770      	bx	lr
 8001078:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800107c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001080:	327f      	adds	r2, #127	@ 0x7f
 8001082:	bfc2      	ittt	gt
 8001084:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8001088:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800108c:	4770      	bxgt	lr
 800108e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001092:	f04f 0300 	mov.w	r3, #0
 8001096:	3a01      	subs	r2, #1
 8001098:	e737      	b.n	8000f0a <__aeabi_fmul+0x92>
 800109a:	f092 0f00 	teq	r2, #0
 800109e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80010a2:	bf02      	ittt	eq
 80010a4:	0040      	lsleq	r0, r0, #1
 80010a6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80010aa:	3a01      	subeq	r2, #1
 80010ac:	d0f9      	beq.n	80010a2 <__aeabi_fdiv+0xc2>
 80010ae:	ea40 000c 	orr.w	r0, r0, ip
 80010b2:	f093 0f00 	teq	r3, #0
 80010b6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80010ba:	bf02      	ittt	eq
 80010bc:	0049      	lsleq	r1, r1, #1
 80010be:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80010c2:	3b01      	subeq	r3, #1
 80010c4:	d0f9      	beq.n	80010ba <__aeabi_fdiv+0xda>
 80010c6:	ea41 010c 	orr.w	r1, r1, ip
 80010ca:	e795      	b.n	8000ff8 <__aeabi_fdiv+0x18>
 80010cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010d0:	ea92 0f0c 	teq	r2, ip
 80010d4:	d108      	bne.n	80010e8 <__aeabi_fdiv+0x108>
 80010d6:	0242      	lsls	r2, r0, #9
 80010d8:	f47f af7d 	bne.w	8000fd6 <__aeabi_fmul+0x15e>
 80010dc:	ea93 0f0c 	teq	r3, ip
 80010e0:	f47f af70 	bne.w	8000fc4 <__aeabi_fmul+0x14c>
 80010e4:	4608      	mov	r0, r1
 80010e6:	e776      	b.n	8000fd6 <__aeabi_fmul+0x15e>
 80010e8:	ea93 0f0c 	teq	r3, ip
 80010ec:	d104      	bne.n	80010f8 <__aeabi_fdiv+0x118>
 80010ee:	024b      	lsls	r3, r1, #9
 80010f0:	f43f af4c 	beq.w	8000f8c <__aeabi_fmul+0x114>
 80010f4:	4608      	mov	r0, r1
 80010f6:	e76e      	b.n	8000fd6 <__aeabi_fmul+0x15e>
 80010f8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80010fc:	bf18      	it	ne
 80010fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8001102:	d1ca      	bne.n	800109a <__aeabi_fdiv+0xba>
 8001104:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001108:	f47f af5c 	bne.w	8000fc4 <__aeabi_fmul+0x14c>
 800110c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001110:	f47f af3c 	bne.w	8000f8c <__aeabi_fmul+0x114>
 8001114:	e75f      	b.n	8000fd6 <__aeabi_fmul+0x15e>
 8001116:	bf00      	nop

08001118 <__gesf2>:
 8001118:	f04f 3cff 	mov.w	ip, #4294967295
 800111c:	e006      	b.n	800112c <__cmpsf2+0x4>
 800111e:	bf00      	nop

08001120 <__lesf2>:
 8001120:	f04f 0c01 	mov.w	ip, #1
 8001124:	e002      	b.n	800112c <__cmpsf2+0x4>
 8001126:	bf00      	nop

08001128 <__cmpsf2>:
 8001128:	f04f 0c01 	mov.w	ip, #1
 800112c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001130:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001134:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001138:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800113c:	bf18      	it	ne
 800113e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001142:	d011      	beq.n	8001168 <__cmpsf2+0x40>
 8001144:	b001      	add	sp, #4
 8001146:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800114a:	bf18      	it	ne
 800114c:	ea90 0f01 	teqne	r0, r1
 8001150:	bf58      	it	pl
 8001152:	ebb2 0003 	subspl.w	r0, r2, r3
 8001156:	bf88      	it	hi
 8001158:	17c8      	asrhi	r0, r1, #31
 800115a:	bf38      	it	cc
 800115c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001160:	bf18      	it	ne
 8001162:	f040 0001 	orrne.w	r0, r0, #1
 8001166:	4770      	bx	lr
 8001168:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800116c:	d102      	bne.n	8001174 <__cmpsf2+0x4c>
 800116e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001172:	d105      	bne.n	8001180 <__cmpsf2+0x58>
 8001174:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001178:	d1e4      	bne.n	8001144 <__cmpsf2+0x1c>
 800117a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800117e:	d0e1      	beq.n	8001144 <__cmpsf2+0x1c>
 8001180:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop

08001188 <__aeabi_cfrcmple>:
 8001188:	4684      	mov	ip, r0
 800118a:	4608      	mov	r0, r1
 800118c:	4661      	mov	r1, ip
 800118e:	e7ff      	b.n	8001190 <__aeabi_cfcmpeq>

08001190 <__aeabi_cfcmpeq>:
 8001190:	b50f      	push	{r0, r1, r2, r3, lr}
 8001192:	f7ff ffc9 	bl	8001128 <__cmpsf2>
 8001196:	2800      	cmp	r0, #0
 8001198:	bf48      	it	mi
 800119a:	f110 0f00 	cmnmi.w	r0, #0
 800119e:	bd0f      	pop	{r0, r1, r2, r3, pc}

080011a0 <__aeabi_fcmpeq>:
 80011a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011a4:	f7ff fff4 	bl	8001190 <__aeabi_cfcmpeq>
 80011a8:	bf0c      	ite	eq
 80011aa:	2001      	moveq	r0, #1
 80011ac:	2000      	movne	r0, #0
 80011ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80011b2:	bf00      	nop

080011b4 <__aeabi_fcmplt>:
 80011b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b8:	f7ff ffea 	bl	8001190 <__aeabi_cfcmpeq>
 80011bc:	bf34      	ite	cc
 80011be:	2001      	movcc	r0, #1
 80011c0:	2000      	movcs	r0, #0
 80011c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011c6:	bf00      	nop

080011c8 <__aeabi_fcmple>:
 80011c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011cc:	f7ff ffe0 	bl	8001190 <__aeabi_cfcmpeq>
 80011d0:	bf94      	ite	ls
 80011d2:	2001      	movls	r0, #1
 80011d4:	2000      	movhi	r0, #0
 80011d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011da:	bf00      	nop

080011dc <__aeabi_fcmpge>:
 80011dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011e0:	f7ff ffd2 	bl	8001188 <__aeabi_cfrcmple>
 80011e4:	bf94      	ite	ls
 80011e6:	2001      	movls	r0, #1
 80011e8:	2000      	movhi	r0, #0
 80011ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80011ee:	bf00      	nop

080011f0 <__aeabi_fcmpgt>:
 80011f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011f4:	f7ff ffc8 	bl	8001188 <__aeabi_cfrcmple>
 80011f8:	bf34      	ite	cc
 80011fa:	2001      	movcc	r0, #1
 80011fc:	2000      	movcs	r0, #0
 80011fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8001202:	bf00      	nop

08001204 <__aeabi_fcmpun>:
 8001204:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001208:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800120c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001210:	d102      	bne.n	8001218 <__aeabi_fcmpun+0x14>
 8001212:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001216:	d108      	bne.n	800122a <__aeabi_fcmpun+0x26>
 8001218:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800121c:	d102      	bne.n	8001224 <__aeabi_fcmpun+0x20>
 800121e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001222:	d102      	bne.n	800122a <__aeabi_fcmpun+0x26>
 8001224:	f04f 0000 	mov.w	r0, #0
 8001228:	4770      	bx	lr
 800122a:	f04f 0001 	mov.w	r0, #1
 800122e:	4770      	bx	lr

08001230 <__aeabi_d2lz>:
 8001230:	b538      	push	{r3, r4, r5, lr}
 8001232:	2200      	movs	r2, #0
 8001234:	2300      	movs	r3, #0
 8001236:	4604      	mov	r4, r0
 8001238:	460d      	mov	r5, r1
 800123a:	f7ff fc39 	bl	8000ab0 <__aeabi_dcmplt>
 800123e:	b928      	cbnz	r0, 800124c <__aeabi_d2lz+0x1c>
 8001240:	4620      	mov	r0, r4
 8001242:	4629      	mov	r1, r5
 8001244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001248:	f000 b80a 	b.w	8001260 <__aeabi_d2ulz>
 800124c:	4620      	mov	r0, r4
 800124e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001252:	f000 f805 	bl	8001260 <__aeabi_d2ulz>
 8001256:	4240      	negs	r0, r0
 8001258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800125c:	bd38      	pop	{r3, r4, r5, pc}
 800125e:	bf00      	nop

08001260 <__aeabi_d2ulz>:
 8001260:	b5d0      	push	{r4, r6, r7, lr}
 8001262:	2200      	movs	r2, #0
 8001264:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <__aeabi_d2ulz+0x34>)
 8001266:	4606      	mov	r6, r0
 8001268:	460f      	mov	r7, r1
 800126a:	f7ff f9af 	bl	80005cc <__aeabi_dmul>
 800126e:	f7ff fc85 	bl	8000b7c <__aeabi_d2uiz>
 8001272:	4604      	mov	r4, r0
 8001274:	f7ff f930 	bl	80004d8 <__aeabi_ui2d>
 8001278:	2200      	movs	r2, #0
 800127a:	4b07      	ldr	r3, [pc, #28]	@ (8001298 <__aeabi_d2ulz+0x38>)
 800127c:	f7ff f9a6 	bl	80005cc <__aeabi_dmul>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	4630      	mov	r0, r6
 8001286:	4639      	mov	r1, r7
 8001288:	f7fe ffe8 	bl	800025c <__aeabi_dsub>
 800128c:	f7ff fc76 	bl	8000b7c <__aeabi_d2uiz>
 8001290:	4621      	mov	r1, r4
 8001292:	bdd0      	pop	{r4, r6, r7, pc}
 8001294:	3df00000 	.word	0x3df00000
 8001298:	41f00000 	.word	0x41f00000

0800129c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80012a0:	4b17      	ldr	r3, [pc, #92]	@ (8001300 <MX_CAN_Init+0x64>)
 80012a2:	4a18      	ldr	r2, [pc, #96]	@ (8001304 <MX_CAN_Init+0x68>)
 80012a4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 8;
 80012a6:	4b16      	ldr	r3, [pc, #88]	@ (8001300 <MX_CAN_Init+0x64>)
 80012a8:	2208      	movs	r2, #8
 80012aa:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80012ac:	4b14      	ldr	r3, [pc, #80]	@ (8001300 <MX_CAN_Init+0x64>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80012b2:	4b13      	ldr	r3, [pc, #76]	@ (8001300 <MX_CAN_Init+0x64>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 80012b8:	4b11      	ldr	r3, [pc, #68]	@ (8001300 <MX_CAN_Init+0x64>)
 80012ba:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80012be:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 80012c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001300 <MX_CAN_Init+0x64>)
 80012c2:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 80012c6:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80012c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001300 <MX_CAN_Init+0x64>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80012ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001300 <MX_CAN_Init+0x64>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80012d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001300 <MX_CAN_Init+0x64>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80012da:	4b09      	ldr	r3, [pc, #36]	@ (8001300 <MX_CAN_Init+0x64>)
 80012dc:	2200      	movs	r2, #0
 80012de:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80012e0:	4b07      	ldr	r3, [pc, #28]	@ (8001300 <MX_CAN_Init+0x64>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80012e6:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <MX_CAN_Init+0x64>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80012ec:	4804      	ldr	r0, [pc, #16]	@ (8001300 <MX_CAN_Init+0x64>)
 80012ee:	f003 f9cd 	bl	800468c <HAL_CAN_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80012f8:	f001 fee6 	bl	80030c8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000354 	.word	0x20000354
 8001304:	40006400 	.word	0x40006400

08001308 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08a      	sub	sp, #40	@ 0x28
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a29      	ldr	r2, [pc, #164]	@ (80013c8 <HAL_CAN_MspInit+0xc0>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d14b      	bne.n	80013c0 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001328:	4b28      	ldr	r3, [pc, #160]	@ (80013cc <HAL_CAN_MspInit+0xc4>)
 800132a:	69db      	ldr	r3, [r3, #28]
 800132c:	4a27      	ldr	r2, [pc, #156]	@ (80013cc <HAL_CAN_MspInit+0xc4>)
 800132e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001332:	61d3      	str	r3, [r2, #28]
 8001334:	4b25      	ldr	r3, [pc, #148]	@ (80013cc <HAL_CAN_MspInit+0xc4>)
 8001336:	69db      	ldr	r3, [r3, #28]
 8001338:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800133c:	613b      	str	r3, [r7, #16]
 800133e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001340:	4b22      	ldr	r3, [pc, #136]	@ (80013cc <HAL_CAN_MspInit+0xc4>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	4a21      	ldr	r2, [pc, #132]	@ (80013cc <HAL_CAN_MspInit+0xc4>)
 8001346:	f043 0308 	orr.w	r3, r3, #8
 800134a:	6193      	str	r3, [r2, #24]
 800134c:	4b1f      	ldr	r3, [pc, #124]	@ (80013cc <HAL_CAN_MspInit+0xc4>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f003 0308 	and.w	r3, r3, #8
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001358:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800135c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800135e:	2300      	movs	r3, #0
 8001360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	4619      	mov	r1, r3
 800136c:	4818      	ldr	r0, [pc, #96]	@ (80013d0 <HAL_CAN_MspInit+0xc8>)
 800136e:	f004 f8ad 	bl	80054cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001372:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001378:	2302      	movs	r3, #2
 800137a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800137c:	2303      	movs	r3, #3
 800137e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	4619      	mov	r1, r3
 8001386:	4812      	ldr	r0, [pc, #72]	@ (80013d0 <HAL_CAN_MspInit+0xc8>)
 8001388:	f004 f8a0 	bl	80054cc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 800138c:	4b11      	ldr	r3, [pc, #68]	@ (80013d4 <HAL_CAN_MspInit+0xcc>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	627b      	str	r3, [r7, #36]	@ 0x24
 8001392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001394:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8001398:	627b      	str	r3, [r7, #36]	@ 0x24
 800139a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80013a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80013a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80013aa:	4a0a      	ldr	r2, [pc, #40]	@ (80013d4 <HAL_CAN_MspInit+0xcc>)
 80013ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ae:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 80013b0:	2200      	movs	r2, #0
 80013b2:	2105      	movs	r1, #5
 80013b4:	2014      	movs	r0, #20
 80013b6:	f004 f85e 	bl	8005476 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80013ba:	2014      	movs	r0, #20
 80013bc:	f004 f877 	bl	80054ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80013c0:	bf00      	nop
 80013c2:	3728      	adds	r7, #40	@ 0x28
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40006400 	.word	0x40006400
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40010c00 	.word	0x40010c00
 80013d4:	40010000 	.word	0x40010000

080013d8 <CanFilterSetup>:
}

/* USER CODE BEGIN 1 */

void CanFilterSetup(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* TODO: Review Filter Implementation */
  // Use mask and list mode to filter IDs from the CAN ID BOM

  // Filter for 0x500 and 0x600 IDs
  CAN_filter0.FilterIdHigh = 0x0000;
 80013dc:	4b10      	ldr	r3, [pc, #64]	@ (8001420 <CanFilterSetup+0x48>)
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
  CAN_filter0.FilterMaskIdHigh = 0x0000;
 80013e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001420 <CanFilterSetup+0x48>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]

  CAN_filter0.FilterIdLow = 0x0000;
 80013e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001420 <CanFilterSetup+0x48>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	605a      	str	r2, [r3, #4]
  CAN_filter0.FilterMaskIdLow = 0x0000;
 80013ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001420 <CanFilterSetup+0x48>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]

  CAN_filter0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80013f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001420 <CanFilterSetup+0x48>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	611a      	str	r2, [r3, #16]
  CAN_filter0.FilterBank = (uint32_t) 0;
 80013fa:	4b09      	ldr	r3, [pc, #36]	@ (8001420 <CanFilterSetup+0x48>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	615a      	str	r2, [r3, #20]
  CAN_filter0.FilterMode = CAN_FILTERMODE_IDMASK;
 8001400:	4b07      	ldr	r3, [pc, #28]	@ (8001420 <CanFilterSetup+0x48>)
 8001402:	2200      	movs	r2, #0
 8001404:	619a      	str	r2, [r3, #24]
  CAN_filter0.FilterScale = CAN_FILTERSCALE_16BIT;
 8001406:	4b06      	ldr	r3, [pc, #24]	@ (8001420 <CanFilterSetup+0x48>)
 8001408:	2200      	movs	r2, #0
 800140a:	61da      	str	r2, [r3, #28]
  CAN_filter0.FilterActivation = CAN_FILTER_ENABLE;
 800140c:	4b04      	ldr	r3, [pc, #16]	@ (8001420 <CanFilterSetup+0x48>)
 800140e:	2201      	movs	r2, #1
 8001410:	621a      	str	r2, [r3, #32]

  // Configure reception filters
  HAL_CAN_ConfigFilter(&hcan, &CAN_filter0);
 8001412:	4903      	ldr	r1, [pc, #12]	@ (8001420 <CanFilterSetup+0x48>)
 8001414:	4803      	ldr	r0, [pc, #12]	@ (8001424 <CanFilterSetup+0x4c>)
 8001416:	f003 fa34 	bl	8004882 <HAL_CAN_ConfigFilter>
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000708 	.word	0x20000708
 8001424:	20000354 	.word	0x20000354

08001428 <Can_Init>:

/*
 * CAN set-up: Sets up the filters, Starts CAN with HAL, and Activates notifications for interrupts.
 */
void Can_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
  CanFilterSetup();
 800142e:	f7ff ffd3 	bl	80013d8 <CanFilterSetup>
  can_start = HAL_CAN_Start(&hcan);
 8001432:	4808      	ldr	r0, [pc, #32]	@ (8001454 <Can_Init+0x2c>)
 8001434:	f003 faee 	bl	8004a14 <HAL_CAN_Start>
 8001438:	4603      	mov	r3, r0
 800143a:	461a      	mov	r2, r3
 800143c:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <Can_Init+0x30>)
 800143e:	701a      	strb	r2, [r3, #0]
  assert_param(can_start == HAL_OK);

  HAL_StatusTypeDef can_notification_status = HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001440:	2102      	movs	r1, #2
 8001442:	4804      	ldr	r0, [pc, #16]	@ (8001454 <Can_Init+0x2c>)
 8001444:	f003 fd1a 	bl	8004e7c <HAL_CAN_ActivateNotification>
 8001448:	4603      	mov	r3, r0
 800144a:	71fb      	strb	r3, [r7, #7]
  assert_param(can_notification_status == HAL_OK);

  /* To avoid warning of unused variable */
  (void) can_notification_status;
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000354 	.word	0x20000354
 8001458:	2000034c 	.word	0x2000034c

0800145c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800145c:	b5b0      	push	{r4, r5, r7, lr}
 800145e:	b08e      	sub	sp, #56	@ 0x38
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint8_t can_data[8];


  /* Get CAN message */
//  while(HAL_CAN_GetRxFifoFillLevel(hcan, CAN_RX_FIFO0) != 0) {
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can_rx_header, can_data);  // TODO: Put can_rx_header and can_data into a data structure able to be accessed in the freertos task
 8001464:	f107 030c 	add.w	r3, r7, #12
 8001468:	f107 0214 	add.w	r2, r7, #20
 800146c:	2100      	movs	r1, #0
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f003 fbe3 	bl	8004c3a <HAL_CAN_GetRxMessage>
  //  printf("%d\n\r", HAL_CAN_GetRxFifoFillLevel(hcan, CAN_RX_FIFO0));
    /* Put CAN message in the Queue */
    CAN_msg_t *new_CAN_msg;
    new_CAN_msg = osPoolAlloc(CAN_MSG_memory_pool);
 8001474:	4b20      	ldr	r3, [pc, #128]	@ (80014f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f008 fce2 	bl	8009e42 <osPoolAlloc>
 800147e:	6338      	str	r0, [r7, #48]	@ 0x30
    new_CAN_msg->header = can_rx_header;
 8001480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001482:	461d      	mov	r5, r3
 8001484:	f107 0414 	add.w	r4, r7, #20
 8001488:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800148a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800148c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001490:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    for(int i = 0; i < 8; i++) {
 8001494:	2300      	movs	r3, #0
 8001496:	637b      	str	r3, [r7, #52]	@ 0x34
 8001498:	e00d      	b.n	80014b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
      new_CAN_msg->data[i] = can_data[i];
 800149a:	f107 020c 	add.w	r2, r7, #12
 800149e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014a0:	4413      	add	r3, r2
 80014a2:	7819      	ldrb	r1, [r3, #0]
 80014a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80014a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014a8:	4413      	add	r3, r2
 80014aa:	331c      	adds	r3, #28
 80014ac:	460a      	mov	r2, r1
 80014ae:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 8; i++) {
 80014b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014b2:	3301      	adds	r3, #1
 80014b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80014b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014b8:	2b07      	cmp	r3, #7
 80014ba:	ddee      	ble.n	800149a <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
    }
    new_CAN_msg->timestamp.double_value = get_current_timestamp();
 80014bc:	f002 fd2c 	bl	8003f18 <get_current_timestamp>
 80014c0:	4603      	mov	r3, r0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff f818 	bl	80004f8 <__aeabi_i2d>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80014ce:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    osMessagePut(CAN_MSG_Rx_Queue, new_CAN_msg, osWaitForever);
 80014d2:	4b0a      	ldr	r3, [pc, #40]	@ (80014fc <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014da:	f04f 32ff 	mov.w	r2, #4294967295
 80014de:	4619      	mov	r1, r3
 80014e0:	f008 fd7a 	bl	8009fd8 <osMessagePut>
//  }

  /* Set the Flag to CAN_READY */
  osSignalSet(readCANTaskHandle, CAN_READY);
 80014e4:	4b06      	ldr	r3, [pc, #24]	@ (8001500 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2101      	movs	r1, #1
 80014ea:	4618      	mov	r0, r3
 80014ec:	f008 fbc0 	bl	8009c70 <osSignalSet>

  /* To avoid warning of unused variable */
  //(void) status;
}
 80014f0:	bf00      	nop
 80014f2:	3738      	adds	r7, #56	@ 0x38
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bdb0      	pop	{r4, r5, r7, pc}
 80014f8:	2000038c 	.word	0x2000038c
 80014fc:	20000390 	.word	0x20000390
 8001500:	20000398 	.word	0x20000398

08001504 <DebugIO_Init>:
 * Configure a UART peripheral assignment for printf debugging
 *
 * @param huart HAL handle for the UART to use for printf debugging
*/
void DebugIO_Init(UART_HandleTypeDef *huart)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
    io_huart = huart;
 800150c:	4a03      	ldr	r2, [pc, #12]	@ (800151c <DebugIO_Init+0x18>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6013      	str	r3, [r2, #0]
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	bc80      	pop	{r7}
 800151a:	4770      	bx	lr
 800151c:	2000037c 	.word	0x2000037c

08001520 <__io_putchar>:

// Configure where printf() and putchar() output goes
int __io_putchar(int ch)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
#ifdef USE_UART
    // Output on UART
    HAL_UART_Transmit(io_huart, (uint8_t *)&ch, 1, 0xFFFF);
 8001528:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <__io_putchar+0x24>)
 800152a:	6818      	ldr	r0, [r3, #0]
 800152c:	1d39      	adds	r1, r7, #4
 800152e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001532:	2201      	movs	r2, #1
 8001534:	f008 f8c8 	bl	80096c8 <HAL_UART_Transmit>
#ifdef USE_SWO
    // Output on Serial Wire Output (SWO)
    ITM_SendChar(ch);
#endif // USE_SWO

    return ch;
 8001538:	687b      	ldr	r3, [r7, #4]
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	2000037c 	.word	0x2000037c

08001548 <__io_getchar>:

int __io_getchar()
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
    // Implement if needed
    return 0;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	bc80      	pop	{r7}
 8001554:	4770      	bx	lr

08001556 <_read>:

#ifdef NO_SYSCALL
int _read(int file, char *ptr, int len)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b086      	sub	sp, #24
 800155a:	af00      	add	r7, sp, #0
 800155c:	60f8      	str	r0, [r7, #12]
 800155e:	60b9      	str	r1, [r7, #8]
 8001560:	607a      	str	r2, [r7, #4]
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
 8001566:	e00a      	b.n	800157e <_read+0x28>
    {
        *ptr++ = __io_getchar();
 8001568:	f7ff ffee 	bl	8001548 <__io_getchar>
 800156c:	4601      	mov	r1, r0
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	1c5a      	adds	r2, r3, #1
 8001572:	60ba      	str	r2, [r7, #8]
 8001574:	b2ca      	uxtb	r2, r1
 8001576:	701a      	strb	r2, [r3, #0]
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	3301      	adds	r3, #1
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	697a      	ldr	r2, [r7, #20]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	429a      	cmp	r2, r3
 8001584:	dbf0      	blt.n	8001568 <_read+0x12>
    }

    return len;
 8001586:	687b      	ldr	r3, [r7, #4]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <_write>:

int _write(int file, char *ptr, int len)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
    int DataIdx;

    for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	e009      	b.n	80015b6 <_write+0x26>
    {
        __io_putchar(*ptr++);
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	1c5a      	adds	r2, r3, #1
 80015a6:	60ba      	str	r2, [r7, #8]
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff ffb8 	bl	8001520 <__io_putchar>
    for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	3301      	adds	r3, #1
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	dbf1      	blt.n	80015a2 <_write+0x12>
    }
    return len;
 80015be:	687b      	ldr	r3, [r7, #4]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80015cc:	2200      	movs	r2, #0
 80015ce:	2140      	movs	r1, #64	@ 0x40
 80015d0:	4803      	ldr	r0, [pc, #12]	@ (80015e0 <SELECT+0x18>)
 80015d2:	f004 f926 	bl	8005822 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80015d6:	2001      	movs	r0, #1
 80015d8:	f003 f834 	bl	8004644 <HAL_Delay>
}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40010c00 	.word	0x40010c00

080015e4 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80015e8:	2201      	movs	r2, #1
 80015ea:	2140      	movs	r1, #64	@ 0x40
 80015ec:	4803      	ldr	r0, [pc, #12]	@ (80015fc <DESELECT+0x18>)
 80015ee:	f004 f918 	bl	8005822 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80015f2:	2001      	movs	r0, #1
 80015f4:	f003 f826 	bl	8004644 <HAL_Delay>
}
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40010c00 	.word	0x40010c00

08001600 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800160a:	bf00      	nop
 800160c:	4b08      	ldr	r3, [pc, #32]	@ (8001630 <SPI_TxByte+0x30>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b02      	cmp	r3, #2
 8001618:	d1f8      	bne.n	800160c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800161a:	1df9      	adds	r1, r7, #7
 800161c:	2364      	movs	r3, #100	@ 0x64
 800161e:	2201      	movs	r2, #1
 8001620:	4803      	ldr	r0, [pc, #12]	@ (8001630 <SPI_TxByte+0x30>)
 8001622:	f007 f9f7 	bl	8008a14 <HAL_SPI_Transmit>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000780 	.word	0x20000780

08001634 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001640:	bf00      	nop
 8001642:	4b08      	ldr	r3, [pc, #32]	@ (8001664 <SPI_TxBuffer+0x30>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b02      	cmp	r3, #2
 800164e:	d1f8      	bne.n	8001642 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001650:	887a      	ldrh	r2, [r7, #2]
 8001652:	2364      	movs	r3, #100	@ 0x64
 8001654:	6879      	ldr	r1, [r7, #4]
 8001656:	4803      	ldr	r0, [pc, #12]	@ (8001664 <SPI_TxBuffer+0x30>)
 8001658:	f007 f9dc 	bl	8008a14 <HAL_SPI_Transmit>
}
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000780 	.word	0x20000780

08001668 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800166e:	23ff      	movs	r3, #255	@ 0xff
 8001670:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001672:	bf00      	nop
 8001674:	4b09      	ldr	r3, [pc, #36]	@ (800169c <SPI_RxByte+0x34>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b02      	cmp	r3, #2
 8001680:	d1f8      	bne.n	8001674 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001682:	1dba      	adds	r2, r7, #6
 8001684:	1df9      	adds	r1, r7, #7
 8001686:	2364      	movs	r3, #100	@ 0x64
 8001688:	9300      	str	r3, [sp, #0]
 800168a:	2301      	movs	r3, #1
 800168c:	4803      	ldr	r0, [pc, #12]	@ (800169c <SPI_RxByte+0x34>)
 800168e:	f007 fb04 	bl	8008c9a <HAL_SPI_TransmitReceive>

	return data;
 8001692:	79bb      	ldrb	r3, [r7, #6]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000780 	.word	0x20000780

080016a0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80016a8:	f7ff ffde 	bl	8001668 <SPI_RxByte>
 80016ac:	4603      	mov	r3, r0
 80016ae:	461a      	mov	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	701a      	strb	r2, [r3, #0]
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80016c2:	4b0a      	ldr	r3, [pc, #40]	@ (80016ec <SD_ReadyWait+0x30>)
 80016c4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80016c8:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80016ca:	f7ff ffcd 	bl	8001668 <SPI_RxByte>
 80016ce:	4603      	mov	r3, r0
 80016d0:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	2bff      	cmp	r3, #255	@ 0xff
 80016d6:	d003      	beq.n	80016e0 <SD_ReadyWait+0x24>
 80016d8:	4b04      	ldr	r3, [pc, #16]	@ (80016ec <SD_ReadyWait+0x30>)
 80016da:	881b      	ldrh	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1f4      	bne.n	80016ca <SD_ReadyWait+0xe>

	return res;
 80016e0:	79fb      	ldrb	r3, [r7, #7]
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000382 	.word	0x20000382

080016f0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80016f6:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80016fa:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80016fc:	f7ff ff72 	bl	80015e4 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001700:	2300      	movs	r3, #0
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	e005      	b.n	8001712 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001706:	20ff      	movs	r0, #255	@ 0xff
 8001708:	f7ff ff7a 	bl	8001600 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	3301      	adds	r3, #1
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	2b09      	cmp	r3, #9
 8001716:	ddf6      	ble.n	8001706 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001718:	f7ff ff56 	bl	80015c8 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800171c:	2340      	movs	r3, #64	@ 0x40
 800171e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001724:	2300      	movs	r3, #0
 8001726:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001730:	2395      	movs	r3, #149	@ 0x95
 8001732:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001734:	463b      	mov	r3, r7
 8001736:	2106      	movs	r1, #6
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff7b 	bl	8001634 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800173e:	e002      	b.n	8001746 <SD_PowerOn+0x56>
	{
		cnt--;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	3b01      	subs	r3, #1
 8001744:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001746:	f7ff ff8f 	bl	8001668 <SPI_RxByte>
 800174a:	4603      	mov	r3, r0
 800174c:	2b01      	cmp	r3, #1
 800174e:	d002      	beq.n	8001756 <SD_PowerOn+0x66>
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f4      	bne.n	8001740 <SD_PowerOn+0x50>
	}

	DESELECT();
 8001756:	f7ff ff45 	bl	80015e4 <DESELECT>
	SPI_TxByte(0XFF);
 800175a:	20ff      	movs	r0, #255	@ 0xff
 800175c:	f7ff ff50 	bl	8001600 <SPI_TxByte>

	PowerFlag = 1;
 8001760:	4b03      	ldr	r3, [pc, #12]	@ (8001770 <SD_PowerOn+0x80>)
 8001762:	2201      	movs	r2, #1
 8001764:	701a      	strb	r2, [r3, #0]
}
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000385 	.word	0x20000385

08001774 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001778:	4b03      	ldr	r3, [pc, #12]	@ (8001788 <SD_PowerOff+0x14>)
 800177a:	2200      	movs	r2, #0
 800177c:	701a      	strb	r2, [r3, #0]
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	20000385 	.word	0x20000385

0800178c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001790:	4b02      	ldr	r3, [pc, #8]	@ (800179c <SD_CheckPower+0x10>)
 8001792:	781b      	ldrb	r3, [r3, #0]
}
 8001794:	4618      	mov	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr
 800179c:	20000385 	.word	0x20000385

080017a0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80017aa:	4b13      	ldr	r3, [pc, #76]	@ (80017f8 <SD_RxDataBlock+0x58>)
 80017ac:	22c8      	movs	r2, #200	@ 0xc8
 80017ae:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80017b0:	f7ff ff5a 	bl	8001668 <SPI_RxByte>
 80017b4:	4603      	mov	r3, r0
 80017b6:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80017b8:	7bfb      	ldrb	r3, [r7, #15]
 80017ba:	2bff      	cmp	r3, #255	@ 0xff
 80017bc:	d103      	bne.n	80017c6 <SD_RxDataBlock+0x26>
 80017be:	4b0e      	ldr	r3, [pc, #56]	@ (80017f8 <SD_RxDataBlock+0x58>)
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1f4      	bne.n	80017b0 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
 80017c8:	2bfe      	cmp	r3, #254	@ 0xfe
 80017ca:	d001      	beq.n	80017d0 <SD_RxDataBlock+0x30>
 80017cc:	2300      	movs	r3, #0
 80017ce:	e00f      	b.n	80017f0 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	1c5a      	adds	r2, r3, #1
 80017d4:	607a      	str	r2, [r7, #4]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff ff62 	bl	80016a0 <SPI_RxBytePtr>
	} while(len--);
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	1e5a      	subs	r2, r3, #1
 80017e0:	603a      	str	r2, [r7, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1f4      	bne.n	80017d0 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 80017e6:	f7ff ff3f 	bl	8001668 <SPI_RxByte>
	SPI_RxByte();
 80017ea:	f7ff ff3d 	bl	8001668 <SPI_RxByte>

	return TRUE;
 80017ee:	2301      	movs	r3, #1
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3710      	adds	r7, #16
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20000380 	.word	0x20000380

080017fc <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 800180c:	f7ff ff56 	bl	80016bc <SD_ReadyWait>
 8001810:	4603      	mov	r3, r0
 8001812:	2bff      	cmp	r3, #255	@ 0xff
 8001814:	d001      	beq.n	800181a <SD_TxDataBlock+0x1e>
 8001816:	2300      	movs	r3, #0
 8001818:	e02f      	b.n	800187a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800181a:	78fb      	ldrb	r3, [r7, #3]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff feef 	bl	8001600 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8001822:	78fb      	ldrb	r3, [r7, #3]
 8001824:	2bfd      	cmp	r3, #253	@ 0xfd
 8001826:	d020      	beq.n	800186a <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001828:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff ff01 	bl	8001634 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001832:	f7ff ff19 	bl	8001668 <SPI_RxByte>
		SPI_RxByte();
 8001836:	f7ff ff17 	bl	8001668 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800183a:	e00b      	b.n	8001854 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 800183c:	f7ff ff14 	bl	8001668 <SPI_RxByte>
 8001840:	4603      	mov	r3, r0
 8001842:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001844:	7bfb      	ldrb	r3, [r7, #15]
 8001846:	f003 031f 	and.w	r3, r3, #31
 800184a:	2b05      	cmp	r3, #5
 800184c:	d006      	beq.n	800185c <SD_TxDataBlock+0x60>
			i++;
 800184e:	7bbb      	ldrb	r3, [r7, #14]
 8001850:	3301      	adds	r3, #1
 8001852:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001854:	7bbb      	ldrb	r3, [r7, #14]
 8001856:	2b40      	cmp	r3, #64	@ 0x40
 8001858:	d9f0      	bls.n	800183c <SD_TxDataBlock+0x40>
 800185a:	e000      	b.n	800185e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 800185c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 800185e:	bf00      	nop
 8001860:	f7ff ff02 	bl	8001668 <SPI_RxByte>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0fa      	beq.n	8001860 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	f003 031f 	and.w	r3, r3, #31
 8001870:	2b05      	cmp	r3, #5
 8001872:	d101      	bne.n	8001878 <SD_TxDataBlock+0x7c>
 8001874:	2301      	movs	r3, #1
 8001876:	e000      	b.n	800187a <SD_TxDataBlock+0x7e>

	return FALSE;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b084      	sub	sp, #16
 8001886:	af00      	add	r7, sp, #0
 8001888:	4603      	mov	r3, r0
 800188a:	6039      	str	r1, [r7, #0]
 800188c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 800188e:	f7ff ff15 	bl	80016bc <SD_ReadyWait>
 8001892:	4603      	mov	r3, r0
 8001894:	2bff      	cmp	r3, #255	@ 0xff
 8001896:	d001      	beq.n	800189c <SD_SendCmd+0x1a>
 8001898:	23ff      	movs	r3, #255	@ 0xff
 800189a:	e042      	b.n	8001922 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff feae 	bl	8001600 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	0e1b      	lsrs	r3, r3, #24
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff fea8 	bl	8001600 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	0c1b      	lsrs	r3, r3, #16
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff fea2 	bl	8001600 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	0a1b      	lsrs	r3, r3, #8
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fe9c 	bl	8001600 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fe97 	bl	8001600 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	2b40      	cmp	r3, #64	@ 0x40
 80018d6:	d102      	bne.n	80018de <SD_SendCmd+0x5c>
 80018d8:	2395      	movs	r3, #149	@ 0x95
 80018da:	73fb      	strb	r3, [r7, #15]
 80018dc:	e007      	b.n	80018ee <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	2b48      	cmp	r3, #72	@ 0x48
 80018e2:	d102      	bne.n	80018ea <SD_SendCmd+0x68>
 80018e4:	2387      	movs	r3, #135	@ 0x87
 80018e6:	73fb      	strb	r3, [r7, #15]
 80018e8:	e001      	b.n	80018ee <SD_SendCmd+0x6c>
	else crc = 1;
 80018ea:	2301      	movs	r3, #1
 80018ec:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fe85 	bl	8001600 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	2b4c      	cmp	r3, #76	@ 0x4c
 80018fa:	d101      	bne.n	8001900 <SD_SendCmd+0x7e>
 80018fc:	f7ff feb4 	bl	8001668 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001900:	230a      	movs	r3, #10
 8001902:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001904:	f7ff feb0 	bl	8001668 <SPI_RxByte>
 8001908:	4603      	mov	r3, r0
 800190a:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 800190c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001910:	2b00      	cmp	r3, #0
 8001912:	da05      	bge.n	8001920 <SD_SendCmd+0x9e>
 8001914:	7bbb      	ldrb	r3, [r7, #14]
 8001916:	3b01      	subs	r3, #1
 8001918:	73bb      	strb	r3, [r7, #14]
 800191a:	7bbb      	ldrb	r3, [r7, #14]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1f1      	bne.n	8001904 <SD_SendCmd+0x82>

	return res;
 8001920:	7b7b      	ldrb	r3, [r7, #13]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 800192c:	b590      	push	{r4, r7, lr}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <SD_disk_initialize+0x14>
 800193c:	2301      	movs	r3, #1
 800193e:	e0d1      	b.n	8001ae4 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001940:	4b6a      	ldr	r3, [pc, #424]	@ (8001aec <SD_disk_initialize+0x1c0>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	b2db      	uxtb	r3, r3
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <SD_disk_initialize+0x2a>
 800194e:	4b67      	ldr	r3, [pc, #412]	@ (8001aec <SD_disk_initialize+0x1c0>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	b2db      	uxtb	r3, r3
 8001954:	e0c6      	b.n	8001ae4 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 8001956:	f7ff fecb 	bl	80016f0 <SD_PowerOn>

	/* slave select */
	SELECT();
 800195a:	f7ff fe35 	bl	80015c8 <SELECT>

	/* check disk type */
	type = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001962:	2100      	movs	r1, #0
 8001964:	2040      	movs	r0, #64	@ 0x40
 8001966:	f7ff ff8c 	bl	8001882 <SD_SendCmd>
 800196a:	4603      	mov	r3, r0
 800196c:	2b01      	cmp	r3, #1
 800196e:	f040 80a1 	bne.w	8001ab4 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001972:	4b5f      	ldr	r3, [pc, #380]	@ (8001af0 <SD_disk_initialize+0x1c4>)
 8001974:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001978:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800197a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800197e:	2048      	movs	r0, #72	@ 0x48
 8001980:	f7ff ff7f 	bl	8001882 <SD_SendCmd>
 8001984:	4603      	mov	r3, r0
 8001986:	2b01      	cmp	r3, #1
 8001988:	d155      	bne.n	8001a36 <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800198a:	2300      	movs	r3, #0
 800198c:	73fb      	strb	r3, [r7, #15]
 800198e:	e00c      	b.n	80019aa <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001990:	7bfc      	ldrb	r4, [r7, #15]
 8001992:	f7ff fe69 	bl	8001668 <SPI_RxByte>
 8001996:	4603      	mov	r3, r0
 8001998:	461a      	mov	r2, r3
 800199a:	f104 0310 	add.w	r3, r4, #16
 800199e:	443b      	add	r3, r7
 80019a0:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80019a4:	7bfb      	ldrb	r3, [r7, #15]
 80019a6:	3301      	adds	r3, #1
 80019a8:	73fb      	strb	r3, [r7, #15]
 80019aa:	7bfb      	ldrb	r3, [r7, #15]
 80019ac:	2b03      	cmp	r3, #3
 80019ae:	d9ef      	bls.n	8001990 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80019b0:	7abb      	ldrb	r3, [r7, #10]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d17e      	bne.n	8001ab4 <SD_disk_initialize+0x188>
 80019b6:	7afb      	ldrb	r3, [r7, #11]
 80019b8:	2baa      	cmp	r3, #170	@ 0xaa
 80019ba:	d17b      	bne.n	8001ab4 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80019bc:	2100      	movs	r1, #0
 80019be:	2077      	movs	r0, #119	@ 0x77
 80019c0:	f7ff ff5f 	bl	8001882 <SD_SendCmd>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d807      	bhi.n	80019da <SD_disk_initialize+0xae>
 80019ca:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80019ce:	2069      	movs	r0, #105	@ 0x69
 80019d0:	f7ff ff57 	bl	8001882 <SD_SendCmd>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d004      	beq.n	80019e4 <SD_disk_initialize+0xb8>
				} while (Timer1);
 80019da:	4b45      	ldr	r3, [pc, #276]	@ (8001af0 <SD_disk_initialize+0x1c4>)
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1ec      	bne.n	80019bc <SD_disk_initialize+0x90>
 80019e2:	e000      	b.n	80019e6 <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80019e4:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80019e6:	4b42      	ldr	r3, [pc, #264]	@ (8001af0 <SD_disk_initialize+0x1c4>)
 80019e8:	881b      	ldrh	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d062      	beq.n	8001ab4 <SD_disk_initialize+0x188>
 80019ee:	2100      	movs	r1, #0
 80019f0:	207a      	movs	r0, #122	@ 0x7a
 80019f2:	f7ff ff46 	bl	8001882 <SD_SendCmd>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d15b      	bne.n	8001ab4 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 80019fc:	2300      	movs	r3, #0
 80019fe:	73fb      	strb	r3, [r7, #15]
 8001a00:	e00c      	b.n	8001a1c <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8001a02:	7bfc      	ldrb	r4, [r7, #15]
 8001a04:	f7ff fe30 	bl	8001668 <SPI_RxByte>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	f104 0310 	add.w	r3, r4, #16
 8001a10:	443b      	add	r3, r7
 8001a12:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	73fb      	strb	r3, [r7, #15]
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	2b03      	cmp	r3, #3
 8001a20:	d9ef      	bls.n	8001a02 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001a22:	7a3b      	ldrb	r3, [r7, #8]
 8001a24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <SD_disk_initialize+0x104>
 8001a2c:	230c      	movs	r3, #12
 8001a2e:	e000      	b.n	8001a32 <SD_disk_initialize+0x106>
 8001a30:	2304      	movs	r3, #4
 8001a32:	73bb      	strb	r3, [r7, #14]
 8001a34:	e03e      	b.n	8001ab4 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001a36:	2100      	movs	r1, #0
 8001a38:	2077      	movs	r0, #119	@ 0x77
 8001a3a:	f7ff ff22 	bl	8001882 <SD_SendCmd>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d808      	bhi.n	8001a56 <SD_disk_initialize+0x12a>
 8001a44:	2100      	movs	r1, #0
 8001a46:	2069      	movs	r0, #105	@ 0x69
 8001a48:	f7ff ff1b 	bl	8001882 <SD_SendCmd>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d801      	bhi.n	8001a56 <SD_disk_initialize+0x12a>
 8001a52:	2302      	movs	r3, #2
 8001a54:	e000      	b.n	8001a58 <SD_disk_initialize+0x12c>
 8001a56:	2301      	movs	r3, #1
 8001a58:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001a5a:	7bbb      	ldrb	r3, [r7, #14]
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d10e      	bne.n	8001a7e <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001a60:	2100      	movs	r1, #0
 8001a62:	2077      	movs	r0, #119	@ 0x77
 8001a64:	f7ff ff0d 	bl	8001882 <SD_SendCmd>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d80e      	bhi.n	8001a8c <SD_disk_initialize+0x160>
 8001a6e:	2100      	movs	r1, #0
 8001a70:	2069      	movs	r0, #105	@ 0x69
 8001a72:	f7ff ff06 	bl	8001882 <SD_SendCmd>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d107      	bne.n	8001a8c <SD_disk_initialize+0x160>
 8001a7c:	e00c      	b.n	8001a98 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001a7e:	2100      	movs	r1, #0
 8001a80:	2041      	movs	r0, #65	@ 0x41
 8001a82:	f7ff fefe 	bl	8001882 <SD_SendCmd>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d004      	beq.n	8001a96 <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8001a8c:	4b18      	ldr	r3, [pc, #96]	@ (8001af0 <SD_disk_initialize+0x1c4>)
 8001a8e:	881b      	ldrh	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d1e2      	bne.n	8001a5a <SD_disk_initialize+0x12e>
 8001a94:	e000      	b.n	8001a98 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001a96:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001a98:	4b15      	ldr	r3, [pc, #84]	@ (8001af0 <SD_disk_initialize+0x1c4>)
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d007      	beq.n	8001ab0 <SD_disk_initialize+0x184>
 8001aa0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001aa4:	2050      	movs	r0, #80	@ 0x50
 8001aa6:	f7ff feec 	bl	8001882 <SD_SendCmd>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <SD_disk_initialize+0x188>
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001ab4:	4a0f      	ldr	r2, [pc, #60]	@ (8001af4 <SD_disk_initialize+0x1c8>)
 8001ab6:	7bbb      	ldrb	r3, [r7, #14]
 8001ab8:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001aba:	f7ff fd93 	bl	80015e4 <DESELECT>
	SPI_RxByte();
 8001abe:	f7ff fdd3 	bl	8001668 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001ac2:	7bbb      	ldrb	r3, [r7, #14]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d008      	beq.n	8001ada <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8001ac8:	4b08      	ldr	r3, [pc, #32]	@ (8001aec <SD_disk_initialize+0x1c0>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	f023 0301 	bic.w	r3, r3, #1
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	4b05      	ldr	r3, [pc, #20]	@ (8001aec <SD_disk_initialize+0x1c0>)
 8001ad6:	701a      	strb	r2, [r3, #0]
 8001ad8:	e001      	b.n	8001ade <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001ada:	f7ff fe4b 	bl	8001774 <SD_PowerOff>
	}

	return Stat;
 8001ade:	4b03      	ldr	r3, [pc, #12]	@ (8001aec <SD_disk_initialize+0x1c0>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	b2db      	uxtb	r3, r3
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd90      	pop	{r4, r7, pc}
 8001aec:	200000d8 	.word	0x200000d8
 8001af0:	20000380 	.word	0x20000380
 8001af4:	20000384 	.word	0x20000384

08001af8 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <SD_disk_status+0x14>
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e002      	b.n	8001b12 <SD_disk_status+0x1a>
	return Stat;
 8001b0c:	4b03      	ldr	r3, [pc, #12]	@ (8001b1c <SD_disk_status+0x24>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	b2db      	uxtb	r3, r3
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr
 8001b1c:	200000d8 	.word	0x200000d8

08001b20 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60b9      	str	r1, [r7, #8]
 8001b28:	607a      	str	r2, [r7, #4]
 8001b2a:	603b      	str	r3, [r7, #0]
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d102      	bne.n	8001b3c <SD_disk_read+0x1c>
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <SD_disk_read+0x20>
 8001b3c:	2304      	movs	r3, #4
 8001b3e:	e051      	b.n	8001be4 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001b40:	4b2a      	ldr	r3, [pc, #168]	@ (8001bec <SD_disk_read+0xcc>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <SD_disk_read+0x32>
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e048      	b.n	8001be4 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001b52:	4b27      	ldr	r3, [pc, #156]	@ (8001bf0 <SD_disk_read+0xd0>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	f003 0304 	and.w	r3, r3, #4
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d102      	bne.n	8001b64 <SD_disk_read+0x44>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	025b      	lsls	r3, r3, #9
 8001b62:	607b      	str	r3, [r7, #4]

	SELECT();
 8001b64:	f7ff fd30 	bl	80015c8 <SELECT>

	if (count == 1)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d111      	bne.n	8001b92 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	2051      	movs	r0, #81	@ 0x51
 8001b72:	f7ff fe86 	bl	8001882 <SD_SendCmd>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d129      	bne.n	8001bd0 <SD_disk_read+0xb0>
 8001b7c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b80:	68b8      	ldr	r0, [r7, #8]
 8001b82:	f7ff fe0d 	bl	80017a0 <SD_RxDataBlock>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d021      	beq.n	8001bd0 <SD_disk_read+0xb0>
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	603b      	str	r3, [r7, #0]
 8001b90:	e01e      	b.n	8001bd0 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	2052      	movs	r0, #82	@ 0x52
 8001b96:	f7ff fe74 	bl	8001882 <SD_SendCmd>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d117      	bne.n	8001bd0 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001ba0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ba4:	68b8      	ldr	r0, [r7, #8]
 8001ba6:	f7ff fdfb 	bl	80017a0 <SD_RxDataBlock>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d00a      	beq.n	8001bc6 <SD_disk_read+0xa6>
				buff += 512;
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001bb6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	603b      	str	r3, [r7, #0]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1ed      	bne.n	8001ba0 <SD_disk_read+0x80>
 8001bc4:	e000      	b.n	8001bc8 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001bc6:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001bc8:	2100      	movs	r1, #0
 8001bca:	204c      	movs	r0, #76	@ 0x4c
 8001bcc:	f7ff fe59 	bl	8001882 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001bd0:	f7ff fd08 	bl	80015e4 <DESELECT>
	SPI_RxByte();
 8001bd4:	f7ff fd48 	bl	8001668 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	bf14      	ite	ne
 8001bde:	2301      	movne	r3, #1
 8001be0:	2300      	moveq	r3, #0
 8001be2:	b2db      	uxtb	r3, r3
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	200000d8 	.word	0x200000d8
 8001bf0:	20000384 	.word	0x20000384

08001bf4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	607a      	str	r2, [r7, #4]
 8001bfe:	603b      	str	r3, [r7, #0]
 8001c00:	4603      	mov	r3, r0
 8001c02:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d102      	bne.n	8001c10 <SD_disk_write+0x1c>
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <SD_disk_write+0x20>
 8001c10:	2304      	movs	r3, #4
 8001c12:	e06b      	b.n	8001cec <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001c14:	4b37      	ldr	r3, [pc, #220]	@ (8001cf4 <SD_disk_write+0x100>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <SD_disk_write+0x32>
 8001c22:	2303      	movs	r3, #3
 8001c24:	e062      	b.n	8001cec <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001c26:	4b33      	ldr	r3, [pc, #204]	@ (8001cf4 <SD_disk_write+0x100>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <SD_disk_write+0x44>
 8001c34:	2302      	movs	r3, #2
 8001c36:	e059      	b.n	8001cec <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001c38:	4b2f      	ldr	r3, [pc, #188]	@ (8001cf8 <SD_disk_write+0x104>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d102      	bne.n	8001c4a <SD_disk_write+0x56>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	025b      	lsls	r3, r3, #9
 8001c48:	607b      	str	r3, [r7, #4]

	SELECT();
 8001c4a:	f7ff fcbd 	bl	80015c8 <SELECT>

	if (count == 1)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d110      	bne.n	8001c76 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001c54:	6879      	ldr	r1, [r7, #4]
 8001c56:	2058      	movs	r0, #88	@ 0x58
 8001c58:	f7ff fe13 	bl	8001882 <SD_SendCmd>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d13a      	bne.n	8001cd8 <SD_disk_write+0xe4>
 8001c62:	21fe      	movs	r1, #254	@ 0xfe
 8001c64:	68b8      	ldr	r0, [r7, #8]
 8001c66:	f7ff fdc9 	bl	80017fc <SD_TxDataBlock>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d033      	beq.n	8001cd8 <SD_disk_write+0xe4>
			count = 0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	603b      	str	r3, [r7, #0]
 8001c74:	e030      	b.n	8001cd8 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001c76:	4b20      	ldr	r3, [pc, #128]	@ (8001cf8 <SD_disk_write+0x104>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d007      	beq.n	8001c92 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001c82:	2100      	movs	r1, #0
 8001c84:	2077      	movs	r0, #119	@ 0x77
 8001c86:	f7ff fdfc 	bl	8001882 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001c8a:	6839      	ldr	r1, [r7, #0]
 8001c8c:	2057      	movs	r0, #87	@ 0x57
 8001c8e:	f7ff fdf8 	bl	8001882 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	2059      	movs	r0, #89	@ 0x59
 8001c96:	f7ff fdf4 	bl	8001882 <SD_SendCmd>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d11b      	bne.n	8001cd8 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001ca0:	21fc      	movs	r1, #252	@ 0xfc
 8001ca2:	68b8      	ldr	r0, [r7, #8]
 8001ca4:	f7ff fdaa 	bl	80017fc <SD_TxDataBlock>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00a      	beq.n	8001cc4 <SD_disk_write+0xd0>
				buff += 512;
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001cb4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	603b      	str	r3, [r7, #0]
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1ee      	bne.n	8001ca0 <SD_disk_write+0xac>
 8001cc2:	e000      	b.n	8001cc6 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001cc4:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001cc6:	21fd      	movs	r1, #253	@ 0xfd
 8001cc8:	2000      	movs	r0, #0
 8001cca:	f7ff fd97 	bl	80017fc <SD_TxDataBlock>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <SD_disk_write+0xe4>
			{
				count = 1;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001cd8:	f7ff fc84 	bl	80015e4 <DESELECT>
	SPI_RxByte();
 8001cdc:	f7ff fcc4 	bl	8001668 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	bf14      	ite	ne
 8001ce6:	2301      	movne	r3, #1
 8001ce8:	2300      	moveq	r3, #0
 8001cea:	b2db      	uxtb	r3, r3
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	200000d8 	.word	0x200000d8
 8001cf8:	20000384 	.word	0x20000384

08001cfc <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001cfc:	b590      	push	{r4, r7, lr}
 8001cfe:	b08b      	sub	sp, #44	@ 0x2c
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	603a      	str	r2, [r7, #0]
 8001d06:	71fb      	strb	r3, [r7, #7]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <SD_disk_ioctl+0x1e>
 8001d16:	2304      	movs	r3, #4
 8001d18:	e113      	b.n	8001f42 <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8001d20:	79bb      	ldrb	r3, [r7, #6]
 8001d22:	2b05      	cmp	r3, #5
 8001d24:	d124      	bne.n	8001d70 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001d26:	6a3b      	ldr	r3, [r7, #32]
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d012      	beq.n	8001d54 <SD_disk_ioctl+0x58>
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	dc1a      	bgt.n	8001d68 <SD_disk_ioctl+0x6c>
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d002      	beq.n	8001d3c <SD_disk_ioctl+0x40>
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d006      	beq.n	8001d48 <SD_disk_ioctl+0x4c>
 8001d3a:	e015      	b.n	8001d68 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001d3c:	f7ff fd1a 	bl	8001774 <SD_PowerOff>
			res = RES_OK;
 8001d40:	2300      	movs	r3, #0
 8001d42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001d46:	e0fa      	b.n	8001f3e <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8001d48:	f7ff fcd2 	bl	80016f0 <SD_PowerOn>
			res = RES_OK;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001d52:	e0f4      	b.n	8001f3e <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001d54:	6a3b      	ldr	r3, [r7, #32]
 8001d56:	1c5c      	adds	r4, r3, #1
 8001d58:	f7ff fd18 	bl	800178c <SD_CheckPower>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001d60:	2300      	movs	r3, #0
 8001d62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001d66:	e0ea      	b.n	8001f3e <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8001d68:	2304      	movs	r3, #4
 8001d6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001d6e:	e0e6      	b.n	8001f3e <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001d70:	4b76      	ldr	r3, [pc, #472]	@ (8001f4c <SD_disk_ioctl+0x250>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <SD_disk_ioctl+0x86>
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e0df      	b.n	8001f42 <SD_disk_ioctl+0x246>

		SELECT();
 8001d82:	f7ff fc21 	bl	80015c8 <SELECT>

		switch (ctrl)
 8001d86:	79bb      	ldrb	r3, [r7, #6]
 8001d88:	2b0d      	cmp	r3, #13
 8001d8a:	f200 80c9 	bhi.w	8001f20 <SD_disk_ioctl+0x224>
 8001d8e:	a201      	add	r2, pc, #4	@ (adr r2, 8001d94 <SD_disk_ioctl+0x98>)
 8001d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d94:	08001e8b 	.word	0x08001e8b
 8001d98:	08001dcd 	.word	0x08001dcd
 8001d9c:	08001e7b 	.word	0x08001e7b
 8001da0:	08001f21 	.word	0x08001f21
 8001da4:	08001f21 	.word	0x08001f21
 8001da8:	08001f21 	.word	0x08001f21
 8001dac:	08001f21 	.word	0x08001f21
 8001db0:	08001f21 	.word	0x08001f21
 8001db4:	08001f21 	.word	0x08001f21
 8001db8:	08001f21 	.word	0x08001f21
 8001dbc:	08001f21 	.word	0x08001f21
 8001dc0:	08001e9d 	.word	0x08001e9d
 8001dc4:	08001ec1 	.word	0x08001ec1
 8001dc8:	08001ee5 	.word	0x08001ee5
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001dcc:	2100      	movs	r1, #0
 8001dce:	2049      	movs	r0, #73	@ 0x49
 8001dd0:	f7ff fd57 	bl	8001882 <SD_SendCmd>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f040 80a6 	bne.w	8001f28 <SD_disk_ioctl+0x22c>
 8001ddc:	f107 030c 	add.w	r3, r7, #12
 8001de0:	2110      	movs	r1, #16
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff fcdc 	bl	80017a0 <SD_RxDataBlock>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 809c 	beq.w	8001f28 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8001df0:	7b3b      	ldrb	r3, [r7, #12]
 8001df2:	099b      	lsrs	r3, r3, #6
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d10d      	bne.n	8001e16 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001dfa:	7d7b      	ldrb	r3, [r7, #21]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	7d3b      	ldrb	r3, [r7, #20]
 8001e00:	021b      	lsls	r3, r3, #8
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	4413      	add	r3, r2
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	3301      	adds	r3, #1
 8001e0a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001e0c:	8bfb      	ldrh	r3, [r7, #30]
 8001e0e:	029a      	lsls	r2, r3, #10
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	e02d      	b.n	8001e72 <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001e16:	7c7b      	ldrb	r3, [r7, #17]
 8001e18:	f003 030f 	and.w	r3, r3, #15
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	7dbb      	ldrb	r3, [r7, #22]
 8001e20:	09db      	lsrs	r3, r3, #7
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	4413      	add	r3, r2
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	7d7b      	ldrb	r3, [r7, #21]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	f003 0306 	and.w	r3, r3, #6
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	4413      	add	r3, r2
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	3302      	adds	r3, #2
 8001e3a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001e3e:	7d3b      	ldrb	r3, [r7, #20]
 8001e40:	099b      	lsrs	r3, r3, #6
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	461a      	mov	r2, r3
 8001e46:	7cfb      	ldrb	r3, [r7, #19]
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	7cbb      	ldrb	r3, [r7, #18]
 8001e52:	029b      	lsls	r3, r3, #10
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	3301      	adds	r3, #1
 8001e62:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001e64:	8bfa      	ldrh	r2, [r7, #30]
 8001e66:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001e6a:	3b09      	subs	r3, #9
 8001e6c:	409a      	lsls	r2, r3
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001e72:	2300      	movs	r3, #0
 8001e74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8001e78:	e056      	b.n	8001f28 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e80:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001e82:	2300      	movs	r3, #0
 8001e84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001e88:	e055      	b.n	8001f36 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001e8a:	f7ff fc17 	bl	80016bc <SD_ReadyWait>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2bff      	cmp	r3, #255	@ 0xff
 8001e92:	d14b      	bne.n	8001f2c <SD_disk_ioctl+0x230>
 8001e94:	2300      	movs	r3, #0
 8001e96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001e9a:	e047      	b.n	8001f2c <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	2049      	movs	r0, #73	@ 0x49
 8001ea0:	f7ff fcef 	bl	8001882 <SD_SendCmd>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d142      	bne.n	8001f30 <SD_disk_ioctl+0x234>
 8001eaa:	2110      	movs	r1, #16
 8001eac:	6a38      	ldr	r0, [r7, #32]
 8001eae:	f7ff fc77 	bl	80017a0 <SD_RxDataBlock>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d03b      	beq.n	8001f30 <SD_disk_ioctl+0x234>
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001ebe:	e037      	b.n	8001f30 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	204a      	movs	r0, #74	@ 0x4a
 8001ec4:	f7ff fcdd 	bl	8001882 <SD_SendCmd>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d132      	bne.n	8001f34 <SD_disk_ioctl+0x238>
 8001ece:	2110      	movs	r1, #16
 8001ed0:	6a38      	ldr	r0, [r7, #32]
 8001ed2:	f7ff fc65 	bl	80017a0 <SD_RxDataBlock>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d02b      	beq.n	8001f34 <SD_disk_ioctl+0x238>
 8001edc:	2300      	movs	r3, #0
 8001ede:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001ee2:	e027      	b.n	8001f34 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	207a      	movs	r0, #122	@ 0x7a
 8001ee8:	f7ff fccb 	bl	8001882 <SD_SendCmd>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d116      	bne.n	8001f20 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001ef8:	e00b      	b.n	8001f12 <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8001efa:	6a3c      	ldr	r4, [r7, #32]
 8001efc:	1c63      	adds	r3, r4, #1
 8001efe:	623b      	str	r3, [r7, #32]
 8001f00:	f7ff fbb2 	bl	8001668 <SPI_RxByte>
 8001f04:	4603      	mov	r3, r0
 8001f06:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001f08:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001f12:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001f16:	2b03      	cmp	r3, #3
 8001f18:	d9ef      	bls.n	8001efa <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8001f20:	2304      	movs	r3, #4
 8001f22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001f26:	e006      	b.n	8001f36 <SD_disk_ioctl+0x23a>
			break;
 8001f28:	bf00      	nop
 8001f2a:	e004      	b.n	8001f36 <SD_disk_ioctl+0x23a>
			break;
 8001f2c:	bf00      	nop
 8001f2e:	e002      	b.n	8001f36 <SD_disk_ioctl+0x23a>
			break;
 8001f30:	bf00      	nop
 8001f32:	e000      	b.n	8001f36 <SD_disk_ioctl+0x23a>
			break;
 8001f34:	bf00      	nop
		}

		DESELECT();
 8001f36:	f7ff fb55 	bl	80015e4 <DESELECT>
		SPI_RxByte();
 8001f3a:	f7ff fb95 	bl	8001668 <SPI_RxByte>
	}

	return res;
 8001f3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	372c      	adds	r7, #44	@ 0x2c
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd90      	pop	{r4, r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	200000d8 	.word	0x200000d8

08001f50 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4a06      	ldr	r2, [pc, #24]	@ (8001f78 <vApplicationGetIdleTaskMemory+0x28>)
 8001f60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	4a05      	ldr	r2, [pc, #20]	@ (8001f7c <vApplicationGetIdleTaskMemory+0x2c>)
 8001f66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2280      	movs	r2, #128	@ 0x80
 8001f6c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001f6e:	bf00      	nop
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr
 8001f78:	200003a8 	.word	0x200003a8
 8001f7c:	20000458 	.word	0x20000458

08001f80 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001f80:	b5b0      	push	{r4, r5, r7, lr}
 8001f82:	b0a4      	sub	sp, #144	@ 0x90
 8001f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  drive_cmd_count = 0;
 8001f86:	4b38      	ldr	r3, [pc, #224]	@ (8002068 <MX_FREERTOS_Init+0xe8>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  CAN_MSG_memory_pool = osPoolCreate(osPool(CAN_MSG_memory_pool));                 // create memory pool
 8001f8c:	4837      	ldr	r0, [pc, #220]	@ (800206c <MX_FREERTOS_Init+0xec>)
 8001f8e:	f007 fefb 	bl	8009d88 <osPoolCreate>
 8001f92:	4603      	mov	r3, r0
 8001f94:	4a36      	ldr	r2, [pc, #216]	@ (8002070 <MX_FREERTOS_Init+0xf0>)
 8001f96:	6013      	str	r3, [r2, #0]
  CAN_MSG_Rx_Queue = osMessageCreate(osMessageQ(CAN_MSG_Rx_Queue), NULL);  // create msg queue
 8001f98:	2100      	movs	r1, #0
 8001f9a:	4836      	ldr	r0, [pc, #216]	@ (8002074 <MX_FREERTOS_Init+0xf4>)
 8001f9c:	f007 fff3 	bl	8009f86 <osMessageCreate>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	4a35      	ldr	r2, [pc, #212]	@ (8002078 <MX_FREERTOS_Init+0xf8>)
 8001fa4:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of StartDefaultTask */
  osThreadDef(StartDefaultTask, startDefaultTask, osPriorityLow, 0, 128);
 8001fa6:	4b35      	ldr	r3, [pc, #212]	@ (800207c <MX_FREERTOS_Init+0xfc>)
 8001fa8:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 8001fac:	461d      	mov	r5, r3
 8001fae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fb2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001fb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  StartDefaultTaskHandle = osThreadCreate(osThread(StartDefaultTask), NULL);
 8001fba:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f007 fdf5 	bl	8009bb0 <osThreadCreate>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	4a2d      	ldr	r2, [pc, #180]	@ (8002080 <MX_FREERTOS_Init+0x100>)
 8001fca:	6013      	str	r3, [r2, #0]

  /* definition and creation of readCANTask */
  osThreadDef(readCANTask, read_CAN_task, osPriorityNormal, 0, 512);
 8001fcc:	4b2d      	ldr	r3, [pc, #180]	@ (8002084 <MX_FREERTOS_Init+0x104>)
 8001fce:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8001fd2:	461d      	mov	r5, r3
 8001fd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fd8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001fdc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readCANTaskHandle = osThreadCreate(osThread(readCANTask), NULL);
 8001fe0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f007 fde2 	bl	8009bb0 <osThreadCreate>
 8001fec:	4603      	mov	r3, r0
 8001fee:	4a26      	ldr	r2, [pc, #152]	@ (8002088 <MX_FREERTOS_Init+0x108>)
 8001ff0:	6013      	str	r3, [r2, #0]

  /* definition and creation of readIMUTask */
  osThreadDef(readIMUTask, read_IMU_task, osPriorityNormal, 0, 512);
 8001ff2:	4b26      	ldr	r3, [pc, #152]	@ (800208c <MX_FREERTOS_Init+0x10c>)
 8001ff4:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001ff8:	461d      	mov	r5, r3
 8001ffa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ffc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ffe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002002:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readIMUTaskHandle = osThreadCreate(osThread(readIMUTask), NULL);
 8002006:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800200a:	2100      	movs	r1, #0
 800200c:	4618      	mov	r0, r3
 800200e:	f007 fdcf 	bl	8009bb0 <osThreadCreate>
 8002012:	4603      	mov	r3, r0
 8002014:	4a1e      	ldr	r2, [pc, #120]	@ (8002090 <MX_FREERTOS_Init+0x110>)
 8002016:	6013      	str	r3, [r2, #0]

  /* definition and creation of readGPSTask */
  osThreadDef(readGPSTask, read_GPS_task, osPriorityNormal, 0, 1536);
 8002018:	4b1e      	ldr	r3, [pc, #120]	@ (8002094 <MX_FREERTOS_Init+0x114>)
 800201a:	f107 0420 	add.w	r4, r7, #32
 800201e:	461d      	mov	r5, r3
 8002020:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002022:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002024:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002028:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readGPSTaskHandle = osThreadCreate(osThread(readGPSTask), NULL);
 800202c:	f107 0320 	add.w	r3, r7, #32
 8002030:	2100      	movs	r1, #0
 8002032:	4618      	mov	r0, r3
 8002034:	f007 fdbc 	bl	8009bb0 <osThreadCreate>
 8002038:	4603      	mov	r3, r0
 800203a:	4a17      	ldr	r2, [pc, #92]	@ (8002098 <MX_FREERTOS_Init+0x118>)
 800203c:	6013      	str	r3, [r2, #0]

  /* definition and creation of transmitRTCTask */
  osThreadDef(transmitRTCTask, transmit_RTC_task, osPriorityNormal, 0, 512);
 800203e:	4b17      	ldr	r3, [pc, #92]	@ (800209c <MX_FREERTOS_Init+0x11c>)
 8002040:	1d3c      	adds	r4, r7, #4
 8002042:	461d      	mov	r5, r3
 8002044:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002046:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002048:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800204c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  transmitRTCTaskHandle = osThreadCreate(osThread(transmitRTCTask), NULL);
 8002050:	1d3b      	adds	r3, r7, #4
 8002052:	2100      	movs	r1, #0
 8002054:	4618      	mov	r0, r3
 8002056:	f007 fdab 	bl	8009bb0 <osThreadCreate>
 800205a:	4603      	mov	r3, r0
 800205c:	4a10      	ldr	r2, [pc, #64]	@ (80020a0 <MX_FREERTOS_Init+0x120>)
 800205e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002060:	bf00      	nop
 8002062:	3790      	adds	r7, #144	@ 0x90
 8002064:	46bd      	mov	sp, r7
 8002066:	bdb0      	pop	{r4, r5, r7, pc}
 8002068:	20000388 	.word	0x20000388
 800206c:	08011ea4 	.word	0x08011ea4
 8002070:	2000038c 	.word	0x2000038c
 8002074:	08011eb0 	.word	0x08011eb0
 8002078:	20000390 	.word	0x20000390
 800207c:	08011d14 	.word	0x08011d14
 8002080:	20000394 	.word	0x20000394
 8002084:	08011d3c 	.word	0x08011d3c
 8002088:	20000398 	.word	0x20000398
 800208c:	08011d64 	.word	0x08011d64
 8002090:	2000039c 	.word	0x2000039c
 8002094:	08011d8c 	.word	0x08011d8c
 8002098:	200003a0 	.word	0x200003a0
 800209c:	08011db8 	.word	0x08011db8
 80020a0:	200003a4 	.word	0x200003a4

080020a4 <startDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startDefaultTask */
void startDefaultTask(void const * argument)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startDefaultTask */
  Can_Init();
 80020ac:	f7ff f9bc 	bl	8001428 <Can_Init>
  /* Infinite loop */
  for(;;)
  {
    //printf("startDefaultTask()\n\r");
//    HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
    osDelay(DEFAULT_TASK_DELAY);
 80020b0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80020b4:	f007 fdc8 	bl	8009c48 <osDelay>
 80020b8:	e7fa      	b.n	80020b0 <startDefaultTask+0xc>
	...

080020bc <read_CAN_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_CAN_task */
void read_CAN_task(void const * argument)
{
 80020bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020be:	b093      	sub	sp, #76	@ 0x4c
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6178      	str	r0, [r7, #20]

  /* Infinite loop */
  while (1) {
    //printf("read_CAN_task()\n\r");
    /* Wait for thread flags to be set in the CAN Rx FIFO0 Interrupt Callback */
    osSignalWait(CAN_READY, osWaitForever);
 80020c4:	463b      	mov	r3, r7
 80020c6:	f04f 32ff 	mov.w	r2, #4294967295
 80020ca:	2101      	movs	r1, #1
 80020cc:	4618      	mov	r0, r3
 80020ce:	f007 fe0f 	bl	8009cf0 <osSignalWait>
     * Once empty, wait for flag again.
     */

    /* Get CAN Message from Queue */
    while(1) {
      uint8_t radio_buffer[CAN_BUFFER_LEN] = {0};
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
 80020d6:	f107 0320 	add.w	r3, r7, #32
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	605a      	str	r2, [r3, #4]
 80020e0:	609a      	str	r2, [r3, #8]
 80020e2:	60da      	str	r2, [r3, #12]
 80020e4:	611a      	str	r2, [r3, #16]
      evt = osMessageGet(CAN_MSG_Rx_Queue, osWaitForever);
 80020e6:	4b50      	ldr	r3, [pc, #320]	@ (8002228 <read_CAN_task+0x16c>)
 80020e8:	6819      	ldr	r1, [r3, #0]
 80020ea:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80020ee:	f04f 32ff 	mov.w	r2, #4294967295
 80020f2:	4618      	mov	r0, r3
 80020f4:	f007 ffb0 	bl	800a058 <osMessageGet>
      if (evt.status == osEventMessage) {
 80020f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020fa:	2b10      	cmp	r3, #16
 80020fc:	d1e2      	bne.n	80020c4 <read_CAN_task+0x8>
	  HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
 80020fe:	2102      	movs	r1, #2
 8002100:	484a      	ldr	r0, [pc, #296]	@ (800222c <read_CAN_task+0x170>)
 8002102:	f003 fba6 	bl	8005852 <HAL_GPIO_TogglePin>
	  rx_CAN_msg = evt.value.p; // Get pointer from the queue union
 8002106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002108:	643b      	str	r3, [r7, #64]	@ 0x40
	 // 22: '\r'             // TODO: Do we need this? maybe just use \0 instead?
	 // 23: '\n'

	 /* TIMESTAMP */

	 for (uint8_t i = 0; i < 8; i++) {
 800210a:	2300      	movs	r3, #0
 800210c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8002110:	e021      	b.n	8002156 <read_CAN_task+0x9a>
//	   radio_buffer[7 - i] = GET_BYTE_FROM_WORD(i, current_timestamp.double_as_int);
	   radio_buffer[7 - i] = (char) GET_BYTE_FROM_WORD(i, rx_CAN_msg->timestamp.double_as_int);
 8002112:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002114:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002118:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 800211c:	00c9      	lsls	r1, r1, #3
 800211e:	f1c1 0620 	rsb	r6, r1, #32
 8002122:	f1a1 0020 	sub.w	r0, r1, #32
 8002126:	fa22 f401 	lsr.w	r4, r2, r1
 800212a:	fa03 f606 	lsl.w	r6, r3, r6
 800212e:	4334      	orrs	r4, r6
 8002130:	fa23 f000 	lsr.w	r0, r3, r0
 8002134:	4304      	orrs	r4, r0
 8002136:	fa23 f501 	lsr.w	r5, r3, r1
 800213a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800213e:	f1c3 0307 	rsb	r3, r3, #7
 8002142:	b2e2      	uxtb	r2, r4
 8002144:	3348      	adds	r3, #72	@ 0x48
 8002146:	443b      	add	r3, r7
 8002148:	f803 2c2c 	strb.w	r2, [r3, #-44]
	 for (uint8_t i = 0; i < 8; i++) {
 800214c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002150:	3301      	adds	r3, #1
 8002152:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8002156:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800215a:	2b07      	cmp	r3, #7
 800215c:	d9d9      	bls.n	8002112 <read_CAN_task+0x56>
	 }

	 /* CAN MESSAGE IDENTIFIER */
	 radio_buffer[8] = '#';
 800215e:	2323      	movs	r3, #35	@ 0x23
 8002160:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

	 /* CAN ID */ // TODO: Check if this is correct. Are the 0 bytes in the STD in the correct spot?
	 if (rx_CAN_msg->header.IDE == CAN_ID_STD)
 8002164:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10b      	bne.n	8002184 <read_CAN_task+0xc8>
	 {
	   radio_buffer[12]  = 0xFF & (rx_CAN_msg->header.StdId);
 800216c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	b2db      	uxtb	r3, r3
 8002172:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	   radio_buffer[11] = 0xFF & (rx_CAN_msg->header.StdId >> 8);
 8002176:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	0a1b      	lsrs	r3, r3, #8
 800217c:	b2db      	uxtb	r3, r3
 800217e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002182:	e01a      	b.n	80021ba <read_CAN_task+0xfe>
	 }
	 else if (rx_CAN_msg->header.IDE == CAN_ID_EXT)
 8002184:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	2b04      	cmp	r3, #4
 800218a:	d116      	bne.n	80021ba <read_CAN_task+0xfe>
	 {
	   radio_buffer[12]  = 0xFF & (rx_CAN_msg->header.ExtId);
 800218c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	b2db      	uxtb	r3, r3
 8002192:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	   radio_buffer[11] = 0xFF & (rx_CAN_msg->header.ExtId >> 8);
 8002196:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	0a1b      	lsrs	r3, r3, #8
 800219c:	b2db      	uxtb	r3, r3
 800219e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	   radio_buffer[10] = 0xFF & (rx_CAN_msg->header.ExtId >> 16);
 80021a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	0c1b      	lsrs	r3, r3, #16
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	   radio_buffer[9] = 0xFF & (rx_CAN_msg->header.ExtId >> 24);
 80021ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	0e1b      	lsrs	r3, r3, #24
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	 }

	 /* CAN DATA */
	 for (uint8_t i = 0; i < 8; i++) {
 80021ba:	2300      	movs	r3, #0
 80021bc:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80021c0:	e010      	b.n	80021e4 <read_CAN_task+0x128>
	   radio_buffer[13 + i] = rx_CAN_msg->data[i];
 80021c2:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80021c6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80021ca:	330d      	adds	r3, #13
 80021cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80021ce:	440a      	add	r2, r1
 80021d0:	7f12      	ldrb	r2, [r2, #28]
 80021d2:	3348      	adds	r3, #72	@ 0x48
 80021d4:	443b      	add	r3, r7
 80021d6:	f803 2c2c 	strb.w	r2, [r3, #-44]
	 for (uint8_t i = 0; i < 8; i++) {
 80021da:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80021de:	3301      	adds	r3, #1
 80021e0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80021e4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80021e8:	2b07      	cmp	r3, #7
 80021ea:	d9ea      	bls.n	80021c2 <read_CAN_task+0x106>
	 }

	 /* CAN DATA LENGTH */
	 radio_buffer[21] = rx_CAN_msg->header.DLC & 0xF;
 80021ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

	 /* CARRIAGE RETURN */
	 radio_buffer[CAN_BUFFER_LEN - 2] = '\r';
 80021fc:	230d      	movs	r3, #13
 80021fe:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

	 /* NEW LINE */
	 radio_buffer[CAN_BUFFER_LEN - 1] = '\n';
 8002202:	230a      	movs	r3, #10
 8002204:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

//	 sd_append_as_hexnums(logfile, radio_buffer, CAN_BUFFER_LEN);

	 /* Transmit over Radio */
	 HAL_UART_Transmit(&huart1, radio_buffer, sizeof(radio_buffer), 1000);
 8002208:	f107 011c 	add.w	r1, r7, #28
 800220c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002210:	2218      	movs	r2, #24
 8002212:	4807      	ldr	r0, [pc, #28]	@ (8002230 <read_CAN_task+0x174>)
 8002214:	f007 fa58 	bl	80096c8 <HAL_UART_Transmit>
//	   /* Convert radio_buffer to hex_string so it can be logged. MUST NOT USE strlen */
//	   sd_append_as_hexnums(logfile, radio_buffer, CAN_BUFFER_LEN);
//	 }

	/* Free the memory allocated for this message */
	osPoolFree(CAN_MSG_memory_pool, rx_CAN_msg);
 8002218:	4b06      	ldr	r3, [pc, #24]	@ (8002234 <read_CAN_task+0x178>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800221e:	4618      	mov	r0, r3
 8002220:	f007 fe71 	bl	8009f06 <osPoolFree>
    while(1) {
 8002224:	e755      	b.n	80020d2 <read_CAN_task+0x16>
 8002226:	bf00      	nop
 8002228:	20000390 	.word	0x20000390
 800222c:	40010800 	.word	0x40010800
 8002230:	20000870 	.word	0x20000870
 8002234:	2000038c 	.word	0x2000038c

08002238 <read_IMU_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_IMU_task */
void read_IMU_task(void const * argument)
{
 8002238:	b5b0      	push	{r4, r5, r7, lr}
 800223a:	b0ba      	sub	sp, #232	@ 0xe8
 800223c:	af04      	add	r7, sp, #16
 800223e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  while(1)
  {
    //printf("read_IMU_task()\n\r");
    /* Initialize a IMU buffer */
    uint8_t imu_buffer[IMU_MESSAGE_LEN] = {0};
 8002240:	2300      	movs	r3, #0
 8002242:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002246:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	605a      	str	r2, [r3, #4]
 8002250:	609a      	str	r2, [r3, #8]
 8002252:	731a      	strb	r2, [r3, #12]

    union FloatBytes ax_x, ax_y, ax_z, gy_x, gy_y, gy_z;

    /* Read accelerator data */
    uint8_t accel_data[NUM_ACCEL_BYTES];
    HAL_StatusTypeDef imu_status = HAL_OK;
 8002254:	2300      	movs	r3, #0
 8002256:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3

    imu_status |= HAL_I2C_Mem_Read(&hi2c2, IMU_DEVICE_ADDRESS, ACCEL_XOUT_H_REG, 1, accel_data, NUM_ACCEL_BYTES, 1000);
 800225a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800225e:	9302      	str	r3, [sp, #8]
 8002260:	2306      	movs	r3, #6
 8002262:	9301      	str	r3, [sp, #4]
 8002264:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	2301      	movs	r3, #1
 800226c:	223b      	movs	r2, #59	@ 0x3b
 800226e:	21d0      	movs	r1, #208	@ 0xd0
 8002270:	48d1      	ldr	r0, [pc, #836]	@ (80025b8 <read_IMU_task+0x380>)
 8002272:	f003 ffb1 	bl	80061d8 <HAL_I2C_Mem_Read>
 8002276:	4603      	mov	r3, r0
 8002278:	461a      	mov	r2, r3
 800227a:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800227e:	4313      	orrs	r3, r2
 8002280:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3

    uint16_t Accel_X_RAW = (uint16_t)(accel_data[0] << 8 | accel_data[1]);
 8002284:	f897 3094 	ldrb.w	r3, [r7, #148]	@ 0x94
 8002288:	021b      	lsls	r3, r3, #8
 800228a:	b21a      	sxth	r2, r3
 800228c:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 8002290:	b21b      	sxth	r3, r3
 8002292:	4313      	orrs	r3, r2
 8002294:	b21b      	sxth	r3, r3
 8002296:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
    uint16_t Accel_Y_RAW = (uint16_t)(accel_data[2] << 8 | accel_data[3]);
 800229a:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 800229e:	021b      	lsls	r3, r3, #8
 80022a0:	b21a      	sxth	r2, r3
 80022a2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80022a6:	b21b      	sxth	r3, r3
 80022a8:	4313      	orrs	r3, r2
 80022aa:	b21b      	sxth	r3, r3
 80022ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
    uint16_t Accel_Z_RAW = (uint16_t)(accel_data[4] << 8 | accel_data[5]);
 80022b0:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 80022b4:	021b      	lsls	r3, r3, #8
 80022b6:	b21a      	sxth	r2, r3
 80022b8:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 80022bc:	b21b      	sxth	r3, r3
 80022be:	4313      	orrs	r3, r2
 80022c0:	b21b      	sxth	r3, r3
 80022c2:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc
    /*
     * Convert the RAW values into acceleration in 'g' we have to divide according to the Full scale value
     * set in FS_SEL. Have configured FS_SEL = 0. So I am dividing by 16384.0
     * For more details check ACCEL_CONFIG Register.
     */
    ax_x.float_value = Accel_X_RAW / 16384.0;  // get the float g
 80022c6:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	@ 0xd0
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fe f914 	bl	80004f8 <__aeabi_i2d>
 80022d0:	f04f 0200 	mov.w	r2, #0
 80022d4:	4bb9      	ldr	r3, [pc, #740]	@ (80025bc <read_IMU_task+0x384>)
 80022d6:	f7fe faa3 	bl	8000820 <__aeabi_ddiv>
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	4610      	mov	r0, r2
 80022e0:	4619      	mov	r1, r3
 80022e2:	f7fe fc6b 	bl	8000bbc <__aeabi_d2f>
 80022e6:	4603      	mov	r3, r0
 80022e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    ax_y.float_value = Accel_Y_RAW / 16384.0;
 80022ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7fe f901 	bl	80004f8 <__aeabi_i2d>
 80022f6:	f04f 0200 	mov.w	r2, #0
 80022fa:	4bb0      	ldr	r3, [pc, #704]	@ (80025bc <read_IMU_task+0x384>)
 80022fc:	f7fe fa90 	bl	8000820 <__aeabi_ddiv>
 8002300:	4602      	mov	r2, r0
 8002302:	460b      	mov	r3, r1
 8002304:	4610      	mov	r0, r2
 8002306:	4619      	mov	r1, r3
 8002308:	f7fe fc58 	bl	8000bbc <__aeabi_d2f>
 800230c:	4603      	mov	r3, r0
 800230e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    ax_z.float_value = Accel_Z_RAW / 16384.0;
 8002312:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 8002316:	4618      	mov	r0, r3
 8002318:	f7fe f8ee 	bl	80004f8 <__aeabi_i2d>
 800231c:	f04f 0200 	mov.w	r2, #0
 8002320:	4ba6      	ldr	r3, [pc, #664]	@ (80025bc <read_IMU_task+0x384>)
 8002322:	f7fe fa7d 	bl	8000820 <__aeabi_ddiv>
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	4610      	mov	r0, r2
 800232c:	4619      	mov	r1, r3
 800232e:	f7fe fc45 	bl	8000bbc <__aeabi_d2f>
 8002332:	4603      	mov	r3, r0
 8002334:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

    /* Read gyroscope data */
    uint8_t gyro_data[NUM_GYRO_BYTES];

    imu_status |= HAL_I2C_Mem_Read(&hi2c2, IMU_DEVICE_ADDRESS, GYRO_XOUT_H_REG, 1, gyro_data, NUM_GYRO_BYTES, 1000);
 8002338:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800233c:	9302      	str	r3, [sp, #8]
 800233e:	2306      	movs	r3, #6
 8002340:	9301      	str	r3, [sp, #4]
 8002342:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	2301      	movs	r3, #1
 800234a:	2243      	movs	r2, #67	@ 0x43
 800234c:	21d0      	movs	r1, #208	@ 0xd0
 800234e:	489a      	ldr	r0, [pc, #616]	@ (80025b8 <read_IMU_task+0x380>)
 8002350:	f003 ff42 	bl	80061d8 <HAL_I2C_Mem_Read>
 8002354:	4603      	mov	r3, r0
 8002356:	461a      	mov	r2, r3
 8002358:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 800235c:	4313      	orrs	r3, r2
 800235e:	f887 30d3 	strb.w	r3, [r7, #211]	@ 0xd3
    uint16_t Gyro_X_RAW = (uint16_t)(gyro_data[0] << 8 | gyro_data[1]);
 8002362:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 8002366:	021b      	lsls	r3, r3, #8
 8002368:	b21a      	sxth	r2, r3
 800236a:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800236e:	b21b      	sxth	r3, r3
 8002370:	4313      	orrs	r3, r2
 8002372:	b21b      	sxth	r3, r3
 8002374:	f8a7 30ca 	strh.w	r3, [r7, #202]	@ 0xca
    uint16_t Gyro_Y_RAW = (uint16_t)(gyro_data[2] << 8 | gyro_data[3]);
 8002378:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800237c:	021b      	lsls	r3, r3, #8
 800237e:	b21a      	sxth	r2, r3
 8002380:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002384:	b21b      	sxth	r3, r3
 8002386:	4313      	orrs	r3, r2
 8002388:	b21b      	sxth	r3, r3
 800238a:	f8a7 30c8 	strh.w	r3, [r7, #200]	@ 0xc8
    uint16_t Gyro_Z_RAW = (uint16_t)(gyro_data[4] << 8 | gyro_data[5]);
 800238e:	f897 3090 	ldrb.w	r3, [r7, #144]	@ 0x90
 8002392:	021b      	lsls	r3, r3, #8
 8002394:	b21a      	sxth	r2, r3
 8002396:	f897 3091 	ldrb.w	r3, [r7, #145]	@ 0x91
 800239a:	b21b      	sxth	r3, r3
 800239c:	4313      	orrs	r3, r2
 800239e:	b21b      	sxth	r3, r3
 80023a0:	f8a7 30c6 	strh.w	r3, [r7, #198]	@ 0xc6
    /*
     * Convert the RAW values into dps (degrees/s) we have to divide according to the
     * Full scale value set in FS_SEL. Have configured FS_SEL = 0.
     * So I am dividing by 131.0. For more details check GYRO_CONFIG Register
     */
    gy_x.float_value = Gyro_X_RAW / 131.0;  // get the float g
 80023a4:	f8b7 30ca 	ldrh.w	r3, [r7, #202]	@ 0xca
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe f8a5 	bl	80004f8 <__aeabi_i2d>
 80023ae:	a380      	add	r3, pc, #512	@ (adr r3, 80025b0 <read_IMU_task+0x378>)
 80023b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b4:	f7fe fa34 	bl	8000820 <__aeabi_ddiv>
 80023b8:	4602      	mov	r2, r0
 80023ba:	460b      	mov	r3, r1
 80023bc:	4610      	mov	r0, r2
 80023be:	4619      	mov	r1, r3
 80023c0:	f7fe fbfc 	bl	8000bbc <__aeabi_d2f>
 80023c4:	4603      	mov	r3, r0
 80023c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    gy_y.float_value = Gyro_Y_RAW / 131.0;
 80023ca:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	@ 0xc8
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7fe f892 	bl	80004f8 <__aeabi_i2d>
 80023d4:	a376      	add	r3, pc, #472	@ (adr r3, 80025b0 <read_IMU_task+0x378>)
 80023d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023da:	f7fe fa21 	bl	8000820 <__aeabi_ddiv>
 80023de:	4602      	mov	r2, r0
 80023e0:	460b      	mov	r3, r1
 80023e2:	4610      	mov	r0, r2
 80023e4:	4619      	mov	r1, r3
 80023e6:	f7fe fbe9 	bl	8000bbc <__aeabi_d2f>
 80023ea:	4603      	mov	r3, r0
 80023ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    gy_z.float_value = Gyro_Z_RAW / 131.0;
 80023f0:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	@ 0xc6
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7fe f87f 	bl	80004f8 <__aeabi_i2d>
 80023fa:	a36d      	add	r3, pc, #436	@ (adr r3, 80025b0 <read_IMU_task+0x378>)
 80023fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002400:	f7fe fa0e 	bl	8000820 <__aeabi_ddiv>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	4610      	mov	r0, r2
 800240a:	4619      	mov	r1, r3
 800240c:	f7fe fbd6 	bl	8000bbc <__aeabi_d2f>
 8002410:	4603      	mov	r3, r0
 8002412:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    /* Verify IMU is connected */
    // check_IMU_result(ax_x, ax_y, ax_z, gy_x, gy_y, gy_z); // TODO set flag

    /* Get current epoch Time Stamp */
    union DoubleBytes current_timestamp;
    current_timestamp.double_value = get_current_timestamp();
 8002416:	f001 fd7f 	bl	8003f18 <get_current_timestamp>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
//    transmit_imu_data(current_timestamp.double_as_int, gy_z.bytes, 'G', 'Z');

    CAN_Radio_msg_t x_axis_data, y_axis_data, z_axis_data;

    /* Set headers */
    x_axis_data.header = IMU_x_axis_header;
 8002422:	4b67      	ldr	r3, [pc, #412]	@ (80025c0 <read_IMU_task+0x388>)
 8002424:	f107 0408 	add.w	r4, r7, #8
 8002428:	461d      	mov	r5, r3
 800242a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800242c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800242e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002432:	e884 0003 	stmia.w	r4, {r0, r1}
    y_axis_data.header = IMU_y_axis_header;
 8002436:	4b63      	ldr	r3, [pc, #396]	@ (80025c4 <read_IMU_task+0x38c>)
 8002438:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800243c:	461d      	mov	r5, r3
 800243e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002440:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002442:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002446:	e884 0003 	stmia.w	r4, {r0, r1}
    z_axis_data.header = IMU_z_axis_header;
 800244a:	4b5f      	ldr	r3, [pc, #380]	@ (80025c8 <read_IMU_task+0x390>)
 800244c:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8002450:	461d      	mov	r5, r3
 8002452:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002454:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002456:	e895 0003 	ldmia.w	r5, {r0, r1}
 800245a:	e884 0003 	stmia.w	r4, {r0, r1}

    /* Assign the timestamp */
    x_axis_data.timestamp = current_timestamp;
 800245e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8002462:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    y_axis_data.timestamp = current_timestamp;
 8002466:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800246a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    z_axis_data.timestamp = current_timestamp;
 800246e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8002472:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78

    for (int i = 0; i < 4; i++) {
 8002476:	2300      	movs	r3, #0
 8002478:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800247c:	e058      	b.n	8002530 <read_IMU_task+0x2f8>
	// X-axis data
	x_axis_data.data[3-i] = ax_x.bytes[i];
 800247e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002482:	f1c3 0303 	rsb	r3, r3, #3
 8002486:	f107 01b0 	add.w	r1, r7, #176	@ 0xb0
 800248a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800248e:	440a      	add	r2, r1
 8002490:	7812      	ldrb	r2, [r2, #0]
 8002492:	33d8      	adds	r3, #216	@ 0xd8
 8002494:	443b      	add	r3, r7
 8002496:	f803 2cb8 	strb.w	r2, [r3, #-184]
	x_axis_data.data[7-i] = gy_x.bytes[i];
 800249a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800249e:	f1c3 0307 	rsb	r3, r3, #7
 80024a2:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 80024a6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80024aa:	440a      	add	r2, r1
 80024ac:	7812      	ldrb	r2, [r2, #0]
 80024ae:	33d8      	adds	r3, #216	@ 0xd8
 80024b0:	443b      	add	r3, r7
 80024b2:	f803 2cb8 	strb.w	r2, [r3, #-184]

	// Y-axis data
	y_axis_data.data[3-i] = ax_y.bytes[i];
 80024b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80024ba:	f1c3 0303 	rsb	r3, r3, #3
 80024be:	f107 01ac 	add.w	r1, r7, #172	@ 0xac
 80024c2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80024c6:	440a      	add	r2, r1
 80024c8:	7812      	ldrb	r2, [r2, #0]
 80024ca:	33d8      	adds	r3, #216	@ 0xd8
 80024cc:	443b      	add	r3, r7
 80024ce:	f803 2c90 	strb.w	r2, [r3, #-144]
	y_axis_data.data[7-i] = gy_y.bytes[i];
 80024d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80024d6:	f1c3 0307 	rsb	r3, r3, #7
 80024da:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 80024de:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80024e2:	440a      	add	r2, r1
 80024e4:	7812      	ldrb	r2, [r2, #0]
 80024e6:	33d8      	adds	r3, #216	@ 0xd8
 80024e8:	443b      	add	r3, r7
 80024ea:	f803 2c90 	strb.w	r2, [r3, #-144]

	// Z-axis data
	z_axis_data.data[3-i] = ax_z.bytes[i];
 80024ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80024f2:	f1c3 0303 	rsb	r3, r3, #3
 80024f6:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 80024fa:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80024fe:	440a      	add	r2, r1
 8002500:	7812      	ldrb	r2, [r2, #0]
 8002502:	33d8      	adds	r3, #216	@ 0xd8
 8002504:	443b      	add	r3, r7
 8002506:	f803 2c68 	strb.w	r2, [r3, #-104]
	z_axis_data.data[7-i] = gy_z.bytes[i];
 800250a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800250e:	f1c3 0307 	rsb	r3, r3, #7
 8002512:	f107 019c 	add.w	r1, r7, #156	@ 0x9c
 8002516:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800251a:	440a      	add	r2, r1
 800251c:	7812      	ldrb	r2, [r2, #0]
 800251e:	33d8      	adds	r3, #216	@ 0xd8
 8002520:	443b      	add	r3, r7
 8002522:	f803 2c68 	strb.w	r2, [r3, #-104]
    for (int i = 0; i < 4; i++) {
 8002526:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800252a:	3301      	adds	r3, #1
 800252c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002530:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002534:	2b03      	cmp	r3, #3
 8002536:	dda2      	ble.n	800247e <read_IMU_task+0x246>
    }

    /* Transmit the messages */
    HAL_CAN_AddTxMessage(&hcan, &x_axis_data.header, x_axis_data.data, &can_mailbox);
 8002538:	f107 0308 	add.w	r3, r7, #8
 800253c:	f103 0218 	add.w	r2, r3, #24
 8002540:	f107 0108 	add.w	r1, r7, #8
 8002544:	4b21      	ldr	r3, [pc, #132]	@ (80025cc <read_IMU_task+0x394>)
 8002546:	4822      	ldr	r0, [pc, #136]	@ (80025d0 <read_IMU_task+0x398>)
 8002548:	f002 faa8 	bl	8004a9c <HAL_CAN_AddTxMessage>
    send_CAN_Radio(&x_axis_data);
 800254c:	f107 0308 	add.w	r3, r7, #8
 8002550:	4618      	mov	r0, r3
 8002552:	f000 fa51 	bl	80029f8 <send_CAN_Radio>

    HAL_CAN_AddTxMessage(&hcan, &y_axis_data.header, y_axis_data.data, &can_mailbox);
 8002556:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800255a:	f103 0218 	add.w	r2, r3, #24
 800255e:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8002562:	4b1a      	ldr	r3, [pc, #104]	@ (80025cc <read_IMU_task+0x394>)
 8002564:	481a      	ldr	r0, [pc, #104]	@ (80025d0 <read_IMU_task+0x398>)
 8002566:	f002 fa99 	bl	8004a9c <HAL_CAN_AddTxMessage>
    send_CAN_Radio(&y_axis_data);
 800256a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800256e:	4618      	mov	r0, r3
 8002570:	f000 fa42 	bl	80029f8 <send_CAN_Radio>

    HAL_CAN_AddTxMessage(&hcan, &z_axis_data.header, z_axis_data.data, &can_mailbox);
 8002574:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002578:	f103 0218 	add.w	r2, r3, #24
 800257c:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8002580:	4b12      	ldr	r3, [pc, #72]	@ (80025cc <read_IMU_task+0x394>)
 8002582:	4813      	ldr	r0, [pc, #76]	@ (80025d0 <read_IMU_task+0x398>)
 8002584:	f002 fa8a 	bl	8004a9c <HAL_CAN_AddTxMessage>
    send_CAN_Radio(&z_axis_data);
 8002588:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800258c:	4618      	mov	r0, r3
 800258e:	f000 fa33 	bl	80029f8 <send_CAN_Radio>

    // Update diagnostics
    g_tel_diagnostics.imu_fail = (imu_status != HAL_OK);
 8002592:	f897 30d3 	ldrb.w	r3, [r7, #211]	@ 0xd3
 8002596:	2b00      	cmp	r3, #0
 8002598:	bf14      	ite	ne
 800259a:	2301      	movne	r3, #1
 800259c:	2300      	moveq	r3, #0
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	4b0c      	ldr	r3, [pc, #48]	@ (80025d4 <read_IMU_task+0x39c>)
 80025a2:	709a      	strb	r2, [r3, #2]

    /* Delay */
    osDelay(READ_IMU_DELAY * 5); // 500 ms
 80025a4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80025a8:	f007 fb4e 	bl	8009c48 <osDelay>
  {
 80025ac:	e648      	b.n	8002240 <read_IMU_task+0x8>
 80025ae:	bf00      	nop
 80025b0:	00000000 	.word	0x00000000
 80025b4:	40606000 	.word	0x40606000
 80025b8:	200006ac 	.word	0x200006ac
 80025bc:	40d00000 	.word	0x40d00000
 80025c0:	20000030 	.word	0x20000030
 80025c4:	20000048 	.word	0x20000048
 80025c8:	20000060 	.word	0x20000060
 80025cc:	20000350 	.word	0x20000350
 80025d0:	20000354 	.word	0x20000354
 80025d4:	20000700 	.word	0x20000700

080025d8 <read_GPS_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_GPS_task */
void read_GPS_task(void const * argument)
{
 80025d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80025dc:	f5ad 7d79 	sub.w	sp, sp, #996	@ 0x3e4
 80025e0:	af02      	add	r7, sp, #8
 80025e2:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 80025e6:	f5a3 7375 	sub.w	r3, r3, #980	@ 0x3d4
 80025ea:	6018      	str	r0, [r3, #0]
    /* Initialize buffers */
    //printf("read_GPS_task()\n\r");
    uint8_t receive_buffer[GPS_RCV_BUFFER_SIZE];
    GPS gps_data;
    GPS_msg_t gps_message;
    uint8_t gps_buffer[GPS_MESSAGE_LEN] = {0};
 80025ec:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 80025f0:	f5a3 733c 	sub.w	r3, r3, #752	@ 0x2f0
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	3304      	adds	r3, #4
 80025fa:	22c4      	movs	r2, #196	@ 0xc4
 80025fc:	2100      	movs	r1, #0
 80025fe:	4618      	mov	r0, r3
 8002600:	f00b fd71 	bl	800e0e6 <memset>

    /* Read in an NMEA message into the buffer */
    if(HAL_I2C_IsDeviceReady(&hi2c1, GPS_DEVICE_ADDRESS, 1, HAL_MAX_DELAY) == HAL_OK) {
 8002604:	f04f 33ff 	mov.w	r3, #4294967295
 8002608:	2201      	movs	r2, #1
 800260a:	2184      	movs	r1, #132	@ 0x84
 800260c:	48cf      	ldr	r0, [pc, #828]	@ (800294c <read_GPS_task+0x374>)
 800260e:	f004 f84b 	bl	80066a8 <HAL_I2C_IsDeviceReady>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10a      	bne.n	800262e <read_GPS_task+0x56>
	    HAL_I2C_Master_Receive(&hi2c1, GPS_DEVICE_ADDRESS, receive_buffer, sizeof(receive_buffer), HAL_MAX_DELAY);
 8002618:	f507 72d8 	add.w	r2, r7, #432	@ 0x1b0
 800261c:	f04f 33ff 	mov.w	r3, #4294967295
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002626:	2184      	movs	r1, #132	@ 0x84
 8002628:	48c8      	ldr	r0, [pc, #800]	@ (800294c <read_GPS_task+0x374>)
 800262a:	f003 fa6f 	bl	8005b0c <HAL_I2C_Master_Receive>
    }

    /* Parse the buffer data --> gets stored in gps_data; */
    nmea_parse(&gps_data, &receive_buffer);
 800262e:	f507 72d8 	add.w	r2, r7, #432	@ 0x1b0
 8002632:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8002636:	4611      	mov	r1, r2
 8002638:	4618      	mov	r0, r3
 800263a:	f001 f9d9 	bl	80039f0 <nmea_parse>
    /* Transmit the NMEA message over UART to radio */
//    HAL_UART_Transmit(&huart1, gps_buffer, sizeof(gps_buffer), 1000);

    /* Get current epoch Time Stamp */
    union DoubleBytes current_timestamp;
    current_timestamp.double_value = get_current_timestamp();
 800263e:	f001 fc6b 	bl	8003f18 <get_current_timestamp>
 8002642:	4602      	mov	r2, r0
 8002644:	460b      	mov	r3, r1
 8002646:	e9c7 23f2 	strd	r2, r3, [r7, #968]	@ 0x3c8
    CAN_Radio_msg_t latitude_msg, longitude_msg, altitude_hdop_msg, side_and_count_msg;
    union DoubleBytes latitude_bytes, longitude_bytes;
    union FloatBytes altitude_bytes, hdop_bytes;

    /* Assign headers */
    latitude_msg.header = GPS_latitude_header;
 800264a:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 800264e:	f5a3 7374 	sub.w	r3, r3, #976	@ 0x3d0
 8002652:	4abf      	ldr	r2, [pc, #764]	@ (8002950 <read_GPS_task+0x378>)
 8002654:	461e      	mov	r6, r3
 8002656:	4694      	mov	ip, r2
 8002658:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800265c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800265e:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8002662:	e886 0003 	stmia.w	r6, {r0, r1}
    longitude_msg.header = GPS_longitude_header;
 8002666:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 800266a:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 800266e:	4ab9      	ldr	r2, [pc, #740]	@ (8002954 <read_GPS_task+0x37c>)
 8002670:	461e      	mov	r6, r3
 8002672:	4694      	mov	ip, r2
 8002674:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002678:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800267a:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800267e:	e886 0003 	stmia.w	r6, {r0, r1}
    altitude_hdop_msg.header = GPS_altitude_hdop_header;
 8002682:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 8002686:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 800268a:	4ab3      	ldr	r2, [pc, #716]	@ (8002958 <read_GPS_task+0x380>)
 800268c:	461e      	mov	r6, r3
 800268e:	4694      	mov	ip, r2
 8002690:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002694:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002696:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800269a:	e886 0003 	stmia.w	r6, {r0, r1}
    side_and_count_msg.header = GPS_side_count_header;
 800269e:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 80026a2:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
 80026a6:	4aad      	ldr	r2, [pc, #692]	@ (800295c <read_GPS_task+0x384>)
 80026a8:	461e      	mov	r6, r3
 80026aa:	4694      	mov	ip, r2
 80026ac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80026b0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80026b2:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80026b6:	e886 0003 	stmia.w	r6, {r0, r1}

    /* Assign timestamps */
    latitude_msg.timestamp = current_timestamp;
 80026ba:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 80026be:	f5a3 7174 	sub.w	r1, r3, #976	@ 0x3d0
 80026c2:	e9d7 23f2 	ldrd	r2, r3, [r7, #968]	@ 0x3c8
 80026c6:	e9c1 2308 	strd	r2, r3, [r1, #32]
    longitude_msg.timestamp = current_timestamp;
 80026ca:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 80026ce:	f5a3 716a 	sub.w	r1, r3, #936	@ 0x3a8
 80026d2:	e9d7 23f2 	ldrd	r2, r3, [r7, #968]	@ 0x3c8
 80026d6:	e9c1 2308 	strd	r2, r3, [r1, #32]
    altitude_hdop_msg.timestamp = current_timestamp;
 80026da:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 80026de:	f5a3 7160 	sub.w	r1, r3, #896	@ 0x380
 80026e2:	e9d7 23f2 	ldrd	r2, r3, [r7, #968]	@ 0x3c8
 80026e6:	e9c1 2308 	strd	r2, r3, [r1, #32]
    side_and_count_msg.timestamp = current_timestamp;
 80026ea:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 80026ee:	f5a3 7156 	sub.w	r1, r3, #856	@ 0x358
 80026f2:	e9d7 23f2 	ldrd	r2, r3, [r7, #968]	@ 0x3c8
 80026f6:	e9c1 2308 	strd	r2, r3, [r1, #32]

    /* Assign data as double/float so it can be read as uint64/uint8x4 */
    latitude_bytes.double_value = gps_data.latitude;
 80026fa:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 80026fe:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8002702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002706:	e9c7 23f0 	strd	r2, r3, [r7, #960]	@ 0x3c0
    longitude_bytes.double_value = gps_data.longitude;
 800270a:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 800270e:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8002712:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002716:	e9c7 23ee 	strd	r2, r3, [r7, #952]	@ 0x3b8
    altitude_bytes.float_value = gps_data.altitude;
 800271a:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 800271e:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
    hdop_bytes.float_value = gps_data.hdop;
 8002728:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 800272c:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	f8c7 33b0 	str.w	r3, [r7, #944]	@ 0x3b0

    for  (uint8_t i=0; i < 8; i++) {
 8002736:	2300      	movs	r3, #0
 8002738:	f887 33d7 	strb.w	r3, [r7, #983]	@ 0x3d7
 800273c:	e069      	b.n	8002812 <read_GPS_task+0x23a>
	latitude_msg.data[7 - i] = GET_BYTE_FROM_WORD(i, latitude_bytes.double_as_int);
 800273e:	e9d7 23f0 	ldrd	r2, r3, [r7, #960]	@ 0x3c0
 8002742:	f897 13d7 	ldrb.w	r1, [r7, #983]	@ 0x3d7
 8002746:	00c9      	lsls	r1, r1, #3
 8002748:	f1c1 0620 	rsb	r6, r1, #32
 800274c:	f1a1 0020 	sub.w	r0, r1, #32
 8002750:	fa22 f401 	lsr.w	r4, r2, r1
 8002754:	fa03 f606 	lsl.w	r6, r3, r6
 8002758:	4334      	orrs	r4, r6
 800275a:	fa23 f000 	lsr.w	r0, r3, r0
 800275e:	4304      	orrs	r4, r0
 8002760:	fa23 f501 	lsr.w	r5, r3, r1
 8002764:	f897 33d7 	ldrb.w	r3, [r7, #983]	@ 0x3d7
 8002768:	f1c3 0307 	rsb	r3, r3, #7
 800276c:	b2e1      	uxtb	r1, r4
 800276e:	f507 7276 	add.w	r2, r7, #984	@ 0x3d8
 8002772:	f5a2 7274 	sub.w	r2, r2, #976	@ 0x3d0
 8002776:	4413      	add	r3, r2
 8002778:	460a      	mov	r2, r1
 800277a:	761a      	strb	r2, [r3, #24]
	longitude_msg.data[7 - i] = GET_BYTE_FROM_WORD(i, longitude_bytes.double_as_int);
 800277c:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	@ 0x3b8
 8002780:	f897 13d7 	ldrb.w	r1, [r7, #983]	@ 0x3d7
 8002784:	00c9      	lsls	r1, r1, #3
 8002786:	f1c1 0620 	rsb	r6, r1, #32
 800278a:	f1a1 0020 	sub.w	r0, r1, #32
 800278e:	fa22 f801 	lsr.w	r8, r2, r1
 8002792:	fa03 f606 	lsl.w	r6, r3, r6
 8002796:	ea48 0806 	orr.w	r8, r8, r6
 800279a:	fa23 f000 	lsr.w	r0, r3, r0
 800279e:	ea48 0800 	orr.w	r8, r8, r0
 80027a2:	fa23 f901 	lsr.w	r9, r3, r1
 80027a6:	f897 33d7 	ldrb.w	r3, [r7, #983]	@ 0x3d7
 80027aa:	f1c3 0307 	rsb	r3, r3, #7
 80027ae:	fa5f f188 	uxtb.w	r1, r8
 80027b2:	f507 7276 	add.w	r2, r7, #984	@ 0x3d8
 80027b6:	f5a2 726a 	sub.w	r2, r2, #936	@ 0x3a8
 80027ba:	4413      	add	r3, r2
 80027bc:	460a      	mov	r2, r1
 80027be:	761a      	strb	r2, [r3, #24]
	altitude_hdop_msg.data[3 - i] = altitude_bytes.bytes[i];
 80027c0:	f897 23d7 	ldrb.w	r2, [r7, #983]	@ 0x3d7
 80027c4:	f897 33d7 	ldrb.w	r3, [r7, #983]	@ 0x3d7
 80027c8:	f1c3 0303 	rsb	r3, r3, #3
 80027cc:	f502 7276 	add.w	r2, r2, #984	@ 0x3d8
 80027d0:	443a      	add	r2, r7
 80027d2:	f812 1c24 	ldrb.w	r1, [r2, #-36]
 80027d6:	f507 7276 	add.w	r2, r7, #984	@ 0x3d8
 80027da:	f5a2 7260 	sub.w	r2, r2, #896	@ 0x380
 80027de:	4413      	add	r3, r2
 80027e0:	460a      	mov	r2, r1
 80027e2:	761a      	strb	r2, [r3, #24]
	altitude_hdop_msg.data[7 - i] = hdop_bytes.bytes[i];
 80027e4:	f897 23d7 	ldrb.w	r2, [r7, #983]	@ 0x3d7
 80027e8:	f897 33d7 	ldrb.w	r3, [r7, #983]	@ 0x3d7
 80027ec:	f1c3 0307 	rsb	r3, r3, #7
 80027f0:	f502 7276 	add.w	r2, r2, #984	@ 0x3d8
 80027f4:	443a      	add	r2, r7
 80027f6:	f812 1c28 	ldrb.w	r1, [r2, #-40]
 80027fa:	f507 7276 	add.w	r2, r7, #984	@ 0x3d8
 80027fe:	f5a2 7260 	sub.w	r2, r2, #896	@ 0x380
 8002802:	4413      	add	r3, r2
 8002804:	460a      	mov	r2, r1
 8002806:	761a      	strb	r2, [r3, #24]
    for  (uint8_t i=0; i < 8; i++) {
 8002808:	f897 33d7 	ldrb.w	r3, [r7, #983]	@ 0x3d7
 800280c:	3301      	adds	r3, #1
 800280e:	f887 33d7 	strb.w	r3, [r7, #983]	@ 0x3d7
 8002812:	f897 33d7 	ldrb.w	r3, [r7, #983]	@ 0x3d7
 8002816:	2b07      	cmp	r3, #7
 8002818:	d991      	bls.n	800273e <read_GPS_task+0x166>
    }

    /* Satellite Count Cast */
    uint32_t sat_count = (uint32_t) gps_data.satelliteCount;
 800281a:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 800281e:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8002822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002824:	f8c7 33d0 	str.w	r3, [r7, #976]	@ 0x3d0
    side_and_count_msg.data[0] = gps_data.latSide;
 8002828:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 800282c:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8002830:	7a1a      	ldrb	r2, [r3, #8]
 8002832:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 8002836:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
 800283a:	761a      	strb	r2, [r3, #24]
    side_and_count_msg.data[1] = gps_data.lonSide;
 800283c:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 8002840:	f5a3 734c 	sub.w	r3, r3, #816	@ 0x330
 8002844:	7e1a      	ldrb	r2, [r3, #24]
 8002846:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 800284a:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
 800284e:	765a      	strb	r2, [r3, #25]
    for  (uint8_t i=0; i < 4; i++) {
 8002850:	2300      	movs	r3, #0
 8002852:	f887 33d6 	strb.w	r3, [r7, #982]	@ 0x3d6
 8002856:	e01c      	b.n	8002892 <read_GPS_task+0x2ba>
	side_and_count_msg.data[5 - i] = ((sat_count >> (8 * i)) && 0xFF);
 8002858:	f897 33d6 	ldrb.w	r3, [r7, #982]	@ 0x3d6
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	f8d7 23d0 	ldr.w	r2, [r7, #976]	@ 0x3d0
 8002862:	fa22 f303 	lsr.w	r3, r2, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	bf14      	ite	ne
 800286a:	2301      	movne	r3, #1
 800286c:	2300      	moveq	r3, #0
 800286e:	b2da      	uxtb	r2, r3
 8002870:	f897 33d6 	ldrb.w	r3, [r7, #982]	@ 0x3d6
 8002874:	f1c3 0305 	rsb	r3, r3, #5
 8002878:	4611      	mov	r1, r2
 800287a:	f507 7276 	add.w	r2, r7, #984	@ 0x3d8
 800287e:	f5a2 7256 	sub.w	r2, r2, #856	@ 0x358
 8002882:	4413      	add	r3, r2
 8002884:	460a      	mov	r2, r1
 8002886:	761a      	strb	r2, [r3, #24]
    for  (uint8_t i=0; i < 4; i++) {
 8002888:	f897 33d6 	ldrb.w	r3, [r7, #982]	@ 0x3d6
 800288c:	3301      	adds	r3, #1
 800288e:	f887 33d6 	strb.w	r3, [r7, #982]	@ 0x3d6
 8002892:	f897 33d6 	ldrb.w	r3, [r7, #982]	@ 0x3d6
 8002896:	2b03      	cmp	r3, #3
 8002898:	d9de      	bls.n	8002858 <read_GPS_task+0x280>
    }
    side_and_count_msg.data[6] = 0;
 800289a:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 800289e:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
 80028a2:	2200      	movs	r2, #0
 80028a4:	779a      	strb	r2, [r3, #30]
    side_and_count_msg.data[7] = 0;
 80028a6:	f507 7376 	add.w	r3, r7, #984	@ 0x3d8
 80028aa:	f5a3 7356 	sub.w	r3, r3, #856	@ 0x358
 80028ae:	2200      	movs	r2, #0
 80028b0:	77da      	strb	r2, [r3, #31]

    /* Transmit a message every 2 seconds */
    HAL_CAN_AddTxMessage(&hcan, &latitude_msg.header, latitude_msg.data, &can_mailbox);
 80028b2:	f107 0308 	add.w	r3, r7, #8
 80028b6:	f103 0218 	add.w	r2, r3, #24
 80028ba:	f107 0108 	add.w	r1, r7, #8
 80028be:	4b28      	ldr	r3, [pc, #160]	@ (8002960 <read_GPS_task+0x388>)
 80028c0:	4828      	ldr	r0, [pc, #160]	@ (8002964 <read_GPS_task+0x38c>)
 80028c2:	f002 f8eb 	bl	8004a9c <HAL_CAN_AddTxMessage>
    send_CAN_Radio(&latitude_msg);
 80028c6:	f107 0308 	add.w	r3, r7, #8
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 f894 	bl	80029f8 <send_CAN_Radio>
    osDelay(2000);
 80028d0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80028d4:	f007 f9b8 	bl	8009c48 <osDelay>

    HAL_CAN_AddTxMessage(&hcan, &longitude_msg.header, longitude_msg.data, &can_mailbox);
 80028d8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80028dc:	f103 0218 	add.w	r2, r3, #24
 80028e0:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80028e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002960 <read_GPS_task+0x388>)
 80028e6:	481f      	ldr	r0, [pc, #124]	@ (8002964 <read_GPS_task+0x38c>)
 80028e8:	f002 f8d8 	bl	8004a9c <HAL_CAN_AddTxMessage>
    send_CAN_Radio(&longitude_msg);
 80028ec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80028f0:	4618      	mov	r0, r3
 80028f2:	f000 f881 	bl	80029f8 <send_CAN_Radio>
    osDelay(2000);
 80028f6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80028fa:	f007 f9a5 	bl	8009c48 <osDelay>

    HAL_CAN_AddTxMessage(&hcan, &altitude_hdop_msg.header, altitude_hdop_msg.data, &can_mailbox);
 80028fe:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002902:	f103 0218 	add.w	r2, r3, #24
 8002906:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800290a:	4b15      	ldr	r3, [pc, #84]	@ (8002960 <read_GPS_task+0x388>)
 800290c:	4815      	ldr	r0, [pc, #84]	@ (8002964 <read_GPS_task+0x38c>)
 800290e:	f002 f8c5 	bl	8004a9c <HAL_CAN_AddTxMessage>
    send_CAN_Radio(&altitude_hdop_msg);
 8002912:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002916:	4618      	mov	r0, r3
 8002918:	f000 f86e 	bl	80029f8 <send_CAN_Radio>
    osDelay(2000);
 800291c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002920:	f007 f992 	bl	8009c48 <osDelay>

    HAL_CAN_AddTxMessage(&hcan, &side_and_count_msg.header, side_and_count_msg.data, &can_mailbox);
 8002924:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8002928:	f103 0218 	add.w	r2, r3, #24
 800292c:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 8002930:	4b0b      	ldr	r3, [pc, #44]	@ (8002960 <read_GPS_task+0x388>)
 8002932:	480c      	ldr	r0, [pc, #48]	@ (8002964 <read_GPS_task+0x38c>)
 8002934:	f002 f8b2 	bl	8004a9c <HAL_CAN_AddTxMessage>
    send_CAN_Radio(&side_and_count_msg);
 8002938:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800293c:	4618      	mov	r0, r3
 800293e:	f000 f85b 	bl	80029f8 <send_CAN_Radio>
    osDelay(4000); // 4000 so we have 2 + 2 + 2 + 4 = 10 seconds total
 8002942:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8002946:	f007 f97f 	bl	8009c48 <osDelay>
  while(1) {
 800294a:	e64f      	b.n	80025ec <read_GPS_task+0x14>
 800294c:	20000658 	.word	0x20000658
 8002950:	20000078 	.word	0x20000078
 8002954:	20000090 	.word	0x20000090
 8002958:	200000a8 	.word	0x200000a8
 800295c:	200000c0 	.word	0x200000c0
 8002960:	20000350 	.word	0x20000350
 8002964:	20000354 	.word	0x20000354

08002968 <transmit_RTC_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_transmit_RTC_task */
void transmit_RTC_task(void const * argument)
{
 8002968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800296a:	b08b      	sub	sp, #44	@ 0x2c
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN transmit_RTC_task */
  /* Infinite loop */
  for(;;)
  {
    printf("transmit_RTC_task()\n\r");
 8002970:	481d      	ldr	r0, [pc, #116]	@ (80029e8 <transmit_RTC_task+0x80>)
 8002972:	f00b fb61 	bl	800e038 <iprintf>
    // Get rtc timestamp
    double timestamp = get_current_timestamp();
 8002976:	f001 facf 	bl	8003f18 <get_current_timestamp>
 800297a:	e9c7 0106 	strd	r0, r1, [r7, #24]
    union DoubleBytes timestamp_bytes;
    timestamp_bytes.double_value = timestamp;
 800297e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002982:	e9c7 2304 	strd	r2, r3, [r7, #16]
    uint8_t data_send[8];

    // Populate data_send array
    for (int i = 0; i < 8; i++) {
 8002986:	2300      	movs	r3, #0
 8002988:	627b      	str	r3, [r7, #36]	@ 0x24
 800298a:	e01b      	b.n	80029c4 <transmit_RTC_task+0x5c>
        data_send[i] = (timestamp_bytes.double_as_int >> (8 * i)) & 0xFF;
 800298c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002990:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002992:	00c9      	lsls	r1, r1, #3
 8002994:	f1c1 0620 	rsb	r6, r1, #32
 8002998:	f1a1 0020 	sub.w	r0, r1, #32
 800299c:	fa22 f401 	lsr.w	r4, r2, r1
 80029a0:	fa03 f606 	lsl.w	r6, r3, r6
 80029a4:	4334      	orrs	r4, r6
 80029a6:	fa23 f000 	lsr.w	r0, r3, r0
 80029aa:	4304      	orrs	r4, r0
 80029ac:	fa23 f501 	lsr.w	r5, r3, r1
 80029b0:	b2e1      	uxtb	r1, r4
 80029b2:	f107 0208 	add.w	r2, r7, #8
 80029b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b8:	4413      	add	r3, r2
 80029ba:	460a      	mov	r2, r1
 80029bc:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 80029be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c0:	3301      	adds	r3, #1
 80029c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80029c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c6:	2b07      	cmp	r3, #7
 80029c8:	dde0      	ble.n	800298c <transmit_RTC_task+0x24>
    }
    
    // Transmit message on CAN
    HAL_CAN_AddTxMessage(&hcan, &rtc_timestamp_header, data_send, &can_mailbox);
 80029ca:	f107 0208 	add.w	r2, r7, #8
 80029ce:	4b07      	ldr	r3, [pc, #28]	@ (80029ec <transmit_RTC_task+0x84>)
 80029d0:	4907      	ldr	r1, [pc, #28]	@ (80029f0 <transmit_RTC_task+0x88>)
 80029d2:	4808      	ldr	r0, [pc, #32]	@ (80029f4 <transmit_RTC_task+0x8c>)
 80029d4:	f002 f862 	bl	8004a9c <HAL_CAN_AddTxMessage>
    send_tel_diagnostics();
 80029d8:	f000 f8a2 	bl	8002b20 <send_tel_diagnostics>
    osDelay(TRANSMIT_RTC_DELAY);
 80029dc:	f241 3088 	movw	r0, #5000	@ 0x1388
 80029e0:	f007 f932 	bl	8009c48 <osDelay>
  {
 80029e4:	e7c4      	b.n	8002970 <transmit_RTC_task+0x8>
 80029e6:	bf00      	nop
 80029e8:	08011dd4 	.word	0x08011dd4
 80029ec:	20000350 	.word	0x20000350
 80029f0:	20000000 	.word	0x20000000
 80029f4:	20000354 	.word	0x20000354

080029f8 <send_CAN_Radio>:
      initIMU();
  }
}

void send_CAN_Radio(CAN_Radio_msg_t *tx_CAN_msg)
{
 80029f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029fa:	b08b      	sub	sp, #44	@ 0x2c
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  uint8_t radio_buffer[CAN_BUFFER_LEN] = {0};
 8002a00:	2100      	movs	r1, #0
 8002a02:	60f9      	str	r1, [r7, #12]
 8002a04:	f107 0110 	add.w	r1, r7, #16
 8002a08:	2000      	movs	r0, #0
 8002a0a:	6008      	str	r0, [r1, #0]
 8002a0c:	6048      	str	r0, [r1, #4]
 8002a0e:	6088      	str	r0, [r1, #8]
 8002a10:	60c8      	str	r0, [r1, #12]
 8002a12:	6108      	str	r0, [r1, #16]

  /* TIMESTAMP */
  for (uint8_t i = 0; i < 8; i++) {
 8002a14:	2100      	movs	r1, #0
 8002a16:	f887 1027 	strb.w	r1, [r7, #39]	@ 0x27
 8002a1a:	e021      	b.n	8002a60 <send_CAN_Radio+0x68>
    radio_buffer[7 - i] = (char) GET_BYTE_FROM_WORD(i, tx_CAN_msg->timestamp.double_as_int);
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	e9d1 0108 	ldrd	r0, r1, [r1, #32]
 8002a22:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 8002a26:	00e4      	lsls	r4, r4, #3
 8002a28:	f1c4 0620 	rsb	r6, r4, #32
 8002a2c:	f1a4 0520 	sub.w	r5, r4, #32
 8002a30:	fa20 f204 	lsr.w	r2, r0, r4
 8002a34:	fa01 f606 	lsl.w	r6, r1, r6
 8002a38:	4332      	orrs	r2, r6
 8002a3a:	fa21 f505 	lsr.w	r5, r1, r5
 8002a3e:	432a      	orrs	r2, r5
 8002a40:	fa21 f304 	lsr.w	r3, r1, r4
 8002a44:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002a48:	f1c1 0107 	rsb	r1, r1, #7
 8002a4c:	b2d0      	uxtb	r0, r2
 8002a4e:	3128      	adds	r1, #40	@ 0x28
 8002a50:	4439      	add	r1, r7
 8002a52:	f801 0c1c 	strb.w	r0, [r1, #-28]
  for (uint8_t i = 0; i < 8; i++) {
 8002a56:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002a5a:	3101      	adds	r1, #1
 8002a5c:	f887 1027 	strb.w	r1, [r7, #39]	@ 0x27
 8002a60:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002a64:	2907      	cmp	r1, #7
 8002a66:	d9d9      	bls.n	8002a1c <send_CAN_Radio+0x24>
  }

  /* CAN MESSAGE IDENTIFIER */
  radio_buffer[8] = '#';
 8002a68:	2323      	movs	r3, #35	@ 0x23
 8002a6a:	753b      	strb	r3, [r7, #20]

  /* CAN ID */
  if (tx_CAN_msg->header.IDE == CAN_ID_STD)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d109      	bne.n	8002a88 <send_CAN_Radio+0x90>
  {
    radio_buffer[12]  = 0xFF & (tx_CAN_msg->header.StdId);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	763b      	strb	r3, [r7, #24]
    radio_buffer[11] = 0xFF & (tx_CAN_msg->header.StdId >> 8);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	0a1b      	lsrs	r3, r3, #8
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	75fb      	strb	r3, [r7, #23]
 8002a86:	e016      	b.n	8002ab6 <send_CAN_Radio+0xbe>
  }
  else if (tx_CAN_msg->header.IDE == CAN_ID_EXT)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	2b04      	cmp	r3, #4
 8002a8e:	d112      	bne.n	8002ab6 <send_CAN_Radio+0xbe>
  {
     radio_buffer[12]  = 0xFF & (tx_CAN_msg->header.ExtId);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	763b      	strb	r3, [r7, #24]
     radio_buffer[11] = 0xFF & (tx_CAN_msg->header.ExtId >> 8);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	0a1b      	lsrs	r3, r3, #8
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	75fb      	strb	r3, [r7, #23]
     radio_buffer[10] = 0xFF & (tx_CAN_msg->header.ExtId >> 16);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	0c1b      	lsrs	r3, r3, #16
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	75bb      	strb	r3, [r7, #22]
     radio_buffer[9] = 0xFF & (tx_CAN_msg->header.ExtId >> 24);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	0e1b      	lsrs	r3, r3, #24
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	757b      	strb	r3, [r7, #21]
  }

   /* CAN DATA */
   for (uint8_t i = 0; i < 8; i++) {
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002abc:	e010      	b.n	8002ae0 <send_CAN_Radio+0xe8>
     radio_buffer[13 + i] = tx_CAN_msg->data[i];
 8002abe:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8002ac2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002ac6:	330d      	adds	r3, #13
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	440a      	add	r2, r1
 8002acc:	7e12      	ldrb	r2, [r2, #24]
 8002ace:	3328      	adds	r3, #40	@ 0x28
 8002ad0:	443b      	add	r3, r7
 8002ad2:	f803 2c1c 	strb.w	r2, [r3, #-28]
   for (uint8_t i = 0; i < 8; i++) {
 8002ad6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002ada:	3301      	adds	r3, #1
 8002adc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002ae0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002ae4:	2b07      	cmp	r3, #7
 8002ae6:	d9ea      	bls.n	8002abe <send_CAN_Radio+0xc6>
   }

   /* CAN DATA LENGTH */
   radio_buffer[21] = tx_CAN_msg->header.DLC & 0xF;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

   /* CARRIAGE RETURN */
   radio_buffer[CAN_BUFFER_LEN - 2] = '\r';
 8002af8:	230d      	movs	r3, #13
 8002afa:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

   /* NEW LINE */
   radio_buffer[CAN_BUFFER_LEN - 1] = '\n';
 8002afe:	230a      	movs	r3, #10
 8002b00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

   HAL_UART_Transmit(&huart1, radio_buffer, sizeof(radio_buffer), 1000);
 8002b04:	f107 010c 	add.w	r1, r7, #12
 8002b08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b0c:	2218      	movs	r2, #24
 8002b0e:	4803      	ldr	r0, [pc, #12]	@ (8002b1c <send_CAN_Radio+0x124>)
 8002b10:	f006 fdda 	bl	80096c8 <HAL_UART_Transmit>

}
 8002b14:	bf00      	nop
 8002b16:	372c      	adds	r7, #44	@ 0x2c
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b1c:	20000870 	.word	0x20000870

08002b20 <send_tel_diagnostics>:
 * 2: IMU Failure 
 * 3: GPS Failure
 * 4: Watchdog reset occured
 */
void send_tel_diagnostics()
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
  uint8_t data_send = 0x00;
 8002b26:	2300      	movs	r3, #0
 8002b28:	71fb      	strb	r3, [r7, #7]
  data_send = 0x00; // TODO: Set bits based on diagnostics
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	71fb      	strb	r3, [r7, #7]

  if(g_tel_diagnostics.rtc_reset) 
 8002b2e:	4b19      	ldr	r3, [pc, #100]	@ (8002b94 <send_tel_diagnostics+0x74>)
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b00      	cmp	r3, #0
    SET_BIT(data_send, 0);
  if(g_tel_diagnostics.gps_sync_fail)
 8002b36:	4b17      	ldr	r3, [pc, #92]	@ (8002b94 <send_tel_diagnostics+0x74>)
 8002b38:	785b      	ldrb	r3, [r3, #1]
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <send_tel_diagnostics+0x28>
    SET_BIT(data_send, 1);
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	f043 0301 	orr.w	r3, r3, #1
 8002b46:	71fb      	strb	r3, [r7, #7]
  if(g_tel_diagnostics.imu_fail)
 8002b48:	4b12      	ldr	r3, [pc, #72]	@ (8002b94 <send_tel_diagnostics+0x74>)
 8002b4a:	789b      	ldrb	r3, [r3, #2]
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <send_tel_diagnostics+0x3a>
    SET_BIT(data_send, 2);
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	f043 0302 	orr.w	r3, r3, #2
 8002b58:	71fb      	strb	r3, [r7, #7]
  if(g_tel_diagnostics.gps_fail)
 8002b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002b94 <send_tel_diagnostics+0x74>)
 8002b5c:	78db      	ldrb	r3, [r3, #3]
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <send_tel_diagnostics+0x4c>
    SET_BIT(data_send, 3);
 8002b64:	79fb      	ldrb	r3, [r7, #7]
 8002b66:	f043 0303 	orr.w	r3, r3, #3
 8002b6a:	71fb      	strb	r3, [r7, #7]
  if(g_tel_diagnostics.watchdog_reset)
 8002b6c:	4b09      	ldr	r3, [pc, #36]	@ (8002b94 <send_tel_diagnostics+0x74>)
 8002b6e:	791b      	ldrb	r3, [r3, #4]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <send_tel_diagnostics+0x5e>
    SET_BIT(data_send, 4);
 8002b76:	79fb      	ldrb	r3, [r7, #7]
 8002b78:	f043 0304 	orr.w	r3, r3, #4
 8002b7c:	71fb      	strb	r3, [r7, #7]
  
  HAL_CAN_AddTxMessage(&hcan, &tel_diagnostics_header, data_send, &can_mailbox);
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	461a      	mov	r2, r3
 8002b82:	4b05      	ldr	r3, [pc, #20]	@ (8002b98 <send_tel_diagnostics+0x78>)
 8002b84:	4905      	ldr	r1, [pc, #20]	@ (8002b9c <send_tel_diagnostics+0x7c>)
 8002b86:	4806      	ldr	r0, [pc, #24]	@ (8002ba0 <send_tel_diagnostics+0x80>)
 8002b88:	f001 ff88 	bl	8004a9c <HAL_CAN_AddTxMessage>
}
 8002b8c:	bf00      	nop
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	20000700 	.word	0x20000700
 8002b98:	20000350 	.word	0x20000350
 8002b9c:	20000018 	.word	0x20000018
 8002ba0:	20000354 	.word	0x20000354

08002ba4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b088      	sub	sp, #32
 8002ba8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002baa:	f107 0310 	add.w	r3, r7, #16
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	605a      	str	r2, [r3, #4]
 8002bb4:	609a      	str	r2, [r3, #8]
 8002bb6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bb8:	4b49      	ldr	r3, [pc, #292]	@ (8002ce0 <MX_GPIO_Init+0x13c>)
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	4a48      	ldr	r2, [pc, #288]	@ (8002ce0 <MX_GPIO_Init+0x13c>)
 8002bbe:	f043 0310 	orr.w	r3, r3, #16
 8002bc2:	6193      	str	r3, [r2, #24]
 8002bc4:	4b46      	ldr	r3, [pc, #280]	@ (8002ce0 <MX_GPIO_Init+0x13c>)
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	f003 0310 	and.w	r3, r3, #16
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bd0:	4b43      	ldr	r3, [pc, #268]	@ (8002ce0 <MX_GPIO_Init+0x13c>)
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	4a42      	ldr	r2, [pc, #264]	@ (8002ce0 <MX_GPIO_Init+0x13c>)
 8002bd6:	f043 0320 	orr.w	r3, r3, #32
 8002bda:	6193      	str	r3, [r2, #24]
 8002bdc:	4b40      	ldr	r3, [pc, #256]	@ (8002ce0 <MX_GPIO_Init+0x13c>)
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	f003 0320 	and.w	r3, r3, #32
 8002be4:	60bb      	str	r3, [r7, #8]
 8002be6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be8:	4b3d      	ldr	r3, [pc, #244]	@ (8002ce0 <MX_GPIO_Init+0x13c>)
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	4a3c      	ldr	r2, [pc, #240]	@ (8002ce0 <MX_GPIO_Init+0x13c>)
 8002bee:	f043 0304 	orr.w	r3, r3, #4
 8002bf2:	6193      	str	r3, [r2, #24]
 8002bf4:	4b3a      	ldr	r3, [pc, #232]	@ (8002ce0 <MX_GPIO_Init+0x13c>)
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	607b      	str	r3, [r7, #4]
 8002bfe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c00:	4b37      	ldr	r3, [pc, #220]	@ (8002ce0 <MX_GPIO_Init+0x13c>)
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	4a36      	ldr	r2, [pc, #216]	@ (8002ce0 <MX_GPIO_Init+0x13c>)
 8002c06:	f043 0308 	orr.w	r3, r3, #8
 8002c0a:	6193      	str	r3, [r2, #24]
 8002c0c:	4b34      	ldr	r3, [pc, #208]	@ (8002ce0 <MX_GPIO_Init+0x13c>)
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	f003 0308 	and.w	r3, r3, #8
 8002c14:	603b      	str	r3, [r7, #0]
 8002c16:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RADIO_GPIO_DIO7_Pin|RADIO_GPIO_DIO9_SLEEP_Pin|RADIO_GPIO_DIO11_Pin|RADIO_GPIO_DIO10_Pin, GPIO_PIN_RESET);
 8002c18:	2200      	movs	r2, #0
 8002c1a:	2178      	movs	r1, #120	@ 0x78
 8002c1c:	4831      	ldr	r0, [pc, #196]	@ (8002ce4 <MX_GPIO_Init+0x140>)
 8002c1e:	f002 fe00 	bl	8005822 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USER_LED_Pin|SDL_CS_Pin, GPIO_PIN_RESET);
 8002c22:	2200      	movs	r2, #0
 8002c24:	2112      	movs	r1, #18
 8002c26:	4830      	ldr	r0, [pc, #192]	@ (8002ce8 <MX_GPIO_Init+0x144>)
 8002c28:	f002 fdfb 	bl	8005822 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RADIO_GPIO_DIO4_Pin|RADIO_GPIO_DIO3_Pin|RADIO_GPIO_DIO2_Pin, GPIO_PIN_SET);
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f24a 0101 	movw	r1, #40961	@ 0xa001
 8002c32:	482e      	ldr	r0, [pc, #184]	@ (8002cec <MX_GPIO_Init+0x148>)
 8002c34:	f002 fdf5 	bl	8005822 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RADIO_GPIO_DIO12_Pin|RADIO_GPIO_DIO6_Pin|RADIO_DIO8_SLEEP_CONTROL_Pin, GPIO_PIN_RESET);
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f245 0102 	movw	r1, #20482	@ 0x5002
 8002c3e:	482b      	ldr	r0, [pc, #172]	@ (8002cec <MX_GPIO_Init+0x148>)
 8002c40:	f002 fdef 	bl	8005822 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RADIO_GPIO_DIO1_Pin|RADIO_GPIO_DIO0_Pin, GPIO_PIN_SET);
 8002c44:	2201      	movs	r2, #1
 8002c46:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8002c4a:	4826      	ldr	r0, [pc, #152]	@ (8002ce4 <MX_GPIO_Init+0x140>)
 8002c4c:	f002 fde9 	bl	8005822 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = RADIO_GPIO_DIO7_Pin|RADIO_GPIO_DIO9_SLEEP_Pin|RADIO_GPIO_DIO11_Pin|RADIO_GPIO_DIO10_Pin
 8002c50:	f44f 73fc 	mov.w	r3, #504	@ 0x1f8
 8002c54:	613b      	str	r3, [r7, #16]
                          |RADIO_GPIO_DIO1_Pin|RADIO_GPIO_DIO0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c56:	2301      	movs	r3, #1
 8002c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c5e:	2302      	movs	r3, #2
 8002c60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c62:	f107 0310 	add.w	r3, r7, #16
 8002c66:	4619      	mov	r1, r3
 8002c68:	481e      	ldr	r0, [pc, #120]	@ (8002ce4 <MX_GPIO_Init+0x140>)
 8002c6a:	f002 fc2f 	bl	80054cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USER_LED_Pin|SDL_CS_Pin;
 8002c6e:	2312      	movs	r3, #18
 8002c70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c72:	2301      	movs	r3, #1
 8002c74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c76:	2300      	movs	r3, #0
 8002c78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c7e:	f107 0310 	add.w	r3, r7, #16
 8002c82:	4619      	mov	r1, r3
 8002c84:	4818      	ldr	r0, [pc, #96]	@ (8002ce8 <MX_GPIO_Init+0x144>)
 8002c86:	f002 fc21 	bl	80054cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RTC_SYNC_Pin|SDL_CD_Pin;
 8002c8a:	230c      	movs	r3, #12
 8002c8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c92:	2300      	movs	r3, #0
 8002c94:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c96:	f107 0310 	add.w	r3, r7, #16
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4812      	ldr	r0, [pc, #72]	@ (8002ce8 <MX_GPIO_Init+0x144>)
 8002c9e:	f002 fc15 	bl	80054cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = RADIO_GPIO_DIO4_Pin|RADIO_GPIO_DIO12_Pin|RADIO_GPIO_DIO6_Pin|RADIO_GPIO_DIO3_Pin
 8002ca2:	f24f 0303 	movw	r3, #61443	@ 0xf003
 8002ca6:	613b      	str	r3, [r7, #16]
                          |RADIO_DIO8_SLEEP_CONTROL_Pin|RADIO_GPIO_DIO2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cb4:	f107 0310 	add.w	r3, r7, #16
 8002cb8:	4619      	mov	r1, r3
 8002cba:	480c      	ldr	r0, [pc, #48]	@ (8002cec <MX_GPIO_Init+0x148>)
 8002cbc:	f002 fc06 	bl	80054cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002cc0:	2304      	movs	r3, #4
 8002cc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002ccc:	f107 0310 	add.w	r3, r7, #16
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4806      	ldr	r0, [pc, #24]	@ (8002cec <MX_GPIO_Init+0x148>)
 8002cd4:	f002 fbfa 	bl	80054cc <HAL_GPIO_Init>

}
 8002cd8:	bf00      	nop
 8002cda:	3720      	adds	r7, #32
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	40011000 	.word	0x40011000
 8002ce8:	40010800 	.word	0x40010800
 8002cec:	40010c00 	.word	0x40010c00

08002cf0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002cf4:	4b12      	ldr	r3, [pc, #72]	@ (8002d40 <MX_I2C1_Init+0x50>)
 8002cf6:	4a13      	ldr	r2, [pc, #76]	@ (8002d44 <MX_I2C1_Init+0x54>)
 8002cf8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002cfa:	4b11      	ldr	r3, [pc, #68]	@ (8002d40 <MX_I2C1_Init+0x50>)
 8002cfc:	4a12      	ldr	r2, [pc, #72]	@ (8002d48 <MX_I2C1_Init+0x58>)
 8002cfe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d00:	4b0f      	ldr	r3, [pc, #60]	@ (8002d40 <MX_I2C1_Init+0x50>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002d06:	4b0e      	ldr	r3, [pc, #56]	@ (8002d40 <MX_I2C1_Init+0x50>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d40 <MX_I2C1_Init+0x50>)
 8002d0e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002d12:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d14:	4b0a      	ldr	r3, [pc, #40]	@ (8002d40 <MX_I2C1_Init+0x50>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002d1a:	4b09      	ldr	r3, [pc, #36]	@ (8002d40 <MX_I2C1_Init+0x50>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d20:	4b07      	ldr	r3, [pc, #28]	@ (8002d40 <MX_I2C1_Init+0x50>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d26:	4b06      	ldr	r3, [pc, #24]	@ (8002d40 <MX_I2C1_Init+0x50>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d2c:	4804      	ldr	r0, [pc, #16]	@ (8002d40 <MX_I2C1_Init+0x50>)
 8002d2e:	f002 fda9 	bl	8005884 <HAL_I2C_Init>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002d38:	f000 f9c6 	bl	80030c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d3c:	bf00      	nop
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	20000658 	.word	0x20000658
 8002d44:	40005400 	.word	0x40005400
 8002d48:	000186a0 	.word	0x000186a0

08002d4c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002d50:	4b12      	ldr	r3, [pc, #72]	@ (8002d9c <MX_I2C2_Init+0x50>)
 8002d52:	4a13      	ldr	r2, [pc, #76]	@ (8002da0 <MX_I2C2_Init+0x54>)
 8002d54:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002d56:	4b11      	ldr	r3, [pc, #68]	@ (8002d9c <MX_I2C2_Init+0x50>)
 8002d58:	4a12      	ldr	r2, [pc, #72]	@ (8002da4 <MX_I2C2_Init+0x58>)
 8002d5a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8002d9c <MX_I2C2_Init+0x50>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002d62:	4b0e      	ldr	r3, [pc, #56]	@ (8002d9c <MX_I2C2_Init+0x50>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d68:	4b0c      	ldr	r3, [pc, #48]	@ (8002d9c <MX_I2C2_Init+0x50>)
 8002d6a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002d6e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d70:	4b0a      	ldr	r3, [pc, #40]	@ (8002d9c <MX_I2C2_Init+0x50>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002d76:	4b09      	ldr	r3, [pc, #36]	@ (8002d9c <MX_I2C2_Init+0x50>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d7c:	4b07      	ldr	r3, [pc, #28]	@ (8002d9c <MX_I2C2_Init+0x50>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d82:	4b06      	ldr	r3, [pc, #24]	@ (8002d9c <MX_I2C2_Init+0x50>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002d88:	4804      	ldr	r0, [pc, #16]	@ (8002d9c <MX_I2C2_Init+0x50>)
 8002d8a:	f002 fd7b 	bl	8005884 <HAL_I2C_Init>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002d94:	f000 f998 	bl	80030c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002d98:	bf00      	nop
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	200006ac 	.word	0x200006ac
 8002da0:	40005800 	.word	0x40005800
 8002da4:	000186a0 	.word	0x000186a0

08002da8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b08a      	sub	sp, #40	@ 0x28
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db0:	f107 0318 	add.w	r3, r7, #24
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	605a      	str	r2, [r3, #4]
 8002dba:	609a      	str	r2, [r3, #8]
 8002dbc:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a2b      	ldr	r2, [pc, #172]	@ (8002e70 <HAL_I2C_MspInit+0xc8>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d124      	bne.n	8002e12 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8002e74 <HAL_I2C_MspInit+0xcc>)
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	4a29      	ldr	r2, [pc, #164]	@ (8002e74 <HAL_I2C_MspInit+0xcc>)
 8002dce:	f043 0308 	orr.w	r3, r3, #8
 8002dd2:	6193      	str	r3, [r2, #24]
 8002dd4:	4b27      	ldr	r3, [pc, #156]	@ (8002e74 <HAL_I2C_MspInit+0xcc>)
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	f003 0308 	and.w	r3, r3, #8
 8002ddc:	617b      	str	r3, [r7, #20]
 8002dde:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPS_SCL_Pin|GPS_SDA_Pin;
 8002de0:	23c0      	movs	r3, #192	@ 0xc0
 8002de2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002de4:	2312      	movs	r3, #18
 8002de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002de8:	2303      	movs	r3, #3
 8002dea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dec:	f107 0318 	add.w	r3, r7, #24
 8002df0:	4619      	mov	r1, r3
 8002df2:	4821      	ldr	r0, [pc, #132]	@ (8002e78 <HAL_I2C_MspInit+0xd0>)
 8002df4:	f002 fb6a 	bl	80054cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002df8:	4b1e      	ldr	r3, [pc, #120]	@ (8002e74 <HAL_I2C_MspInit+0xcc>)
 8002dfa:	69db      	ldr	r3, [r3, #28]
 8002dfc:	4a1d      	ldr	r2, [pc, #116]	@ (8002e74 <HAL_I2C_MspInit+0xcc>)
 8002dfe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002e02:	61d3      	str	r3, [r2, #28]
 8002e04:	4b1b      	ldr	r3, [pc, #108]	@ (8002e74 <HAL_I2C_MspInit+0xcc>)
 8002e06:	69db      	ldr	r3, [r3, #28]
 8002e08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e0c:	613b      	str	r3, [r7, #16]
 8002e0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002e10:	e029      	b.n	8002e66 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a19      	ldr	r2, [pc, #100]	@ (8002e7c <HAL_I2C_MspInit+0xd4>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d124      	bne.n	8002e66 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e1c:	4b15      	ldr	r3, [pc, #84]	@ (8002e74 <HAL_I2C_MspInit+0xcc>)
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	4a14      	ldr	r2, [pc, #80]	@ (8002e74 <HAL_I2C_MspInit+0xcc>)
 8002e22:	f043 0308 	orr.w	r3, r3, #8
 8002e26:	6193      	str	r3, [r2, #24]
 8002e28:	4b12      	ldr	r3, [pc, #72]	@ (8002e74 <HAL_I2C_MspInit+0xcc>)
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	f003 0308 	and.w	r3, r3, #8
 8002e30:	60fb      	str	r3, [r7, #12]
 8002e32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 8002e34:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e3a:	2312      	movs	r3, #18
 8002e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e42:	f107 0318 	add.w	r3, r7, #24
 8002e46:	4619      	mov	r1, r3
 8002e48:	480b      	ldr	r0, [pc, #44]	@ (8002e78 <HAL_I2C_MspInit+0xd0>)
 8002e4a:	f002 fb3f 	bl	80054cc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002e4e:	4b09      	ldr	r3, [pc, #36]	@ (8002e74 <HAL_I2C_MspInit+0xcc>)
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	4a08      	ldr	r2, [pc, #32]	@ (8002e74 <HAL_I2C_MspInit+0xcc>)
 8002e54:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e58:	61d3      	str	r3, [r2, #28]
 8002e5a:	4b06      	ldr	r3, [pc, #24]	@ (8002e74 <HAL_I2C_MspInit+0xcc>)
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e62:	60bb      	str	r3, [r7, #8]
 8002e64:	68bb      	ldr	r3, [r7, #8]
}
 8002e66:	bf00      	nop
 8002e68:	3728      	adds	r7, #40	@ 0x28
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	40005400 	.word	0x40005400
 8002e74:	40021000 	.word	0x40021000
 8002e78:	40010c00 	.word	0x40010c00
 8002e7c:	40005800 	.word	0x40005800

08002e80 <initIMU>:

/*
 * Documentation: https://controllerstech.com/how-to-interface-mpu6050-gy-521-with-stm32/
 */
void initIMU(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af04      	add	r7, sp, #16

  /*
   * We need to check if the sensor is responding by reading the “WHO_AM_I (0x75)�? Register.
   * If the sensor responds with 0x68, this means it’s available and good to go.
   */
  for(int i = 0; i < 5; i++) {
 8002e86:	2300      	movs	r3, #0
 8002e88:	607b      	str	r3, [r7, #4]
 8002e8a:	e01d      	b.n	8002ec8 <initIMU+0x48>
    if(HAL_I2C_IsDeviceReady(&hi2c2, IMU_DEVICE_ADDRESS, 1, HAL_MAX_DELAY) == HAL_OK) {
 8002e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e90:	2201      	movs	r2, #1
 8002e92:	21d0      	movs	r1, #208	@ 0xd0
 8002e94:	482e      	ldr	r0, [pc, #184]	@ (8002f50 <initIMU+0xd0>)
 8002e96:	f003 fc07 	bl	80066a8 <HAL_I2C_IsDeviceReady>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10d      	bne.n	8002ebc <initIMU+0x3c>
	    HAL_I2C_Mem_Read (&hi2c2, IMU_DEVICE_ADDRESS, WHO_AM_I_REG, 1, &data, 1, 1000);
 8002ea0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ea4:	9302      	str	r3, [sp, #8]
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	9301      	str	r3, [sp, #4]
 8002eaa:	1cfb      	adds	r3, r7, #3
 8002eac:	9300      	str	r3, [sp, #0]
 8002eae:	2301      	movs	r3, #1
 8002eb0:	2275      	movs	r2, #117	@ 0x75
 8002eb2:	21d0      	movs	r1, #208	@ 0xd0
 8002eb4:	4826      	ldr	r0, [pc, #152]	@ (8002f50 <initIMU+0xd0>)
 8002eb6:	f003 f98f 	bl	80061d8 <HAL_I2C_Mem_Read>
	    //printf("Read a value from WHOAMI register: %x\n\r", data);
	    break; // Break when initialized
 8002eba:	e008      	b.n	8002ece <initIMU+0x4e>
    }
    HAL_Delay(5);
 8002ebc:	2005      	movs	r0, #5
 8002ebe:	f001 fbc1 	bl	8004644 <HAL_Delay>
  for(int i = 0; i < 5; i++) {
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	607b      	str	r3, [r7, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	ddde      	ble.n	8002e8c <initIMU+0xc>
  /*
   * Next we will wake the sensor up and in order to do that we will write to the
   * “PWR_MGMT_1 (0x6B)�? Register. See below the register content.
   * On writing (0x00) to the PWR_MGMT_1 Register, sensor wakes up and the Clock sets up to 8 MHz.
   */
  data = 0;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Mem_Write(&hi2c2, IMU_DEVICE_ADDRESS, PWR_MGMT_1_REG, 1, &data, 1, 1000);
 8002ed2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ed6:	9302      	str	r3, [sp, #8]
 8002ed8:	2301      	movs	r3, #1
 8002eda:	9301      	str	r3, [sp, #4]
 8002edc:	1cfb      	adds	r3, r7, #3
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	226b      	movs	r2, #107	@ 0x6b
 8002ee4:	21d0      	movs	r1, #208	@ 0xd0
 8002ee6:	481a      	ldr	r0, [pc, #104]	@ (8002f50 <initIMU+0xd0>)
 8002ee8:	f003 f87c 	bl	8005fe4 <HAL_I2C_Mem_Write>
   * rate used to generate the Sample Rate for the MPU6050.
   * As the formula says Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV).
   * Where Gyroscope Output Rate is 8KHz, To get the sample rate of 1KHz,
   * we need to use the SMPLRT_DIV as ‘7’.
   */
  data = 0x07;
 8002eec:	2307      	movs	r3, #7
 8002eee:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Mem_Write(&hi2c2, IMU_DEVICE_ADDRESS, SMPLRT_DIV_REG, 1, &data, 1, 1000);
 8002ef0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ef4:	9302      	str	r3, [sp, #8]
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	9301      	str	r3, [sp, #4]
 8002efa:	1cfb      	adds	r3, r7, #3
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	2301      	movs	r3, #1
 8002f00:	2219      	movs	r2, #25
 8002f02:	21d0      	movs	r1, #208	@ 0xd0
 8002f04:	4812      	ldr	r0, [pc, #72]	@ (8002f50 <initIMU+0xd0>)
 8002f06:	f003 f86d 	bl	8005fe4 <HAL_I2C_Mem_Write>
   * Now configure the Accelerometer and Gyroscope registers and to do so, we need to modify
   * “GYRO_CONFIG (0x1B)�? and “ACCEL_CONFIG (0x1C)�?Registers.
   * Writing (0x00) to both of these registers would set the Full scale range of ± 2g in ACCEL_CONFIG
   * Register and a Full scale range of ± 250 °/s in GYRO_CONFIG Register along with Self-test disabled.
   */
  data = 0x00;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Mem_Write(&hi2c2, IMU_DEVICE_ADDRESS, GYRO_CONFIG_REG, 1, &data, 1, 1000);
 8002f0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f12:	9302      	str	r3, [sp, #8]
 8002f14:	2301      	movs	r3, #1
 8002f16:	9301      	str	r3, [sp, #4]
 8002f18:	1cfb      	adds	r3, r7, #3
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	221b      	movs	r2, #27
 8002f20:	21d0      	movs	r1, #208	@ 0xd0
 8002f22:	480b      	ldr	r0, [pc, #44]	@ (8002f50 <initIMU+0xd0>)
 8002f24:	f003 f85e 	bl	8005fe4 <HAL_I2C_Mem_Write>
  data = 0x00;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Mem_Write(&hi2c2, IMU_DEVICE_ADDRESS, ACCEL_CONFIG_REG, 1, &data, 1, 1000);
 8002f2c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f30:	9302      	str	r3, [sp, #8]
 8002f32:	2301      	movs	r3, #1
 8002f34:	9301      	str	r3, [sp, #4]
 8002f36:	1cfb      	adds	r3, r7, #3
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	221c      	movs	r2, #28
 8002f3e:	21d0      	movs	r1, #208	@ 0xd0
 8002f40:	4803      	ldr	r0, [pc, #12]	@ (8002f50 <initIMU+0xd0>)
 8002f42:	f003 f84f 	bl	8005fe4 <HAL_I2C_Mem_Write>


  //printf("IMU Initialized\n\r");


}
 8002f46:	bf00      	nop
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	200006ac 	.word	0x200006ac

08002f54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f5a:	f001 fb41 	bl	80045e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f5e:	f000 f841 	bl	8002fe4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f62:	f7ff fe1f 	bl	8002ba4 <MX_GPIO_Init>
  MX_CAN_Init();
 8002f66:	f7fe f999 	bl	800129c <MX_CAN_Init>
  MX_SPI1_Init();
 8002f6a:	f001 f843 	bl	8003ff4 <MX_SPI1_Init>
  MX_UART5_Init();
 8002f6e:	f001 fa27 	bl	80043c0 <MX_UART5_Init>
  MX_I2C1_Init();
 8002f72:	f7ff febd 	bl	8002cf0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8002f76:	f7ff fee9 	bl	8002d4c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8002f7a:	f001 fa4b 	bl	8004414 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8002f7e:	f000 fe0d 	bl	8003b9c <MX_RTC_Init>
  MX_FATFS_Init();
 8002f82:	f006 fd21 	bl	80099c8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  DebugIO_Init(&huart5);
 8002f86:	4813      	ldr	r0, [pc, #76]	@ (8002fd4 <main+0x80>)
 8002f88:	f7fe fabc 	bl	8001504 <DebugIO_Init>
  initIMU();
 8002f8c:	f7ff ff78 	bl	8002e80 <initIMU>

  // Sync with RTC if date = Jan 1 2000 or GPIO is set to high
  RTC_DateTypeDef curr_date;
  RTC_TimeTypeDef curr_time;
  HAL_RTC_GetDate(&hrtc, &curr_date, RTC_FORMAT_BIN);
 8002f90:	1d3b      	adds	r3, r7, #4
 8002f92:	2200      	movs	r2, #0
 8002f94:	4619      	mov	r1, r3
 8002f96:	4810      	ldr	r0, [pc, #64]	@ (8002fd8 <main+0x84>)
 8002f98:	f005 f9c2 	bl	8008320 <HAL_RTC_GetDate>
  /* Sync the RTC with GPS if date is Jan 1, 2000 */
  if ((curr_date.Month == RTC_MONTH_JANUARY && curr_date.Date == 1 && curr_date.Year == 0) || HAL_GPIO_ReadPin(RTC_SYNC_GPIO_Port, RTC_SYNC_Pin) == GPIO_PIN_SET) {
 8002f9c:	797b      	ldrb	r3, [r7, #5]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d105      	bne.n	8002fae <main+0x5a>
 8002fa2:	79bb      	ldrb	r3, [r7, #6]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d102      	bne.n	8002fae <main+0x5a>
 8002fa8:	79fb      	ldrb	r3, [r7, #7]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d006      	beq.n	8002fbc <main+0x68>
 8002fae:	2104      	movs	r1, #4
 8002fb0:	480a      	ldr	r0, [pc, #40]	@ (8002fdc <main+0x88>)
 8002fb2:	f002 fc1f 	bl	80057f4 <HAL_GPIO_ReadPin>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d104      	bne.n	8002fc6 <main+0x72>
      Sync_RTC_With_GPS();
 8002fbc:	f000 fe5c 	bl	8003c78 <Sync_RTC_With_GPS>
      g_tel_diagnostics.rtc_reset = true;
 8002fc0:	4b07      	ldr	r3, [pc, #28]	@ (8002fe0 <main+0x8c>)
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	701a      	strb	r2, [r3, #0]
//  sd_append(logfile, startup_message);

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002fc6:	f7fe ffdb 	bl	8001f80 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002fca:	f006 fdea 	bl	8009ba2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002fce:	bf00      	nop
 8002fd0:	e7fd      	b.n	8002fce <main+0x7a>
 8002fd2:	bf00      	nop
 8002fd4:	20000828 	.word	0x20000828
 8002fd8:	2000076c 	.word	0x2000076c
 8002fdc:	40010800 	.word	0x40010800
 8002fe0:	20000700 	.word	0x20000700

08002fe4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b096      	sub	sp, #88	@ 0x58
 8002fe8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002fee:	2228      	movs	r2, #40	@ 0x28
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f00b f877 	bl	800e0e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ff8:	f107 031c 	add.w	r3, r7, #28
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	605a      	str	r2, [r3, #4]
 8003002:	609a      	str	r2, [r3, #8]
 8003004:	60da      	str	r2, [r3, #12]
 8003006:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003008:	1d3b      	adds	r3, r7, #4
 800300a:	2200      	movs	r2, #0
 800300c:	601a      	str	r2, [r3, #0]
 800300e:	605a      	str	r2, [r3, #4]
 8003010:	609a      	str	r2, [r3, #8]
 8003012:	60da      	str	r2, [r3, #12]
 8003014:	611a      	str	r2, [r3, #16]
 8003016:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003018:	2305      	movs	r3, #5
 800301a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800301c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003020:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003022:	2300      	movs	r3, #0
 8003024:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003026:	2301      	movs	r3, #1
 8003028:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800302a:	2301      	movs	r3, #1
 800302c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800302e:	2302      	movs	r3, #2
 8003030:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003032:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003036:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003038:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800303c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800303e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003042:	4618      	mov	r0, r3
 8003044:	f004 f8ec 	bl	8007220 <HAL_RCC_OscConfig>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800304e:	f000 f83b 	bl	80030c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003052:	230f      	movs	r3, #15
 8003054:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003056:	2302      	movs	r3, #2
 8003058:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800305a:	2300      	movs	r3, #0
 800305c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800305e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003062:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003064:	2300      	movs	r3, #0
 8003066:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003068:	f107 031c 	add.w	r3, r7, #28
 800306c:	2102      	movs	r1, #2
 800306e:	4618      	mov	r0, r3
 8003070:	f004 fb58 	bl	8007724 <HAL_RCC_ClockConfig>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800307a:	f000 f825 	bl	80030c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800307e:	2301      	movs	r3, #1
 8003080:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003082:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003086:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003088:	1d3b      	adds	r3, r7, #4
 800308a:	4618      	mov	r0, r3
 800308c:	f004 fd08 	bl	8007aa0 <HAL_RCCEx_PeriphCLKConfig>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8003096:	f000 f817 	bl	80030c8 <Error_Handler>
  }
}
 800309a:	bf00      	nop
 800309c:	3758      	adds	r7, #88	@ 0x58
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
	...

080030a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a04      	ldr	r2, [pc, #16]	@ (80030c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d101      	bne.n	80030ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80030b6:	f001 faa9 	bl	800460c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80030ba:	bf00      	nop
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40012c00 	.word	0x40012c00

080030c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030cc:	b672      	cpsid	i
}
 80030ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030d0:	bf00      	nop
 80030d2:	e7fd      	b.n	80030d0 <Error_Handler+0x8>

080030d4 <nmea_GPGGA>:
    else{
        return 0;
    }
}

int nmea_GPGGA(GPS *gps_data, char*inputString){
 80030d4:	b590      	push	{r4, r7, lr}
 80030d6:	b0b7      	sub	sp, #220	@ 0xdc
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 80030de:	2300      	movs	r3, #0
 80030e0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    memset(values, 0, sizeof(values));
 80030e4:	f107 0320 	add.w	r3, r7, #32
 80030e8:	2264      	movs	r2, #100	@ 0x64
 80030ea:	2100      	movs	r1, #0
 80030ec:	4618      	mov	r0, r3
 80030ee:	f00a fffa 	bl	800e0e6 <memset>
    char *marker = strtok(inputString, ",");
 80030f2:	49c5      	ldr	r1, [pc, #788]	@ (8003408 <nmea_GPGGA+0x334>)
 80030f4:	6838      	ldr	r0, [r7, #0]
 80030f6:	f00b f831 	bl	800e15c <strtok>
 80030fa:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 80030fe:	e027      	b.n	8003150 <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8003100:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 8003104:	f7fd f89e 	bl	8000244 <strlen>
 8003108:	4603      	mov	r3, r0
 800310a:	1c5a      	adds	r2, r3, #1
 800310c:	f8d7 40d4 	ldr.w	r4, [r7, #212]	@ 0xd4
 8003110:	1c63      	adds	r3, r4, #1
 8003112:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003116:	4610      	mov	r0, r2
 8003118:	f009 fad8 	bl	800c6cc <malloc>
 800311c:	4603      	mov	r3, r0
 800311e:	461a      	mov	r2, r3
 8003120:	00a3      	lsls	r3, r4, #2
 8003122:	33d8      	adds	r3, #216	@ 0xd8
 8003124:	443b      	add	r3, r7
 8003126:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 800312a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800312e:	3b01      	subs	r3, #1
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	33d8      	adds	r3, #216	@ 0xd8
 8003134:	443b      	add	r3, r7
 8003136:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 800313a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800313e:	4618      	mov	r0, r3
 8003140:	f00b febf 	bl	800eec2 <strcpy>
        marker = strtok(NULL, ",");
 8003144:	49b0      	ldr	r1, [pc, #704]	@ (8003408 <nmea_GPGGA+0x334>)
 8003146:	2000      	movs	r0, #0
 8003148:	f00b f808 	bl	800e15c <strtok>
 800314c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 8003150:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1d3      	bne.n	8003100 <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 8003158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
    char latSide = values[3][0];
 8003160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	332c      	adds	r3, #44	@ 0x2c
 800316c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800316e:	4611      	mov	r1, r2
 8003170:	4618      	mov	r0, r3
 8003172:	f00b fea6 	bl	800eec2 <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 8003176:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 800317a:	2b53      	cmp	r3, #83	@ 0x53
 800317c:	d004      	beq.n	8003188 <nmea_GPGGA+0xb4>
 800317e:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 8003182:	2b4e      	cmp	r3, #78	@ 0x4e
 8003184:	f040 815f 	bne.w	8003446 <nmea_GPGGA+0x372>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 8003188:	2300      	movs	r3, #0
 800318a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800318e:	e010      	b.n	80031b2 <nmea_GPGGA+0xde>
 8003190:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003192:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003196:	4413      	add	r3, r2
 8003198:	7819      	ldrb	r1, [r3, #0]
 800319a:	f107 021c 	add.w	r2, r7, #28
 800319e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80031a2:	4413      	add	r3, r2
 80031a4:	460a      	mov	r2, r1
 80031a6:	701a      	strb	r2, [r3, #0]
 80031a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80031ac:	3301      	adds	r3, #1
 80031ae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80031b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	ddea      	ble.n	8003190 <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 80031ba:	2300      	movs	r3, #0
 80031bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80031c0:	e011      	b.n	80031e6 <nmea_GPGGA+0x112>
 80031c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80031c8:	3302      	adds	r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	7819      	ldrb	r1, [r3, #0]
 80031ce:	f107 0214 	add.w	r2, r7, #20
 80031d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80031d6:	4413      	add	r3, r2
 80031d8:	460a      	mov	r2, r1
 80031da:	701a      	strb	r2, [r3, #0]
 80031dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80031e0:	3301      	adds	r3, #1
 80031e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80031e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80031ea:	2b05      	cmp	r3, #5
 80031ec:	dde9      	ble.n	80031c2 <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 80031ee:	f107 031c 	add.w	r3, r7, #28
 80031f2:	220a      	movs	r2, #10
 80031f4:	2100      	movs	r1, #0
 80031f6:	4618      	mov	r0, r3
 80031f8:	f00a f9f6 	bl	800d5e8 <strtol>
 80031fc:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8003200:	f107 0314 	add.w	r3, r7, #20
 8003204:	2100      	movs	r1, #0
 8003206:	4618      	mov	r0, r3
 8003208:	f00a f91a 	bl	800d440 <strtof>
 800320c:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8003210:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8003214:	f7fd fddc 	bl	8000dd0 <__aeabi_i2f>
 8003218:	4604      	mov	r4, r0
 800321a:	497c      	ldr	r1, [pc, #496]	@ (800340c <nmea_GPGGA+0x338>)
 800321c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 8003220:	f7fd fede 	bl	8000fe0 <__aeabi_fdiv>
 8003224:	4603      	mov	r3, r0
 8003226:	4619      	mov	r1, r3
 8003228:	4620      	mov	r0, r4
 800322a:	f7fd fd1d 	bl	8000c68 <__addsf3>
 800322e:	4603      	mov	r3, r0
 8003230:	4618      	mov	r0, r3
 8003232:	f7fd f973 	bl	800051c <__aeabi_f2d>
 8003236:	4602      	mov	r2, r0
 8003238:	460b      	mov	r3, r1
 800323a:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 800323e:	2300      	movs	r3, #0
 8003240:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003244:	e010      	b.n	8003268 <nmea_GPGGA+0x194>
 8003246:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003248:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800324c:	4413      	add	r3, r2
 800324e:	7819      	ldrb	r1, [r3, #0]
 8003250:	f107 0210 	add.w	r2, r7, #16
 8003254:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003258:	4413      	add	r3, r2
 800325a:	460a      	mov	r2, r1
 800325c:	701a      	strb	r2, [r3, #0]
 800325e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003262:	3301      	adds	r3, #1
 8003264:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003268:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800326c:	2b02      	cmp	r3, #2
 800326e:	ddea      	ble.n	8003246 <nmea_GPGGA+0x172>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 8003270:	2300      	movs	r3, #0
 8003272:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003276:	e011      	b.n	800329c <nmea_GPGGA+0x1c8>
 8003278:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800327a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800327e:	3303      	adds	r3, #3
 8003280:	4413      	add	r3, r2
 8003282:	7819      	ldrb	r1, [r3, #0]
 8003284:	f107 0208 	add.w	r2, r7, #8
 8003288:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800328c:	4413      	add	r3, r2
 800328e:	460a      	mov	r2, r1
 8003290:	701a      	strb	r2, [r3, #0]
 8003292:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003296:	3301      	adds	r3, #1
 8003298:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800329c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032a0:	2b05      	cmp	r3, #5
 80032a2:	dde9      	ble.n	8003278 <nmea_GPGGA+0x1a4>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 80032a4:	f107 0310 	add.w	r3, r7, #16
 80032a8:	220a      	movs	r2, #10
 80032aa:	2100      	movs	r1, #0
 80032ac:	4618      	mov	r0, r3
 80032ae:	f00a f99b 	bl	800d5e8 <strtol>
 80032b2:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 80032b6:	f107 0308 	add.w	r3, r7, #8
 80032ba:	2100      	movs	r1, #0
 80032bc:	4618      	mov	r0, r3
 80032be:	f00a f8bf 	bl	800d440 <strtof>
 80032c2:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 80032c6:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 80032ca:	f7fd fd81 	bl	8000dd0 <__aeabi_i2f>
 80032ce:	4604      	mov	r4, r0
 80032d0:	494e      	ldr	r1, [pc, #312]	@ (800340c <nmea_GPGGA+0x338>)
 80032d2:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 80032d6:	f7fd fe83 	bl	8000fe0 <__aeabi_fdiv>
 80032da:	4603      	mov	r3, r0
 80032dc:	4619      	mov	r1, r3
 80032de:	4620      	mov	r0, r4
 80032e0:	f7fd fcc2 	bl	8000c68 <__addsf3>
 80032e4:	4603      	mov	r3, r0
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7fd f918 	bl	800051c <__aeabi_f2d>
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8003300:	f7fd fbcc 	bl	8000a9c <__aeabi_dcmpeq>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d17a      	bne.n	8003400 <nmea_GPGGA+0x32c>
 800330a:	f04f 0200 	mov.w	r2, #0
 800330e:	f04f 0300 	mov.w	r3, #0
 8003312:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8003316:	f7fd fbc1 	bl	8000a9c <__aeabi_dcmpeq>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d16f      	bne.n	8003400 <nmea_GPGGA+0x32c>
 8003320:	f04f 0200 	mov.w	r2, #0
 8003324:	4b3a      	ldr	r3, [pc, #232]	@ (8003410 <nmea_GPGGA+0x33c>)
 8003326:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800332a:	f7fd fbc1 	bl	8000ab0 <__aeabi_dcmplt>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d065      	beq.n	8003400 <nmea_GPGGA+0x32c>
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	4b36      	ldr	r3, [pc, #216]	@ (8003414 <nmea_GPGGA+0x340>)
 800333a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 800333e:	f7fd fbb7 	bl	8000ab0 <__aeabi_dcmplt>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d05b      	beq.n	8003400 <nmea_GPGGA+0x32c>
            gps_data->latitude = lat_deg;
 8003348:	6879      	ldr	r1, [r7, #4]
 800334a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800334e:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f897 20b6 	ldrb.w	r2, [r7, #182]	@ 0xb6
 8003358:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8003360:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	f897 20b7 	ldrb.w	r2, [r7, #183]	@ 0xb7
 800336a:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 800336c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800336e:	2100      	movs	r1, #0
 8003370:	4618      	mov	r0, r3
 8003372:	f00a f865 	bl	800d440 <strtof>
 8003376:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 800337a:	f04f 0100 	mov.w	r1, #0
 800337e:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8003382:	f7fd ff0d 	bl	80011a0 <__aeabi_fcmpeq>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d002      	beq.n	8003392 <nmea_GPGGA+0x2be>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	69db      	ldr	r3, [r3, #28]
 8003390:	e001      	b.n	8003396 <nmea_GPGGA+0x2c2>
 8003392:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 800339a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800339c:	220a      	movs	r2, #10
 800339e:	2100      	movs	r1, #0
 80033a0:	4618      	mov	r0, r3
 80033a2:	f00a f921 	bl	800d5e8 <strtol>
 80033a6:	4602      	mov	r2, r0
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	625a      	str	r2, [r3, #36]	@ 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 80033ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033ae:	220a      	movs	r2, #10
 80033b0:	2100      	movs	r1, #0
 80033b2:	4618      	mov	r0, r3
 80033b4:	f00a f918 	bl	800d5e8 <strtol>
 80033b8:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 80033bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	bfcc      	ite	gt
 80033c4:	2301      	movgt	r3, #1
 80033c6:	2300      	movle	r3, #0
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	461a      	mov	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	629a      	str	r2, [r3, #40]	@ 0x28

            float hdop = strtof(values[8], NULL);
 80033d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033d2:	2100      	movs	r1, #0
 80033d4:	4618      	mov	r0, r3
 80033d6:	f00a f833 	bl	800d440 <strtof>
 80033da:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 80033de:	f04f 0100 	mov.w	r1, #0
 80033e2:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 80033e6:	f7fd fedb 	bl	80011a0 <__aeabi_fcmpeq>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d002      	beq.n	80033f6 <nmea_GPGGA+0x322>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	e001      	b.n	80033fa <nmea_GPGGA+0x326>
 80033f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 80033fe:	e022      	b.n	8003446 <nmea_GPGGA+0x372>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 8003400:	2300      	movs	r3, #0
 8003402:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003406:	e016      	b.n	8003436 <nmea_GPGGA+0x362>
 8003408:	08011dec 	.word	0x08011dec
 800340c:	42700000 	.word	0x42700000
 8003410:	40568000 	.word	0x40568000
 8003414:	40668000 	.word	0x40668000
 8003418:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	33d8      	adds	r3, #216	@ 0xd8
 8003420:	443b      	add	r3, r7
 8003422:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8003426:	4618      	mov	r0, r3
 8003428:	f009 f958 	bl	800c6dc <free>
 800342c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003430:	3301      	adds	r3, #1
 8003432:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003436:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800343a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800343e:	429a      	cmp	r2, r3
 8003440:	dbea      	blt.n	8003418 <nmea_GPGGA+0x344>
            return 0;
 8003442:	2300      	movs	r3, #0
 8003444:	e019      	b.n	800347a <nmea_GPGGA+0x3a6>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 8003446:	2300      	movs	r3, #0
 8003448:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800344c:	e00e      	b.n	800346c <nmea_GPGGA+0x398>
 800344e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	33d8      	adds	r3, #216	@ 0xd8
 8003456:	443b      	add	r3, r7
 8003458:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 800345c:	4618      	mov	r0, r3
 800345e:	f009 f93d 	bl	800c6dc <free>
 8003462:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003466:	3301      	adds	r3, #1
 8003468:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800346c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003470:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003474:	429a      	cmp	r2, r3
 8003476:	dbea      	blt.n	800344e <nmea_GPGGA+0x37a>
    return 1;
 8003478:	2301      	movs	r3, #1
}
 800347a:	4618      	mov	r0, r3
 800347c:	37dc      	adds	r7, #220	@ 0xdc
 800347e:	46bd      	mov	sp, r7
 8003480:	bd90      	pop	{r4, r7, pc}
 8003482:	bf00      	nop

08003484 <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 8003484:	b590      	push	{r4, r7, lr}
 8003486:	b0a3      	sub	sp, #140	@ 0x8c
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 800348e:	2300      	movs	r3, #0
 8003490:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    memset(values, 0, sizeof(values));
 8003494:	f107 030c 	add.w	r3, r7, #12
 8003498:	2264      	movs	r2, #100	@ 0x64
 800349a:	2100      	movs	r1, #0
 800349c:	4618      	mov	r0, r3
 800349e:	f00a fe22 	bl	800e0e6 <memset>
    char *marker = strtok(inputString, ",");
 80034a2:	493b      	ldr	r1, [pc, #236]	@ (8003590 <nmea_GPGSA+0x10c>)
 80034a4:	6838      	ldr	r0, [r7, #0]
 80034a6:	f00a fe59 	bl	800e15c <strtok>
 80034aa:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    while (marker != NULL) {
 80034ae:	e027      	b.n	8003500 <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 80034b0:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80034b4:	f7fc fec6 	bl	8000244 <strlen>
 80034b8:	4603      	mov	r3, r0
 80034ba:	1c5a      	adds	r2, r3, #1
 80034bc:	f8d7 4084 	ldr.w	r4, [r7, #132]	@ 0x84
 80034c0:	1c63      	adds	r3, r4, #1
 80034c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80034c6:	4610      	mov	r0, r2
 80034c8:	f009 f900 	bl	800c6cc <malloc>
 80034cc:	4603      	mov	r3, r0
 80034ce:	461a      	mov	r2, r3
 80034d0:	00a3      	lsls	r3, r4, #2
 80034d2:	3388      	adds	r3, #136	@ 0x88
 80034d4:	443b      	add	r3, r7
 80034d6:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 80034da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80034de:	3b01      	subs	r3, #1
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	3388      	adds	r3, #136	@ 0x88
 80034e4:	443b      	add	r3, r7
 80034e6:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80034ea:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 80034ee:	4618      	mov	r0, r3
 80034f0:	f00b fce7 	bl	800eec2 <strcpy>
        marker = strtok(NULL, ",");
 80034f4:	4926      	ldr	r1, [pc, #152]	@ (8003590 <nmea_GPGSA+0x10c>)
 80034f6:	2000      	movs	r0, #0
 80034f8:	f00a fe30 	bl	800e15c <strtok>
 80034fc:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
    while (marker != NULL) {
 8003500:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1d3      	bne.n	80034b0 <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	220a      	movs	r2, #10
 800350c:	2100      	movs	r1, #0
 800350e:	4618      	mov	r0, r3
 8003510:	f00a f86a 	bl	800d5e8 <strtol>
 8003514:	6738      	str	r0, [r7, #112]	@ 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 8003516:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003518:	2b01      	cmp	r3, #1
 800351a:	bfcc      	ite	gt
 800351c:	2301      	movgt	r3, #1
 800351e:	2300      	movle	r3, #0
 8003520:	b2db      	uxtb	r3, r3
 8003522:	461a      	mov	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	629a      	str	r2, [r3, #40]	@ 0x28
    int satelliteCount = 0;
 8003528:	2300      	movs	r3, #0
 800352a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    for(int i=3; i<15; i++){
 800352c:	2303      	movs	r3, #3
 800352e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003530:	e00e      	b.n	8003550 <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 8003532:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	3388      	adds	r3, #136	@ 0x88
 8003538:	443b      	add	r3, r7
 800353a:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d002      	beq.n	800354a <nmea_GPGSA+0xc6>
            satelliteCount++;
 8003544:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003546:	3301      	adds	r3, #1
 8003548:	67fb      	str	r3, [r7, #124]	@ 0x7c
    for(int i=3; i<15; i++){
 800354a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800354c:	3301      	adds	r3, #1
 800354e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003550:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003552:	2b0e      	cmp	r3, #14
 8003554:	dded      	ble.n	8003532 <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800355a:	625a      	str	r2, [r3, #36]	@ 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 800355c:	2300      	movs	r3, #0
 800355e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003560:	e00b      	b.n	800357a <nmea_GPGSA+0xf6>
 8003562:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	3388      	adds	r3, #136	@ 0x88
 8003568:	443b      	add	r3, r7
 800356a:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 800356e:	4618      	mov	r0, r3
 8003570:	f009 f8b4 	bl	800c6dc <free>
 8003574:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003576:	3301      	adds	r3, #1
 8003578:	677b      	str	r3, [r7, #116]	@ 0x74
 800357a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800357c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003580:	429a      	cmp	r2, r3
 8003582:	dbee      	blt.n	8003562 <nmea_GPGSA+0xde>
    return 1;
 8003584:	2301      	movs	r3, #1
}
 8003586:	4618      	mov	r0, r3
 8003588:	378c      	adds	r7, #140	@ 0x8c
 800358a:	46bd      	mov	sp, r7
 800358c:	bd90      	pop	{r4, r7, pc}
 800358e:	bf00      	nop
 8003590:	08011dec 	.word	0x08011dec

08003594 <nmea_GPGLL>:



int nmea_GPGLL(GPS *gps_data, char*inputString) {
 8003594:	b590      	push	{r4, r7, lr}
 8003596:	b0b7      	sub	sp, #220	@ 0xdc
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]

    char *values[25];
    int counter = 0;
 800359e:	2300      	movs	r3, #0
 80035a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    memset(values, 0, sizeof(values));
 80035a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035a8:	2264      	movs	r2, #100	@ 0x64
 80035aa:	2100      	movs	r1, #0
 80035ac:	4618      	mov	r0, r3
 80035ae:	f00a fd9a 	bl	800e0e6 <memset>
    char *marker = strtok(inputString, ",");
 80035b2:	49b0      	ldr	r1, [pc, #704]	@ (8003874 <nmea_GPGLL+0x2e0>)
 80035b4:	6838      	ldr	r0, [r7, #0]
 80035b6:	f00a fdd1 	bl	800e15c <strtok>
 80035ba:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 80035be:	e027      	b.n	8003610 <nmea_GPGLL+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 80035c0:	f8d7 00d0 	ldr.w	r0, [r7, #208]	@ 0xd0
 80035c4:	f7fc fe3e 	bl	8000244 <strlen>
 80035c8:	4603      	mov	r3, r0
 80035ca:	1c5a      	adds	r2, r3, #1
 80035cc:	f8d7 40d4 	ldr.w	r4, [r7, #212]	@ 0xd4
 80035d0:	1c63      	adds	r3, r4, #1
 80035d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80035d6:	4610      	mov	r0, r2
 80035d8:	f009 f878 	bl	800c6cc <malloc>
 80035dc:	4603      	mov	r3, r0
 80035de:	461a      	mov	r2, r3
 80035e0:	00a3      	lsls	r3, r4, #2
 80035e2:	33d8      	adds	r3, #216	@ 0xd8
 80035e4:	443b      	add	r3, r7
 80035e6:	f843 2cb4 	str.w	r2, [r3, #-180]
        strcpy(values[counter - 1], marker);
 80035ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80035ee:	3b01      	subs	r3, #1
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	33d8      	adds	r3, #216	@ 0xd8
 80035f4:	443b      	add	r3, r7
 80035f6:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 80035fa:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80035fe:	4618      	mov	r0, r3
 8003600:	f00b fc5f 	bl	800eec2 <strcpy>
        marker = strtok(NULL, ",");
 8003604:	499b      	ldr	r1, [pc, #620]	@ (8003874 <nmea_GPGLL+0x2e0>)
 8003606:	2000      	movs	r0, #0
 8003608:	f00a fda8 	bl	800e15c <strtok>
 800360c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    while (marker != NULL) {
 8003610:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1d3      	bne.n	80035c0 <nmea_GPGLL+0x2c>
    }
    char latSide = values[2][0];
 8003618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
    if (latSide == 'S' || latSide == 'N') { //check if data is sorta intact
 8003620:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8003624:	2b53      	cmp	r3, #83	@ 0x53
 8003626:	d004      	beq.n	8003632 <nmea_GPGLL+0x9e>
 8003628:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 800362c:	2b4e      	cmp	r3, #78	@ 0x4e
 800362e:	f040 811c 	bne.w	800386a <nmea_GPGLL+0x2d6>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[1][z];
 8003632:	2300      	movs	r3, #0
 8003634:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003638:	e010      	b.n	800365c <nmea_GPGLL+0xc8>
 800363a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800363c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003640:	4413      	add	r3, r2
 8003642:	7819      	ldrb	r1, [r3, #0]
 8003644:	f107 0220 	add.w	r2, r7, #32
 8003648:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800364c:	4413      	add	r3, r2
 800364e:	460a      	mov	r2, r1
 8003650:	701a      	strb	r2, [r3, #0]
 8003652:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003656:	3301      	adds	r3, #1
 8003658:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800365c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003660:	2b01      	cmp	r3, #1
 8003662:	ddea      	ble.n	800363a <nmea_GPGLL+0xa6>
        for (int z = 0; z < 6; z++) lat_m[z] = values[1][z + 2];
 8003664:	2300      	movs	r3, #0
 8003666:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800366a:	e011      	b.n	8003690 <nmea_GPGLL+0xfc>
 800366c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800366e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003672:	3302      	adds	r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	7819      	ldrb	r1, [r3, #0]
 8003678:	f107 0218 	add.w	r2, r7, #24
 800367c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003680:	4413      	add	r3, r2
 8003682:	460a      	mov	r2, r1
 8003684:	701a      	strb	r2, [r3, #0]
 8003686:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800368a:	3301      	adds	r3, #1
 800368c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003690:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003694:	2b05      	cmp	r3, #5
 8003696:	dde9      	ble.n	800366c <nmea_GPGLL+0xd8>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 8003698:	f107 0320 	add.w	r3, r7, #32
 800369c:	220a      	movs	r2, #10
 800369e:	2100      	movs	r1, #0
 80036a0:	4618      	mov	r0, r3
 80036a2:	f009 ffa1 	bl	800d5e8 <strtol>
 80036a6:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 80036aa:	f107 0318 	add.w	r3, r7, #24
 80036ae:	2100      	movs	r1, #0
 80036b0:	4618      	mov	r0, r3
 80036b2:	f009 fec5 	bl	800d440 <strtof>
 80036b6:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 80036ba:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 80036be:	f7fd fb87 	bl	8000dd0 <__aeabi_i2f>
 80036c2:	4604      	mov	r4, r0
 80036c4:	496c      	ldr	r1, [pc, #432]	@ (8003878 <nmea_GPGLL+0x2e4>)
 80036c6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80036ca:	f7fd fc89 	bl	8000fe0 <__aeabi_fdiv>
 80036ce:	4603      	mov	r3, r0
 80036d0:	4619      	mov	r1, r3
 80036d2:	4620      	mov	r0, r4
 80036d4:	f7fd fac8 	bl	8000c68 <__addsf3>
 80036d8:	4603      	mov	r3, r0
 80036da:	4618      	mov	r0, r3
 80036dc:	f7fc ff1e 	bl	800051c <__aeabi_f2d>
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0

        char lon_d[3];
        char lon_m[7];
        char lonSide = values[4][0];
 80036e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
        for (int z = 0; z < 3; z++) lon_d[z] = values[3][z];
 80036f0:	2300      	movs	r3, #0
 80036f2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80036f6:	e010      	b.n	800371a <nmea_GPGLL+0x186>
 80036f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036fe:	4413      	add	r3, r2
 8003700:	7819      	ldrb	r1, [r3, #0]
 8003702:	f107 0214 	add.w	r2, r7, #20
 8003706:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800370a:	4413      	add	r3, r2
 800370c:	460a      	mov	r2, r1
 800370e:	701a      	strb	r2, [r3, #0]
 8003710:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003714:	3301      	adds	r3, #1
 8003716:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800371a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800371e:	2b02      	cmp	r3, #2
 8003720:	ddea      	ble.n	80036f8 <nmea_GPGLL+0x164>
        for (int z = 0; z < 6; z++) lon_m[z] = values[3][z + 3];
 8003722:	2300      	movs	r3, #0
 8003724:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003728:	e011      	b.n	800374e <nmea_GPGLL+0x1ba>
 800372a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800372c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003730:	3303      	adds	r3, #3
 8003732:	4413      	add	r3, r2
 8003734:	7819      	ldrb	r1, [r3, #0]
 8003736:	f107 020c 	add.w	r2, r7, #12
 800373a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800373e:	4413      	add	r3, r2
 8003740:	460a      	mov	r2, r1
 8003742:	701a      	strb	r2, [r3, #0]
 8003744:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003748:	3301      	adds	r3, #1
 800374a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800374e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003752:	2b05      	cmp	r3, #5
 8003754:	dde9      	ble.n	800372a <nmea_GPGLL+0x196>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 8003756:	f107 0314 	add.w	r3, r7, #20
 800375a:	220a      	movs	r2, #10
 800375c:	2100      	movs	r1, #0
 800375e:	4618      	mov	r0, r3
 8003760:	f009 ff42 	bl	800d5e8 <strtol>
 8003764:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
        float lon_min_strtof = strtof(lon_m, NULL);
 8003768:	f107 030c 	add.w	r3, r7, #12
 800376c:	2100      	movs	r1, #0
 800376e:	4618      	mov	r0, r3
 8003770:	f009 fe66 	bl	800d440 <strtof>
 8003774:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 8003778:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 800377c:	f7fd fb28 	bl	8000dd0 <__aeabi_i2f>
 8003780:	4604      	mov	r4, r0
 8003782:	493d      	ldr	r1, [pc, #244]	@ (8003878 <nmea_GPGLL+0x2e4>)
 8003784:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8003788:	f7fd fc2a 	bl	8000fe0 <__aeabi_fdiv>
 800378c:	4603      	mov	r3, r0
 800378e:	4619      	mov	r1, r3
 8003790:	4620      	mov	r0, r4
 8003792:	f7fd fa69 	bl	8000c68 <__addsf3>
 8003796:	4603      	mov	r3, r0
 8003798:	4618      	mov	r0, r3
 800379a:	f7fc febf 	bl	800051c <__aeabi_f2d>
 800379e:	4602      	mov	r2, r0
 80037a0:	460b      	mov	r3, r1
 80037a2:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
        //confirm that we aren't on null island
        if(lon_deg_strtol == 0 || lon_min_strtof == 0 || lat_deg_strtol == 0 || lat_min_strtof == 0) {
 80037a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d015      	beq.n	80037da <nmea_GPGLL+0x246>
 80037ae:	f04f 0100 	mov.w	r1, #0
 80037b2:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 80037b6:	f7fd fcf3 	bl	80011a0 <__aeabi_fcmpeq>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10c      	bne.n	80037da <nmea_GPGLL+0x246>
 80037c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d008      	beq.n	80037da <nmea_GPGLL+0x246>
 80037c8:	f04f 0100 	mov.w	r1, #0
 80037cc:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80037d0:	f7fd fce6 	bl	80011a0 <__aeabi_fcmpeq>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d01a      	beq.n	8003810 <nmea_GPGLL+0x27c>
            for(int i = 0; i<counter; i++) free(values[i]);
 80037da:	2300      	movs	r3, #0
 80037dc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80037e0:	e00e      	b.n	8003800 <nmea_GPGLL+0x26c>
 80037e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	33d8      	adds	r3, #216	@ 0xd8
 80037ea:	443b      	add	r3, r7
 80037ec:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f008 ff73 	bl	800c6dc <free>
 80037f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80037fa:	3301      	adds	r3, #1
 80037fc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003800:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8003804:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003808:	429a      	cmp	r2, r3
 800380a:	dbea      	blt.n	80037e2 <nmea_GPGLL+0x24e>
            return 0;
 800380c:	2300      	movs	r3, #0
 800380e:	e02d      	b.n	800386c <nmea_GPGLL+0x2d8>
        }
        else{
            gps_data->latitude = lat_deg;
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8003816:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->longitude = lon_deg;
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003820:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->latSide = latSide;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f897 20b7 	ldrb.w	r2, [r7, #183]	@ 0xb7
 800382a:	721a      	strb	r2, [r3, #8]
            gps_data->lonSide = lonSide;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 8003832:	761a      	strb	r2, [r3, #24]
            for(int i = 0; i<counter; i++) free(values[i]);
 8003834:	2300      	movs	r3, #0
 8003836:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800383a:	e00e      	b.n	800385a <nmea_GPGLL+0x2c6>
 800383c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	33d8      	adds	r3, #216	@ 0xd8
 8003844:	443b      	add	r3, r7
 8003846:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 800384a:	4618      	mov	r0, r3
 800384c:	f008 ff46 	bl	800c6dc <free>
 8003850:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003854:	3301      	adds	r3, #1
 8003856:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800385a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800385e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003862:	429a      	cmp	r2, r3
 8003864:	dbea      	blt.n	800383c <nmea_GPGLL+0x2a8>
            return 1;
 8003866:	2301      	movs	r3, #1
 8003868:	e000      	b.n	800386c <nmea_GPGLL+0x2d8>
        }
    }
    else return 0;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	37dc      	adds	r7, #220	@ 0xdc
 8003870:	46bd      	mov	sp, r7
 8003872:	bd90      	pop	{r4, r7, pc}
 8003874:	08011dec 	.word	0x08011dec
 8003878:	42700000 	.word	0x42700000

0800387c <nmea_GPRMC>:


int nmea_GPRMC(GPS *gps_data, char* inputString) {
 800387c:	b580      	push	{r7, lr}
 800387e:	b0a0      	sub	sp, #128	@ 0x80
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]

    char *values[25];
    int counter = 0;
 8003886:	2300      	movs	r3, #0
 8003888:	67fb      	str	r3, [r7, #124]	@ 0x7c
    memset(values, 0, sizeof(values));
 800388a:	f107 0308 	add.w	r3, r7, #8
 800388e:	2264      	movs	r2, #100	@ 0x64
 8003890:	2100      	movs	r1, #0
 8003892:	4618      	mov	r0, r3
 8003894:	f00a fc27 	bl	800e0e6 <memset>
    char *start = inputString;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	67bb      	str	r3, [r7, #120]	@ 0x78
    char *end;

    // Loop until the end of the string is reached.
    while (start != NULL && *start != '\0') {
 800389c:	e058      	b.n	8003950 <nmea_GPRMC+0xd4>
        end = strchr(start, ',');
 800389e:	212c      	movs	r1, #44	@ 0x2c
 80038a0:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80038a2:	f00a fc28 	bl	800e0f6 <strchr>
 80038a6:	6778      	str	r0, [r7, #116]	@ 0x74
        if (end == NULL) {
 80038a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d106      	bne.n	80038bc <nmea_GPRMC+0x40>
            // Last token reached.
            end = start + strlen(start);
 80038ae:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 80038b0:	f7fc fcc8 	bl	8000244 <strlen>
 80038b4:	4602      	mov	r2, r0
 80038b6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038b8:	4413      	add	r3, r2
 80038ba:	677b      	str	r3, [r7, #116]	@ 0x74
        }

        if (end == start) {
 80038bc:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80038be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d113      	bne.n	80038ec <nmea_GPRMC+0x70>
            // Empty field found.
            values[counter] = malloc(1); // Allocate space for a single character
 80038c4:	2001      	movs	r0, #1
 80038c6:	f008 ff01 	bl	800c6cc <malloc>
 80038ca:	4603      	mov	r3, r0
 80038cc:	461a      	mov	r2, r3
 80038ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	3380      	adds	r3, #128	@ 0x80
 80038d4:	443b      	add	r3, r7
 80038d6:	f843 2c78 	str.w	r2, [r3, #-120]
            values[counter][0] = '\0';   // Set it to the empty string
 80038da:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	3380      	adds	r3, #128	@ 0x80
 80038e0:	443b      	add	r3, r7
 80038e2:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80038e6:	2200      	movs	r2, #0
 80038e8:	701a      	strb	r2, [r3, #0]
 80038ea:	e027      	b.n	800393c <nmea_GPRMC+0xc0>
        } else {
            // Non-empty field found.
            values[counter] = malloc(end - start + 1); // Allocate space for the token
 80038ec:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80038ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	3301      	adds	r3, #1
 80038f4:	4618      	mov	r0, r3
 80038f6:	f008 fee9 	bl	800c6cc <malloc>
 80038fa:	4603      	mov	r3, r0
 80038fc:	461a      	mov	r2, r3
 80038fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	3380      	adds	r3, #128	@ 0x80
 8003904:	443b      	add	r3, r7
 8003906:	f843 2c78 	str.w	r2, [r3, #-120]
            strncpy(values[counter], start, end - start); // Copy the token
 800390a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	3380      	adds	r3, #128	@ 0x80
 8003910:	443b      	add	r3, r7
 8003912:	f853 0c78 	ldr.w	r0, [r3, #-120]
 8003916:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003918:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	461a      	mov	r2, r3
 800391e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8003920:	f00a fc08 	bl	800e134 <strncpy>
            values[counter][end - start] = '\0'; // Null-terminate it
 8003924:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	3380      	adds	r3, #128	@ 0x80
 800392a:	443b      	add	r3, r7
 800392c:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8003930:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003932:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003934:	1a8a      	subs	r2, r1, r2
 8003936:	4413      	add	r3, r2
 8003938:	2200      	movs	r2, #0
 800393a:	701a      	strb	r2, [r3, #0]
        }

        counter++;
 800393c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800393e:	3301      	adds	r3, #1
 8003940:	67fb      	str	r3, [r7, #124]	@ 0x7c
        if (*end == '\0') {
 8003942:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00a      	beq.n	8003960 <nmea_GPRMC+0xe4>
            // End of the string reached.
            break;
        }
        start = end + 1; // Move to the start of the next token.
 800394a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800394c:	3301      	adds	r3, #1
 800394e:	67bb      	str	r3, [r7, #120]	@ 0x78
    while (start != NULL && *start != '\0') {
 8003950:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003952:	2b00      	cmp	r3, #0
 8003954:	d005      	beq.n	8003962 <nmea_GPRMC+0xe6>
 8003956:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d19f      	bne.n	800389e <nmea_GPRMC+0x22>
 800395e:	e000      	b.n	8003962 <nmea_GPRMC+0xe6>
            break;
 8003960:	bf00      	nop
    }

    // ... (Rest of your code for checking and handling the date and freeing memory)

    // Make sure to check if the date was successfully extracted
    if (counter > 9 && strlen(values[9]) == 6) {
 8003962:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003964:	2b09      	cmp	r3, #9
 8003966:	dd2a      	ble.n	80039be <nmea_GPRMC+0x142>
 8003968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800396a:	4618      	mov	r0, r3
 800396c:	f7fc fc6a 	bl	8000244 <strlen>
 8003970:	4603      	mov	r3, r0
 8003972:	2b06      	cmp	r3, #6
 8003974:	d123      	bne.n	80039be <nmea_GPRMC+0x142>
        strncpy(gps_data->date, values[9], 6);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	3336      	adds	r3, #54	@ 0x36
 800397a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800397c:	2206      	movs	r2, #6
 800397e:	4618      	mov	r0, r3
 8003980:	f00a fbd8 	bl	800e134 <strncpy>
        gps_data->date[6] = '\0';
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        // Free allocated memory
        for (int i = 0; i < counter; i++) free(values[i]);
 800398c:	2300      	movs	r3, #0
 800398e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003990:	e00b      	b.n	80039aa <nmea_GPRMC+0x12e>
 8003992:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	3380      	adds	r3, #128	@ 0x80
 8003998:	443b      	add	r3, r7
 800399a:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800399e:	4618      	mov	r0, r3
 80039a0:	f008 fe9c 	bl	800c6dc <free>
 80039a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039a6:	3301      	adds	r3, #1
 80039a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80039aa:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80039ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80039ae:	429a      	cmp	r2, r3
 80039b0:	dbef      	blt.n	8003992 <nmea_GPRMC+0x116>
        gps_data->RMC_Flag = 1;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        return 1; // Success
 80039ba:	2301      	movs	r3, #1
 80039bc:	e013      	b.n	80039e6 <nmea_GPRMC+0x16a>
    } else {
        // Free allocated memory before returning
        for (int i = 0; i < counter; i++) free(values[i]);
 80039be:	2300      	movs	r3, #0
 80039c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80039c2:	e00b      	b.n	80039dc <nmea_GPRMC+0x160>
 80039c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	3380      	adds	r3, #128	@ 0x80
 80039ca:	443b      	add	r3, r7
 80039cc:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f008 fe83 	bl	800c6dc <free>
 80039d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039d8:	3301      	adds	r3, #1
 80039da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80039dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80039de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80039e0:	429a      	cmp	r2, r3
 80039e2:	dbef      	blt.n	80039c4 <nmea_GPRMC+0x148>
        return 0; // Failure
 80039e4:	2300      	movs	r3, #0
    }
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3780      	adds	r7, #128	@ 0x80
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
	...

080039f0 <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 80039f0:	b590      	push	{r4, r7, lr}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 80039fa:	223c      	movs	r2, #60	@ 0x3c
 80039fc:	2100      	movs	r1, #0
 80039fe:	485e      	ldr	r0, [pc, #376]	@ (8003b78 <nmea_parse+0x188>)
 8003a00:	f00a fb71 	bl	800e0e6 <memset>
    char * token = strtok(buffer, "$"); // TODO: Check if buffer can be casted to a char * for strtok argument
 8003a04:	495d      	ldr	r1, [pc, #372]	@ (8003b7c <nmea_parse+0x18c>)
 8003a06:	6838      	ldr	r0, [r7, #0]
 8003a08:	f00a fba8 	bl	800e15c <strtok>
 8003a0c:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 8003a12:	e01d      	b.n	8003a50 <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 8003a14:	6978      	ldr	r0, [r7, #20]
 8003a16:	f7fc fc15 	bl	8000244 <strlen>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	1c5a      	adds	r2, r3, #1
 8003a1e:	693c      	ldr	r4, [r7, #16]
 8003a20:	1c63      	adds	r3, r4, #1
 8003a22:	613b      	str	r3, [r7, #16]
 8003a24:	4610      	mov	r0, r2
 8003a26:	f008 fe51 	bl	800c6cc <malloc>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	4b52      	ldr	r3, [pc, #328]	@ (8003b78 <nmea_parse+0x188>)
 8003a30:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	3b01      	subs	r3, #1
 8003a38:	4a4f      	ldr	r2, [pc, #316]	@ (8003b78 <nmea_parse+0x188>)
 8003a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a3e:	6979      	ldr	r1, [r7, #20]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f00b fa3e 	bl	800eec2 <strcpy>
        token = strtok(NULL, "$");
 8003a46:	494d      	ldr	r1, [pc, #308]	@ (8003b7c <nmea_parse+0x18c>)
 8003a48:	2000      	movs	r0, #0
 8003a4a:	f00a fb87 	bl	800e15c <strtok>
 8003a4e:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1de      	bne.n	8003a14 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 8003a56:	2300      	movs	r3, #0
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	e072      	b.n	8003b42 <nmea_parse+0x152>
       if(strstr(data[i], "\r\n")!=NULL){
 8003a5c:	4a46      	ldr	r2, [pc, #280]	@ (8003b78 <nmea_parse+0x188>)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a64:	4946      	ldr	r1, [pc, #280]	@ (8003b80 <nmea_parse+0x190>)
 8003a66:	4618      	mov	r0, r3
 8003a68:	f00a fbd4 	bl	800e214 <strstr>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d064      	beq.n	8003b3c <nmea_parse+0x14c>
           if(strstr(data[i], "GPGLL")!=NULL){
 8003a72:	4a41      	ldr	r2, [pc, #260]	@ (8003b78 <nmea_parse+0x188>)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a7a:	4942      	ldr	r1, [pc, #264]	@ (8003b84 <nmea_parse+0x194>)
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f00a fbc9 	bl	800e214 <strstr>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d008      	beq.n	8003a9a <nmea_parse+0xaa>
               nmea_GPGLL(gps_data, data[i]);
 8003a88:	4a3b      	ldr	r2, [pc, #236]	@ (8003b78 <nmea_parse+0x188>)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a90:	4619      	mov	r1, r3
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7ff fd7e 	bl	8003594 <nmea_GPGLL>
 8003a98:	e050      	b.n	8003b3c <nmea_parse+0x14c>
           }
           else if(strstr(data[i], "GPGSA")!=NULL){
 8003a9a:	4a37      	ldr	r2, [pc, #220]	@ (8003b78 <nmea_parse+0x188>)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aa2:	4939      	ldr	r1, [pc, #228]	@ (8003b88 <nmea_parse+0x198>)
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f00a fbb5 	bl	800e214 <strstr>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d008      	beq.n	8003ac2 <nmea_parse+0xd2>
               nmea_GPGSA(gps_data, data[i]);
 8003ab0:	4a31      	ldr	r2, [pc, #196]	@ (8003b78 <nmea_parse+0x188>)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ab8:	4619      	mov	r1, r3
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7ff fce2 	bl	8003484 <nmea_GPGSA>
 8003ac0:	e03c      	b.n	8003b3c <nmea_parse+0x14c>
           }
           else if(strstr(data[i], "GNGGA") != NULL || (strstr(data[i], "GPGGA"))!=NULL){
 8003ac2:	4a2d      	ldr	r2, [pc, #180]	@ (8003b78 <nmea_parse+0x188>)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aca:	4930      	ldr	r1, [pc, #192]	@ (8003b8c <nmea_parse+0x19c>)
 8003acc:	4618      	mov	r0, r3
 8003ace:	f00a fba1 	bl	800e214 <strstr>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10a      	bne.n	8003aee <nmea_parse+0xfe>
 8003ad8:	4a27      	ldr	r2, [pc, #156]	@ (8003b78 <nmea_parse+0x188>)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ae0:	492b      	ldr	r1, [pc, #172]	@ (8003b90 <nmea_parse+0x1a0>)
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f00a fb96 	bl	800e214 <strstr>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d008      	beq.n	8003b00 <nmea_parse+0x110>
               nmea_GPGGA(gps_data, data[i]);
 8003aee:	4a22      	ldr	r2, [pc, #136]	@ (8003b78 <nmea_parse+0x188>)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003af6:	4619      	mov	r1, r3
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7ff faeb 	bl	80030d4 <nmea_GPGGA>
 8003afe:	e01d      	b.n	8003b3c <nmea_parse+0x14c>
           }
           else if(strstr(data[i], "GNRMC") != NULL || (strstr(data[i], "GPRMC"))!=NULL){
 8003b00:	4a1d      	ldr	r2, [pc, #116]	@ (8003b78 <nmea_parse+0x188>)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b08:	4922      	ldr	r1, [pc, #136]	@ (8003b94 <nmea_parse+0x1a4>)
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f00a fb82 	bl	800e214 <strstr>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10a      	bne.n	8003b2c <nmea_parse+0x13c>
 8003b16:	4a18      	ldr	r2, [pc, #96]	@ (8003b78 <nmea_parse+0x188>)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b1e:	491e      	ldr	r1, [pc, #120]	@ (8003b98 <nmea_parse+0x1a8>)
 8003b20:	4618      	mov	r0, r3
 8003b22:	f00a fb77 	bl	800e214 <strstr>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d007      	beq.n	8003b3c <nmea_parse+0x14c>
	       nmea_GPRMC(gps_data, data[i]);
 8003b2c:	4a12      	ldr	r2, [pc, #72]	@ (8003b78 <nmea_parse+0x188>)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b34:	4619      	mov	r1, r3
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7ff fea0 	bl	800387c <nmea_GPRMC>
    for(int i = 0; i<cnt; i++){
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	60fb      	str	r3, [r7, #12]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	db88      	blt.n	8003a5c <nmea_parse+0x6c>
	   }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60bb      	str	r3, [r7, #8]
 8003b4e:	e009      	b.n	8003b64 <nmea_parse+0x174>
 8003b50:	4a09      	ldr	r2, [pc, #36]	@ (8003b78 <nmea_parse+0x188>)
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f008 fdbf 	bl	800c6dc <free>
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	3301      	adds	r3, #1
 8003b62:	60bb      	str	r3, [r7, #8]
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	dbf1      	blt.n	8003b50 <nmea_parse+0x160>


}
 8003b6c:	bf00      	nop
 8003b6e:	bf00      	nop
 8003b70:	371c      	adds	r7, #28
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd90      	pop	{r4, r7, pc}
 8003b76:	bf00      	nop
 8003b78:	20000730 	.word	0x20000730
 8003b7c:	08011df0 	.word	0x08011df0
 8003b80:	08011df4 	.word	0x08011df4
 8003b84:	08011df8 	.word	0x08011df8
 8003b88:	08011e00 	.word	0x08011e00
 8003b8c:	08011e08 	.word	0x08011e08
 8003b90:	08011e10 	.word	0x08011e10
 8003b94:	08011e18 	.word	0x08011e18
 8003b98:	08011e20 	.word	0x08011e20

08003b9c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003ba2:	1d3b      	adds	r3, r7, #4
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	460a      	mov	r2, r1
 8003ba8:	801a      	strh	r2, [r3, #0]
 8003baa:	460a      	mov	r2, r1
 8003bac:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8003bae:	2300      	movs	r3, #0
 8003bb0:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003bb2:	4b1d      	ldr	r3, [pc, #116]	@ (8003c28 <MX_RTC_Init+0x8c>)
 8003bb4:	4a1d      	ldr	r2, [pc, #116]	@ (8003c2c <MX_RTC_Init+0x90>)
 8003bb6:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8003bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c28 <MX_RTC_Init+0x8c>)
 8003bba:	f04f 32ff 	mov.w	r2, #4294967295
 8003bbe:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8003bc0:	4b19      	ldr	r3, [pc, #100]	@ (8003c28 <MX_RTC_Init+0x8c>)
 8003bc2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003bc6:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003bc8:	4817      	ldr	r0, [pc, #92]	@ (8003c28 <MX_RTC_Init+0x8c>)
 8003bca:	f004 f8f7 	bl	8007dbc <HAL_RTC_Init>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8003bd4:	f7ff fa78 	bl	80030c8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003be0:	2300      	movs	r3, #0
 8003be2:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003be4:	1d3b      	adds	r3, r7, #4
 8003be6:	2201      	movs	r2, #1
 8003be8:	4619      	mov	r1, r3
 8003bea:	480f      	ldr	r0, [pc, #60]	@ (8003c28 <MX_RTC_Init+0x8c>)
 8003bec:	f004 f972 	bl	8007ed4 <HAL_RTC_SetTime>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8003bf6:	f7ff fa67 	bl	80030c8 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8003c02:	2301      	movs	r3, #1
 8003c04:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8003c06:	2300      	movs	r3, #0
 8003c08:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8003c0a:	463b      	mov	r3, r7
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	4619      	mov	r1, r3
 8003c10:	4805      	ldr	r0, [pc, #20]	@ (8003c28 <MX_RTC_Init+0x8c>)
 8003c12:	f004 facf 	bl	80081b4 <HAL_RTC_SetDate>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8003c1c:	f7ff fa54 	bl	80030c8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003c20:	bf00      	nop
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	2000076c 	.word	0x2000076c
 8003c2c:	40002800 	.word	0x40002800

08003c30 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a0b      	ldr	r2, [pc, #44]	@ (8003c6c <HAL_RTC_MspInit+0x3c>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d110      	bne.n	8003c64 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8003c42:	f003 fae1 	bl	8007208 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8003c46:	4b0a      	ldr	r3, [pc, #40]	@ (8003c70 <HAL_RTC_MspInit+0x40>)
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	4a09      	ldr	r2, [pc, #36]	@ (8003c70 <HAL_RTC_MspInit+0x40>)
 8003c4c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003c50:	61d3      	str	r3, [r2, #28]
 8003c52:	4b07      	ldr	r3, [pc, #28]	@ (8003c70 <HAL_RTC_MspInit+0x40>)
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c5a:	60fb      	str	r3, [r7, #12]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003c5e:	4b05      	ldr	r3, [pc, #20]	@ (8003c74 <HAL_RTC_MspInit+0x44>)
 8003c60:	2201      	movs	r2, #1
 8003c62:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003c64:	bf00      	nop
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40002800 	.word	0x40002800
 8003c70:	40021000 	.word	0x40021000
 8003c74:	4242043c 	.word	0x4242043c

08003c78 <Sync_RTC_With_GPS>:

/* USER CODE BEGIN 1 */


void Sync_RTC_With_GPS()
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	f5ad 6d8b 	sub.w	sp, sp, #1112	@ 0x458
 8003c7e:	af02      	add	r7, sp, #8
  /* Buffers for the GPSTime and GPSDate */
  char GPSTime[256];
  char GPSDate[256];

  /* Flag to track if the sync is complete */
  uint8_t RTC_Sync_Flag = 0;
 8003c80:	2300      	movs	r3, #0
 8003c82:	f887 344f 	strb.w	r3, [r7, #1103]	@ 0x44f

  uint32_t gps_sync_start_time = HAL_GetTick();
 8003c86:	f000 fcd3 	bl	8004630 <HAL_GetTick>
 8003c8a:	f8c7 0448 	str.w	r0, [r7, #1096]	@ 0x448
  while(RTC_Sync_Flag == 0 && HAL_GetTick() - gps_sync_start_time < GPS_SYNC_TIMEOUT) {
 8003c8e:	e119      	b.n	8003ec4 <Sync_RTC_With_GPS+0x24c>
      printf("Still syncing\n\r");
 8003c90:	489b      	ldr	r0, [pc, #620]	@ (8003f00 <Sync_RTC_With_GPS+0x288>)
 8003c92:	f00a f9d1 	bl	800e038 <iprintf>
    /* Read in an NMEA message into the buffer */
    if(HAL_I2C_IsDeviceReady(&hi2c1, GPS_DEVICE_ADDRESS, 1, HAL_MAX_DELAY) == HAL_OK) {
 8003c96:	f04f 33ff 	mov.w	r3, #4294967295
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	2184      	movs	r1, #132	@ 0x84
 8003c9e:	4899      	ldr	r0, [pc, #612]	@ (8003f04 <Sync_RTC_With_GPS+0x28c>)
 8003ca0:	f002 fd02 	bl	80066a8 <HAL_I2C_IsDeviceReady>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f040 810c 	bne.w	8003ec4 <Sync_RTC_With_GPS+0x24c>
	    HAL_I2C_Master_Receive(&hi2c1, GPS_DEVICE_ADDRESS, receive_buffer, sizeof(receive_buffer), HAL_MAX_DELAY);
 8003cac:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8003cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb4:	9300      	str	r3, [sp, #0]
 8003cb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003cba:	2184      	movs	r1, #132	@ 0x84
 8003cbc:	4891      	ldr	r0, [pc, #580]	@ (8003f04 <Sync_RTC_With_GPS+0x28c>)
 8003cbe:	f001 ff25 	bl	8005b0c <HAL_I2C_Master_Receive>
	    //printf("Got Data\n\r");

	    GPS myData;
      nmea_parse(&myData, &receive_buffer);
 8003cc2:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8003cc6:	463b      	mov	r3, r7
 8003cc8:	4611      	mov	r1, r2
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f7ff fe90 	bl	80039f0 <nmea_parse>

      /*
       * lastMeasure is a null-terminated string and has the format hhmmss.sss
       * Make sure there's a valid fix and that there is an RMC message
       */
      if(myData.fix == 1 && myData.RMC_Flag == 1) {
 8003cd0:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003cd4:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8003cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	f040 80f2 	bne.w	8003ec4 <Sync_RTC_With_GPS+0x24c>
 8003ce0:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003ce4:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8003ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	f040 80e9 	bne.w	8003ec4 <Sync_RTC_With_GPS+0x24c>
        //printf("Setting the RTC now\n\r");
        /* Copy the GPS time to GPSTime */
        strncpy(GPSTime, myData.lastMeasure, 10);
 8003cf2:	463b      	mov	r3, r7
 8003cf4:	f103 012c 	add.w	r1, r3, #44	@ 0x2c
 8003cf8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003cfc:	220a      	movs	r2, #10
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f00a fa18 	bl	800e134 <strncpy>
        GPSTime[10] = '\0'; // Ensure null termination
 8003d04:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003d08:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	729a      	strb	r2, [r3, #10]

        /* Copy the GPS date to GPSDate */
        strncpy(GPSDate, myData.date, 6);
 8003d10:	463b      	mov	r3, r7
 8003d12:	f103 0136 	add.w	r1, r3, #54	@ 0x36
 8003d16:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003d1a:	2206      	movs	r2, #6
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f00a fa09 	bl	800e134 <strncpy>
        GPSDate[6] = '\0'; // Ensure null termination
 8003d22:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003d26:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	719a      	strb	r2, [r3, #6]

        /* Initialize Time and Date Objects */
        RTC_TimeTypeDef sTime = {0};
 8003d2e:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003d32:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8003d36:	2100      	movs	r1, #0
 8003d38:	460a      	mov	r2, r1
 8003d3a:	801a      	strh	r2, [r3, #0]
 8003d3c:	460a      	mov	r2, r1
 8003d3e:	709a      	strb	r2, [r3, #2]
        RTC_DateTypeDef sDate = {0};
 8003d40:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003d44:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]

        /* Manually parsing the hours, minutes, and seconds */
        sTime.Hours   = (GPSTime[0] - '0') * 10 + (GPSTime[1] - '0');
 8003d4c:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003d50:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	3b30      	subs	r3, #48	@ 0x30
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	0092      	lsls	r2, r2, #2
 8003d5e:	4413      	add	r3, r2
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	b2da      	uxtb	r2, r3
 8003d64:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003d68:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8003d6c:	785b      	ldrb	r3, [r3, #1]
 8003d6e:	4413      	add	r3, r2
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	3b30      	subs	r3, #48	@ 0x30
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003d7a:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8003d7e:	701a      	strb	r2, [r3, #0]
        sTime.Minutes = (GPSTime[2] - '0') * 10 + (GPSTime[3] - '0');
 8003d80:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003d84:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8003d88:	789b      	ldrb	r3, [r3, #2]
 8003d8a:	3b30      	subs	r3, #48	@ 0x30
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	461a      	mov	r2, r3
 8003d90:	0092      	lsls	r2, r2, #2
 8003d92:	4413      	add	r3, r2
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003d9c:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8003da0:	78db      	ldrb	r3, [r3, #3]
 8003da2:	4413      	add	r3, r2
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	3b30      	subs	r3, #48	@ 0x30
 8003da8:	b2da      	uxtb	r2, r3
 8003daa:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003dae:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8003db2:	705a      	strb	r2, [r3, #1]
        sTime.Seconds = (GPSTime[4] - '0') * 10 + (GPSTime[5] - '0');
 8003db4:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003db8:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8003dbc:	791b      	ldrb	r3, [r3, #4]
 8003dbe:	3b30      	subs	r3, #48	@ 0x30
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	0092      	lsls	r2, r2, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003dd0:	f5a3 7342 	sub.w	r3, r3, #776	@ 0x308
 8003dd4:	795b      	ldrb	r3, [r3, #5]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	3b30      	subs	r3, #48	@ 0x30
 8003ddc:	b2da      	uxtb	r2, r3
 8003dde:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003de2:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8003de6:	709a      	strb	r2, [r3, #2]

        /* Set the RTC time with these settings */
        HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8003de8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003dec:	2200      	movs	r2, #0
 8003dee:	4619      	mov	r1, r3
 8003df0:	4845      	ldr	r0, [pc, #276]	@ (8003f08 <Sync_RTC_With_GPS+0x290>)
 8003df2:	f004 f86f 	bl	8007ed4 <HAL_RTC_SetTime>

        //printf("Time -- H: %u, M: %u, S: %u\n\r", sTime.Hours, sTime.Minutes, sTime.Seconds);

        /* Manually parsing the date, month, and year */
        sDate.Date  = (GPSDate[0] - '0') * 10 + (GPSDate[1] - '0');
 8003df6:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003dfa:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	3b30      	subs	r3, #48	@ 0x30
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	461a      	mov	r2, r3
 8003e06:	0092      	lsls	r2, r2, #2
 8003e08:	4413      	add	r3, r2
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003e12:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8003e16:	785b      	ldrb	r3, [r3, #1]
 8003e18:	4413      	add	r3, r2
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	3b30      	subs	r3, #48	@ 0x30
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003e24:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8003e28:	709a      	strb	r2, [r3, #2]
        sDate.Month = (GPSDate[2] - '0') * 10 + (GPSDate[3] - '0');
 8003e2a:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003e2e:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8003e32:	789b      	ldrb	r3, [r3, #2]
 8003e34:	3b30      	subs	r3, #48	@ 0x30
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	461a      	mov	r2, r3
 8003e3a:	0092      	lsls	r2, r2, #2
 8003e3c:	4413      	add	r3, r2
 8003e3e:	005b      	lsls	r3, r3, #1
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003e46:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8003e4a:	78db      	ldrb	r3, [r3, #3]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	3b30      	subs	r3, #48	@ 0x30
 8003e52:	b2da      	uxtb	r2, r3
 8003e54:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003e58:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8003e5c:	705a      	strb	r2, [r3, #1]
        sDate.Year  = (GPSDate[4] - '0') * 10 + (GPSDate[5] - '0');
 8003e5e:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003e62:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8003e66:	791b      	ldrb	r3, [r3, #4]
 8003e68:	3b30      	subs	r3, #48	@ 0x30
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	0092      	lsls	r2, r2, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	b2da      	uxtb	r2, r3
 8003e76:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003e7a:	f5a3 6381 	sub.w	r3, r3, #1032	@ 0x408
 8003e7e:	795b      	ldrb	r3, [r3, #5]
 8003e80:	4413      	add	r3, r2
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	3b30      	subs	r3, #48	@ 0x30
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003e8c:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8003e90:	70da      	strb	r2, [r3, #3]

        /* Set the RTC Date with these settings */
        HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8003e92:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003e96:	2200      	movs	r2, #0
 8003e98:	4619      	mov	r1, r3
 8003e9a:	481b      	ldr	r0, [pc, #108]	@ (8003f08 <Sync_RTC_With_GPS+0x290>)
 8003e9c:	f004 f98a 	bl	80081b4 <HAL_RTC_SetDate>

        printf("Set the time to %d:%d\n", sTime.Hours, sTime.Minutes);
 8003ea0:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003ea4:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	4619      	mov	r1, r3
 8003eac:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8003eb0:	f2a3 430c 	subw	r3, r3, #1036	@ 0x40c
 8003eb4:	785b      	ldrb	r3, [r3, #1]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	4814      	ldr	r0, [pc, #80]	@ (8003f0c <Sync_RTC_With_GPS+0x294>)
 8003eba:	f00a f8bd 	bl	800e038 <iprintf>

        //printf("Date -- D: %u, M: %u, Y: %u\n\r", sDate.Date, sDate.Month, sDate.Year);

        /* Set the flag to 1 indicating that the RTC has been sync'd */
        RTC_Sync_Flag = 1;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	f887 344f 	strb.w	r3, [r7, #1103]	@ 0x44f
  while(RTC_Sync_Flag == 0 && HAL_GetTick() - gps_sync_start_time < GPS_SYNC_TIMEOUT) {
 8003ec4:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d109      	bne.n	8003ee0 <Sync_RTC_With_GPS+0x268>
 8003ecc:	f000 fbb0 	bl	8004630 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	f8d7 3448 	ldr.w	r3, [r7, #1096]	@ 0x448
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003edc:	f4ff aed8 	bcc.w	8003c90 <Sync_RTC_With_GPS+0x18>
      }
    }
  }

  printf("Sync complete\n\r");
 8003ee0:	480b      	ldr	r0, [pc, #44]	@ (8003f10 <Sync_RTC_With_GPS+0x298>)
 8003ee2:	f00a f8a9 	bl	800e038 <iprintf>

  if (RTC_Sync_Flag == 0) {
 8003ee6:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d102      	bne.n	8003ef4 <Sync_RTC_With_GPS+0x27c>
    g_tel_diagnostics.gps_sync_fail = true;
 8003eee:	4b09      	ldr	r3, [pc, #36]	@ (8003f14 <Sync_RTC_With_GPS+0x29c>)
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	705a      	strb	r2, [r3, #1]
  }

  /* Can turn on the TEL board LED here to indicate that the RTC is SYNC'd  */
}
 8003ef4:	bf00      	nop
 8003ef6:	f507 678a 	add.w	r7, r7, #1104	@ 0x450
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	08011e28 	.word	0x08011e28
 8003f04:	20000658 	.word	0x20000658
 8003f08:	2000076c 	.word	0x2000076c
 8003f0c:	08011e38 	.word	0x08011e38
 8003f10:	08011e50 	.word	0x08011e50
 8003f14:	20000700 	.word	0x20000700

08003f18 <get_current_timestamp>:

double get_current_timestamp()
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
  /* Initialize Time and Date objects */
  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef sDate;

  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8003f1e:	1d3b      	adds	r3, r7, #4
 8003f20:	2200      	movs	r2, #0
 8003f22:	4619      	mov	r1, r3
 8003f24:	480b      	ldr	r0, [pc, #44]	@ (8003f54 <get_current_timestamp+0x3c>)
 8003f26:	f004 f86d 	bl	8008004 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8003f2a:	463b      	mov	r3, r7
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	4619      	mov	r1, r3
 8003f30:	4808      	ldr	r0, [pc, #32]	@ (8003f54 <get_current_timestamp+0x3c>)
 8003f32:	f004 f9f5 	bl	8008320 <HAL_RTC_GetDate>
  double epochTime = convertToEpochTime(&sTime, &sDate);
 8003f36:	463a      	mov	r2, r7
 8003f38:	1d3b      	adds	r3, r7, #4
 8003f3a:	4611      	mov	r1, r2
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f000 f80b 	bl	8003f58 <convertToEpochTime>
 8003f42:	e9c7 0102 	strd	r0, r1, [r7, #8]

  /* Return the resulting epoch time */
  return epochTime;
 8003f46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8003f4a:	4610      	mov	r0, r2
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	2000076c 	.word	0x2000076c

08003f58 <convertToEpochTime>:

/* Used to get current time stamp */
double convertToEpochTime(RTC_TimeTypeDef *sTime, RTC_DateTypeDef *sDate)
{
 8003f58:	b5b0      	push	{r4, r5, r7, lr}
 8003f5a:	b08c      	sub	sp, #48	@ 0x30
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
    /* Initialize tm struct - from time.h library */
    struct tm t;

    /* Populate the tm structure fields from the RTC time and date */
    t.tm_year = sDate->Year + 100;  // Year since 1900, so add 100 to the year from the RTC (which starts at 2000).
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	78db      	ldrb	r3, [r3, #3]
 8003f66:	3364      	adds	r3, #100	@ 0x64
 8003f68:	61fb      	str	r3, [r7, #28]
    t.tm_mon = sDate->Month - 1;    // tm_mon is 0-11, so subtract 1 from the RTC month (which starts at 1).
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	785b      	ldrb	r3, [r3, #1]
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	61bb      	str	r3, [r7, #24]
    t.tm_mday = sDate->Date;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	789b      	ldrb	r3, [r3, #2]
 8003f76:	617b      	str	r3, [r7, #20]
    t.tm_hour = sTime->Hours;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	613b      	str	r3, [r7, #16]
    t.tm_min = sTime->Minutes;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	785b      	ldrb	r3, [r3, #1]
 8003f82:	60fb      	str	r3, [r7, #12]
    t.tm_sec = sTime->Seconds;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	789b      	ldrb	r3, [r3, #2]
 8003f88:	60bb      	str	r3, [r7, #8]
    t.tm_isdst = 0;                // Disable daylight saving time adjustments.
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
//            t.tm_mday = lastDayOfMonth(t.tm_mon, t.tm_year + 1900);
//        }
//    }

    /* Convert to epoch time - Function from time.h library */
    long int epoch_secs = (long int) mktime(&t);
 8003f8e:	f107 0308 	add.w	r3, r7, #8
 8003f92:	4618      	mov	r0, r3
 8003f94:	f00a fa28 	bl	800e3e8 <mktime>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Convert to double and add milliseconds with GetTick() */
    return (double) epoch_secs + (double)(HAL_GetTick() % 1000) / 1000.0;
 8003fa0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003fa2:	f7fc faa9 	bl	80004f8 <__aeabi_i2d>
 8003fa6:	4604      	mov	r4, r0
 8003fa8:	460d      	mov	r5, r1
 8003faa:	f000 fb41 	bl	8004630 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	4b0e      	ldr	r3, [pc, #56]	@ (8003fec <convertToEpochTime+0x94>)
 8003fb2:	fba3 1302 	umull	r1, r3, r3, r2
 8003fb6:	099b      	lsrs	r3, r3, #6
 8003fb8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003fbc:	fb01 f303 	mul.w	r3, r1, r3
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fc fa88 	bl	80004d8 <__aeabi_ui2d>
 8003fc8:	f04f 0200 	mov.w	r2, #0
 8003fcc:	4b08      	ldr	r3, [pc, #32]	@ (8003ff0 <convertToEpochTime+0x98>)
 8003fce:	f7fc fc27 	bl	8000820 <__aeabi_ddiv>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	4620      	mov	r0, r4
 8003fd8:	4629      	mov	r1, r5
 8003fda:	f7fc f941 	bl	8000260 <__adddf3>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	460b      	mov	r3, r1
}
 8003fe2:	4610      	mov	r0, r2
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	3730      	adds	r7, #48	@ 0x30
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bdb0      	pop	{r4, r5, r7, pc}
 8003fec:	10624dd3 	.word	0x10624dd3
 8003ff0:	408f4000 	.word	0x408f4000

08003ff4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003ff8:	4b17      	ldr	r3, [pc, #92]	@ (8004058 <MX_SPI1_Init+0x64>)
 8003ffa:	4a18      	ldr	r2, [pc, #96]	@ (800405c <MX_SPI1_Init+0x68>)
 8003ffc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003ffe:	4b16      	ldr	r3, [pc, #88]	@ (8004058 <MX_SPI1_Init+0x64>)
 8004000:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004004:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004006:	4b14      	ldr	r3, [pc, #80]	@ (8004058 <MX_SPI1_Init+0x64>)
 8004008:	2200      	movs	r2, #0
 800400a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800400c:	4b12      	ldr	r3, [pc, #72]	@ (8004058 <MX_SPI1_Init+0x64>)
 800400e:	2200      	movs	r2, #0
 8004010:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004012:	4b11      	ldr	r3, [pc, #68]	@ (8004058 <MX_SPI1_Init+0x64>)
 8004014:	2200      	movs	r2, #0
 8004016:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004018:	4b0f      	ldr	r3, [pc, #60]	@ (8004058 <MX_SPI1_Init+0x64>)
 800401a:	2200      	movs	r2, #0
 800401c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800401e:	4b0e      	ldr	r3, [pc, #56]	@ (8004058 <MX_SPI1_Init+0x64>)
 8004020:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004024:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004026:	4b0c      	ldr	r3, [pc, #48]	@ (8004058 <MX_SPI1_Init+0x64>)
 8004028:	2208      	movs	r2, #8
 800402a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800402c:	4b0a      	ldr	r3, [pc, #40]	@ (8004058 <MX_SPI1_Init+0x64>)
 800402e:	2200      	movs	r2, #0
 8004030:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004032:	4b09      	ldr	r3, [pc, #36]	@ (8004058 <MX_SPI1_Init+0x64>)
 8004034:	2200      	movs	r2, #0
 8004036:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004038:	4b07      	ldr	r3, [pc, #28]	@ (8004058 <MX_SPI1_Init+0x64>)
 800403a:	2200      	movs	r2, #0
 800403c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800403e:	4b06      	ldr	r3, [pc, #24]	@ (8004058 <MX_SPI1_Init+0x64>)
 8004040:	220a      	movs	r2, #10
 8004042:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004044:	4804      	ldr	r0, [pc, #16]	@ (8004058 <MX_SPI1_Init+0x64>)
 8004046:	f004 fc61 	bl	800890c <HAL_SPI_Init>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004050:	f7ff f83a 	bl	80030c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004054:	bf00      	nop
 8004056:	bd80      	pop	{r7, pc}
 8004058:	20000780 	.word	0x20000780
 800405c:	40013000 	.word	0x40013000

08004060 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b088      	sub	sp, #32
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004068:	f107 0310 	add.w	r3, r7, #16
 800406c:	2200      	movs	r2, #0
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	605a      	str	r2, [r3, #4]
 8004072:	609a      	str	r2, [r3, #8]
 8004074:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a1b      	ldr	r2, [pc, #108]	@ (80040e8 <HAL_SPI_MspInit+0x88>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d12f      	bne.n	80040e0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004080:	4b1a      	ldr	r3, [pc, #104]	@ (80040ec <HAL_SPI_MspInit+0x8c>)
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	4a19      	ldr	r2, [pc, #100]	@ (80040ec <HAL_SPI_MspInit+0x8c>)
 8004086:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800408a:	6193      	str	r3, [r2, #24]
 800408c:	4b17      	ldr	r3, [pc, #92]	@ (80040ec <HAL_SPI_MspInit+0x8c>)
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004098:	4b14      	ldr	r3, [pc, #80]	@ (80040ec <HAL_SPI_MspInit+0x8c>)
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	4a13      	ldr	r2, [pc, #76]	@ (80040ec <HAL_SPI_MspInit+0x8c>)
 800409e:	f043 0304 	orr.w	r3, r3, #4
 80040a2:	6193      	str	r3, [r2, #24]
 80040a4:	4b11      	ldr	r3, [pc, #68]	@ (80040ec <HAL_SPI_MspInit+0x8c>)
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	60bb      	str	r3, [r7, #8]
 80040ae:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SDL_CLK_Pin|SDL_MOSI_Pin;
 80040b0:	23a0      	movs	r3, #160	@ 0xa0
 80040b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040b4:	2302      	movs	r3, #2
 80040b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040b8:	2303      	movs	r3, #3
 80040ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040bc:	f107 0310 	add.w	r3, r7, #16
 80040c0:	4619      	mov	r1, r3
 80040c2:	480b      	ldr	r0, [pc, #44]	@ (80040f0 <HAL_SPI_MspInit+0x90>)
 80040c4:	f001 fa02 	bl	80054cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDL_MISO_Pin;
 80040c8:	2340      	movs	r3, #64	@ 0x40
 80040ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80040cc:	2300      	movs	r3, #0
 80040ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d0:	2300      	movs	r3, #0
 80040d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SDL_MISO_GPIO_Port, &GPIO_InitStruct);
 80040d4:	f107 0310 	add.w	r3, r7, #16
 80040d8:	4619      	mov	r1, r3
 80040da:	4805      	ldr	r0, [pc, #20]	@ (80040f0 <HAL_SPI_MspInit+0x90>)
 80040dc:	f001 f9f6 	bl	80054cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80040e0:	bf00      	nop
 80040e2:	3720      	adds	r7, #32
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40013000 	.word	0x40013000
 80040ec:	40021000 	.word	0x40021000
 80040f0:	40010800 	.word	0x40010800

080040f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80040fa:	4b18      	ldr	r3, [pc, #96]	@ (800415c <HAL_MspInit+0x68>)
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	4a17      	ldr	r2, [pc, #92]	@ (800415c <HAL_MspInit+0x68>)
 8004100:	f043 0301 	orr.w	r3, r3, #1
 8004104:	6193      	str	r3, [r2, #24]
 8004106:	4b15      	ldr	r3, [pc, #84]	@ (800415c <HAL_MspInit+0x68>)
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	60bb      	str	r3, [r7, #8]
 8004110:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004112:	4b12      	ldr	r3, [pc, #72]	@ (800415c <HAL_MspInit+0x68>)
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	4a11      	ldr	r2, [pc, #68]	@ (800415c <HAL_MspInit+0x68>)
 8004118:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800411c:	61d3      	str	r3, [r2, #28]
 800411e:	4b0f      	ldr	r3, [pc, #60]	@ (800415c <HAL_MspInit+0x68>)
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004126:	607b      	str	r3, [r7, #4]
 8004128:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800412a:	2200      	movs	r2, #0
 800412c:	210f      	movs	r1, #15
 800412e:	f06f 0001 	mvn.w	r0, #1
 8004132:	f001 f9a0 	bl	8005476 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004136:	4b0a      	ldr	r3, [pc, #40]	@ (8004160 <HAL_MspInit+0x6c>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	60fb      	str	r3, [r7, #12]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8004142:	60fb      	str	r3, [r7, #12]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	4a04      	ldr	r2, [pc, #16]	@ (8004160 <HAL_MspInit+0x6c>)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004152:	bf00      	nop
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	40021000 	.word	0x40021000
 8004160:	40010000 	.word	0x40010000

08004164 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b08c      	sub	sp, #48	@ 0x30
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800416c:	2300      	movs	r3, #0
 800416e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8004170:	2300      	movs	r3, #0
 8004172:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8004174:	2300      	movs	r3, #0
 8004176:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800417a:	4b2e      	ldr	r3, [pc, #184]	@ (8004234 <HAL_InitTick+0xd0>)
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	4a2d      	ldr	r2, [pc, #180]	@ (8004234 <HAL_InitTick+0xd0>)
 8004180:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004184:	6193      	str	r3, [r2, #24]
 8004186:	4b2b      	ldr	r3, [pc, #172]	@ (8004234 <HAL_InitTick+0xd0>)
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800418e:	60bb      	str	r3, [r7, #8]
 8004190:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004192:	f107 020c 	add.w	r2, r7, #12
 8004196:	f107 0310 	add.w	r3, r7, #16
 800419a:	4611      	mov	r1, r2
 800419c:	4618      	mov	r0, r3
 800419e:	f003 fc31 	bl	8007a04 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80041a2:	f003 fc1b 	bl	80079dc <HAL_RCC_GetPCLK2Freq>
 80041a6:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80041a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041aa:	4a23      	ldr	r2, [pc, #140]	@ (8004238 <HAL_InitTick+0xd4>)
 80041ac:	fba2 2303 	umull	r2, r3, r2, r3
 80041b0:	0c9b      	lsrs	r3, r3, #18
 80041b2:	3b01      	subs	r3, #1
 80041b4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80041b6:	4b21      	ldr	r3, [pc, #132]	@ (800423c <HAL_InitTick+0xd8>)
 80041b8:	4a21      	ldr	r2, [pc, #132]	@ (8004240 <HAL_InitTick+0xdc>)
 80041ba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80041bc:	4b1f      	ldr	r3, [pc, #124]	@ (800423c <HAL_InitTick+0xd8>)
 80041be:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80041c2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80041c4:	4a1d      	ldr	r2, [pc, #116]	@ (800423c <HAL_InitTick+0xd8>)
 80041c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80041ca:	4b1c      	ldr	r3, [pc, #112]	@ (800423c <HAL_InitTick+0xd8>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041d0:	4b1a      	ldr	r3, [pc, #104]	@ (800423c <HAL_InitTick+0xd8>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041d6:	4b19      	ldr	r3, [pc, #100]	@ (800423c <HAL_InitTick+0xd8>)
 80041d8:	2200      	movs	r2, #0
 80041da:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80041dc:	4817      	ldr	r0, [pc, #92]	@ (800423c <HAL_InitTick+0xd8>)
 80041de:	f004 ffb3 	bl	8009148 <HAL_TIM_Base_Init>
 80041e2:	4603      	mov	r3, r0
 80041e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80041e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d11b      	bne.n	8004228 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80041f0:	4812      	ldr	r0, [pc, #72]	@ (800423c <HAL_InitTick+0xd8>)
 80041f2:	f005 f801 	bl	80091f8 <HAL_TIM_Base_Start_IT>
 80041f6:	4603      	mov	r3, r0
 80041f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80041fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004200:	2b00      	cmp	r3, #0
 8004202:	d111      	bne.n	8004228 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8004204:	2019      	movs	r0, #25
 8004206:	f001 f952 	bl	80054ae <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b0f      	cmp	r3, #15
 800420e:	d808      	bhi.n	8004222 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8004210:	2200      	movs	r2, #0
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	2019      	movs	r0, #25
 8004216:	f001 f92e 	bl	8005476 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800421a:	4a0a      	ldr	r2, [pc, #40]	@ (8004244 <HAL_InitTick+0xe0>)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6013      	str	r3, [r2, #0]
 8004220:	e002      	b.n	8004228 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8004228:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800422c:	4618      	mov	r0, r3
 800422e:	3730      	adds	r7, #48	@ 0x30
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	40021000 	.word	0x40021000
 8004238:	431bde83 	.word	0x431bde83
 800423c:	200007d8 	.word	0x200007d8
 8004240:	40012c00 	.word	0x40012c00
 8004244:	200000e4 	.word	0x200000e4

08004248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800424c:	bf00      	nop
 800424e:	e7fd      	b.n	800424c <NMI_Handler+0x4>

08004250 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004254:	bf00      	nop
 8004256:	e7fd      	b.n	8004254 <HardFault_Handler+0x4>

08004258 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800425c:	bf00      	nop
 800425e:	e7fd      	b.n	800425c <MemManage_Handler+0x4>

08004260 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004260:	b480      	push	{r7}
 8004262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004264:	bf00      	nop
 8004266:	e7fd      	b.n	8004264 <BusFault_Handler+0x4>

08004268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800426c:	bf00      	nop
 800426e:	e7fd      	b.n	800426c <UsageFault_Handler+0x4>

08004270 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004270:	b480      	push	{r7}
 8004272:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004274:	bf00      	nop
 8004276:	46bd      	mov	sp, r7
 8004278:	bc80      	pop	{r7}
 800427a:	4770      	bx	lr

0800427c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8004280:	4802      	ldr	r0, [pc, #8]	@ (800428c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8004282:	f000 fe20 	bl	8004ec6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8004286:	bf00      	nop
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	20000354 	.word	0x20000354

08004290 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004294:	4802      	ldr	r0, [pc, #8]	@ (80042a0 <TIM1_UP_IRQHandler+0x10>)
 8004296:	f005 f80f 	bl	80092b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800429a:	bf00      	nop
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	200007d8 	.word	0x200007d8

080042a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
  return 1;
 80042a8:	2301      	movs	r3, #1
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bc80      	pop	{r7}
 80042b0:	4770      	bx	lr

080042b2 <_kill>:

int _kill(int pid, int sig)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b082      	sub	sp, #8
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
 80042ba:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80042bc:	f00a fdd2 	bl	800ee64 <__errno>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2216      	movs	r2, #22
 80042c4:	601a      	str	r2, [r3, #0]
  return -1;
 80042c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3708      	adds	r7, #8
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <_exit>:

void _exit (int status)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b082      	sub	sp, #8
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80042da:	f04f 31ff 	mov.w	r1, #4294967295
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7ff ffe7 	bl	80042b2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80042e4:	bf00      	nop
 80042e6:	e7fd      	b.n	80042e4 <_exit+0x12>

080042e8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80042f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bc80      	pop	{r7}
 80042fc:	4770      	bx	lr

080042fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80042fe:	b480      	push	{r7}
 8004300:	b083      	sub	sp, #12
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
 8004306:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800430e:	605a      	str	r2, [r3, #4]
  return 0;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	bc80      	pop	{r7}
 800431a:	4770      	bx	lr

0800431c <_isatty>:

int _isatty(int file)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004324:	2301      	movs	r3, #1
}
 8004326:	4618      	mov	r0, r3
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	bc80      	pop	{r7}
 800432e:	4770      	bx	lr

08004330 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3714      	adds	r7, #20
 8004342:	46bd      	mov	sp, r7
 8004344:	bc80      	pop	{r7}
 8004346:	4770      	bx	lr

08004348 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004350:	4a14      	ldr	r2, [pc, #80]	@ (80043a4 <_sbrk+0x5c>)
 8004352:	4b15      	ldr	r3, [pc, #84]	@ (80043a8 <_sbrk+0x60>)
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800435c:	4b13      	ldr	r3, [pc, #76]	@ (80043ac <_sbrk+0x64>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d102      	bne.n	800436a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004364:	4b11      	ldr	r3, [pc, #68]	@ (80043ac <_sbrk+0x64>)
 8004366:	4a12      	ldr	r2, [pc, #72]	@ (80043b0 <_sbrk+0x68>)
 8004368:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800436a:	4b10      	ldr	r3, [pc, #64]	@ (80043ac <_sbrk+0x64>)
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4413      	add	r3, r2
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	429a      	cmp	r2, r3
 8004376:	d207      	bcs.n	8004388 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004378:	f00a fd74 	bl	800ee64 <__errno>
 800437c:	4603      	mov	r3, r0
 800437e:	220c      	movs	r2, #12
 8004380:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004382:	f04f 33ff 	mov.w	r3, #4294967295
 8004386:	e009      	b.n	800439c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004388:	4b08      	ldr	r3, [pc, #32]	@ (80043ac <_sbrk+0x64>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800438e:	4b07      	ldr	r3, [pc, #28]	@ (80043ac <_sbrk+0x64>)
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4413      	add	r3, r2
 8004396:	4a05      	ldr	r2, [pc, #20]	@ (80043ac <_sbrk+0x64>)
 8004398:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800439a:	68fb      	ldr	r3, [r7, #12]
}
 800439c:	4618      	mov	r0, r3
 800439e:	3718      	adds	r7, #24
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	2000c000 	.word	0x2000c000
 80043a8:	00000400 	.word	0x00000400
 80043ac:	20000824 	.word	0x20000824
 80043b0:	20005b90 	.word	0x20005b90

080043b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043b8:	bf00      	nop
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bc80      	pop	{r7}
 80043be:	4770      	bx	lr

080043c0 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart1;

/* UART5 init function */
void MX_UART5_Init(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80043c4:	4b11      	ldr	r3, [pc, #68]	@ (800440c <MX_UART5_Init+0x4c>)
 80043c6:	4a12      	ldr	r2, [pc, #72]	@ (8004410 <MX_UART5_Init+0x50>)
 80043c8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80043ca:	4b10      	ldr	r3, [pc, #64]	@ (800440c <MX_UART5_Init+0x4c>)
 80043cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80043d0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80043d2:	4b0e      	ldr	r3, [pc, #56]	@ (800440c <MX_UART5_Init+0x4c>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_2;
 80043d8:	4b0c      	ldr	r3, [pc, #48]	@ (800440c <MX_UART5_Init+0x4c>)
 80043da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80043de:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80043e0:	4b0a      	ldr	r3, [pc, #40]	@ (800440c <MX_UART5_Init+0x4c>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80043e6:	4b09      	ldr	r3, [pc, #36]	@ (800440c <MX_UART5_Init+0x4c>)
 80043e8:	220c      	movs	r2, #12
 80043ea:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043ec:	4b07      	ldr	r3, [pc, #28]	@ (800440c <MX_UART5_Init+0x4c>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80043f2:	4b06      	ldr	r3, [pc, #24]	@ (800440c <MX_UART5_Init+0x4c>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80043f8:	4804      	ldr	r0, [pc, #16]	@ (800440c <MX_UART5_Init+0x4c>)
 80043fa:	f005 f915 	bl	8009628 <HAL_UART_Init>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <MX_UART5_Init+0x48>
  {
    Error_Handler();
 8004404:	f7fe fe60 	bl	80030c8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8004408:	bf00      	nop
 800440a:	bd80      	pop	{r7, pc}
 800440c:	20000828 	.word	0x20000828
 8004410:	40005000 	.word	0x40005000

08004414 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004418:	4b11      	ldr	r3, [pc, #68]	@ (8004460 <MX_USART1_UART_Init+0x4c>)
 800441a:	4a12      	ldr	r2, [pc, #72]	@ (8004464 <MX_USART1_UART_Init+0x50>)
 800441c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 800441e:	4b10      	ldr	r3, [pc, #64]	@ (8004460 <MX_USART1_UART_Init+0x4c>)
 8004420:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8004424:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004426:	4b0e      	ldr	r3, [pc, #56]	@ (8004460 <MX_USART1_UART_Init+0x4c>)
 8004428:	2200      	movs	r2, #0
 800442a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800442c:	4b0c      	ldr	r3, [pc, #48]	@ (8004460 <MX_USART1_UART_Init+0x4c>)
 800442e:	2200      	movs	r2, #0
 8004430:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004432:	4b0b      	ldr	r3, [pc, #44]	@ (8004460 <MX_USART1_UART_Init+0x4c>)
 8004434:	2200      	movs	r2, #0
 8004436:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004438:	4b09      	ldr	r3, [pc, #36]	@ (8004460 <MX_USART1_UART_Init+0x4c>)
 800443a:	220c      	movs	r2, #12
 800443c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800443e:	4b08      	ldr	r3, [pc, #32]	@ (8004460 <MX_USART1_UART_Init+0x4c>)
 8004440:	2200      	movs	r2, #0
 8004442:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004444:	4b06      	ldr	r3, [pc, #24]	@ (8004460 <MX_USART1_UART_Init+0x4c>)
 8004446:	2200      	movs	r2, #0
 8004448:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800444a:	4805      	ldr	r0, [pc, #20]	@ (8004460 <MX_USART1_UART_Init+0x4c>)
 800444c:	f005 f8ec 	bl	8009628 <HAL_UART_Init>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004456:	f7fe fe37 	bl	80030c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800445a:	bf00      	nop
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	20000870 	.word	0x20000870
 8004464:	40013800 	.word	0x40013800

08004468 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b08c      	sub	sp, #48	@ 0x30
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004470:	f107 0320 	add.w	r3, r7, #32
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	605a      	str	r2, [r3, #4]
 800447a:	609a      	str	r2, [r3, #8]
 800447c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==UART5)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a3e      	ldr	r2, [pc, #248]	@ (800457c <HAL_UART_MspInit+0x114>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d13d      	bne.n	8004504 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8004488:	4b3d      	ldr	r3, [pc, #244]	@ (8004580 <HAL_UART_MspInit+0x118>)
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	4a3c      	ldr	r2, [pc, #240]	@ (8004580 <HAL_UART_MspInit+0x118>)
 800448e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004492:	61d3      	str	r3, [r2, #28]
 8004494:	4b3a      	ldr	r3, [pc, #232]	@ (8004580 <HAL_UART_MspInit+0x118>)
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800449c:	61fb      	str	r3, [r7, #28]
 800449e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044a0:	4b37      	ldr	r3, [pc, #220]	@ (8004580 <HAL_UART_MspInit+0x118>)
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	4a36      	ldr	r2, [pc, #216]	@ (8004580 <HAL_UART_MspInit+0x118>)
 80044a6:	f043 0310 	orr.w	r3, r3, #16
 80044aa:	6193      	str	r3, [r2, #24]
 80044ac:	4b34      	ldr	r3, [pc, #208]	@ (8004580 <HAL_UART_MspInit+0x118>)
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	f003 0310 	and.w	r3, r3, #16
 80044b4:	61bb      	str	r3, [r7, #24]
 80044b6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80044b8:	4b31      	ldr	r3, [pc, #196]	@ (8004580 <HAL_UART_MspInit+0x118>)
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	4a30      	ldr	r2, [pc, #192]	@ (8004580 <HAL_UART_MspInit+0x118>)
 80044be:	f043 0320 	orr.w	r3, r3, #32
 80044c2:	6193      	str	r3, [r2, #24]
 80044c4:	4b2e      	ldr	r3, [pc, #184]	@ (8004580 <HAL_UART_MspInit+0x118>)
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	f003 0320 	and.w	r3, r3, #32
 80044cc:	617b      	str	r3, [r7, #20]
 80044ce:	697b      	ldr	r3, [r7, #20]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80044d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80044d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044d6:	2302      	movs	r3, #2
 80044d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044da:	2303      	movs	r3, #3
 80044dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044de:	f107 0320 	add.w	r3, r7, #32
 80044e2:	4619      	mov	r1, r3
 80044e4:	4827      	ldr	r0, [pc, #156]	@ (8004584 <HAL_UART_MspInit+0x11c>)
 80044e6:	f000 fff1 	bl	80054cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80044ea:	2304      	movs	r3, #4
 80044ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044ee:	2300      	movs	r3, #0
 80044f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f2:	2300      	movs	r3, #0
 80044f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044f6:	f107 0320 	add.w	r3, r7, #32
 80044fa:	4619      	mov	r1, r3
 80044fc:	4822      	ldr	r0, [pc, #136]	@ (8004588 <HAL_UART_MspInit+0x120>)
 80044fe:	f000 ffe5 	bl	80054cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004502:	e036      	b.n	8004572 <HAL_UART_MspInit+0x10a>
  else if(uartHandle->Instance==USART1)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a20      	ldr	r2, [pc, #128]	@ (800458c <HAL_UART_MspInit+0x124>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d131      	bne.n	8004572 <HAL_UART_MspInit+0x10a>
    __HAL_RCC_USART1_CLK_ENABLE();
 800450e:	4b1c      	ldr	r3, [pc, #112]	@ (8004580 <HAL_UART_MspInit+0x118>)
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	4a1b      	ldr	r2, [pc, #108]	@ (8004580 <HAL_UART_MspInit+0x118>)
 8004514:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004518:	6193      	str	r3, [r2, #24]
 800451a:	4b19      	ldr	r3, [pc, #100]	@ (8004580 <HAL_UART_MspInit+0x118>)
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004522:	613b      	str	r3, [r7, #16]
 8004524:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004526:	4b16      	ldr	r3, [pc, #88]	@ (8004580 <HAL_UART_MspInit+0x118>)
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	4a15      	ldr	r2, [pc, #84]	@ (8004580 <HAL_UART_MspInit+0x118>)
 800452c:	f043 0304 	orr.w	r3, r3, #4
 8004530:	6193      	str	r3, [r2, #24]
 8004532:	4b13      	ldr	r3, [pc, #76]	@ (8004580 <HAL_UART_MspInit+0x118>)
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	f003 0304 	and.w	r3, r3, #4
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RADIO_TX_Pin;
 800453e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004544:	2302      	movs	r3, #2
 8004546:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004548:	2303      	movs	r3, #3
 800454a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(RADIO_TX_GPIO_Port, &GPIO_InitStruct);
 800454c:	f107 0320 	add.w	r3, r7, #32
 8004550:	4619      	mov	r1, r3
 8004552:	480f      	ldr	r0, [pc, #60]	@ (8004590 <HAL_UART_MspInit+0x128>)
 8004554:	f000 ffba 	bl	80054cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RADIO_RX_Pin;
 8004558:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800455c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800455e:	2300      	movs	r3, #0
 8004560:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004562:	2300      	movs	r3, #0
 8004564:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(RADIO_RX_GPIO_Port, &GPIO_InitStruct);
 8004566:	f107 0320 	add.w	r3, r7, #32
 800456a:	4619      	mov	r1, r3
 800456c:	4808      	ldr	r0, [pc, #32]	@ (8004590 <HAL_UART_MspInit+0x128>)
 800456e:	f000 ffad 	bl	80054cc <HAL_GPIO_Init>
}
 8004572:	bf00      	nop
 8004574:	3730      	adds	r7, #48	@ 0x30
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	40005000 	.word	0x40005000
 8004580:	40021000 	.word	0x40021000
 8004584:	40011000 	.word	0x40011000
 8004588:	40011400 	.word	0x40011400
 800458c:	40013800 	.word	0x40013800
 8004590:	40010800 	.word	0x40010800

08004594 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004594:	f7ff ff0e 	bl	80043b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004598:	480b      	ldr	r0, [pc, #44]	@ (80045c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800459a:	490c      	ldr	r1, [pc, #48]	@ (80045cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800459c:	4a0c      	ldr	r2, [pc, #48]	@ (80045d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800459e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80045a0:	e002      	b.n	80045a8 <LoopCopyDataInit>

080045a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80045a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80045a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80045a6:	3304      	adds	r3, #4

080045a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80045a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80045aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80045ac:	d3f9      	bcc.n	80045a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80045ae:	4a09      	ldr	r2, [pc, #36]	@ (80045d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80045b0:	4c09      	ldr	r4, [pc, #36]	@ (80045d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80045b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80045b4:	e001      	b.n	80045ba <LoopFillZerobss>

080045b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80045b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80045b8:	3204      	adds	r2, #4

080045ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80045ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80045bc:	d3fb      	bcc.n	80045b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80045be:	f00a fc57 	bl	800ee70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80045c2:	f7fe fcc7 	bl	8002f54 <main>
  bx lr
 80045c6:	4770      	bx	lr
  ldr r0, =_sdata
 80045c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80045cc:	20000330 	.word	0x20000330
  ldr r2, =_sidata
 80045d0:	080124b8 	.word	0x080124b8
  ldr r2, =_sbss
 80045d4:	20000330 	.word	0x20000330
  ldr r4, =_ebss
 80045d8:	20005b8c 	.word	0x20005b8c

080045dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80045dc:	e7fe      	b.n	80045dc <ADC1_2_IRQHandler>
	...

080045e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80045e4:	4b08      	ldr	r3, [pc, #32]	@ (8004608 <HAL_Init+0x28>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a07      	ldr	r2, [pc, #28]	@ (8004608 <HAL_Init+0x28>)
 80045ea:	f043 0310 	orr.w	r3, r3, #16
 80045ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045f0:	2003      	movs	r0, #3
 80045f2:	f000 ff35 	bl	8005460 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80045f6:	200f      	movs	r0, #15
 80045f8:	f7ff fdb4 	bl	8004164 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80045fc:	f7ff fd7a 	bl	80040f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	40022000 	.word	0x40022000

0800460c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004610:	4b05      	ldr	r3, [pc, #20]	@ (8004628 <HAL_IncTick+0x1c>)
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	461a      	mov	r2, r3
 8004616:	4b05      	ldr	r3, [pc, #20]	@ (800462c <HAL_IncTick+0x20>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4413      	add	r3, r2
 800461c:	4a03      	ldr	r2, [pc, #12]	@ (800462c <HAL_IncTick+0x20>)
 800461e:	6013      	str	r3, [r2, #0]
}
 8004620:	bf00      	nop
 8004622:	46bd      	mov	sp, r7
 8004624:	bc80      	pop	{r7}
 8004626:	4770      	bx	lr
 8004628:	200000e8 	.word	0x200000e8
 800462c:	200008b8 	.word	0x200008b8

08004630 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0
  return uwTick;
 8004634:	4b02      	ldr	r3, [pc, #8]	@ (8004640 <HAL_GetTick+0x10>)
 8004636:	681b      	ldr	r3, [r3, #0]
}
 8004638:	4618      	mov	r0, r3
 800463a:	46bd      	mov	sp, r7
 800463c:	bc80      	pop	{r7}
 800463e:	4770      	bx	lr
 8004640:	200008b8 	.word	0x200008b8

08004644 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800464c:	f7ff fff0 	bl	8004630 <HAL_GetTick>
 8004650:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465c:	d005      	beq.n	800466a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800465e:	4b0a      	ldr	r3, [pc, #40]	@ (8004688 <HAL_Delay+0x44>)
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	461a      	mov	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	4413      	add	r3, r2
 8004668:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800466a:	bf00      	nop
 800466c:	f7ff ffe0 	bl	8004630 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	429a      	cmp	r2, r3
 800467a:	d8f7      	bhi.n	800466c <HAL_Delay+0x28>
  {
  }
}
 800467c:	bf00      	nop
 800467e:	bf00      	nop
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	200000e8 	.word	0x200000e8

0800468c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e0ed      	b.n	800487a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d102      	bne.n	80046b0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7fc fe2c 	bl	8001308 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0201 	orr.w	r2, r2, #1
 80046be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046c0:	f7ff ffb6 	bl	8004630 <HAL_GetTick>
 80046c4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80046c6:	e012      	b.n	80046ee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80046c8:	f7ff ffb2 	bl	8004630 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b0a      	cmp	r3, #10
 80046d4:	d90b      	bls.n	80046ee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046da:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2205      	movs	r2, #5
 80046e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e0c5      	b.n	800487a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f003 0301 	and.w	r3, r3, #1
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d0e5      	beq.n	80046c8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0202 	bic.w	r2, r2, #2
 800470a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800470c:	f7ff ff90 	bl	8004630 <HAL_GetTick>
 8004710:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004712:	e012      	b.n	800473a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004714:	f7ff ff8c 	bl	8004630 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b0a      	cmp	r3, #10
 8004720:	d90b      	bls.n	800473a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004726:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2205      	movs	r2, #5
 8004732:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e09f      	b.n	800487a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1e5      	bne.n	8004714 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	7e1b      	ldrb	r3, [r3, #24]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d108      	bne.n	8004762 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800475e:	601a      	str	r2, [r3, #0]
 8004760:	e007      	b.n	8004772 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004770:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	7e5b      	ldrb	r3, [r3, #25]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d108      	bne.n	800478c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004788:	601a      	str	r2, [r3, #0]
 800478a:	e007      	b.n	800479c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800479a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	7e9b      	ldrb	r3, [r3, #26]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d108      	bne.n	80047b6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f042 0220 	orr.w	r2, r2, #32
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	e007      	b.n	80047c6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 0220 	bic.w	r2, r2, #32
 80047c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	7edb      	ldrb	r3, [r3, #27]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d108      	bne.n	80047e0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 0210 	bic.w	r2, r2, #16
 80047dc:	601a      	str	r2, [r3, #0]
 80047de:	e007      	b.n	80047f0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f042 0210 	orr.w	r2, r2, #16
 80047ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	7f1b      	ldrb	r3, [r3, #28]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d108      	bne.n	800480a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f042 0208 	orr.w	r2, r2, #8
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	e007      	b.n	800481a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f022 0208 	bic.w	r2, r2, #8
 8004818:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	7f5b      	ldrb	r3, [r3, #29]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d108      	bne.n	8004834 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f042 0204 	orr.w	r2, r2, #4
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	e007      	b.n	8004844 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 0204 	bic.w	r2, r2, #4
 8004842:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	431a      	orrs	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	431a      	orrs	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	ea42 0103 	orr.w	r1, r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	1e5a      	subs	r2, r3, #1
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004882:	b480      	push	{r7}
 8004884:	b087      	sub	sp, #28
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
 800488a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004898:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800489a:	7cfb      	ldrb	r3, [r7, #19]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d003      	beq.n	80048a8 <HAL_CAN_ConfigFilter+0x26>
 80048a0:	7cfb      	ldrb	r3, [r7, #19]
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	f040 80aa 	bne.w	80049fc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80048ae:	f043 0201 	orr.w	r2, r3, #1
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	695b      	ldr	r3, [r3, #20]
 80048bc:	f003 031f 	and.w	r3, r3, #31
 80048c0:	2201      	movs	r2, #1
 80048c2:	fa02 f303 	lsl.w	r3, r2, r3
 80048c6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	43db      	mvns	r3, r3
 80048d2:	401a      	ands	r2, r3
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d123      	bne.n	800492a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	43db      	mvns	r3, r3
 80048ec:	401a      	ands	r2, r3
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004904:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	3248      	adds	r2, #72	@ 0x48
 800490a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800491e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004920:	6979      	ldr	r1, [r7, #20]
 8004922:	3348      	adds	r3, #72	@ 0x48
 8004924:	00db      	lsls	r3, r3, #3
 8004926:	440b      	add	r3, r1
 8004928:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	69db      	ldr	r3, [r3, #28]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d122      	bne.n	8004978 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	431a      	orrs	r2, r3
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004952:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	3248      	adds	r2, #72	@ 0x48
 8004958:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800496c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800496e:	6979      	ldr	r1, [r7, #20]
 8004970:	3348      	adds	r3, #72	@ 0x48
 8004972:	00db      	lsls	r3, r3, #3
 8004974:	440b      	add	r3, r1
 8004976:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d109      	bne.n	8004994 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	43db      	mvns	r3, r3
 800498a:	401a      	ands	r2, r3
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8004992:	e007      	b.n	80049a4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	431a      	orrs	r2, r3
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d109      	bne.n	80049c0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	43db      	mvns	r3, r3
 80049b6:	401a      	ands	r2, r3
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80049be:	e007      	b.n	80049d0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	431a      	orrs	r2, r3
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	6a1b      	ldr	r3, [r3, #32]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d107      	bne.n	80049e8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	431a      	orrs	r2, r3
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80049ee:	f023 0201 	bic.w	r2, r3, #1
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80049f8:	2300      	movs	r3, #0
 80049fa:	e006      	b.n	8004a0a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a00:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
  }
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	371c      	adds	r7, #28
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bc80      	pop	{r7}
 8004a12:	4770      	bx	lr

08004a14 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d12e      	bne.n	8004a86 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 0201 	bic.w	r2, r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a40:	f7ff fdf6 	bl	8004630 <HAL_GetTick>
 8004a44:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004a46:	e012      	b.n	8004a6e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004a48:	f7ff fdf2 	bl	8004630 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b0a      	cmp	r3, #10
 8004a54:	d90b      	bls.n	8004a6e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2205      	movs	r2, #5
 8004a66:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e012      	b.n	8004a94 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1e5      	bne.n	8004a48 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8004a82:	2300      	movs	r3, #0
 8004a84:	e006      	b.n	8004a94 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
  }
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b089      	sub	sp, #36	@ 0x24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
 8004aa8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ab0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004aba:	7ffb      	ldrb	r3, [r7, #31]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d003      	beq.n	8004ac8 <HAL_CAN_AddTxMessage+0x2c>
 8004ac0:	7ffb      	ldrb	r3, [r7, #31]
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	f040 80ad 	bne.w	8004c22 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10a      	bne.n	8004ae8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d105      	bne.n	8004ae8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	f000 8095 	beq.w	8004c12 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	0e1b      	lsrs	r3, r3, #24
 8004aec:	f003 0303 	and.w	r3, r3, #3
 8004af0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004af2:	2201      	movs	r2, #1
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	409a      	lsls	r2, r3
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d10d      	bne.n	8004b20 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004b0e:	68f9      	ldr	r1, [r7, #12]
 8004b10:	6809      	ldr	r1, [r1, #0]
 8004b12:	431a      	orrs	r2, r3
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	3318      	adds	r3, #24
 8004b18:	011b      	lsls	r3, r3, #4
 8004b1a:	440b      	add	r3, r1
 8004b1c:	601a      	str	r2, [r3, #0]
 8004b1e:	e00f      	b.n	8004b40 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004b2a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004b30:	68f9      	ldr	r1, [r7, #12]
 8004b32:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004b34:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	3318      	adds	r3, #24
 8004b3a:	011b      	lsls	r3, r3, #4
 8004b3c:	440b      	add	r3, r1
 8004b3e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6819      	ldr	r1, [r3, #0]
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	691a      	ldr	r2, [r3, #16]
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	3318      	adds	r3, #24
 8004b4c:	011b      	lsls	r3, r3, #4
 8004b4e:	440b      	add	r3, r1
 8004b50:	3304      	adds	r3, #4
 8004b52:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	7d1b      	ldrb	r3, [r3, #20]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d111      	bne.n	8004b80 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	3318      	adds	r3, #24
 8004b64:	011b      	lsls	r3, r3, #4
 8004b66:	4413      	add	r3, r2
 8004b68:	3304      	adds	r3, #4
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	6811      	ldr	r1, [r2, #0]
 8004b70:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	3318      	adds	r3, #24
 8004b78:	011b      	lsls	r3, r3, #4
 8004b7a:	440b      	add	r3, r1
 8004b7c:	3304      	adds	r3, #4
 8004b7e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	3307      	adds	r3, #7
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	061a      	lsls	r2, r3, #24
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	3306      	adds	r3, #6
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	041b      	lsls	r3, r3, #16
 8004b90:	431a      	orrs	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	3305      	adds	r3, #5
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	021b      	lsls	r3, r3, #8
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	3204      	adds	r2, #4
 8004ba0:	7812      	ldrb	r2, [r2, #0]
 8004ba2:	4610      	mov	r0, r2
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	6811      	ldr	r1, [r2, #0]
 8004ba8:	ea43 0200 	orr.w	r2, r3, r0
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	011b      	lsls	r3, r3, #4
 8004bb0:	440b      	add	r3, r1
 8004bb2:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8004bb6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	3303      	adds	r3, #3
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	061a      	lsls	r2, r3, #24
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	3302      	adds	r3, #2
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	041b      	lsls	r3, r3, #16
 8004bc8:	431a      	orrs	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	021b      	lsls	r3, r3, #8
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	7812      	ldrb	r2, [r2, #0]
 8004bd8:	4610      	mov	r0, r2
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	6811      	ldr	r1, [r2, #0]
 8004bde:	ea43 0200 	orr.w	r2, r3, r0
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	011b      	lsls	r3, r3, #4
 8004be6:	440b      	add	r3, r1
 8004be8:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8004bec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	3318      	adds	r3, #24
 8004bf6:	011b      	lsls	r3, r3, #4
 8004bf8:	4413      	add	r3, r2
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	6811      	ldr	r1, [r2, #0]
 8004c00:	f043 0201 	orr.w	r2, r3, #1
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	3318      	adds	r3, #24
 8004c08:	011b      	lsls	r3, r3, #4
 8004c0a:	440b      	add	r3, r1
 8004c0c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	e00e      	b.n	8004c30 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c16:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e006      	b.n	8004c30 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c26:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
  }
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3724      	adds	r7, #36	@ 0x24
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bc80      	pop	{r7}
 8004c38:	4770      	bx	lr

08004c3a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	b087      	sub	sp, #28
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	60f8      	str	r0, [r7, #12]
 8004c42:	60b9      	str	r1, [r7, #8]
 8004c44:	607a      	str	r2, [r7, #4]
 8004c46:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c4e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004c50:	7dfb      	ldrb	r3, [r7, #23]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d003      	beq.n	8004c5e <HAL_CAN_GetRxMessage+0x24>
 8004c56:	7dfb      	ldrb	r3, [r7, #23]
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	f040 8103 	bne.w	8004e64 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10e      	bne.n	8004c82 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	f003 0303 	and.w	r3, r3, #3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d116      	bne.n	8004ca0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c76:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e0f7      	b.n	8004e72 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	f003 0303 	and.w	r3, r3, #3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d107      	bne.n	8004ca0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c94:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e0e8      	b.n	8004e72 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	331b      	adds	r3, #27
 8004ca8:	011b      	lsls	r3, r3, #4
 8004caa:	4413      	add	r3, r2
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0204 	and.w	r2, r3, #4
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10c      	bne.n	8004cd8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	331b      	adds	r3, #27
 8004cc6:	011b      	lsls	r3, r3, #4
 8004cc8:	4413      	add	r3, r2
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	0d5b      	lsrs	r3, r3, #21
 8004cce:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	601a      	str	r2, [r3, #0]
 8004cd6:	e00b      	b.n	8004cf0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	331b      	adds	r3, #27
 8004ce0:	011b      	lsls	r3, r3, #4
 8004ce2:	4413      	add	r3, r2
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	08db      	lsrs	r3, r3, #3
 8004ce8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	331b      	adds	r3, #27
 8004cf8:	011b      	lsls	r3, r3, #4
 8004cfa:	4413      	add	r3, r2
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0202 	and.w	r2, r3, #2
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	331b      	adds	r3, #27
 8004d0e:	011b      	lsls	r3, r3, #4
 8004d10:	4413      	add	r3, r2
 8004d12:	3304      	adds	r3, #4
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0308 	and.w	r3, r3, #8
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d003      	beq.n	8004d26 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2208      	movs	r2, #8
 8004d22:	611a      	str	r2, [r3, #16]
 8004d24:	e00b      	b.n	8004d3e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	331b      	adds	r3, #27
 8004d2e:	011b      	lsls	r3, r3, #4
 8004d30:	4413      	add	r3, r2
 8004d32:	3304      	adds	r3, #4
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 020f 	and.w	r2, r3, #15
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	331b      	adds	r3, #27
 8004d46:	011b      	lsls	r3, r3, #4
 8004d48:	4413      	add	r3, r2
 8004d4a:	3304      	adds	r3, #4
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	0a1b      	lsrs	r3, r3, #8
 8004d50:	b2da      	uxtb	r2, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	331b      	adds	r3, #27
 8004d5e:	011b      	lsls	r3, r3, #4
 8004d60:	4413      	add	r3, r2
 8004d62:	3304      	adds	r3, #4
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	0c1b      	lsrs	r3, r3, #16
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	011b      	lsls	r3, r3, #4
 8004d76:	4413      	add	r3, r2
 8004d78:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	b2da      	uxtb	r2, r3
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	011b      	lsls	r3, r3, #4
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	0a1a      	lsrs	r2, r3, #8
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	b2d2      	uxtb	r2, r2
 8004d9c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	011b      	lsls	r3, r3, #4
 8004da6:	4413      	add	r3, r2
 8004da8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	0c1a      	lsrs	r2, r3, #16
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	3302      	adds	r3, #2
 8004db4:	b2d2      	uxtb	r2, r2
 8004db6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	4413      	add	r3, r2
 8004dc2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	0e1a      	lsrs	r2, r3, #24
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	3303      	adds	r3, #3
 8004dce:	b2d2      	uxtb	r2, r2
 8004dd0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	011b      	lsls	r3, r3, #4
 8004dda:	4413      	add	r3, r2
 8004ddc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	3304      	adds	r3, #4
 8004de6:	b2d2      	uxtb	r2, r2
 8004de8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	011b      	lsls	r3, r3, #4
 8004df2:	4413      	add	r3, r2
 8004df4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	0a1a      	lsrs	r2, r3, #8
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	3305      	adds	r3, #5
 8004e00:	b2d2      	uxtb	r2, r2
 8004e02:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	011b      	lsls	r3, r3, #4
 8004e0c:	4413      	add	r3, r2
 8004e0e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	0c1a      	lsrs	r2, r3, #16
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	3306      	adds	r3, #6
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	011b      	lsls	r3, r3, #4
 8004e26:	4413      	add	r3, r2
 8004e28:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	0e1a      	lsrs	r2, r3, #24
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	3307      	adds	r3, #7
 8004e34:	b2d2      	uxtb	r2, r2
 8004e36:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d108      	bne.n	8004e50 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68da      	ldr	r2, [r3, #12]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f042 0220 	orr.w	r2, r2, #32
 8004e4c:	60da      	str	r2, [r3, #12]
 8004e4e:	e007      	b.n	8004e60 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	691a      	ldr	r2, [r3, #16]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f042 0220 	orr.w	r2, r2, #32
 8004e5e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004e60:	2300      	movs	r3, #0
 8004e62:	e006      	b.n	8004e72 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e68:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
  }
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	371c      	adds	r7, #28
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bc80      	pop	{r7}
 8004e7a:	4770      	bx	lr

08004e7c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e8c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004e8e:	7bfb      	ldrb	r3, [r7, #15]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d002      	beq.n	8004e9a <HAL_CAN_ActivateNotification+0x1e>
 8004e94:	7bfb      	ldrb	r3, [r7, #15]
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d109      	bne.n	8004eae <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	6959      	ldr	r1, [r3, #20]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	683a      	ldr	r2, [r7, #0]
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	e006      	b.n	8004ebc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
  }
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3714      	adds	r7, #20
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bc80      	pop	{r7}
 8004ec4:	4770      	bx	lr

08004ec6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b08a      	sub	sp, #40	@ 0x28
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	695b      	ldr	r3, [r3, #20]
 8004ed8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004f02:	6a3b      	ldr	r3, [r7, #32]
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d07c      	beq.n	8005006 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d023      	beq.n	8004f5e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d003      	beq.n	8004f30 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 f983 	bl	8005234 <HAL_CAN_TxMailbox0CompleteCallback>
 8004f2e:	e016      	b.n	8004f5e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	f003 0304 	and.w	r3, r3, #4
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d004      	beq.n	8004f44 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004f40:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f42:	e00c      	b.n	8004f5e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	f003 0308 	and.w	r3, r3, #8
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d004      	beq.n	8004f58 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004f54:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f56:	e002      	b.n	8004f5e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f986 	bl	800526a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d024      	beq.n	8004fb2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f70:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 f962 	bl	8005246 <HAL_CAN_TxMailbox1CompleteCallback>
 8004f82:	e016      	b.n	8004fb2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d004      	beq.n	8004f98 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f90:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004f94:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f96:	e00c      	b.n	8004fb2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d004      	beq.n	8004fac <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004fa8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004faa:	e002      	b.n	8004fb2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 f965 	bl	800527c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d024      	beq.n	8005006 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004fc4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d003      	beq.n	8004fd8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 f941 	bl	8005258 <HAL_CAN_TxMailbox2CompleteCallback>
 8004fd6:	e016      	b.n	8005006 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d004      	beq.n	8004fec <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fe8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fea:	e00c      	b.n	8005006 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d004      	beq.n	8005000 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ffc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ffe:	e002      	b.n	8005006 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 f944 	bl	800528e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005006:	6a3b      	ldr	r3, [r7, #32]
 8005008:	f003 0308 	and.w	r3, r3, #8
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00c      	beq.n	800502a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f003 0310 	and.w	r3, r3, #16
 8005016:	2b00      	cmp	r3, #0
 8005018:	d007      	beq.n	800502a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800501a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005020:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2210      	movs	r2, #16
 8005028:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800502a:	6a3b      	ldr	r3, [r7, #32]
 800502c:	f003 0304 	and.w	r3, r3, #4
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00b      	beq.n	800504c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	f003 0308 	and.w	r3, r3, #8
 800503a:	2b00      	cmp	r3, #0
 800503c:	d006      	beq.n	800504c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2208      	movs	r2, #8
 8005044:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f92a 	bl	80052a0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800504c:	6a3b      	ldr	r3, [r7, #32]
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d009      	beq.n	800506a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	f003 0303 	and.w	r3, r3, #3
 8005060:	2b00      	cmp	r3, #0
 8005062:	d002      	beq.n	800506a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f7fc f9f9 	bl	800145c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00c      	beq.n	800508e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	f003 0310 	and.w	r3, r3, #16
 800507a:	2b00      	cmp	r3, #0
 800507c:	d007      	beq.n	800508e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800507e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005080:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005084:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2210      	movs	r2, #16
 800508c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800508e:	6a3b      	ldr	r3, [r7, #32]
 8005090:	f003 0320 	and.w	r3, r3, #32
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00b      	beq.n	80050b0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	f003 0308 	and.w	r3, r3, #8
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d006      	beq.n	80050b0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2208      	movs	r2, #8
 80050a8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f90a 	bl	80052c4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80050b0:	6a3b      	ldr	r3, [r7, #32]
 80050b2:	f003 0310 	and.w	r3, r3, #16
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d009      	beq.n	80050ce <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	f003 0303 	and.w	r3, r3, #3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d002      	beq.n	80050ce <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 f8f2 	bl	80052b2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80050ce:	6a3b      	ldr	r3, [r7, #32]
 80050d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00b      	beq.n	80050f0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	f003 0310 	and.w	r3, r3, #16
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d006      	beq.n	80050f0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2210      	movs	r2, #16
 80050e8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f8f3 	bl	80052d6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80050f0:	6a3b      	ldr	r3, [r7, #32]
 80050f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00b      	beq.n	8005112 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	f003 0308 	and.w	r3, r3, #8
 8005100:	2b00      	cmp	r3, #0
 8005102:	d006      	beq.n	8005112 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2208      	movs	r2, #8
 800510a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 f8eb 	bl	80052e8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005112:	6a3b      	ldr	r3, [r7, #32]
 8005114:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d07b      	beq.n	8005214 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	f003 0304 	and.w	r3, r3, #4
 8005122:	2b00      	cmp	r3, #0
 8005124:	d072      	beq.n	800520c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005126:	6a3b      	ldr	r3, [r7, #32]
 8005128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800512c:	2b00      	cmp	r3, #0
 800512e:	d008      	beq.n	8005142 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005136:	2b00      	cmp	r3, #0
 8005138:	d003      	beq.n	8005142 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800513a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800513c:	f043 0301 	orr.w	r3, r3, #1
 8005140:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005142:	6a3b      	ldr	r3, [r7, #32]
 8005144:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005148:	2b00      	cmp	r3, #0
 800514a:	d008      	beq.n	800515e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005158:	f043 0302 	orr.w	r3, r3, #2
 800515c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800515e:	6a3b      	ldr	r3, [r7, #32]
 8005160:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005164:	2b00      	cmp	r3, #0
 8005166:	d008      	beq.n	800517a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800516e:	2b00      	cmp	r3, #0
 8005170:	d003      	beq.n	800517a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005174:	f043 0304 	orr.w	r3, r3, #4
 8005178:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800517a:	6a3b      	ldr	r3, [r7, #32]
 800517c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005180:	2b00      	cmp	r3, #0
 8005182:	d043      	beq.n	800520c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800518a:	2b00      	cmp	r3, #0
 800518c:	d03e      	beq.n	800520c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005194:	2b60      	cmp	r3, #96	@ 0x60
 8005196:	d02b      	beq.n	80051f0 <HAL_CAN_IRQHandler+0x32a>
 8005198:	2b60      	cmp	r3, #96	@ 0x60
 800519a:	d82e      	bhi.n	80051fa <HAL_CAN_IRQHandler+0x334>
 800519c:	2b50      	cmp	r3, #80	@ 0x50
 800519e:	d022      	beq.n	80051e6 <HAL_CAN_IRQHandler+0x320>
 80051a0:	2b50      	cmp	r3, #80	@ 0x50
 80051a2:	d82a      	bhi.n	80051fa <HAL_CAN_IRQHandler+0x334>
 80051a4:	2b40      	cmp	r3, #64	@ 0x40
 80051a6:	d019      	beq.n	80051dc <HAL_CAN_IRQHandler+0x316>
 80051a8:	2b40      	cmp	r3, #64	@ 0x40
 80051aa:	d826      	bhi.n	80051fa <HAL_CAN_IRQHandler+0x334>
 80051ac:	2b30      	cmp	r3, #48	@ 0x30
 80051ae:	d010      	beq.n	80051d2 <HAL_CAN_IRQHandler+0x30c>
 80051b0:	2b30      	cmp	r3, #48	@ 0x30
 80051b2:	d822      	bhi.n	80051fa <HAL_CAN_IRQHandler+0x334>
 80051b4:	2b10      	cmp	r3, #16
 80051b6:	d002      	beq.n	80051be <HAL_CAN_IRQHandler+0x2f8>
 80051b8:	2b20      	cmp	r3, #32
 80051ba:	d005      	beq.n	80051c8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80051bc:	e01d      	b.n	80051fa <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80051be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c0:	f043 0308 	orr.w	r3, r3, #8
 80051c4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80051c6:	e019      	b.n	80051fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80051c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ca:	f043 0310 	orr.w	r3, r3, #16
 80051ce:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80051d0:	e014      	b.n	80051fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80051d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d4:	f043 0320 	orr.w	r3, r3, #32
 80051d8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80051da:	e00f      	b.n	80051fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80051dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051e2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80051e4:	e00a      	b.n	80051fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80051e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051ec:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80051ee:	e005      	b.n	80051fc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80051f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051f6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80051f8:	e000      	b.n	80051fc <HAL_CAN_IRQHandler+0x336>
            break;
 80051fa:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	699a      	ldr	r2, [r3, #24]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800520a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2204      	movs	r2, #4
 8005212:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005216:	2b00      	cmp	r3, #0
 8005218:	d008      	beq.n	800522c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800521e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005220:	431a      	orrs	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f867 	bl	80052fa <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800522c:	bf00      	nop
 800522e:	3728      	adds	r7, #40	@ 0x28
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	bc80      	pop	{r7}
 8005244:	4770      	bx	lr

08005246 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005246:	b480      	push	{r7}
 8005248:	b083      	sub	sp, #12
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800524e:	bf00      	nop
 8005250:	370c      	adds	r7, #12
 8005252:	46bd      	mov	sp, r7
 8005254:	bc80      	pop	{r7}
 8005256:	4770      	bx	lr

08005258 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	bc80      	pop	{r7}
 8005268:	4770      	bx	lr

0800526a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800526a:	b480      	push	{r7}
 800526c:	b083      	sub	sp, #12
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005272:	bf00      	nop
 8005274:	370c      	adds	r7, #12
 8005276:	46bd      	mov	sp, r7
 8005278:	bc80      	pop	{r7}
 800527a:	4770      	bx	lr

0800527c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	bc80      	pop	{r7}
 800528c:	4770      	bx	lr

0800528e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800528e:	b480      	push	{r7}
 8005290:	b083      	sub	sp, #12
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005296:	bf00      	nop
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	bc80      	pop	{r7}
 800529e:	4770      	bx	lr

080052a0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bc80      	pop	{r7}
 80052b0:	4770      	bx	lr

080052b2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80052b2:	b480      	push	{r7}
 80052b4:	b083      	sub	sp, #12
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80052ba:	bf00      	nop
 80052bc:	370c      	adds	r7, #12
 80052be:	46bd      	mov	sp, r7
 80052c0:	bc80      	pop	{r7}
 80052c2:	4770      	bx	lr

080052c4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bc80      	pop	{r7}
 80052d4:	4770      	bx	lr

080052d6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b083      	sub	sp, #12
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80052de:	bf00      	nop
 80052e0:	370c      	adds	r7, #12
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bc80      	pop	{r7}
 80052e6:	4770      	bx	lr

080052e8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bc80      	pop	{r7}
 80052f8:	4770      	bx	lr

080052fa <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b083      	sub	sp, #12
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005302:	bf00      	nop
 8005304:	370c      	adds	r7, #12
 8005306:	46bd      	mov	sp, r7
 8005308:	bc80      	pop	{r7}
 800530a:	4770      	bx	lr

0800530c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f003 0307 	and.w	r3, r3, #7
 800531a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800531c:	4b0c      	ldr	r3, [pc, #48]	@ (8005350 <__NVIC_SetPriorityGrouping+0x44>)
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005322:	68ba      	ldr	r2, [r7, #8]
 8005324:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005328:	4013      	ands	r3, r2
 800532a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005334:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005338:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800533c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800533e:	4a04      	ldr	r2, [pc, #16]	@ (8005350 <__NVIC_SetPriorityGrouping+0x44>)
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	60d3      	str	r3, [r2, #12]
}
 8005344:	bf00      	nop
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	bc80      	pop	{r7}
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	e000ed00 	.word	0xe000ed00

08005354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005354:	b480      	push	{r7}
 8005356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005358:	4b04      	ldr	r3, [pc, #16]	@ (800536c <__NVIC_GetPriorityGrouping+0x18>)
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	0a1b      	lsrs	r3, r3, #8
 800535e:	f003 0307 	and.w	r3, r3, #7
}
 8005362:	4618      	mov	r0, r3
 8005364:	46bd      	mov	sp, r7
 8005366:	bc80      	pop	{r7}
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	e000ed00 	.word	0xe000ed00

08005370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	4603      	mov	r3, r0
 8005378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800537a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800537e:	2b00      	cmp	r3, #0
 8005380:	db0b      	blt.n	800539a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005382:	79fb      	ldrb	r3, [r7, #7]
 8005384:	f003 021f 	and.w	r2, r3, #31
 8005388:	4906      	ldr	r1, [pc, #24]	@ (80053a4 <__NVIC_EnableIRQ+0x34>)
 800538a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800538e:	095b      	lsrs	r3, r3, #5
 8005390:	2001      	movs	r0, #1
 8005392:	fa00 f202 	lsl.w	r2, r0, r2
 8005396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800539a:	bf00      	nop
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	bc80      	pop	{r7}
 80053a2:	4770      	bx	lr
 80053a4:	e000e100 	.word	0xe000e100

080053a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	4603      	mov	r3, r0
 80053b0:	6039      	str	r1, [r7, #0]
 80053b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	db0a      	blt.n	80053d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	b2da      	uxtb	r2, r3
 80053c0:	490c      	ldr	r1, [pc, #48]	@ (80053f4 <__NVIC_SetPriority+0x4c>)
 80053c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053c6:	0112      	lsls	r2, r2, #4
 80053c8:	b2d2      	uxtb	r2, r2
 80053ca:	440b      	add	r3, r1
 80053cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80053d0:	e00a      	b.n	80053e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	b2da      	uxtb	r2, r3
 80053d6:	4908      	ldr	r1, [pc, #32]	@ (80053f8 <__NVIC_SetPriority+0x50>)
 80053d8:	79fb      	ldrb	r3, [r7, #7]
 80053da:	f003 030f 	and.w	r3, r3, #15
 80053de:	3b04      	subs	r3, #4
 80053e0:	0112      	lsls	r2, r2, #4
 80053e2:	b2d2      	uxtb	r2, r2
 80053e4:	440b      	add	r3, r1
 80053e6:	761a      	strb	r2, [r3, #24]
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bc80      	pop	{r7}
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	e000e100 	.word	0xe000e100
 80053f8:	e000ed00 	.word	0xe000ed00

080053fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b089      	sub	sp, #36	@ 0x24
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f003 0307 	and.w	r3, r3, #7
 800540e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	f1c3 0307 	rsb	r3, r3, #7
 8005416:	2b04      	cmp	r3, #4
 8005418:	bf28      	it	cs
 800541a:	2304      	movcs	r3, #4
 800541c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	3304      	adds	r3, #4
 8005422:	2b06      	cmp	r3, #6
 8005424:	d902      	bls.n	800542c <NVIC_EncodePriority+0x30>
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	3b03      	subs	r3, #3
 800542a:	e000      	b.n	800542e <NVIC_EncodePriority+0x32>
 800542c:	2300      	movs	r3, #0
 800542e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005430:	f04f 32ff 	mov.w	r2, #4294967295
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	fa02 f303 	lsl.w	r3, r2, r3
 800543a:	43da      	mvns	r2, r3
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	401a      	ands	r2, r3
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005444:	f04f 31ff 	mov.w	r1, #4294967295
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	fa01 f303 	lsl.w	r3, r1, r3
 800544e:	43d9      	mvns	r1, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005454:	4313      	orrs	r3, r2
         );
}
 8005456:	4618      	mov	r0, r3
 8005458:	3724      	adds	r7, #36	@ 0x24
 800545a:	46bd      	mov	sp, r7
 800545c:	bc80      	pop	{r7}
 800545e:	4770      	bx	lr

08005460 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f7ff ff4f 	bl	800530c <__NVIC_SetPriorityGrouping>
}
 800546e:	bf00      	nop
 8005470:	3708      	adds	r7, #8
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}

08005476 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005476:	b580      	push	{r7, lr}
 8005478:	b086      	sub	sp, #24
 800547a:	af00      	add	r7, sp, #0
 800547c:	4603      	mov	r3, r0
 800547e:	60b9      	str	r1, [r7, #8]
 8005480:	607a      	str	r2, [r7, #4]
 8005482:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005484:	2300      	movs	r3, #0
 8005486:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005488:	f7ff ff64 	bl	8005354 <__NVIC_GetPriorityGrouping>
 800548c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	68b9      	ldr	r1, [r7, #8]
 8005492:	6978      	ldr	r0, [r7, #20]
 8005494:	f7ff ffb2 	bl	80053fc <NVIC_EncodePriority>
 8005498:	4602      	mov	r2, r0
 800549a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800549e:	4611      	mov	r1, r2
 80054a0:	4618      	mov	r0, r3
 80054a2:	f7ff ff81 	bl	80053a8 <__NVIC_SetPriority>
}
 80054a6:	bf00      	nop
 80054a8:	3718      	adds	r7, #24
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b082      	sub	sp, #8
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	4603      	mov	r3, r0
 80054b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054bc:	4618      	mov	r0, r3
 80054be:	f7ff ff57 	bl	8005370 <__NVIC_EnableIRQ>
}
 80054c2:	bf00      	nop
 80054c4:	3708      	adds	r7, #8
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
	...

080054cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b08b      	sub	sp, #44	@ 0x2c
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80054d6:	2300      	movs	r3, #0
 80054d8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80054da:	2300      	movs	r3, #0
 80054dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80054de:	e179      	b.n	80057d4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80054e0:	2201      	movs	r2, #1
 80054e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e4:	fa02 f303 	lsl.w	r3, r2, r3
 80054e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	69fa      	ldr	r2, [r7, #28]
 80054f0:	4013      	ands	r3, r2
 80054f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80054f4:	69ba      	ldr	r2, [r7, #24]
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	f040 8168 	bne.w	80057ce <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	4a96      	ldr	r2, [pc, #600]	@ (800575c <HAL_GPIO_Init+0x290>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d05e      	beq.n	80055c6 <HAL_GPIO_Init+0xfa>
 8005508:	4a94      	ldr	r2, [pc, #592]	@ (800575c <HAL_GPIO_Init+0x290>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d875      	bhi.n	80055fa <HAL_GPIO_Init+0x12e>
 800550e:	4a94      	ldr	r2, [pc, #592]	@ (8005760 <HAL_GPIO_Init+0x294>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d058      	beq.n	80055c6 <HAL_GPIO_Init+0xfa>
 8005514:	4a92      	ldr	r2, [pc, #584]	@ (8005760 <HAL_GPIO_Init+0x294>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d86f      	bhi.n	80055fa <HAL_GPIO_Init+0x12e>
 800551a:	4a92      	ldr	r2, [pc, #584]	@ (8005764 <HAL_GPIO_Init+0x298>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d052      	beq.n	80055c6 <HAL_GPIO_Init+0xfa>
 8005520:	4a90      	ldr	r2, [pc, #576]	@ (8005764 <HAL_GPIO_Init+0x298>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d869      	bhi.n	80055fa <HAL_GPIO_Init+0x12e>
 8005526:	4a90      	ldr	r2, [pc, #576]	@ (8005768 <HAL_GPIO_Init+0x29c>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d04c      	beq.n	80055c6 <HAL_GPIO_Init+0xfa>
 800552c:	4a8e      	ldr	r2, [pc, #568]	@ (8005768 <HAL_GPIO_Init+0x29c>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d863      	bhi.n	80055fa <HAL_GPIO_Init+0x12e>
 8005532:	4a8e      	ldr	r2, [pc, #568]	@ (800576c <HAL_GPIO_Init+0x2a0>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d046      	beq.n	80055c6 <HAL_GPIO_Init+0xfa>
 8005538:	4a8c      	ldr	r2, [pc, #560]	@ (800576c <HAL_GPIO_Init+0x2a0>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d85d      	bhi.n	80055fa <HAL_GPIO_Init+0x12e>
 800553e:	2b12      	cmp	r3, #18
 8005540:	d82a      	bhi.n	8005598 <HAL_GPIO_Init+0xcc>
 8005542:	2b12      	cmp	r3, #18
 8005544:	d859      	bhi.n	80055fa <HAL_GPIO_Init+0x12e>
 8005546:	a201      	add	r2, pc, #4	@ (adr r2, 800554c <HAL_GPIO_Init+0x80>)
 8005548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800554c:	080055c7 	.word	0x080055c7
 8005550:	080055a1 	.word	0x080055a1
 8005554:	080055b3 	.word	0x080055b3
 8005558:	080055f5 	.word	0x080055f5
 800555c:	080055fb 	.word	0x080055fb
 8005560:	080055fb 	.word	0x080055fb
 8005564:	080055fb 	.word	0x080055fb
 8005568:	080055fb 	.word	0x080055fb
 800556c:	080055fb 	.word	0x080055fb
 8005570:	080055fb 	.word	0x080055fb
 8005574:	080055fb 	.word	0x080055fb
 8005578:	080055fb 	.word	0x080055fb
 800557c:	080055fb 	.word	0x080055fb
 8005580:	080055fb 	.word	0x080055fb
 8005584:	080055fb 	.word	0x080055fb
 8005588:	080055fb 	.word	0x080055fb
 800558c:	080055fb 	.word	0x080055fb
 8005590:	080055a9 	.word	0x080055a9
 8005594:	080055bd 	.word	0x080055bd
 8005598:	4a75      	ldr	r2, [pc, #468]	@ (8005770 <HAL_GPIO_Init+0x2a4>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d013      	beq.n	80055c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800559e:	e02c      	b.n	80055fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	623b      	str	r3, [r7, #32]
          break;
 80055a6:	e029      	b.n	80055fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	3304      	adds	r3, #4
 80055ae:	623b      	str	r3, [r7, #32]
          break;
 80055b0:	e024      	b.n	80055fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	3308      	adds	r3, #8
 80055b8:	623b      	str	r3, [r7, #32]
          break;
 80055ba:	e01f      	b.n	80055fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	330c      	adds	r3, #12
 80055c2:	623b      	str	r3, [r7, #32]
          break;
 80055c4:	e01a      	b.n	80055fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d102      	bne.n	80055d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80055ce:	2304      	movs	r3, #4
 80055d0:	623b      	str	r3, [r7, #32]
          break;
 80055d2:	e013      	b.n	80055fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d105      	bne.n	80055e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80055dc:	2308      	movs	r3, #8
 80055de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	69fa      	ldr	r2, [r7, #28]
 80055e4:	611a      	str	r2, [r3, #16]
          break;
 80055e6:	e009      	b.n	80055fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80055e8:	2308      	movs	r3, #8
 80055ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	69fa      	ldr	r2, [r7, #28]
 80055f0:	615a      	str	r2, [r3, #20]
          break;
 80055f2:	e003      	b.n	80055fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80055f4:	2300      	movs	r3, #0
 80055f6:	623b      	str	r3, [r7, #32]
          break;
 80055f8:	e000      	b.n	80055fc <HAL_GPIO_Init+0x130>
          break;
 80055fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	2bff      	cmp	r3, #255	@ 0xff
 8005600:	d801      	bhi.n	8005606 <HAL_GPIO_Init+0x13a>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	e001      	b.n	800560a <HAL_GPIO_Init+0x13e>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	3304      	adds	r3, #4
 800560a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	2bff      	cmp	r3, #255	@ 0xff
 8005610:	d802      	bhi.n	8005618 <HAL_GPIO_Init+0x14c>
 8005612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	e002      	b.n	800561e <HAL_GPIO_Init+0x152>
 8005618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561a:	3b08      	subs	r3, #8
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	210f      	movs	r1, #15
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	fa01 f303 	lsl.w	r3, r1, r3
 800562c:	43db      	mvns	r3, r3
 800562e:	401a      	ands	r2, r3
 8005630:	6a39      	ldr	r1, [r7, #32]
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	fa01 f303 	lsl.w	r3, r1, r3
 8005638:	431a      	orrs	r2, r3
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005646:	2b00      	cmp	r3, #0
 8005648:	f000 80c1 	beq.w	80057ce <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800564c:	4b49      	ldr	r3, [pc, #292]	@ (8005774 <HAL_GPIO_Init+0x2a8>)
 800564e:	699b      	ldr	r3, [r3, #24]
 8005650:	4a48      	ldr	r2, [pc, #288]	@ (8005774 <HAL_GPIO_Init+0x2a8>)
 8005652:	f043 0301 	orr.w	r3, r3, #1
 8005656:	6193      	str	r3, [r2, #24]
 8005658:	4b46      	ldr	r3, [pc, #280]	@ (8005774 <HAL_GPIO_Init+0x2a8>)
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	f003 0301 	and.w	r3, r3, #1
 8005660:	60bb      	str	r3, [r7, #8]
 8005662:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005664:	4a44      	ldr	r2, [pc, #272]	@ (8005778 <HAL_GPIO_Init+0x2ac>)
 8005666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005668:	089b      	lsrs	r3, r3, #2
 800566a:	3302      	adds	r3, #2
 800566c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005670:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005674:	f003 0303 	and.w	r3, r3, #3
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	220f      	movs	r2, #15
 800567c:	fa02 f303 	lsl.w	r3, r2, r3
 8005680:	43db      	mvns	r3, r3
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	4013      	ands	r3, r2
 8005686:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a3c      	ldr	r2, [pc, #240]	@ (800577c <HAL_GPIO_Init+0x2b0>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d01f      	beq.n	80056d0 <HAL_GPIO_Init+0x204>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a3b      	ldr	r2, [pc, #236]	@ (8005780 <HAL_GPIO_Init+0x2b4>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d019      	beq.n	80056cc <HAL_GPIO_Init+0x200>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a3a      	ldr	r2, [pc, #232]	@ (8005784 <HAL_GPIO_Init+0x2b8>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d013      	beq.n	80056c8 <HAL_GPIO_Init+0x1fc>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a39      	ldr	r2, [pc, #228]	@ (8005788 <HAL_GPIO_Init+0x2bc>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d00d      	beq.n	80056c4 <HAL_GPIO_Init+0x1f8>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a38      	ldr	r2, [pc, #224]	@ (800578c <HAL_GPIO_Init+0x2c0>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d007      	beq.n	80056c0 <HAL_GPIO_Init+0x1f4>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a37      	ldr	r2, [pc, #220]	@ (8005790 <HAL_GPIO_Init+0x2c4>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d101      	bne.n	80056bc <HAL_GPIO_Init+0x1f0>
 80056b8:	2305      	movs	r3, #5
 80056ba:	e00a      	b.n	80056d2 <HAL_GPIO_Init+0x206>
 80056bc:	2306      	movs	r3, #6
 80056be:	e008      	b.n	80056d2 <HAL_GPIO_Init+0x206>
 80056c0:	2304      	movs	r3, #4
 80056c2:	e006      	b.n	80056d2 <HAL_GPIO_Init+0x206>
 80056c4:	2303      	movs	r3, #3
 80056c6:	e004      	b.n	80056d2 <HAL_GPIO_Init+0x206>
 80056c8:	2302      	movs	r3, #2
 80056ca:	e002      	b.n	80056d2 <HAL_GPIO_Init+0x206>
 80056cc:	2301      	movs	r3, #1
 80056ce:	e000      	b.n	80056d2 <HAL_GPIO_Init+0x206>
 80056d0:	2300      	movs	r3, #0
 80056d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056d4:	f002 0203 	and.w	r2, r2, #3
 80056d8:	0092      	lsls	r2, r2, #2
 80056da:	4093      	lsls	r3, r2
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	4313      	orrs	r3, r2
 80056e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80056e2:	4925      	ldr	r1, [pc, #148]	@ (8005778 <HAL_GPIO_Init+0x2ac>)
 80056e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e6:	089b      	lsrs	r3, r3, #2
 80056e8:	3302      	adds	r3, #2
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d006      	beq.n	800570a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80056fc:	4b25      	ldr	r3, [pc, #148]	@ (8005794 <HAL_GPIO_Init+0x2c8>)
 80056fe:	689a      	ldr	r2, [r3, #8]
 8005700:	4924      	ldr	r1, [pc, #144]	@ (8005794 <HAL_GPIO_Init+0x2c8>)
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	4313      	orrs	r3, r2
 8005706:	608b      	str	r3, [r1, #8]
 8005708:	e006      	b.n	8005718 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800570a:	4b22      	ldr	r3, [pc, #136]	@ (8005794 <HAL_GPIO_Init+0x2c8>)
 800570c:	689a      	ldr	r2, [r3, #8]
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	43db      	mvns	r3, r3
 8005712:	4920      	ldr	r1, [pc, #128]	@ (8005794 <HAL_GPIO_Init+0x2c8>)
 8005714:	4013      	ands	r3, r2
 8005716:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d006      	beq.n	8005732 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005724:	4b1b      	ldr	r3, [pc, #108]	@ (8005794 <HAL_GPIO_Init+0x2c8>)
 8005726:	68da      	ldr	r2, [r3, #12]
 8005728:	491a      	ldr	r1, [pc, #104]	@ (8005794 <HAL_GPIO_Init+0x2c8>)
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	4313      	orrs	r3, r2
 800572e:	60cb      	str	r3, [r1, #12]
 8005730:	e006      	b.n	8005740 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005732:	4b18      	ldr	r3, [pc, #96]	@ (8005794 <HAL_GPIO_Init+0x2c8>)
 8005734:	68da      	ldr	r2, [r3, #12]
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	43db      	mvns	r3, r3
 800573a:	4916      	ldr	r1, [pc, #88]	@ (8005794 <HAL_GPIO_Init+0x2c8>)
 800573c:	4013      	ands	r3, r2
 800573e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d025      	beq.n	8005798 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800574c:	4b11      	ldr	r3, [pc, #68]	@ (8005794 <HAL_GPIO_Init+0x2c8>)
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	4910      	ldr	r1, [pc, #64]	@ (8005794 <HAL_GPIO_Init+0x2c8>)
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	4313      	orrs	r3, r2
 8005756:	604b      	str	r3, [r1, #4]
 8005758:	e025      	b.n	80057a6 <HAL_GPIO_Init+0x2da>
 800575a:	bf00      	nop
 800575c:	10320000 	.word	0x10320000
 8005760:	10310000 	.word	0x10310000
 8005764:	10220000 	.word	0x10220000
 8005768:	10210000 	.word	0x10210000
 800576c:	10120000 	.word	0x10120000
 8005770:	10110000 	.word	0x10110000
 8005774:	40021000 	.word	0x40021000
 8005778:	40010000 	.word	0x40010000
 800577c:	40010800 	.word	0x40010800
 8005780:	40010c00 	.word	0x40010c00
 8005784:	40011000 	.word	0x40011000
 8005788:	40011400 	.word	0x40011400
 800578c:	40011800 	.word	0x40011800
 8005790:	40011c00 	.word	0x40011c00
 8005794:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005798:	4b15      	ldr	r3, [pc, #84]	@ (80057f0 <HAL_GPIO_Init+0x324>)
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	43db      	mvns	r3, r3
 80057a0:	4913      	ldr	r1, [pc, #76]	@ (80057f0 <HAL_GPIO_Init+0x324>)
 80057a2:	4013      	ands	r3, r2
 80057a4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d006      	beq.n	80057c0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80057b2:	4b0f      	ldr	r3, [pc, #60]	@ (80057f0 <HAL_GPIO_Init+0x324>)
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	490e      	ldr	r1, [pc, #56]	@ (80057f0 <HAL_GPIO_Init+0x324>)
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	600b      	str	r3, [r1, #0]
 80057be:	e006      	b.n	80057ce <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80057c0:	4b0b      	ldr	r3, [pc, #44]	@ (80057f0 <HAL_GPIO_Init+0x324>)
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	43db      	mvns	r3, r3
 80057c8:	4909      	ldr	r1, [pc, #36]	@ (80057f0 <HAL_GPIO_Init+0x324>)
 80057ca:	4013      	ands	r3, r2
 80057cc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80057ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d0:	3301      	adds	r3, #1
 80057d2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057da:	fa22 f303 	lsr.w	r3, r2, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f47f ae7e 	bne.w	80054e0 <HAL_GPIO_Init+0x14>
  }
}
 80057e4:	bf00      	nop
 80057e6:	bf00      	nop
 80057e8:	372c      	adds	r7, #44	@ 0x2c
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bc80      	pop	{r7}
 80057ee:	4770      	bx	lr
 80057f0:	40010400 	.word	0x40010400

080057f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	460b      	mov	r3, r1
 80057fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	689a      	ldr	r2, [r3, #8]
 8005804:	887b      	ldrh	r3, [r7, #2]
 8005806:	4013      	ands	r3, r2
 8005808:	2b00      	cmp	r3, #0
 800580a:	d002      	beq.n	8005812 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800580c:	2301      	movs	r3, #1
 800580e:	73fb      	strb	r3, [r7, #15]
 8005810:	e001      	b.n	8005816 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005812:	2300      	movs	r3, #0
 8005814:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005816:	7bfb      	ldrb	r3, [r7, #15]
}
 8005818:	4618      	mov	r0, r3
 800581a:	3714      	adds	r7, #20
 800581c:	46bd      	mov	sp, r7
 800581e:	bc80      	pop	{r7}
 8005820:	4770      	bx	lr

08005822 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005822:	b480      	push	{r7}
 8005824:	b083      	sub	sp, #12
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
 800582a:	460b      	mov	r3, r1
 800582c:	807b      	strh	r3, [r7, #2]
 800582e:	4613      	mov	r3, r2
 8005830:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005832:	787b      	ldrb	r3, [r7, #1]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d003      	beq.n	8005840 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005838:	887a      	ldrh	r2, [r7, #2]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800583e:	e003      	b.n	8005848 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005840:	887b      	ldrh	r3, [r7, #2]
 8005842:	041a      	lsls	r2, r3, #16
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	611a      	str	r2, [r3, #16]
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	bc80      	pop	{r7}
 8005850:	4770      	bx	lr

08005852 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005852:	b480      	push	{r7}
 8005854:	b085      	sub	sp, #20
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
 800585a:	460b      	mov	r3, r1
 800585c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005864:	887a      	ldrh	r2, [r7, #2]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	4013      	ands	r3, r2
 800586a:	041a      	lsls	r2, r3, #16
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	43d9      	mvns	r1, r3
 8005870:	887b      	ldrh	r3, [r7, #2]
 8005872:	400b      	ands	r3, r1
 8005874:	431a      	orrs	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	611a      	str	r2, [r3, #16]
}
 800587a:	bf00      	nop
 800587c:	3714      	adds	r7, #20
 800587e:	46bd      	mov	sp, r7
 8005880:	bc80      	pop	{r7}
 8005882:	4770      	bx	lr

08005884 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e12b      	b.n	8005aee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800589c:	b2db      	uxtb	r3, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d106      	bne.n	80058b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7fd fa7c 	bl	8002da8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2224      	movs	r2, #36	@ 0x24
 80058b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f022 0201 	bic.w	r2, r2, #1
 80058c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80058d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80058e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80058e8:	f002 f864 	bl	80079b4 <HAL_RCC_GetPCLK1Freq>
 80058ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	4a81      	ldr	r2, [pc, #516]	@ (8005af8 <HAL_I2C_Init+0x274>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d807      	bhi.n	8005908 <HAL_I2C_Init+0x84>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	4a80      	ldr	r2, [pc, #512]	@ (8005afc <HAL_I2C_Init+0x278>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	bf94      	ite	ls
 8005900:	2301      	movls	r3, #1
 8005902:	2300      	movhi	r3, #0
 8005904:	b2db      	uxtb	r3, r3
 8005906:	e006      	b.n	8005916 <HAL_I2C_Init+0x92>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	4a7d      	ldr	r2, [pc, #500]	@ (8005b00 <HAL_I2C_Init+0x27c>)
 800590c:	4293      	cmp	r3, r2
 800590e:	bf94      	ite	ls
 8005910:	2301      	movls	r3, #1
 8005912:	2300      	movhi	r3, #0
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d001      	beq.n	800591e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e0e7      	b.n	8005aee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	4a78      	ldr	r2, [pc, #480]	@ (8005b04 <HAL_I2C_Init+0x280>)
 8005922:	fba2 2303 	umull	r2, r3, r2, r3
 8005926:	0c9b      	lsrs	r3, r3, #18
 8005928:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	430a      	orrs	r2, r1
 800593c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	6a1b      	ldr	r3, [r3, #32]
 8005944:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	4a6a      	ldr	r2, [pc, #424]	@ (8005af8 <HAL_I2C_Init+0x274>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d802      	bhi.n	8005958 <HAL_I2C_Init+0xd4>
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	3301      	adds	r3, #1
 8005956:	e009      	b.n	800596c <HAL_I2C_Init+0xe8>
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800595e:	fb02 f303 	mul.w	r3, r2, r3
 8005962:	4a69      	ldr	r2, [pc, #420]	@ (8005b08 <HAL_I2C_Init+0x284>)
 8005964:	fba2 2303 	umull	r2, r3, r2, r3
 8005968:	099b      	lsrs	r3, r3, #6
 800596a:	3301      	adds	r3, #1
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	6812      	ldr	r2, [r2, #0]
 8005970:	430b      	orrs	r3, r1
 8005972:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	69db      	ldr	r3, [r3, #28]
 800597a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800597e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	495c      	ldr	r1, [pc, #368]	@ (8005af8 <HAL_I2C_Init+0x274>)
 8005988:	428b      	cmp	r3, r1
 800598a:	d819      	bhi.n	80059c0 <HAL_I2C_Init+0x13c>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	1e59      	subs	r1, r3, #1
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	005b      	lsls	r3, r3, #1
 8005996:	fbb1 f3f3 	udiv	r3, r1, r3
 800599a:	1c59      	adds	r1, r3, #1
 800599c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80059a0:	400b      	ands	r3, r1
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00a      	beq.n	80059bc <HAL_I2C_Init+0x138>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	1e59      	subs	r1, r3, #1
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	005b      	lsls	r3, r3, #1
 80059b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80059b4:	3301      	adds	r3, #1
 80059b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059ba:	e051      	b.n	8005a60 <HAL_I2C_Init+0x1dc>
 80059bc:	2304      	movs	r3, #4
 80059be:	e04f      	b.n	8005a60 <HAL_I2C_Init+0x1dc>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d111      	bne.n	80059ec <HAL_I2C_Init+0x168>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	1e58      	subs	r0, r3, #1
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6859      	ldr	r1, [r3, #4]
 80059d0:	460b      	mov	r3, r1
 80059d2:	005b      	lsls	r3, r3, #1
 80059d4:	440b      	add	r3, r1
 80059d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80059da:	3301      	adds	r3, #1
 80059dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	bf0c      	ite	eq
 80059e4:	2301      	moveq	r3, #1
 80059e6:	2300      	movne	r3, #0
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	e012      	b.n	8005a12 <HAL_I2C_Init+0x18e>
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	1e58      	subs	r0, r3, #1
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6859      	ldr	r1, [r3, #4]
 80059f4:	460b      	mov	r3, r1
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	440b      	add	r3, r1
 80059fa:	0099      	lsls	r1, r3, #2
 80059fc:	440b      	add	r3, r1
 80059fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a02:	3301      	adds	r3, #1
 8005a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	bf0c      	ite	eq
 8005a0c:	2301      	moveq	r3, #1
 8005a0e:	2300      	movne	r3, #0
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d001      	beq.n	8005a1a <HAL_I2C_Init+0x196>
 8005a16:	2301      	movs	r3, #1
 8005a18:	e022      	b.n	8005a60 <HAL_I2C_Init+0x1dc>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d10e      	bne.n	8005a40 <HAL_I2C_Init+0x1bc>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	1e58      	subs	r0, r3, #1
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6859      	ldr	r1, [r3, #4]
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	005b      	lsls	r3, r3, #1
 8005a2e:	440b      	add	r3, r1
 8005a30:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a34:	3301      	adds	r3, #1
 8005a36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a3e:	e00f      	b.n	8005a60 <HAL_I2C_Init+0x1dc>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	1e58      	subs	r0, r3, #1
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6859      	ldr	r1, [r3, #4]
 8005a48:	460b      	mov	r3, r1
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	440b      	add	r3, r1
 8005a4e:	0099      	lsls	r1, r3, #2
 8005a50:	440b      	add	r3, r1
 8005a52:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a56:	3301      	adds	r3, #1
 8005a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005a60:	6879      	ldr	r1, [r7, #4]
 8005a62:	6809      	ldr	r1, [r1, #0]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	69da      	ldr	r2, [r3, #28]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	431a      	orrs	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	430a      	orrs	r2, r1
 8005a82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005a8e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	6911      	ldr	r1, [r2, #16]
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	68d2      	ldr	r2, [r2, #12]
 8005a9a:	4311      	orrs	r1, r2
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	6812      	ldr	r2, [r2, #0]
 8005aa0:	430b      	orrs	r3, r1
 8005aa2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	695a      	ldr	r2, [r3, #20]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	431a      	orrs	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	430a      	orrs	r2, r1
 8005abe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f042 0201 	orr.w	r2, r2, #1
 8005ace:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2220      	movs	r2, #32
 8005ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	000186a0 	.word	0x000186a0
 8005afc:	001e847f 	.word	0x001e847f
 8005b00:	003d08ff 	.word	0x003d08ff
 8005b04:	431bde83 	.word	0x431bde83
 8005b08:	10624dd3 	.word	0x10624dd3

08005b0c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b08c      	sub	sp, #48	@ 0x30
 8005b10:	af02      	add	r7, sp, #8
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	607a      	str	r2, [r7, #4]
 8005b16:	461a      	mov	r2, r3
 8005b18:	460b      	mov	r3, r1
 8005b1a:	817b      	strh	r3, [r7, #10]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8005b20:	2300      	movs	r3, #0
 8005b22:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b24:	f7fe fd84 	bl	8004630 <HAL_GetTick>
 8005b28:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b20      	cmp	r3, #32
 8005b34:	f040 824b 	bne.w	8005fce <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3a:	9300      	str	r3, [sp, #0]
 8005b3c:	2319      	movs	r3, #25
 8005b3e:	2201      	movs	r2, #1
 8005b40:	497f      	ldr	r1, [pc, #508]	@ (8005d40 <HAL_I2C_Master_Receive+0x234>)
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f001 f92a 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8005b4e:	2302      	movs	r3, #2
 8005b50:	e23e      	b.n	8005fd0 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d101      	bne.n	8005b60 <HAL_I2C_Master_Receive+0x54>
 8005b5c:	2302      	movs	r3, #2
 8005b5e:	e237      	b.n	8005fd0 <HAL_I2C_Master_Receive+0x4c4>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d007      	beq.n	8005b86 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f042 0201 	orr.w	r2, r2, #1
 8005b84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b94:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2222      	movs	r2, #34	@ 0x22
 8005b9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2210      	movs	r2, #16
 8005ba2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	893a      	ldrh	r2, [r7, #8]
 8005bb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	4a5f      	ldr	r2, [pc, #380]	@ (8005d44 <HAL_I2C_Master_Receive+0x238>)
 8005bc6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005bc8:	8979      	ldrh	r1, [r7, #10]
 8005bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f000 fe98 	bl	8006904 <I2C_MasterRequestRead>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d001      	beq.n	8005bde <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e1f8      	b.n	8005fd0 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d113      	bne.n	8005c0e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005be6:	2300      	movs	r3, #0
 8005be8:	61fb      	str	r3, [r7, #28]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	695b      	ldr	r3, [r3, #20]
 8005bf0:	61fb      	str	r3, [r7, #28]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	61fb      	str	r3, [r7, #28]
 8005bfa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c0a:	601a      	str	r2, [r3, #0]
 8005c0c:	e1cc      	b.n	8005fa8 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d11e      	bne.n	8005c54 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c24:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005c26:	b672      	cpsid	i
}
 8005c28:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	61bb      	str	r3, [r7, #24]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	695b      	ldr	r3, [r3, #20]
 8005c34:	61bb      	str	r3, [r7, #24]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	61bb      	str	r3, [r7, #24]
 8005c3e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c4e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005c50:	b662      	cpsie	i
}
 8005c52:	e035      	b.n	8005cc0 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d11e      	bne.n	8005c9a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c6a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005c6c:	b672      	cpsid	i
}
 8005c6e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c70:	2300      	movs	r3, #0
 8005c72:	617b      	str	r3, [r7, #20]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	617b      	str	r3, [r7, #20]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	617b      	str	r3, [r7, #20]
 8005c84:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005c96:	b662      	cpsie	i
}
 8005c98:	e012      	b.n	8005cc0 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005ca8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005caa:	2300      	movs	r3, #0
 8005cac:	613b      	str	r3, [r7, #16]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	613b      	str	r3, [r7, #16]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	613b      	str	r3, [r7, #16]
 8005cbe:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8005cc0:	e172      	b.n	8005fa8 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cc6:	2b03      	cmp	r3, #3
 8005cc8:	f200 811f 	bhi.w	8005f0a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d123      	bne.n	8005d1c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cd6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f001 fa09 	bl	80070f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d001      	beq.n	8005ce8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e173      	b.n	8005fd0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	691a      	ldr	r2, [r3, #16]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf2:	b2d2      	uxtb	r2, r2
 8005cf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cfa:	1c5a      	adds	r2, r3, #1
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d04:	3b01      	subs	r3, #1
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	3b01      	subs	r3, #1
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005d1a:	e145      	b.n	8005fa8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d152      	bne.n	8005dca <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d26:	9300      	str	r3, [sp, #0]
 8005d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	4906      	ldr	r1, [pc, #24]	@ (8005d48 <HAL_I2C_Master_Receive+0x23c>)
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f001 f834 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d008      	beq.n	8005d4c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e148      	b.n	8005fd0 <HAL_I2C_Master_Receive+0x4c4>
 8005d3e:	bf00      	nop
 8005d40:	00100002 	.word	0x00100002
 8005d44:	ffff0000 	.word	0xffff0000
 8005d48:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005d4c:	b672      	cpsid	i
}
 8005d4e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	691a      	ldr	r2, [r3, #16]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d6a:	b2d2      	uxtb	r2, r2
 8005d6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d72:	1c5a      	adds	r2, r3, #1
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005d92:	b662      	cpsie	i
}
 8005d94:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	691a      	ldr	r2, [r3, #16]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da0:	b2d2      	uxtb	r2, r2
 8005da2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da8:	1c5a      	adds	r2, r3, #1
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005db2:	3b01      	subs	r3, #1
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005dc8:	e0ee      	b.n	8005fa8 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dcc:	9300      	str	r3, [sp, #0]
 8005dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	4981      	ldr	r1, [pc, #516]	@ (8005fd8 <HAL_I2C_Master_Receive+0x4cc>)
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	f000 ffe1 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d001      	beq.n	8005de4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e0f5      	b.n	8005fd0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005df2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005df4:	b672      	cpsid	i
}
 8005df6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	691a      	ldr	r2, [r3, #16]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e02:	b2d2      	uxtb	r2, r2
 8005e04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e0a:	1c5a      	adds	r2, r3, #1
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e14:	3b01      	subs	r3, #1
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	3b01      	subs	r3, #1
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005e2a:	4b6c      	ldr	r3, [pc, #432]	@ (8005fdc <HAL_I2C_Master_Receive+0x4d0>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	08db      	lsrs	r3, r3, #3
 8005e30:	4a6b      	ldr	r2, [pc, #428]	@ (8005fe0 <HAL_I2C_Master_Receive+0x4d4>)
 8005e32:	fba2 2303 	umull	r2, r3, r2, r3
 8005e36:	0a1a      	lsrs	r2, r3, #8
 8005e38:	4613      	mov	r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	00da      	lsls	r2, r3, #3
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8005e44:	6a3b      	ldr	r3, [r7, #32]
 8005e46:	3b01      	subs	r3, #1
 8005e48:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8005e4a:	6a3b      	ldr	r3, [r7, #32]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d118      	bne.n	8005e82 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2200      	movs	r2, #0
 8005e54:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2220      	movs	r2, #32
 8005e5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e6a:	f043 0220 	orr.w	r2, r3, #32
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8005e72:	b662      	cpsie	i
}
 8005e74:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e0a6      	b.n	8005fd0 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	695b      	ldr	r3, [r3, #20]
 8005e88:	f003 0304 	and.w	r3, r3, #4
 8005e8c:	2b04      	cmp	r3, #4
 8005e8e:	d1d9      	bne.n	8005e44 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	691a      	ldr	r2, [r3, #16]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eaa:	b2d2      	uxtb	r2, r2
 8005eac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb2:	1c5a      	adds	r2, r3, #1
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005ed2:	b662      	cpsie	i
}
 8005ed4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	691a      	ldr	r2, [r3, #16]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee0:	b2d2      	uxtb	r2, r2
 8005ee2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee8:	1c5a      	adds	r2, r3, #1
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	3b01      	subs	r3, #1
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005f08:	e04e      	b.n	8005fa8 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f0c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f001 f8ee 	bl	80070f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d001      	beq.n	8005f1e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e058      	b.n	8005fd0 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	691a      	ldr	r2, [r3, #16]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f28:	b2d2      	uxtb	r2, r2
 8005f2a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f30:	1c5a      	adds	r2, r3, #1
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	f003 0304 	and.w	r3, r3, #4
 8005f5a:	2b04      	cmp	r3, #4
 8005f5c:	d124      	bne.n	8005fa8 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f62:	2b03      	cmp	r3, #3
 8005f64:	d107      	bne.n	8005f76 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f74:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	691a      	ldr	r2, [r3, #16]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f80:	b2d2      	uxtb	r2, r2
 8005f82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f88:	1c5a      	adds	r2, r3, #1
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f92:	3b01      	subs	r3, #1
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	3b01      	subs	r3, #1
 8005fa2:	b29a      	uxth	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f47f ae88 	bne.w	8005cc2 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2220      	movs	r2, #32
 8005fb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	e000      	b.n	8005fd0 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8005fce:	2302      	movs	r3, #2
  }
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3728      	adds	r7, #40	@ 0x28
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	00010004 	.word	0x00010004
 8005fdc:	200000e0 	.word	0x200000e0
 8005fe0:	14f8b589 	.word	0x14f8b589

08005fe4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b088      	sub	sp, #32
 8005fe8:	af02      	add	r7, sp, #8
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	4608      	mov	r0, r1
 8005fee:	4611      	mov	r1, r2
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	817b      	strh	r3, [r7, #10]
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	813b      	strh	r3, [r7, #8]
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005ffe:	f7fe fb17 	bl	8004630 <HAL_GetTick>
 8006002:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800600a:	b2db      	uxtb	r3, r3
 800600c:	2b20      	cmp	r3, #32
 800600e:	f040 80d9 	bne.w	80061c4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	9300      	str	r3, [sp, #0]
 8006016:	2319      	movs	r3, #25
 8006018:	2201      	movs	r2, #1
 800601a:	496d      	ldr	r1, [pc, #436]	@ (80061d0 <HAL_I2C_Mem_Write+0x1ec>)
 800601c:	68f8      	ldr	r0, [r7, #12]
 800601e:	f000 febd 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d001      	beq.n	800602c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8006028:	2302      	movs	r3, #2
 800602a:	e0cc      	b.n	80061c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006032:	2b01      	cmp	r3, #1
 8006034:	d101      	bne.n	800603a <HAL_I2C_Mem_Write+0x56>
 8006036:	2302      	movs	r3, #2
 8006038:	e0c5      	b.n	80061c6 <HAL_I2C_Mem_Write+0x1e2>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 0301 	and.w	r3, r3, #1
 800604c:	2b01      	cmp	r3, #1
 800604e:	d007      	beq.n	8006060 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f042 0201 	orr.w	r2, r2, #1
 800605e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800606e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2221      	movs	r2, #33	@ 0x21
 8006074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2240      	movs	r2, #64	@ 0x40
 800607c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2200      	movs	r2, #0
 8006084:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6a3a      	ldr	r2, [r7, #32]
 800608a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006090:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006096:	b29a      	uxth	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	4a4d      	ldr	r2, [pc, #308]	@ (80061d4 <HAL_I2C_Mem_Write+0x1f0>)
 80060a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80060a2:	88f8      	ldrh	r0, [r7, #6]
 80060a4:	893a      	ldrh	r2, [r7, #8]
 80060a6:	8979      	ldrh	r1, [r7, #10]
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	9301      	str	r3, [sp, #4]
 80060ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	4603      	mov	r3, r0
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f000 fcf4 	bl	8006aa0 <I2C_RequestMemoryWrite>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d052      	beq.n	8006164 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e081      	b.n	80061c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060c2:	697a      	ldr	r2, [r7, #20]
 80060c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f000 ff82 	bl	8006fd0 <I2C_WaitOnTXEFlagUntilTimeout>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00d      	beq.n	80060ee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060d6:	2b04      	cmp	r3, #4
 80060d8:	d107      	bne.n	80060ea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e06b      	b.n	80061c6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f2:	781a      	ldrb	r2, [r3, #0]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060fe:	1c5a      	adds	r2, r3, #1
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006108:	3b01      	subs	r3, #1
 800610a:	b29a      	uxth	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006114:	b29b      	uxth	r3, r3
 8006116:	3b01      	subs	r3, #1
 8006118:	b29a      	uxth	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	695b      	ldr	r3, [r3, #20]
 8006124:	f003 0304 	and.w	r3, r3, #4
 8006128:	2b04      	cmp	r3, #4
 800612a:	d11b      	bne.n	8006164 <HAL_I2C_Mem_Write+0x180>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006130:	2b00      	cmp	r3, #0
 8006132:	d017      	beq.n	8006164 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006138:	781a      	ldrb	r2, [r3, #0]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006144:	1c5a      	adds	r2, r3, #1
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800614e:	3b01      	subs	r3, #1
 8006150:	b29a      	uxth	r2, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800615a:	b29b      	uxth	r3, r3
 800615c:	3b01      	subs	r3, #1
 800615e:	b29a      	uxth	r2, r3
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1aa      	bne.n	80060c2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f000 ff75 	bl	8007060 <I2C_WaitOnBTFFlagUntilTimeout>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00d      	beq.n	8006198 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006180:	2b04      	cmp	r3, #4
 8006182:	d107      	bne.n	8006194 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006192:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e016      	b.n	80061c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2220      	movs	r2, #32
 80061ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80061c0:	2300      	movs	r3, #0
 80061c2:	e000      	b.n	80061c6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80061c4:	2302      	movs	r3, #2
  }
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3718      	adds	r7, #24
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	00100002 	.word	0x00100002
 80061d4:	ffff0000 	.word	0xffff0000

080061d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b08c      	sub	sp, #48	@ 0x30
 80061dc:	af02      	add	r7, sp, #8
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	4608      	mov	r0, r1
 80061e2:	4611      	mov	r1, r2
 80061e4:	461a      	mov	r2, r3
 80061e6:	4603      	mov	r3, r0
 80061e8:	817b      	strh	r3, [r7, #10]
 80061ea:	460b      	mov	r3, r1
 80061ec:	813b      	strh	r3, [r7, #8]
 80061ee:	4613      	mov	r3, r2
 80061f0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80061f2:	2300      	movs	r3, #0
 80061f4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80061f6:	f7fe fa1b 	bl	8004630 <HAL_GetTick>
 80061fa:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006202:	b2db      	uxtb	r3, r3
 8006204:	2b20      	cmp	r3, #32
 8006206:	f040 8244 	bne.w	8006692 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800620a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620c:	9300      	str	r3, [sp, #0]
 800620e:	2319      	movs	r3, #25
 8006210:	2201      	movs	r2, #1
 8006212:	4982      	ldr	r1, [pc, #520]	@ (800641c <HAL_I2C_Mem_Read+0x244>)
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f000 fdc1 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d001      	beq.n	8006224 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8006220:	2302      	movs	r3, #2
 8006222:	e237      	b.n	8006694 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800622a:	2b01      	cmp	r3, #1
 800622c:	d101      	bne.n	8006232 <HAL_I2C_Mem_Read+0x5a>
 800622e:	2302      	movs	r3, #2
 8006230:	e230      	b.n	8006694 <HAL_I2C_Mem_Read+0x4bc>
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2201      	movs	r2, #1
 8006236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0301 	and.w	r3, r3, #1
 8006244:	2b01      	cmp	r3, #1
 8006246:	d007      	beq.n	8006258 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f042 0201 	orr.w	r2, r2, #1
 8006256:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006266:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2222      	movs	r2, #34	@ 0x22
 800626c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2240      	movs	r2, #64	@ 0x40
 8006274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2200      	movs	r2, #0
 800627c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006282:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006288:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800628e:	b29a      	uxth	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	4a62      	ldr	r2, [pc, #392]	@ (8006420 <HAL_I2C_Mem_Read+0x248>)
 8006298:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800629a:	88f8      	ldrh	r0, [r7, #6]
 800629c:	893a      	ldrh	r2, [r7, #8]
 800629e:	8979      	ldrh	r1, [r7, #10]
 80062a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a2:	9301      	str	r3, [sp, #4]
 80062a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062a6:	9300      	str	r3, [sp, #0]
 80062a8:	4603      	mov	r3, r0
 80062aa:	68f8      	ldr	r0, [r7, #12]
 80062ac:	f000 fc8e 	bl	8006bcc <I2C_RequestMemoryRead>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d001      	beq.n	80062ba <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e1ec      	b.n	8006694 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d113      	bne.n	80062ea <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062c2:	2300      	movs	r3, #0
 80062c4:	61fb      	str	r3, [r7, #28]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	61fb      	str	r3, [r7, #28]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	699b      	ldr	r3, [r3, #24]
 80062d4:	61fb      	str	r3, [r7, #28]
 80062d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062e6:	601a      	str	r2, [r3, #0]
 80062e8:	e1c0      	b.n	800666c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d11e      	bne.n	8006330 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006300:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006302:	b672      	cpsid	i
}
 8006304:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006306:	2300      	movs	r3, #0
 8006308:	61bb      	str	r3, [r7, #24]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	695b      	ldr	r3, [r3, #20]
 8006310:	61bb      	str	r3, [r7, #24]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	699b      	ldr	r3, [r3, #24]
 8006318:	61bb      	str	r3, [r7, #24]
 800631a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800632a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800632c:	b662      	cpsie	i
}
 800632e:	e035      	b.n	800639c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006334:	2b02      	cmp	r3, #2
 8006336:	d11e      	bne.n	8006376 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006346:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006348:	b672      	cpsid	i
}
 800634a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800634c:	2300      	movs	r3, #0
 800634e:	617b      	str	r3, [r7, #20]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	617b      	str	r3, [r7, #20]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	617b      	str	r3, [r7, #20]
 8006360:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006370:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006372:	b662      	cpsie	i
}
 8006374:	e012      	b.n	800639c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006384:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006386:	2300      	movs	r3, #0
 8006388:	613b      	str	r3, [r7, #16]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	695b      	ldr	r3, [r3, #20]
 8006390:	613b      	str	r3, [r7, #16]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	699b      	ldr	r3, [r3, #24]
 8006398:	613b      	str	r3, [r7, #16]
 800639a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800639c:	e166      	b.n	800666c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063a2:	2b03      	cmp	r3, #3
 80063a4:	f200 811f 	bhi.w	80065e6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d123      	bne.n	80063f8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063b2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f000 fe9b 	bl	80070f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d001      	beq.n	80063c4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e167      	b.n	8006694 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	691a      	ldr	r2, [r3, #16]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ce:	b2d2      	uxtb	r2, r2
 80063d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063d6:	1c5a      	adds	r2, r3, #1
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063e0:	3b01      	subs	r3, #1
 80063e2:	b29a      	uxth	r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	3b01      	subs	r3, #1
 80063f0:	b29a      	uxth	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80063f6:	e139      	b.n	800666c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d152      	bne.n	80064a6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006402:	9300      	str	r3, [sp, #0]
 8006404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006406:	2200      	movs	r2, #0
 8006408:	4906      	ldr	r1, [pc, #24]	@ (8006424 <HAL_I2C_Mem_Read+0x24c>)
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f000 fcc6 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d008      	beq.n	8006428 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e13c      	b.n	8006694 <HAL_I2C_Mem_Read+0x4bc>
 800641a:	bf00      	nop
 800641c:	00100002 	.word	0x00100002
 8006420:	ffff0000 	.word	0xffff0000
 8006424:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8006428:	b672      	cpsid	i
}
 800642a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800643a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	691a      	ldr	r2, [r3, #16]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006446:	b2d2      	uxtb	r2, r2
 8006448:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800644e:	1c5a      	adds	r2, r3, #1
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006458:	3b01      	subs	r3, #1
 800645a:	b29a      	uxth	r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006464:	b29b      	uxth	r3, r3
 8006466:	3b01      	subs	r3, #1
 8006468:	b29a      	uxth	r2, r3
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800646e:	b662      	cpsie	i
}
 8006470:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	691a      	ldr	r2, [r3, #16]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800647c:	b2d2      	uxtb	r2, r2
 800647e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006484:	1c5a      	adds	r2, r3, #1
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800648e:	3b01      	subs	r3, #1
 8006490:	b29a      	uxth	r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800649a:	b29b      	uxth	r3, r3
 800649c:	3b01      	subs	r3, #1
 800649e:	b29a      	uxth	r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80064a4:	e0e2      	b.n	800666c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80064a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a8:	9300      	str	r3, [sp, #0]
 80064aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ac:	2200      	movs	r2, #0
 80064ae:	497b      	ldr	r1, [pc, #492]	@ (800669c <HAL_I2C_Mem_Read+0x4c4>)
 80064b0:	68f8      	ldr	r0, [r7, #12]
 80064b2:	f000 fc73 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d001      	beq.n	80064c0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	e0e9      	b.n	8006694 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80064d0:	b672      	cpsid	i
}
 80064d2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	691a      	ldr	r2, [r3, #16]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064de:	b2d2      	uxtb	r2, r2
 80064e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e6:	1c5a      	adds	r2, r3, #1
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064f0:	3b01      	subs	r3, #1
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	3b01      	subs	r3, #1
 8006500:	b29a      	uxth	r2, r3
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006506:	4b66      	ldr	r3, [pc, #408]	@ (80066a0 <HAL_I2C_Mem_Read+0x4c8>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	08db      	lsrs	r3, r3, #3
 800650c:	4a65      	ldr	r2, [pc, #404]	@ (80066a4 <HAL_I2C_Mem_Read+0x4cc>)
 800650e:	fba2 2303 	umull	r2, r3, r2, r3
 8006512:	0a1a      	lsrs	r2, r3, #8
 8006514:	4613      	mov	r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4413      	add	r3, r2
 800651a:	00da      	lsls	r2, r3, #3
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8006520:	6a3b      	ldr	r3, [r7, #32]
 8006522:	3b01      	subs	r3, #1
 8006524:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8006526:	6a3b      	ldr	r3, [r7, #32]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d118      	bne.n	800655e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2220      	movs	r2, #32
 8006536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006546:	f043 0220 	orr.w	r2, r3, #32
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800654e:	b662      	cpsie	i
}
 8006550:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e09a      	b.n	8006694 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	695b      	ldr	r3, [r3, #20]
 8006564:	f003 0304 	and.w	r3, r3, #4
 8006568:	2b04      	cmp	r3, #4
 800656a:	d1d9      	bne.n	8006520 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800657a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	691a      	ldr	r2, [r3, #16]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006586:	b2d2      	uxtb	r2, r2
 8006588:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800658e:	1c5a      	adds	r2, r3, #1
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006598:	3b01      	subs	r3, #1
 800659a:	b29a      	uxth	r2, r3
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	3b01      	subs	r3, #1
 80065a8:	b29a      	uxth	r2, r3
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80065ae:	b662      	cpsie	i
}
 80065b0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	691a      	ldr	r2, [r3, #16]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065bc:	b2d2      	uxtb	r2, r2
 80065be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c4:	1c5a      	adds	r2, r3, #1
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065ce:	3b01      	subs	r3, #1
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065da:	b29b      	uxth	r3, r3
 80065dc:	3b01      	subs	r3, #1
 80065de:	b29a      	uxth	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80065e4:	e042      	b.n	800666c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065e8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	f000 fd80 	bl	80070f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d001      	beq.n	80065fa <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e04c      	b.n	8006694 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	691a      	ldr	r2, [r3, #16]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006604:	b2d2      	uxtb	r2, r2
 8006606:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800660c:	1c5a      	adds	r2, r3, #1
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006616:	3b01      	subs	r3, #1
 8006618:	b29a      	uxth	r2, r3
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006622:	b29b      	uxth	r3, r3
 8006624:	3b01      	subs	r3, #1
 8006626:	b29a      	uxth	r2, r3
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	f003 0304 	and.w	r3, r3, #4
 8006636:	2b04      	cmp	r3, #4
 8006638:	d118      	bne.n	800666c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	691a      	ldr	r2, [r3, #16]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006644:	b2d2      	uxtb	r2, r2
 8006646:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800664c:	1c5a      	adds	r2, r3, #1
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006656:	3b01      	subs	r3, #1
 8006658:	b29a      	uxth	r2, r3
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006662:	b29b      	uxth	r3, r3
 8006664:	3b01      	subs	r3, #1
 8006666:	b29a      	uxth	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006670:	2b00      	cmp	r3, #0
 8006672:	f47f ae94 	bne.w	800639e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2220      	movs	r2, #32
 800667a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2200      	movs	r2, #0
 800668a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800668e:	2300      	movs	r3, #0
 8006690:	e000      	b.n	8006694 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8006692:	2302      	movs	r3, #2
  }
}
 8006694:	4618      	mov	r0, r3
 8006696:	3728      	adds	r7, #40	@ 0x28
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}
 800669c:	00010004 	.word	0x00010004
 80066a0:	200000e0 	.word	0x200000e0
 80066a4:	14f8b589 	.word	0x14f8b589

080066a8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b08a      	sub	sp, #40	@ 0x28
 80066ac:	af02      	add	r7, sp, #8
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	607a      	str	r2, [r7, #4]
 80066b2:	603b      	str	r3, [r7, #0]
 80066b4:	460b      	mov	r3, r1
 80066b6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80066b8:	f7fd ffba 	bl	8004630 <HAL_GetTick>
 80066bc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80066be:	2300      	movs	r3, #0
 80066c0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	2b20      	cmp	r3, #32
 80066cc:	f040 8111 	bne.w	80068f2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	9300      	str	r3, [sp, #0]
 80066d4:	2319      	movs	r3, #25
 80066d6:	2201      	movs	r2, #1
 80066d8:	4988      	ldr	r1, [pc, #544]	@ (80068fc <HAL_I2C_IsDeviceReady+0x254>)
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f000 fb5e 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d001      	beq.n	80066ea <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80066e6:	2302      	movs	r3, #2
 80066e8:	e104      	b.n	80068f4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d101      	bne.n	80066f8 <HAL_I2C_IsDeviceReady+0x50>
 80066f4:	2302      	movs	r3, #2
 80066f6:	e0fd      	b.n	80068f4 <HAL_I2C_IsDeviceReady+0x24c>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	2b01      	cmp	r3, #1
 800670c:	d007      	beq.n	800671e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	681a      	ldr	r2, [r3, #0]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f042 0201 	orr.w	r2, r2, #1
 800671c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800672c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2224      	movs	r2, #36	@ 0x24
 8006732:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2200      	movs	r2, #0
 800673a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	4a70      	ldr	r2, [pc, #448]	@ (8006900 <HAL_I2C_IsDeviceReady+0x258>)
 8006740:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006750:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	2200      	movs	r2, #0
 800675a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f000 fb1c 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00d      	beq.n	8006786 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006774:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006778:	d103      	bne.n	8006782 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006780:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8006782:	2303      	movs	r3, #3
 8006784:	e0b6      	b.n	80068f4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006786:	897b      	ldrh	r3, [r7, #10]
 8006788:	b2db      	uxtb	r3, r3
 800678a:	461a      	mov	r2, r3
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006794:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006796:	f7fd ff4b 	bl	8004630 <HAL_GetTick>
 800679a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	f003 0302 	and.w	r3, r3, #2
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	bf0c      	ite	eq
 80067aa:	2301      	moveq	r3, #1
 80067ac:	2300      	movne	r3, #0
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	695b      	ldr	r3, [r3, #20]
 80067b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067c0:	bf0c      	ite	eq
 80067c2:	2301      	moveq	r3, #1
 80067c4:	2300      	movne	r3, #0
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80067ca:	e025      	b.n	8006818 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80067cc:	f7fd ff30 	bl	8004630 <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	683a      	ldr	r2, [r7, #0]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d302      	bcc.n	80067e2 <HAL_I2C_IsDeviceReady+0x13a>
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d103      	bne.n	80067ea <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	22a0      	movs	r2, #160	@ 0xa0
 80067e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	695b      	ldr	r3, [r3, #20]
 80067f0:	f003 0302 	and.w	r3, r3, #2
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	bf0c      	ite	eq
 80067f8:	2301      	moveq	r3, #1
 80067fa:	2300      	movne	r3, #0
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800680a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800680e:	bf0c      	ite	eq
 8006810:	2301      	moveq	r3, #1
 8006812:	2300      	movne	r3, #0
 8006814:	b2db      	uxtb	r3, r3
 8006816:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800681e:	b2db      	uxtb	r3, r3
 8006820:	2ba0      	cmp	r3, #160	@ 0xa0
 8006822:	d005      	beq.n	8006830 <HAL_I2C_IsDeviceReady+0x188>
 8006824:	7dfb      	ldrb	r3, [r7, #23]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d102      	bne.n	8006830 <HAL_I2C_IsDeviceReady+0x188>
 800682a:	7dbb      	ldrb	r3, [r7, #22]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d0cd      	beq.n	80067cc <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2220      	movs	r2, #32
 8006834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	695b      	ldr	r3, [r3, #20]
 800683e:	f003 0302 	and.w	r3, r3, #2
 8006842:	2b02      	cmp	r3, #2
 8006844:	d129      	bne.n	800689a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006854:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006856:	2300      	movs	r3, #0
 8006858:	613b      	str	r3, [r7, #16]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	695b      	ldr	r3, [r3, #20]
 8006860:	613b      	str	r3, [r7, #16]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	699b      	ldr	r3, [r3, #24]
 8006868:	613b      	str	r3, [r7, #16]
 800686a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	9300      	str	r3, [sp, #0]
 8006870:	2319      	movs	r3, #25
 8006872:	2201      	movs	r2, #1
 8006874:	4921      	ldr	r1, [pc, #132]	@ (80068fc <HAL_I2C_IsDeviceReady+0x254>)
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f000 fa90 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d001      	beq.n	8006886 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e036      	b.n	80068f4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2220      	movs	r2, #32
 800688a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8006896:	2300      	movs	r3, #0
 8006898:	e02c      	b.n	80068f4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068a8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80068b2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	9300      	str	r3, [sp, #0]
 80068b8:	2319      	movs	r3, #25
 80068ba:	2201      	movs	r2, #1
 80068bc:	490f      	ldr	r1, [pc, #60]	@ (80068fc <HAL_I2C_IsDeviceReady+0x254>)
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	f000 fa6c 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d001      	beq.n	80068ce <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e012      	b.n	80068f4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	3301      	adds	r3, #1
 80068d2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80068d4:	69ba      	ldr	r2, [r7, #24]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	429a      	cmp	r2, r3
 80068da:	f4ff af32 	bcc.w	8006742 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2220      	movs	r2, #32
 80068e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e000      	b.n	80068f4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80068f2:	2302      	movs	r3, #2
  }
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3720      	adds	r7, #32
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	00100002 	.word	0x00100002
 8006900:	ffff0000 	.word	0xffff0000

08006904 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b088      	sub	sp, #32
 8006908:	af02      	add	r7, sp, #8
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	607a      	str	r2, [r7, #4]
 800690e:	603b      	str	r3, [r7, #0]
 8006910:	460b      	mov	r3, r1
 8006912:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006918:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006928:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	2b08      	cmp	r3, #8
 800692e:	d006      	beq.n	800693e <I2C_MasterRequestRead+0x3a>
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	2b01      	cmp	r3, #1
 8006934:	d003      	beq.n	800693e <I2C_MasterRequestRead+0x3a>
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800693c:	d108      	bne.n	8006950 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800694c:	601a      	str	r2, [r3, #0]
 800694e:	e00b      	b.n	8006968 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006954:	2b11      	cmp	r3, #17
 8006956:	d107      	bne.n	8006968 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006966:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	9300      	str	r3, [sp, #0]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f000 fa11 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00d      	beq.n	800699c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800698a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800698e:	d103      	bne.n	8006998 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006996:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e079      	b.n	8006a90 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069a4:	d108      	bne.n	80069b8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80069a6:	897b      	ldrh	r3, [r7, #10]
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	f043 0301 	orr.w	r3, r3, #1
 80069ae:	b2da      	uxtb	r2, r3
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	611a      	str	r2, [r3, #16]
 80069b6:	e05f      	b.n	8006a78 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80069b8:	897b      	ldrh	r3, [r7, #10]
 80069ba:	11db      	asrs	r3, r3, #7
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	f003 0306 	and.w	r3, r3, #6
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	f063 030f 	orn	r3, r3, #15
 80069c8:	b2da      	uxtb	r2, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	4930      	ldr	r1, [pc, #192]	@ (8006a98 <I2C_MasterRequestRead+0x194>)
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f000 fa5a 	bl	8006e90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d001      	beq.n	80069e6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e054      	b.n	8006a90 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80069e6:	897b      	ldrh	r3, [r7, #10]
 80069e8:	b2da      	uxtb	r2, r3
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	4929      	ldr	r1, [pc, #164]	@ (8006a9c <I2C_MasterRequestRead+0x198>)
 80069f6:	68f8      	ldr	r0, [r7, #12]
 80069f8:	f000 fa4a 	bl	8006e90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d001      	beq.n	8006a06 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e044      	b.n	8006a90 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a06:	2300      	movs	r3, #0
 8006a08:	613b      	str	r3, [r7, #16]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	695b      	ldr	r3, [r3, #20]
 8006a10:	613b      	str	r3, [r7, #16]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	699b      	ldr	r3, [r3, #24]
 8006a18:	613b      	str	r3, [r7, #16]
 8006a1a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a2a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	9300      	str	r3, [sp, #0]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006a38:	68f8      	ldr	r0, [r7, #12]
 8006a3a:	f000 f9af 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00d      	beq.n	8006a60 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a52:	d103      	bne.n	8006a5c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a5a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e017      	b.n	8006a90 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006a60:	897b      	ldrh	r3, [r7, #10]
 8006a62:	11db      	asrs	r3, r3, #7
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	f003 0306 	and.w	r3, r3, #6
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	f063 030e 	orn	r3, r3, #14
 8006a70:	b2da      	uxtb	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	4907      	ldr	r1, [pc, #28]	@ (8006a9c <I2C_MasterRequestRead+0x198>)
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f000 fa06 	bl	8006e90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d001      	beq.n	8006a8e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e000      	b.n	8006a90 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3718      	adds	r7, #24
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	00010008 	.word	0x00010008
 8006a9c:	00010002 	.word	0x00010002

08006aa0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b088      	sub	sp, #32
 8006aa4:	af02      	add	r7, sp, #8
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	4608      	mov	r0, r1
 8006aaa:	4611      	mov	r1, r2
 8006aac:	461a      	mov	r2, r3
 8006aae:	4603      	mov	r3, r0
 8006ab0:	817b      	strh	r3, [r7, #10]
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	813b      	strh	r3, [r7, #8]
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ac8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	6a3b      	ldr	r3, [r7, #32]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f000 f960 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00d      	beq.n	8006afe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006af0:	d103      	bne.n	8006afa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006af8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006afa:	2303      	movs	r3, #3
 8006afc:	e05f      	b.n	8006bbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006afe:	897b      	ldrh	r3, [r7, #10]
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	461a      	mov	r2, r3
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006b0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b10:	6a3a      	ldr	r2, [r7, #32]
 8006b12:	492d      	ldr	r1, [pc, #180]	@ (8006bc8 <I2C_RequestMemoryWrite+0x128>)
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f000 f9bb 	bl	8006e90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d001      	beq.n	8006b24 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	e04c      	b.n	8006bbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b24:	2300      	movs	r3, #0
 8006b26:	617b      	str	r3, [r7, #20]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	617b      	str	r3, [r7, #20]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	617b      	str	r3, [r7, #20]
 8006b38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b3c:	6a39      	ldr	r1, [r7, #32]
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f000 fa46 	bl	8006fd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00d      	beq.n	8006b66 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b4e:	2b04      	cmp	r3, #4
 8006b50:	d107      	bne.n	8006b62 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e02b      	b.n	8006bbe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b66:	88fb      	ldrh	r3, [r7, #6]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d105      	bne.n	8006b78 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006b6c:	893b      	ldrh	r3, [r7, #8]
 8006b6e:	b2da      	uxtb	r2, r3
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	611a      	str	r2, [r3, #16]
 8006b76:	e021      	b.n	8006bbc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006b78:	893b      	ldrh	r3, [r7, #8]
 8006b7a:	0a1b      	lsrs	r3, r3, #8
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	b2da      	uxtb	r2, r3
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b88:	6a39      	ldr	r1, [r7, #32]
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f000 fa20 	bl	8006fd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00d      	beq.n	8006bb2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b9a:	2b04      	cmp	r3, #4
 8006b9c:	d107      	bne.n	8006bae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006bac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e005      	b.n	8006bbe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006bb2:	893b      	ldrh	r3, [r7, #8]
 8006bb4:	b2da      	uxtb	r2, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3718      	adds	r7, #24
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	00010002 	.word	0x00010002

08006bcc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b088      	sub	sp, #32
 8006bd0:	af02      	add	r7, sp, #8
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	4608      	mov	r0, r1
 8006bd6:	4611      	mov	r1, r2
 8006bd8:	461a      	mov	r2, r3
 8006bda:	4603      	mov	r3, r0
 8006bdc:	817b      	strh	r3, [r7, #10]
 8006bde:	460b      	mov	r3, r1
 8006be0:	813b      	strh	r3, [r7, #8]
 8006be2:	4613      	mov	r3, r2
 8006be4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006bf4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c08:	9300      	str	r3, [sp, #0]
 8006c0a:	6a3b      	ldr	r3, [r7, #32]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f000 f8c2 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00d      	beq.n	8006c3a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c2c:	d103      	bne.n	8006c36 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c34:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e0aa      	b.n	8006d90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006c3a:	897b      	ldrh	r3, [r7, #10]
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	461a      	mov	r2, r3
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006c48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c4c:	6a3a      	ldr	r2, [r7, #32]
 8006c4e:	4952      	ldr	r1, [pc, #328]	@ (8006d98 <I2C_RequestMemoryRead+0x1cc>)
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f000 f91d 	bl	8006e90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d001      	beq.n	8006c60 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e097      	b.n	8006d90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c60:	2300      	movs	r3, #0
 8006c62:	617b      	str	r3, [r7, #20]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	617b      	str	r3, [r7, #20]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	617b      	str	r3, [r7, #20]
 8006c74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c78:	6a39      	ldr	r1, [r7, #32]
 8006c7a:	68f8      	ldr	r0, [r7, #12]
 8006c7c:	f000 f9a8 	bl	8006fd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00d      	beq.n	8006ca2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c8a:	2b04      	cmp	r3, #4
 8006c8c:	d107      	bne.n	8006c9e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e076      	b.n	8006d90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ca2:	88fb      	ldrh	r3, [r7, #6]
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d105      	bne.n	8006cb4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ca8:	893b      	ldrh	r3, [r7, #8]
 8006caa:	b2da      	uxtb	r2, r3
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	611a      	str	r2, [r3, #16]
 8006cb2:	e021      	b.n	8006cf8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006cb4:	893b      	ldrh	r3, [r7, #8]
 8006cb6:	0a1b      	lsrs	r3, r3, #8
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	b2da      	uxtb	r2, r3
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cc4:	6a39      	ldr	r1, [r7, #32]
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f000 f982 	bl	8006fd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00d      	beq.n	8006cee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cd6:	2b04      	cmp	r3, #4
 8006cd8:	d107      	bne.n	8006cea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ce8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e050      	b.n	8006d90 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006cee:	893b      	ldrh	r3, [r7, #8]
 8006cf0:	b2da      	uxtb	r2, r3
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cfa:	6a39      	ldr	r1, [r7, #32]
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f000 f967 	bl	8006fd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00d      	beq.n	8006d24 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d0c:	2b04      	cmp	r3, #4
 8006d0e:	d107      	bne.n	8006d20 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006d1e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e035      	b.n	8006d90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d32:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d36:	9300      	str	r3, [sp, #0]
 8006d38:	6a3b      	ldr	r3, [r7, #32]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	f000 f82b 	bl	8006d9c <I2C_WaitOnFlagUntilTimeout>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d00d      	beq.n	8006d68 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d5a:	d103      	bne.n	8006d64 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006d62:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e013      	b.n	8006d90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006d68:	897b      	ldrh	r3, [r7, #10]
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	f043 0301 	orr.w	r3, r3, #1
 8006d70:	b2da      	uxtb	r2, r3
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d7a:	6a3a      	ldr	r2, [r7, #32]
 8006d7c:	4906      	ldr	r1, [pc, #24]	@ (8006d98 <I2C_RequestMemoryRead+0x1cc>)
 8006d7e:	68f8      	ldr	r0, [r7, #12]
 8006d80:	f000 f886 	bl	8006e90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d001      	beq.n	8006d8e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e000      	b.n	8006d90 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3718      	adds	r7, #24
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	00010002 	.word	0x00010002

08006d9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	603b      	str	r3, [r7, #0]
 8006da8:	4613      	mov	r3, r2
 8006daa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006dac:	e048      	b.n	8006e40 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db4:	d044      	beq.n	8006e40 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006db6:	f7fd fc3b 	bl	8004630 <HAL_GetTick>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	1ad3      	subs	r3, r2, r3
 8006dc0:	683a      	ldr	r2, [r7, #0]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d302      	bcc.n	8006dcc <I2C_WaitOnFlagUntilTimeout+0x30>
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d139      	bne.n	8006e40 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	0c1b      	lsrs	r3, r3, #16
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	2b01      	cmp	r3, #1
 8006dd4:	d10d      	bne.n	8006df2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	695b      	ldr	r3, [r3, #20]
 8006ddc:	43da      	mvns	r2, r3
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	4013      	ands	r3, r2
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	bf0c      	ite	eq
 8006de8:	2301      	moveq	r3, #1
 8006dea:	2300      	movne	r3, #0
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	461a      	mov	r2, r3
 8006df0:	e00c      	b.n	8006e0c <I2C_WaitOnFlagUntilTimeout+0x70>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	43da      	mvns	r2, r3
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	bf0c      	ite	eq
 8006e04:	2301      	moveq	r3, #1
 8006e06:	2300      	movne	r3, #0
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	79fb      	ldrb	r3, [r7, #7]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d116      	bne.n	8006e40 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2220      	movs	r2, #32
 8006e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e2c:	f043 0220 	orr.w	r2, r3, #32
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e023      	b.n	8006e88 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	0c1b      	lsrs	r3, r3, #16
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d10d      	bne.n	8006e66 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	695b      	ldr	r3, [r3, #20]
 8006e50:	43da      	mvns	r2, r3
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	4013      	ands	r3, r2
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	bf0c      	ite	eq
 8006e5c:	2301      	moveq	r3, #1
 8006e5e:	2300      	movne	r3, #0
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	461a      	mov	r2, r3
 8006e64:	e00c      	b.n	8006e80 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	699b      	ldr	r3, [r3, #24]
 8006e6c:	43da      	mvns	r2, r3
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	4013      	ands	r3, r2
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	bf0c      	ite	eq
 8006e78:	2301      	moveq	r3, #1
 8006e7a:	2300      	movne	r3, #0
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	461a      	mov	r2, r3
 8006e80:	79fb      	ldrb	r3, [r7, #7]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d093      	beq.n	8006dae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	607a      	str	r2, [r7, #4]
 8006e9c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e9e:	e071      	b.n	8006f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	695b      	ldr	r3, [r3, #20]
 8006ea6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006eaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006eae:	d123      	bne.n	8006ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ebe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006ec8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2220      	movs	r2, #32
 8006ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ee4:	f043 0204 	orr.w	r2, r3, #4
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e067      	b.n	8006fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006efe:	d041      	beq.n	8006f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f00:	f7fd fb96 	bl	8004630 <HAL_GetTick>
 8006f04:	4602      	mov	r2, r0
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d302      	bcc.n	8006f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d136      	bne.n	8006f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	0c1b      	lsrs	r3, r3, #16
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d10c      	bne.n	8006f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	43da      	mvns	r2, r3
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	bf14      	ite	ne
 8006f32:	2301      	movne	r3, #1
 8006f34:	2300      	moveq	r3, #0
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	e00b      	b.n	8006f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	699b      	ldr	r3, [r3, #24]
 8006f40:	43da      	mvns	r2, r3
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	4013      	ands	r3, r2
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	bf14      	ite	ne
 8006f4c:	2301      	movne	r3, #1
 8006f4e:	2300      	moveq	r3, #0
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d016      	beq.n	8006f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2220      	movs	r2, #32
 8006f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f70:	f043 0220 	orr.w	r2, r3, #32
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	e021      	b.n	8006fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	0c1b      	lsrs	r3, r3, #16
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d10c      	bne.n	8006fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	695b      	ldr	r3, [r3, #20]
 8006f94:	43da      	mvns	r2, r3
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	4013      	ands	r3, r2
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	bf14      	ite	ne
 8006fa0:	2301      	movne	r3, #1
 8006fa2:	2300      	moveq	r3, #0
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	e00b      	b.n	8006fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	699b      	ldr	r3, [r3, #24]
 8006fae:	43da      	mvns	r2, r3
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	4013      	ands	r3, r2
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	bf14      	ite	ne
 8006fba:	2301      	movne	r3, #1
 8006fbc:	2300      	moveq	r3, #0
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	f47f af6d 	bne.w	8006ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006fdc:	e034      	b.n	8007048 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f000 f8e3 	bl	80071aa <I2C_IsAcknowledgeFailed>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d001      	beq.n	8006fee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e034      	b.n	8007058 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff4:	d028      	beq.n	8007048 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ff6:	f7fd fb1b 	bl	8004630 <HAL_GetTick>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	429a      	cmp	r2, r3
 8007004:	d302      	bcc.n	800700c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d11d      	bne.n	8007048 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007016:	2b80      	cmp	r3, #128	@ 0x80
 8007018:	d016      	beq.n	8007048 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2220      	movs	r2, #32
 8007024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007034:	f043 0220 	orr.w	r2, r3, #32
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	e007      	b.n	8007058 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007052:	2b80      	cmp	r3, #128	@ 0x80
 8007054:	d1c3      	bne.n	8006fde <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3710      	adds	r7, #16
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800706c:	e034      	b.n	80070d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f000 f89b 	bl	80071aa <I2C_IsAcknowledgeFailed>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d001      	beq.n	800707e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e034      	b.n	80070e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007084:	d028      	beq.n	80070d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007086:	f7fd fad3 	bl	8004630 <HAL_GetTick>
 800708a:	4602      	mov	r2, r0
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	1ad3      	subs	r3, r2, r3
 8007090:	68ba      	ldr	r2, [r7, #8]
 8007092:	429a      	cmp	r2, r3
 8007094:	d302      	bcc.n	800709c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d11d      	bne.n	80070d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	f003 0304 	and.w	r3, r3, #4
 80070a6:	2b04      	cmp	r3, #4
 80070a8:	d016      	beq.n	80070d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2200      	movs	r2, #0
 80070ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2220      	movs	r2, #32
 80070b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070c4:	f043 0220 	orr.w	r2, r3, #32
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	e007      	b.n	80070e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	695b      	ldr	r3, [r3, #20]
 80070de:	f003 0304 	and.w	r3, r3, #4
 80070e2:	2b04      	cmp	r3, #4
 80070e4:	d1c3      	bne.n	800706e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3710      	adds	r7, #16
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80070fc:	e049      	b.n	8007192 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	695b      	ldr	r3, [r3, #20]
 8007104:	f003 0310 	and.w	r3, r3, #16
 8007108:	2b10      	cmp	r3, #16
 800710a:	d119      	bne.n	8007140 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f06f 0210 	mvn.w	r2, #16
 8007114:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2200      	movs	r2, #0
 800711a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2220      	movs	r2, #32
 8007120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2200      	movs	r2, #0
 8007128:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2200      	movs	r2, #0
 8007138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	e030      	b.n	80071a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007140:	f7fd fa76 	bl	8004630 <HAL_GetTick>
 8007144:	4602      	mov	r2, r0
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	68ba      	ldr	r2, [r7, #8]
 800714c:	429a      	cmp	r2, r3
 800714e:	d302      	bcc.n	8007156 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d11d      	bne.n	8007192 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	695b      	ldr	r3, [r3, #20]
 800715c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007160:	2b40      	cmp	r3, #64	@ 0x40
 8007162:	d016      	beq.n	8007192 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2220      	movs	r2, #32
 800716e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800717e:	f043 0220 	orr.w	r2, r3, #32
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2200      	movs	r2, #0
 800718a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e007      	b.n	80071a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	695b      	ldr	r3, [r3, #20]
 8007198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800719c:	2b40      	cmp	r3, #64	@ 0x40
 800719e:	d1ae      	bne.n	80070fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3710      	adds	r7, #16
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80071aa:	b480      	push	{r7}
 80071ac:	b083      	sub	sp, #12
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	695b      	ldr	r3, [r3, #20]
 80071b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071c0:	d11b      	bne.n	80071fa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80071ca:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2220      	movs	r2, #32
 80071d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e6:	f043 0204 	orr.w	r2, r3, #4
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e000      	b.n	80071fc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	bc80      	pop	{r7}
 8007204:	4770      	bx	lr
	...

08007208 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007208:	b480      	push	{r7}
 800720a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800720c:	4b03      	ldr	r3, [pc, #12]	@ (800721c <HAL_PWR_EnableBkUpAccess+0x14>)
 800720e:	2201      	movs	r2, #1
 8007210:	601a      	str	r2, [r3, #0]
}
 8007212:	bf00      	nop
 8007214:	46bd      	mov	sp, r7
 8007216:	bc80      	pop	{r7}
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	420e0020 	.word	0x420e0020

08007220 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d101      	bne.n	8007232 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800722e:	2301      	movs	r3, #1
 8007230:	e272      	b.n	8007718 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f003 0301 	and.w	r3, r3, #1
 800723a:	2b00      	cmp	r3, #0
 800723c:	f000 8087 	beq.w	800734e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007240:	4b92      	ldr	r3, [pc, #584]	@ (800748c <HAL_RCC_OscConfig+0x26c>)
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	f003 030c 	and.w	r3, r3, #12
 8007248:	2b04      	cmp	r3, #4
 800724a:	d00c      	beq.n	8007266 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800724c:	4b8f      	ldr	r3, [pc, #572]	@ (800748c <HAL_RCC_OscConfig+0x26c>)
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	f003 030c 	and.w	r3, r3, #12
 8007254:	2b08      	cmp	r3, #8
 8007256:	d112      	bne.n	800727e <HAL_RCC_OscConfig+0x5e>
 8007258:	4b8c      	ldr	r3, [pc, #560]	@ (800748c <HAL_RCC_OscConfig+0x26c>)
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007260:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007264:	d10b      	bne.n	800727e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007266:	4b89      	ldr	r3, [pc, #548]	@ (800748c <HAL_RCC_OscConfig+0x26c>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800726e:	2b00      	cmp	r3, #0
 8007270:	d06c      	beq.n	800734c <HAL_RCC_OscConfig+0x12c>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d168      	bne.n	800734c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e24c      	b.n	8007718 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007286:	d106      	bne.n	8007296 <HAL_RCC_OscConfig+0x76>
 8007288:	4b80      	ldr	r3, [pc, #512]	@ (800748c <HAL_RCC_OscConfig+0x26c>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a7f      	ldr	r2, [pc, #508]	@ (800748c <HAL_RCC_OscConfig+0x26c>)
 800728e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007292:	6013      	str	r3, [r2, #0]
 8007294:	e02e      	b.n	80072f4 <HAL_RCC_OscConfig+0xd4>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d10c      	bne.n	80072b8 <HAL_RCC_OscConfig+0x98>
 800729e:	4b7b      	ldr	r3, [pc, #492]	@ (800748c <HAL_RCC_OscConfig+0x26c>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a7a      	ldr	r2, [pc, #488]	@ (800748c <HAL_RCC_OscConfig+0x26c>)
 80072a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072a8:	6013      	str	r3, [r2, #0]
 80072aa:	4b78      	ldr	r3, [pc, #480]	@ (800748c <HAL_RCC_OscConfig+0x26c>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a77      	ldr	r2, [pc, #476]	@ (800748c <HAL_RCC_OscConfig+0x26c>)
 80072b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80072b4:	6013      	str	r3, [r2, #0]
 80072b6:	e01d      	b.n	80072f4 <HAL_RCC_OscConfig+0xd4>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80072c0:	d10c      	bne.n	80072dc <HAL_RCC_OscConfig+0xbc>
 80072c2:	4b72      	ldr	r3, [pc, #456]	@ (800748c <HAL_RCC_OscConfig+0x26c>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a71      	ldr	r2, [pc, #452]	@ (800748c <HAL_RCC_OscConfig+0x26c>)
 80072c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80072cc:	6013      	str	r3, [r2, #0]
 80072ce:	4b6f      	ldr	r3, [pc, #444]	@ (800748c <HAL_RCC_OscConfig+0x26c>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a6e      	ldr	r2, [pc, #440]	@ (800748c <HAL_RCC_OscConfig+0x26c>)
 80072d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072d8:	6013      	str	r3, [r2, #0]
 80072da:	e00b      	b.n	80072f4 <HAL_RCC_OscConfig+0xd4>
 80072dc:	4b6b      	ldr	r3, [pc, #428]	@ (800748c <HAL_RCC_OscConfig+0x26c>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a6a      	ldr	r2, [pc, #424]	@ (800748c <HAL_RCC_OscConfig+0x26c>)
 80072e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072e6:	6013      	str	r3, [r2, #0]
 80072e8:	4b68      	ldr	r3, [pc, #416]	@ (800748c <HAL_RCC_OscConfig+0x26c>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a67      	ldr	r2, [pc, #412]	@ (800748c <HAL_RCC_OscConfig+0x26c>)
 80072ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80072f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d013      	beq.n	8007324 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072fc:	f7fd f998 	bl	8004630 <HAL_GetTick>
 8007300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007302:	e008      	b.n	8007316 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007304:	f7fd f994 	bl	8004630 <HAL_GetTick>
 8007308:	4602      	mov	r2, r0
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	2b64      	cmp	r3, #100	@ 0x64
 8007310:	d901      	bls.n	8007316 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007312:	2303      	movs	r3, #3
 8007314:	e200      	b.n	8007718 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007316:	4b5d      	ldr	r3, [pc, #372]	@ (800748c <HAL_RCC_OscConfig+0x26c>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800731e:	2b00      	cmp	r3, #0
 8007320:	d0f0      	beq.n	8007304 <HAL_RCC_OscConfig+0xe4>
 8007322:	e014      	b.n	800734e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007324:	f7fd f984 	bl	8004630 <HAL_GetTick>
 8007328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800732a:	e008      	b.n	800733e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800732c:	f7fd f980 	bl	8004630 <HAL_GetTick>
 8007330:	4602      	mov	r2, r0
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	2b64      	cmp	r3, #100	@ 0x64
 8007338:	d901      	bls.n	800733e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	e1ec      	b.n	8007718 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800733e:	4b53      	ldr	r3, [pc, #332]	@ (800748c <HAL_RCC_OscConfig+0x26c>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1f0      	bne.n	800732c <HAL_RCC_OscConfig+0x10c>
 800734a:	e000      	b.n	800734e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800734c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 0302 	and.w	r3, r3, #2
 8007356:	2b00      	cmp	r3, #0
 8007358:	d063      	beq.n	8007422 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800735a:	4b4c      	ldr	r3, [pc, #304]	@ (800748c <HAL_RCC_OscConfig+0x26c>)
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	f003 030c 	and.w	r3, r3, #12
 8007362:	2b00      	cmp	r3, #0
 8007364:	d00b      	beq.n	800737e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007366:	4b49      	ldr	r3, [pc, #292]	@ (800748c <HAL_RCC_OscConfig+0x26c>)
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	f003 030c 	and.w	r3, r3, #12
 800736e:	2b08      	cmp	r3, #8
 8007370:	d11c      	bne.n	80073ac <HAL_RCC_OscConfig+0x18c>
 8007372:	4b46      	ldr	r3, [pc, #280]	@ (800748c <HAL_RCC_OscConfig+0x26c>)
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800737a:	2b00      	cmp	r3, #0
 800737c:	d116      	bne.n	80073ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800737e:	4b43      	ldr	r3, [pc, #268]	@ (800748c <HAL_RCC_OscConfig+0x26c>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 0302 	and.w	r3, r3, #2
 8007386:	2b00      	cmp	r3, #0
 8007388:	d005      	beq.n	8007396 <HAL_RCC_OscConfig+0x176>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	2b01      	cmp	r3, #1
 8007390:	d001      	beq.n	8007396 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	e1c0      	b.n	8007718 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007396:	4b3d      	ldr	r3, [pc, #244]	@ (800748c <HAL_RCC_OscConfig+0x26c>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	695b      	ldr	r3, [r3, #20]
 80073a2:	00db      	lsls	r3, r3, #3
 80073a4:	4939      	ldr	r1, [pc, #228]	@ (800748c <HAL_RCC_OscConfig+0x26c>)
 80073a6:	4313      	orrs	r3, r2
 80073a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073aa:	e03a      	b.n	8007422 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d020      	beq.n	80073f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80073b4:	4b36      	ldr	r3, [pc, #216]	@ (8007490 <HAL_RCC_OscConfig+0x270>)
 80073b6:	2201      	movs	r2, #1
 80073b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073ba:	f7fd f939 	bl	8004630 <HAL_GetTick>
 80073be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073c0:	e008      	b.n	80073d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80073c2:	f7fd f935 	bl	8004630 <HAL_GetTick>
 80073c6:	4602      	mov	r2, r0
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	1ad3      	subs	r3, r2, r3
 80073cc:	2b02      	cmp	r3, #2
 80073ce:	d901      	bls.n	80073d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80073d0:	2303      	movs	r3, #3
 80073d2:	e1a1      	b.n	8007718 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073d4:	4b2d      	ldr	r3, [pc, #180]	@ (800748c <HAL_RCC_OscConfig+0x26c>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0302 	and.w	r3, r3, #2
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d0f0      	beq.n	80073c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80073e0:	4b2a      	ldr	r3, [pc, #168]	@ (800748c <HAL_RCC_OscConfig+0x26c>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	695b      	ldr	r3, [r3, #20]
 80073ec:	00db      	lsls	r3, r3, #3
 80073ee:	4927      	ldr	r1, [pc, #156]	@ (800748c <HAL_RCC_OscConfig+0x26c>)
 80073f0:	4313      	orrs	r3, r2
 80073f2:	600b      	str	r3, [r1, #0]
 80073f4:	e015      	b.n	8007422 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80073f6:	4b26      	ldr	r3, [pc, #152]	@ (8007490 <HAL_RCC_OscConfig+0x270>)
 80073f8:	2200      	movs	r2, #0
 80073fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073fc:	f7fd f918 	bl	8004630 <HAL_GetTick>
 8007400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007402:	e008      	b.n	8007416 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007404:	f7fd f914 	bl	8004630 <HAL_GetTick>
 8007408:	4602      	mov	r2, r0
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	1ad3      	subs	r3, r2, r3
 800740e:	2b02      	cmp	r3, #2
 8007410:	d901      	bls.n	8007416 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007412:	2303      	movs	r3, #3
 8007414:	e180      	b.n	8007718 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007416:	4b1d      	ldr	r3, [pc, #116]	@ (800748c <HAL_RCC_OscConfig+0x26c>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 0302 	and.w	r3, r3, #2
 800741e:	2b00      	cmp	r3, #0
 8007420:	d1f0      	bne.n	8007404 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f003 0308 	and.w	r3, r3, #8
 800742a:	2b00      	cmp	r3, #0
 800742c:	d03a      	beq.n	80074a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	699b      	ldr	r3, [r3, #24]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d019      	beq.n	800746a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007436:	4b17      	ldr	r3, [pc, #92]	@ (8007494 <HAL_RCC_OscConfig+0x274>)
 8007438:	2201      	movs	r2, #1
 800743a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800743c:	f7fd f8f8 	bl	8004630 <HAL_GetTick>
 8007440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007442:	e008      	b.n	8007456 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007444:	f7fd f8f4 	bl	8004630 <HAL_GetTick>
 8007448:	4602      	mov	r2, r0
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	1ad3      	subs	r3, r2, r3
 800744e:	2b02      	cmp	r3, #2
 8007450:	d901      	bls.n	8007456 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e160      	b.n	8007718 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007456:	4b0d      	ldr	r3, [pc, #52]	@ (800748c <HAL_RCC_OscConfig+0x26c>)
 8007458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800745a:	f003 0302 	and.w	r3, r3, #2
 800745e:	2b00      	cmp	r3, #0
 8007460:	d0f0      	beq.n	8007444 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007462:	2001      	movs	r0, #1
 8007464:	f000 fafe 	bl	8007a64 <RCC_Delay>
 8007468:	e01c      	b.n	80074a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800746a:	4b0a      	ldr	r3, [pc, #40]	@ (8007494 <HAL_RCC_OscConfig+0x274>)
 800746c:	2200      	movs	r2, #0
 800746e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007470:	f7fd f8de 	bl	8004630 <HAL_GetTick>
 8007474:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007476:	e00f      	b.n	8007498 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007478:	f7fd f8da 	bl	8004630 <HAL_GetTick>
 800747c:	4602      	mov	r2, r0
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	1ad3      	subs	r3, r2, r3
 8007482:	2b02      	cmp	r3, #2
 8007484:	d908      	bls.n	8007498 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007486:	2303      	movs	r3, #3
 8007488:	e146      	b.n	8007718 <HAL_RCC_OscConfig+0x4f8>
 800748a:	bf00      	nop
 800748c:	40021000 	.word	0x40021000
 8007490:	42420000 	.word	0x42420000
 8007494:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007498:	4b92      	ldr	r3, [pc, #584]	@ (80076e4 <HAL_RCC_OscConfig+0x4c4>)
 800749a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800749c:	f003 0302 	and.w	r3, r3, #2
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d1e9      	bne.n	8007478 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 0304 	and.w	r3, r3, #4
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f000 80a6 	beq.w	80075fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80074b2:	2300      	movs	r3, #0
 80074b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80074b6:	4b8b      	ldr	r3, [pc, #556]	@ (80076e4 <HAL_RCC_OscConfig+0x4c4>)
 80074b8:	69db      	ldr	r3, [r3, #28]
 80074ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d10d      	bne.n	80074de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074c2:	4b88      	ldr	r3, [pc, #544]	@ (80076e4 <HAL_RCC_OscConfig+0x4c4>)
 80074c4:	69db      	ldr	r3, [r3, #28]
 80074c6:	4a87      	ldr	r2, [pc, #540]	@ (80076e4 <HAL_RCC_OscConfig+0x4c4>)
 80074c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074cc:	61d3      	str	r3, [r2, #28]
 80074ce:	4b85      	ldr	r3, [pc, #532]	@ (80076e4 <HAL_RCC_OscConfig+0x4c4>)
 80074d0:	69db      	ldr	r3, [r3, #28]
 80074d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074d6:	60bb      	str	r3, [r7, #8]
 80074d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074da:	2301      	movs	r3, #1
 80074dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074de:	4b82      	ldr	r3, [pc, #520]	@ (80076e8 <HAL_RCC_OscConfig+0x4c8>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d118      	bne.n	800751c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80074ea:	4b7f      	ldr	r3, [pc, #508]	@ (80076e8 <HAL_RCC_OscConfig+0x4c8>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a7e      	ldr	r2, [pc, #504]	@ (80076e8 <HAL_RCC_OscConfig+0x4c8>)
 80074f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80074f6:	f7fd f89b 	bl	8004630 <HAL_GetTick>
 80074fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80074fc:	e008      	b.n	8007510 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074fe:	f7fd f897 	bl	8004630 <HAL_GetTick>
 8007502:	4602      	mov	r2, r0
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	1ad3      	subs	r3, r2, r3
 8007508:	2b64      	cmp	r3, #100	@ 0x64
 800750a:	d901      	bls.n	8007510 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800750c:	2303      	movs	r3, #3
 800750e:	e103      	b.n	8007718 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007510:	4b75      	ldr	r3, [pc, #468]	@ (80076e8 <HAL_RCC_OscConfig+0x4c8>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007518:	2b00      	cmp	r3, #0
 800751a:	d0f0      	beq.n	80074fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	2b01      	cmp	r3, #1
 8007522:	d106      	bne.n	8007532 <HAL_RCC_OscConfig+0x312>
 8007524:	4b6f      	ldr	r3, [pc, #444]	@ (80076e4 <HAL_RCC_OscConfig+0x4c4>)
 8007526:	6a1b      	ldr	r3, [r3, #32]
 8007528:	4a6e      	ldr	r2, [pc, #440]	@ (80076e4 <HAL_RCC_OscConfig+0x4c4>)
 800752a:	f043 0301 	orr.w	r3, r3, #1
 800752e:	6213      	str	r3, [r2, #32]
 8007530:	e02d      	b.n	800758e <HAL_RCC_OscConfig+0x36e>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d10c      	bne.n	8007554 <HAL_RCC_OscConfig+0x334>
 800753a:	4b6a      	ldr	r3, [pc, #424]	@ (80076e4 <HAL_RCC_OscConfig+0x4c4>)
 800753c:	6a1b      	ldr	r3, [r3, #32]
 800753e:	4a69      	ldr	r2, [pc, #420]	@ (80076e4 <HAL_RCC_OscConfig+0x4c4>)
 8007540:	f023 0301 	bic.w	r3, r3, #1
 8007544:	6213      	str	r3, [r2, #32]
 8007546:	4b67      	ldr	r3, [pc, #412]	@ (80076e4 <HAL_RCC_OscConfig+0x4c4>)
 8007548:	6a1b      	ldr	r3, [r3, #32]
 800754a:	4a66      	ldr	r2, [pc, #408]	@ (80076e4 <HAL_RCC_OscConfig+0x4c4>)
 800754c:	f023 0304 	bic.w	r3, r3, #4
 8007550:	6213      	str	r3, [r2, #32]
 8007552:	e01c      	b.n	800758e <HAL_RCC_OscConfig+0x36e>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	2b05      	cmp	r3, #5
 800755a:	d10c      	bne.n	8007576 <HAL_RCC_OscConfig+0x356>
 800755c:	4b61      	ldr	r3, [pc, #388]	@ (80076e4 <HAL_RCC_OscConfig+0x4c4>)
 800755e:	6a1b      	ldr	r3, [r3, #32]
 8007560:	4a60      	ldr	r2, [pc, #384]	@ (80076e4 <HAL_RCC_OscConfig+0x4c4>)
 8007562:	f043 0304 	orr.w	r3, r3, #4
 8007566:	6213      	str	r3, [r2, #32]
 8007568:	4b5e      	ldr	r3, [pc, #376]	@ (80076e4 <HAL_RCC_OscConfig+0x4c4>)
 800756a:	6a1b      	ldr	r3, [r3, #32]
 800756c:	4a5d      	ldr	r2, [pc, #372]	@ (80076e4 <HAL_RCC_OscConfig+0x4c4>)
 800756e:	f043 0301 	orr.w	r3, r3, #1
 8007572:	6213      	str	r3, [r2, #32]
 8007574:	e00b      	b.n	800758e <HAL_RCC_OscConfig+0x36e>
 8007576:	4b5b      	ldr	r3, [pc, #364]	@ (80076e4 <HAL_RCC_OscConfig+0x4c4>)
 8007578:	6a1b      	ldr	r3, [r3, #32]
 800757a:	4a5a      	ldr	r2, [pc, #360]	@ (80076e4 <HAL_RCC_OscConfig+0x4c4>)
 800757c:	f023 0301 	bic.w	r3, r3, #1
 8007580:	6213      	str	r3, [r2, #32]
 8007582:	4b58      	ldr	r3, [pc, #352]	@ (80076e4 <HAL_RCC_OscConfig+0x4c4>)
 8007584:	6a1b      	ldr	r3, [r3, #32]
 8007586:	4a57      	ldr	r2, [pc, #348]	@ (80076e4 <HAL_RCC_OscConfig+0x4c4>)
 8007588:	f023 0304 	bic.w	r3, r3, #4
 800758c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d015      	beq.n	80075c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007596:	f7fd f84b 	bl	8004630 <HAL_GetTick>
 800759a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800759c:	e00a      	b.n	80075b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800759e:	f7fd f847 	bl	8004630 <HAL_GetTick>
 80075a2:	4602      	mov	r2, r0
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d901      	bls.n	80075b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e0b1      	b.n	8007718 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075b4:	4b4b      	ldr	r3, [pc, #300]	@ (80076e4 <HAL_RCC_OscConfig+0x4c4>)
 80075b6:	6a1b      	ldr	r3, [r3, #32]
 80075b8:	f003 0302 	and.w	r3, r3, #2
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d0ee      	beq.n	800759e <HAL_RCC_OscConfig+0x37e>
 80075c0:	e014      	b.n	80075ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80075c2:	f7fd f835 	bl	8004630 <HAL_GetTick>
 80075c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075c8:	e00a      	b.n	80075e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075ca:	f7fd f831 	bl	8004630 <HAL_GetTick>
 80075ce:	4602      	mov	r2, r0
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	1ad3      	subs	r3, r2, r3
 80075d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80075d8:	4293      	cmp	r3, r2
 80075da:	d901      	bls.n	80075e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80075dc:	2303      	movs	r3, #3
 80075de:	e09b      	b.n	8007718 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80075e0:	4b40      	ldr	r3, [pc, #256]	@ (80076e4 <HAL_RCC_OscConfig+0x4c4>)
 80075e2:	6a1b      	ldr	r3, [r3, #32]
 80075e4:	f003 0302 	and.w	r3, r3, #2
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d1ee      	bne.n	80075ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80075ec:	7dfb      	ldrb	r3, [r7, #23]
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d105      	bne.n	80075fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075f2:	4b3c      	ldr	r3, [pc, #240]	@ (80076e4 <HAL_RCC_OscConfig+0x4c4>)
 80075f4:	69db      	ldr	r3, [r3, #28]
 80075f6:	4a3b      	ldr	r2, [pc, #236]	@ (80076e4 <HAL_RCC_OscConfig+0x4c4>)
 80075f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80075fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	69db      	ldr	r3, [r3, #28]
 8007602:	2b00      	cmp	r3, #0
 8007604:	f000 8087 	beq.w	8007716 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007608:	4b36      	ldr	r3, [pc, #216]	@ (80076e4 <HAL_RCC_OscConfig+0x4c4>)
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	f003 030c 	and.w	r3, r3, #12
 8007610:	2b08      	cmp	r3, #8
 8007612:	d061      	beq.n	80076d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	69db      	ldr	r3, [r3, #28]
 8007618:	2b02      	cmp	r3, #2
 800761a:	d146      	bne.n	80076aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800761c:	4b33      	ldr	r3, [pc, #204]	@ (80076ec <HAL_RCC_OscConfig+0x4cc>)
 800761e:	2200      	movs	r2, #0
 8007620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007622:	f7fd f805 	bl	8004630 <HAL_GetTick>
 8007626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007628:	e008      	b.n	800763c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800762a:	f7fd f801 	bl	8004630 <HAL_GetTick>
 800762e:	4602      	mov	r2, r0
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	2b02      	cmp	r3, #2
 8007636:	d901      	bls.n	800763c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007638:	2303      	movs	r3, #3
 800763a:	e06d      	b.n	8007718 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800763c:	4b29      	ldr	r3, [pc, #164]	@ (80076e4 <HAL_RCC_OscConfig+0x4c4>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007644:	2b00      	cmp	r3, #0
 8007646:	d1f0      	bne.n	800762a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6a1b      	ldr	r3, [r3, #32]
 800764c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007650:	d108      	bne.n	8007664 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007652:	4b24      	ldr	r3, [pc, #144]	@ (80076e4 <HAL_RCC_OscConfig+0x4c4>)
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	4921      	ldr	r1, [pc, #132]	@ (80076e4 <HAL_RCC_OscConfig+0x4c4>)
 8007660:	4313      	orrs	r3, r2
 8007662:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007664:	4b1f      	ldr	r3, [pc, #124]	@ (80076e4 <HAL_RCC_OscConfig+0x4c4>)
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6a19      	ldr	r1, [r3, #32]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007674:	430b      	orrs	r3, r1
 8007676:	491b      	ldr	r1, [pc, #108]	@ (80076e4 <HAL_RCC_OscConfig+0x4c4>)
 8007678:	4313      	orrs	r3, r2
 800767a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800767c:	4b1b      	ldr	r3, [pc, #108]	@ (80076ec <HAL_RCC_OscConfig+0x4cc>)
 800767e:	2201      	movs	r2, #1
 8007680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007682:	f7fc ffd5 	bl	8004630 <HAL_GetTick>
 8007686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007688:	e008      	b.n	800769c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800768a:	f7fc ffd1 	bl	8004630 <HAL_GetTick>
 800768e:	4602      	mov	r2, r0
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	1ad3      	subs	r3, r2, r3
 8007694:	2b02      	cmp	r3, #2
 8007696:	d901      	bls.n	800769c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007698:	2303      	movs	r3, #3
 800769a:	e03d      	b.n	8007718 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800769c:	4b11      	ldr	r3, [pc, #68]	@ (80076e4 <HAL_RCC_OscConfig+0x4c4>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d0f0      	beq.n	800768a <HAL_RCC_OscConfig+0x46a>
 80076a8:	e035      	b.n	8007716 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076aa:	4b10      	ldr	r3, [pc, #64]	@ (80076ec <HAL_RCC_OscConfig+0x4cc>)
 80076ac:	2200      	movs	r2, #0
 80076ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076b0:	f7fc ffbe 	bl	8004630 <HAL_GetTick>
 80076b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80076b6:	e008      	b.n	80076ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076b8:	f7fc ffba 	bl	8004630 <HAL_GetTick>
 80076bc:	4602      	mov	r2, r0
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	2b02      	cmp	r3, #2
 80076c4:	d901      	bls.n	80076ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80076c6:	2303      	movs	r3, #3
 80076c8:	e026      	b.n	8007718 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80076ca:	4b06      	ldr	r3, [pc, #24]	@ (80076e4 <HAL_RCC_OscConfig+0x4c4>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1f0      	bne.n	80076b8 <HAL_RCC_OscConfig+0x498>
 80076d6:	e01e      	b.n	8007716 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	69db      	ldr	r3, [r3, #28]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d107      	bne.n	80076f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80076e0:	2301      	movs	r3, #1
 80076e2:	e019      	b.n	8007718 <HAL_RCC_OscConfig+0x4f8>
 80076e4:	40021000 	.word	0x40021000
 80076e8:	40007000 	.word	0x40007000
 80076ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80076f0:	4b0b      	ldr	r3, [pc, #44]	@ (8007720 <HAL_RCC_OscConfig+0x500>)
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a1b      	ldr	r3, [r3, #32]
 8007700:	429a      	cmp	r2, r3
 8007702:	d106      	bne.n	8007712 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800770e:	429a      	cmp	r2, r3
 8007710:	d001      	beq.n	8007716 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	e000      	b.n	8007718 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	3718      	adds	r7, #24
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}
 8007720:	40021000 	.word	0x40021000

08007724 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d101      	bne.n	8007738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	e0d0      	b.n	80078da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007738:	4b6a      	ldr	r3, [pc, #424]	@ (80078e4 <HAL_RCC_ClockConfig+0x1c0>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 0307 	and.w	r3, r3, #7
 8007740:	683a      	ldr	r2, [r7, #0]
 8007742:	429a      	cmp	r2, r3
 8007744:	d910      	bls.n	8007768 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007746:	4b67      	ldr	r3, [pc, #412]	@ (80078e4 <HAL_RCC_ClockConfig+0x1c0>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f023 0207 	bic.w	r2, r3, #7
 800774e:	4965      	ldr	r1, [pc, #404]	@ (80078e4 <HAL_RCC_ClockConfig+0x1c0>)
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	4313      	orrs	r3, r2
 8007754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007756:	4b63      	ldr	r3, [pc, #396]	@ (80078e4 <HAL_RCC_ClockConfig+0x1c0>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 0307 	and.w	r3, r3, #7
 800775e:	683a      	ldr	r2, [r7, #0]
 8007760:	429a      	cmp	r2, r3
 8007762:	d001      	beq.n	8007768 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	e0b8      	b.n	80078da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 0302 	and.w	r3, r3, #2
 8007770:	2b00      	cmp	r3, #0
 8007772:	d020      	beq.n	80077b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 0304 	and.w	r3, r3, #4
 800777c:	2b00      	cmp	r3, #0
 800777e:	d005      	beq.n	800778c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007780:	4b59      	ldr	r3, [pc, #356]	@ (80078e8 <HAL_RCC_ClockConfig+0x1c4>)
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	4a58      	ldr	r2, [pc, #352]	@ (80078e8 <HAL_RCC_ClockConfig+0x1c4>)
 8007786:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800778a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f003 0308 	and.w	r3, r3, #8
 8007794:	2b00      	cmp	r3, #0
 8007796:	d005      	beq.n	80077a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007798:	4b53      	ldr	r3, [pc, #332]	@ (80078e8 <HAL_RCC_ClockConfig+0x1c4>)
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	4a52      	ldr	r2, [pc, #328]	@ (80078e8 <HAL_RCC_ClockConfig+0x1c4>)
 800779e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80077a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077a4:	4b50      	ldr	r3, [pc, #320]	@ (80078e8 <HAL_RCC_ClockConfig+0x1c4>)
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	494d      	ldr	r1, [pc, #308]	@ (80078e8 <HAL_RCC_ClockConfig+0x1c4>)
 80077b2:	4313      	orrs	r3, r2
 80077b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 0301 	and.w	r3, r3, #1
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d040      	beq.n	8007844 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	2b01      	cmp	r3, #1
 80077c8:	d107      	bne.n	80077da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077ca:	4b47      	ldr	r3, [pc, #284]	@ (80078e8 <HAL_RCC_ClockConfig+0x1c4>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d115      	bne.n	8007802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	e07f      	b.n	80078da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	2b02      	cmp	r3, #2
 80077e0:	d107      	bne.n	80077f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077e2:	4b41      	ldr	r3, [pc, #260]	@ (80078e8 <HAL_RCC_ClockConfig+0x1c4>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d109      	bne.n	8007802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e073      	b.n	80078da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077f2:	4b3d      	ldr	r3, [pc, #244]	@ (80078e8 <HAL_RCC_ClockConfig+0x1c4>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f003 0302 	and.w	r3, r3, #2
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d101      	bne.n	8007802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e06b      	b.n	80078da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007802:	4b39      	ldr	r3, [pc, #228]	@ (80078e8 <HAL_RCC_ClockConfig+0x1c4>)
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	f023 0203 	bic.w	r2, r3, #3
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	4936      	ldr	r1, [pc, #216]	@ (80078e8 <HAL_RCC_ClockConfig+0x1c4>)
 8007810:	4313      	orrs	r3, r2
 8007812:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007814:	f7fc ff0c 	bl	8004630 <HAL_GetTick>
 8007818:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800781a:	e00a      	b.n	8007832 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800781c:	f7fc ff08 	bl	8004630 <HAL_GetTick>
 8007820:	4602      	mov	r2, r0
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	1ad3      	subs	r3, r2, r3
 8007826:	f241 3288 	movw	r2, #5000	@ 0x1388
 800782a:	4293      	cmp	r3, r2
 800782c:	d901      	bls.n	8007832 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800782e:	2303      	movs	r3, #3
 8007830:	e053      	b.n	80078da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007832:	4b2d      	ldr	r3, [pc, #180]	@ (80078e8 <HAL_RCC_ClockConfig+0x1c4>)
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	f003 020c 	and.w	r2, r3, #12
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	429a      	cmp	r2, r3
 8007842:	d1eb      	bne.n	800781c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007844:	4b27      	ldr	r3, [pc, #156]	@ (80078e4 <HAL_RCC_ClockConfig+0x1c0>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 0307 	and.w	r3, r3, #7
 800784c:	683a      	ldr	r2, [r7, #0]
 800784e:	429a      	cmp	r2, r3
 8007850:	d210      	bcs.n	8007874 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007852:	4b24      	ldr	r3, [pc, #144]	@ (80078e4 <HAL_RCC_ClockConfig+0x1c0>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f023 0207 	bic.w	r2, r3, #7
 800785a:	4922      	ldr	r1, [pc, #136]	@ (80078e4 <HAL_RCC_ClockConfig+0x1c0>)
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	4313      	orrs	r3, r2
 8007860:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007862:	4b20      	ldr	r3, [pc, #128]	@ (80078e4 <HAL_RCC_ClockConfig+0x1c0>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f003 0307 	and.w	r3, r3, #7
 800786a:	683a      	ldr	r2, [r7, #0]
 800786c:	429a      	cmp	r2, r3
 800786e:	d001      	beq.n	8007874 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	e032      	b.n	80078da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 0304 	and.w	r3, r3, #4
 800787c:	2b00      	cmp	r3, #0
 800787e:	d008      	beq.n	8007892 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007880:	4b19      	ldr	r3, [pc, #100]	@ (80078e8 <HAL_RCC_ClockConfig+0x1c4>)
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	4916      	ldr	r1, [pc, #88]	@ (80078e8 <HAL_RCC_ClockConfig+0x1c4>)
 800788e:	4313      	orrs	r3, r2
 8007890:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 0308 	and.w	r3, r3, #8
 800789a:	2b00      	cmp	r3, #0
 800789c:	d009      	beq.n	80078b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800789e:	4b12      	ldr	r3, [pc, #72]	@ (80078e8 <HAL_RCC_ClockConfig+0x1c4>)
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	00db      	lsls	r3, r3, #3
 80078ac:	490e      	ldr	r1, [pc, #56]	@ (80078e8 <HAL_RCC_ClockConfig+0x1c4>)
 80078ae:	4313      	orrs	r3, r2
 80078b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80078b2:	f000 f821 	bl	80078f8 <HAL_RCC_GetSysClockFreq>
 80078b6:	4602      	mov	r2, r0
 80078b8:	4b0b      	ldr	r3, [pc, #44]	@ (80078e8 <HAL_RCC_ClockConfig+0x1c4>)
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	091b      	lsrs	r3, r3, #4
 80078be:	f003 030f 	and.w	r3, r3, #15
 80078c2:	490a      	ldr	r1, [pc, #40]	@ (80078ec <HAL_RCC_ClockConfig+0x1c8>)
 80078c4:	5ccb      	ldrb	r3, [r1, r3]
 80078c6:	fa22 f303 	lsr.w	r3, r2, r3
 80078ca:	4a09      	ldr	r2, [pc, #36]	@ (80078f0 <HAL_RCC_ClockConfig+0x1cc>)
 80078cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80078ce:	4b09      	ldr	r3, [pc, #36]	@ (80078f4 <HAL_RCC_ClockConfig+0x1d0>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4618      	mov	r0, r3
 80078d4:	f7fc fc46 	bl	8004164 <HAL_InitTick>

  return HAL_OK;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	40022000 	.word	0x40022000
 80078e8:	40021000 	.word	0x40021000
 80078ec:	08011ec0 	.word	0x08011ec0
 80078f0:	200000e0 	.word	0x200000e0
 80078f4:	200000e4 	.word	0x200000e4

080078f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b087      	sub	sp, #28
 80078fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80078fe:	2300      	movs	r3, #0
 8007900:	60fb      	str	r3, [r7, #12]
 8007902:	2300      	movs	r3, #0
 8007904:	60bb      	str	r3, [r7, #8]
 8007906:	2300      	movs	r3, #0
 8007908:	617b      	str	r3, [r7, #20]
 800790a:	2300      	movs	r3, #0
 800790c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800790e:	2300      	movs	r3, #0
 8007910:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007912:	4b1e      	ldr	r3, [pc, #120]	@ (800798c <HAL_RCC_GetSysClockFreq+0x94>)
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f003 030c 	and.w	r3, r3, #12
 800791e:	2b04      	cmp	r3, #4
 8007920:	d002      	beq.n	8007928 <HAL_RCC_GetSysClockFreq+0x30>
 8007922:	2b08      	cmp	r3, #8
 8007924:	d003      	beq.n	800792e <HAL_RCC_GetSysClockFreq+0x36>
 8007926:	e027      	b.n	8007978 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007928:	4b19      	ldr	r3, [pc, #100]	@ (8007990 <HAL_RCC_GetSysClockFreq+0x98>)
 800792a:	613b      	str	r3, [r7, #16]
      break;
 800792c:	e027      	b.n	800797e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	0c9b      	lsrs	r3, r3, #18
 8007932:	f003 030f 	and.w	r3, r3, #15
 8007936:	4a17      	ldr	r2, [pc, #92]	@ (8007994 <HAL_RCC_GetSysClockFreq+0x9c>)
 8007938:	5cd3      	ldrb	r3, [r2, r3]
 800793a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007942:	2b00      	cmp	r3, #0
 8007944:	d010      	beq.n	8007968 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007946:	4b11      	ldr	r3, [pc, #68]	@ (800798c <HAL_RCC_GetSysClockFreq+0x94>)
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	0c5b      	lsrs	r3, r3, #17
 800794c:	f003 0301 	and.w	r3, r3, #1
 8007950:	4a11      	ldr	r2, [pc, #68]	@ (8007998 <HAL_RCC_GetSysClockFreq+0xa0>)
 8007952:	5cd3      	ldrb	r3, [r2, r3]
 8007954:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a0d      	ldr	r2, [pc, #52]	@ (8007990 <HAL_RCC_GetSysClockFreq+0x98>)
 800795a:	fb03 f202 	mul.w	r2, r3, r2
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	fbb2 f3f3 	udiv	r3, r2, r3
 8007964:	617b      	str	r3, [r7, #20]
 8007966:	e004      	b.n	8007972 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a0c      	ldr	r2, [pc, #48]	@ (800799c <HAL_RCC_GetSysClockFreq+0xa4>)
 800796c:	fb02 f303 	mul.w	r3, r2, r3
 8007970:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	613b      	str	r3, [r7, #16]
      break;
 8007976:	e002      	b.n	800797e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007978:	4b05      	ldr	r3, [pc, #20]	@ (8007990 <HAL_RCC_GetSysClockFreq+0x98>)
 800797a:	613b      	str	r3, [r7, #16]
      break;
 800797c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800797e:	693b      	ldr	r3, [r7, #16]
}
 8007980:	4618      	mov	r0, r3
 8007982:	371c      	adds	r7, #28
 8007984:	46bd      	mov	sp, r7
 8007986:	bc80      	pop	{r7}
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop
 800798c:	40021000 	.word	0x40021000
 8007990:	007a1200 	.word	0x007a1200
 8007994:	08011ed8 	.word	0x08011ed8
 8007998:	08011ee8 	.word	0x08011ee8
 800799c:	003d0900 	.word	0x003d0900

080079a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079a0:	b480      	push	{r7}
 80079a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80079a4:	4b02      	ldr	r3, [pc, #8]	@ (80079b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80079a6:	681b      	ldr	r3, [r3, #0]
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bc80      	pop	{r7}
 80079ae:	4770      	bx	lr
 80079b0:	200000e0 	.word	0x200000e0

080079b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80079b8:	f7ff fff2 	bl	80079a0 <HAL_RCC_GetHCLKFreq>
 80079bc:	4602      	mov	r2, r0
 80079be:	4b05      	ldr	r3, [pc, #20]	@ (80079d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	0a1b      	lsrs	r3, r3, #8
 80079c4:	f003 0307 	and.w	r3, r3, #7
 80079c8:	4903      	ldr	r1, [pc, #12]	@ (80079d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80079ca:	5ccb      	ldrb	r3, [r1, r3]
 80079cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	40021000 	.word	0x40021000
 80079d8:	08011ed0 	.word	0x08011ed0

080079dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80079e0:	f7ff ffde 	bl	80079a0 <HAL_RCC_GetHCLKFreq>
 80079e4:	4602      	mov	r2, r0
 80079e6:	4b05      	ldr	r3, [pc, #20]	@ (80079fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	0adb      	lsrs	r3, r3, #11
 80079ec:	f003 0307 	and.w	r3, r3, #7
 80079f0:	4903      	ldr	r1, [pc, #12]	@ (8007a00 <HAL_RCC_GetPCLK2Freq+0x24>)
 80079f2:	5ccb      	ldrb	r3, [r1, r3]
 80079f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	40021000 	.word	0x40021000
 8007a00:	08011ed0 	.word	0x08011ed0

08007a04 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	220f      	movs	r2, #15
 8007a12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007a14:	4b11      	ldr	r3, [pc, #68]	@ (8007a5c <HAL_RCC_GetClockConfig+0x58>)
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	f003 0203 	and.w	r2, r3, #3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007a20:	4b0e      	ldr	r3, [pc, #56]	@ (8007a5c <HAL_RCC_GetClockConfig+0x58>)
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8007a5c <HAL_RCC_GetClockConfig+0x58>)
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007a38:	4b08      	ldr	r3, [pc, #32]	@ (8007a5c <HAL_RCC_GetClockConfig+0x58>)
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	08db      	lsrs	r3, r3, #3
 8007a3e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007a46:	4b06      	ldr	r3, [pc, #24]	@ (8007a60 <HAL_RCC_GetClockConfig+0x5c>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f003 0207 	and.w	r2, r3, #7
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8007a52:	bf00      	nop
 8007a54:	370c      	adds	r7, #12
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bc80      	pop	{r7}
 8007a5a:	4770      	bx	lr
 8007a5c:	40021000 	.word	0x40021000
 8007a60:	40022000 	.word	0x40022000

08007a64 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b085      	sub	sp, #20
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8007a98 <RCC_Delay+0x34>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a0a      	ldr	r2, [pc, #40]	@ (8007a9c <RCC_Delay+0x38>)
 8007a72:	fba2 2303 	umull	r2, r3, r2, r3
 8007a76:	0a5b      	lsrs	r3, r3, #9
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	fb02 f303 	mul.w	r3, r2, r3
 8007a7e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007a80:	bf00      	nop
  }
  while (Delay --);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	1e5a      	subs	r2, r3, #1
 8007a86:	60fa      	str	r2, [r7, #12]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d1f9      	bne.n	8007a80 <RCC_Delay+0x1c>
}
 8007a8c:	bf00      	nop
 8007a8e:	bf00      	nop
 8007a90:	3714      	adds	r7, #20
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bc80      	pop	{r7}
 8007a96:	4770      	bx	lr
 8007a98:	200000e0 	.word	0x200000e0
 8007a9c:	10624dd3 	.word	0x10624dd3

08007aa0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b086      	sub	sp, #24
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	613b      	str	r3, [r7, #16]
 8007aac:	2300      	movs	r3, #0
 8007aae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f003 0301 	and.w	r3, r3, #1
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d07d      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007abc:	2300      	movs	r3, #0
 8007abe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007ac0:	4b4f      	ldr	r3, [pc, #316]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ac2:	69db      	ldr	r3, [r3, #28]
 8007ac4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d10d      	bne.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007acc:	4b4c      	ldr	r3, [pc, #304]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ace:	69db      	ldr	r3, [r3, #28]
 8007ad0:	4a4b      	ldr	r2, [pc, #300]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ad2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ad6:	61d3      	str	r3, [r2, #28]
 8007ad8:	4b49      	ldr	r3, [pc, #292]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ada:	69db      	ldr	r3, [r3, #28]
 8007adc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ae0:	60bb      	str	r3, [r7, #8]
 8007ae2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ae8:	4b46      	ldr	r3, [pc, #280]	@ (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d118      	bne.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007af4:	4b43      	ldr	r3, [pc, #268]	@ (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a42      	ldr	r2, [pc, #264]	@ (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007afa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007afe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b00:	f7fc fd96 	bl	8004630 <HAL_GetTick>
 8007b04:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b06:	e008      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b08:	f7fc fd92 	bl	8004630 <HAL_GetTick>
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	1ad3      	subs	r3, r2, r3
 8007b12:	2b64      	cmp	r3, #100	@ 0x64
 8007b14:	d901      	bls.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8007b16:	2303      	movs	r3, #3
 8007b18:	e06d      	b.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b1a:	4b3a      	ldr	r3, [pc, #232]	@ (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d0f0      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007b26:	4b36      	ldr	r3, [pc, #216]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b28:	6a1b      	ldr	r3, [r3, #32]
 8007b2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b2e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d02e      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b3e:	68fa      	ldr	r2, [r7, #12]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d027      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b44:	4b2e      	ldr	r3, [pc, #184]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b46:	6a1b      	ldr	r3, [r3, #32]
 8007b48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b4c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007b4e:	4b2e      	ldr	r3, [pc, #184]	@ (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007b50:	2201      	movs	r2, #1
 8007b52:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007b54:	4b2c      	ldr	r3, [pc, #176]	@ (8007c08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007b56:	2200      	movs	r2, #0
 8007b58:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007b5a:	4a29      	ldr	r2, [pc, #164]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f003 0301 	and.w	r3, r3, #1
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d014      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b6a:	f7fc fd61 	bl	8004630 <HAL_GetTick>
 8007b6e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b70:	e00a      	b.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b72:	f7fc fd5d 	bl	8004630 <HAL_GetTick>
 8007b76:	4602      	mov	r2, r0
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	1ad3      	subs	r3, r2, r3
 8007b7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d901      	bls.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007b84:	2303      	movs	r3, #3
 8007b86:	e036      	b.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b88:	4b1d      	ldr	r3, [pc, #116]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b8a:	6a1b      	ldr	r3, [r3, #32]
 8007b8c:	f003 0302 	and.w	r3, r3, #2
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d0ee      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b94:	4b1a      	ldr	r3, [pc, #104]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007b96:	6a1b      	ldr	r3, [r3, #32]
 8007b98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	4917      	ldr	r1, [pc, #92]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007ba6:	7dfb      	ldrb	r3, [r7, #23]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d105      	bne.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007bac:	4b14      	ldr	r3, [pc, #80]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bae:	69db      	ldr	r3, [r3, #28]
 8007bb0:	4a13      	ldr	r2, [pc, #76]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007bb6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 0302 	and.w	r3, r3, #2
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d008      	beq.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	490b      	ldr	r1, [pc, #44]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 0310 	and.w	r3, r3, #16
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d008      	beq.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007be2:	4b07      	ldr	r3, [pc, #28]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	695b      	ldr	r3, [r3, #20]
 8007bee:	4904      	ldr	r1, [pc, #16]	@ (8007c00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007bf4:	2300      	movs	r3, #0
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3718      	adds	r7, #24
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	40021000 	.word	0x40021000
 8007c04:	40007000 	.word	0x40007000
 8007c08:	42420440 	.word	0x42420440

08007c0c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b088      	sub	sp, #32
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8007c14:	2300      	movs	r3, #0
 8007c16:	617b      	str	r3, [r7, #20]
 8007c18:	2300      	movs	r3, #0
 8007c1a:	61fb      	str	r3, [r7, #28]
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8007c20:	2300      	movs	r3, #0
 8007c22:	60fb      	str	r3, [r7, #12]
 8007c24:	2300      	movs	r3, #0
 8007c26:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	2b0f      	cmp	r3, #15
 8007c2e:	f200 80af 	bhi.w	8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 8007c32:	a201      	add	r2, pc, #4	@ (adr r2, 8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8007c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c38:	08007d0f 	.word	0x08007d0f
 8007c3c:	08007d75 	.word	0x08007d75
 8007c40:	08007d91 	.word	0x08007d91
 8007c44:	08007cff 	.word	0x08007cff
 8007c48:	08007d91 	.word	0x08007d91
 8007c4c:	08007d91 	.word	0x08007d91
 8007c50:	08007d91 	.word	0x08007d91
 8007c54:	08007d07 	.word	0x08007d07
 8007c58:	08007d91 	.word	0x08007d91
 8007c5c:	08007d91 	.word	0x08007d91
 8007c60:	08007d91 	.word	0x08007d91
 8007c64:	08007d91 	.word	0x08007d91
 8007c68:	08007d91 	.word	0x08007d91
 8007c6c:	08007d91 	.word	0x08007d91
 8007c70:	08007d91 	.word	0x08007d91
 8007c74:	08007c79 	.word	0x08007c79
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8007c78:	4b4a      	ldr	r3, [pc, #296]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8007c7e:	4b49      	ldr	r3, [pc, #292]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f000 8084 	beq.w	8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	0c9b      	lsrs	r3, r3, #18
 8007c90:	f003 030f 	and.w	r3, r3, #15
 8007c94:	4a44      	ldr	r2, [pc, #272]	@ (8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 8007c96:	5cd3      	ldrb	r3, [r2, r3]
 8007c98:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d015      	beq.n	8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007ca4:	4b3f      	ldr	r3, [pc, #252]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	0c5b      	lsrs	r3, r3, #17
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	4a3f      	ldr	r2, [pc, #252]	@ (8007dac <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 8007cb0:	5cd3      	ldrb	r3, [r2, r3]
 8007cb2:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00d      	beq.n	8007cda <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8007cbe:	4a3c      	ldr	r2, [pc, #240]	@ (8007db0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	fbb2 f2f3 	udiv	r2, r2, r3
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	fb02 f303 	mul.w	r3, r2, r3
 8007ccc:	61fb      	str	r3, [r7, #28]
 8007cce:	e004      	b.n	8007cda <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	4a38      	ldr	r2, [pc, #224]	@ (8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8007cd4:	fb02 f303 	mul.w	r3, r2, r3
 8007cd8:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8007cda:	4b32      	ldr	r3, [pc, #200]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ce2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ce6:	d102      	bne.n	8007cee <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8007cec:	e052      	b.n	8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	005b      	lsls	r3, r3, #1
 8007cf2:	4a31      	ldr	r2, [pc, #196]	@ (8007db8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8007cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8007cf8:	085b      	lsrs	r3, r3, #1
 8007cfa:	61bb      	str	r3, [r7, #24]
      break;
 8007cfc:	e04a      	b.n	8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8007cfe:	f7ff fdfb 	bl	80078f8 <HAL_RCC_GetSysClockFreq>
 8007d02:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8007d04:	e049      	b.n	8007d9a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8007d06:	f7ff fdf7 	bl	80078f8 <HAL_RCC_GetSysClockFreq>
 8007d0a:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8007d0c:	e045      	b.n	8007d9a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8007d0e:	4b25      	ldr	r3, [pc, #148]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007d10:	6a1b      	ldr	r3, [r3, #32]
 8007d12:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d1e:	d108      	bne.n	8007d32 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f003 0302 	and.w	r3, r3, #2
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d003      	beq.n	8007d32 <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 8007d2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d2e:	61bb      	str	r3, [r7, #24]
 8007d30:	e01f      	b.n	8007d72 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d3c:	d109      	bne.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8007d3e:	4b19      	ldr	r3, [pc, #100]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d42:	f003 0302 	and.w	r3, r3, #2
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d003      	beq.n	8007d52 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 8007d4a:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8007d4e:	61bb      	str	r3, [r7, #24]
 8007d50:	e00f      	b.n	8007d72 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d5c:	d11c      	bne.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8007d5e:	4b11      	ldr	r3, [pc, #68]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d016      	beq.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 8007d6a:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8007d6e:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8007d70:	e012      	b.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 8007d72:	e011      	b.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007d74:	f7ff fe32 	bl	80079dc <HAL_RCC_GetPCLK2Freq>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	0b9b      	lsrs	r3, r3, #14
 8007d80:	f003 0303 	and.w	r3, r3, #3
 8007d84:	3301      	adds	r3, #1
 8007d86:	005b      	lsls	r3, r3, #1
 8007d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d8c:	61bb      	str	r3, [r7, #24]
      break;
 8007d8e:	e004      	b.n	8007d9a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 8007d90:	bf00      	nop
 8007d92:	e002      	b.n	8007d9a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8007d94:	bf00      	nop
 8007d96:	e000      	b.n	8007d9a <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 8007d98:	bf00      	nop
    }
  }
  return (frequency);
 8007d9a:	69bb      	ldr	r3, [r7, #24]
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3720      	adds	r7, #32
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	40021000 	.word	0x40021000
 8007da8:	08011eec 	.word	0x08011eec
 8007dac:	08011efc 	.word	0x08011efc
 8007db0:	007a1200 	.word	0x007a1200
 8007db4:	003d0900 	.word	0x003d0900
 8007db8:	aaaaaaab 	.word	0xaaaaaaab

08007dbc <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d101      	bne.n	8007dd2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e07a      	b.n	8007ec8 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	7c5b      	ldrb	r3, [r3, #17]
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d105      	bne.n	8007de8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f7fb ff24 	bl	8003c30 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2202      	movs	r2, #2
 8007dec:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 faea 	bl	80083c8 <HAL_RTC_WaitForSynchro>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d004      	beq.n	8007e04 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2204      	movs	r2, #4
 8007dfe:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	e061      	b.n	8007ec8 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 fba3 	bl	8008550 <RTC_EnterInitMode>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d004      	beq.n	8007e1a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2204      	movs	r2, #4
 8007e14:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	e056      	b.n	8007ec8 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	685a      	ldr	r2, [r3, #4]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f022 0207 	bic.w	r2, r2, #7
 8007e28:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d005      	beq.n	8007e3e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8007e32:	4b27      	ldr	r3, [pc, #156]	@ (8007ed0 <HAL_RTC_Init+0x114>)
 8007e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e36:	4a26      	ldr	r2, [pc, #152]	@ (8007ed0 <HAL_RTC_Init+0x114>)
 8007e38:	f023 0301 	bic.w	r3, r3, #1
 8007e3c:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8007e3e:	4b24      	ldr	r3, [pc, #144]	@ (8007ed0 <HAL_RTC_Init+0x114>)
 8007e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e42:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	4921      	ldr	r1, [pc, #132]	@ (8007ed0 <HAL_RTC_Init+0x114>)
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e58:	d003      	beq.n	8007e62 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	60fb      	str	r3, [r7, #12]
 8007e60:	e00e      	b.n	8007e80 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8007e62:	2001      	movs	r0, #1
 8007e64:	f7ff fed2 	bl	8007c0c <HAL_RCCEx_GetPeriphCLKFreq>
 8007e68:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d104      	bne.n	8007e7a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2204      	movs	r2, #4
 8007e74:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	e026      	b.n	8007ec8 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	0c1a      	lsrs	r2, r3, #16
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f002 020f 	and.w	r2, r2, #15
 8007e8c:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	b292      	uxth	r2, r2
 8007e96:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8007e98:	6878      	ldr	r0, [r7, #4]
 8007e9a:	f000 fb81 	bl	80085a0 <RTC_ExitInitMode>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d004      	beq.n	8007eae <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2204      	movs	r2, #4
 8007ea8:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e00c      	b.n	8007ec8 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8007ec6:	2300      	movs	r3, #0
  }
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3710      	adds	r7, #16
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	40006c00 	.word	0x40006c00

08007ed4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007ed4:	b590      	push	{r4, r7, lr}
 8007ed6:	b087      	sub	sp, #28
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	617b      	str	r3, [r7, #20]
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d002      	beq.n	8007ef4 <HAL_RTC_SetTime+0x20>
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d101      	bne.n	8007ef8 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	e080      	b.n	8007ffa <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	7c1b      	ldrb	r3, [r3, #16]
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d101      	bne.n	8007f04 <HAL_RTC_SetTime+0x30>
 8007f00:	2302      	movs	r3, #2
 8007f02:	e07a      	b.n	8007ffa <HAL_RTC_SetTime+0x126>
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2201      	movs	r2, #1
 8007f08:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2202      	movs	r2, #2
 8007f0e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d113      	bne.n	8007f3e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8007f20:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	785b      	ldrb	r3, [r3, #1]
 8007f28:	4619      	mov	r1, r3
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	011b      	lsls	r3, r3, #4
 8007f2e:	1a5b      	subs	r3, r3, r1
 8007f30:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007f32:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8007f34:	68ba      	ldr	r2, [r7, #8]
 8007f36:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007f38:	4413      	add	r3, r2
 8007f3a:	617b      	str	r3, [r7, #20]
 8007f3c:	e01e      	b.n	8007f7c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	4618      	mov	r0, r3
 8007f44:	f000 fb71 	bl	800862a <RTC_Bcd2ToByte>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8007f50:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	785b      	ldrb	r3, [r3, #1]
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f000 fb66 	bl	800862a <RTC_Bcd2ToByte>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	461a      	mov	r2, r3
 8007f62:	4613      	mov	r3, r2
 8007f64:	011b      	lsls	r3, r3, #4
 8007f66:	1a9b      	subs	r3, r3, r2
 8007f68:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8007f6a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	789b      	ldrb	r3, [r3, #2]
 8007f70:	4618      	mov	r0, r3
 8007f72:	f000 fb5a 	bl	800862a <RTC_Bcd2ToByte>
 8007f76:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8007f78:	4423      	add	r3, r4
 8007f7a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8007f7c:	6979      	ldr	r1, [r7, #20]
 8007f7e:	68f8      	ldr	r0, [r7, #12]
 8007f80:	f000 fa7f 	bl	8008482 <RTC_WriteTimeCounter>
 8007f84:	4603      	mov	r3, r0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d007      	beq.n	8007f9a <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2204      	movs	r2, #4
 8007f8e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	2200      	movs	r2, #0
 8007f94:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	e02f      	b.n	8007ffa <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	685a      	ldr	r2, [r3, #4]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f022 0205 	bic.w	r2, r2, #5
 8007fa8:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8007faa:	68f8      	ldr	r0, [r7, #12]
 8007fac:	f000 fa90 	bl	80084d0 <RTC_ReadAlarmCounter>
 8007fb0:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fb8:	d018      	beq.n	8007fec <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8007fba:	693a      	ldr	r2, [r7, #16]
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d214      	bcs.n	8007fec <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8007fc8:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8007fcc:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8007fce:	6939      	ldr	r1, [r7, #16]
 8007fd0:	68f8      	ldr	r0, [r7, #12]
 8007fd2:	f000 fa96 	bl	8008502 <RTC_WriteAlarmCounter>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d007      	beq.n	8007fec <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2204      	movs	r2, #4
 8007fe0:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e006      	b.n	8007ffa <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8007ff8:	2300      	movs	r3, #0
  }
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	371c      	adds	r7, #28
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd90      	pop	{r4, r7, pc}
	...

08008004 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b088      	sub	sp, #32
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8008010:	2300      	movs	r3, #0
 8008012:	61bb      	str	r3, [r7, #24]
 8008014:	2300      	movs	r3, #0
 8008016:	61fb      	str	r3, [r7, #28]
 8008018:	2300      	movs	r3, #0
 800801a:	617b      	str	r3, [r7, #20]
 800801c:	2300      	movs	r3, #0
 800801e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d002      	beq.n	800802c <HAL_RTC_GetTime+0x28>
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d101      	bne.n	8008030 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	e0b5      	b.n	800819c <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	f003 0304 	and.w	r3, r3, #4
 800803a:	2b00      	cmp	r3, #0
 800803c:	d001      	beq.n	8008042 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	e0ac      	b.n	800819c <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f000 f9ed 	bl	8008422 <RTC_ReadTimeCounter>
 8008048:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	4a55      	ldr	r2, [pc, #340]	@ (80081a4 <HAL_RTC_GetTime+0x1a0>)
 800804e:	fba2 2303 	umull	r2, r3, r2, r3
 8008052:	0adb      	lsrs	r3, r3, #11
 8008054:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8008056:	69ba      	ldr	r2, [r7, #24]
 8008058:	4b52      	ldr	r3, [pc, #328]	@ (80081a4 <HAL_RTC_GetTime+0x1a0>)
 800805a:	fba3 1302 	umull	r1, r3, r3, r2
 800805e:	0adb      	lsrs	r3, r3, #11
 8008060:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8008064:	fb01 f303 	mul.w	r3, r1, r3
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	4a4f      	ldr	r2, [pc, #316]	@ (80081a8 <HAL_RTC_GetTime+0x1a4>)
 800806c:	fba2 2303 	umull	r2, r3, r2, r3
 8008070:	095b      	lsrs	r3, r3, #5
 8008072:	b2da      	uxtb	r2, r3
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8008078:	69bb      	ldr	r3, [r7, #24]
 800807a:	4a4a      	ldr	r2, [pc, #296]	@ (80081a4 <HAL_RTC_GetTime+0x1a0>)
 800807c:	fba2 1203 	umull	r1, r2, r2, r3
 8008080:	0ad2      	lsrs	r2, r2, #11
 8008082:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8008086:	fb01 f202 	mul.w	r2, r1, r2
 800808a:	1a9a      	subs	r2, r3, r2
 800808c:	4b46      	ldr	r3, [pc, #280]	@ (80081a8 <HAL_RTC_GetTime+0x1a4>)
 800808e:	fba3 1302 	umull	r1, r3, r3, r2
 8008092:	0959      	lsrs	r1, r3, #5
 8008094:	460b      	mov	r3, r1
 8008096:	011b      	lsls	r3, r3, #4
 8008098:	1a5b      	subs	r3, r3, r1
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	1ad1      	subs	r1, r2, r3
 800809e:	b2ca      	uxtb	r2, r1
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	2b17      	cmp	r3, #23
 80080a8:	d955      	bls.n	8008156 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	4a3f      	ldr	r2, [pc, #252]	@ (80081ac <HAL_RTC_GetTime+0x1a8>)
 80080ae:	fba2 2303 	umull	r2, r3, r2, r3
 80080b2:	091b      	lsrs	r3, r3, #4
 80080b4:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80080b6:	6939      	ldr	r1, [r7, #16]
 80080b8:	4b3c      	ldr	r3, [pc, #240]	@ (80081ac <HAL_RTC_GetTime+0x1a8>)
 80080ba:	fba3 2301 	umull	r2, r3, r3, r1
 80080be:	091a      	lsrs	r2, r3, #4
 80080c0:	4613      	mov	r3, r2
 80080c2:	005b      	lsls	r3, r3, #1
 80080c4:	4413      	add	r3, r2
 80080c6:	00db      	lsls	r3, r3, #3
 80080c8:	1aca      	subs	r2, r1, r3
 80080ca:	b2d2      	uxtb	r2, r2
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f000 f9fd 	bl	80084d0 <RTC_ReadAlarmCounter>
 80080d6:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80080d8:	69fb      	ldr	r3, [r7, #28]
 80080da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080de:	d008      	beq.n	80080f2 <HAL_RTC_GetTime+0xee>
 80080e0:	69fa      	ldr	r2, [r7, #28]
 80080e2:	69bb      	ldr	r3, [r7, #24]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d904      	bls.n	80080f2 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80080e8:	69fa      	ldr	r2, [r7, #28]
 80080ea:	69bb      	ldr	r3, [r7, #24]
 80080ec:	1ad3      	subs	r3, r2, r3
 80080ee:	61fb      	str	r3, [r7, #28]
 80080f0:	e002      	b.n	80080f8 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80080f2:	f04f 33ff 	mov.w	r3, #4294967295
 80080f6:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	4a2d      	ldr	r2, [pc, #180]	@ (80081b0 <HAL_RTC_GetTime+0x1ac>)
 80080fc:	fb02 f303 	mul.w	r3, r2, r3
 8008100:	69ba      	ldr	r2, [r7, #24]
 8008102:	1ad3      	subs	r3, r2, r3
 8008104:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8008106:	69b9      	ldr	r1, [r7, #24]
 8008108:	68f8      	ldr	r0, [r7, #12]
 800810a:	f000 f9ba 	bl	8008482 <RTC_WriteTimeCounter>
 800810e:	4603      	mov	r3, r0
 8008110:	2b00      	cmp	r3, #0
 8008112:	d001      	beq.n	8008118 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	e041      	b.n	800819c <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800811e:	d00c      	beq.n	800813a <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8008120:	69fa      	ldr	r2, [r7, #28]
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	4413      	add	r3, r2
 8008126:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8008128:	69f9      	ldr	r1, [r7, #28]
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	f000 f9e9 	bl	8008502 <RTC_WriteAlarmCounter>
 8008130:	4603      	mov	r3, r0
 8008132:	2b00      	cmp	r3, #0
 8008134:	d00a      	beq.n	800814c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8008136:	2301      	movs	r3, #1
 8008138:	e030      	b.n	800819c <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800813a:	69f9      	ldr	r1, [r7, #28]
 800813c:	68f8      	ldr	r0, [r7, #12]
 800813e:	f000 f9e0 	bl	8008502 <RTC_WriteAlarmCounter>
 8008142:	4603      	mov	r3, r0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d001      	beq.n	800814c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	e027      	b.n	800819c <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 800814c:	6979      	ldr	r1, [r7, #20]
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f000 fa88 	bl	8008664 <RTC_DateUpdate>
 8008154:	e003      	b.n	800815e <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	b2da      	uxtb	r2, r3
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d01a      	beq.n	800819a <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	4618      	mov	r0, r3
 800816a:	f000 fa41 	bl	80085f0 <RTC_ByteToBcd2>
 800816e:	4603      	mov	r3, r0
 8008170:	461a      	mov	r2, r3
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	785b      	ldrb	r3, [r3, #1]
 800817a:	4618      	mov	r0, r3
 800817c:	f000 fa38 	bl	80085f0 <RTC_ByteToBcd2>
 8008180:	4603      	mov	r3, r0
 8008182:	461a      	mov	r2, r3
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	789b      	ldrb	r3, [r3, #2]
 800818c:	4618      	mov	r0, r3
 800818e:	f000 fa2f 	bl	80085f0 <RTC_ByteToBcd2>
 8008192:	4603      	mov	r3, r0
 8008194:	461a      	mov	r2, r3
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800819a:	2300      	movs	r3, #0
}
 800819c:	4618      	mov	r0, r3
 800819e:	3720      	adds	r7, #32
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	91a2b3c5 	.word	0x91a2b3c5
 80081a8:	88888889 	.word	0x88888889
 80081ac:	aaaaaaab 	.word	0xaaaaaaab
 80081b0:	00015180 	.word	0x00015180

080081b4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b088      	sub	sp, #32
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	60b9      	str	r1, [r7, #8]
 80081be:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80081c0:	2300      	movs	r3, #0
 80081c2:	61fb      	str	r3, [r7, #28]
 80081c4:	2300      	movs	r3, #0
 80081c6:	61bb      	str	r3, [r7, #24]
 80081c8:	2300      	movs	r3, #0
 80081ca:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d002      	beq.n	80081d8 <HAL_RTC_SetDate+0x24>
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d101      	bne.n	80081dc <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	e097      	b.n	800830c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	7c1b      	ldrb	r3, [r3, #16]
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d101      	bne.n	80081e8 <HAL_RTC_SetDate+0x34>
 80081e4:	2302      	movs	r3, #2
 80081e6:	e091      	b.n	800830c <HAL_RTC_SetDate+0x158>
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2201      	movs	r2, #1
 80081ec:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2202      	movs	r2, #2
 80081f2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d10c      	bne.n	8008214 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	78da      	ldrb	r2, [r3, #3]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	785a      	ldrb	r2, [r3, #1]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	789a      	ldrb	r2, [r3, #2]
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	739a      	strb	r2, [r3, #14]
 8008212:	e01a      	b.n	800824a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	78db      	ldrb	r3, [r3, #3]
 8008218:	4618      	mov	r0, r3
 800821a:	f000 fa06 	bl	800862a <RTC_Bcd2ToByte>
 800821e:	4603      	mov	r3, r0
 8008220:	461a      	mov	r2, r3
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	785b      	ldrb	r3, [r3, #1]
 800822a:	4618      	mov	r0, r3
 800822c:	f000 f9fd 	bl	800862a <RTC_Bcd2ToByte>
 8008230:	4603      	mov	r3, r0
 8008232:	461a      	mov	r2, r3
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	789b      	ldrb	r3, [r3, #2]
 800823c:	4618      	mov	r0, r3
 800823e:	f000 f9f4 	bl	800862a <RTC_Bcd2ToByte>
 8008242:	4603      	mov	r3, r0
 8008244:	461a      	mov	r2, r3
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	7bdb      	ldrb	r3, [r3, #15]
 800824e:	4618      	mov	r0, r3
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	7b59      	ldrb	r1, [r3, #13]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	7b9b      	ldrb	r3, [r3, #14]
 8008258:	461a      	mov	r2, r3
 800825a:	f000 fadf 	bl	800881c <RTC_WeekDayNum>
 800825e:	4603      	mov	r3, r0
 8008260:	461a      	mov	r2, r3
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	7b1a      	ldrb	r2, [r3, #12]
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800826e:	68f8      	ldr	r0, [r7, #12]
 8008270:	f000 f8d7 	bl	8008422 <RTC_ReadTimeCounter>
 8008274:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	4a26      	ldr	r2, [pc, #152]	@ (8008314 <HAL_RTC_SetDate+0x160>)
 800827a:	fba2 2303 	umull	r2, r3, r2, r3
 800827e:	0adb      	lsrs	r3, r3, #11
 8008280:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	2b18      	cmp	r3, #24
 8008286:	d93a      	bls.n	80082fe <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	4a23      	ldr	r2, [pc, #140]	@ (8008318 <HAL_RTC_SetDate+0x164>)
 800828c:	fba2 2303 	umull	r2, r3, r2, r3
 8008290:	091b      	lsrs	r3, r3, #4
 8008292:	4a22      	ldr	r2, [pc, #136]	@ (800831c <HAL_RTC_SetDate+0x168>)
 8008294:	fb02 f303 	mul.w	r3, r2, r3
 8008298:	69fa      	ldr	r2, [r7, #28]
 800829a:	1ad3      	subs	r3, r2, r3
 800829c:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800829e:	69f9      	ldr	r1, [r7, #28]
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	f000 f8ee 	bl	8008482 <RTC_WriteTimeCounter>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d007      	beq.n	80082bc <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2204      	movs	r2, #4
 80082b0:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2200      	movs	r2, #0
 80082b6:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	e027      	b.n	800830c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80082bc:	68f8      	ldr	r0, [r7, #12]
 80082be:	f000 f907 	bl	80084d0 <RTC_ReadAlarmCounter>
 80082c2:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80082c4:	69bb      	ldr	r3, [r7, #24]
 80082c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ca:	d018      	beq.n	80082fe <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80082cc:	69ba      	ldr	r2, [r7, #24]
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d214      	bcs.n	80082fe <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80082d4:	69bb      	ldr	r3, [r7, #24]
 80082d6:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80082da:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80082de:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80082e0:	69b9      	ldr	r1, [r7, #24]
 80082e2:	68f8      	ldr	r0, [r7, #12]
 80082e4:	f000 f90d 	bl	8008502 <RTC_WriteAlarmCounter>
 80082e8:	4603      	mov	r3, r0
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d007      	beq.n	80082fe <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2204      	movs	r2, #4
 80082f2:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2200      	movs	r2, #0
 80082f8:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	e006      	b.n	800830c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2201      	movs	r2, #1
 8008302:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2200      	movs	r2, #0
 8008308:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800830a:	2300      	movs	r3, #0
}
 800830c:	4618      	mov	r0, r3
 800830e:	3720      	adds	r7, #32
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}
 8008314:	91a2b3c5 	.word	0x91a2b3c5
 8008318:	aaaaaaab 	.word	0xaaaaaaab
 800831c:	00015180 	.word	0x00015180

08008320 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b086      	sub	sp, #24
 8008324:	af00      	add	r7, sp, #0
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 800832c:	f107 0314 	add.w	r3, r7, #20
 8008330:	2100      	movs	r1, #0
 8008332:	460a      	mov	r2, r1
 8008334:	801a      	strh	r2, [r3, #0]
 8008336:	460a      	mov	r2, r1
 8008338:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d002      	beq.n	8008346 <HAL_RTC_GetDate+0x26>
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d101      	bne.n	800834a <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	e03a      	b.n	80083c0 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800834a:	f107 0314 	add.w	r3, r7, #20
 800834e:	2200      	movs	r2, #0
 8008350:	4619      	mov	r1, r3
 8008352:	68f8      	ldr	r0, [r7, #12]
 8008354:	f7ff fe56 	bl	8008004 <HAL_RTC_GetTime>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d001      	beq.n	8008362 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	e02e      	b.n	80083c0 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	7b1a      	ldrb	r2, [r3, #12]
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	7bda      	ldrb	r2, [r3, #15]
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	7b5a      	ldrb	r2, [r3, #13]
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	7b9a      	ldrb	r2, [r3, #14]
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d01a      	beq.n	80083be <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	78db      	ldrb	r3, [r3, #3]
 800838c:	4618      	mov	r0, r3
 800838e:	f000 f92f 	bl	80085f0 <RTC_ByteToBcd2>
 8008392:	4603      	mov	r3, r0
 8008394:	461a      	mov	r2, r3
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	785b      	ldrb	r3, [r3, #1]
 800839e:	4618      	mov	r0, r3
 80083a0:	f000 f926 	bl	80085f0 <RTC_ByteToBcd2>
 80083a4:	4603      	mov	r3, r0
 80083a6:	461a      	mov	r2, r3
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	789b      	ldrb	r3, [r3, #2]
 80083b0:	4618      	mov	r0, r3
 80083b2:	f000 f91d 	bl	80085f0 <RTC_ByteToBcd2>
 80083b6:	4603      	mov	r3, r0
 80083b8:	461a      	mov	r2, r3
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80083be:	2300      	movs	r3, #0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3718      	adds	r7, #24
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80083d0:	2300      	movs	r3, #0
 80083d2:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d101      	bne.n	80083de <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	e01d      	b.n	800841a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	685a      	ldr	r2, [r3, #4]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f022 0208 	bic.w	r2, r2, #8
 80083ec:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80083ee:	f7fc f91f 	bl	8004630 <HAL_GetTick>
 80083f2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80083f4:	e009      	b.n	800840a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80083f6:	f7fc f91b 	bl	8004630 <HAL_GetTick>
 80083fa:	4602      	mov	r2, r0
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	1ad3      	subs	r3, r2, r3
 8008400:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008404:	d901      	bls.n	800840a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8008406:	2303      	movs	r3, #3
 8008408:	e007      	b.n	800841a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	f003 0308 	and.w	r3, r3, #8
 8008414:	2b00      	cmp	r3, #0
 8008416:	d0ee      	beq.n	80083f6 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8008422:	b480      	push	{r7}
 8008424:	b087      	sub	sp, #28
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800842a:	2300      	movs	r3, #0
 800842c:	827b      	strh	r3, [r7, #18]
 800842e:	2300      	movs	r3, #0
 8008430:	823b      	strh	r3, [r7, #16]
 8008432:	2300      	movs	r3, #0
 8008434:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8008436:	2300      	movs	r3, #0
 8008438:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	699b      	ldr	r3, [r3, #24]
 8008440:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	69db      	ldr	r3, [r3, #28]
 8008448:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	699b      	ldr	r3, [r3, #24]
 8008450:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8008452:	8a7a      	ldrh	r2, [r7, #18]
 8008454:	8a3b      	ldrh	r3, [r7, #16]
 8008456:	429a      	cmp	r2, r3
 8008458:	d008      	beq.n	800846c <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800845a:	8a3b      	ldrh	r3, [r7, #16]
 800845c:	041a      	lsls	r2, r3, #16
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	69db      	ldr	r3, [r3, #28]
 8008464:	b29b      	uxth	r3, r3
 8008466:	4313      	orrs	r3, r2
 8008468:	617b      	str	r3, [r7, #20]
 800846a:	e004      	b.n	8008476 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800846c:	8a7b      	ldrh	r3, [r7, #18]
 800846e:	041a      	lsls	r2, r3, #16
 8008470:	89fb      	ldrh	r3, [r7, #14]
 8008472:	4313      	orrs	r3, r2
 8008474:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8008476:	697b      	ldr	r3, [r7, #20]
}
 8008478:	4618      	mov	r0, r3
 800847a:	371c      	adds	r7, #28
 800847c:	46bd      	mov	sp, r7
 800847e:	bc80      	pop	{r7}
 8008480:	4770      	bx	lr

08008482 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8008482:	b580      	push	{r7, lr}
 8008484:	b084      	sub	sp, #16
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
 800848a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800848c:	2300      	movs	r3, #0
 800848e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 f85d 	bl	8008550 <RTC_EnterInitMode>
 8008496:	4603      	mov	r3, r0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d002      	beq.n	80084a2 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 800849c:	2301      	movs	r3, #1
 800849e:	73fb      	strb	r3, [r7, #15]
 80084a0:	e011      	b.n	80084c6 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	683a      	ldr	r2, [r7, #0]
 80084a8:	0c12      	lsrs	r2, r2, #16
 80084aa:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	683a      	ldr	r2, [r7, #0]
 80084b2:	b292      	uxth	r2, r2
 80084b4:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f000 f872 	bl	80085a0 <RTC_ExitInitMode>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d001      	beq.n	80084c6 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80084c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3710      	adds	r7, #16
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b085      	sub	sp, #20
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80084d8:	2300      	movs	r3, #0
 80084da:	81fb      	strh	r3, [r7, #14]
 80084dc:	2300      	movs	r3, #0
 80084de:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	6a1b      	ldr	r3, [r3, #32]
 80084e6:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ee:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80084f0:	89fb      	ldrh	r3, [r7, #14]
 80084f2:	041a      	lsls	r2, r3, #16
 80084f4:	89bb      	ldrh	r3, [r7, #12]
 80084f6:	4313      	orrs	r3, r2
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3714      	adds	r7, #20
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bc80      	pop	{r7}
 8008500:	4770      	bx	lr

08008502 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8008502:	b580      	push	{r7, lr}
 8008504:	b084      	sub	sp, #16
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
 800850a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800850c:	2300      	movs	r3, #0
 800850e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 f81d 	bl	8008550 <RTC_EnterInitMode>
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	d002      	beq.n	8008522 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800851c:	2301      	movs	r3, #1
 800851e:	73fb      	strb	r3, [r7, #15]
 8008520:	e011      	b.n	8008546 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	683a      	ldr	r2, [r7, #0]
 8008528:	0c12      	lsrs	r2, r2, #16
 800852a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	683a      	ldr	r2, [r7, #0]
 8008532:	b292      	uxth	r2, r2
 8008534:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 f832 	bl	80085a0 <RTC_ExitInitMode>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d001      	beq.n	8008546 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008546:	7bfb      	ldrb	r3, [r7, #15]
}
 8008548:	4618      	mov	r0, r3
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008558:	2300      	movs	r3, #0
 800855a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800855c:	f7fc f868 	bl	8004630 <HAL_GetTick>
 8008560:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8008562:	e009      	b.n	8008578 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8008564:	f7fc f864 	bl	8004630 <HAL_GetTick>
 8008568:	4602      	mov	r2, r0
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	1ad3      	subs	r3, r2, r3
 800856e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008572:	d901      	bls.n	8008578 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8008574:	2303      	movs	r3, #3
 8008576:	e00f      	b.n	8008598 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	f003 0320 	and.w	r3, r3, #32
 8008582:	2b00      	cmp	r3, #0
 8008584:	d0ee      	beq.n	8008564 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	685a      	ldr	r2, [r3, #4]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f042 0210 	orr.w	r2, r2, #16
 8008594:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8008596:	2300      	movs	r3, #0
}
 8008598:	4618      	mov	r0, r3
 800859a:	3710      	adds	r7, #16
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80085a8:	2300      	movs	r3, #0
 80085aa:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	685a      	ldr	r2, [r3, #4]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f022 0210 	bic.w	r2, r2, #16
 80085ba:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80085bc:	f7fc f838 	bl	8004630 <HAL_GetTick>
 80085c0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80085c2:	e009      	b.n	80085d8 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80085c4:	f7fc f834 	bl	8004630 <HAL_GetTick>
 80085c8:	4602      	mov	r2, r0
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	1ad3      	subs	r3, r2, r3
 80085ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80085d2:	d901      	bls.n	80085d8 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80085d4:	2303      	movs	r3, #3
 80085d6:	e007      	b.n	80085e8 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	f003 0320 	and.w	r3, r3, #32
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d0ee      	beq.n	80085c4 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80085e6:	2300      	movs	r3, #0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3710      	adds	r7, #16
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b085      	sub	sp, #20
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	4603      	mov	r3, r0
 80085f8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80085fa:	2300      	movs	r3, #0
 80085fc:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80085fe:	e005      	b.n	800860c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	3301      	adds	r3, #1
 8008604:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8008606:	79fb      	ldrb	r3, [r7, #7]
 8008608:	3b0a      	subs	r3, #10
 800860a:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 800860c:	79fb      	ldrb	r3, [r7, #7]
 800860e:	2b09      	cmp	r3, #9
 8008610:	d8f6      	bhi.n	8008600 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	b2db      	uxtb	r3, r3
 8008616:	011b      	lsls	r3, r3, #4
 8008618:	b2da      	uxtb	r2, r3
 800861a:	79fb      	ldrb	r3, [r7, #7]
 800861c:	4313      	orrs	r3, r2
 800861e:	b2db      	uxtb	r3, r3
}
 8008620:	4618      	mov	r0, r3
 8008622:	3714      	adds	r7, #20
 8008624:	46bd      	mov	sp, r7
 8008626:	bc80      	pop	{r7}
 8008628:	4770      	bx	lr

0800862a <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800862a:	b480      	push	{r7}
 800862c:	b085      	sub	sp, #20
 800862e:	af00      	add	r7, sp, #0
 8008630:	4603      	mov	r3, r0
 8008632:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8008634:	2300      	movs	r3, #0
 8008636:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8008638:	79fb      	ldrb	r3, [r7, #7]
 800863a:	091b      	lsrs	r3, r3, #4
 800863c:	b2db      	uxtb	r3, r3
 800863e:	461a      	mov	r2, r3
 8008640:	4613      	mov	r3, r2
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	4413      	add	r3, r2
 8008646:	005b      	lsls	r3, r3, #1
 8008648:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800864a:	79fb      	ldrb	r3, [r7, #7]
 800864c:	f003 030f 	and.w	r3, r3, #15
 8008650:	b2da      	uxtb	r2, r3
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	b2db      	uxtb	r3, r3
 8008656:	4413      	add	r3, r2
 8008658:	b2db      	uxtb	r3, r3
}
 800865a:	4618      	mov	r0, r3
 800865c:	3714      	adds	r7, #20
 800865e:	46bd      	mov	sp, r7
 8008660:	bc80      	pop	{r7}
 8008662:	4770      	bx	lr

08008664 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b086      	sub	sp, #24
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800866e:	2300      	movs	r3, #0
 8008670:	617b      	str	r3, [r7, #20]
 8008672:	2300      	movs	r3, #0
 8008674:	613b      	str	r3, [r7, #16]
 8008676:	2300      	movs	r3, #0
 8008678:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800867a:	2300      	movs	r3, #0
 800867c:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	7bdb      	ldrb	r3, [r3, #15]
 8008682:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	7b5b      	ldrb	r3, [r3, #13]
 8008688:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	7b9b      	ldrb	r3, [r3, #14]
 800868e:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8008690:	2300      	movs	r3, #0
 8008692:	60bb      	str	r3, [r7, #8]
 8008694:	e06f      	b.n	8008776 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	2b01      	cmp	r3, #1
 800869a:	d011      	beq.n	80086c0 <RTC_DateUpdate+0x5c>
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	2b03      	cmp	r3, #3
 80086a0:	d00e      	beq.n	80086c0 <RTC_DateUpdate+0x5c>
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	2b05      	cmp	r3, #5
 80086a6:	d00b      	beq.n	80086c0 <RTC_DateUpdate+0x5c>
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	2b07      	cmp	r3, #7
 80086ac:	d008      	beq.n	80086c0 <RTC_DateUpdate+0x5c>
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	2b08      	cmp	r3, #8
 80086b2:	d005      	beq.n	80086c0 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	2b0a      	cmp	r3, #10
 80086b8:	d002      	beq.n	80086c0 <RTC_DateUpdate+0x5c>
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	2b0c      	cmp	r3, #12
 80086be:	d117      	bne.n	80086f0 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2b1e      	cmp	r3, #30
 80086c4:	d803      	bhi.n	80086ce <RTC_DateUpdate+0x6a>
      {
        day++;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	3301      	adds	r3, #1
 80086ca:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80086cc:	e050      	b.n	8008770 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	2b0c      	cmp	r3, #12
 80086d2:	d005      	beq.n	80086e0 <RTC_DateUpdate+0x7c>
        {
          month++;
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	3301      	adds	r3, #1
 80086d8:	613b      	str	r3, [r7, #16]
          day = 1U;
 80086da:	2301      	movs	r3, #1
 80086dc:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80086de:	e047      	b.n	8008770 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80086e0:	2301      	movs	r3, #1
 80086e2:	613b      	str	r3, [r7, #16]
          day = 1U;
 80086e4:	2301      	movs	r3, #1
 80086e6:	60fb      	str	r3, [r7, #12]
          year++;
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	3301      	adds	r3, #1
 80086ec:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80086ee:	e03f      	b.n	8008770 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	2b04      	cmp	r3, #4
 80086f4:	d008      	beq.n	8008708 <RTC_DateUpdate+0xa4>
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	2b06      	cmp	r3, #6
 80086fa:	d005      	beq.n	8008708 <RTC_DateUpdate+0xa4>
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	2b09      	cmp	r3, #9
 8008700:	d002      	beq.n	8008708 <RTC_DateUpdate+0xa4>
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	2b0b      	cmp	r3, #11
 8008706:	d10c      	bne.n	8008722 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2b1d      	cmp	r3, #29
 800870c:	d803      	bhi.n	8008716 <RTC_DateUpdate+0xb2>
      {
        day++;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	3301      	adds	r3, #1
 8008712:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8008714:	e02c      	b.n	8008770 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	3301      	adds	r3, #1
 800871a:	613b      	str	r3, [r7, #16]
        day = 1U;
 800871c:	2301      	movs	r3, #1
 800871e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8008720:	e026      	b.n	8008770 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	2b02      	cmp	r3, #2
 8008726:	d123      	bne.n	8008770 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2b1b      	cmp	r3, #27
 800872c:	d803      	bhi.n	8008736 <RTC_DateUpdate+0xd2>
      {
        day++;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	3301      	adds	r3, #1
 8008732:	60fb      	str	r3, [r7, #12]
 8008734:	e01c      	b.n	8008770 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2b1c      	cmp	r3, #28
 800873a:	d111      	bne.n	8008760 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	b29b      	uxth	r3, r3
 8008740:	4618      	mov	r0, r3
 8008742:	f000 f839 	bl	80087b8 <RTC_IsLeapYear>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d003      	beq.n	8008754 <RTC_DateUpdate+0xf0>
        {
          day++;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	3301      	adds	r3, #1
 8008750:	60fb      	str	r3, [r7, #12]
 8008752:	e00d      	b.n	8008770 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	3301      	adds	r3, #1
 8008758:	613b      	str	r3, [r7, #16]
          day = 1U;
 800875a:	2301      	movs	r3, #1
 800875c:	60fb      	str	r3, [r7, #12]
 800875e:	e007      	b.n	8008770 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2b1d      	cmp	r3, #29
 8008764:	d104      	bne.n	8008770 <RTC_DateUpdate+0x10c>
      {
        month++;
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	3301      	adds	r3, #1
 800876a:	613b      	str	r3, [r7, #16]
        day = 1U;
 800876c:	2301      	movs	r3, #1
 800876e:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	3301      	adds	r3, #1
 8008774:	60bb      	str	r3, [r7, #8]
 8008776:	68ba      	ldr	r2, [r7, #8]
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	429a      	cmp	r2, r3
 800877c:	d38b      	bcc.n	8008696 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	b2da      	uxtb	r2, r3
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	b2da      	uxtb	r2, r3
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	b2da      	uxtb	r2, r3
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	b2db      	uxtb	r3, r3
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	b2d2      	uxtb	r2, r2
 800879e:	4619      	mov	r1, r3
 80087a0:	6978      	ldr	r0, [r7, #20]
 80087a2:	f000 f83b 	bl	800881c <RTC_WeekDayNum>
 80087a6:	4603      	mov	r3, r0
 80087a8:	461a      	mov	r2, r3
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	731a      	strb	r2, [r3, #12]
}
 80087ae:	bf00      	nop
 80087b0:	3718      	adds	r7, #24
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
	...

080087b8 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	4603      	mov	r3, r0
 80087c0:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80087c2:	88fb      	ldrh	r3, [r7, #6]
 80087c4:	f003 0303 	and.w	r3, r3, #3
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d001      	beq.n	80087d2 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80087ce:	2300      	movs	r3, #0
 80087d0:	e01d      	b.n	800880e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80087d2:	88fb      	ldrh	r3, [r7, #6]
 80087d4:	4a10      	ldr	r2, [pc, #64]	@ (8008818 <RTC_IsLeapYear+0x60>)
 80087d6:	fba2 1203 	umull	r1, r2, r2, r3
 80087da:	0952      	lsrs	r2, r2, #5
 80087dc:	2164      	movs	r1, #100	@ 0x64
 80087de:	fb01 f202 	mul.w	r2, r1, r2
 80087e2:	1a9b      	subs	r3, r3, r2
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d001      	beq.n	80087ee <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80087ea:	2301      	movs	r3, #1
 80087ec:	e00f      	b.n	800880e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80087ee:	88fb      	ldrh	r3, [r7, #6]
 80087f0:	4a09      	ldr	r2, [pc, #36]	@ (8008818 <RTC_IsLeapYear+0x60>)
 80087f2:	fba2 1203 	umull	r1, r2, r2, r3
 80087f6:	09d2      	lsrs	r2, r2, #7
 80087f8:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 80087fc:	fb01 f202 	mul.w	r2, r1, r2
 8008800:	1a9b      	subs	r3, r3, r2
 8008802:	b29b      	uxth	r3, r3
 8008804:	2b00      	cmp	r3, #0
 8008806:	d101      	bne.n	800880c <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8008808:	2301      	movs	r3, #1
 800880a:	e000      	b.n	800880e <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 800880c:	2300      	movs	r3, #0
  }
}
 800880e:	4618      	mov	r0, r3
 8008810:	370c      	adds	r7, #12
 8008812:	46bd      	mov	sp, r7
 8008814:	bc80      	pop	{r7}
 8008816:	4770      	bx	lr
 8008818:	51eb851f 	.word	0x51eb851f

0800881c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800881c:	b480      	push	{r7}
 800881e:	b085      	sub	sp, #20
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	460b      	mov	r3, r1
 8008826:	70fb      	strb	r3, [r7, #3]
 8008828:	4613      	mov	r3, r2
 800882a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 800882c:	2300      	movs	r3, #0
 800882e:	60bb      	str	r3, [r7, #8]
 8008830:	2300      	movs	r3, #0
 8008832:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800883a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 800883c:	78fb      	ldrb	r3, [r7, #3]
 800883e:	2b02      	cmp	r3, #2
 8008840:	d82d      	bhi.n	800889e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8008842:	78fa      	ldrb	r2, [r7, #3]
 8008844:	4613      	mov	r3, r2
 8008846:	005b      	lsls	r3, r3, #1
 8008848:	4413      	add	r3, r2
 800884a:	00db      	lsls	r3, r3, #3
 800884c:	1a9b      	subs	r3, r3, r2
 800884e:	4a2c      	ldr	r2, [pc, #176]	@ (8008900 <RTC_WeekDayNum+0xe4>)
 8008850:	fba2 2303 	umull	r2, r3, r2, r3
 8008854:	085a      	lsrs	r2, r3, #1
 8008856:	78bb      	ldrb	r3, [r7, #2]
 8008858:	441a      	add	r2, r3
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	441a      	add	r2, r3
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	3b01      	subs	r3, #1
 8008862:	089b      	lsrs	r3, r3, #2
 8008864:	441a      	add	r2, r3
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	3b01      	subs	r3, #1
 800886a:	4926      	ldr	r1, [pc, #152]	@ (8008904 <RTC_WeekDayNum+0xe8>)
 800886c:	fba1 1303 	umull	r1, r3, r1, r3
 8008870:	095b      	lsrs	r3, r3, #5
 8008872:	1ad2      	subs	r2, r2, r3
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	3b01      	subs	r3, #1
 8008878:	4922      	ldr	r1, [pc, #136]	@ (8008904 <RTC_WeekDayNum+0xe8>)
 800887a:	fba1 1303 	umull	r1, r3, r1, r3
 800887e:	09db      	lsrs	r3, r3, #7
 8008880:	4413      	add	r3, r2
 8008882:	1d1a      	adds	r2, r3, #4
 8008884:	4b20      	ldr	r3, [pc, #128]	@ (8008908 <RTC_WeekDayNum+0xec>)
 8008886:	fba3 1302 	umull	r1, r3, r3, r2
 800888a:	1ad1      	subs	r1, r2, r3
 800888c:	0849      	lsrs	r1, r1, #1
 800888e:	440b      	add	r3, r1
 8008890:	0899      	lsrs	r1, r3, #2
 8008892:	460b      	mov	r3, r1
 8008894:	00db      	lsls	r3, r3, #3
 8008896:	1a5b      	subs	r3, r3, r1
 8008898:	1ad3      	subs	r3, r2, r3
 800889a:	60fb      	str	r3, [r7, #12]
 800889c:	e029      	b.n	80088f2 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800889e:	78fa      	ldrb	r2, [r7, #3]
 80088a0:	4613      	mov	r3, r2
 80088a2:	005b      	lsls	r3, r3, #1
 80088a4:	4413      	add	r3, r2
 80088a6:	00db      	lsls	r3, r3, #3
 80088a8:	1a9b      	subs	r3, r3, r2
 80088aa:	4a15      	ldr	r2, [pc, #84]	@ (8008900 <RTC_WeekDayNum+0xe4>)
 80088ac:	fba2 2303 	umull	r2, r3, r2, r3
 80088b0:	085a      	lsrs	r2, r3, #1
 80088b2:	78bb      	ldrb	r3, [r7, #2]
 80088b4:	441a      	add	r2, r3
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	441a      	add	r2, r3
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	089b      	lsrs	r3, r3, #2
 80088be:	441a      	add	r2, r3
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	4910      	ldr	r1, [pc, #64]	@ (8008904 <RTC_WeekDayNum+0xe8>)
 80088c4:	fba1 1303 	umull	r1, r3, r1, r3
 80088c8:	095b      	lsrs	r3, r3, #5
 80088ca:	1ad2      	subs	r2, r2, r3
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	490d      	ldr	r1, [pc, #52]	@ (8008904 <RTC_WeekDayNum+0xe8>)
 80088d0:	fba1 1303 	umull	r1, r3, r1, r3
 80088d4:	09db      	lsrs	r3, r3, #7
 80088d6:	4413      	add	r3, r2
 80088d8:	1c9a      	adds	r2, r3, #2
 80088da:	4b0b      	ldr	r3, [pc, #44]	@ (8008908 <RTC_WeekDayNum+0xec>)
 80088dc:	fba3 1302 	umull	r1, r3, r3, r2
 80088e0:	1ad1      	subs	r1, r2, r3
 80088e2:	0849      	lsrs	r1, r1, #1
 80088e4:	440b      	add	r3, r1
 80088e6:	0899      	lsrs	r1, r3, #2
 80088e8:	460b      	mov	r3, r1
 80088ea:	00db      	lsls	r3, r3, #3
 80088ec:	1a5b      	subs	r3, r3, r1
 80088ee:	1ad3      	subs	r3, r2, r3
 80088f0:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	b2db      	uxtb	r3, r3
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3714      	adds	r7, #20
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bc80      	pop	{r7}
 80088fe:	4770      	bx	lr
 8008900:	38e38e39 	.word	0x38e38e39
 8008904:	51eb851f 	.word	0x51eb851f
 8008908:	24924925 	.word	0x24924925

0800890c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d101      	bne.n	800891e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	e076      	b.n	8008a0c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008922:	2b00      	cmp	r3, #0
 8008924:	d108      	bne.n	8008938 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800892e:	d009      	beq.n	8008944 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	61da      	str	r2, [r3, #28]
 8008936:	e005      	b.n	8008944 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008950:	b2db      	uxtb	r3, r3
 8008952:	2b00      	cmp	r3, #0
 8008954:	d106      	bne.n	8008964 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f7fb fb7e 	bl	8004060 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2202      	movs	r2, #2
 8008968:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800897a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800898c:	431a      	orrs	r2, r3
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008996:	431a      	orrs	r2, r3
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	691b      	ldr	r3, [r3, #16]
 800899c:	f003 0302 	and.w	r3, r3, #2
 80089a0:	431a      	orrs	r2, r3
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	695b      	ldr	r3, [r3, #20]
 80089a6:	f003 0301 	and.w	r3, r3, #1
 80089aa:	431a      	orrs	r2, r3
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	699b      	ldr	r3, [r3, #24]
 80089b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80089b4:	431a      	orrs	r2, r3
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	69db      	ldr	r3, [r3, #28]
 80089ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80089be:	431a      	orrs	r2, r3
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6a1b      	ldr	r3, [r3, #32]
 80089c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089c8:	ea42 0103 	orr.w	r1, r2, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089d0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	430a      	orrs	r2, r1
 80089da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	699b      	ldr	r3, [r3, #24]
 80089e0:	0c1a      	lsrs	r2, r3, #16
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f002 0204 	and.w	r2, r2, #4
 80089ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	69da      	ldr	r2, [r3, #28]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80089fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2201      	movs	r2, #1
 8008a06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008a0a:	2300      	movs	r3, #0
}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3708      	adds	r7, #8
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b088      	sub	sp, #32
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	603b      	str	r3, [r7, #0]
 8008a20:	4613      	mov	r3, r2
 8008a22:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008a24:	2300      	movs	r3, #0
 8008a26:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d101      	bne.n	8008a36 <HAL_SPI_Transmit+0x22>
 8008a32:	2302      	movs	r3, #2
 8008a34:	e12d      	b.n	8008c92 <HAL_SPI_Transmit+0x27e>
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2201      	movs	r2, #1
 8008a3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008a3e:	f7fb fdf7 	bl	8004630 <HAL_GetTick>
 8008a42:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008a44:	88fb      	ldrh	r3, [r7, #6]
 8008a46:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d002      	beq.n	8008a5a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008a54:	2302      	movs	r3, #2
 8008a56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008a58:	e116      	b.n	8008c88 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d002      	beq.n	8008a66 <HAL_SPI_Transmit+0x52>
 8008a60:	88fb      	ldrh	r3, [r7, #6]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d102      	bne.n	8008a6c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008a6a:	e10d      	b.n	8008c88 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2203      	movs	r2, #3
 8008a70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2200      	movs	r2, #0
 8008a78:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	68ba      	ldr	r2, [r7, #8]
 8008a7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	88fa      	ldrh	r2, [r7, #6]
 8008a84:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	88fa      	ldrh	r2, [r7, #6]
 8008a8a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2200      	movs	r2, #0
 8008a96:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ab2:	d10f      	bne.n	8008ad4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008ac2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008ad2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ade:	2b40      	cmp	r3, #64	@ 0x40
 8008ae0:	d007      	beq.n	8008af2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008af0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	68db      	ldr	r3, [r3, #12]
 8008af6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008afa:	d14f      	bne.n	8008b9c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d002      	beq.n	8008b0a <HAL_SPI_Transmit+0xf6>
 8008b04:	8afb      	ldrh	r3, [r7, #22]
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d142      	bne.n	8008b90 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b0e:	881a      	ldrh	r2, [r3, #0]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b1a:	1c9a      	adds	r2, r3, #2
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	3b01      	subs	r3, #1
 8008b28:	b29a      	uxth	r2, r3
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008b2e:	e02f      	b.n	8008b90 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	f003 0302 	and.w	r3, r3, #2
 8008b3a:	2b02      	cmp	r3, #2
 8008b3c:	d112      	bne.n	8008b64 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b42:	881a      	ldrh	r2, [r3, #0]
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b4e:	1c9a      	adds	r2, r3, #2
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	3b01      	subs	r3, #1
 8008b5c:	b29a      	uxth	r2, r3
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008b62:	e015      	b.n	8008b90 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008b64:	f7fb fd64 	bl	8004630 <HAL_GetTick>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	69bb      	ldr	r3, [r7, #24]
 8008b6c:	1ad3      	subs	r3, r2, r3
 8008b6e:	683a      	ldr	r2, [r7, #0]
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d803      	bhi.n	8008b7c <HAL_SPI_Transmit+0x168>
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b7a:	d102      	bne.n	8008b82 <HAL_SPI_Transmit+0x16e>
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d106      	bne.n	8008b90 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8008b82:	2303      	movs	r3, #3
 8008b84:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2201      	movs	r2, #1
 8008b8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8008b8e:	e07b      	b.n	8008c88 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d1ca      	bne.n	8008b30 <HAL_SPI_Transmit+0x11c>
 8008b9a:	e050      	b.n	8008c3e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d002      	beq.n	8008baa <HAL_SPI_Transmit+0x196>
 8008ba4:	8afb      	ldrh	r3, [r7, #22]
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d144      	bne.n	8008c34 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	330c      	adds	r3, #12
 8008bb4:	7812      	ldrb	r2, [r2, #0]
 8008bb6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bbc:	1c5a      	adds	r2, r3, #1
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	3b01      	subs	r3, #1
 8008bca:	b29a      	uxth	r2, r3
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008bd0:	e030      	b.n	8008c34 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	f003 0302 	and.w	r3, r3, #2
 8008bdc:	2b02      	cmp	r3, #2
 8008bde:	d113      	bne.n	8008c08 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	330c      	adds	r3, #12
 8008bea:	7812      	ldrb	r2, [r2, #0]
 8008bec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bf2:	1c5a      	adds	r2, r3, #1
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	b29a      	uxth	r2, r3
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	86da      	strh	r2, [r3, #54]	@ 0x36
 8008c06:	e015      	b.n	8008c34 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c08:	f7fb fd12 	bl	8004630 <HAL_GetTick>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	69bb      	ldr	r3, [r7, #24]
 8008c10:	1ad3      	subs	r3, r2, r3
 8008c12:	683a      	ldr	r2, [r7, #0]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d803      	bhi.n	8008c20 <HAL_SPI_Transmit+0x20c>
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c1e:	d102      	bne.n	8008c26 <HAL_SPI_Transmit+0x212>
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d106      	bne.n	8008c34 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8008c26:	2303      	movs	r3, #3
 8008c28:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8008c32:	e029      	b.n	8008c88 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d1c9      	bne.n	8008bd2 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008c3e:	69ba      	ldr	r2, [r7, #24]
 8008c40:	6839      	ldr	r1, [r7, #0]
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	f000 fa62 	bl	800910c <SPI_EndRxTxTransaction>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d002      	beq.n	8008c54 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2220      	movs	r2, #32
 8008c52:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d10a      	bne.n	8008c72 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	613b      	str	r3, [r7, #16]
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	613b      	str	r3, [r7, #16]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	613b      	str	r3, [r7, #16]
 8008c70:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d002      	beq.n	8008c80 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	77fb      	strb	r3, [r7, #31]
 8008c7e:	e003      	b.n	8008c88 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2201      	movs	r2, #1
 8008c84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008c90:	7ffb      	ldrb	r3, [r7, #31]
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3720      	adds	r7, #32
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b08c      	sub	sp, #48	@ 0x30
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	60f8      	str	r0, [r7, #12]
 8008ca2:	60b9      	str	r1, [r7, #8]
 8008ca4:	607a      	str	r2, [r7, #4]
 8008ca6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008cac:	2300      	movs	r3, #0
 8008cae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d101      	bne.n	8008cc0 <HAL_SPI_TransmitReceive+0x26>
 8008cbc:	2302      	movs	r3, #2
 8008cbe:	e198      	b.n	8008ff2 <HAL_SPI_TransmitReceive+0x358>
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008cc8:	f7fb fcb2 	bl	8004630 <HAL_GetTick>
 8008ccc:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008cd4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008cde:	887b      	ldrh	r3, [r7, #2]
 8008ce0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008ce2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	d00f      	beq.n	8008d0a <HAL_SPI_TransmitReceive+0x70>
 8008cea:	69fb      	ldr	r3, [r7, #28]
 8008cec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008cf0:	d107      	bne.n	8008d02 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d103      	bne.n	8008d02 <HAL_SPI_TransmitReceive+0x68>
 8008cfa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008cfe:	2b04      	cmp	r3, #4
 8008d00:	d003      	beq.n	8008d0a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008d02:	2302      	movs	r3, #2
 8008d04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8008d08:	e16d      	b.n	8008fe6 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d005      	beq.n	8008d1c <HAL_SPI_TransmitReceive+0x82>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d002      	beq.n	8008d1c <HAL_SPI_TransmitReceive+0x82>
 8008d16:	887b      	ldrh	r3, [r7, #2]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d103      	bne.n	8008d24 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8008d22:	e160      	b.n	8008fe6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008d2a:	b2db      	uxtb	r3, r3
 8008d2c:	2b04      	cmp	r3, #4
 8008d2e:	d003      	beq.n	8008d38 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2205      	movs	r2, #5
 8008d34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	887a      	ldrh	r2, [r7, #2]
 8008d48:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	887a      	ldrh	r2, [r7, #2]
 8008d4e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	68ba      	ldr	r2, [r7, #8]
 8008d54:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	887a      	ldrh	r2, [r7, #2]
 8008d5a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	887a      	ldrh	r2, [r7, #2]
 8008d60:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2200      	movs	r2, #0
 8008d66:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d78:	2b40      	cmp	r3, #64	@ 0x40
 8008d7a:	d007      	beq.n	8008d8c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	681a      	ldr	r2, [r3, #0]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d94:	d17c      	bne.n	8008e90 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d002      	beq.n	8008da4 <HAL_SPI_TransmitReceive+0x10a>
 8008d9e:	8b7b      	ldrh	r3, [r7, #26]
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d16a      	bne.n	8008e7a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008da8:	881a      	ldrh	r2, [r3, #0]
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008db4:	1c9a      	adds	r2, r3, #2
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	3b01      	subs	r3, #1
 8008dc2:	b29a      	uxth	r2, r3
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008dc8:	e057      	b.n	8008e7a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	689b      	ldr	r3, [r3, #8]
 8008dd0:	f003 0302 	and.w	r3, r3, #2
 8008dd4:	2b02      	cmp	r3, #2
 8008dd6:	d11b      	bne.n	8008e10 <HAL_SPI_TransmitReceive+0x176>
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d016      	beq.n	8008e10 <HAL_SPI_TransmitReceive+0x176>
 8008de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d113      	bne.n	8008e10 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dec:	881a      	ldrh	r2, [r3, #0]
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008df8:	1c9a      	adds	r2, r3, #2
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	3b01      	subs	r3, #1
 8008e06:	b29a      	uxth	r2, r3
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	f003 0301 	and.w	r3, r3, #1
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d119      	bne.n	8008e52 <HAL_SPI_TransmitReceive+0x1b8>
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d014      	beq.n	8008e52 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	68da      	ldr	r2, [r3, #12]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e32:	b292      	uxth	r2, r2
 8008e34:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e3a:	1c9a      	adds	r2, r3, #2
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	3b01      	subs	r3, #1
 8008e48:	b29a      	uxth	r2, r3
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008e52:	f7fb fbed 	bl	8004630 <HAL_GetTick>
 8008e56:	4602      	mov	r2, r0
 8008e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e5a:	1ad3      	subs	r3, r2, r3
 8008e5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d80b      	bhi.n	8008e7a <HAL_SPI_TransmitReceive+0x1e0>
 8008e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e68:	d007      	beq.n	8008e7a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8008e6a:	2303      	movs	r3, #3
 8008e6c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8008e78:	e0b5      	b.n	8008fe6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d1a2      	bne.n	8008dca <HAL_SPI_TransmitReceive+0x130>
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d19d      	bne.n	8008dca <HAL_SPI_TransmitReceive+0x130>
 8008e8e:	e080      	b.n	8008f92 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d002      	beq.n	8008e9e <HAL_SPI_TransmitReceive+0x204>
 8008e98:	8b7b      	ldrh	r3, [r7, #26]
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d16f      	bne.n	8008f7e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	330c      	adds	r3, #12
 8008ea8:	7812      	ldrb	r2, [r2, #0]
 8008eaa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008eb0:	1c5a      	adds	r2, r3, #1
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	3b01      	subs	r3, #1
 8008ebe:	b29a      	uxth	r2, r3
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ec4:	e05b      	b.n	8008f7e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	f003 0302 	and.w	r3, r3, #2
 8008ed0:	2b02      	cmp	r3, #2
 8008ed2:	d11c      	bne.n	8008f0e <HAL_SPI_TransmitReceive+0x274>
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d017      	beq.n	8008f0e <HAL_SPI_TransmitReceive+0x274>
 8008ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d114      	bne.n	8008f0e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	330c      	adds	r3, #12
 8008eee:	7812      	ldrb	r2, [r2, #0]
 8008ef0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ef6:	1c5a      	adds	r2, r3, #1
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	3b01      	subs	r3, #1
 8008f04:	b29a      	uxth	r2, r3
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	f003 0301 	and.w	r3, r3, #1
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d119      	bne.n	8008f50 <HAL_SPI_TransmitReceive+0x2b6>
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d014      	beq.n	8008f50 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	68da      	ldr	r2, [r3, #12]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f30:	b2d2      	uxtb	r2, r2
 8008f32:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f38:	1c5a      	adds	r2, r3, #1
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	3b01      	subs	r3, #1
 8008f46:	b29a      	uxth	r2, r3
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008f50:	f7fb fb6e 	bl	8004630 <HAL_GetTick>
 8008f54:	4602      	mov	r2, r0
 8008f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f58:	1ad3      	subs	r3, r2, r3
 8008f5a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d803      	bhi.n	8008f68 <HAL_SPI_TransmitReceive+0x2ce>
 8008f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f66:	d102      	bne.n	8008f6e <HAL_SPI_TransmitReceive+0x2d4>
 8008f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d107      	bne.n	8008f7e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8008f6e:	2303      	movs	r3, #3
 8008f70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8008f7c:	e033      	b.n	8008fe6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d19e      	bne.n	8008ec6 <HAL_SPI_TransmitReceive+0x22c>
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d199      	bne.n	8008ec6 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008f92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f94:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f000 f8b8 	bl	800910c <SPI_EndRxTxTransaction>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d006      	beq.n	8008fb0 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2220      	movs	r2, #32
 8008fac:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8008fae:	e01a      	b.n	8008fe6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d10a      	bne.n	8008fce <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008fb8:	2300      	movs	r3, #0
 8008fba:	617b      	str	r3, [r7, #20]
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	617b      	str	r3, [r7, #20]
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	617b      	str	r3, [r7, #20]
 8008fcc:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d003      	beq.n	8008fde <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fdc:	e003      	b.n	8008fe6 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8008fee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3730      	adds	r7, #48	@ 0x30
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
	...

08008ffc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b088      	sub	sp, #32
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	603b      	str	r3, [r7, #0]
 8009008:	4613      	mov	r3, r2
 800900a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800900c:	f7fb fb10 	bl	8004630 <HAL_GetTick>
 8009010:	4602      	mov	r2, r0
 8009012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009014:	1a9b      	subs	r3, r3, r2
 8009016:	683a      	ldr	r2, [r7, #0]
 8009018:	4413      	add	r3, r2
 800901a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800901c:	f7fb fb08 	bl	8004630 <HAL_GetTick>
 8009020:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009022:	4b39      	ldr	r3, [pc, #228]	@ (8009108 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	015b      	lsls	r3, r3, #5
 8009028:	0d1b      	lsrs	r3, r3, #20
 800902a:	69fa      	ldr	r2, [r7, #28]
 800902c:	fb02 f303 	mul.w	r3, r2, r3
 8009030:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009032:	e054      	b.n	80090de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800903a:	d050      	beq.n	80090de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800903c:	f7fb faf8 	bl	8004630 <HAL_GetTick>
 8009040:	4602      	mov	r2, r0
 8009042:	69bb      	ldr	r3, [r7, #24]
 8009044:	1ad3      	subs	r3, r2, r3
 8009046:	69fa      	ldr	r2, [r7, #28]
 8009048:	429a      	cmp	r2, r3
 800904a:	d902      	bls.n	8009052 <SPI_WaitFlagStateUntilTimeout+0x56>
 800904c:	69fb      	ldr	r3, [r7, #28]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d13d      	bne.n	80090ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	685a      	ldr	r2, [r3, #4]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009060:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800906a:	d111      	bne.n	8009090 <SPI_WaitFlagStateUntilTimeout+0x94>
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009074:	d004      	beq.n	8009080 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800907e:	d107      	bne.n	8009090 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800908e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009094:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009098:	d10f      	bne.n	80090ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80090a8:	601a      	str	r2, [r3, #0]
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80090b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2201      	movs	r2, #1
 80090be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	2200      	movs	r2, #0
 80090c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80090ca:	2303      	movs	r3, #3
 80090cc:	e017      	b.n	80090fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d101      	bne.n	80090d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80090d4:	2300      	movs	r3, #0
 80090d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	3b01      	subs	r3, #1
 80090dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	689a      	ldr	r2, [r3, #8]
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	4013      	ands	r3, r2
 80090e8:	68ba      	ldr	r2, [r7, #8]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	bf0c      	ite	eq
 80090ee:	2301      	moveq	r3, #1
 80090f0:	2300      	movne	r3, #0
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	461a      	mov	r2, r3
 80090f6:	79fb      	ldrb	r3, [r7, #7]
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d19b      	bne.n	8009034 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80090fc:	2300      	movs	r3, #0
}
 80090fe:	4618      	mov	r0, r3
 8009100:	3720      	adds	r7, #32
 8009102:	46bd      	mov	sp, r7
 8009104:	bd80      	pop	{r7, pc}
 8009106:	bf00      	nop
 8009108:	200000e0 	.word	0x200000e0

0800910c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b086      	sub	sp, #24
 8009110:	af02      	add	r7, sp, #8
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	9300      	str	r3, [sp, #0]
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	2200      	movs	r2, #0
 8009120:	2180      	movs	r1, #128	@ 0x80
 8009122:	68f8      	ldr	r0, [r7, #12]
 8009124:	f7ff ff6a 	bl	8008ffc <SPI_WaitFlagStateUntilTimeout>
 8009128:	4603      	mov	r3, r0
 800912a:	2b00      	cmp	r3, #0
 800912c:	d007      	beq.n	800913e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009132:	f043 0220 	orr.w	r2, r3, #32
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800913a:	2303      	movs	r3, #3
 800913c:	e000      	b.n	8009140 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800913e:	2300      	movs	r3, #0
}
 8009140:	4618      	mov	r0, r3
 8009142:	3710      	adds	r7, #16
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d101      	bne.n	800915a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009156:	2301      	movs	r3, #1
 8009158:	e041      	b.n	80091de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009160:	b2db      	uxtb	r3, r3
 8009162:	2b00      	cmp	r3, #0
 8009164:	d106      	bne.n	8009174 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 f839 	bl	80091e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2202      	movs	r2, #2
 8009178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	3304      	adds	r3, #4
 8009184:	4619      	mov	r1, r3
 8009186:	4610      	mov	r0, r2
 8009188:	f000 f9c2 	bl	8009510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2201      	movs	r2, #1
 8009190:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2201      	movs	r2, #1
 8009198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2201      	movs	r2, #1
 80091a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2201      	movs	r2, #1
 80091a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2201      	movs	r2, #1
 80091b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2201      	movs	r2, #1
 80091b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2201      	movs	r2, #1
 80091c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2201      	movs	r2, #1
 80091c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2201      	movs	r2, #1
 80091d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2201      	movs	r2, #1
 80091d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80091dc:	2300      	movs	r3, #0
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3708      	adds	r7, #8
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80091e6:	b480      	push	{r7}
 80091e8:	b083      	sub	sp, #12
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80091ee:	bf00      	nop
 80091f0:	370c      	adds	r7, #12
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bc80      	pop	{r7}
 80091f6:	4770      	bx	lr

080091f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b085      	sub	sp, #20
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009206:	b2db      	uxtb	r3, r3
 8009208:	2b01      	cmp	r3, #1
 800920a:	d001      	beq.n	8009210 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800920c:	2301      	movs	r3, #1
 800920e:	e044      	b.n	800929a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2202      	movs	r2, #2
 8009214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	68da      	ldr	r2, [r3, #12]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f042 0201 	orr.w	r2, r2, #1
 8009226:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a1d      	ldr	r2, [pc, #116]	@ (80092a4 <HAL_TIM_Base_Start_IT+0xac>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d018      	beq.n	8009264 <HAL_TIM_Base_Start_IT+0x6c>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a1c      	ldr	r2, [pc, #112]	@ (80092a8 <HAL_TIM_Base_Start_IT+0xb0>)
 8009238:	4293      	cmp	r3, r2
 800923a:	d013      	beq.n	8009264 <HAL_TIM_Base_Start_IT+0x6c>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009244:	d00e      	beq.n	8009264 <HAL_TIM_Base_Start_IT+0x6c>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a18      	ldr	r2, [pc, #96]	@ (80092ac <HAL_TIM_Base_Start_IT+0xb4>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d009      	beq.n	8009264 <HAL_TIM_Base_Start_IT+0x6c>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a16      	ldr	r2, [pc, #88]	@ (80092b0 <HAL_TIM_Base_Start_IT+0xb8>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d004      	beq.n	8009264 <HAL_TIM_Base_Start_IT+0x6c>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a15      	ldr	r2, [pc, #84]	@ (80092b4 <HAL_TIM_Base_Start_IT+0xbc>)
 8009260:	4293      	cmp	r3, r2
 8009262:	d111      	bne.n	8009288 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	f003 0307 	and.w	r3, r3, #7
 800926e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2b06      	cmp	r3, #6
 8009274:	d010      	beq.n	8009298 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f042 0201 	orr.w	r2, r2, #1
 8009284:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009286:	e007      	b.n	8009298 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f042 0201 	orr.w	r2, r2, #1
 8009296:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009298:	2300      	movs	r3, #0
}
 800929a:	4618      	mov	r0, r3
 800929c:	3714      	adds	r7, #20
 800929e:	46bd      	mov	sp, r7
 80092a0:	bc80      	pop	{r7}
 80092a2:	4770      	bx	lr
 80092a4:	40012c00 	.word	0x40012c00
 80092a8:	40013400 	.word	0x40013400
 80092ac:	40000400 	.word	0x40000400
 80092b0:	40000800 	.word	0x40000800
 80092b4:	40000c00 	.word	0x40000c00

080092b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b082      	sub	sp, #8
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	691b      	ldr	r3, [r3, #16]
 80092c6:	f003 0302 	and.w	r3, r3, #2
 80092ca:	2b02      	cmp	r3, #2
 80092cc:	d122      	bne.n	8009314 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	68db      	ldr	r3, [r3, #12]
 80092d4:	f003 0302 	and.w	r3, r3, #2
 80092d8:	2b02      	cmp	r3, #2
 80092da:	d11b      	bne.n	8009314 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f06f 0202 	mvn.w	r2, #2
 80092e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2201      	movs	r2, #1
 80092ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	699b      	ldr	r3, [r3, #24]
 80092f2:	f003 0303 	and.w	r3, r3, #3
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d003      	beq.n	8009302 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 f8ed 	bl	80094da <HAL_TIM_IC_CaptureCallback>
 8009300:	e005      	b.n	800930e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 f8e0 	bl	80094c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f000 f8ef 	bl	80094ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2200      	movs	r2, #0
 8009312:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	691b      	ldr	r3, [r3, #16]
 800931a:	f003 0304 	and.w	r3, r3, #4
 800931e:	2b04      	cmp	r3, #4
 8009320:	d122      	bne.n	8009368 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	68db      	ldr	r3, [r3, #12]
 8009328:	f003 0304 	and.w	r3, r3, #4
 800932c:	2b04      	cmp	r3, #4
 800932e:	d11b      	bne.n	8009368 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f06f 0204 	mvn.w	r2, #4
 8009338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2202      	movs	r2, #2
 800933e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	699b      	ldr	r3, [r3, #24]
 8009346:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800934a:	2b00      	cmp	r3, #0
 800934c:	d003      	beq.n	8009356 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 f8c3 	bl	80094da <HAL_TIM_IC_CaptureCallback>
 8009354:	e005      	b.n	8009362 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 f8b6 	bl	80094c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 f8c5 	bl	80094ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2200      	movs	r2, #0
 8009366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	691b      	ldr	r3, [r3, #16]
 800936e:	f003 0308 	and.w	r3, r3, #8
 8009372:	2b08      	cmp	r3, #8
 8009374:	d122      	bne.n	80093bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	68db      	ldr	r3, [r3, #12]
 800937c:	f003 0308 	and.w	r3, r3, #8
 8009380:	2b08      	cmp	r3, #8
 8009382:	d11b      	bne.n	80093bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f06f 0208 	mvn.w	r2, #8
 800938c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2204      	movs	r2, #4
 8009392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	69db      	ldr	r3, [r3, #28]
 800939a:	f003 0303 	and.w	r3, r3, #3
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d003      	beq.n	80093aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 f899 	bl	80094da <HAL_TIM_IC_CaptureCallback>
 80093a8:	e005      	b.n	80093b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 f88c 	bl	80094c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 f89b 	bl	80094ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2200      	movs	r2, #0
 80093ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	691b      	ldr	r3, [r3, #16]
 80093c2:	f003 0310 	and.w	r3, r3, #16
 80093c6:	2b10      	cmp	r3, #16
 80093c8:	d122      	bne.n	8009410 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	68db      	ldr	r3, [r3, #12]
 80093d0:	f003 0310 	and.w	r3, r3, #16
 80093d4:	2b10      	cmp	r3, #16
 80093d6:	d11b      	bne.n	8009410 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f06f 0210 	mvn.w	r2, #16
 80093e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2208      	movs	r2, #8
 80093e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	69db      	ldr	r3, [r3, #28]
 80093ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d003      	beq.n	80093fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 f86f 	bl	80094da <HAL_TIM_IC_CaptureCallback>
 80093fc:	e005      	b.n	800940a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 f862 	bl	80094c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 f871 	bl	80094ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	691b      	ldr	r3, [r3, #16]
 8009416:	f003 0301 	and.w	r3, r3, #1
 800941a:	2b01      	cmp	r3, #1
 800941c:	d10e      	bne.n	800943c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	68db      	ldr	r3, [r3, #12]
 8009424:	f003 0301 	and.w	r3, r3, #1
 8009428:	2b01      	cmp	r3, #1
 800942a:	d107      	bne.n	800943c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f06f 0201 	mvn.w	r2, #1
 8009434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f7f9 fe34 	bl	80030a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	691b      	ldr	r3, [r3, #16]
 8009442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009446:	2b80      	cmp	r3, #128	@ 0x80
 8009448:	d10e      	bne.n	8009468 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009454:	2b80      	cmp	r3, #128	@ 0x80
 8009456:	d107      	bne.n	8009468 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 f8d7 	bl	8009616 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	691b      	ldr	r3, [r3, #16]
 800946e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009472:	2b40      	cmp	r3, #64	@ 0x40
 8009474:	d10e      	bne.n	8009494 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	68db      	ldr	r3, [r3, #12]
 800947c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009480:	2b40      	cmp	r3, #64	@ 0x40
 8009482:	d107      	bne.n	8009494 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800948c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 f835 	bl	80094fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	691b      	ldr	r3, [r3, #16]
 800949a:	f003 0320 	and.w	r3, r3, #32
 800949e:	2b20      	cmp	r3, #32
 80094a0:	d10e      	bne.n	80094c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	68db      	ldr	r3, [r3, #12]
 80094a8:	f003 0320 	and.w	r3, r3, #32
 80094ac:	2b20      	cmp	r3, #32
 80094ae:	d107      	bne.n	80094c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f06f 0220 	mvn.w	r2, #32
 80094b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 f8a2 	bl	8009604 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80094c0:	bf00      	nop
 80094c2:	3708      	adds	r7, #8
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b083      	sub	sp, #12
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80094d0:	bf00      	nop
 80094d2:	370c      	adds	r7, #12
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bc80      	pop	{r7}
 80094d8:	4770      	bx	lr

080094da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80094da:	b480      	push	{r7}
 80094dc:	b083      	sub	sp, #12
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80094e2:	bf00      	nop
 80094e4:	370c      	adds	r7, #12
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bc80      	pop	{r7}
 80094ea:	4770      	bx	lr

080094ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80094f4:	bf00      	nop
 80094f6:	370c      	adds	r7, #12
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bc80      	pop	{r7}
 80094fc:	4770      	bx	lr

080094fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80094fe:	b480      	push	{r7}
 8009500:	b083      	sub	sp, #12
 8009502:	af00      	add	r7, sp, #0
 8009504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009506:	bf00      	nop
 8009508:	370c      	adds	r7, #12
 800950a:	46bd      	mov	sp, r7
 800950c:	bc80      	pop	{r7}
 800950e:	4770      	bx	lr

08009510 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009510:	b480      	push	{r7}
 8009512:	b085      	sub	sp, #20
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	4a33      	ldr	r2, [pc, #204]	@ (80095f0 <TIM_Base_SetConfig+0xe0>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d013      	beq.n	8009550 <TIM_Base_SetConfig+0x40>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	4a32      	ldr	r2, [pc, #200]	@ (80095f4 <TIM_Base_SetConfig+0xe4>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d00f      	beq.n	8009550 <TIM_Base_SetConfig+0x40>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009536:	d00b      	beq.n	8009550 <TIM_Base_SetConfig+0x40>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4a2f      	ldr	r2, [pc, #188]	@ (80095f8 <TIM_Base_SetConfig+0xe8>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d007      	beq.n	8009550 <TIM_Base_SetConfig+0x40>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	4a2e      	ldr	r2, [pc, #184]	@ (80095fc <TIM_Base_SetConfig+0xec>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d003      	beq.n	8009550 <TIM_Base_SetConfig+0x40>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	4a2d      	ldr	r2, [pc, #180]	@ (8009600 <TIM_Base_SetConfig+0xf0>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d108      	bne.n	8009562 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009556:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	68fa      	ldr	r2, [r7, #12]
 800955e:	4313      	orrs	r3, r2
 8009560:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	4a22      	ldr	r2, [pc, #136]	@ (80095f0 <TIM_Base_SetConfig+0xe0>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d013      	beq.n	8009592 <TIM_Base_SetConfig+0x82>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	4a21      	ldr	r2, [pc, #132]	@ (80095f4 <TIM_Base_SetConfig+0xe4>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d00f      	beq.n	8009592 <TIM_Base_SetConfig+0x82>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009578:	d00b      	beq.n	8009592 <TIM_Base_SetConfig+0x82>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4a1e      	ldr	r2, [pc, #120]	@ (80095f8 <TIM_Base_SetConfig+0xe8>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d007      	beq.n	8009592 <TIM_Base_SetConfig+0x82>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	4a1d      	ldr	r2, [pc, #116]	@ (80095fc <TIM_Base_SetConfig+0xec>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d003      	beq.n	8009592 <TIM_Base_SetConfig+0x82>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4a1c      	ldr	r2, [pc, #112]	@ (8009600 <TIM_Base_SetConfig+0xf0>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d108      	bne.n	80095a4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009598:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	68db      	ldr	r3, [r3, #12]
 800959e:	68fa      	ldr	r2, [r7, #12]
 80095a0:	4313      	orrs	r3, r2
 80095a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	695b      	ldr	r3, [r3, #20]
 80095ae:	4313      	orrs	r3, r2
 80095b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	68fa      	ldr	r2, [r7, #12]
 80095b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	689a      	ldr	r2, [r3, #8]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	4a09      	ldr	r2, [pc, #36]	@ (80095f0 <TIM_Base_SetConfig+0xe0>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d003      	beq.n	80095d8 <TIM_Base_SetConfig+0xc8>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	4a08      	ldr	r2, [pc, #32]	@ (80095f4 <TIM_Base_SetConfig+0xe4>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d103      	bne.n	80095e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	691a      	ldr	r2, [r3, #16]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2201      	movs	r2, #1
 80095e4:	615a      	str	r2, [r3, #20]
}
 80095e6:	bf00      	nop
 80095e8:	3714      	adds	r7, #20
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bc80      	pop	{r7}
 80095ee:	4770      	bx	lr
 80095f0:	40012c00 	.word	0x40012c00
 80095f4:	40013400 	.word	0x40013400
 80095f8:	40000400 	.word	0x40000400
 80095fc:	40000800 	.word	0x40000800
 8009600:	40000c00 	.word	0x40000c00

08009604 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800960c:	bf00      	nop
 800960e:	370c      	adds	r7, #12
 8009610:	46bd      	mov	sp, r7
 8009612:	bc80      	pop	{r7}
 8009614:	4770      	bx	lr

08009616 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009616:	b480      	push	{r7}
 8009618:	b083      	sub	sp, #12
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800961e:	bf00      	nop
 8009620:	370c      	adds	r7, #12
 8009622:	46bd      	mov	sp, r7
 8009624:	bc80      	pop	{r7}
 8009626:	4770      	bx	lr

08009628 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d101      	bne.n	800963a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009636:	2301      	movs	r3, #1
 8009638:	e042      	b.n	80096c0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009640:	b2db      	uxtb	r3, r3
 8009642:	2b00      	cmp	r3, #0
 8009644:	d106      	bne.n	8009654 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2200      	movs	r2, #0
 800964a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f7fa ff0a 	bl	8004468 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2224      	movs	r2, #36	@ 0x24
 8009658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	68da      	ldr	r2, [r3, #12]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800966a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 f91d 	bl	80098ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	691a      	ldr	r2, [r3, #16]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009680:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	695a      	ldr	r2, [r3, #20]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009690:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	68da      	ldr	r2, [r3, #12]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80096a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2200      	movs	r2, #0
 80096a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2220      	movs	r2, #32
 80096ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2220      	movs	r2, #32
 80096b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2200      	movs	r2, #0
 80096bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3708      	adds	r7, #8
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b08a      	sub	sp, #40	@ 0x28
 80096cc:	af02      	add	r7, sp, #8
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	603b      	str	r3, [r7, #0]
 80096d4:	4613      	mov	r3, r2
 80096d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80096d8:	2300      	movs	r3, #0
 80096da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80096e2:	b2db      	uxtb	r3, r3
 80096e4:	2b20      	cmp	r3, #32
 80096e6:	d16d      	bne.n	80097c4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d002      	beq.n	80096f4 <HAL_UART_Transmit+0x2c>
 80096ee:	88fb      	ldrh	r3, [r7, #6]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d101      	bne.n	80096f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80096f4:	2301      	movs	r3, #1
 80096f6:	e066      	b.n	80097c6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2200      	movs	r2, #0
 80096fc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2221      	movs	r2, #33	@ 0x21
 8009702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009706:	f7fa ff93 	bl	8004630 <HAL_GetTick>
 800970a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	88fa      	ldrh	r2, [r7, #6]
 8009710:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	88fa      	ldrh	r2, [r7, #6]
 8009716:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	689b      	ldr	r3, [r3, #8]
 800971c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009720:	d108      	bne.n	8009734 <HAL_UART_Transmit+0x6c>
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	691b      	ldr	r3, [r3, #16]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d104      	bne.n	8009734 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800972a:	2300      	movs	r3, #0
 800972c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	61bb      	str	r3, [r7, #24]
 8009732:	e003      	b.n	800973c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009738:	2300      	movs	r3, #0
 800973a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800973c:	e02a      	b.n	8009794 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	9300      	str	r3, [sp, #0]
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	2200      	movs	r2, #0
 8009746:	2180      	movs	r1, #128	@ 0x80
 8009748:	68f8      	ldr	r0, [r7, #12]
 800974a:	f000 f840 	bl	80097ce <UART_WaitOnFlagUntilTimeout>
 800974e:	4603      	mov	r3, r0
 8009750:	2b00      	cmp	r3, #0
 8009752:	d001      	beq.n	8009758 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8009754:	2303      	movs	r3, #3
 8009756:	e036      	b.n	80097c6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d10b      	bne.n	8009776 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800975e:	69bb      	ldr	r3, [r7, #24]
 8009760:	881b      	ldrh	r3, [r3, #0]
 8009762:	461a      	mov	r2, r3
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800976c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800976e:	69bb      	ldr	r3, [r7, #24]
 8009770:	3302      	adds	r3, #2
 8009772:	61bb      	str	r3, [r7, #24]
 8009774:	e007      	b.n	8009786 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009776:	69fb      	ldr	r3, [r7, #28]
 8009778:	781a      	ldrb	r2, [r3, #0]
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009780:	69fb      	ldr	r3, [r7, #28]
 8009782:	3301      	adds	r3, #1
 8009784:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800978a:	b29b      	uxth	r3, r3
 800978c:	3b01      	subs	r3, #1
 800978e:	b29a      	uxth	r2, r3
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009798:	b29b      	uxth	r3, r3
 800979a:	2b00      	cmp	r3, #0
 800979c:	d1cf      	bne.n	800973e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	9300      	str	r3, [sp, #0]
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	2200      	movs	r2, #0
 80097a6:	2140      	movs	r1, #64	@ 0x40
 80097a8:	68f8      	ldr	r0, [r7, #12]
 80097aa:	f000 f810 	bl	80097ce <UART_WaitOnFlagUntilTimeout>
 80097ae:	4603      	mov	r3, r0
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d001      	beq.n	80097b8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80097b4:	2303      	movs	r3, #3
 80097b6:	e006      	b.n	80097c6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2220      	movs	r2, #32
 80097bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80097c0:	2300      	movs	r3, #0
 80097c2:	e000      	b.n	80097c6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80097c4:	2302      	movs	r3, #2
  }
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	3720      	adds	r7, #32
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}

080097ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80097ce:	b580      	push	{r7, lr}
 80097d0:	b090      	sub	sp, #64	@ 0x40
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	60f8      	str	r0, [r7, #12]
 80097d6:	60b9      	str	r1, [r7, #8]
 80097d8:	603b      	str	r3, [r7, #0]
 80097da:	4613      	mov	r3, r2
 80097dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097de:	e050      	b.n	8009882 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097e6:	d04c      	beq.n	8009882 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80097e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d007      	beq.n	80097fe <UART_WaitOnFlagUntilTimeout+0x30>
 80097ee:	f7fa ff1f 	bl	8004630 <HAL_GetTick>
 80097f2:	4602      	mov	r2, r0
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	1ad3      	subs	r3, r2, r3
 80097f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d241      	bcs.n	8009882 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	330c      	adds	r3, #12
 8009804:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009808:	e853 3f00 	ldrex	r3, [r3]
 800980c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800980e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009810:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8009814:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	330c      	adds	r3, #12
 800981c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800981e:	637a      	str	r2, [r7, #52]	@ 0x34
 8009820:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009822:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009824:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009826:	e841 2300 	strex	r3, r2, [r1]
 800982a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800982c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800982e:	2b00      	cmp	r3, #0
 8009830:	d1e5      	bne.n	80097fe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	3314      	adds	r3, #20
 8009838:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	e853 3f00 	ldrex	r3, [r3]
 8009840:	613b      	str	r3, [r7, #16]
   return(result);
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	f023 0301 	bic.w	r3, r3, #1
 8009848:	63bb      	str	r3, [r7, #56]	@ 0x38
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	3314      	adds	r3, #20
 8009850:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009852:	623a      	str	r2, [r7, #32]
 8009854:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009856:	69f9      	ldr	r1, [r7, #28]
 8009858:	6a3a      	ldr	r2, [r7, #32]
 800985a:	e841 2300 	strex	r3, r2, [r1]
 800985e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009860:	69bb      	ldr	r3, [r7, #24]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d1e5      	bne.n	8009832 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2220      	movs	r2, #32
 800986a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2220      	movs	r2, #32
 8009872:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2200      	movs	r2, #0
 800987a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800987e:	2303      	movs	r3, #3
 8009880:	e00f      	b.n	80098a2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	681a      	ldr	r2, [r3, #0]
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	4013      	ands	r3, r2
 800988c:	68ba      	ldr	r2, [r7, #8]
 800988e:	429a      	cmp	r2, r3
 8009890:	bf0c      	ite	eq
 8009892:	2301      	moveq	r3, #1
 8009894:	2300      	movne	r3, #0
 8009896:	b2db      	uxtb	r3, r3
 8009898:	461a      	mov	r2, r3
 800989a:	79fb      	ldrb	r3, [r7, #7]
 800989c:	429a      	cmp	r2, r3
 800989e:	d09f      	beq.n	80097e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80098a0:	2300      	movs	r3, #0
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3740      	adds	r7, #64	@ 0x40
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
	...

080098ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b084      	sub	sp, #16
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	691b      	ldr	r3, [r3, #16]
 80098ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	68da      	ldr	r2, [r3, #12]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	430a      	orrs	r2, r1
 80098c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	689a      	ldr	r2, [r3, #8]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	691b      	ldr	r3, [r3, #16]
 80098d2:	431a      	orrs	r2, r3
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	695b      	ldr	r3, [r3, #20]
 80098d8:	4313      	orrs	r3, r2
 80098da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	68db      	ldr	r3, [r3, #12]
 80098e2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80098e6:	f023 030c 	bic.w	r3, r3, #12
 80098ea:	687a      	ldr	r2, [r7, #4]
 80098ec:	6812      	ldr	r2, [r2, #0]
 80098ee:	68b9      	ldr	r1, [r7, #8]
 80098f0:	430b      	orrs	r3, r1
 80098f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	695b      	ldr	r3, [r3, #20]
 80098fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	699a      	ldr	r2, [r3, #24]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	430a      	orrs	r2, r1
 8009908:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4a2c      	ldr	r2, [pc, #176]	@ (80099c0 <UART_SetConfig+0x114>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d103      	bne.n	800991c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009914:	f7fe f862 	bl	80079dc <HAL_RCC_GetPCLK2Freq>
 8009918:	60f8      	str	r0, [r7, #12]
 800991a:	e002      	b.n	8009922 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800991c:	f7fe f84a 	bl	80079b4 <HAL_RCC_GetPCLK1Freq>
 8009920:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009922:	68fa      	ldr	r2, [r7, #12]
 8009924:	4613      	mov	r3, r2
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	4413      	add	r3, r2
 800992a:	009a      	lsls	r2, r3, #2
 800992c:	441a      	add	r2, r3
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	009b      	lsls	r3, r3, #2
 8009934:	fbb2 f3f3 	udiv	r3, r2, r3
 8009938:	4a22      	ldr	r2, [pc, #136]	@ (80099c4 <UART_SetConfig+0x118>)
 800993a:	fba2 2303 	umull	r2, r3, r2, r3
 800993e:	095b      	lsrs	r3, r3, #5
 8009940:	0119      	lsls	r1, r3, #4
 8009942:	68fa      	ldr	r2, [r7, #12]
 8009944:	4613      	mov	r3, r2
 8009946:	009b      	lsls	r3, r3, #2
 8009948:	4413      	add	r3, r2
 800994a:	009a      	lsls	r2, r3, #2
 800994c:	441a      	add	r2, r3
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	009b      	lsls	r3, r3, #2
 8009954:	fbb2 f2f3 	udiv	r2, r2, r3
 8009958:	4b1a      	ldr	r3, [pc, #104]	@ (80099c4 <UART_SetConfig+0x118>)
 800995a:	fba3 0302 	umull	r0, r3, r3, r2
 800995e:	095b      	lsrs	r3, r3, #5
 8009960:	2064      	movs	r0, #100	@ 0x64
 8009962:	fb00 f303 	mul.w	r3, r0, r3
 8009966:	1ad3      	subs	r3, r2, r3
 8009968:	011b      	lsls	r3, r3, #4
 800996a:	3332      	adds	r3, #50	@ 0x32
 800996c:	4a15      	ldr	r2, [pc, #84]	@ (80099c4 <UART_SetConfig+0x118>)
 800996e:	fba2 2303 	umull	r2, r3, r2, r3
 8009972:	095b      	lsrs	r3, r3, #5
 8009974:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009978:	4419      	add	r1, r3
 800997a:	68fa      	ldr	r2, [r7, #12]
 800997c:	4613      	mov	r3, r2
 800997e:	009b      	lsls	r3, r3, #2
 8009980:	4413      	add	r3, r2
 8009982:	009a      	lsls	r2, r3, #2
 8009984:	441a      	add	r2, r3
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009990:	4b0c      	ldr	r3, [pc, #48]	@ (80099c4 <UART_SetConfig+0x118>)
 8009992:	fba3 0302 	umull	r0, r3, r3, r2
 8009996:	095b      	lsrs	r3, r3, #5
 8009998:	2064      	movs	r0, #100	@ 0x64
 800999a:	fb00 f303 	mul.w	r3, r0, r3
 800999e:	1ad3      	subs	r3, r2, r3
 80099a0:	011b      	lsls	r3, r3, #4
 80099a2:	3332      	adds	r3, #50	@ 0x32
 80099a4:	4a07      	ldr	r2, [pc, #28]	@ (80099c4 <UART_SetConfig+0x118>)
 80099a6:	fba2 2303 	umull	r2, r3, r2, r3
 80099aa:	095b      	lsrs	r3, r3, #5
 80099ac:	f003 020f 	and.w	r2, r3, #15
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	440a      	add	r2, r1
 80099b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80099b8:	bf00      	nop
 80099ba:	3710      	adds	r7, #16
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}
 80099c0:	40013800 	.word	0x40013800
 80099c4:	51eb851f 	.word	0x51eb851f

080099c8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80099cc:	4904      	ldr	r1, [pc, #16]	@ (80099e0 <MX_FATFS_Init+0x18>)
 80099ce:	4805      	ldr	r0, [pc, #20]	@ (80099e4 <MX_FATFS_Init+0x1c>)
 80099d0:	f000 f8b0 	bl	8009b34 <FATFS_LinkDriver>
 80099d4:	4603      	mov	r3, r0
 80099d6:	461a      	mov	r2, r3
 80099d8:	4b03      	ldr	r3, [pc, #12]	@ (80099e8 <MX_FATFS_Init+0x20>)
 80099da:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80099dc:	bf00      	nop
 80099de:	bd80      	pop	{r7, pc}
 80099e0:	200008c0 	.word	0x200008c0
 80099e4:	200000ec 	.word	0x200000ec
 80099e8:	200008bc 	.word	0x200008bc

080099ec <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b082      	sub	sp, #8
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	4603      	mov	r3, r0
 80099f4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
      return SD_disk_initialize(pdrv);
 80099f6:	79fb      	ldrb	r3, [r7, #7]
 80099f8:	4618      	mov	r0, r3
 80099fa:	f7f7 ff97 	bl	800192c <SD_disk_initialize>
 80099fe:	4603      	mov	r3, r0
 8009a00:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3708      	adds	r7, #8
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b082      	sub	sp, #8
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	4603      	mov	r3, r0
 8009a12:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
      return SD_disk_status(pdrv);
 8009a14:	79fb      	ldrb	r3, [r7, #7]
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7f8 f86e 	bl	8001af8 <SD_disk_status>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3708      	adds	r7, #8
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}

08009a28 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b084      	sub	sp, #16
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	60b9      	str	r1, [r7, #8]
 8009a30:	607a      	str	r2, [r7, #4]
 8009a32:	603b      	str	r3, [r7, #0]
 8009a34:	4603      	mov	r3, r0
 8009a36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
    return SD_disk_read(pdrv, buff, sector, count);
 8009a38:	7bf8      	ldrb	r0, [r7, #15]
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	68b9      	ldr	r1, [r7, #8]
 8009a40:	f7f8 f86e 	bl	8001b20 <SD_disk_read>
 8009a44:	4603      	mov	r3, r0
 8009a46:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3710      	adds	r7, #16
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60b9      	str	r1, [r7, #8]
 8009a58:	607a      	str	r2, [r7, #4]
 8009a5a:	603b      	str	r3, [r7, #0]
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
      return SD_disk_write(pdrv, buff, sector, count);
 8009a60:	7bf8      	ldrb	r0, [r7, #15]
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	68b9      	ldr	r1, [r7, #8]
 8009a68:	f7f8 f8c4 	bl	8001bf4 <SD_disk_write>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3710      	adds	r7, #16
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	4603      	mov	r3, r0
 8009a80:	603a      	str	r2, [r7, #0]
 8009a82:	71fb      	strb	r3, [r7, #7]
 8009a84:	460b      	mov	r3, r1
 8009a86:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
  return SD_disk_ioctl(pdrv, cmd, buff);
 8009a88:	79fb      	ldrb	r3, [r7, #7]
 8009a8a:	79b9      	ldrb	r1, [r7, #6]
 8009a8c:	683a      	ldr	r2, [r7, #0]
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f7f8 f934 	bl	8001cfc <SD_disk_ioctl>
 8009a94:	4603      	mov	r3, r0
 8009a96:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3708      	adds	r7, #8
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}

08009aa0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b087      	sub	sp, #28
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	60f8      	str	r0, [r7, #12]
 8009aa8:	60b9      	str	r1, [r7, #8]
 8009aaa:	4613      	mov	r3, r2
 8009aac:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8009ab6:	4b1e      	ldr	r3, [pc, #120]	@ (8009b30 <FATFS_LinkDriverEx+0x90>)
 8009ab8:	7a5b      	ldrb	r3, [r3, #9]
 8009aba:	b2db      	uxtb	r3, r3
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d831      	bhi.n	8009b24 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8009b30 <FATFS_LinkDriverEx+0x90>)
 8009ac2:	7a5b      	ldrb	r3, [r3, #9]
 8009ac4:	b2db      	uxtb	r3, r3
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	4b19      	ldr	r3, [pc, #100]	@ (8009b30 <FATFS_LinkDriverEx+0x90>)
 8009aca:	2100      	movs	r1, #0
 8009acc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8009ace:	4b18      	ldr	r3, [pc, #96]	@ (8009b30 <FATFS_LinkDriverEx+0x90>)
 8009ad0:	7a5b      	ldrb	r3, [r3, #9]
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	4a16      	ldr	r2, [pc, #88]	@ (8009b30 <FATFS_LinkDriverEx+0x90>)
 8009ad6:	009b      	lsls	r3, r3, #2
 8009ad8:	4413      	add	r3, r2
 8009ada:	68fa      	ldr	r2, [r7, #12]
 8009adc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8009ade:	4b14      	ldr	r3, [pc, #80]	@ (8009b30 <FATFS_LinkDriverEx+0x90>)
 8009ae0:	7a5b      	ldrb	r3, [r3, #9]
 8009ae2:	b2db      	uxtb	r3, r3
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	4b12      	ldr	r3, [pc, #72]	@ (8009b30 <FATFS_LinkDriverEx+0x90>)
 8009ae8:	4413      	add	r3, r2
 8009aea:	79fa      	ldrb	r2, [r7, #7]
 8009aec:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009aee:	4b10      	ldr	r3, [pc, #64]	@ (8009b30 <FATFS_LinkDriverEx+0x90>)
 8009af0:	7a5b      	ldrb	r3, [r3, #9]
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	1c5a      	adds	r2, r3, #1
 8009af6:	b2d1      	uxtb	r1, r2
 8009af8:	4a0d      	ldr	r2, [pc, #52]	@ (8009b30 <FATFS_LinkDriverEx+0x90>)
 8009afa:	7251      	strb	r1, [r2, #9]
 8009afc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009afe:	7dbb      	ldrb	r3, [r7, #22]
 8009b00:	3330      	adds	r3, #48	@ 0x30
 8009b02:	b2da      	uxtb	r2, r3
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	223a      	movs	r2, #58	@ 0x3a
 8009b0e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	3302      	adds	r3, #2
 8009b14:	222f      	movs	r2, #47	@ 0x2f
 8009b16:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	3303      	adds	r3, #3
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009b20:	2300      	movs	r3, #0
 8009b22:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8009b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	371c      	adds	r7, #28
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bc80      	pop	{r7}
 8009b2e:	4770      	bx	lr
 8009b30:	200008c4 	.word	0x200008c4

08009b34 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b082      	sub	sp, #8
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009b3e:	2200      	movs	r2, #0
 8009b40:	6839      	ldr	r1, [r7, #0]
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f7ff ffac 	bl	8009aa0 <FATFS_LinkDriverEx>
 8009b48:	4603      	mov	r3, r0
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3708      	adds	r7, #8
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}

08009b52 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009b52:	b480      	push	{r7}
 8009b54:	b085      	sub	sp, #20
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	4603      	mov	r3, r0
 8009b5a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009b60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009b64:	2b84      	cmp	r3, #132	@ 0x84
 8009b66:	d005      	beq.n	8009b74 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009b68:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	4413      	add	r3, r2
 8009b70:	3303      	adds	r3, #3
 8009b72:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009b74:	68fb      	ldr	r3, [r7, #12]
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3714      	adds	r7, #20
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bc80      	pop	{r7}
 8009b7e:	4770      	bx	lr

08009b80 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b083      	sub	sp, #12
 8009b84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b86:	f3ef 8305 	mrs	r3, IPSR
 8009b8a:	607b      	str	r3, [r7, #4]
  return(result);
 8009b8c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	bf14      	ite	ne
 8009b92:	2301      	movne	r3, #1
 8009b94:	2300      	moveq	r3, #0
 8009b96:	b2db      	uxtb	r3, r3
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	370c      	adds	r7, #12
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bc80      	pop	{r7}
 8009ba0:	4770      	bx	lr

08009ba2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009ba2:	b580      	push	{r7, lr}
 8009ba4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009ba6:	f001 faad 	bl	800b104 <vTaskStartScheduler>
  
  return osOK;
 8009baa:	2300      	movs	r3, #0
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bb2:	b089      	sub	sp, #36	@ 0x24
 8009bb4:	af04      	add	r7, sp, #16
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	695b      	ldr	r3, [r3, #20]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d020      	beq.n	8009c04 <osThreadCreate+0x54>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	699b      	ldr	r3, [r3, #24]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d01c      	beq.n	8009c04 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	685c      	ldr	r4, [r3, #4]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	691e      	ldr	r6, [r3, #16]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f7ff ffb8 	bl	8009b52 <makeFreeRtosPriority>
 8009be2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	695b      	ldr	r3, [r3, #20]
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009bec:	9202      	str	r2, [sp, #8]
 8009bee:	9301      	str	r3, [sp, #4]
 8009bf0:	9100      	str	r1, [sp, #0]
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	4632      	mov	r2, r6
 8009bf6:	4629      	mov	r1, r5
 8009bf8:	4620      	mov	r0, r4
 8009bfa:	f001 f8a7 	bl	800ad4c <xTaskCreateStatic>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	60fb      	str	r3, [r7, #12]
 8009c02:	e01c      	b.n	8009c3e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	685c      	ldr	r4, [r3, #4]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c10:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f7ff ff9a 	bl	8009b52 <makeFreeRtosPriority>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	f107 030c 	add.w	r3, r7, #12
 8009c24:	9301      	str	r3, [sp, #4]
 8009c26:	9200      	str	r2, [sp, #0]
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	4632      	mov	r2, r6
 8009c2c:	4629      	mov	r1, r5
 8009c2e:	4620      	mov	r0, r4
 8009c30:	f001 f8eb 	bl	800ae0a <xTaskCreate>
 8009c34:	4603      	mov	r3, r0
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d001      	beq.n	8009c3e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	e000      	b.n	8009c40 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3714      	adds	r7, #20
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009c48 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b084      	sub	sp, #16
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d001      	beq.n	8009c5e <osDelay+0x16>
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	e000      	b.n	8009c60 <osDelay+0x18>
 8009c5e:	2301      	movs	r3, #1
 8009c60:	4618      	mov	r0, r3
 8009c62:	f001 fa19 	bl	800b098 <vTaskDelay>
  
  return osOK;
 8009c66:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3710      	adds	r7, #16
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b086      	sub	sp, #24
 8009c74:	af02      	add	r7, sp, #8
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8009c82:	f7ff ff7d 	bl	8009b80 <inHandlerMode>
 8009c86:	4603      	mov	r3, r0
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d01c      	beq.n	8009cc6 <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8009c8c:	6839      	ldr	r1, [r7, #0]
 8009c8e:	f107 0208 	add.w	r2, r7, #8
 8009c92:	f107 030c 	add.w	r3, r7, #12
 8009c96:	9300      	str	r3, [sp, #0]
 8009c98:	4613      	mov	r3, r2
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f002 f809 	bl	800bcb4 <xTaskGenericNotifyFromISR>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	d002      	beq.n	8009cae <osSignalSet+0x3e>
      return 0x80000000;
 8009ca8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009cac:	e019      	b.n	8009ce2 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d015      	beq.n	8009ce0 <osSignalSet+0x70>
 8009cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8009cec <osSignalSet+0x7c>)
 8009cb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009cba:	601a      	str	r2, [r3, #0]
 8009cbc:	f3bf 8f4f 	dsb	sy
 8009cc0:	f3bf 8f6f 	isb	sy
 8009cc4:	e00c      	b.n	8009ce0 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8009cc6:	6839      	ldr	r1, [r7, #0]
 8009cc8:	f107 0308 	add.w	r3, r7, #8
 8009ccc:	2201      	movs	r2, #1
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f001 ff44 	bl	800bb5c <xTaskGenericNotify>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d002      	beq.n	8009ce0 <osSignalSet+0x70>
    return 0x80000000;
 8009cda:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009cde:	e000      	b.n	8009ce2 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8009ce0:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3710      	adds	r7, #16
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop
 8009cec:	e000ed04 	.word	0xe000ed04

08009cf0 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8009cf0:	b590      	push	{r4, r7, lr}
 8009cf2:	b089      	sub	sp, #36	@ 0x24
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	60f8      	str	r0, [r7, #12]
 8009cf8:	60b9      	str	r1, [r7, #8]
 8009cfa:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8009d00:	2300      	movs	r3, #0
 8009d02:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d0a:	d103      	bne.n	8009d14 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8009d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8009d10:	61fb      	str	r3, [r7, #28]
 8009d12:	e009      	b.n	8009d28 <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d006      	beq.n	8009d28 <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8009d1e:	69fb      	ldr	r3, [r7, #28]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d101      	bne.n	8009d28 <osSignalWait+0x38>
      ticks = 1;
 8009d24:	2301      	movs	r3, #1
 8009d26:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8009d28:	f7ff ff2a 	bl	8009b80 <inHandlerMode>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d002      	beq.n	8009d38 <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8009d32:	2382      	movs	r3, #130	@ 0x82
 8009d34:	613b      	str	r3, [r7, #16]
 8009d36:	e01b      	b.n	8009d70 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8009d38:	68b9      	ldr	r1, [r7, #8]
 8009d3a:	f107 0310 	add.w	r3, r7, #16
 8009d3e:	1d1a      	adds	r2, r3, #4
 8009d40:	69fb      	ldr	r3, [r7, #28]
 8009d42:	2000      	movs	r0, #0
 8009d44:	f001 feaa 	bl	800ba9c <xTaskNotifyWait>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d008      	beq.n	8009d60 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8009d4e:	69fb      	ldr	r3, [r7, #28]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d102      	bne.n	8009d5a <osSignalWait+0x6a>
 8009d54:	2300      	movs	r3, #0
 8009d56:	613b      	str	r3, [r7, #16]
 8009d58:	e00a      	b.n	8009d70 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8009d5a:	2340      	movs	r3, #64	@ 0x40
 8009d5c:	613b      	str	r3, [r7, #16]
 8009d5e:	e007      	b.n	8009d70 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	da02      	bge.n	8009d6c <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8009d66:	2386      	movs	r3, #134	@ 0x86
 8009d68:	613b      	str	r3, [r7, #16]
 8009d6a:	e001      	b.n	8009d70 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8009d6c:	2308      	movs	r3, #8
 8009d6e:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	461c      	mov	r4, r3
 8009d74:	f107 0310 	add.w	r3, r7, #16
 8009d78:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009d7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009d80:	68f8      	ldr	r0, [r7, #12]
 8009d82:	3724      	adds	r7, #36	@ 0x24
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd90      	pop	{r4, r7, pc}

08009d88 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b086      	sub	sp, #24
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	3303      	adds	r3, #3
 8009d96:	f023 0303 	bic.w	r3, r3, #3
 8009d9a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8009d9c:	2014      	movs	r0, #20
 8009d9e:	f002 fab7 	bl	800c310 <pvPortMalloc>
 8009da2:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d046      	beq.n	8009e38 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8009db2:	68fa      	ldr	r2, [r7, #12]
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f002 faa4 	bl	800c310 <pvPortMalloc>
 8009dc8:	4602      	mov	r2, r0
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d02b      	beq.n	8009e2e <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	68fa      	ldr	r2, [r7, #12]
 8009ddc:	fb02 f303 	mul.w	r3, r2, r3
 8009de0:	4618      	mov	r0, r3
 8009de2:	f002 fa95 	bl	800c310 <pvPortMalloc>
 8009de6:	4602      	mov	r2, r0
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d011      	beq.n	8009e18 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8009df4:	2300      	movs	r3, #0
 8009df6:	613b      	str	r3, [r7, #16]
 8009df8:	e008      	b.n	8009e0c <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	685a      	ldr	r2, [r3, #4]
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	4413      	add	r3, r2
 8009e02:	2200      	movs	r2, #0
 8009e04:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	3301      	adds	r3, #1
 8009e0a:	613b      	str	r3, [r7, #16]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	693a      	ldr	r2, [r7, #16]
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d3f1      	bcc.n	8009dfa <osPoolCreate+0x72>
 8009e16:	e00f      	b.n	8009e38 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f002 fb3f 	bl	800c4a0 <vPortFree>
        vPortFree(thePool);
 8009e22:	6978      	ldr	r0, [r7, #20]
 8009e24:	f002 fb3c 	bl	800c4a0 <vPortFree>
        thePool = NULL;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	617b      	str	r3, [r7, #20]
 8009e2c:	e004      	b.n	8009e38 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8009e2e:	6978      	ldr	r0, [r7, #20]
 8009e30:	f002 fb36 	bl	800c4a0 <vPortFree>
      thePool = NULL;
 8009e34:	2300      	movs	r3, #0
 8009e36:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8009e38:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3718      	adds	r7, #24
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}

08009e42 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8009e42:	b580      	push	{r7, lr}
 8009e44:	b08a      	sub	sp, #40	@ 0x28
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	627b      	str	r3, [r7, #36]	@ 0x24
  void *p = NULL;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8009e52:	f7ff fe95 	bl	8009b80 <inHandlerMode>
 8009e56:	4603      	mov	r3, r0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d00e      	beq.n	8009e7a <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009e5c:	f3ef 8211 	mrs	r2, BASEPRI
 8009e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e64:	f383 8811 	msr	BASEPRI, r3
 8009e68:	f3bf 8f6f 	isb	sy
 8009e6c:	f3bf 8f4f 	dsb	sy
 8009e70:	617a      	str	r2, [r7, #20]
 8009e72:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009e74:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8009e76:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e78:	e001      	b.n	8009e7e <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8009e7a:	f002 f947 	bl	800c10c <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8009e7e:	2300      	movs	r3, #0
 8009e80:	61fb      	str	r3, [r7, #28]
 8009e82:	e029      	b.n	8009ed8 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	691a      	ldr	r2, [r3, #16]
 8009e88:	69fb      	ldr	r3, [r7, #28]
 8009e8a:	4413      	add	r3, r2
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	6892      	ldr	r2, [r2, #8]
 8009e90:	fbb3 f1f2 	udiv	r1, r3, r2
 8009e94:	fb01 f202 	mul.w	r2, r1, r2
 8009e98:	1a9b      	subs	r3, r3, r2
 8009e9a:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	685a      	ldr	r2, [r3, #4]
 8009ea0:	69bb      	ldr	r3, [r7, #24]
 8009ea2:	4413      	add	r3, r2
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d113      	bne.n	8009ed2 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	685a      	ldr	r2, [r3, #4]
 8009eae:	69bb      	ldr	r3, [r7, #24]
 8009eb0:	4413      	add	r3, r2
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4619      	mov	r1, r3
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	68db      	ldr	r3, [r3, #12]
 8009ec0:	69ba      	ldr	r2, [r7, #24]
 8009ec2:	fb02 f303 	mul.w	r3, r2, r3
 8009ec6:	440b      	add	r3, r1
 8009ec8:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	69ba      	ldr	r2, [r7, #24]
 8009ece:	611a      	str	r2, [r3, #16]
      break;
 8009ed0:	e007      	b.n	8009ee2 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8009ed2:	69fb      	ldr	r3, [r7, #28]
 8009ed4:	3301      	adds	r3, #1
 8009ed6:	61fb      	str	r3, [r7, #28]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	689b      	ldr	r3, [r3, #8]
 8009edc:	69fa      	ldr	r2, [r7, #28]
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d3d0      	bcc.n	8009e84 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8009ee2:	f7ff fe4d 	bl	8009b80 <inHandlerMode>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d005      	beq.n	8009ef8 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8009eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eee:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009ef6:	e001      	b.n	8009efc <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8009ef8:	f002 f938 	bl	800c16c <vPortExitCritical>
  }
  
  return p;
 8009efc:	6a3b      	ldr	r3, [r7, #32]
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3728      	adds	r7, #40	@ 0x28
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8009f06:	b480      	push	{r7}
 8009f08:	b085      	sub	sp, #20
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
 8009f0e:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d101      	bne.n	8009f1a <osPoolFree+0x14>
    return osErrorParameter;
 8009f16:	2380      	movs	r3, #128	@ 0x80
 8009f18:	e030      	b.n	8009f7c <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d101      	bne.n	8009f24 <osPoolFree+0x1e>
    return osErrorParameter;
 8009f20:	2380      	movs	r3, #128	@ 0x80
 8009f22:	e02b      	b.n	8009f7c <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	683a      	ldr	r2, [r7, #0]
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d201      	bcs.n	8009f32 <osPoolFree+0x2c>
    return osErrorParameter;
 8009f2e:	2380      	movs	r3, #128	@ 0x80
 8009f30:	e024      	b.n	8009f7c <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	687a      	ldr	r2, [r7, #4]
 8009f36:	6812      	ldr	r2, [r2, #0]
 8009f38:	1a9b      	subs	r3, r3, r2
 8009f3a:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	68da      	ldr	r2, [r3, #12]
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f46:	fb01 f202 	mul.w	r2, r1, r2
 8009f4a:	1a9b      	subs	r3, r3, r2
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d001      	beq.n	8009f54 <osPoolFree+0x4e>
    return osErrorParameter;
 8009f50:	2380      	movs	r3, #128	@ 0x80
 8009f52:	e013      	b.n	8009f7c <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f5e:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	689b      	ldr	r3, [r3, #8]
 8009f64:	68fa      	ldr	r2, [r7, #12]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d301      	bcc.n	8009f6e <osPoolFree+0x68>
    return osErrorParameter;
 8009f6a:	2380      	movs	r3, #128	@ 0x80
 8009f6c:	e006      	b.n	8009f7c <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	685a      	ldr	r2, [r3, #4]
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	4413      	add	r3, r2
 8009f76:	2200      	movs	r2, #0
 8009f78:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8009f7a:	2300      	movs	r3, #0
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3714      	adds	r7, #20
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bc80      	pop	{r7}
 8009f84:	4770      	bx	lr

08009f86 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009f86:	b590      	push	{r4, r7, lr}
 8009f88:	b085      	sub	sp, #20
 8009f8a:	af02      	add	r7, sp, #8
 8009f8c:	6078      	str	r0, [r7, #4]
 8009f8e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	689b      	ldr	r3, [r3, #8]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d011      	beq.n	8009fbc <osMessageCreate+0x36>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	68db      	ldr	r3, [r3, #12]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d00d      	beq.n	8009fbc <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6818      	ldr	r0, [r3, #0]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6859      	ldr	r1, [r3, #4]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	689a      	ldr	r2, [r3, #8]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	2400      	movs	r4, #0
 8009fb2:	9400      	str	r4, [sp, #0]
 8009fb4:	f000 f9de 	bl	800a374 <xQueueGenericCreateStatic>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	e008      	b.n	8009fce <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6818      	ldr	r0, [r3, #0]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	f000 fa50 	bl	800a46c <xQueueGenericCreate>
 8009fcc:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	370c      	adds	r7, #12
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd90      	pop	{r4, r7, pc}
	...

08009fd8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b086      	sub	sp, #24
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	60f8      	str	r0, [r7, #12]
 8009fe0:	60b9      	str	r1, [r7, #8]
 8009fe2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d101      	bne.n	8009ff6 <osMessagePut+0x1e>
    ticks = 1;
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009ff6:	f7ff fdc3 	bl	8009b80 <inHandlerMode>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d018      	beq.n	800a032 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a000:	f107 0210 	add.w	r2, r7, #16
 800a004:	f107 0108 	add.w	r1, r7, #8
 800a008:	2300      	movs	r3, #0
 800a00a:	68f8      	ldr	r0, [r7, #12]
 800a00c:	f000 fb8e 	bl	800a72c <xQueueGenericSendFromISR>
 800a010:	4603      	mov	r3, r0
 800a012:	2b01      	cmp	r3, #1
 800a014:	d001      	beq.n	800a01a <osMessagePut+0x42>
      return osErrorOS;
 800a016:	23ff      	movs	r3, #255	@ 0xff
 800a018:	e018      	b.n	800a04c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d014      	beq.n	800a04a <osMessagePut+0x72>
 800a020:	4b0c      	ldr	r3, [pc, #48]	@ (800a054 <osMessagePut+0x7c>)
 800a022:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a026:	601a      	str	r2, [r3, #0]
 800a028:	f3bf 8f4f 	dsb	sy
 800a02c:	f3bf 8f6f 	isb	sy
 800a030:	e00b      	b.n	800a04a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a032:	f107 0108 	add.w	r1, r7, #8
 800a036:	2300      	movs	r3, #0
 800a038:	697a      	ldr	r2, [r7, #20]
 800a03a:	68f8      	ldr	r0, [r7, #12]
 800a03c:	f000 fa74 	bl	800a528 <xQueueGenericSend>
 800a040:	4603      	mov	r3, r0
 800a042:	2b01      	cmp	r3, #1
 800a044:	d001      	beq.n	800a04a <osMessagePut+0x72>
      return osErrorOS;
 800a046:	23ff      	movs	r3, #255	@ 0xff
 800a048:	e000      	b.n	800a04c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800a04a:	2300      	movs	r3, #0
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3718      	adds	r7, #24
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}
 800a054:	e000ed04 	.word	0xe000ed04

0800a058 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a058:	b590      	push	{r4, r7, lr}
 800a05a:	b08b      	sub	sp, #44	@ 0x2c
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a068:	2300      	movs	r3, #0
 800a06a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d10a      	bne.n	800a088 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a072:	2380      	movs	r3, #128	@ 0x80
 800a074:	617b      	str	r3, [r7, #20]
    return event;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	461c      	mov	r4, r3
 800a07a:	f107 0314 	add.w	r3, r7, #20
 800a07e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a082:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a086:	e054      	b.n	800a132 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a088:	2300      	movs	r3, #0
 800a08a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a08c:	2300      	movs	r3, #0
 800a08e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a096:	d103      	bne.n	800a0a0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a098:	f04f 33ff 	mov.w	r3, #4294967295
 800a09c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a09e:	e009      	b.n	800a0b4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d006      	beq.n	800a0b4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800a0aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d101      	bne.n	800a0b4 <osMessageGet+0x5c>
      ticks = 1;
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a0b4:	f7ff fd64 	bl	8009b80 <inHandlerMode>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d01c      	beq.n	800a0f8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a0be:	f107 0220 	add.w	r2, r7, #32
 800a0c2:	f107 0314 	add.w	r3, r7, #20
 800a0c6:	3304      	adds	r3, #4
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	68b8      	ldr	r0, [r7, #8]
 800a0cc:	f000 fcac 	bl	800aa28 <xQueueReceiveFromISR>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	2b01      	cmp	r3, #1
 800a0d4:	d102      	bne.n	800a0dc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a0d6:	2310      	movs	r3, #16
 800a0d8:	617b      	str	r3, [r7, #20]
 800a0da:	e001      	b.n	800a0e0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a0e0:	6a3b      	ldr	r3, [r7, #32]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d01d      	beq.n	800a122 <osMessageGet+0xca>
 800a0e6:	4b15      	ldr	r3, [pc, #84]	@ (800a13c <osMessageGet+0xe4>)
 800a0e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0ec:	601a      	str	r2, [r3, #0]
 800a0ee:	f3bf 8f4f 	dsb	sy
 800a0f2:	f3bf 8f6f 	isb	sy
 800a0f6:	e014      	b.n	800a122 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a0f8:	f107 0314 	add.w	r3, r7, #20
 800a0fc:	3304      	adds	r3, #4
 800a0fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a100:	4619      	mov	r1, r3
 800a102:	68b8      	ldr	r0, [r7, #8]
 800a104:	f000 fbae 	bl	800a864 <xQueueReceive>
 800a108:	4603      	mov	r3, r0
 800a10a:	2b01      	cmp	r3, #1
 800a10c:	d102      	bne.n	800a114 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a10e:	2310      	movs	r3, #16
 800a110:	617b      	str	r3, [r7, #20]
 800a112:	e006      	b.n	800a122 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a116:	2b00      	cmp	r3, #0
 800a118:	d101      	bne.n	800a11e <osMessageGet+0xc6>
 800a11a:	2300      	movs	r3, #0
 800a11c:	e000      	b.n	800a120 <osMessageGet+0xc8>
 800a11e:	2340      	movs	r3, #64	@ 0x40
 800a120:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	461c      	mov	r4, r3
 800a126:	f107 0314 	add.w	r3, r7, #20
 800a12a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a12e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a132:	68f8      	ldr	r0, [r7, #12]
 800a134:	372c      	adds	r7, #44	@ 0x2c
 800a136:	46bd      	mov	sp, r7
 800a138:	bd90      	pop	{r4, r7, pc}
 800a13a:	bf00      	nop
 800a13c:	e000ed04 	.word	0xe000ed04

0800a140 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a140:	b480      	push	{r7}
 800a142:	b083      	sub	sp, #12
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f103 0208 	add.w	r2, r3, #8
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f04f 32ff 	mov.w	r2, #4294967295
 800a158:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f103 0208 	add.w	r2, r3, #8
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f103 0208 	add.w	r2, r3, #8
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2200      	movs	r2, #0
 800a172:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a174:	bf00      	nop
 800a176:	370c      	adds	r7, #12
 800a178:	46bd      	mov	sp, r7
 800a17a:	bc80      	pop	{r7}
 800a17c:	4770      	bx	lr

0800a17e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a17e:	b480      	push	{r7}
 800a180:	b083      	sub	sp, #12
 800a182:	af00      	add	r7, sp, #0
 800a184:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2200      	movs	r2, #0
 800a18a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a18c:	bf00      	nop
 800a18e:	370c      	adds	r7, #12
 800a190:	46bd      	mov	sp, r7
 800a192:	bc80      	pop	{r7}
 800a194:	4770      	bx	lr

0800a196 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a196:	b480      	push	{r7}
 800a198:	b085      	sub	sp, #20
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	6078      	str	r0, [r7, #4]
 800a19e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	68fa      	ldr	r2, [r7, #12]
 800a1aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	689a      	ldr	r2, [r3, #8]
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	689b      	ldr	r3, [r3, #8]
 800a1b8:	683a      	ldr	r2, [r7, #0]
 800a1ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	683a      	ldr	r2, [r7, #0]
 800a1c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	1c5a      	adds	r2, r3, #1
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	601a      	str	r2, [r3, #0]
}
 800a1d2:	bf00      	nop
 800a1d4:	3714      	adds	r7, #20
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bc80      	pop	{r7}
 800a1da:	4770      	bx	lr

0800a1dc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b085      	sub	sp, #20
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1f2:	d103      	bne.n	800a1fc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	691b      	ldr	r3, [r3, #16]
 800a1f8:	60fb      	str	r3, [r7, #12]
 800a1fa:	e00c      	b.n	800a216 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	3308      	adds	r3, #8
 800a200:	60fb      	str	r3, [r7, #12]
 800a202:	e002      	b.n	800a20a <vListInsert+0x2e>
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	60fb      	str	r3, [r7, #12]
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	68ba      	ldr	r2, [r7, #8]
 800a212:	429a      	cmp	r2, r3
 800a214:	d2f6      	bcs.n	800a204 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	685a      	ldr	r2, [r3, #4]
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	683a      	ldr	r2, [r7, #0]
 800a224:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	68fa      	ldr	r2, [r7, #12]
 800a22a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	683a      	ldr	r2, [r7, #0]
 800a230:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	1c5a      	adds	r2, r3, #1
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	601a      	str	r2, [r3, #0]
}
 800a242:	bf00      	nop
 800a244:	3714      	adds	r7, #20
 800a246:	46bd      	mov	sp, r7
 800a248:	bc80      	pop	{r7}
 800a24a:	4770      	bx	lr

0800a24c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a24c:	b480      	push	{r7}
 800a24e:	b085      	sub	sp, #20
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	691b      	ldr	r3, [r3, #16]
 800a258:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	687a      	ldr	r2, [r7, #4]
 800a260:	6892      	ldr	r2, [r2, #8]
 800a262:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	689b      	ldr	r3, [r3, #8]
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	6852      	ldr	r2, [r2, #4]
 800a26c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	685b      	ldr	r3, [r3, #4]
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	429a      	cmp	r2, r3
 800a276:	d103      	bne.n	800a280 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	689a      	ldr	r2, [r3, #8]
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2200      	movs	r2, #0
 800a284:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	1e5a      	subs	r2, r3, #1
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
}
 800a294:	4618      	mov	r0, r3
 800a296:	3714      	adds	r7, #20
 800a298:	46bd      	mov	sp, r7
 800a29a:	bc80      	pop	{r7}
 800a29c:	4770      	bx	lr
	...

0800a2a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b084      	sub	sp, #16
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d10b      	bne.n	800a2cc <xQueueGenericReset+0x2c>
	__asm volatile
 800a2b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2b8:	f383 8811 	msr	BASEPRI, r3
 800a2bc:	f3bf 8f6f 	isb	sy
 800a2c0:	f3bf 8f4f 	dsb	sy
 800a2c4:	60bb      	str	r3, [r7, #8]
}
 800a2c6:	bf00      	nop
 800a2c8:	bf00      	nop
 800a2ca:	e7fd      	b.n	800a2c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a2cc:	f001 ff1e 	bl	800c10c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681a      	ldr	r2, [r3, #0]
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2d8:	68f9      	ldr	r1, [r7, #12]
 800a2da:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a2dc:	fb01 f303 	mul.w	r3, r1, r3
 800a2e0:	441a      	add	r2, r3
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681a      	ldr	r2, [r3, #0]
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681a      	ldr	r2, [r3, #0]
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2fc:	3b01      	subs	r3, #1
 800a2fe:	68f9      	ldr	r1, [r7, #12]
 800a300:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a302:	fb01 f303 	mul.w	r3, r1, r3
 800a306:	441a      	add	r2, r3
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	22ff      	movs	r2, #255	@ 0xff
 800a310:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	22ff      	movs	r2, #255	@ 0xff
 800a318:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d114      	bne.n	800a34c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	691b      	ldr	r3, [r3, #16]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d01a      	beq.n	800a360 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	3310      	adds	r3, #16
 800a32e:	4618      	mov	r0, r3
 800a330:	f001 f944 	bl	800b5bc <xTaskRemoveFromEventList>
 800a334:	4603      	mov	r3, r0
 800a336:	2b00      	cmp	r3, #0
 800a338:	d012      	beq.n	800a360 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a33a:	4b0d      	ldr	r3, [pc, #52]	@ (800a370 <xQueueGenericReset+0xd0>)
 800a33c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a340:	601a      	str	r2, [r3, #0]
 800a342:	f3bf 8f4f 	dsb	sy
 800a346:	f3bf 8f6f 	isb	sy
 800a34a:	e009      	b.n	800a360 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	3310      	adds	r3, #16
 800a350:	4618      	mov	r0, r3
 800a352:	f7ff fef5 	bl	800a140 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	3324      	adds	r3, #36	@ 0x24
 800a35a:	4618      	mov	r0, r3
 800a35c:	f7ff fef0 	bl	800a140 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a360:	f001 ff04 	bl	800c16c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a364:	2301      	movs	r3, #1
}
 800a366:	4618      	mov	r0, r3
 800a368:	3710      	adds	r7, #16
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}
 800a36e:	bf00      	nop
 800a370:	e000ed04 	.word	0xe000ed04

0800a374 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a374:	b580      	push	{r7, lr}
 800a376:	b08e      	sub	sp, #56	@ 0x38
 800a378:	af02      	add	r7, sp, #8
 800a37a:	60f8      	str	r0, [r7, #12]
 800a37c:	60b9      	str	r1, [r7, #8]
 800a37e:	607a      	str	r2, [r7, #4]
 800a380:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d10b      	bne.n	800a3a0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a38c:	f383 8811 	msr	BASEPRI, r3
 800a390:	f3bf 8f6f 	isb	sy
 800a394:	f3bf 8f4f 	dsb	sy
 800a398:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a39a:	bf00      	nop
 800a39c:	bf00      	nop
 800a39e:	e7fd      	b.n	800a39c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d10b      	bne.n	800a3be <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a3a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3aa:	f383 8811 	msr	BASEPRI, r3
 800a3ae:	f3bf 8f6f 	isb	sy
 800a3b2:	f3bf 8f4f 	dsb	sy
 800a3b6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a3b8:	bf00      	nop
 800a3ba:	bf00      	nop
 800a3bc:	e7fd      	b.n	800a3ba <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d002      	beq.n	800a3ca <xQueueGenericCreateStatic+0x56>
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d001      	beq.n	800a3ce <xQueueGenericCreateStatic+0x5a>
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	e000      	b.n	800a3d0 <xQueueGenericCreateStatic+0x5c>
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d10b      	bne.n	800a3ec <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a3d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3d8:	f383 8811 	msr	BASEPRI, r3
 800a3dc:	f3bf 8f6f 	isb	sy
 800a3e0:	f3bf 8f4f 	dsb	sy
 800a3e4:	623b      	str	r3, [r7, #32]
}
 800a3e6:	bf00      	nop
 800a3e8:	bf00      	nop
 800a3ea:	e7fd      	b.n	800a3e8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d102      	bne.n	800a3f8 <xQueueGenericCreateStatic+0x84>
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d101      	bne.n	800a3fc <xQueueGenericCreateStatic+0x88>
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	e000      	b.n	800a3fe <xQueueGenericCreateStatic+0x8a>
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d10b      	bne.n	800a41a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a406:	f383 8811 	msr	BASEPRI, r3
 800a40a:	f3bf 8f6f 	isb	sy
 800a40e:	f3bf 8f4f 	dsb	sy
 800a412:	61fb      	str	r3, [r7, #28]
}
 800a414:	bf00      	nop
 800a416:	bf00      	nop
 800a418:	e7fd      	b.n	800a416 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a41a:	2348      	movs	r3, #72	@ 0x48
 800a41c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	2b48      	cmp	r3, #72	@ 0x48
 800a422:	d00b      	beq.n	800a43c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a428:	f383 8811 	msr	BASEPRI, r3
 800a42c:	f3bf 8f6f 	isb	sy
 800a430:	f3bf 8f4f 	dsb	sy
 800a434:	61bb      	str	r3, [r7, #24]
}
 800a436:	bf00      	nop
 800a438:	bf00      	nop
 800a43a:	e7fd      	b.n	800a438 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a442:	2b00      	cmp	r3, #0
 800a444:	d00d      	beq.n	800a462 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a448:	2201      	movs	r2, #1
 800a44a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a44e:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a454:	9300      	str	r3, [sp, #0]
 800a456:	4613      	mov	r3, r2
 800a458:	687a      	ldr	r2, [r7, #4]
 800a45a:	68b9      	ldr	r1, [r7, #8]
 800a45c:	68f8      	ldr	r0, [r7, #12]
 800a45e:	f000 f844 	bl	800a4ea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a464:	4618      	mov	r0, r3
 800a466:	3730      	adds	r7, #48	@ 0x30
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b08a      	sub	sp, #40	@ 0x28
 800a470:	af02      	add	r7, sp, #8
 800a472:	60f8      	str	r0, [r7, #12]
 800a474:	60b9      	str	r1, [r7, #8]
 800a476:	4613      	mov	r3, r2
 800a478:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d10b      	bne.n	800a498 <xQueueGenericCreate+0x2c>
	__asm volatile
 800a480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a484:	f383 8811 	msr	BASEPRI, r3
 800a488:	f3bf 8f6f 	isb	sy
 800a48c:	f3bf 8f4f 	dsb	sy
 800a490:	613b      	str	r3, [r7, #16]
}
 800a492:	bf00      	nop
 800a494:	bf00      	nop
 800a496:	e7fd      	b.n	800a494 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d102      	bne.n	800a4a4 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	61fb      	str	r3, [r7, #28]
 800a4a2:	e004      	b.n	800a4ae <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	68ba      	ldr	r2, [r7, #8]
 800a4a8:	fb02 f303 	mul.w	r3, r2, r3
 800a4ac:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800a4ae:	69fb      	ldr	r3, [r7, #28]
 800a4b0:	3348      	adds	r3, #72	@ 0x48
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f001 ff2c 	bl	800c310 <pvPortMalloc>
 800a4b8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d00f      	beq.n	800a4e0 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800a4c0:	69bb      	ldr	r3, [r7, #24]
 800a4c2:	3348      	adds	r3, #72	@ 0x48
 800a4c4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a4c6:	69bb      	ldr	r3, [r7, #24]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a4ce:	79fa      	ldrb	r2, [r7, #7]
 800a4d0:	69bb      	ldr	r3, [r7, #24]
 800a4d2:	9300      	str	r3, [sp, #0]
 800a4d4:	4613      	mov	r3, r2
 800a4d6:	697a      	ldr	r2, [r7, #20]
 800a4d8:	68b9      	ldr	r1, [r7, #8]
 800a4da:	68f8      	ldr	r0, [r7, #12]
 800a4dc:	f000 f805 	bl	800a4ea <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800a4e0:	69bb      	ldr	r3, [r7, #24]
	}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3720      	adds	r7, #32
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}

0800a4ea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a4ea:	b580      	push	{r7, lr}
 800a4ec:	b084      	sub	sp, #16
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	60f8      	str	r0, [r7, #12]
 800a4f2:	60b9      	str	r1, [r7, #8]
 800a4f4:	607a      	str	r2, [r7, #4]
 800a4f6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d103      	bne.n	800a506 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a4fe:	69bb      	ldr	r3, [r7, #24]
 800a500:	69ba      	ldr	r2, [r7, #24]
 800a502:	601a      	str	r2, [r3, #0]
 800a504:	e002      	b.n	800a50c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a506:	69bb      	ldr	r3, [r7, #24]
 800a508:	687a      	ldr	r2, [r7, #4]
 800a50a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a50c:	69bb      	ldr	r3, [r7, #24]
 800a50e:	68fa      	ldr	r2, [r7, #12]
 800a510:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a512:	69bb      	ldr	r3, [r7, #24]
 800a514:	68ba      	ldr	r2, [r7, #8]
 800a516:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a518:	2101      	movs	r1, #1
 800a51a:	69b8      	ldr	r0, [r7, #24]
 800a51c:	f7ff fec0 	bl	800a2a0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a520:	bf00      	nop
 800a522:	3710      	adds	r7, #16
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b08e      	sub	sp, #56	@ 0x38
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	60b9      	str	r1, [r7, #8]
 800a532:	607a      	str	r2, [r7, #4]
 800a534:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a536:	2300      	movs	r3, #0
 800a538:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a53e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a540:	2b00      	cmp	r3, #0
 800a542:	d10b      	bne.n	800a55c <xQueueGenericSend+0x34>
	__asm volatile
 800a544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a548:	f383 8811 	msr	BASEPRI, r3
 800a54c:	f3bf 8f6f 	isb	sy
 800a550:	f3bf 8f4f 	dsb	sy
 800a554:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a556:	bf00      	nop
 800a558:	bf00      	nop
 800a55a:	e7fd      	b.n	800a558 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d103      	bne.n	800a56a <xQueueGenericSend+0x42>
 800a562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a566:	2b00      	cmp	r3, #0
 800a568:	d101      	bne.n	800a56e <xQueueGenericSend+0x46>
 800a56a:	2301      	movs	r3, #1
 800a56c:	e000      	b.n	800a570 <xQueueGenericSend+0x48>
 800a56e:	2300      	movs	r3, #0
 800a570:	2b00      	cmp	r3, #0
 800a572:	d10b      	bne.n	800a58c <xQueueGenericSend+0x64>
	__asm volatile
 800a574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a578:	f383 8811 	msr	BASEPRI, r3
 800a57c:	f3bf 8f6f 	isb	sy
 800a580:	f3bf 8f4f 	dsb	sy
 800a584:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a586:	bf00      	nop
 800a588:	bf00      	nop
 800a58a:	e7fd      	b.n	800a588 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	2b02      	cmp	r3, #2
 800a590:	d103      	bne.n	800a59a <xQueueGenericSend+0x72>
 800a592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a596:	2b01      	cmp	r3, #1
 800a598:	d101      	bne.n	800a59e <xQueueGenericSend+0x76>
 800a59a:	2301      	movs	r3, #1
 800a59c:	e000      	b.n	800a5a0 <xQueueGenericSend+0x78>
 800a59e:	2300      	movs	r3, #0
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d10b      	bne.n	800a5bc <xQueueGenericSend+0x94>
	__asm volatile
 800a5a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5a8:	f383 8811 	msr	BASEPRI, r3
 800a5ac:	f3bf 8f6f 	isb	sy
 800a5b0:	f3bf 8f4f 	dsb	sy
 800a5b4:	623b      	str	r3, [r7, #32]
}
 800a5b6:	bf00      	nop
 800a5b8:	bf00      	nop
 800a5ba:	e7fd      	b.n	800a5b8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a5bc:	f001 f9c8 	bl	800b950 <xTaskGetSchedulerState>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d102      	bne.n	800a5cc <xQueueGenericSend+0xa4>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d101      	bne.n	800a5d0 <xQueueGenericSend+0xa8>
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	e000      	b.n	800a5d2 <xQueueGenericSend+0xaa>
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d10b      	bne.n	800a5ee <xQueueGenericSend+0xc6>
	__asm volatile
 800a5d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5da:	f383 8811 	msr	BASEPRI, r3
 800a5de:	f3bf 8f6f 	isb	sy
 800a5e2:	f3bf 8f4f 	dsb	sy
 800a5e6:	61fb      	str	r3, [r7, #28]
}
 800a5e8:	bf00      	nop
 800a5ea:	bf00      	nop
 800a5ec:	e7fd      	b.n	800a5ea <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a5ee:	f001 fd8d 	bl	800c10c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a5f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a5f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d302      	bcc.n	800a604 <xQueueGenericSend+0xdc>
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	2b02      	cmp	r3, #2
 800a602:	d129      	bne.n	800a658 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a604:	683a      	ldr	r2, [r7, #0]
 800a606:	68b9      	ldr	r1, [r7, #8]
 800a608:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a60a:	f000 fa8f 	bl	800ab2c <prvCopyDataToQueue>
 800a60e:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a614:	2b00      	cmp	r3, #0
 800a616:	d010      	beq.n	800a63a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a61a:	3324      	adds	r3, #36	@ 0x24
 800a61c:	4618      	mov	r0, r3
 800a61e:	f000 ffcd 	bl	800b5bc <xTaskRemoveFromEventList>
 800a622:	4603      	mov	r3, r0
 800a624:	2b00      	cmp	r3, #0
 800a626:	d013      	beq.n	800a650 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a628:	4b3f      	ldr	r3, [pc, #252]	@ (800a728 <xQueueGenericSend+0x200>)
 800a62a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a62e:	601a      	str	r2, [r3, #0]
 800a630:	f3bf 8f4f 	dsb	sy
 800a634:	f3bf 8f6f 	isb	sy
 800a638:	e00a      	b.n	800a650 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a63a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d007      	beq.n	800a650 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a640:	4b39      	ldr	r3, [pc, #228]	@ (800a728 <xQueueGenericSend+0x200>)
 800a642:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a646:	601a      	str	r2, [r3, #0]
 800a648:	f3bf 8f4f 	dsb	sy
 800a64c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a650:	f001 fd8c 	bl	800c16c <vPortExitCritical>
				return pdPASS;
 800a654:	2301      	movs	r3, #1
 800a656:	e063      	b.n	800a720 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d103      	bne.n	800a666 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a65e:	f001 fd85 	bl	800c16c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a662:	2300      	movs	r3, #0
 800a664:	e05c      	b.n	800a720 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d106      	bne.n	800a67a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a66c:	f107 0314 	add.w	r3, r7, #20
 800a670:	4618      	mov	r0, r3
 800a672:	f001 f807 	bl	800b684 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a676:	2301      	movs	r3, #1
 800a678:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a67a:	f001 fd77 	bl	800c16c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a67e:	f000 fdab 	bl	800b1d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a682:	f001 fd43 	bl	800c10c <vPortEnterCritical>
 800a686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a688:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a68c:	b25b      	sxtb	r3, r3
 800a68e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a692:	d103      	bne.n	800a69c <xQueueGenericSend+0x174>
 800a694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a696:	2200      	movs	r2, #0
 800a698:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a69c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a69e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a6a2:	b25b      	sxtb	r3, r3
 800a6a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6a8:	d103      	bne.n	800a6b2 <xQueueGenericSend+0x18a>
 800a6aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a6b2:	f001 fd5b 	bl	800c16c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a6b6:	1d3a      	adds	r2, r7, #4
 800a6b8:	f107 0314 	add.w	r3, r7, #20
 800a6bc:	4611      	mov	r1, r2
 800a6be:	4618      	mov	r0, r3
 800a6c0:	f000 fff6 	bl	800b6b0 <xTaskCheckForTimeOut>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d124      	bne.n	800a714 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a6ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a6cc:	f000 fb26 	bl	800ad1c <prvIsQueueFull>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d018      	beq.n	800a708 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a6d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6d8:	3310      	adds	r3, #16
 800a6da:	687a      	ldr	r2, [r7, #4]
 800a6dc:	4611      	mov	r1, r2
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f000 ff46 	bl	800b570 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a6e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a6e6:	f000 fab1 	bl	800ac4c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a6ea:	f000 fd83 	bl	800b1f4 <xTaskResumeAll>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	f47f af7c 	bne.w	800a5ee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a6f6:	4b0c      	ldr	r3, [pc, #48]	@ (800a728 <xQueueGenericSend+0x200>)
 800a6f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6fc:	601a      	str	r2, [r3, #0]
 800a6fe:	f3bf 8f4f 	dsb	sy
 800a702:	f3bf 8f6f 	isb	sy
 800a706:	e772      	b.n	800a5ee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a708:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a70a:	f000 fa9f 	bl	800ac4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a70e:	f000 fd71 	bl	800b1f4 <xTaskResumeAll>
 800a712:	e76c      	b.n	800a5ee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a714:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a716:	f000 fa99 	bl	800ac4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a71a:	f000 fd6b 	bl	800b1f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a71e:	2300      	movs	r3, #0
		}
	}
}
 800a720:	4618      	mov	r0, r3
 800a722:	3738      	adds	r7, #56	@ 0x38
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}
 800a728:	e000ed04 	.word	0xe000ed04

0800a72c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b08e      	sub	sp, #56	@ 0x38
 800a730:	af00      	add	r7, sp, #0
 800a732:	60f8      	str	r0, [r7, #12]
 800a734:	60b9      	str	r1, [r7, #8]
 800a736:	607a      	str	r2, [r7, #4]
 800a738:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a73e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a740:	2b00      	cmp	r3, #0
 800a742:	d10b      	bne.n	800a75c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a748:	f383 8811 	msr	BASEPRI, r3
 800a74c:	f3bf 8f6f 	isb	sy
 800a750:	f3bf 8f4f 	dsb	sy
 800a754:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a756:	bf00      	nop
 800a758:	bf00      	nop
 800a75a:	e7fd      	b.n	800a758 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d103      	bne.n	800a76a <xQueueGenericSendFromISR+0x3e>
 800a762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a766:	2b00      	cmp	r3, #0
 800a768:	d101      	bne.n	800a76e <xQueueGenericSendFromISR+0x42>
 800a76a:	2301      	movs	r3, #1
 800a76c:	e000      	b.n	800a770 <xQueueGenericSendFromISR+0x44>
 800a76e:	2300      	movs	r3, #0
 800a770:	2b00      	cmp	r3, #0
 800a772:	d10b      	bne.n	800a78c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a778:	f383 8811 	msr	BASEPRI, r3
 800a77c:	f3bf 8f6f 	isb	sy
 800a780:	f3bf 8f4f 	dsb	sy
 800a784:	623b      	str	r3, [r7, #32]
}
 800a786:	bf00      	nop
 800a788:	bf00      	nop
 800a78a:	e7fd      	b.n	800a788 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	2b02      	cmp	r3, #2
 800a790:	d103      	bne.n	800a79a <xQueueGenericSendFromISR+0x6e>
 800a792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a796:	2b01      	cmp	r3, #1
 800a798:	d101      	bne.n	800a79e <xQueueGenericSendFromISR+0x72>
 800a79a:	2301      	movs	r3, #1
 800a79c:	e000      	b.n	800a7a0 <xQueueGenericSendFromISR+0x74>
 800a79e:	2300      	movs	r3, #0
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d10b      	bne.n	800a7bc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a7a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7a8:	f383 8811 	msr	BASEPRI, r3
 800a7ac:	f3bf 8f6f 	isb	sy
 800a7b0:	f3bf 8f4f 	dsb	sy
 800a7b4:	61fb      	str	r3, [r7, #28]
}
 800a7b6:	bf00      	nop
 800a7b8:	bf00      	nop
 800a7ba:	e7fd      	b.n	800a7b8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a7bc:	f001 fd68 	bl	800c290 <vPortValidateInterruptPriority>
	__asm volatile
 800a7c0:	f3ef 8211 	mrs	r2, BASEPRI
 800a7c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7c8:	f383 8811 	msr	BASEPRI, r3
 800a7cc:	f3bf 8f6f 	isb	sy
 800a7d0:	f3bf 8f4f 	dsb	sy
 800a7d4:	61ba      	str	r2, [r7, #24]
 800a7d6:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a7d8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a7da:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a7dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a7e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d302      	bcc.n	800a7ee <xQueueGenericSendFromISR+0xc2>
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	2b02      	cmp	r3, #2
 800a7ec:	d12c      	bne.n	800a848 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a7ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a7f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a7f8:	683a      	ldr	r2, [r7, #0]
 800a7fa:	68b9      	ldr	r1, [r7, #8]
 800a7fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a7fe:	f000 f995 	bl	800ab2c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a802:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800a806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a80a:	d112      	bne.n	800a832 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a80c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a80e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a810:	2b00      	cmp	r3, #0
 800a812:	d016      	beq.n	800a842 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a816:	3324      	adds	r3, #36	@ 0x24
 800a818:	4618      	mov	r0, r3
 800a81a:	f000 fecf 	bl	800b5bc <xTaskRemoveFromEventList>
 800a81e:	4603      	mov	r3, r0
 800a820:	2b00      	cmp	r3, #0
 800a822:	d00e      	beq.n	800a842 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d00b      	beq.n	800a842 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2201      	movs	r2, #1
 800a82e:	601a      	str	r2, [r3, #0]
 800a830:	e007      	b.n	800a842 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a832:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a836:	3301      	adds	r3, #1
 800a838:	b2db      	uxtb	r3, r3
 800a83a:	b25a      	sxtb	r2, r3
 800a83c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a83e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a842:	2301      	movs	r3, #1
 800a844:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800a846:	e001      	b.n	800a84c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a848:	2300      	movs	r3, #0
 800a84a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a84c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a84e:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	f383 8811 	msr	BASEPRI, r3
}
 800a856:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3738      	adds	r7, #56	@ 0x38
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}
	...

0800a864 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b08c      	sub	sp, #48	@ 0x30
 800a868:	af00      	add	r7, sp, #0
 800a86a:	60f8      	str	r0, [r7, #12]
 800a86c:	60b9      	str	r1, [r7, #8]
 800a86e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a870:	2300      	movs	r3, #0
 800a872:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d10b      	bne.n	800a896 <xQueueReceive+0x32>
	__asm volatile
 800a87e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a882:	f383 8811 	msr	BASEPRI, r3
 800a886:	f3bf 8f6f 	isb	sy
 800a88a:	f3bf 8f4f 	dsb	sy
 800a88e:	623b      	str	r3, [r7, #32]
}
 800a890:	bf00      	nop
 800a892:	bf00      	nop
 800a894:	e7fd      	b.n	800a892 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d103      	bne.n	800a8a4 <xQueueReceive+0x40>
 800a89c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a89e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d101      	bne.n	800a8a8 <xQueueReceive+0x44>
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	e000      	b.n	800a8aa <xQueueReceive+0x46>
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d10b      	bne.n	800a8c6 <xQueueReceive+0x62>
	__asm volatile
 800a8ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8b2:	f383 8811 	msr	BASEPRI, r3
 800a8b6:	f3bf 8f6f 	isb	sy
 800a8ba:	f3bf 8f4f 	dsb	sy
 800a8be:	61fb      	str	r3, [r7, #28]
}
 800a8c0:	bf00      	nop
 800a8c2:	bf00      	nop
 800a8c4:	e7fd      	b.n	800a8c2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a8c6:	f001 f843 	bl	800b950 <xTaskGetSchedulerState>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d102      	bne.n	800a8d6 <xQueueReceive+0x72>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d101      	bne.n	800a8da <xQueueReceive+0x76>
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	e000      	b.n	800a8dc <xQueueReceive+0x78>
 800a8da:	2300      	movs	r3, #0
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d10b      	bne.n	800a8f8 <xQueueReceive+0x94>
	__asm volatile
 800a8e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8e4:	f383 8811 	msr	BASEPRI, r3
 800a8e8:	f3bf 8f6f 	isb	sy
 800a8ec:	f3bf 8f4f 	dsb	sy
 800a8f0:	61bb      	str	r3, [r7, #24]
}
 800a8f2:	bf00      	nop
 800a8f4:	bf00      	nop
 800a8f6:	e7fd      	b.n	800a8f4 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a8f8:	f001 fc08 	bl	800c10c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a8fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a900:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a904:	2b00      	cmp	r3, #0
 800a906:	d01f      	beq.n	800a948 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a908:	68b9      	ldr	r1, [r7, #8]
 800a90a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a90c:	f000 f978 	bl	800ac00 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a912:	1e5a      	subs	r2, r3, #1
 800a914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a916:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a91a:	691b      	ldr	r3, [r3, #16]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d00f      	beq.n	800a940 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a922:	3310      	adds	r3, #16
 800a924:	4618      	mov	r0, r3
 800a926:	f000 fe49 	bl	800b5bc <xTaskRemoveFromEventList>
 800a92a:	4603      	mov	r3, r0
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d007      	beq.n	800a940 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a930:	4b3c      	ldr	r3, [pc, #240]	@ (800aa24 <xQueueReceive+0x1c0>)
 800a932:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a936:	601a      	str	r2, [r3, #0]
 800a938:	f3bf 8f4f 	dsb	sy
 800a93c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a940:	f001 fc14 	bl	800c16c <vPortExitCritical>
				return pdPASS;
 800a944:	2301      	movs	r3, #1
 800a946:	e069      	b.n	800aa1c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d103      	bne.n	800a956 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a94e:	f001 fc0d 	bl	800c16c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a952:	2300      	movs	r3, #0
 800a954:	e062      	b.n	800aa1c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d106      	bne.n	800a96a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a95c:	f107 0310 	add.w	r3, r7, #16
 800a960:	4618      	mov	r0, r3
 800a962:	f000 fe8f 	bl	800b684 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a966:	2301      	movs	r3, #1
 800a968:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a96a:	f001 fbff 	bl	800c16c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a96e:	f000 fc33 	bl	800b1d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a972:	f001 fbcb 	bl	800c10c <vPortEnterCritical>
 800a976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a978:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a97c:	b25b      	sxtb	r3, r3
 800a97e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a982:	d103      	bne.n	800a98c <xQueueReceive+0x128>
 800a984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a986:	2200      	movs	r2, #0
 800a988:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a98c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a98e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a992:	b25b      	sxtb	r3, r3
 800a994:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a998:	d103      	bne.n	800a9a2 <xQueueReceive+0x13e>
 800a99a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a99c:	2200      	movs	r2, #0
 800a99e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a9a2:	f001 fbe3 	bl	800c16c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a9a6:	1d3a      	adds	r2, r7, #4
 800a9a8:	f107 0310 	add.w	r3, r7, #16
 800a9ac:	4611      	mov	r1, r2
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f000 fe7e 	bl	800b6b0 <xTaskCheckForTimeOut>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d123      	bne.n	800aa02 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a9ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a9bc:	f000 f998 	bl	800acf0 <prvIsQueueEmpty>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d017      	beq.n	800a9f6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a9c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9c8:	3324      	adds	r3, #36	@ 0x24
 800a9ca:	687a      	ldr	r2, [r7, #4]
 800a9cc:	4611      	mov	r1, r2
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f000 fdce 	bl	800b570 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a9d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a9d6:	f000 f939 	bl	800ac4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a9da:	f000 fc0b 	bl	800b1f4 <xTaskResumeAll>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d189      	bne.n	800a8f8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a9e4:	4b0f      	ldr	r3, [pc, #60]	@ (800aa24 <xQueueReceive+0x1c0>)
 800a9e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a9ea:	601a      	str	r2, [r3, #0]
 800a9ec:	f3bf 8f4f 	dsb	sy
 800a9f0:	f3bf 8f6f 	isb	sy
 800a9f4:	e780      	b.n	800a8f8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a9f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a9f8:	f000 f928 	bl	800ac4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a9fc:	f000 fbfa 	bl	800b1f4 <xTaskResumeAll>
 800aa00:	e77a      	b.n	800a8f8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aa02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa04:	f000 f922 	bl	800ac4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa08:	f000 fbf4 	bl	800b1f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa0e:	f000 f96f 	bl	800acf0 <prvIsQueueEmpty>
 800aa12:	4603      	mov	r3, r0
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	f43f af6f 	beq.w	800a8f8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aa1a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3730      	adds	r7, #48	@ 0x30
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}
 800aa24:	e000ed04 	.word	0xe000ed04

0800aa28 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b08e      	sub	sp, #56	@ 0x38
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	60f8      	str	r0, [r7, #12]
 800aa30:	60b9      	str	r1, [r7, #8]
 800aa32:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800aa38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d10b      	bne.n	800aa56 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800aa3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa42:	f383 8811 	msr	BASEPRI, r3
 800aa46:	f3bf 8f6f 	isb	sy
 800aa4a:	f3bf 8f4f 	dsb	sy
 800aa4e:	623b      	str	r3, [r7, #32]
}
 800aa50:	bf00      	nop
 800aa52:	bf00      	nop
 800aa54:	e7fd      	b.n	800aa52 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d103      	bne.n	800aa64 <xQueueReceiveFromISR+0x3c>
 800aa5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d101      	bne.n	800aa68 <xQueueReceiveFromISR+0x40>
 800aa64:	2301      	movs	r3, #1
 800aa66:	e000      	b.n	800aa6a <xQueueReceiveFromISR+0x42>
 800aa68:	2300      	movs	r3, #0
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d10b      	bne.n	800aa86 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800aa6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa72:	f383 8811 	msr	BASEPRI, r3
 800aa76:	f3bf 8f6f 	isb	sy
 800aa7a:	f3bf 8f4f 	dsb	sy
 800aa7e:	61fb      	str	r3, [r7, #28]
}
 800aa80:	bf00      	nop
 800aa82:	bf00      	nop
 800aa84:	e7fd      	b.n	800aa82 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa86:	f001 fc03 	bl	800c290 <vPortValidateInterruptPriority>
	__asm volatile
 800aa8a:	f3ef 8211 	mrs	r2, BASEPRI
 800aa8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa92:	f383 8811 	msr	BASEPRI, r3
 800aa96:	f3bf 8f6f 	isb	sy
 800aa9a:	f3bf 8f4f 	dsb	sy
 800aa9e:	61ba      	str	r2, [r7, #24]
 800aaa0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800aaa2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aaa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aaa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaaa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aaac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d02f      	beq.n	800ab12 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800aab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aab4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aab8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aabc:	68b9      	ldr	r1, [r7, #8]
 800aabe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aac0:	f000 f89e 	bl	800ac00 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aac6:	1e5a      	subs	r2, r3, #1
 800aac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaca:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800aacc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800aad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aad4:	d112      	bne.n	800aafc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aad8:	691b      	ldr	r3, [r3, #16]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d016      	beq.n	800ab0c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae0:	3310      	adds	r3, #16
 800aae2:	4618      	mov	r0, r3
 800aae4:	f000 fd6a 	bl	800b5bc <xTaskRemoveFromEventList>
 800aae8:	4603      	mov	r3, r0
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d00e      	beq.n	800ab0c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d00b      	beq.n	800ab0c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	601a      	str	r2, [r3, #0]
 800aafa:	e007      	b.n	800ab0c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800aafc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ab00:	3301      	adds	r3, #1
 800ab02:	b2db      	uxtb	r3, r3
 800ab04:	b25a      	sxtb	r2, r3
 800ab06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab10:	e001      	b.n	800ab16 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800ab12:	2300      	movs	r3, #0
 800ab14:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab18:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	f383 8811 	msr	BASEPRI, r3
}
 800ab20:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ab22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3738      	adds	r7, #56	@ 0x38
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}

0800ab2c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b086      	sub	sp, #24
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	60f8      	str	r0, [r7, #12]
 800ab34:	60b9      	str	r1, [r7, #8]
 800ab36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab40:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d10d      	bne.n	800ab66 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d14d      	bne.n	800abee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	685b      	ldr	r3, [r3, #4]
 800ab56:	4618      	mov	r0, r3
 800ab58:	f000 ff18 	bl	800b98c <xTaskPriorityDisinherit>
 800ab5c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	2200      	movs	r2, #0
 800ab62:	605a      	str	r2, [r3, #4]
 800ab64:	e043      	b.n	800abee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d119      	bne.n	800aba0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	6898      	ldr	r0, [r3, #8]
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab74:	461a      	mov	r2, r3
 800ab76:	68b9      	ldr	r1, [r7, #8]
 800ab78:	f004 f9b9 	bl	800eeee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	689a      	ldr	r2, [r3, #8]
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab84:	441a      	add	r2, r3
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	689a      	ldr	r2, [r3, #8]
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	685b      	ldr	r3, [r3, #4]
 800ab92:	429a      	cmp	r2, r3
 800ab94:	d32b      	bcc.n	800abee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681a      	ldr	r2, [r3, #0]
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	609a      	str	r2, [r3, #8]
 800ab9e:	e026      	b.n	800abee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	68d8      	ldr	r0, [r3, #12]
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aba8:	461a      	mov	r2, r3
 800abaa:	68b9      	ldr	r1, [r7, #8]
 800abac:	f004 f99f 	bl	800eeee <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	68da      	ldr	r2, [r3, #12]
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abb8:	425b      	negs	r3, r3
 800abba:	441a      	add	r2, r3
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	68da      	ldr	r2, [r3, #12]
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	429a      	cmp	r2, r3
 800abca:	d207      	bcs.n	800abdc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	685a      	ldr	r2, [r3, #4]
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abd4:	425b      	negs	r3, r3
 800abd6:	441a      	add	r2, r3
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2b02      	cmp	r3, #2
 800abe0:	d105      	bne.n	800abee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d002      	beq.n	800abee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	3b01      	subs	r3, #1
 800abec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	1c5a      	adds	r2, r3, #1
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800abf6:	697b      	ldr	r3, [r7, #20]
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3718      	adds	r7, #24
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b082      	sub	sp, #8
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d018      	beq.n	800ac44 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	68da      	ldr	r2, [r3, #12]
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac1a:	441a      	add	r2, r3
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	68da      	ldr	r2, [r3, #12]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d303      	bcc.n	800ac34 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681a      	ldr	r2, [r3, #0]
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	68d9      	ldr	r1, [r3, #12]
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac3c:	461a      	mov	r2, r3
 800ac3e:	6838      	ldr	r0, [r7, #0]
 800ac40:	f004 f955 	bl	800eeee <memcpy>
	}
}
 800ac44:	bf00      	nop
 800ac46:	3708      	adds	r7, #8
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}

0800ac4c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b084      	sub	sp, #16
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ac54:	f001 fa5a 	bl	800c10c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ac5e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac60:	e011      	b.n	800ac86 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d012      	beq.n	800ac90 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	3324      	adds	r3, #36	@ 0x24
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f000 fca4 	bl	800b5bc <xTaskRemoveFromEventList>
 800ac74:	4603      	mov	r3, r0
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d001      	beq.n	800ac7e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ac7a:	f000 fd7d 	bl	800b778 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ac7e:	7bfb      	ldrb	r3, [r7, #15]
 800ac80:	3b01      	subs	r3, #1
 800ac82:	b2db      	uxtb	r3, r3
 800ac84:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	dce9      	bgt.n	800ac62 <prvUnlockQueue+0x16>
 800ac8e:	e000      	b.n	800ac92 <prvUnlockQueue+0x46>
					break;
 800ac90:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	22ff      	movs	r2, #255	@ 0xff
 800ac96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ac9a:	f001 fa67 	bl	800c16c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ac9e:	f001 fa35 	bl	800c10c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aca8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800acaa:	e011      	b.n	800acd0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	691b      	ldr	r3, [r3, #16]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d012      	beq.n	800acda <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	3310      	adds	r3, #16
 800acb8:	4618      	mov	r0, r3
 800acba:	f000 fc7f 	bl	800b5bc <xTaskRemoveFromEventList>
 800acbe:	4603      	mov	r3, r0
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d001      	beq.n	800acc8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800acc4:	f000 fd58 	bl	800b778 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800acc8:	7bbb      	ldrb	r3, [r7, #14]
 800acca:	3b01      	subs	r3, #1
 800accc:	b2db      	uxtb	r3, r3
 800acce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800acd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	dce9      	bgt.n	800acac <prvUnlockQueue+0x60>
 800acd8:	e000      	b.n	800acdc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800acda:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	22ff      	movs	r2, #255	@ 0xff
 800ace0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ace4:	f001 fa42 	bl	800c16c <vPortExitCritical>
}
 800ace8:	bf00      	nop
 800acea:	3710      	adds	r7, #16
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b084      	sub	sp, #16
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800acf8:	f001 fa08 	bl	800c10c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d102      	bne.n	800ad0a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ad04:	2301      	movs	r3, #1
 800ad06:	60fb      	str	r3, [r7, #12]
 800ad08:	e001      	b.n	800ad0e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad0e:	f001 fa2d 	bl	800c16c <vPortExitCritical>

	return xReturn;
 800ad12:	68fb      	ldr	r3, [r7, #12]
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	3710      	adds	r7, #16
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}

0800ad1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b084      	sub	sp, #16
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad24:	f001 f9f2 	bl	800c10c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d102      	bne.n	800ad3a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ad34:	2301      	movs	r3, #1
 800ad36:	60fb      	str	r3, [r7, #12]
 800ad38:	e001      	b.n	800ad3e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad3e:	f001 fa15 	bl	800c16c <vPortExitCritical>

	return xReturn;
 800ad42:	68fb      	ldr	r3, [r7, #12]
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3710      	adds	r7, #16
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b08e      	sub	sp, #56	@ 0x38
 800ad50:	af04      	add	r7, sp, #16
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	607a      	str	r2, [r7, #4]
 800ad58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ad5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d10b      	bne.n	800ad78 <xTaskCreateStatic+0x2c>
	__asm volatile
 800ad60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad64:	f383 8811 	msr	BASEPRI, r3
 800ad68:	f3bf 8f6f 	isb	sy
 800ad6c:	f3bf 8f4f 	dsb	sy
 800ad70:	623b      	str	r3, [r7, #32]
}
 800ad72:	bf00      	nop
 800ad74:	bf00      	nop
 800ad76:	e7fd      	b.n	800ad74 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ad78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d10b      	bne.n	800ad96 <xTaskCreateStatic+0x4a>
	__asm volatile
 800ad7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad82:	f383 8811 	msr	BASEPRI, r3
 800ad86:	f3bf 8f6f 	isb	sy
 800ad8a:	f3bf 8f4f 	dsb	sy
 800ad8e:	61fb      	str	r3, [r7, #28]
}
 800ad90:	bf00      	nop
 800ad92:	bf00      	nop
 800ad94:	e7fd      	b.n	800ad92 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ad96:	23b0      	movs	r3, #176	@ 0xb0
 800ad98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	2bb0      	cmp	r3, #176	@ 0xb0
 800ad9e:	d00b      	beq.n	800adb8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ada0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ada4:	f383 8811 	msr	BASEPRI, r3
 800ada8:	f3bf 8f6f 	isb	sy
 800adac:	f3bf 8f4f 	dsb	sy
 800adb0:	61bb      	str	r3, [r7, #24]
}
 800adb2:	bf00      	nop
 800adb4:	bf00      	nop
 800adb6:	e7fd      	b.n	800adb4 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800adb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d01e      	beq.n	800adfc <xTaskCreateStatic+0xb0>
 800adbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d01b      	beq.n	800adfc <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800adc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adc6:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800adc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800adcc:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800adce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800add0:	2202      	movs	r2, #2
 800add2:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800add6:	2300      	movs	r3, #0
 800add8:	9303      	str	r3, [sp, #12]
 800adda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800addc:	9302      	str	r3, [sp, #8]
 800adde:	f107 0314 	add.w	r3, r7, #20
 800ade2:	9301      	str	r3, [sp, #4]
 800ade4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ade6:	9300      	str	r3, [sp, #0]
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	687a      	ldr	r2, [r7, #4]
 800adec:	68b9      	ldr	r1, [r7, #8]
 800adee:	68f8      	ldr	r0, [r7, #12]
 800adf0:	f000 f850 	bl	800ae94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800adf4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800adf6:	f000 f8e5 	bl	800afc4 <prvAddNewTaskToReadyList>
 800adfa:	e001      	b.n	800ae00 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800adfc:	2300      	movs	r3, #0
 800adfe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ae00:	697b      	ldr	r3, [r7, #20]
	}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3728      	adds	r7, #40	@ 0x28
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}

0800ae0a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ae0a:	b580      	push	{r7, lr}
 800ae0c:	b08c      	sub	sp, #48	@ 0x30
 800ae0e:	af04      	add	r7, sp, #16
 800ae10:	60f8      	str	r0, [r7, #12]
 800ae12:	60b9      	str	r1, [r7, #8]
 800ae14:	603b      	str	r3, [r7, #0]
 800ae16:	4613      	mov	r3, r2
 800ae18:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae1a:	88fb      	ldrh	r3, [r7, #6]
 800ae1c:	009b      	lsls	r3, r3, #2
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f001 fa76 	bl	800c310 <pvPortMalloc>
 800ae24:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d00e      	beq.n	800ae4a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800ae2c:	20b0      	movs	r0, #176	@ 0xb0
 800ae2e:	f001 fa6f 	bl	800c310 <pvPortMalloc>
 800ae32:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ae34:	69fb      	ldr	r3, [r7, #28]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d003      	beq.n	800ae42 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ae3a:	69fb      	ldr	r3, [r7, #28]
 800ae3c:	697a      	ldr	r2, [r7, #20]
 800ae3e:	631a      	str	r2, [r3, #48]	@ 0x30
 800ae40:	e005      	b.n	800ae4e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ae42:	6978      	ldr	r0, [r7, #20]
 800ae44:	f001 fb2c 	bl	800c4a0 <vPortFree>
 800ae48:	e001      	b.n	800ae4e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ae4e:	69fb      	ldr	r3, [r7, #28]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d017      	beq.n	800ae84 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ae54:	69fb      	ldr	r3, [r7, #28]
 800ae56:	2200      	movs	r2, #0
 800ae58:	f883 20ad 	strb.w	r2, [r3, #173]	@ 0xad
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ae5c:	88fa      	ldrh	r2, [r7, #6]
 800ae5e:	2300      	movs	r3, #0
 800ae60:	9303      	str	r3, [sp, #12]
 800ae62:	69fb      	ldr	r3, [r7, #28]
 800ae64:	9302      	str	r3, [sp, #8]
 800ae66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae68:	9301      	str	r3, [sp, #4]
 800ae6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae6c:	9300      	str	r3, [sp, #0]
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	68b9      	ldr	r1, [r7, #8]
 800ae72:	68f8      	ldr	r0, [r7, #12]
 800ae74:	f000 f80e 	bl	800ae94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae78:	69f8      	ldr	r0, [r7, #28]
 800ae7a:	f000 f8a3 	bl	800afc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ae7e:	2301      	movs	r3, #1
 800ae80:	61bb      	str	r3, [r7, #24]
 800ae82:	e002      	b.n	800ae8a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ae84:	f04f 33ff 	mov.w	r3, #4294967295
 800ae88:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ae8a:	69bb      	ldr	r3, [r7, #24]
	}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3720      	adds	r7, #32
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b088      	sub	sp, #32
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	60f8      	str	r0, [r7, #12]
 800ae9c:	60b9      	str	r1, [r7, #8]
 800ae9e:	607a      	str	r2, [r7, #4]
 800aea0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800aea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aea4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800aeac:	3b01      	subs	r3, #1
 800aeae:	009b      	lsls	r3, r3, #2
 800aeb0:	4413      	add	r3, r2
 800aeb2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800aeb4:	69bb      	ldr	r3, [r7, #24]
 800aeb6:	f023 0307 	bic.w	r3, r3, #7
 800aeba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aebc:	69bb      	ldr	r3, [r7, #24]
 800aebe:	f003 0307 	and.w	r3, r3, #7
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d00b      	beq.n	800aede <prvInitialiseNewTask+0x4a>
	__asm volatile
 800aec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeca:	f383 8811 	msr	BASEPRI, r3
 800aece:	f3bf 8f6f 	isb	sy
 800aed2:	f3bf 8f4f 	dsb	sy
 800aed6:	617b      	str	r3, [r7, #20]
}
 800aed8:	bf00      	nop
 800aeda:	bf00      	nop
 800aedc:	e7fd      	b.n	800aeda <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aede:	2300      	movs	r3, #0
 800aee0:	61fb      	str	r3, [r7, #28]
 800aee2:	e012      	b.n	800af0a <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aee4:	68ba      	ldr	r2, [r7, #8]
 800aee6:	69fb      	ldr	r3, [r7, #28]
 800aee8:	4413      	add	r3, r2
 800aeea:	7819      	ldrb	r1, [r3, #0]
 800aeec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aeee:	69fb      	ldr	r3, [r7, #28]
 800aef0:	4413      	add	r3, r2
 800aef2:	3334      	adds	r3, #52	@ 0x34
 800aef4:	460a      	mov	r2, r1
 800aef6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800aef8:	68ba      	ldr	r2, [r7, #8]
 800aefa:	69fb      	ldr	r3, [r7, #28]
 800aefc:	4413      	add	r3, r2
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d006      	beq.n	800af12 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af04:	69fb      	ldr	r3, [r7, #28]
 800af06:	3301      	adds	r3, #1
 800af08:	61fb      	str	r3, [r7, #28]
 800af0a:	69fb      	ldr	r3, [r7, #28]
 800af0c:	2b1f      	cmp	r3, #31
 800af0e:	d9e9      	bls.n	800aee4 <prvInitialiseNewTask+0x50>
 800af10:	e000      	b.n	800af14 <prvInitialiseNewTask+0x80>
		{
			break;
 800af12:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800af14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af16:	2200      	movs	r2, #0
 800af18:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800af1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af1e:	2b06      	cmp	r3, #6
 800af20:	d901      	bls.n	800af26 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800af22:	2306      	movs	r3, #6
 800af24:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800af26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800af2a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800af2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800af30:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->uxMutexesHeld = 0;
 800af32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af34:	2200      	movs	r2, #0
 800af36:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800af38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af3a:	3304      	adds	r3, #4
 800af3c:	4618      	mov	r0, r3
 800af3e:	f7ff f91e 	bl	800a17e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800af42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af44:	3318      	adds	r3, #24
 800af46:	4618      	mov	r0, r3
 800af48:	f7ff f919 	bl	800a17e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800af4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af50:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af54:	f1c3 0207 	rsb	r2, r3, #7
 800af58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af5a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800af5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af60:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800af62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af64:	2200      	movs	r2, #0
 800af66:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800af6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af6c:	2200      	movs	r2, #0
 800af6e:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800af72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af74:	335c      	adds	r3, #92	@ 0x5c
 800af76:	224c      	movs	r2, #76	@ 0x4c
 800af78:	2100      	movs	r1, #0
 800af7a:	4618      	mov	r0, r3
 800af7c:	f003 f8b3 	bl	800e0e6 <memset>
 800af80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af82:	4a0d      	ldr	r2, [pc, #52]	@ (800afb8 <prvInitialiseNewTask+0x124>)
 800af84:	661a      	str	r2, [r3, #96]	@ 0x60
 800af86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af88:	4a0c      	ldr	r2, [pc, #48]	@ (800afbc <prvInitialiseNewTask+0x128>)
 800af8a:	665a      	str	r2, [r3, #100]	@ 0x64
 800af8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af8e:	4a0c      	ldr	r2, [pc, #48]	@ (800afc0 <prvInitialiseNewTask+0x12c>)
 800af90:	669a      	str	r2, [r3, #104]	@ 0x68
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800af92:	683a      	ldr	r2, [r7, #0]
 800af94:	68f9      	ldr	r1, [r7, #12]
 800af96:	69b8      	ldr	r0, [r7, #24]
 800af98:	f000 ffc4 	bl	800bf24 <pxPortInitialiseStack>
 800af9c:	4602      	mov	r2, r0
 800af9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afa0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800afa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d002      	beq.n	800afae <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800afa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800afae:	bf00      	nop
 800afb0:	3720      	adds	r7, #32
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}
 800afb6:	bf00      	nop
 800afb8:	20005a24 	.word	0x20005a24
 800afbc:	20005a8c 	.word	0x20005a8c
 800afc0:	20005af4 	.word	0x20005af4

0800afc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b082      	sub	sp, #8
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800afcc:	f001 f89e 	bl	800c10c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800afd0:	4b2a      	ldr	r3, [pc, #168]	@ (800b07c <prvAddNewTaskToReadyList+0xb8>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	3301      	adds	r3, #1
 800afd6:	4a29      	ldr	r2, [pc, #164]	@ (800b07c <prvAddNewTaskToReadyList+0xb8>)
 800afd8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800afda:	4b29      	ldr	r3, [pc, #164]	@ (800b080 <prvAddNewTaskToReadyList+0xbc>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d109      	bne.n	800aff6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800afe2:	4a27      	ldr	r2, [pc, #156]	@ (800b080 <prvAddNewTaskToReadyList+0xbc>)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800afe8:	4b24      	ldr	r3, [pc, #144]	@ (800b07c <prvAddNewTaskToReadyList+0xb8>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	2b01      	cmp	r3, #1
 800afee:	d110      	bne.n	800b012 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800aff0:	f000 fbe6 	bl	800b7c0 <prvInitialiseTaskLists>
 800aff4:	e00d      	b.n	800b012 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800aff6:	4b23      	ldr	r3, [pc, #140]	@ (800b084 <prvAddNewTaskToReadyList+0xc0>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d109      	bne.n	800b012 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800affe:	4b20      	ldr	r3, [pc, #128]	@ (800b080 <prvAddNewTaskToReadyList+0xbc>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b008:	429a      	cmp	r2, r3
 800b00a:	d802      	bhi.n	800b012 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b00c:	4a1c      	ldr	r2, [pc, #112]	@ (800b080 <prvAddNewTaskToReadyList+0xbc>)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b012:	4b1d      	ldr	r3, [pc, #116]	@ (800b088 <prvAddNewTaskToReadyList+0xc4>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	3301      	adds	r3, #1
 800b018:	4a1b      	ldr	r2, [pc, #108]	@ (800b088 <prvAddNewTaskToReadyList+0xc4>)
 800b01a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b020:	2201      	movs	r2, #1
 800b022:	409a      	lsls	r2, r3
 800b024:	4b19      	ldr	r3, [pc, #100]	@ (800b08c <prvAddNewTaskToReadyList+0xc8>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	4313      	orrs	r3, r2
 800b02a:	4a18      	ldr	r2, [pc, #96]	@ (800b08c <prvAddNewTaskToReadyList+0xc8>)
 800b02c:	6013      	str	r3, [r2, #0]
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b032:	4613      	mov	r3, r2
 800b034:	009b      	lsls	r3, r3, #2
 800b036:	4413      	add	r3, r2
 800b038:	009b      	lsls	r3, r3, #2
 800b03a:	4a15      	ldr	r2, [pc, #84]	@ (800b090 <prvAddNewTaskToReadyList+0xcc>)
 800b03c:	441a      	add	r2, r3
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	3304      	adds	r3, #4
 800b042:	4619      	mov	r1, r3
 800b044:	4610      	mov	r0, r2
 800b046:	f7ff f8a6 	bl	800a196 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b04a:	f001 f88f 	bl	800c16c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b04e:	4b0d      	ldr	r3, [pc, #52]	@ (800b084 <prvAddNewTaskToReadyList+0xc0>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d00e      	beq.n	800b074 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b056:	4b0a      	ldr	r3, [pc, #40]	@ (800b080 <prvAddNewTaskToReadyList+0xbc>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b060:	429a      	cmp	r2, r3
 800b062:	d207      	bcs.n	800b074 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b064:	4b0b      	ldr	r3, [pc, #44]	@ (800b094 <prvAddNewTaskToReadyList+0xd0>)
 800b066:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b06a:	601a      	str	r2, [r3, #0]
 800b06c:	f3bf 8f4f 	dsb	sy
 800b070:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b074:	bf00      	nop
 800b076:	3708      	adds	r7, #8
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}
 800b07c:	200009d0 	.word	0x200009d0
 800b080:	200008d0 	.word	0x200008d0
 800b084:	200009dc 	.word	0x200009dc
 800b088:	200009ec 	.word	0x200009ec
 800b08c:	200009d8 	.word	0x200009d8
 800b090:	200008d4 	.word	0x200008d4
 800b094:	e000ed04 	.word	0xe000ed04

0800b098 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b084      	sub	sp, #16
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d018      	beq.n	800b0dc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b0aa:	4b14      	ldr	r3, [pc, #80]	@ (800b0fc <vTaskDelay+0x64>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d00b      	beq.n	800b0ca <vTaskDelay+0x32>
	__asm volatile
 800b0b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0b6:	f383 8811 	msr	BASEPRI, r3
 800b0ba:	f3bf 8f6f 	isb	sy
 800b0be:	f3bf 8f4f 	dsb	sy
 800b0c2:	60bb      	str	r3, [r7, #8]
}
 800b0c4:	bf00      	nop
 800b0c6:	bf00      	nop
 800b0c8:	e7fd      	b.n	800b0c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b0ca:	f000 f885 	bl	800b1d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b0ce:	2100      	movs	r1, #0
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f000 fec1 	bl	800be58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b0d6:	f000 f88d 	bl	800b1f4 <xTaskResumeAll>
 800b0da:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d107      	bne.n	800b0f2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b0e2:	4b07      	ldr	r3, [pc, #28]	@ (800b100 <vTaskDelay+0x68>)
 800b0e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0e8:	601a      	str	r2, [r3, #0]
 800b0ea:	f3bf 8f4f 	dsb	sy
 800b0ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b0f2:	bf00      	nop
 800b0f4:	3710      	adds	r7, #16
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
 800b0fa:	bf00      	nop
 800b0fc:	200009f8 	.word	0x200009f8
 800b100:	e000ed04 	.word	0xe000ed04

0800b104 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b08a      	sub	sp, #40	@ 0x28
 800b108:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b10a:	2300      	movs	r3, #0
 800b10c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b10e:	2300      	movs	r3, #0
 800b110:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b112:	463a      	mov	r2, r7
 800b114:	1d39      	adds	r1, r7, #4
 800b116:	f107 0308 	add.w	r3, r7, #8
 800b11a:	4618      	mov	r0, r3
 800b11c:	f7f6 ff18 	bl	8001f50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b120:	6839      	ldr	r1, [r7, #0]
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	68ba      	ldr	r2, [r7, #8]
 800b126:	9202      	str	r2, [sp, #8]
 800b128:	9301      	str	r3, [sp, #4]
 800b12a:	2300      	movs	r3, #0
 800b12c:	9300      	str	r3, [sp, #0]
 800b12e:	2300      	movs	r3, #0
 800b130:	460a      	mov	r2, r1
 800b132:	4921      	ldr	r1, [pc, #132]	@ (800b1b8 <vTaskStartScheduler+0xb4>)
 800b134:	4821      	ldr	r0, [pc, #132]	@ (800b1bc <vTaskStartScheduler+0xb8>)
 800b136:	f7ff fe09 	bl	800ad4c <xTaskCreateStatic>
 800b13a:	4603      	mov	r3, r0
 800b13c:	4a20      	ldr	r2, [pc, #128]	@ (800b1c0 <vTaskStartScheduler+0xbc>)
 800b13e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b140:	4b1f      	ldr	r3, [pc, #124]	@ (800b1c0 <vTaskStartScheduler+0xbc>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d002      	beq.n	800b14e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b148:	2301      	movs	r3, #1
 800b14a:	617b      	str	r3, [r7, #20]
 800b14c:	e001      	b.n	800b152 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b14e:	2300      	movs	r3, #0
 800b150:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	2b01      	cmp	r3, #1
 800b156:	d11b      	bne.n	800b190 <vTaskStartScheduler+0x8c>
	__asm volatile
 800b158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b15c:	f383 8811 	msr	BASEPRI, r3
 800b160:	f3bf 8f6f 	isb	sy
 800b164:	f3bf 8f4f 	dsb	sy
 800b168:	613b      	str	r3, [r7, #16]
}
 800b16a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b16c:	4b15      	ldr	r3, [pc, #84]	@ (800b1c4 <vTaskStartScheduler+0xc0>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	335c      	adds	r3, #92	@ 0x5c
 800b172:	4a15      	ldr	r2, [pc, #84]	@ (800b1c8 <vTaskStartScheduler+0xc4>)
 800b174:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b176:	4b15      	ldr	r3, [pc, #84]	@ (800b1cc <vTaskStartScheduler+0xc8>)
 800b178:	f04f 32ff 	mov.w	r2, #4294967295
 800b17c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b17e:	4b14      	ldr	r3, [pc, #80]	@ (800b1d0 <vTaskStartScheduler+0xcc>)
 800b180:	2201      	movs	r2, #1
 800b182:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800b184:	4b13      	ldr	r3, [pc, #76]	@ (800b1d4 <vTaskStartScheduler+0xd0>)
 800b186:	2200      	movs	r2, #0
 800b188:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b18a:	f000 ff4d 	bl	800c028 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b18e:	e00f      	b.n	800b1b0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b196:	d10b      	bne.n	800b1b0 <vTaskStartScheduler+0xac>
	__asm volatile
 800b198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b19c:	f383 8811 	msr	BASEPRI, r3
 800b1a0:	f3bf 8f6f 	isb	sy
 800b1a4:	f3bf 8f4f 	dsb	sy
 800b1a8:	60fb      	str	r3, [r7, #12]
}
 800b1aa:	bf00      	nop
 800b1ac:	bf00      	nop
 800b1ae:	e7fd      	b.n	800b1ac <vTaskStartScheduler+0xa8>
}
 800b1b0:	bf00      	nop
 800b1b2:	3718      	adds	r7, #24
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}
 800b1b8:	08011e90 	.word	0x08011e90
 800b1bc:	0800b791 	.word	0x0800b791
 800b1c0:	200009f4 	.word	0x200009f4
 800b1c4:	200008d0 	.word	0x200008d0
 800b1c8:	20000284 	.word	0x20000284
 800b1cc:	200009f0 	.word	0x200009f0
 800b1d0:	200009dc 	.word	0x200009dc
 800b1d4:	200009d4 	.word	0x200009d4

0800b1d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b1d8:	b480      	push	{r7}
 800b1da:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b1dc:	4b04      	ldr	r3, [pc, #16]	@ (800b1f0 <vTaskSuspendAll+0x18>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	3301      	adds	r3, #1
 800b1e2:	4a03      	ldr	r2, [pc, #12]	@ (800b1f0 <vTaskSuspendAll+0x18>)
 800b1e4:	6013      	str	r3, [r2, #0]
}
 800b1e6:	bf00      	nop
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bc80      	pop	{r7}
 800b1ec:	4770      	bx	lr
 800b1ee:	bf00      	nop
 800b1f0:	200009f8 	.word	0x200009f8

0800b1f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b084      	sub	sp, #16
 800b1f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b1fe:	2300      	movs	r3, #0
 800b200:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b202:	4b42      	ldr	r3, [pc, #264]	@ (800b30c <xTaskResumeAll+0x118>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d10b      	bne.n	800b222 <xTaskResumeAll+0x2e>
	__asm volatile
 800b20a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b20e:	f383 8811 	msr	BASEPRI, r3
 800b212:	f3bf 8f6f 	isb	sy
 800b216:	f3bf 8f4f 	dsb	sy
 800b21a:	603b      	str	r3, [r7, #0]
}
 800b21c:	bf00      	nop
 800b21e:	bf00      	nop
 800b220:	e7fd      	b.n	800b21e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b222:	f000 ff73 	bl	800c10c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b226:	4b39      	ldr	r3, [pc, #228]	@ (800b30c <xTaskResumeAll+0x118>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	3b01      	subs	r3, #1
 800b22c:	4a37      	ldr	r2, [pc, #220]	@ (800b30c <xTaskResumeAll+0x118>)
 800b22e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b230:	4b36      	ldr	r3, [pc, #216]	@ (800b30c <xTaskResumeAll+0x118>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d161      	bne.n	800b2fc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b238:	4b35      	ldr	r3, [pc, #212]	@ (800b310 <xTaskResumeAll+0x11c>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d05d      	beq.n	800b2fc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b240:	e02e      	b.n	800b2a0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b242:	4b34      	ldr	r3, [pc, #208]	@ (800b314 <xTaskResumeAll+0x120>)
 800b244:	68db      	ldr	r3, [r3, #12]
 800b246:	68db      	ldr	r3, [r3, #12]
 800b248:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	3318      	adds	r3, #24
 800b24e:	4618      	mov	r0, r3
 800b250:	f7fe fffc 	bl	800a24c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	3304      	adds	r3, #4
 800b258:	4618      	mov	r0, r3
 800b25a:	f7fe fff7 	bl	800a24c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b262:	2201      	movs	r2, #1
 800b264:	409a      	lsls	r2, r3
 800b266:	4b2c      	ldr	r3, [pc, #176]	@ (800b318 <xTaskResumeAll+0x124>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4313      	orrs	r3, r2
 800b26c:	4a2a      	ldr	r2, [pc, #168]	@ (800b318 <xTaskResumeAll+0x124>)
 800b26e:	6013      	str	r3, [r2, #0]
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b274:	4613      	mov	r3, r2
 800b276:	009b      	lsls	r3, r3, #2
 800b278:	4413      	add	r3, r2
 800b27a:	009b      	lsls	r3, r3, #2
 800b27c:	4a27      	ldr	r2, [pc, #156]	@ (800b31c <xTaskResumeAll+0x128>)
 800b27e:	441a      	add	r2, r3
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	3304      	adds	r3, #4
 800b284:	4619      	mov	r1, r3
 800b286:	4610      	mov	r0, r2
 800b288:	f7fe ff85 	bl	800a196 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b290:	4b23      	ldr	r3, [pc, #140]	@ (800b320 <xTaskResumeAll+0x12c>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b296:	429a      	cmp	r2, r3
 800b298:	d302      	bcc.n	800b2a0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b29a:	4b22      	ldr	r3, [pc, #136]	@ (800b324 <xTaskResumeAll+0x130>)
 800b29c:	2201      	movs	r2, #1
 800b29e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b2a0:	4b1c      	ldr	r3, [pc, #112]	@ (800b314 <xTaskResumeAll+0x120>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d1cc      	bne.n	800b242 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d001      	beq.n	800b2b2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b2ae:	f000 fb2b 	bl	800b908 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b2b2:	4b1d      	ldr	r3, [pc, #116]	@ (800b328 <xTaskResumeAll+0x134>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d010      	beq.n	800b2e0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b2be:	f000 f837 	bl	800b330 <xTaskIncrementTick>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d002      	beq.n	800b2ce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b2c8:	4b16      	ldr	r3, [pc, #88]	@ (800b324 <xTaskResumeAll+0x130>)
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	3b01      	subs	r3, #1
 800b2d2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d1f1      	bne.n	800b2be <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800b2da:	4b13      	ldr	r3, [pc, #76]	@ (800b328 <xTaskResumeAll+0x134>)
 800b2dc:	2200      	movs	r2, #0
 800b2de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b2e0:	4b10      	ldr	r3, [pc, #64]	@ (800b324 <xTaskResumeAll+0x130>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d009      	beq.n	800b2fc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b2ec:	4b0f      	ldr	r3, [pc, #60]	@ (800b32c <xTaskResumeAll+0x138>)
 800b2ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b2f2:	601a      	str	r2, [r3, #0]
 800b2f4:	f3bf 8f4f 	dsb	sy
 800b2f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b2fc:	f000 ff36 	bl	800c16c <vPortExitCritical>

	return xAlreadyYielded;
 800b300:	68bb      	ldr	r3, [r7, #8]
}
 800b302:	4618      	mov	r0, r3
 800b304:	3710      	adds	r7, #16
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}
 800b30a:	bf00      	nop
 800b30c:	200009f8 	.word	0x200009f8
 800b310:	200009d0 	.word	0x200009d0
 800b314:	20000990 	.word	0x20000990
 800b318:	200009d8 	.word	0x200009d8
 800b31c:	200008d4 	.word	0x200008d4
 800b320:	200008d0 	.word	0x200008d0
 800b324:	200009e4 	.word	0x200009e4
 800b328:	200009e0 	.word	0x200009e0
 800b32c:	e000ed04 	.word	0xe000ed04

0800b330 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b086      	sub	sp, #24
 800b334:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b336:	2300      	movs	r3, #0
 800b338:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b33a:	4b51      	ldr	r3, [pc, #324]	@ (800b480 <xTaskIncrementTick+0x150>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	f040 808e 	bne.w	800b460 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b344:	4b4f      	ldr	r3, [pc, #316]	@ (800b484 <xTaskIncrementTick+0x154>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	3301      	adds	r3, #1
 800b34a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b34c:	4a4d      	ldr	r2, [pc, #308]	@ (800b484 <xTaskIncrementTick+0x154>)
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d121      	bne.n	800b39c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b358:	4b4b      	ldr	r3, [pc, #300]	@ (800b488 <xTaskIncrementTick+0x158>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d00b      	beq.n	800b37a <xTaskIncrementTick+0x4a>
	__asm volatile
 800b362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b366:	f383 8811 	msr	BASEPRI, r3
 800b36a:	f3bf 8f6f 	isb	sy
 800b36e:	f3bf 8f4f 	dsb	sy
 800b372:	603b      	str	r3, [r7, #0]
}
 800b374:	bf00      	nop
 800b376:	bf00      	nop
 800b378:	e7fd      	b.n	800b376 <xTaskIncrementTick+0x46>
 800b37a:	4b43      	ldr	r3, [pc, #268]	@ (800b488 <xTaskIncrementTick+0x158>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	60fb      	str	r3, [r7, #12]
 800b380:	4b42      	ldr	r3, [pc, #264]	@ (800b48c <xTaskIncrementTick+0x15c>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	4a40      	ldr	r2, [pc, #256]	@ (800b488 <xTaskIncrementTick+0x158>)
 800b386:	6013      	str	r3, [r2, #0]
 800b388:	4a40      	ldr	r2, [pc, #256]	@ (800b48c <xTaskIncrementTick+0x15c>)
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	6013      	str	r3, [r2, #0]
 800b38e:	4b40      	ldr	r3, [pc, #256]	@ (800b490 <xTaskIncrementTick+0x160>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	3301      	adds	r3, #1
 800b394:	4a3e      	ldr	r2, [pc, #248]	@ (800b490 <xTaskIncrementTick+0x160>)
 800b396:	6013      	str	r3, [r2, #0]
 800b398:	f000 fab6 	bl	800b908 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b39c:	4b3d      	ldr	r3, [pc, #244]	@ (800b494 <xTaskIncrementTick+0x164>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	693a      	ldr	r2, [r7, #16]
 800b3a2:	429a      	cmp	r2, r3
 800b3a4:	d34d      	bcc.n	800b442 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3a6:	4b38      	ldr	r3, [pc, #224]	@ (800b488 <xTaskIncrementTick+0x158>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d101      	bne.n	800b3b4 <xTaskIncrementTick+0x84>
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	e000      	b.n	800b3b6 <xTaskIncrementTick+0x86>
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d004      	beq.n	800b3c4 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3ba:	4b36      	ldr	r3, [pc, #216]	@ (800b494 <xTaskIncrementTick+0x164>)
 800b3bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b3c0:	601a      	str	r2, [r3, #0]
					break;
 800b3c2:	e03e      	b.n	800b442 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b3c4:	4b30      	ldr	r3, [pc, #192]	@ (800b488 <xTaskIncrementTick+0x158>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	68db      	ldr	r3, [r3, #12]
 800b3ca:	68db      	ldr	r3, [r3, #12]
 800b3cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b3d4:	693a      	ldr	r2, [r7, #16]
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d203      	bcs.n	800b3e4 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b3dc:	4a2d      	ldr	r2, [pc, #180]	@ (800b494 <xTaskIncrementTick+0x164>)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6013      	str	r3, [r2, #0]
						break;
 800b3e2:	e02e      	b.n	800b442 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	3304      	adds	r3, #4
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f7fe ff2f 	bl	800a24c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d004      	beq.n	800b400 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	3318      	adds	r3, #24
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f7fe ff26 	bl	800a24c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b404:	2201      	movs	r2, #1
 800b406:	409a      	lsls	r2, r3
 800b408:	4b23      	ldr	r3, [pc, #140]	@ (800b498 <xTaskIncrementTick+0x168>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	4313      	orrs	r3, r2
 800b40e:	4a22      	ldr	r2, [pc, #136]	@ (800b498 <xTaskIncrementTick+0x168>)
 800b410:	6013      	str	r3, [r2, #0]
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b416:	4613      	mov	r3, r2
 800b418:	009b      	lsls	r3, r3, #2
 800b41a:	4413      	add	r3, r2
 800b41c:	009b      	lsls	r3, r3, #2
 800b41e:	4a1f      	ldr	r2, [pc, #124]	@ (800b49c <xTaskIncrementTick+0x16c>)
 800b420:	441a      	add	r2, r3
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	3304      	adds	r3, #4
 800b426:	4619      	mov	r1, r3
 800b428:	4610      	mov	r0, r2
 800b42a:	f7fe feb4 	bl	800a196 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b432:	4b1b      	ldr	r3, [pc, #108]	@ (800b4a0 <xTaskIncrementTick+0x170>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b438:	429a      	cmp	r2, r3
 800b43a:	d3b4      	bcc.n	800b3a6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b43c:	2301      	movs	r3, #1
 800b43e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b440:	e7b1      	b.n	800b3a6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b442:	4b17      	ldr	r3, [pc, #92]	@ (800b4a0 <xTaskIncrementTick+0x170>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b448:	4914      	ldr	r1, [pc, #80]	@ (800b49c <xTaskIncrementTick+0x16c>)
 800b44a:	4613      	mov	r3, r2
 800b44c:	009b      	lsls	r3, r3, #2
 800b44e:	4413      	add	r3, r2
 800b450:	009b      	lsls	r3, r3, #2
 800b452:	440b      	add	r3, r1
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	2b01      	cmp	r3, #1
 800b458:	d907      	bls.n	800b46a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800b45a:	2301      	movs	r3, #1
 800b45c:	617b      	str	r3, [r7, #20]
 800b45e:	e004      	b.n	800b46a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b460:	4b10      	ldr	r3, [pc, #64]	@ (800b4a4 <xTaskIncrementTick+0x174>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	3301      	adds	r3, #1
 800b466:	4a0f      	ldr	r2, [pc, #60]	@ (800b4a4 <xTaskIncrementTick+0x174>)
 800b468:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b46a:	4b0f      	ldr	r3, [pc, #60]	@ (800b4a8 <xTaskIncrementTick+0x178>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d001      	beq.n	800b476 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800b472:	2301      	movs	r3, #1
 800b474:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b476:	697b      	ldr	r3, [r7, #20]
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3718      	adds	r7, #24
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}
 800b480:	200009f8 	.word	0x200009f8
 800b484:	200009d4 	.word	0x200009d4
 800b488:	20000988 	.word	0x20000988
 800b48c:	2000098c 	.word	0x2000098c
 800b490:	200009e8 	.word	0x200009e8
 800b494:	200009f0 	.word	0x200009f0
 800b498:	200009d8 	.word	0x200009d8
 800b49c:	200008d4 	.word	0x200008d4
 800b4a0:	200008d0 	.word	0x200008d0
 800b4a4:	200009e0 	.word	0x200009e0
 800b4a8:	200009e4 	.word	0x200009e4

0800b4ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b087      	sub	sp, #28
 800b4b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b4b2:	4b29      	ldr	r3, [pc, #164]	@ (800b558 <vTaskSwitchContext+0xac>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d003      	beq.n	800b4c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b4ba:	4b28      	ldr	r3, [pc, #160]	@ (800b55c <vTaskSwitchContext+0xb0>)
 800b4bc:	2201      	movs	r2, #1
 800b4be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b4c0:	e045      	b.n	800b54e <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800b4c2:	4b26      	ldr	r3, [pc, #152]	@ (800b55c <vTaskSwitchContext+0xb0>)
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800b4c8:	4b25      	ldr	r3, [pc, #148]	@ (800b560 <vTaskSwitchContext+0xb4>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	fab3 f383 	clz	r3, r3
 800b4d4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b4d6:	7afb      	ldrb	r3, [r7, #11]
 800b4d8:	f1c3 031f 	rsb	r3, r3, #31
 800b4dc:	617b      	str	r3, [r7, #20]
 800b4de:	4921      	ldr	r1, [pc, #132]	@ (800b564 <vTaskSwitchContext+0xb8>)
 800b4e0:	697a      	ldr	r2, [r7, #20]
 800b4e2:	4613      	mov	r3, r2
 800b4e4:	009b      	lsls	r3, r3, #2
 800b4e6:	4413      	add	r3, r2
 800b4e8:	009b      	lsls	r3, r3, #2
 800b4ea:	440b      	add	r3, r1
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d10b      	bne.n	800b50a <vTaskSwitchContext+0x5e>
	__asm volatile
 800b4f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4f6:	f383 8811 	msr	BASEPRI, r3
 800b4fa:	f3bf 8f6f 	isb	sy
 800b4fe:	f3bf 8f4f 	dsb	sy
 800b502:	607b      	str	r3, [r7, #4]
}
 800b504:	bf00      	nop
 800b506:	bf00      	nop
 800b508:	e7fd      	b.n	800b506 <vTaskSwitchContext+0x5a>
 800b50a:	697a      	ldr	r2, [r7, #20]
 800b50c:	4613      	mov	r3, r2
 800b50e:	009b      	lsls	r3, r3, #2
 800b510:	4413      	add	r3, r2
 800b512:	009b      	lsls	r3, r3, #2
 800b514:	4a13      	ldr	r2, [pc, #76]	@ (800b564 <vTaskSwitchContext+0xb8>)
 800b516:	4413      	add	r3, r2
 800b518:	613b      	str	r3, [r7, #16]
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	685b      	ldr	r3, [r3, #4]
 800b51e:	685a      	ldr	r2, [r3, #4]
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	605a      	str	r2, [r3, #4]
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	685a      	ldr	r2, [r3, #4]
 800b528:	693b      	ldr	r3, [r7, #16]
 800b52a:	3308      	adds	r3, #8
 800b52c:	429a      	cmp	r2, r3
 800b52e:	d104      	bne.n	800b53a <vTaskSwitchContext+0x8e>
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	685b      	ldr	r3, [r3, #4]
 800b534:	685a      	ldr	r2, [r3, #4]
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	605a      	str	r2, [r3, #4]
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	685b      	ldr	r3, [r3, #4]
 800b53e:	68db      	ldr	r3, [r3, #12]
 800b540:	4a09      	ldr	r2, [pc, #36]	@ (800b568 <vTaskSwitchContext+0xbc>)
 800b542:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b544:	4b08      	ldr	r3, [pc, #32]	@ (800b568 <vTaskSwitchContext+0xbc>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	335c      	adds	r3, #92	@ 0x5c
 800b54a:	4a08      	ldr	r2, [pc, #32]	@ (800b56c <vTaskSwitchContext+0xc0>)
 800b54c:	6013      	str	r3, [r2, #0]
}
 800b54e:	bf00      	nop
 800b550:	371c      	adds	r7, #28
 800b552:	46bd      	mov	sp, r7
 800b554:	bc80      	pop	{r7}
 800b556:	4770      	bx	lr
 800b558:	200009f8 	.word	0x200009f8
 800b55c:	200009e4 	.word	0x200009e4
 800b560:	200009d8 	.word	0x200009d8
 800b564:	200008d4 	.word	0x200008d4
 800b568:	200008d0 	.word	0x200008d0
 800b56c:	20000284 	.word	0x20000284

0800b570 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b084      	sub	sp, #16
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d10b      	bne.n	800b598 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b584:	f383 8811 	msr	BASEPRI, r3
 800b588:	f3bf 8f6f 	isb	sy
 800b58c:	f3bf 8f4f 	dsb	sy
 800b590:	60fb      	str	r3, [r7, #12]
}
 800b592:	bf00      	nop
 800b594:	bf00      	nop
 800b596:	e7fd      	b.n	800b594 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b598:	4b07      	ldr	r3, [pc, #28]	@ (800b5b8 <vTaskPlaceOnEventList+0x48>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	3318      	adds	r3, #24
 800b59e:	4619      	mov	r1, r3
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f7fe fe1b 	bl	800a1dc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b5a6:	2101      	movs	r1, #1
 800b5a8:	6838      	ldr	r0, [r7, #0]
 800b5aa:	f000 fc55 	bl	800be58 <prvAddCurrentTaskToDelayedList>
}
 800b5ae:	bf00      	nop
 800b5b0:	3710      	adds	r7, #16
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	200008d0 	.word	0x200008d0

0800b5bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b086      	sub	sp, #24
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	68db      	ldr	r3, [r3, #12]
 800b5c8:	68db      	ldr	r3, [r3, #12]
 800b5ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d10b      	bne.n	800b5ea <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b5d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5d6:	f383 8811 	msr	BASEPRI, r3
 800b5da:	f3bf 8f6f 	isb	sy
 800b5de:	f3bf 8f4f 	dsb	sy
 800b5e2:	60fb      	str	r3, [r7, #12]
}
 800b5e4:	bf00      	nop
 800b5e6:	bf00      	nop
 800b5e8:	e7fd      	b.n	800b5e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b5ea:	693b      	ldr	r3, [r7, #16]
 800b5ec:	3318      	adds	r3, #24
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f7fe fe2c 	bl	800a24c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5f4:	4b1d      	ldr	r3, [pc, #116]	@ (800b66c <xTaskRemoveFromEventList+0xb0>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d11c      	bne.n	800b636 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	3304      	adds	r3, #4
 800b600:	4618      	mov	r0, r3
 800b602:	f7fe fe23 	bl	800a24c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b60a:	2201      	movs	r2, #1
 800b60c:	409a      	lsls	r2, r3
 800b60e:	4b18      	ldr	r3, [pc, #96]	@ (800b670 <xTaskRemoveFromEventList+0xb4>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	4313      	orrs	r3, r2
 800b614:	4a16      	ldr	r2, [pc, #88]	@ (800b670 <xTaskRemoveFromEventList+0xb4>)
 800b616:	6013      	str	r3, [r2, #0]
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b61c:	4613      	mov	r3, r2
 800b61e:	009b      	lsls	r3, r3, #2
 800b620:	4413      	add	r3, r2
 800b622:	009b      	lsls	r3, r3, #2
 800b624:	4a13      	ldr	r2, [pc, #76]	@ (800b674 <xTaskRemoveFromEventList+0xb8>)
 800b626:	441a      	add	r2, r3
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	3304      	adds	r3, #4
 800b62c:	4619      	mov	r1, r3
 800b62e:	4610      	mov	r0, r2
 800b630:	f7fe fdb1 	bl	800a196 <vListInsertEnd>
 800b634:	e005      	b.n	800b642 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	3318      	adds	r3, #24
 800b63a:	4619      	mov	r1, r3
 800b63c:	480e      	ldr	r0, [pc, #56]	@ (800b678 <xTaskRemoveFromEventList+0xbc>)
 800b63e:	f7fe fdaa 	bl	800a196 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b646:	4b0d      	ldr	r3, [pc, #52]	@ (800b67c <xTaskRemoveFromEventList+0xc0>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d905      	bls.n	800b65c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b650:	2301      	movs	r3, #1
 800b652:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b654:	4b0a      	ldr	r3, [pc, #40]	@ (800b680 <xTaskRemoveFromEventList+0xc4>)
 800b656:	2201      	movs	r2, #1
 800b658:	601a      	str	r2, [r3, #0]
 800b65a:	e001      	b.n	800b660 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b65c:	2300      	movs	r3, #0
 800b65e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800b660:	697b      	ldr	r3, [r7, #20]
}
 800b662:	4618      	mov	r0, r3
 800b664:	3718      	adds	r7, #24
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
 800b66a:	bf00      	nop
 800b66c:	200009f8 	.word	0x200009f8
 800b670:	200009d8 	.word	0x200009d8
 800b674:	200008d4 	.word	0x200008d4
 800b678:	20000990 	.word	0x20000990
 800b67c:	200008d0 	.word	0x200008d0
 800b680:	200009e4 	.word	0x200009e4

0800b684 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b684:	b480      	push	{r7}
 800b686:	b083      	sub	sp, #12
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b68c:	4b06      	ldr	r3, [pc, #24]	@ (800b6a8 <vTaskInternalSetTimeOutState+0x24>)
 800b68e:	681a      	ldr	r2, [r3, #0]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b694:	4b05      	ldr	r3, [pc, #20]	@ (800b6ac <vTaskInternalSetTimeOutState+0x28>)
 800b696:	681a      	ldr	r2, [r3, #0]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	605a      	str	r2, [r3, #4]
}
 800b69c:	bf00      	nop
 800b69e:	370c      	adds	r7, #12
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bc80      	pop	{r7}
 800b6a4:	4770      	bx	lr
 800b6a6:	bf00      	nop
 800b6a8:	200009e8 	.word	0x200009e8
 800b6ac:	200009d4 	.word	0x200009d4

0800b6b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b088      	sub	sp, #32
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d10b      	bne.n	800b6d8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b6c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6c4:	f383 8811 	msr	BASEPRI, r3
 800b6c8:	f3bf 8f6f 	isb	sy
 800b6cc:	f3bf 8f4f 	dsb	sy
 800b6d0:	613b      	str	r3, [r7, #16]
}
 800b6d2:	bf00      	nop
 800b6d4:	bf00      	nop
 800b6d6:	e7fd      	b.n	800b6d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d10b      	bne.n	800b6f6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b6de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6e2:	f383 8811 	msr	BASEPRI, r3
 800b6e6:	f3bf 8f6f 	isb	sy
 800b6ea:	f3bf 8f4f 	dsb	sy
 800b6ee:	60fb      	str	r3, [r7, #12]
}
 800b6f0:	bf00      	nop
 800b6f2:	bf00      	nop
 800b6f4:	e7fd      	b.n	800b6f2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b6f6:	f000 fd09 	bl	800c10c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b6fa:	4b1d      	ldr	r3, [pc, #116]	@ (800b770 <xTaskCheckForTimeOut+0xc0>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	685b      	ldr	r3, [r3, #4]
 800b704:	69ba      	ldr	r2, [r7, #24]
 800b706:	1ad3      	subs	r3, r2, r3
 800b708:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b712:	d102      	bne.n	800b71a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b714:	2300      	movs	r3, #0
 800b716:	61fb      	str	r3, [r7, #28]
 800b718:	e023      	b.n	800b762 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681a      	ldr	r2, [r3, #0]
 800b71e:	4b15      	ldr	r3, [pc, #84]	@ (800b774 <xTaskCheckForTimeOut+0xc4>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	429a      	cmp	r2, r3
 800b724:	d007      	beq.n	800b736 <xTaskCheckForTimeOut+0x86>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	69ba      	ldr	r2, [r7, #24]
 800b72c:	429a      	cmp	r2, r3
 800b72e:	d302      	bcc.n	800b736 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b730:	2301      	movs	r3, #1
 800b732:	61fb      	str	r3, [r7, #28]
 800b734:	e015      	b.n	800b762 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	697a      	ldr	r2, [r7, #20]
 800b73c:	429a      	cmp	r2, r3
 800b73e:	d20b      	bcs.n	800b758 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	681a      	ldr	r2, [r3, #0]
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	1ad2      	subs	r2, r2, r3
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f7ff ff99 	bl	800b684 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b752:	2300      	movs	r3, #0
 800b754:	61fb      	str	r3, [r7, #28]
 800b756:	e004      	b.n	800b762 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	2200      	movs	r2, #0
 800b75c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b75e:	2301      	movs	r3, #1
 800b760:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b762:	f000 fd03 	bl	800c16c <vPortExitCritical>

	return xReturn;
 800b766:	69fb      	ldr	r3, [r7, #28]
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3720      	adds	r7, #32
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}
 800b770:	200009d4 	.word	0x200009d4
 800b774:	200009e8 	.word	0x200009e8

0800b778 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b778:	b480      	push	{r7}
 800b77a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b77c:	4b03      	ldr	r3, [pc, #12]	@ (800b78c <vTaskMissedYield+0x14>)
 800b77e:	2201      	movs	r2, #1
 800b780:	601a      	str	r2, [r3, #0]
}
 800b782:	bf00      	nop
 800b784:	46bd      	mov	sp, r7
 800b786:	bc80      	pop	{r7}
 800b788:	4770      	bx	lr
 800b78a:	bf00      	nop
 800b78c:	200009e4 	.word	0x200009e4

0800b790 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b082      	sub	sp, #8
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b798:	f000 f852 	bl	800b840 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b79c:	4b06      	ldr	r3, [pc, #24]	@ (800b7b8 <prvIdleTask+0x28>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	d9f9      	bls.n	800b798 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b7a4:	4b05      	ldr	r3, [pc, #20]	@ (800b7bc <prvIdleTask+0x2c>)
 800b7a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7aa:	601a      	str	r2, [r3, #0]
 800b7ac:	f3bf 8f4f 	dsb	sy
 800b7b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b7b4:	e7f0      	b.n	800b798 <prvIdleTask+0x8>
 800b7b6:	bf00      	nop
 800b7b8:	200008d4 	.word	0x200008d4
 800b7bc:	e000ed04 	.word	0xe000ed04

0800b7c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b082      	sub	sp, #8
 800b7c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	607b      	str	r3, [r7, #4]
 800b7ca:	e00c      	b.n	800b7e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b7cc:	687a      	ldr	r2, [r7, #4]
 800b7ce:	4613      	mov	r3, r2
 800b7d0:	009b      	lsls	r3, r3, #2
 800b7d2:	4413      	add	r3, r2
 800b7d4:	009b      	lsls	r3, r3, #2
 800b7d6:	4a12      	ldr	r2, [pc, #72]	@ (800b820 <prvInitialiseTaskLists+0x60>)
 800b7d8:	4413      	add	r3, r2
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f7fe fcb0 	bl	800a140 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	3301      	adds	r3, #1
 800b7e4:	607b      	str	r3, [r7, #4]
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2b06      	cmp	r3, #6
 800b7ea:	d9ef      	bls.n	800b7cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b7ec:	480d      	ldr	r0, [pc, #52]	@ (800b824 <prvInitialiseTaskLists+0x64>)
 800b7ee:	f7fe fca7 	bl	800a140 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b7f2:	480d      	ldr	r0, [pc, #52]	@ (800b828 <prvInitialiseTaskLists+0x68>)
 800b7f4:	f7fe fca4 	bl	800a140 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b7f8:	480c      	ldr	r0, [pc, #48]	@ (800b82c <prvInitialiseTaskLists+0x6c>)
 800b7fa:	f7fe fca1 	bl	800a140 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b7fe:	480c      	ldr	r0, [pc, #48]	@ (800b830 <prvInitialiseTaskLists+0x70>)
 800b800:	f7fe fc9e 	bl	800a140 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b804:	480b      	ldr	r0, [pc, #44]	@ (800b834 <prvInitialiseTaskLists+0x74>)
 800b806:	f7fe fc9b 	bl	800a140 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b80a:	4b0b      	ldr	r3, [pc, #44]	@ (800b838 <prvInitialiseTaskLists+0x78>)
 800b80c:	4a05      	ldr	r2, [pc, #20]	@ (800b824 <prvInitialiseTaskLists+0x64>)
 800b80e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b810:	4b0a      	ldr	r3, [pc, #40]	@ (800b83c <prvInitialiseTaskLists+0x7c>)
 800b812:	4a05      	ldr	r2, [pc, #20]	@ (800b828 <prvInitialiseTaskLists+0x68>)
 800b814:	601a      	str	r2, [r3, #0]
}
 800b816:	bf00      	nop
 800b818:	3708      	adds	r7, #8
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
 800b81e:	bf00      	nop
 800b820:	200008d4 	.word	0x200008d4
 800b824:	20000960 	.word	0x20000960
 800b828:	20000974 	.word	0x20000974
 800b82c:	20000990 	.word	0x20000990
 800b830:	200009a4 	.word	0x200009a4
 800b834:	200009bc 	.word	0x200009bc
 800b838:	20000988 	.word	0x20000988
 800b83c:	2000098c 	.word	0x2000098c

0800b840 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b082      	sub	sp, #8
 800b844:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b846:	e019      	b.n	800b87c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b848:	f000 fc60 	bl	800c10c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800b84c:	4b10      	ldr	r3, [pc, #64]	@ (800b890 <prvCheckTasksWaitingTermination+0x50>)
 800b84e:	68db      	ldr	r3, [r3, #12]
 800b850:	68db      	ldr	r3, [r3, #12]
 800b852:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	3304      	adds	r3, #4
 800b858:	4618      	mov	r0, r3
 800b85a:	f7fe fcf7 	bl	800a24c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b85e:	4b0d      	ldr	r3, [pc, #52]	@ (800b894 <prvCheckTasksWaitingTermination+0x54>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	3b01      	subs	r3, #1
 800b864:	4a0b      	ldr	r2, [pc, #44]	@ (800b894 <prvCheckTasksWaitingTermination+0x54>)
 800b866:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b868:	4b0b      	ldr	r3, [pc, #44]	@ (800b898 <prvCheckTasksWaitingTermination+0x58>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	3b01      	subs	r3, #1
 800b86e:	4a0a      	ldr	r2, [pc, #40]	@ (800b898 <prvCheckTasksWaitingTermination+0x58>)
 800b870:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b872:	f000 fc7b 	bl	800c16c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f000 f810 	bl	800b89c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b87c:	4b06      	ldr	r3, [pc, #24]	@ (800b898 <prvCheckTasksWaitingTermination+0x58>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d1e1      	bne.n	800b848 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b884:	bf00      	nop
 800b886:	bf00      	nop
 800b888:	3708      	adds	r7, #8
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}
 800b88e:	bf00      	nop
 800b890:	200009a4 	.word	0x200009a4
 800b894:	200009d0 	.word	0x200009d0
 800b898:	200009b8 	.word	0x200009b8

0800b89c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b084      	sub	sp, #16
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	335c      	adds	r3, #92	@ 0x5c
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f003 fa3f 	bl	800ed2c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d108      	bne.n	800b8ca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f000 fdef 	bl	800c4a0 <vPortFree>
				vPortFree( pxTCB );
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f000 fdec 	bl	800c4a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b8c8:	e019      	b.n	800b8fe <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800b8d0:	2b01      	cmp	r3, #1
 800b8d2:	d103      	bne.n	800b8dc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f000 fde3 	bl	800c4a0 <vPortFree>
	}
 800b8da:	e010      	b.n	800b8fe <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800b8e2:	2b02      	cmp	r3, #2
 800b8e4:	d00b      	beq.n	800b8fe <prvDeleteTCB+0x62>
	__asm volatile
 800b8e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8ea:	f383 8811 	msr	BASEPRI, r3
 800b8ee:	f3bf 8f6f 	isb	sy
 800b8f2:	f3bf 8f4f 	dsb	sy
 800b8f6:	60fb      	str	r3, [r7, #12]
}
 800b8f8:	bf00      	nop
 800b8fa:	bf00      	nop
 800b8fc:	e7fd      	b.n	800b8fa <prvDeleteTCB+0x5e>
	}
 800b8fe:	bf00      	nop
 800b900:	3710      	adds	r7, #16
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}
	...

0800b908 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b908:	b480      	push	{r7}
 800b90a:	b083      	sub	sp, #12
 800b90c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b90e:	4b0e      	ldr	r3, [pc, #56]	@ (800b948 <prvResetNextTaskUnblockTime+0x40>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d101      	bne.n	800b91c <prvResetNextTaskUnblockTime+0x14>
 800b918:	2301      	movs	r3, #1
 800b91a:	e000      	b.n	800b91e <prvResetNextTaskUnblockTime+0x16>
 800b91c:	2300      	movs	r3, #0
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d004      	beq.n	800b92c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b922:	4b0a      	ldr	r3, [pc, #40]	@ (800b94c <prvResetNextTaskUnblockTime+0x44>)
 800b924:	f04f 32ff 	mov.w	r2, #4294967295
 800b928:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b92a:	e008      	b.n	800b93e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b92c:	4b06      	ldr	r3, [pc, #24]	@ (800b948 <prvResetNextTaskUnblockTime+0x40>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	68db      	ldr	r3, [r3, #12]
 800b932:	68db      	ldr	r3, [r3, #12]
 800b934:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	685b      	ldr	r3, [r3, #4]
 800b93a:	4a04      	ldr	r2, [pc, #16]	@ (800b94c <prvResetNextTaskUnblockTime+0x44>)
 800b93c:	6013      	str	r3, [r2, #0]
}
 800b93e:	bf00      	nop
 800b940:	370c      	adds	r7, #12
 800b942:	46bd      	mov	sp, r7
 800b944:	bc80      	pop	{r7}
 800b946:	4770      	bx	lr
 800b948:	20000988 	.word	0x20000988
 800b94c:	200009f0 	.word	0x200009f0

0800b950 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b950:	b480      	push	{r7}
 800b952:	b083      	sub	sp, #12
 800b954:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b956:	4b0b      	ldr	r3, [pc, #44]	@ (800b984 <xTaskGetSchedulerState+0x34>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d102      	bne.n	800b964 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b95e:	2301      	movs	r3, #1
 800b960:	607b      	str	r3, [r7, #4]
 800b962:	e008      	b.n	800b976 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b964:	4b08      	ldr	r3, [pc, #32]	@ (800b988 <xTaskGetSchedulerState+0x38>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d102      	bne.n	800b972 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b96c:	2302      	movs	r3, #2
 800b96e:	607b      	str	r3, [r7, #4]
 800b970:	e001      	b.n	800b976 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b972:	2300      	movs	r3, #0
 800b974:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b976:	687b      	ldr	r3, [r7, #4]
	}
 800b978:	4618      	mov	r0, r3
 800b97a:	370c      	adds	r7, #12
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bc80      	pop	{r7}
 800b980:	4770      	bx	lr
 800b982:	bf00      	nop
 800b984:	200009dc 	.word	0x200009dc
 800b988:	200009f8 	.word	0x200009f8

0800b98c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b086      	sub	sp, #24
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b998:	2300      	movs	r3, #0
 800b99a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d070      	beq.n	800ba84 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b9a2:	4b3b      	ldr	r3, [pc, #236]	@ (800ba90 <xTaskPriorityDisinherit+0x104>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	693a      	ldr	r2, [r7, #16]
 800b9a8:	429a      	cmp	r2, r3
 800b9aa:	d00b      	beq.n	800b9c4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b9ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9b0:	f383 8811 	msr	BASEPRI, r3
 800b9b4:	f3bf 8f6f 	isb	sy
 800b9b8:	f3bf 8f4f 	dsb	sy
 800b9bc:	60fb      	str	r3, [r7, #12]
}
 800b9be:	bf00      	nop
 800b9c0:	bf00      	nop
 800b9c2:	e7fd      	b.n	800b9c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d10b      	bne.n	800b9e4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b9cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9d0:	f383 8811 	msr	BASEPRI, r3
 800b9d4:	f3bf 8f6f 	isb	sy
 800b9d8:	f3bf 8f4f 	dsb	sy
 800b9dc:	60bb      	str	r3, [r7, #8]
}
 800b9de:	bf00      	nop
 800b9e0:	bf00      	nop
 800b9e2:	e7fd      	b.n	800b9e0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b9e4:	693b      	ldr	r3, [r7, #16]
 800b9e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b9e8:	1e5a      	subs	r2, r3, #1
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	659a      	str	r2, [r3, #88]	@ 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b9ee:	693b      	ldr	r3, [r7, #16]
 800b9f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	d044      	beq.n	800ba84 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b9fa:	693b      	ldr	r3, [r7, #16]
 800b9fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d140      	bne.n	800ba84 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba02:	693b      	ldr	r3, [r7, #16]
 800ba04:	3304      	adds	r3, #4
 800ba06:	4618      	mov	r0, r3
 800ba08:	f7fe fc20 	bl	800a24c <uxListRemove>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d115      	bne.n	800ba3e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba16:	491f      	ldr	r1, [pc, #124]	@ (800ba94 <xTaskPriorityDisinherit+0x108>)
 800ba18:	4613      	mov	r3, r2
 800ba1a:	009b      	lsls	r3, r3, #2
 800ba1c:	4413      	add	r3, r2
 800ba1e:	009b      	lsls	r3, r3, #2
 800ba20:	440b      	add	r3, r1
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d10a      	bne.n	800ba3e <xTaskPriorityDisinherit+0xb2>
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba2c:	2201      	movs	r2, #1
 800ba2e:	fa02 f303 	lsl.w	r3, r2, r3
 800ba32:	43da      	mvns	r2, r3
 800ba34:	4b18      	ldr	r3, [pc, #96]	@ (800ba98 <xTaskPriorityDisinherit+0x10c>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	4013      	ands	r3, r2
 800ba3a:	4a17      	ldr	r2, [pc, #92]	@ (800ba98 <xTaskPriorityDisinherit+0x10c>)
 800ba3c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ba42:	693b      	ldr	r3, [r7, #16]
 800ba44:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba4a:	f1c3 0207 	rsb	r2, r3, #7
 800ba4e:	693b      	ldr	r3, [r7, #16]
 800ba50:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ba52:	693b      	ldr	r3, [r7, #16]
 800ba54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba56:	2201      	movs	r2, #1
 800ba58:	409a      	lsls	r2, r3
 800ba5a:	4b0f      	ldr	r3, [pc, #60]	@ (800ba98 <xTaskPriorityDisinherit+0x10c>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	4a0d      	ldr	r2, [pc, #52]	@ (800ba98 <xTaskPriorityDisinherit+0x10c>)
 800ba62:	6013      	str	r3, [r2, #0]
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba68:	4613      	mov	r3, r2
 800ba6a:	009b      	lsls	r3, r3, #2
 800ba6c:	4413      	add	r3, r2
 800ba6e:	009b      	lsls	r3, r3, #2
 800ba70:	4a08      	ldr	r2, [pc, #32]	@ (800ba94 <xTaskPriorityDisinherit+0x108>)
 800ba72:	441a      	add	r2, r3
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	3304      	adds	r3, #4
 800ba78:	4619      	mov	r1, r3
 800ba7a:	4610      	mov	r0, r2
 800ba7c:	f7fe fb8b 	bl	800a196 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ba80:	2301      	movs	r3, #1
 800ba82:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ba84:	697b      	ldr	r3, [r7, #20]
	}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3718      	adds	r7, #24
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}
 800ba8e:	bf00      	nop
 800ba90:	200008d0 	.word	0x200008d0
 800ba94:	200008d4 	.word	0x200008d4
 800ba98:	200009d8 	.word	0x200009d8

0800ba9c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b086      	sub	sp, #24
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	60f8      	str	r0, [r7, #12]
 800baa4:	60b9      	str	r1, [r7, #8]
 800baa6:	607a      	str	r2, [r7, #4]
 800baa8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800baaa:	f000 fb2f 	bl	800c10c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800baae:	4b29      	ldr	r3, [pc, #164]	@ (800bb54 <xTaskNotifyWait+0xb8>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800bab6:	b2db      	uxtb	r3, r3
 800bab8:	2b02      	cmp	r3, #2
 800baba:	d01c      	beq.n	800baf6 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800babc:	4b25      	ldr	r3, [pc, #148]	@ (800bb54 <xTaskNotifyWait+0xb8>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f8d3 10a8 	ldr.w	r1, [r3, #168]	@ 0xa8
 800bac4:	68fa      	ldr	r2, [r7, #12]
 800bac6:	43d2      	mvns	r2, r2
 800bac8:	400a      	ands	r2, r1
 800baca:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800bace:	4b21      	ldr	r3, [pc, #132]	@ (800bb54 <xTaskNotifyWait+0xb8>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	2201      	movs	r2, #1
 800bad4:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac

				if( xTicksToWait > ( TickType_t ) 0 )
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d00b      	beq.n	800baf6 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bade:	2101      	movs	r1, #1
 800bae0:	6838      	ldr	r0, [r7, #0]
 800bae2:	f000 f9b9 	bl	800be58 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800bae6:	4b1c      	ldr	r3, [pc, #112]	@ (800bb58 <xTaskNotifyWait+0xbc>)
 800bae8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800baec:	601a      	str	r2, [r3, #0]
 800baee:	f3bf 8f4f 	dsb	sy
 800baf2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800baf6:	f000 fb39 	bl	800c16c <vPortExitCritical>

		taskENTER_CRITICAL();
 800bafa:	f000 fb07 	bl	800c10c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d005      	beq.n	800bb10 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800bb04:	4b13      	ldr	r3, [pc, #76]	@ (800bb54 <xTaskNotifyWait+0xb8>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800bb10:	4b10      	ldr	r3, [pc, #64]	@ (800bb54 <xTaskNotifyWait+0xb8>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800bb18:	b2db      	uxtb	r3, r3
 800bb1a:	2b02      	cmp	r3, #2
 800bb1c:	d002      	beq.n	800bb24 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	617b      	str	r3, [r7, #20]
 800bb22:	e00a      	b.n	800bb3a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800bb24:	4b0b      	ldr	r3, [pc, #44]	@ (800bb54 <xTaskNotifyWait+0xb8>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f8d3 10a8 	ldr.w	r1, [r3, #168]	@ 0xa8
 800bb2c:	68ba      	ldr	r2, [r7, #8]
 800bb2e:	43d2      	mvns	r2, r2
 800bb30:	400a      	ands	r2, r1
 800bb32:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
				xReturn = pdTRUE;
 800bb36:	2301      	movs	r3, #1
 800bb38:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bb3a:	4b06      	ldr	r3, [pc, #24]	@ (800bb54 <xTaskNotifyWait+0xb8>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
		}
		taskEXIT_CRITICAL();
 800bb44:	f000 fb12 	bl	800c16c <vPortExitCritical>

		return xReturn;
 800bb48:	697b      	ldr	r3, [r7, #20]
	}
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	3718      	adds	r7, #24
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}
 800bb52:	bf00      	nop
 800bb54:	200008d0 	.word	0x200008d0
 800bb58:	e000ed04 	.word	0xe000ed04

0800bb5c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b08a      	sub	sp, #40	@ 0x28
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	60f8      	str	r0, [r7, #12]
 800bb64:	60b9      	str	r1, [r7, #8]
 800bb66:	603b      	str	r3, [r7, #0]
 800bb68:	4613      	mov	r3, r2
 800bb6a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d10b      	bne.n	800bb8e <xTaskGenericNotify+0x32>
	__asm volatile
 800bb76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb7a:	f383 8811 	msr	BASEPRI, r3
 800bb7e:	f3bf 8f6f 	isb	sy
 800bb82:	f3bf 8f4f 	dsb	sy
 800bb86:	61bb      	str	r3, [r7, #24]
}
 800bb88:	bf00      	nop
 800bb8a:	bf00      	nop
 800bb8c:	e7fd      	b.n	800bb8a <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800bb92:	f000 fabb 	bl	800c10c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d004      	beq.n	800bba6 <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800bb9c:	6a3b      	ldr	r3, [r7, #32]
 800bb9e:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800bba6:	6a3b      	ldr	r3, [r7, #32]
 800bba8:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800bbac:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800bbae:	6a3b      	ldr	r3, [r7, #32]
 800bbb0:	2202      	movs	r2, #2
 800bbb2:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac

			switch( eAction )
 800bbb6:	79fb      	ldrb	r3, [r7, #7]
 800bbb8:	2b04      	cmp	r3, #4
 800bbba:	d82e      	bhi.n	800bc1a <xTaskGenericNotify+0xbe>
 800bbbc:	a201      	add	r2, pc, #4	@ (adr r2, 800bbc4 <xTaskGenericNotify+0x68>)
 800bbbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbc2:	bf00      	nop
 800bbc4:	0800bc1b 	.word	0x0800bc1b
 800bbc8:	0800bbd9 	.word	0x0800bbd9
 800bbcc:	0800bbeb 	.word	0x0800bbeb
 800bbd0:	0800bbfb 	.word	0x0800bbfb
 800bbd4:	0800bc05 	.word	0x0800bc05
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800bbd8:	6a3b      	ldr	r3, [r7, #32]
 800bbda:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	431a      	orrs	r2, r3
 800bbe2:	6a3b      	ldr	r3, [r7, #32]
 800bbe4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
					break;
 800bbe8:	e017      	b.n	800bc1a <xTaskGenericNotify+0xbe>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800bbea:	6a3b      	ldr	r3, [r7, #32]
 800bbec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800bbf0:	1c5a      	adds	r2, r3, #1
 800bbf2:	6a3b      	ldr	r3, [r7, #32]
 800bbf4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
					break;
 800bbf8:	e00f      	b.n	800bc1a <xTaskGenericNotify+0xbe>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800bbfa:	6a3b      	ldr	r3, [r7, #32]
 800bbfc:	68ba      	ldr	r2, [r7, #8]
 800bbfe:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
					break;
 800bc02:	e00a      	b.n	800bc1a <xTaskGenericNotify+0xbe>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800bc04:	7ffb      	ldrb	r3, [r7, #31]
 800bc06:	2b02      	cmp	r3, #2
 800bc08:	d004      	beq.n	800bc14 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800bc0a:	6a3b      	ldr	r3, [r7, #32]
 800bc0c:	68ba      	ldr	r2, [r7, #8]
 800bc0e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800bc12:	e001      	b.n	800bc18 <xTaskGenericNotify+0xbc>
						xReturn = pdFAIL;
 800bc14:	2300      	movs	r3, #0
 800bc16:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800bc18:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800bc1a:	7ffb      	ldrb	r3, [r7, #31]
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	d13a      	bne.n	800bc96 <xTaskGenericNotify+0x13a>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc20:	6a3b      	ldr	r3, [r7, #32]
 800bc22:	3304      	adds	r3, #4
 800bc24:	4618      	mov	r0, r3
 800bc26:	f7fe fb11 	bl	800a24c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800bc2a:	6a3b      	ldr	r3, [r7, #32]
 800bc2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc2e:	2201      	movs	r2, #1
 800bc30:	409a      	lsls	r2, r3
 800bc32:	4b1c      	ldr	r3, [pc, #112]	@ (800bca4 <xTaskGenericNotify+0x148>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	4313      	orrs	r3, r2
 800bc38:	4a1a      	ldr	r2, [pc, #104]	@ (800bca4 <xTaskGenericNotify+0x148>)
 800bc3a:	6013      	str	r3, [r2, #0]
 800bc3c:	6a3b      	ldr	r3, [r7, #32]
 800bc3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc40:	4613      	mov	r3, r2
 800bc42:	009b      	lsls	r3, r3, #2
 800bc44:	4413      	add	r3, r2
 800bc46:	009b      	lsls	r3, r3, #2
 800bc48:	4a17      	ldr	r2, [pc, #92]	@ (800bca8 <xTaskGenericNotify+0x14c>)
 800bc4a:	441a      	add	r2, r3
 800bc4c:	6a3b      	ldr	r3, [r7, #32]
 800bc4e:	3304      	adds	r3, #4
 800bc50:	4619      	mov	r1, r3
 800bc52:	4610      	mov	r0, r2
 800bc54:	f7fe fa9f 	bl	800a196 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800bc58:	6a3b      	ldr	r3, [r7, #32]
 800bc5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d00b      	beq.n	800bc78 <xTaskGenericNotify+0x11c>
	__asm volatile
 800bc60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc64:	f383 8811 	msr	BASEPRI, r3
 800bc68:	f3bf 8f6f 	isb	sy
 800bc6c:	f3bf 8f4f 	dsb	sy
 800bc70:	617b      	str	r3, [r7, #20]
}
 800bc72:	bf00      	nop
 800bc74:	bf00      	nop
 800bc76:	e7fd      	b.n	800bc74 <xTaskGenericNotify+0x118>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bc78:	6a3b      	ldr	r3, [r7, #32]
 800bc7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc7c:	4b0b      	ldr	r3, [pc, #44]	@ (800bcac <xTaskGenericNotify+0x150>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc82:	429a      	cmp	r2, r3
 800bc84:	d907      	bls.n	800bc96 <xTaskGenericNotify+0x13a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800bc86:	4b0a      	ldr	r3, [pc, #40]	@ (800bcb0 <xTaskGenericNotify+0x154>)
 800bc88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc8c:	601a      	str	r2, [r3, #0]
 800bc8e:	f3bf 8f4f 	dsb	sy
 800bc92:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800bc96:	f000 fa69 	bl	800c16c <vPortExitCritical>

		return xReturn;
 800bc9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	3728      	adds	r7, #40	@ 0x28
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}
 800bca4:	200009d8 	.word	0x200009d8
 800bca8:	200008d4 	.word	0x200008d4
 800bcac:	200008d0 	.word	0x200008d0
 800bcb0:	e000ed04 	.word	0xe000ed04

0800bcb4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b08e      	sub	sp, #56	@ 0x38
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	60f8      	str	r0, [r7, #12]
 800bcbc:	60b9      	str	r1, [r7, #8]
 800bcbe:	603b      	str	r3, [r7, #0]
 800bcc0:	4613      	mov	r3, r2
 800bcc2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d10b      	bne.n	800bce6 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800bcce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcd2:	f383 8811 	msr	BASEPRI, r3
 800bcd6:	f3bf 8f6f 	isb	sy
 800bcda:	f3bf 8f4f 	dsb	sy
 800bcde:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bce0:	bf00      	nop
 800bce2:	bf00      	nop
 800bce4:	e7fd      	b.n	800bce2 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bce6:	f000 fad3 	bl	800c290 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800bcee:	f3ef 8211 	mrs	r2, BASEPRI
 800bcf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcf6:	f383 8811 	msr	BASEPRI, r3
 800bcfa:	f3bf 8f6f 	isb	sy
 800bcfe:	f3bf 8f4f 	dsb	sy
 800bd02:	623a      	str	r2, [r7, #32]
 800bd04:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800bd06:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bd08:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d004      	beq.n	800bd1a <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800bd10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd12:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800bd1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd1c:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800bd20:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800bd24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd26:	2202      	movs	r2, #2
 800bd28:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac

			switch( eAction )
 800bd2c:	79fb      	ldrb	r3, [r7, #7]
 800bd2e:	2b04      	cmp	r3, #4
 800bd30:	d82e      	bhi.n	800bd90 <xTaskGenericNotifyFromISR+0xdc>
 800bd32:	a201      	add	r2, pc, #4	@ (adr r2, 800bd38 <xTaskGenericNotifyFromISR+0x84>)
 800bd34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd38:	0800bd91 	.word	0x0800bd91
 800bd3c:	0800bd4d 	.word	0x0800bd4d
 800bd40:	0800bd5f 	.word	0x0800bd5f
 800bd44:	0800bd6f 	.word	0x0800bd6f
 800bd48:	0800bd79 	.word	0x0800bd79
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800bd4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd4e:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	431a      	orrs	r2, r3
 800bd56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd58:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
					break;
 800bd5c:	e018      	b.n	800bd90 <xTaskGenericNotifyFromISR+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800bd5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd60:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800bd64:	1c5a      	adds	r2, r3, #1
 800bd66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd68:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
					break;
 800bd6c:	e010      	b.n	800bd90 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800bd6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd70:	68ba      	ldr	r2, [r7, #8]
 800bd72:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
					break;
 800bd76:	e00b      	b.n	800bd90 <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800bd78:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bd7c:	2b02      	cmp	r3, #2
 800bd7e:	d004      	beq.n	800bd8a <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800bd80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd82:	68ba      	ldr	r2, [r7, #8]
 800bd84:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800bd88:	e001      	b.n	800bd8e <xTaskGenericNotifyFromISR+0xda>
						xReturn = pdFAIL;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800bd8e:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800bd90:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bd94:	2b01      	cmp	r3, #1
 800bd96:	d147      	bne.n	800be28 <xTaskGenericNotifyFromISR+0x174>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800bd98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d00b      	beq.n	800bdb8 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 800bda0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bda4:	f383 8811 	msr	BASEPRI, r3
 800bda8:	f3bf 8f6f 	isb	sy
 800bdac:	f3bf 8f4f 	dsb	sy
 800bdb0:	61bb      	str	r3, [r7, #24]
}
 800bdb2:	bf00      	nop
 800bdb4:	bf00      	nop
 800bdb6:	e7fd      	b.n	800bdb4 <xTaskGenericNotifyFromISR+0x100>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bdb8:	4b21      	ldr	r3, [pc, #132]	@ (800be40 <xTaskGenericNotifyFromISR+0x18c>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d11c      	bne.n	800bdfa <xTaskGenericNotifyFromISR+0x146>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bdc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdc2:	3304      	adds	r3, #4
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f7fe fa41 	bl	800a24c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bdca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdce:	2201      	movs	r2, #1
 800bdd0:	409a      	lsls	r2, r3
 800bdd2:	4b1c      	ldr	r3, [pc, #112]	@ (800be44 <xTaskGenericNotifyFromISR+0x190>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	4a1a      	ldr	r2, [pc, #104]	@ (800be44 <xTaskGenericNotifyFromISR+0x190>)
 800bdda:	6013      	str	r3, [r2, #0]
 800bddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bde0:	4613      	mov	r3, r2
 800bde2:	009b      	lsls	r3, r3, #2
 800bde4:	4413      	add	r3, r2
 800bde6:	009b      	lsls	r3, r3, #2
 800bde8:	4a17      	ldr	r2, [pc, #92]	@ (800be48 <xTaskGenericNotifyFromISR+0x194>)
 800bdea:	441a      	add	r2, r3
 800bdec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdee:	3304      	adds	r3, #4
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	4610      	mov	r0, r2
 800bdf4:	f7fe f9cf 	bl	800a196 <vListInsertEnd>
 800bdf8:	e005      	b.n	800be06 <xTaskGenericNotifyFromISR+0x152>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800bdfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdfc:	3318      	adds	r3, #24
 800bdfe:	4619      	mov	r1, r3
 800be00:	4812      	ldr	r0, [pc, #72]	@ (800be4c <xTaskGenericNotifyFromISR+0x198>)
 800be02:	f7fe f9c8 	bl	800a196 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800be06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be0a:	4b11      	ldr	r3, [pc, #68]	@ (800be50 <xTaskGenericNotifyFromISR+0x19c>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be10:	429a      	cmp	r2, r3
 800be12:	d909      	bls.n	800be28 <xTaskGenericNotifyFromISR+0x174>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800be14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be16:	2b00      	cmp	r3, #0
 800be18:	d003      	beq.n	800be22 <xTaskGenericNotifyFromISR+0x16e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800be1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be1c:	2201      	movs	r2, #1
 800be1e:	601a      	str	r2, [r3, #0]
 800be20:	e002      	b.n	800be28 <xTaskGenericNotifyFromISR+0x174>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800be22:	4b0c      	ldr	r3, [pc, #48]	@ (800be54 <xTaskGenericNotifyFromISR+0x1a0>)
 800be24:	2201      	movs	r2, #1
 800be26:	601a      	str	r2, [r3, #0]
 800be28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be2a:	617b      	str	r3, [r7, #20]
	__asm volatile
 800be2c:	697b      	ldr	r3, [r7, #20]
 800be2e:	f383 8811 	msr	BASEPRI, r3
}
 800be32:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800be34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 800be36:	4618      	mov	r0, r3
 800be38:	3738      	adds	r7, #56	@ 0x38
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}
 800be3e:	bf00      	nop
 800be40:	200009f8 	.word	0x200009f8
 800be44:	200009d8 	.word	0x200009d8
 800be48:	200008d4 	.word	0x200008d4
 800be4c:	20000990 	.word	0x20000990
 800be50:	200008d0 	.word	0x200008d0
 800be54:	200009e4 	.word	0x200009e4

0800be58 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b084      	sub	sp, #16
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
 800be60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800be62:	4b29      	ldr	r3, [pc, #164]	@ (800bf08 <prvAddCurrentTaskToDelayedList+0xb0>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be68:	4b28      	ldr	r3, [pc, #160]	@ (800bf0c <prvAddCurrentTaskToDelayedList+0xb4>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	3304      	adds	r3, #4
 800be6e:	4618      	mov	r0, r3
 800be70:	f7fe f9ec 	bl	800a24c <uxListRemove>
 800be74:	4603      	mov	r3, r0
 800be76:	2b00      	cmp	r3, #0
 800be78:	d10b      	bne.n	800be92 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800be7a:	4b24      	ldr	r3, [pc, #144]	@ (800bf0c <prvAddCurrentTaskToDelayedList+0xb4>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be80:	2201      	movs	r2, #1
 800be82:	fa02 f303 	lsl.w	r3, r2, r3
 800be86:	43da      	mvns	r2, r3
 800be88:	4b21      	ldr	r3, [pc, #132]	@ (800bf10 <prvAddCurrentTaskToDelayedList+0xb8>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	4013      	ands	r3, r2
 800be8e:	4a20      	ldr	r2, [pc, #128]	@ (800bf10 <prvAddCurrentTaskToDelayedList+0xb8>)
 800be90:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be98:	d10a      	bne.n	800beb0 <prvAddCurrentTaskToDelayedList+0x58>
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d007      	beq.n	800beb0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bea0:	4b1a      	ldr	r3, [pc, #104]	@ (800bf0c <prvAddCurrentTaskToDelayedList+0xb4>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	3304      	adds	r3, #4
 800bea6:	4619      	mov	r1, r3
 800bea8:	481a      	ldr	r0, [pc, #104]	@ (800bf14 <prvAddCurrentTaskToDelayedList+0xbc>)
 800beaa:	f7fe f974 	bl	800a196 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800beae:	e026      	b.n	800befe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800beb0:	68fa      	ldr	r2, [r7, #12]
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	4413      	add	r3, r2
 800beb6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800beb8:	4b14      	ldr	r3, [pc, #80]	@ (800bf0c <prvAddCurrentTaskToDelayedList+0xb4>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	68ba      	ldr	r2, [r7, #8]
 800bebe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bec0:	68ba      	ldr	r2, [r7, #8]
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	429a      	cmp	r2, r3
 800bec6:	d209      	bcs.n	800bedc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bec8:	4b13      	ldr	r3, [pc, #76]	@ (800bf18 <prvAddCurrentTaskToDelayedList+0xc0>)
 800beca:	681a      	ldr	r2, [r3, #0]
 800becc:	4b0f      	ldr	r3, [pc, #60]	@ (800bf0c <prvAddCurrentTaskToDelayedList+0xb4>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	3304      	adds	r3, #4
 800bed2:	4619      	mov	r1, r3
 800bed4:	4610      	mov	r0, r2
 800bed6:	f7fe f981 	bl	800a1dc <vListInsert>
}
 800beda:	e010      	b.n	800befe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bedc:	4b0f      	ldr	r3, [pc, #60]	@ (800bf1c <prvAddCurrentTaskToDelayedList+0xc4>)
 800bede:	681a      	ldr	r2, [r3, #0]
 800bee0:	4b0a      	ldr	r3, [pc, #40]	@ (800bf0c <prvAddCurrentTaskToDelayedList+0xb4>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	3304      	adds	r3, #4
 800bee6:	4619      	mov	r1, r3
 800bee8:	4610      	mov	r0, r2
 800beea:	f7fe f977 	bl	800a1dc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800beee:	4b0c      	ldr	r3, [pc, #48]	@ (800bf20 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	68ba      	ldr	r2, [r7, #8]
 800bef4:	429a      	cmp	r2, r3
 800bef6:	d202      	bcs.n	800befe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bef8:	4a09      	ldr	r2, [pc, #36]	@ (800bf20 <prvAddCurrentTaskToDelayedList+0xc8>)
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	6013      	str	r3, [r2, #0]
}
 800befe:	bf00      	nop
 800bf00:	3710      	adds	r7, #16
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}
 800bf06:	bf00      	nop
 800bf08:	200009d4 	.word	0x200009d4
 800bf0c:	200008d0 	.word	0x200008d0
 800bf10:	200009d8 	.word	0x200009d8
 800bf14:	200009bc 	.word	0x200009bc
 800bf18:	2000098c 	.word	0x2000098c
 800bf1c:	20000988 	.word	0x20000988
 800bf20:	200009f0 	.word	0x200009f0

0800bf24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bf24:	b480      	push	{r7}
 800bf26:	b085      	sub	sp, #20
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	60f8      	str	r0, [r7, #12]
 800bf2c:	60b9      	str	r1, [r7, #8]
 800bf2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	3b04      	subs	r3, #4
 800bf34:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bf3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	3b04      	subs	r3, #4
 800bf42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	f023 0201 	bic.w	r2, r3, #1
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	3b04      	subs	r3, #4
 800bf52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bf54:	4a08      	ldr	r2, [pc, #32]	@ (800bf78 <pxPortInitialiseStack+0x54>)
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	3b14      	subs	r3, #20
 800bf5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bf60:	687a      	ldr	r2, [r7, #4]
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	3b20      	subs	r3, #32
 800bf6a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	3714      	adds	r7, #20
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bc80      	pop	{r7}
 800bf76:	4770      	bx	lr
 800bf78:	0800bf7d 	.word	0x0800bf7d

0800bf7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	b085      	sub	sp, #20
 800bf80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800bf82:	2300      	movs	r3, #0
 800bf84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bf86:	4b12      	ldr	r3, [pc, #72]	@ (800bfd0 <prvTaskExitError+0x54>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf8e:	d00b      	beq.n	800bfa8 <prvTaskExitError+0x2c>
	__asm volatile
 800bf90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf94:	f383 8811 	msr	BASEPRI, r3
 800bf98:	f3bf 8f6f 	isb	sy
 800bf9c:	f3bf 8f4f 	dsb	sy
 800bfa0:	60fb      	str	r3, [r7, #12]
}
 800bfa2:	bf00      	nop
 800bfa4:	bf00      	nop
 800bfa6:	e7fd      	b.n	800bfa4 <prvTaskExitError+0x28>
	__asm volatile
 800bfa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfac:	f383 8811 	msr	BASEPRI, r3
 800bfb0:	f3bf 8f6f 	isb	sy
 800bfb4:	f3bf 8f4f 	dsb	sy
 800bfb8:	60bb      	str	r3, [r7, #8]
}
 800bfba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bfbc:	bf00      	nop
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d0fc      	beq.n	800bfbe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bfc4:	bf00      	nop
 800bfc6:	bf00      	nop
 800bfc8:	3714      	adds	r7, #20
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bc80      	pop	{r7}
 800bfce:	4770      	bx	lr
 800bfd0:	20000100 	.word	0x20000100
	...

0800bfe0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bfe0:	4b07      	ldr	r3, [pc, #28]	@ (800c000 <pxCurrentTCBConst2>)
 800bfe2:	6819      	ldr	r1, [r3, #0]
 800bfe4:	6808      	ldr	r0, [r1, #0]
 800bfe6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800bfea:	f380 8809 	msr	PSP, r0
 800bfee:	f3bf 8f6f 	isb	sy
 800bff2:	f04f 0000 	mov.w	r0, #0
 800bff6:	f380 8811 	msr	BASEPRI, r0
 800bffa:	f04e 0e0d 	orr.w	lr, lr, #13
 800bffe:	4770      	bx	lr

0800c000 <pxCurrentTCBConst2>:
 800c000:	200008d0 	.word	0x200008d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c004:	bf00      	nop
 800c006:	bf00      	nop

0800c008 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800c008:	4806      	ldr	r0, [pc, #24]	@ (800c024 <prvPortStartFirstTask+0x1c>)
 800c00a:	6800      	ldr	r0, [r0, #0]
 800c00c:	6800      	ldr	r0, [r0, #0]
 800c00e:	f380 8808 	msr	MSP, r0
 800c012:	b662      	cpsie	i
 800c014:	b661      	cpsie	f
 800c016:	f3bf 8f4f 	dsb	sy
 800c01a:	f3bf 8f6f 	isb	sy
 800c01e:	df00      	svc	0
 800c020:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c022:	bf00      	nop
 800c024:	e000ed08 	.word	0xe000ed08

0800c028 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b084      	sub	sp, #16
 800c02c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c02e:	4b32      	ldr	r3, [pc, #200]	@ (800c0f8 <xPortStartScheduler+0xd0>)
 800c030:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	781b      	ldrb	r3, [r3, #0]
 800c036:	b2db      	uxtb	r3, r3
 800c038:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	22ff      	movs	r2, #255	@ 0xff
 800c03e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	781b      	ldrb	r3, [r3, #0]
 800c044:	b2db      	uxtb	r3, r3
 800c046:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c048:	78fb      	ldrb	r3, [r7, #3]
 800c04a:	b2db      	uxtb	r3, r3
 800c04c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c050:	b2da      	uxtb	r2, r3
 800c052:	4b2a      	ldr	r3, [pc, #168]	@ (800c0fc <xPortStartScheduler+0xd4>)
 800c054:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c056:	4b2a      	ldr	r3, [pc, #168]	@ (800c100 <xPortStartScheduler+0xd8>)
 800c058:	2207      	movs	r2, #7
 800c05a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c05c:	e009      	b.n	800c072 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c05e:	4b28      	ldr	r3, [pc, #160]	@ (800c100 <xPortStartScheduler+0xd8>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	3b01      	subs	r3, #1
 800c064:	4a26      	ldr	r2, [pc, #152]	@ (800c100 <xPortStartScheduler+0xd8>)
 800c066:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c068:	78fb      	ldrb	r3, [r7, #3]
 800c06a:	b2db      	uxtb	r3, r3
 800c06c:	005b      	lsls	r3, r3, #1
 800c06e:	b2db      	uxtb	r3, r3
 800c070:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c072:	78fb      	ldrb	r3, [r7, #3]
 800c074:	b2db      	uxtb	r3, r3
 800c076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c07a:	2b80      	cmp	r3, #128	@ 0x80
 800c07c:	d0ef      	beq.n	800c05e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c07e:	4b20      	ldr	r3, [pc, #128]	@ (800c100 <xPortStartScheduler+0xd8>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	f1c3 0307 	rsb	r3, r3, #7
 800c086:	2b04      	cmp	r3, #4
 800c088:	d00b      	beq.n	800c0a2 <xPortStartScheduler+0x7a>
	__asm volatile
 800c08a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c08e:	f383 8811 	msr	BASEPRI, r3
 800c092:	f3bf 8f6f 	isb	sy
 800c096:	f3bf 8f4f 	dsb	sy
 800c09a:	60bb      	str	r3, [r7, #8]
}
 800c09c:	bf00      	nop
 800c09e:	bf00      	nop
 800c0a0:	e7fd      	b.n	800c09e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c0a2:	4b17      	ldr	r3, [pc, #92]	@ (800c100 <xPortStartScheduler+0xd8>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	021b      	lsls	r3, r3, #8
 800c0a8:	4a15      	ldr	r2, [pc, #84]	@ (800c100 <xPortStartScheduler+0xd8>)
 800c0aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c0ac:	4b14      	ldr	r3, [pc, #80]	@ (800c100 <xPortStartScheduler+0xd8>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c0b4:	4a12      	ldr	r2, [pc, #72]	@ (800c100 <xPortStartScheduler+0xd8>)
 800c0b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	b2da      	uxtb	r2, r3
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c0c0:	4b10      	ldr	r3, [pc, #64]	@ (800c104 <xPortStartScheduler+0xdc>)
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	4a0f      	ldr	r2, [pc, #60]	@ (800c104 <xPortStartScheduler+0xdc>)
 800c0c6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c0ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c0cc:	4b0d      	ldr	r3, [pc, #52]	@ (800c104 <xPortStartScheduler+0xdc>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	4a0c      	ldr	r2, [pc, #48]	@ (800c104 <xPortStartScheduler+0xdc>)
 800c0d2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c0d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c0d8:	f000 f8b8 	bl	800c24c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c0dc:	4b0a      	ldr	r3, [pc, #40]	@ (800c108 <xPortStartScheduler+0xe0>)
 800c0de:	2200      	movs	r2, #0
 800c0e0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c0e2:	f7ff ff91 	bl	800c008 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c0e6:	f7ff f9e1 	bl	800b4ac <vTaskSwitchContext>
	prvTaskExitError();
 800c0ea:	f7ff ff47 	bl	800bf7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c0ee:	2300      	movs	r3, #0
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3710      	adds	r7, #16
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}
 800c0f8:	e000e400 	.word	0xe000e400
 800c0fc:	200009fc 	.word	0x200009fc
 800c100:	20000a00 	.word	0x20000a00
 800c104:	e000ed20 	.word	0xe000ed20
 800c108:	20000100 	.word	0x20000100

0800c10c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c10c:	b480      	push	{r7}
 800c10e:	b083      	sub	sp, #12
 800c110:	af00      	add	r7, sp, #0
	__asm volatile
 800c112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c116:	f383 8811 	msr	BASEPRI, r3
 800c11a:	f3bf 8f6f 	isb	sy
 800c11e:	f3bf 8f4f 	dsb	sy
 800c122:	607b      	str	r3, [r7, #4]
}
 800c124:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c126:	4b0f      	ldr	r3, [pc, #60]	@ (800c164 <vPortEnterCritical+0x58>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	3301      	adds	r3, #1
 800c12c:	4a0d      	ldr	r2, [pc, #52]	@ (800c164 <vPortEnterCritical+0x58>)
 800c12e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c130:	4b0c      	ldr	r3, [pc, #48]	@ (800c164 <vPortEnterCritical+0x58>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	2b01      	cmp	r3, #1
 800c136:	d110      	bne.n	800c15a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c138:	4b0b      	ldr	r3, [pc, #44]	@ (800c168 <vPortEnterCritical+0x5c>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	b2db      	uxtb	r3, r3
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d00b      	beq.n	800c15a <vPortEnterCritical+0x4e>
	__asm volatile
 800c142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c146:	f383 8811 	msr	BASEPRI, r3
 800c14a:	f3bf 8f6f 	isb	sy
 800c14e:	f3bf 8f4f 	dsb	sy
 800c152:	603b      	str	r3, [r7, #0]
}
 800c154:	bf00      	nop
 800c156:	bf00      	nop
 800c158:	e7fd      	b.n	800c156 <vPortEnterCritical+0x4a>
	}
}
 800c15a:	bf00      	nop
 800c15c:	370c      	adds	r7, #12
 800c15e:	46bd      	mov	sp, r7
 800c160:	bc80      	pop	{r7}
 800c162:	4770      	bx	lr
 800c164:	20000100 	.word	0x20000100
 800c168:	e000ed04 	.word	0xe000ed04

0800c16c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c16c:	b480      	push	{r7}
 800c16e:	b083      	sub	sp, #12
 800c170:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c172:	4b12      	ldr	r3, [pc, #72]	@ (800c1bc <vPortExitCritical+0x50>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d10b      	bne.n	800c192 <vPortExitCritical+0x26>
	__asm volatile
 800c17a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c17e:	f383 8811 	msr	BASEPRI, r3
 800c182:	f3bf 8f6f 	isb	sy
 800c186:	f3bf 8f4f 	dsb	sy
 800c18a:	607b      	str	r3, [r7, #4]
}
 800c18c:	bf00      	nop
 800c18e:	bf00      	nop
 800c190:	e7fd      	b.n	800c18e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c192:	4b0a      	ldr	r3, [pc, #40]	@ (800c1bc <vPortExitCritical+0x50>)
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	3b01      	subs	r3, #1
 800c198:	4a08      	ldr	r2, [pc, #32]	@ (800c1bc <vPortExitCritical+0x50>)
 800c19a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c19c:	4b07      	ldr	r3, [pc, #28]	@ (800c1bc <vPortExitCritical+0x50>)
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d105      	bne.n	800c1b0 <vPortExitCritical+0x44>
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	f383 8811 	msr	BASEPRI, r3
}
 800c1ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c1b0:	bf00      	nop
 800c1b2:	370c      	adds	r7, #12
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bc80      	pop	{r7}
 800c1b8:	4770      	bx	lr
 800c1ba:	bf00      	nop
 800c1bc:	20000100 	.word	0x20000100

0800c1c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c1c0:	f3ef 8009 	mrs	r0, PSP
 800c1c4:	f3bf 8f6f 	isb	sy
 800c1c8:	4b0d      	ldr	r3, [pc, #52]	@ (800c200 <pxCurrentTCBConst>)
 800c1ca:	681a      	ldr	r2, [r3, #0]
 800c1cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c1d0:	6010      	str	r0, [r2, #0]
 800c1d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800c1d6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c1da:	f380 8811 	msr	BASEPRI, r0
 800c1de:	f7ff f965 	bl	800b4ac <vTaskSwitchContext>
 800c1e2:	f04f 0000 	mov.w	r0, #0
 800c1e6:	f380 8811 	msr	BASEPRI, r0
 800c1ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c1ee:	6819      	ldr	r1, [r3, #0]
 800c1f0:	6808      	ldr	r0, [r1, #0]
 800c1f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c1f6:	f380 8809 	msr	PSP, r0
 800c1fa:	f3bf 8f6f 	isb	sy
 800c1fe:	4770      	bx	lr

0800c200 <pxCurrentTCBConst>:
 800c200:	200008d0 	.word	0x200008d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c204:	bf00      	nop
 800c206:	bf00      	nop

0800c208 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b082      	sub	sp, #8
 800c20c:	af00      	add	r7, sp, #0
	__asm volatile
 800c20e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c212:	f383 8811 	msr	BASEPRI, r3
 800c216:	f3bf 8f6f 	isb	sy
 800c21a:	f3bf 8f4f 	dsb	sy
 800c21e:	607b      	str	r3, [r7, #4]
}
 800c220:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c222:	f7ff f885 	bl	800b330 <xTaskIncrementTick>
 800c226:	4603      	mov	r3, r0
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d003      	beq.n	800c234 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c22c:	4b06      	ldr	r3, [pc, #24]	@ (800c248 <SysTick_Handler+0x40>)
 800c22e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c232:	601a      	str	r2, [r3, #0]
 800c234:	2300      	movs	r3, #0
 800c236:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	f383 8811 	msr	BASEPRI, r3
}
 800c23e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c240:	bf00      	nop
 800c242:	3708      	adds	r7, #8
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}
 800c248:	e000ed04 	.word	0xe000ed04

0800c24c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c24c:	b480      	push	{r7}
 800c24e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c250:	4b0a      	ldr	r3, [pc, #40]	@ (800c27c <vPortSetupTimerInterrupt+0x30>)
 800c252:	2200      	movs	r2, #0
 800c254:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c256:	4b0a      	ldr	r3, [pc, #40]	@ (800c280 <vPortSetupTimerInterrupt+0x34>)
 800c258:	2200      	movs	r2, #0
 800c25a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c25c:	4b09      	ldr	r3, [pc, #36]	@ (800c284 <vPortSetupTimerInterrupt+0x38>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	4a09      	ldr	r2, [pc, #36]	@ (800c288 <vPortSetupTimerInterrupt+0x3c>)
 800c262:	fba2 2303 	umull	r2, r3, r2, r3
 800c266:	099b      	lsrs	r3, r3, #6
 800c268:	4a08      	ldr	r2, [pc, #32]	@ (800c28c <vPortSetupTimerInterrupt+0x40>)
 800c26a:	3b01      	subs	r3, #1
 800c26c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c26e:	4b03      	ldr	r3, [pc, #12]	@ (800c27c <vPortSetupTimerInterrupt+0x30>)
 800c270:	2207      	movs	r2, #7
 800c272:	601a      	str	r2, [r3, #0]
}
 800c274:	bf00      	nop
 800c276:	46bd      	mov	sp, r7
 800c278:	bc80      	pop	{r7}
 800c27a:	4770      	bx	lr
 800c27c:	e000e010 	.word	0xe000e010
 800c280:	e000e018 	.word	0xe000e018
 800c284:	200000e0 	.word	0x200000e0
 800c288:	10624dd3 	.word	0x10624dd3
 800c28c:	e000e014 	.word	0xe000e014

0800c290 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c290:	b480      	push	{r7}
 800c292:	b085      	sub	sp, #20
 800c294:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c296:	f3ef 8305 	mrs	r3, IPSR
 800c29a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	2b0f      	cmp	r3, #15
 800c2a0:	d915      	bls.n	800c2ce <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c2a2:	4a17      	ldr	r2, [pc, #92]	@ (800c300 <vPortValidateInterruptPriority+0x70>)
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	4413      	add	r3, r2
 800c2a8:	781b      	ldrb	r3, [r3, #0]
 800c2aa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c2ac:	4b15      	ldr	r3, [pc, #84]	@ (800c304 <vPortValidateInterruptPriority+0x74>)
 800c2ae:	781b      	ldrb	r3, [r3, #0]
 800c2b0:	7afa      	ldrb	r2, [r7, #11]
 800c2b2:	429a      	cmp	r2, r3
 800c2b4:	d20b      	bcs.n	800c2ce <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c2b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2ba:	f383 8811 	msr	BASEPRI, r3
 800c2be:	f3bf 8f6f 	isb	sy
 800c2c2:	f3bf 8f4f 	dsb	sy
 800c2c6:	607b      	str	r3, [r7, #4]
}
 800c2c8:	bf00      	nop
 800c2ca:	bf00      	nop
 800c2cc:	e7fd      	b.n	800c2ca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c2ce:	4b0e      	ldr	r3, [pc, #56]	@ (800c308 <vPortValidateInterruptPriority+0x78>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c2d6:	4b0d      	ldr	r3, [pc, #52]	@ (800c30c <vPortValidateInterruptPriority+0x7c>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d90b      	bls.n	800c2f6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c2de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2e2:	f383 8811 	msr	BASEPRI, r3
 800c2e6:	f3bf 8f6f 	isb	sy
 800c2ea:	f3bf 8f4f 	dsb	sy
 800c2ee:	603b      	str	r3, [r7, #0]
}
 800c2f0:	bf00      	nop
 800c2f2:	bf00      	nop
 800c2f4:	e7fd      	b.n	800c2f2 <vPortValidateInterruptPriority+0x62>
	}
 800c2f6:	bf00      	nop
 800c2f8:	3714      	adds	r7, #20
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bc80      	pop	{r7}
 800c2fe:	4770      	bx	lr
 800c300:	e000e3f0 	.word	0xe000e3f0
 800c304:	200009fc 	.word	0x200009fc
 800c308:	e000ed0c 	.word	0xe000ed0c
 800c30c:	20000a00 	.word	0x20000a00

0800c310 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b08a      	sub	sp, #40	@ 0x28
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c318:	2300      	movs	r3, #0
 800c31a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c31c:	f7fe ff5c 	bl	800b1d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c320:	4b5a      	ldr	r3, [pc, #360]	@ (800c48c <pvPortMalloc+0x17c>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d101      	bne.n	800c32c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c328:	f000 f916 	bl	800c558 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c32c:	4b58      	ldr	r3, [pc, #352]	@ (800c490 <pvPortMalloc+0x180>)
 800c32e:	681a      	ldr	r2, [r3, #0]
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	4013      	ands	r3, r2
 800c334:	2b00      	cmp	r3, #0
 800c336:	f040 8090 	bne.w	800c45a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d01e      	beq.n	800c37e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c340:	2208      	movs	r2, #8
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	4413      	add	r3, r2
 800c346:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f003 0307 	and.w	r3, r3, #7
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d015      	beq.n	800c37e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f023 0307 	bic.w	r3, r3, #7
 800c358:	3308      	adds	r3, #8
 800c35a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f003 0307 	and.w	r3, r3, #7
 800c362:	2b00      	cmp	r3, #0
 800c364:	d00b      	beq.n	800c37e <pvPortMalloc+0x6e>
	__asm volatile
 800c366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c36a:	f383 8811 	msr	BASEPRI, r3
 800c36e:	f3bf 8f6f 	isb	sy
 800c372:	f3bf 8f4f 	dsb	sy
 800c376:	617b      	str	r3, [r7, #20]
}
 800c378:	bf00      	nop
 800c37a:	bf00      	nop
 800c37c:	e7fd      	b.n	800c37a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d06a      	beq.n	800c45a <pvPortMalloc+0x14a>
 800c384:	4b43      	ldr	r3, [pc, #268]	@ (800c494 <pvPortMalloc+0x184>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	687a      	ldr	r2, [r7, #4]
 800c38a:	429a      	cmp	r2, r3
 800c38c:	d865      	bhi.n	800c45a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c38e:	4b42      	ldr	r3, [pc, #264]	@ (800c498 <pvPortMalloc+0x188>)
 800c390:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c392:	4b41      	ldr	r3, [pc, #260]	@ (800c498 <pvPortMalloc+0x188>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c398:	e004      	b.n	800c3a4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c39a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c39c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c39e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c3a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3a6:	685b      	ldr	r3, [r3, #4]
 800c3a8:	687a      	ldr	r2, [r7, #4]
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	d903      	bls.n	800c3b6 <pvPortMalloc+0xa6>
 800c3ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d1f1      	bne.n	800c39a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c3b6:	4b35      	ldr	r3, [pc, #212]	@ (800c48c <pvPortMalloc+0x17c>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c3bc:	429a      	cmp	r2, r3
 800c3be:	d04c      	beq.n	800c45a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c3c0:	6a3b      	ldr	r3, [r7, #32]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	2208      	movs	r2, #8
 800c3c6:	4413      	add	r3, r2
 800c3c8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c3ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3cc:	681a      	ldr	r2, [r3, #0]
 800c3ce:	6a3b      	ldr	r3, [r7, #32]
 800c3d0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c3d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3d4:	685a      	ldr	r2, [r3, #4]
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	1ad2      	subs	r2, r2, r3
 800c3da:	2308      	movs	r3, #8
 800c3dc:	005b      	lsls	r3, r3, #1
 800c3de:	429a      	cmp	r2, r3
 800c3e0:	d920      	bls.n	800c424 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c3e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	4413      	add	r3, r2
 800c3e8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c3ea:	69bb      	ldr	r3, [r7, #24]
 800c3ec:	f003 0307 	and.w	r3, r3, #7
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d00b      	beq.n	800c40c <pvPortMalloc+0xfc>
	__asm volatile
 800c3f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3f8:	f383 8811 	msr	BASEPRI, r3
 800c3fc:	f3bf 8f6f 	isb	sy
 800c400:	f3bf 8f4f 	dsb	sy
 800c404:	613b      	str	r3, [r7, #16]
}
 800c406:	bf00      	nop
 800c408:	bf00      	nop
 800c40a:	e7fd      	b.n	800c408 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c40c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c40e:	685a      	ldr	r2, [r3, #4]
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	1ad2      	subs	r2, r2, r3
 800c414:	69bb      	ldr	r3, [r7, #24]
 800c416:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c41a:	687a      	ldr	r2, [r7, #4]
 800c41c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c41e:	69b8      	ldr	r0, [r7, #24]
 800c420:	f000 f8fc 	bl	800c61c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c424:	4b1b      	ldr	r3, [pc, #108]	@ (800c494 <pvPortMalloc+0x184>)
 800c426:	681a      	ldr	r2, [r3, #0]
 800c428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c42a:	685b      	ldr	r3, [r3, #4]
 800c42c:	1ad3      	subs	r3, r2, r3
 800c42e:	4a19      	ldr	r2, [pc, #100]	@ (800c494 <pvPortMalloc+0x184>)
 800c430:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c432:	4b18      	ldr	r3, [pc, #96]	@ (800c494 <pvPortMalloc+0x184>)
 800c434:	681a      	ldr	r2, [r3, #0]
 800c436:	4b19      	ldr	r3, [pc, #100]	@ (800c49c <pvPortMalloc+0x18c>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	429a      	cmp	r2, r3
 800c43c:	d203      	bcs.n	800c446 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c43e:	4b15      	ldr	r3, [pc, #84]	@ (800c494 <pvPortMalloc+0x184>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	4a16      	ldr	r2, [pc, #88]	@ (800c49c <pvPortMalloc+0x18c>)
 800c444:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c448:	685a      	ldr	r2, [r3, #4]
 800c44a:	4b11      	ldr	r3, [pc, #68]	@ (800c490 <pvPortMalloc+0x180>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	431a      	orrs	r2, r3
 800c450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c452:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c456:	2200      	movs	r2, #0
 800c458:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c45a:	f7fe fecb 	bl	800b1f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c45e:	69fb      	ldr	r3, [r7, #28]
 800c460:	f003 0307 	and.w	r3, r3, #7
 800c464:	2b00      	cmp	r3, #0
 800c466:	d00b      	beq.n	800c480 <pvPortMalloc+0x170>
	__asm volatile
 800c468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c46c:	f383 8811 	msr	BASEPRI, r3
 800c470:	f3bf 8f6f 	isb	sy
 800c474:	f3bf 8f4f 	dsb	sy
 800c478:	60fb      	str	r3, [r7, #12]
}
 800c47a:	bf00      	nop
 800c47c:	bf00      	nop
 800c47e:	e7fd      	b.n	800c47c <pvPortMalloc+0x16c>
	return pvReturn;
 800c480:	69fb      	ldr	r3, [r7, #28]
}
 800c482:	4618      	mov	r0, r3
 800c484:	3728      	adds	r7, #40	@ 0x28
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}
 800c48a:	bf00      	nop
 800c48c:	20005a0c 	.word	0x20005a0c
 800c490:	20005a18 	.word	0x20005a18
 800c494:	20005a10 	.word	0x20005a10
 800c498:	20005a04 	.word	0x20005a04
 800c49c:	20005a14 	.word	0x20005a14

0800c4a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b086      	sub	sp, #24
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d04a      	beq.n	800c548 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c4b2:	2308      	movs	r3, #8
 800c4b4:	425b      	negs	r3, r3
 800c4b6:	697a      	ldr	r2, [r7, #20]
 800c4b8:	4413      	add	r3, r2
 800c4ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c4bc:	697b      	ldr	r3, [r7, #20]
 800c4be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	685a      	ldr	r2, [r3, #4]
 800c4c4:	4b22      	ldr	r3, [pc, #136]	@ (800c550 <vPortFree+0xb0>)
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	4013      	ands	r3, r2
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d10b      	bne.n	800c4e6 <vPortFree+0x46>
	__asm volatile
 800c4ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4d2:	f383 8811 	msr	BASEPRI, r3
 800c4d6:	f3bf 8f6f 	isb	sy
 800c4da:	f3bf 8f4f 	dsb	sy
 800c4de:	60fb      	str	r3, [r7, #12]
}
 800c4e0:	bf00      	nop
 800c4e2:	bf00      	nop
 800c4e4:	e7fd      	b.n	800c4e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d00b      	beq.n	800c506 <vPortFree+0x66>
	__asm volatile
 800c4ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4f2:	f383 8811 	msr	BASEPRI, r3
 800c4f6:	f3bf 8f6f 	isb	sy
 800c4fa:	f3bf 8f4f 	dsb	sy
 800c4fe:	60bb      	str	r3, [r7, #8]
}
 800c500:	bf00      	nop
 800c502:	bf00      	nop
 800c504:	e7fd      	b.n	800c502 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c506:	693b      	ldr	r3, [r7, #16]
 800c508:	685a      	ldr	r2, [r3, #4]
 800c50a:	4b11      	ldr	r3, [pc, #68]	@ (800c550 <vPortFree+0xb0>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	4013      	ands	r3, r2
 800c510:	2b00      	cmp	r3, #0
 800c512:	d019      	beq.n	800c548 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d115      	bne.n	800c548 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c51c:	693b      	ldr	r3, [r7, #16]
 800c51e:	685a      	ldr	r2, [r3, #4]
 800c520:	4b0b      	ldr	r3, [pc, #44]	@ (800c550 <vPortFree+0xb0>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	43db      	mvns	r3, r3
 800c526:	401a      	ands	r2, r3
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c52c:	f7fe fe54 	bl	800b1d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	685a      	ldr	r2, [r3, #4]
 800c534:	4b07      	ldr	r3, [pc, #28]	@ (800c554 <vPortFree+0xb4>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	4413      	add	r3, r2
 800c53a:	4a06      	ldr	r2, [pc, #24]	@ (800c554 <vPortFree+0xb4>)
 800c53c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c53e:	6938      	ldr	r0, [r7, #16]
 800c540:	f000 f86c 	bl	800c61c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c544:	f7fe fe56 	bl	800b1f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c548:	bf00      	nop
 800c54a:	3718      	adds	r7, #24
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}
 800c550:	20005a18 	.word	0x20005a18
 800c554:	20005a10 	.word	0x20005a10

0800c558 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c558:	b480      	push	{r7}
 800c55a:	b085      	sub	sp, #20
 800c55c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c55e:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 800c562:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c564:	4b27      	ldr	r3, [pc, #156]	@ (800c604 <prvHeapInit+0xac>)
 800c566:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	f003 0307 	and.w	r3, r3, #7
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d00c      	beq.n	800c58c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	3307      	adds	r3, #7
 800c576:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	f023 0307 	bic.w	r3, r3, #7
 800c57e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c580:	68ba      	ldr	r2, [r7, #8]
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	1ad3      	subs	r3, r2, r3
 800c586:	4a1f      	ldr	r2, [pc, #124]	@ (800c604 <prvHeapInit+0xac>)
 800c588:	4413      	add	r3, r2
 800c58a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c590:	4a1d      	ldr	r2, [pc, #116]	@ (800c608 <prvHeapInit+0xb0>)
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c596:	4b1c      	ldr	r3, [pc, #112]	@ (800c608 <prvHeapInit+0xb0>)
 800c598:	2200      	movs	r2, #0
 800c59a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	68ba      	ldr	r2, [r7, #8]
 800c5a0:	4413      	add	r3, r2
 800c5a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c5a4:	2208      	movs	r2, #8
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	1a9b      	subs	r3, r3, r2
 800c5aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	f023 0307 	bic.w	r3, r3, #7
 800c5b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	4a15      	ldr	r2, [pc, #84]	@ (800c60c <prvHeapInit+0xb4>)
 800c5b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c5ba:	4b14      	ldr	r3, [pc, #80]	@ (800c60c <prvHeapInit+0xb4>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	2200      	movs	r2, #0
 800c5c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c5c2:	4b12      	ldr	r3, [pc, #72]	@ (800c60c <prvHeapInit+0xb4>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	68fa      	ldr	r2, [r7, #12]
 800c5d2:	1ad2      	subs	r2, r2, r3
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c5d8:	4b0c      	ldr	r3, [pc, #48]	@ (800c60c <prvHeapInit+0xb4>)
 800c5da:	681a      	ldr	r2, [r3, #0]
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	685b      	ldr	r3, [r3, #4]
 800c5e4:	4a0a      	ldr	r2, [pc, #40]	@ (800c610 <prvHeapInit+0xb8>)
 800c5e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	685b      	ldr	r3, [r3, #4]
 800c5ec:	4a09      	ldr	r2, [pc, #36]	@ (800c614 <prvHeapInit+0xbc>)
 800c5ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c5f0:	4b09      	ldr	r3, [pc, #36]	@ (800c618 <prvHeapInit+0xc0>)
 800c5f2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c5f6:	601a      	str	r2, [r3, #0]
}
 800c5f8:	bf00      	nop
 800c5fa:	3714      	adds	r7, #20
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bc80      	pop	{r7}
 800c600:	4770      	bx	lr
 800c602:	bf00      	nop
 800c604:	20000a04 	.word	0x20000a04
 800c608:	20005a04 	.word	0x20005a04
 800c60c:	20005a0c 	.word	0x20005a0c
 800c610:	20005a14 	.word	0x20005a14
 800c614:	20005a10 	.word	0x20005a10
 800c618:	20005a18 	.word	0x20005a18

0800c61c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c61c:	b480      	push	{r7}
 800c61e:	b085      	sub	sp, #20
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c624:	4b27      	ldr	r3, [pc, #156]	@ (800c6c4 <prvInsertBlockIntoFreeList+0xa8>)
 800c626:	60fb      	str	r3, [r7, #12]
 800c628:	e002      	b.n	800c630 <prvInsertBlockIntoFreeList+0x14>
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	60fb      	str	r3, [r7, #12]
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	687a      	ldr	r2, [r7, #4]
 800c636:	429a      	cmp	r2, r3
 800c638:	d8f7      	bhi.n	800c62a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	685b      	ldr	r3, [r3, #4]
 800c642:	68ba      	ldr	r2, [r7, #8]
 800c644:	4413      	add	r3, r2
 800c646:	687a      	ldr	r2, [r7, #4]
 800c648:	429a      	cmp	r2, r3
 800c64a:	d108      	bne.n	800c65e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	685a      	ldr	r2, [r3, #4]
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	685b      	ldr	r3, [r3, #4]
 800c654:	441a      	add	r2, r3
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	685b      	ldr	r3, [r3, #4]
 800c666:	68ba      	ldr	r2, [r7, #8]
 800c668:	441a      	add	r2, r3
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	429a      	cmp	r2, r3
 800c670:	d118      	bne.n	800c6a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	681a      	ldr	r2, [r3, #0]
 800c676:	4b14      	ldr	r3, [pc, #80]	@ (800c6c8 <prvInsertBlockIntoFreeList+0xac>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	429a      	cmp	r2, r3
 800c67c:	d00d      	beq.n	800c69a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	685a      	ldr	r2, [r3, #4]
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	685b      	ldr	r3, [r3, #4]
 800c688:	441a      	add	r2, r3
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	681a      	ldr	r2, [r3, #0]
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	601a      	str	r2, [r3, #0]
 800c698:	e008      	b.n	800c6ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c69a:	4b0b      	ldr	r3, [pc, #44]	@ (800c6c8 <prvInsertBlockIntoFreeList+0xac>)
 800c69c:	681a      	ldr	r2, [r3, #0]
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	601a      	str	r2, [r3, #0]
 800c6a2:	e003      	b.n	800c6ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	681a      	ldr	r2, [r3, #0]
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c6ac:	68fa      	ldr	r2, [r7, #12]
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d002      	beq.n	800c6ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	687a      	ldr	r2, [r7, #4]
 800c6b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c6ba:	bf00      	nop
 800c6bc:	3714      	adds	r7, #20
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bc80      	pop	{r7}
 800c6c2:	4770      	bx	lr
 800c6c4:	20005a04 	.word	0x20005a04
 800c6c8:	20005a0c 	.word	0x20005a0c

0800c6cc <malloc>:
 800c6cc:	4b02      	ldr	r3, [pc, #8]	@ (800c6d8 <malloc+0xc>)
 800c6ce:	4601      	mov	r1, r0
 800c6d0:	6818      	ldr	r0, [r3, #0]
 800c6d2:	f000 b82d 	b.w	800c730 <_malloc_r>
 800c6d6:	bf00      	nop
 800c6d8:	20000284 	.word	0x20000284

0800c6dc <free>:
 800c6dc:	4b02      	ldr	r3, [pc, #8]	@ (800c6e8 <free+0xc>)
 800c6de:	4601      	mov	r1, r0
 800c6e0:	6818      	ldr	r0, [r3, #0]
 800c6e2:	f003 ba95 	b.w	800fc10 <_free_r>
 800c6e6:	bf00      	nop
 800c6e8:	20000284 	.word	0x20000284

0800c6ec <sbrk_aligned>:
 800c6ec:	b570      	push	{r4, r5, r6, lr}
 800c6ee:	4e0f      	ldr	r6, [pc, #60]	@ (800c72c <sbrk_aligned+0x40>)
 800c6f0:	460c      	mov	r4, r1
 800c6f2:	6831      	ldr	r1, [r6, #0]
 800c6f4:	4605      	mov	r5, r0
 800c6f6:	b911      	cbnz	r1, 800c6fe <sbrk_aligned+0x12>
 800c6f8:	f002 fb92 	bl	800ee20 <_sbrk_r>
 800c6fc:	6030      	str	r0, [r6, #0]
 800c6fe:	4621      	mov	r1, r4
 800c700:	4628      	mov	r0, r5
 800c702:	f002 fb8d 	bl	800ee20 <_sbrk_r>
 800c706:	1c43      	adds	r3, r0, #1
 800c708:	d103      	bne.n	800c712 <sbrk_aligned+0x26>
 800c70a:	f04f 34ff 	mov.w	r4, #4294967295
 800c70e:	4620      	mov	r0, r4
 800c710:	bd70      	pop	{r4, r5, r6, pc}
 800c712:	1cc4      	adds	r4, r0, #3
 800c714:	f024 0403 	bic.w	r4, r4, #3
 800c718:	42a0      	cmp	r0, r4
 800c71a:	d0f8      	beq.n	800c70e <sbrk_aligned+0x22>
 800c71c:	1a21      	subs	r1, r4, r0
 800c71e:	4628      	mov	r0, r5
 800c720:	f002 fb7e 	bl	800ee20 <_sbrk_r>
 800c724:	3001      	adds	r0, #1
 800c726:	d1f2      	bne.n	800c70e <sbrk_aligned+0x22>
 800c728:	e7ef      	b.n	800c70a <sbrk_aligned+0x1e>
 800c72a:	bf00      	nop
 800c72c:	20005a1c 	.word	0x20005a1c

0800c730 <_malloc_r>:
 800c730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c734:	1ccd      	adds	r5, r1, #3
 800c736:	f025 0503 	bic.w	r5, r5, #3
 800c73a:	3508      	adds	r5, #8
 800c73c:	2d0c      	cmp	r5, #12
 800c73e:	bf38      	it	cc
 800c740:	250c      	movcc	r5, #12
 800c742:	2d00      	cmp	r5, #0
 800c744:	4606      	mov	r6, r0
 800c746:	db01      	blt.n	800c74c <_malloc_r+0x1c>
 800c748:	42a9      	cmp	r1, r5
 800c74a:	d904      	bls.n	800c756 <_malloc_r+0x26>
 800c74c:	230c      	movs	r3, #12
 800c74e:	6033      	str	r3, [r6, #0]
 800c750:	2000      	movs	r0, #0
 800c752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c756:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c82c <_malloc_r+0xfc>
 800c75a:	f000 f869 	bl	800c830 <__malloc_lock>
 800c75e:	f8d8 3000 	ldr.w	r3, [r8]
 800c762:	461c      	mov	r4, r3
 800c764:	bb44      	cbnz	r4, 800c7b8 <_malloc_r+0x88>
 800c766:	4629      	mov	r1, r5
 800c768:	4630      	mov	r0, r6
 800c76a:	f7ff ffbf 	bl	800c6ec <sbrk_aligned>
 800c76e:	1c43      	adds	r3, r0, #1
 800c770:	4604      	mov	r4, r0
 800c772:	d158      	bne.n	800c826 <_malloc_r+0xf6>
 800c774:	f8d8 4000 	ldr.w	r4, [r8]
 800c778:	4627      	mov	r7, r4
 800c77a:	2f00      	cmp	r7, #0
 800c77c:	d143      	bne.n	800c806 <_malloc_r+0xd6>
 800c77e:	2c00      	cmp	r4, #0
 800c780:	d04b      	beq.n	800c81a <_malloc_r+0xea>
 800c782:	6823      	ldr	r3, [r4, #0]
 800c784:	4639      	mov	r1, r7
 800c786:	4630      	mov	r0, r6
 800c788:	eb04 0903 	add.w	r9, r4, r3
 800c78c:	f002 fb48 	bl	800ee20 <_sbrk_r>
 800c790:	4581      	cmp	r9, r0
 800c792:	d142      	bne.n	800c81a <_malloc_r+0xea>
 800c794:	6821      	ldr	r1, [r4, #0]
 800c796:	4630      	mov	r0, r6
 800c798:	1a6d      	subs	r5, r5, r1
 800c79a:	4629      	mov	r1, r5
 800c79c:	f7ff ffa6 	bl	800c6ec <sbrk_aligned>
 800c7a0:	3001      	adds	r0, #1
 800c7a2:	d03a      	beq.n	800c81a <_malloc_r+0xea>
 800c7a4:	6823      	ldr	r3, [r4, #0]
 800c7a6:	442b      	add	r3, r5
 800c7a8:	6023      	str	r3, [r4, #0]
 800c7aa:	f8d8 3000 	ldr.w	r3, [r8]
 800c7ae:	685a      	ldr	r2, [r3, #4]
 800c7b0:	bb62      	cbnz	r2, 800c80c <_malloc_r+0xdc>
 800c7b2:	f8c8 7000 	str.w	r7, [r8]
 800c7b6:	e00f      	b.n	800c7d8 <_malloc_r+0xa8>
 800c7b8:	6822      	ldr	r2, [r4, #0]
 800c7ba:	1b52      	subs	r2, r2, r5
 800c7bc:	d420      	bmi.n	800c800 <_malloc_r+0xd0>
 800c7be:	2a0b      	cmp	r2, #11
 800c7c0:	d917      	bls.n	800c7f2 <_malloc_r+0xc2>
 800c7c2:	1961      	adds	r1, r4, r5
 800c7c4:	42a3      	cmp	r3, r4
 800c7c6:	6025      	str	r5, [r4, #0]
 800c7c8:	bf18      	it	ne
 800c7ca:	6059      	strne	r1, [r3, #4]
 800c7cc:	6863      	ldr	r3, [r4, #4]
 800c7ce:	bf08      	it	eq
 800c7d0:	f8c8 1000 	streq.w	r1, [r8]
 800c7d4:	5162      	str	r2, [r4, r5]
 800c7d6:	604b      	str	r3, [r1, #4]
 800c7d8:	4630      	mov	r0, r6
 800c7da:	f000 f82f 	bl	800c83c <__malloc_unlock>
 800c7de:	f104 000b 	add.w	r0, r4, #11
 800c7e2:	1d23      	adds	r3, r4, #4
 800c7e4:	f020 0007 	bic.w	r0, r0, #7
 800c7e8:	1ac2      	subs	r2, r0, r3
 800c7ea:	bf1c      	itt	ne
 800c7ec:	1a1b      	subne	r3, r3, r0
 800c7ee:	50a3      	strne	r3, [r4, r2]
 800c7f0:	e7af      	b.n	800c752 <_malloc_r+0x22>
 800c7f2:	6862      	ldr	r2, [r4, #4]
 800c7f4:	42a3      	cmp	r3, r4
 800c7f6:	bf0c      	ite	eq
 800c7f8:	f8c8 2000 	streq.w	r2, [r8]
 800c7fc:	605a      	strne	r2, [r3, #4]
 800c7fe:	e7eb      	b.n	800c7d8 <_malloc_r+0xa8>
 800c800:	4623      	mov	r3, r4
 800c802:	6864      	ldr	r4, [r4, #4]
 800c804:	e7ae      	b.n	800c764 <_malloc_r+0x34>
 800c806:	463c      	mov	r4, r7
 800c808:	687f      	ldr	r7, [r7, #4]
 800c80a:	e7b6      	b.n	800c77a <_malloc_r+0x4a>
 800c80c:	461a      	mov	r2, r3
 800c80e:	685b      	ldr	r3, [r3, #4]
 800c810:	42a3      	cmp	r3, r4
 800c812:	d1fb      	bne.n	800c80c <_malloc_r+0xdc>
 800c814:	2300      	movs	r3, #0
 800c816:	6053      	str	r3, [r2, #4]
 800c818:	e7de      	b.n	800c7d8 <_malloc_r+0xa8>
 800c81a:	230c      	movs	r3, #12
 800c81c:	4630      	mov	r0, r6
 800c81e:	6033      	str	r3, [r6, #0]
 800c820:	f000 f80c 	bl	800c83c <__malloc_unlock>
 800c824:	e794      	b.n	800c750 <_malloc_r+0x20>
 800c826:	6005      	str	r5, [r0, #0]
 800c828:	e7d6      	b.n	800c7d8 <_malloc_r+0xa8>
 800c82a:	bf00      	nop
 800c82c:	20005a20 	.word	0x20005a20

0800c830 <__malloc_lock>:
 800c830:	4801      	ldr	r0, [pc, #4]	@ (800c838 <__malloc_lock+0x8>)
 800c832:	f002 bb43 	b.w	800eebc <__retarget_lock_acquire_recursive>
 800c836:	bf00      	nop
 800c838:	20005b8a 	.word	0x20005b8a

0800c83c <__malloc_unlock>:
 800c83c:	4801      	ldr	r0, [pc, #4]	@ (800c844 <__malloc_unlock+0x8>)
 800c83e:	f002 bb3f 	b.w	800eec0 <__retarget_lock_release_recursive>
 800c842:	bf00      	nop
 800c844:	20005b8a 	.word	0x20005b8a

0800c848 <sulp>:
 800c848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c84c:	460f      	mov	r7, r1
 800c84e:	4690      	mov	r8, r2
 800c850:	f004 f928 	bl	8010aa4 <__ulp>
 800c854:	4604      	mov	r4, r0
 800c856:	460d      	mov	r5, r1
 800c858:	f1b8 0f00 	cmp.w	r8, #0
 800c85c:	d011      	beq.n	800c882 <sulp+0x3a>
 800c85e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800c862:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c866:	2b00      	cmp	r3, #0
 800c868:	dd0b      	ble.n	800c882 <sulp+0x3a>
 800c86a:	2400      	movs	r4, #0
 800c86c:	051b      	lsls	r3, r3, #20
 800c86e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c872:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c876:	4622      	mov	r2, r4
 800c878:	462b      	mov	r3, r5
 800c87a:	f7f3 fea7 	bl	80005cc <__aeabi_dmul>
 800c87e:	4604      	mov	r4, r0
 800c880:	460d      	mov	r5, r1
 800c882:	4620      	mov	r0, r4
 800c884:	4629      	mov	r1, r5
 800c886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c88a:	0000      	movs	r0, r0
 800c88c:	0000      	movs	r0, r0
	...

0800c890 <_strtod_l>:
 800c890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c894:	b09f      	sub	sp, #124	@ 0x7c
 800c896:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c898:	2200      	movs	r2, #0
 800c89a:	460c      	mov	r4, r1
 800c89c:	921a      	str	r2, [sp, #104]	@ 0x68
 800c89e:	f04f 0a00 	mov.w	sl, #0
 800c8a2:	f04f 0b00 	mov.w	fp, #0
 800c8a6:	460a      	mov	r2, r1
 800c8a8:	9005      	str	r0, [sp, #20]
 800c8aa:	9219      	str	r2, [sp, #100]	@ 0x64
 800c8ac:	7811      	ldrb	r1, [r2, #0]
 800c8ae:	292b      	cmp	r1, #43	@ 0x2b
 800c8b0:	d048      	beq.n	800c944 <_strtod_l+0xb4>
 800c8b2:	d836      	bhi.n	800c922 <_strtod_l+0x92>
 800c8b4:	290d      	cmp	r1, #13
 800c8b6:	d830      	bhi.n	800c91a <_strtod_l+0x8a>
 800c8b8:	2908      	cmp	r1, #8
 800c8ba:	d830      	bhi.n	800c91e <_strtod_l+0x8e>
 800c8bc:	2900      	cmp	r1, #0
 800c8be:	d039      	beq.n	800c934 <_strtod_l+0xa4>
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c8c4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c8c6:	782a      	ldrb	r2, [r5, #0]
 800c8c8:	2a30      	cmp	r2, #48	@ 0x30
 800c8ca:	f040 80b1 	bne.w	800ca30 <_strtod_l+0x1a0>
 800c8ce:	786a      	ldrb	r2, [r5, #1]
 800c8d0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c8d4:	2a58      	cmp	r2, #88	@ 0x58
 800c8d6:	d16c      	bne.n	800c9b2 <_strtod_l+0x122>
 800c8d8:	9302      	str	r3, [sp, #8]
 800c8da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c8dc:	4a8e      	ldr	r2, [pc, #568]	@ (800cb18 <_strtod_l+0x288>)
 800c8de:	9301      	str	r3, [sp, #4]
 800c8e0:	ab1a      	add	r3, sp, #104	@ 0x68
 800c8e2:	9300      	str	r3, [sp, #0]
 800c8e4:	9805      	ldr	r0, [sp, #20]
 800c8e6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c8e8:	a919      	add	r1, sp, #100	@ 0x64
 800c8ea:	f003 fa41 	bl	800fd70 <__gethex>
 800c8ee:	f010 060f 	ands.w	r6, r0, #15
 800c8f2:	4604      	mov	r4, r0
 800c8f4:	d005      	beq.n	800c902 <_strtod_l+0x72>
 800c8f6:	2e06      	cmp	r6, #6
 800c8f8:	d126      	bne.n	800c948 <_strtod_l+0xb8>
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	3501      	adds	r5, #1
 800c8fe:	9519      	str	r5, [sp, #100]	@ 0x64
 800c900:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c902:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c904:	2b00      	cmp	r3, #0
 800c906:	f040 8584 	bne.w	800d412 <_strtod_l+0xb82>
 800c90a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c90c:	b1bb      	cbz	r3, 800c93e <_strtod_l+0xae>
 800c90e:	4650      	mov	r0, sl
 800c910:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800c914:	b01f      	add	sp, #124	@ 0x7c
 800c916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c91a:	2920      	cmp	r1, #32
 800c91c:	d1d0      	bne.n	800c8c0 <_strtod_l+0x30>
 800c91e:	3201      	adds	r2, #1
 800c920:	e7c3      	b.n	800c8aa <_strtod_l+0x1a>
 800c922:	292d      	cmp	r1, #45	@ 0x2d
 800c924:	d1cc      	bne.n	800c8c0 <_strtod_l+0x30>
 800c926:	2101      	movs	r1, #1
 800c928:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c92a:	1c51      	adds	r1, r2, #1
 800c92c:	9119      	str	r1, [sp, #100]	@ 0x64
 800c92e:	7852      	ldrb	r2, [r2, #1]
 800c930:	2a00      	cmp	r2, #0
 800c932:	d1c7      	bne.n	800c8c4 <_strtod_l+0x34>
 800c934:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c936:	9419      	str	r4, [sp, #100]	@ 0x64
 800c938:	2b00      	cmp	r3, #0
 800c93a:	f040 8568 	bne.w	800d40e <_strtod_l+0xb7e>
 800c93e:	4650      	mov	r0, sl
 800c940:	4659      	mov	r1, fp
 800c942:	e7e7      	b.n	800c914 <_strtod_l+0x84>
 800c944:	2100      	movs	r1, #0
 800c946:	e7ef      	b.n	800c928 <_strtod_l+0x98>
 800c948:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c94a:	b13a      	cbz	r2, 800c95c <_strtod_l+0xcc>
 800c94c:	2135      	movs	r1, #53	@ 0x35
 800c94e:	a81c      	add	r0, sp, #112	@ 0x70
 800c950:	f004 f998 	bl	8010c84 <__copybits>
 800c954:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c956:	9805      	ldr	r0, [sp, #20]
 800c958:	f003 fd72 	bl	8010440 <_Bfree>
 800c95c:	3e01      	subs	r6, #1
 800c95e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c960:	2e04      	cmp	r6, #4
 800c962:	d806      	bhi.n	800c972 <_strtod_l+0xe2>
 800c964:	e8df f006 	tbb	[pc, r6]
 800c968:	201d0314 	.word	0x201d0314
 800c96c:	14          	.byte	0x14
 800c96d:	00          	.byte	0x00
 800c96e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c972:	05e1      	lsls	r1, r4, #23
 800c974:	bf48      	it	mi
 800c976:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c97a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c97e:	0d1b      	lsrs	r3, r3, #20
 800c980:	051b      	lsls	r3, r3, #20
 800c982:	2b00      	cmp	r3, #0
 800c984:	d1bd      	bne.n	800c902 <_strtod_l+0x72>
 800c986:	f002 fa6d 	bl	800ee64 <__errno>
 800c98a:	2322      	movs	r3, #34	@ 0x22
 800c98c:	6003      	str	r3, [r0, #0]
 800c98e:	e7b8      	b.n	800c902 <_strtod_l+0x72>
 800c990:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c994:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c998:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c99c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c9a0:	e7e7      	b.n	800c972 <_strtod_l+0xe2>
 800c9a2:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800cb1c <_strtod_l+0x28c>
 800c9a6:	e7e4      	b.n	800c972 <_strtod_l+0xe2>
 800c9a8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c9ac:	f04f 3aff 	mov.w	sl, #4294967295
 800c9b0:	e7df      	b.n	800c972 <_strtod_l+0xe2>
 800c9b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c9b4:	1c5a      	adds	r2, r3, #1
 800c9b6:	9219      	str	r2, [sp, #100]	@ 0x64
 800c9b8:	785b      	ldrb	r3, [r3, #1]
 800c9ba:	2b30      	cmp	r3, #48	@ 0x30
 800c9bc:	d0f9      	beq.n	800c9b2 <_strtod_l+0x122>
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d09f      	beq.n	800c902 <_strtod_l+0x72>
 800c9c2:	2301      	movs	r3, #1
 800c9c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9c6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c9c8:	220a      	movs	r2, #10
 800c9ca:	930c      	str	r3, [sp, #48]	@ 0x30
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	461f      	mov	r7, r3
 800c9d0:	9308      	str	r3, [sp, #32]
 800c9d2:	930a      	str	r3, [sp, #40]	@ 0x28
 800c9d4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c9d6:	7805      	ldrb	r5, [r0, #0]
 800c9d8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c9dc:	b2d9      	uxtb	r1, r3
 800c9de:	2909      	cmp	r1, #9
 800c9e0:	d928      	bls.n	800ca34 <_strtod_l+0x1a4>
 800c9e2:	2201      	movs	r2, #1
 800c9e4:	494e      	ldr	r1, [pc, #312]	@ (800cb20 <_strtod_l+0x290>)
 800c9e6:	f001 fb93 	bl	800e110 <strncmp>
 800c9ea:	2800      	cmp	r0, #0
 800c9ec:	d032      	beq.n	800ca54 <_strtod_l+0x1c4>
 800c9ee:	2000      	movs	r0, #0
 800c9f0:	462a      	mov	r2, r5
 800c9f2:	4681      	mov	r9, r0
 800c9f4:	463d      	mov	r5, r7
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	2a65      	cmp	r2, #101	@ 0x65
 800c9fa:	d001      	beq.n	800ca00 <_strtod_l+0x170>
 800c9fc:	2a45      	cmp	r2, #69	@ 0x45
 800c9fe:	d114      	bne.n	800ca2a <_strtod_l+0x19a>
 800ca00:	b91d      	cbnz	r5, 800ca0a <_strtod_l+0x17a>
 800ca02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca04:	4302      	orrs	r2, r0
 800ca06:	d095      	beq.n	800c934 <_strtod_l+0xa4>
 800ca08:	2500      	movs	r5, #0
 800ca0a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ca0c:	1c62      	adds	r2, r4, #1
 800ca0e:	9219      	str	r2, [sp, #100]	@ 0x64
 800ca10:	7862      	ldrb	r2, [r4, #1]
 800ca12:	2a2b      	cmp	r2, #43	@ 0x2b
 800ca14:	d077      	beq.n	800cb06 <_strtod_l+0x276>
 800ca16:	2a2d      	cmp	r2, #45	@ 0x2d
 800ca18:	d07b      	beq.n	800cb12 <_strtod_l+0x282>
 800ca1a:	f04f 0c00 	mov.w	ip, #0
 800ca1e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ca22:	2909      	cmp	r1, #9
 800ca24:	f240 8082 	bls.w	800cb2c <_strtod_l+0x29c>
 800ca28:	9419      	str	r4, [sp, #100]	@ 0x64
 800ca2a:	f04f 0800 	mov.w	r8, #0
 800ca2e:	e0a2      	b.n	800cb76 <_strtod_l+0x2e6>
 800ca30:	2300      	movs	r3, #0
 800ca32:	e7c7      	b.n	800c9c4 <_strtod_l+0x134>
 800ca34:	2f08      	cmp	r7, #8
 800ca36:	bfd5      	itete	le
 800ca38:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ca3a:	9908      	ldrgt	r1, [sp, #32]
 800ca3c:	fb02 3301 	mlale	r3, r2, r1, r3
 800ca40:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ca44:	f100 0001 	add.w	r0, r0, #1
 800ca48:	bfd4      	ite	le
 800ca4a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800ca4c:	9308      	strgt	r3, [sp, #32]
 800ca4e:	3701      	adds	r7, #1
 800ca50:	9019      	str	r0, [sp, #100]	@ 0x64
 800ca52:	e7bf      	b.n	800c9d4 <_strtod_l+0x144>
 800ca54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca56:	1c5a      	adds	r2, r3, #1
 800ca58:	9219      	str	r2, [sp, #100]	@ 0x64
 800ca5a:	785a      	ldrb	r2, [r3, #1]
 800ca5c:	b37f      	cbz	r7, 800cabe <_strtod_l+0x22e>
 800ca5e:	4681      	mov	r9, r0
 800ca60:	463d      	mov	r5, r7
 800ca62:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ca66:	2b09      	cmp	r3, #9
 800ca68:	d912      	bls.n	800ca90 <_strtod_l+0x200>
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	e7c4      	b.n	800c9f8 <_strtod_l+0x168>
 800ca6e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca70:	3001      	adds	r0, #1
 800ca72:	1c5a      	adds	r2, r3, #1
 800ca74:	9219      	str	r2, [sp, #100]	@ 0x64
 800ca76:	785a      	ldrb	r2, [r3, #1]
 800ca78:	2a30      	cmp	r2, #48	@ 0x30
 800ca7a:	d0f8      	beq.n	800ca6e <_strtod_l+0x1de>
 800ca7c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ca80:	2b08      	cmp	r3, #8
 800ca82:	f200 84cb 	bhi.w	800d41c <_strtod_l+0xb8c>
 800ca86:	4681      	mov	r9, r0
 800ca88:	2000      	movs	r0, #0
 800ca8a:	4605      	mov	r5, r0
 800ca8c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ca8e:	930c      	str	r3, [sp, #48]	@ 0x30
 800ca90:	3a30      	subs	r2, #48	@ 0x30
 800ca92:	f100 0301 	add.w	r3, r0, #1
 800ca96:	d02a      	beq.n	800caee <_strtod_l+0x25e>
 800ca98:	4499      	add	r9, r3
 800ca9a:	210a      	movs	r1, #10
 800ca9c:	462b      	mov	r3, r5
 800ca9e:	eb00 0c05 	add.w	ip, r0, r5
 800caa2:	4563      	cmp	r3, ip
 800caa4:	d10d      	bne.n	800cac2 <_strtod_l+0x232>
 800caa6:	1c69      	adds	r1, r5, #1
 800caa8:	4401      	add	r1, r0
 800caaa:	4428      	add	r0, r5
 800caac:	2808      	cmp	r0, #8
 800caae:	dc16      	bgt.n	800cade <_strtod_l+0x24e>
 800cab0:	230a      	movs	r3, #10
 800cab2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cab4:	fb03 2300 	mla	r3, r3, r0, r2
 800cab8:	930a      	str	r3, [sp, #40]	@ 0x28
 800caba:	2300      	movs	r3, #0
 800cabc:	e018      	b.n	800caf0 <_strtod_l+0x260>
 800cabe:	4638      	mov	r0, r7
 800cac0:	e7da      	b.n	800ca78 <_strtod_l+0x1e8>
 800cac2:	2b08      	cmp	r3, #8
 800cac4:	f103 0301 	add.w	r3, r3, #1
 800cac8:	dc03      	bgt.n	800cad2 <_strtod_l+0x242>
 800caca:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800cacc:	434e      	muls	r6, r1
 800cace:	960a      	str	r6, [sp, #40]	@ 0x28
 800cad0:	e7e7      	b.n	800caa2 <_strtod_l+0x212>
 800cad2:	2b10      	cmp	r3, #16
 800cad4:	bfde      	ittt	le
 800cad6:	9e08      	ldrle	r6, [sp, #32]
 800cad8:	434e      	mulle	r6, r1
 800cada:	9608      	strle	r6, [sp, #32]
 800cadc:	e7e1      	b.n	800caa2 <_strtod_l+0x212>
 800cade:	280f      	cmp	r0, #15
 800cae0:	dceb      	bgt.n	800caba <_strtod_l+0x22a>
 800cae2:	230a      	movs	r3, #10
 800cae4:	9808      	ldr	r0, [sp, #32]
 800cae6:	fb03 2300 	mla	r3, r3, r0, r2
 800caea:	9308      	str	r3, [sp, #32]
 800caec:	e7e5      	b.n	800caba <_strtod_l+0x22a>
 800caee:	4629      	mov	r1, r5
 800caf0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800caf2:	460d      	mov	r5, r1
 800caf4:	1c50      	adds	r0, r2, #1
 800caf6:	9019      	str	r0, [sp, #100]	@ 0x64
 800caf8:	7852      	ldrb	r2, [r2, #1]
 800cafa:	4618      	mov	r0, r3
 800cafc:	e7b1      	b.n	800ca62 <_strtod_l+0x1d2>
 800cafe:	f04f 0900 	mov.w	r9, #0
 800cb02:	2301      	movs	r3, #1
 800cb04:	e77d      	b.n	800ca02 <_strtod_l+0x172>
 800cb06:	f04f 0c00 	mov.w	ip, #0
 800cb0a:	1ca2      	adds	r2, r4, #2
 800cb0c:	9219      	str	r2, [sp, #100]	@ 0x64
 800cb0e:	78a2      	ldrb	r2, [r4, #2]
 800cb10:	e785      	b.n	800ca1e <_strtod_l+0x18e>
 800cb12:	f04f 0c01 	mov.w	ip, #1
 800cb16:	e7f8      	b.n	800cb0a <_strtod_l+0x27a>
 800cb18:	08011f14 	.word	0x08011f14
 800cb1c:	7ff00000 	.word	0x7ff00000
 800cb20:	08011efe 	.word	0x08011efe
 800cb24:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cb26:	1c51      	adds	r1, r2, #1
 800cb28:	9119      	str	r1, [sp, #100]	@ 0x64
 800cb2a:	7852      	ldrb	r2, [r2, #1]
 800cb2c:	2a30      	cmp	r2, #48	@ 0x30
 800cb2e:	d0f9      	beq.n	800cb24 <_strtod_l+0x294>
 800cb30:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800cb34:	2908      	cmp	r1, #8
 800cb36:	f63f af78 	bhi.w	800ca2a <_strtod_l+0x19a>
 800cb3a:	f04f 080a 	mov.w	r8, #10
 800cb3e:	3a30      	subs	r2, #48	@ 0x30
 800cb40:	920e      	str	r2, [sp, #56]	@ 0x38
 800cb42:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cb44:	920f      	str	r2, [sp, #60]	@ 0x3c
 800cb46:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cb48:	1c56      	adds	r6, r2, #1
 800cb4a:	9619      	str	r6, [sp, #100]	@ 0x64
 800cb4c:	7852      	ldrb	r2, [r2, #1]
 800cb4e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800cb52:	f1be 0f09 	cmp.w	lr, #9
 800cb56:	d939      	bls.n	800cbcc <_strtod_l+0x33c>
 800cb58:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cb5a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800cb5e:	1a76      	subs	r6, r6, r1
 800cb60:	2e08      	cmp	r6, #8
 800cb62:	dc03      	bgt.n	800cb6c <_strtod_l+0x2dc>
 800cb64:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cb66:	4588      	cmp	r8, r1
 800cb68:	bfa8      	it	ge
 800cb6a:	4688      	movge	r8, r1
 800cb6c:	f1bc 0f00 	cmp.w	ip, #0
 800cb70:	d001      	beq.n	800cb76 <_strtod_l+0x2e6>
 800cb72:	f1c8 0800 	rsb	r8, r8, #0
 800cb76:	2d00      	cmp	r5, #0
 800cb78:	d14e      	bne.n	800cc18 <_strtod_l+0x388>
 800cb7a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cb7c:	4308      	orrs	r0, r1
 800cb7e:	f47f aec0 	bne.w	800c902 <_strtod_l+0x72>
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	f47f aed6 	bne.w	800c934 <_strtod_l+0xa4>
 800cb88:	2a69      	cmp	r2, #105	@ 0x69
 800cb8a:	d028      	beq.n	800cbde <_strtod_l+0x34e>
 800cb8c:	dc25      	bgt.n	800cbda <_strtod_l+0x34a>
 800cb8e:	2a49      	cmp	r2, #73	@ 0x49
 800cb90:	d025      	beq.n	800cbde <_strtod_l+0x34e>
 800cb92:	2a4e      	cmp	r2, #78	@ 0x4e
 800cb94:	f47f aece 	bne.w	800c934 <_strtod_l+0xa4>
 800cb98:	499a      	ldr	r1, [pc, #616]	@ (800ce04 <_strtod_l+0x574>)
 800cb9a:	a819      	add	r0, sp, #100	@ 0x64
 800cb9c:	f003 fb0a 	bl	80101b4 <__match>
 800cba0:	2800      	cmp	r0, #0
 800cba2:	f43f aec7 	beq.w	800c934 <_strtod_l+0xa4>
 800cba6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cba8:	781b      	ldrb	r3, [r3, #0]
 800cbaa:	2b28      	cmp	r3, #40	@ 0x28
 800cbac:	d12e      	bne.n	800cc0c <_strtod_l+0x37c>
 800cbae:	4996      	ldr	r1, [pc, #600]	@ (800ce08 <_strtod_l+0x578>)
 800cbb0:	aa1c      	add	r2, sp, #112	@ 0x70
 800cbb2:	a819      	add	r0, sp, #100	@ 0x64
 800cbb4:	f003 fb12 	bl	80101dc <__hexnan>
 800cbb8:	2805      	cmp	r0, #5
 800cbba:	d127      	bne.n	800cc0c <_strtod_l+0x37c>
 800cbbc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cbbe:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800cbc2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800cbc6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800cbca:	e69a      	b.n	800c902 <_strtod_l+0x72>
 800cbcc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cbce:	fb08 2101 	mla	r1, r8, r1, r2
 800cbd2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800cbd6:	920e      	str	r2, [sp, #56]	@ 0x38
 800cbd8:	e7b5      	b.n	800cb46 <_strtod_l+0x2b6>
 800cbda:	2a6e      	cmp	r2, #110	@ 0x6e
 800cbdc:	e7da      	b.n	800cb94 <_strtod_l+0x304>
 800cbde:	498b      	ldr	r1, [pc, #556]	@ (800ce0c <_strtod_l+0x57c>)
 800cbe0:	a819      	add	r0, sp, #100	@ 0x64
 800cbe2:	f003 fae7 	bl	80101b4 <__match>
 800cbe6:	2800      	cmp	r0, #0
 800cbe8:	f43f aea4 	beq.w	800c934 <_strtod_l+0xa4>
 800cbec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cbee:	4988      	ldr	r1, [pc, #544]	@ (800ce10 <_strtod_l+0x580>)
 800cbf0:	3b01      	subs	r3, #1
 800cbf2:	a819      	add	r0, sp, #100	@ 0x64
 800cbf4:	9319      	str	r3, [sp, #100]	@ 0x64
 800cbf6:	f003 fadd 	bl	80101b4 <__match>
 800cbfa:	b910      	cbnz	r0, 800cc02 <_strtod_l+0x372>
 800cbfc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cbfe:	3301      	adds	r3, #1
 800cc00:	9319      	str	r3, [sp, #100]	@ 0x64
 800cc02:	f04f 0a00 	mov.w	sl, #0
 800cc06:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800ce14 <_strtod_l+0x584>
 800cc0a:	e67a      	b.n	800c902 <_strtod_l+0x72>
 800cc0c:	4882      	ldr	r0, [pc, #520]	@ (800ce18 <_strtod_l+0x588>)
 800cc0e:	f002 f97d 	bl	800ef0c <nan>
 800cc12:	4682      	mov	sl, r0
 800cc14:	468b      	mov	fp, r1
 800cc16:	e674      	b.n	800c902 <_strtod_l+0x72>
 800cc18:	eba8 0309 	sub.w	r3, r8, r9
 800cc1c:	2f00      	cmp	r7, #0
 800cc1e:	bf08      	it	eq
 800cc20:	462f      	moveq	r7, r5
 800cc22:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cc24:	2d10      	cmp	r5, #16
 800cc26:	462c      	mov	r4, r5
 800cc28:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc2a:	bfa8      	it	ge
 800cc2c:	2410      	movge	r4, #16
 800cc2e:	f7f3 fc53 	bl	80004d8 <__aeabi_ui2d>
 800cc32:	2d09      	cmp	r5, #9
 800cc34:	4682      	mov	sl, r0
 800cc36:	468b      	mov	fp, r1
 800cc38:	dc11      	bgt.n	800cc5e <_strtod_l+0x3ce>
 800cc3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	f43f ae60 	beq.w	800c902 <_strtod_l+0x72>
 800cc42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc44:	dd76      	ble.n	800cd34 <_strtod_l+0x4a4>
 800cc46:	2b16      	cmp	r3, #22
 800cc48:	dc5d      	bgt.n	800cd06 <_strtod_l+0x476>
 800cc4a:	4974      	ldr	r1, [pc, #464]	@ (800ce1c <_strtod_l+0x58c>)
 800cc4c:	4652      	mov	r2, sl
 800cc4e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cc52:	465b      	mov	r3, fp
 800cc54:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc58:	f7f3 fcb8 	bl	80005cc <__aeabi_dmul>
 800cc5c:	e7d9      	b.n	800cc12 <_strtod_l+0x382>
 800cc5e:	4b6f      	ldr	r3, [pc, #444]	@ (800ce1c <_strtod_l+0x58c>)
 800cc60:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cc64:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800cc68:	f7f3 fcb0 	bl	80005cc <__aeabi_dmul>
 800cc6c:	4682      	mov	sl, r0
 800cc6e:	9808      	ldr	r0, [sp, #32]
 800cc70:	468b      	mov	fp, r1
 800cc72:	f7f3 fc31 	bl	80004d8 <__aeabi_ui2d>
 800cc76:	4602      	mov	r2, r0
 800cc78:	460b      	mov	r3, r1
 800cc7a:	4650      	mov	r0, sl
 800cc7c:	4659      	mov	r1, fp
 800cc7e:	f7f3 faef 	bl	8000260 <__adddf3>
 800cc82:	2d0f      	cmp	r5, #15
 800cc84:	4682      	mov	sl, r0
 800cc86:	468b      	mov	fp, r1
 800cc88:	ddd7      	ble.n	800cc3a <_strtod_l+0x3aa>
 800cc8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc8c:	1b2c      	subs	r4, r5, r4
 800cc8e:	441c      	add	r4, r3
 800cc90:	2c00      	cmp	r4, #0
 800cc92:	f340 8096 	ble.w	800cdc2 <_strtod_l+0x532>
 800cc96:	f014 030f 	ands.w	r3, r4, #15
 800cc9a:	d00a      	beq.n	800ccb2 <_strtod_l+0x422>
 800cc9c:	495f      	ldr	r1, [pc, #380]	@ (800ce1c <_strtod_l+0x58c>)
 800cc9e:	4652      	mov	r2, sl
 800cca0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cca4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cca8:	465b      	mov	r3, fp
 800ccaa:	f7f3 fc8f 	bl	80005cc <__aeabi_dmul>
 800ccae:	4682      	mov	sl, r0
 800ccb0:	468b      	mov	fp, r1
 800ccb2:	f034 040f 	bics.w	r4, r4, #15
 800ccb6:	d073      	beq.n	800cda0 <_strtod_l+0x510>
 800ccb8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ccbc:	dd48      	ble.n	800cd50 <_strtod_l+0x4c0>
 800ccbe:	2400      	movs	r4, #0
 800ccc0:	46a0      	mov	r8, r4
 800ccc2:	46a1      	mov	r9, r4
 800ccc4:	940a      	str	r4, [sp, #40]	@ 0x28
 800ccc6:	2322      	movs	r3, #34	@ 0x22
 800ccc8:	f04f 0a00 	mov.w	sl, #0
 800cccc:	9a05      	ldr	r2, [sp, #20]
 800ccce:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800ce14 <_strtod_l+0x584>
 800ccd2:	6013      	str	r3, [r2, #0]
 800ccd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	f43f ae13 	beq.w	800c902 <_strtod_l+0x72>
 800ccdc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ccde:	9805      	ldr	r0, [sp, #20]
 800cce0:	f003 fbae 	bl	8010440 <_Bfree>
 800cce4:	4649      	mov	r1, r9
 800cce6:	9805      	ldr	r0, [sp, #20]
 800cce8:	f003 fbaa 	bl	8010440 <_Bfree>
 800ccec:	4641      	mov	r1, r8
 800ccee:	9805      	ldr	r0, [sp, #20]
 800ccf0:	f003 fba6 	bl	8010440 <_Bfree>
 800ccf4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ccf6:	9805      	ldr	r0, [sp, #20]
 800ccf8:	f003 fba2 	bl	8010440 <_Bfree>
 800ccfc:	4621      	mov	r1, r4
 800ccfe:	9805      	ldr	r0, [sp, #20]
 800cd00:	f003 fb9e 	bl	8010440 <_Bfree>
 800cd04:	e5fd      	b.n	800c902 <_strtod_l+0x72>
 800cd06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd08:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800cd0c:	4293      	cmp	r3, r2
 800cd0e:	dbbc      	blt.n	800cc8a <_strtod_l+0x3fa>
 800cd10:	4c42      	ldr	r4, [pc, #264]	@ (800ce1c <_strtod_l+0x58c>)
 800cd12:	f1c5 050f 	rsb	r5, r5, #15
 800cd16:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cd1a:	4652      	mov	r2, sl
 800cd1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd20:	465b      	mov	r3, fp
 800cd22:	f7f3 fc53 	bl	80005cc <__aeabi_dmul>
 800cd26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd28:	1b5d      	subs	r5, r3, r5
 800cd2a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cd2e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cd32:	e791      	b.n	800cc58 <_strtod_l+0x3c8>
 800cd34:	3316      	adds	r3, #22
 800cd36:	dba8      	blt.n	800cc8a <_strtod_l+0x3fa>
 800cd38:	4b38      	ldr	r3, [pc, #224]	@ (800ce1c <_strtod_l+0x58c>)
 800cd3a:	eba9 0808 	sub.w	r8, r9, r8
 800cd3e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800cd42:	4650      	mov	r0, sl
 800cd44:	e9d8 2300 	ldrd	r2, r3, [r8]
 800cd48:	4659      	mov	r1, fp
 800cd4a:	f7f3 fd69 	bl	8000820 <__aeabi_ddiv>
 800cd4e:	e760      	b.n	800cc12 <_strtod_l+0x382>
 800cd50:	4b33      	ldr	r3, [pc, #204]	@ (800ce20 <_strtod_l+0x590>)
 800cd52:	4650      	mov	r0, sl
 800cd54:	9308      	str	r3, [sp, #32]
 800cd56:	2300      	movs	r3, #0
 800cd58:	4659      	mov	r1, fp
 800cd5a:	461e      	mov	r6, r3
 800cd5c:	1124      	asrs	r4, r4, #4
 800cd5e:	2c01      	cmp	r4, #1
 800cd60:	dc21      	bgt.n	800cda6 <_strtod_l+0x516>
 800cd62:	b10b      	cbz	r3, 800cd68 <_strtod_l+0x4d8>
 800cd64:	4682      	mov	sl, r0
 800cd66:	468b      	mov	fp, r1
 800cd68:	492d      	ldr	r1, [pc, #180]	@ (800ce20 <_strtod_l+0x590>)
 800cd6a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800cd6e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800cd72:	4652      	mov	r2, sl
 800cd74:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd78:	465b      	mov	r3, fp
 800cd7a:	f7f3 fc27 	bl	80005cc <__aeabi_dmul>
 800cd7e:	4b25      	ldr	r3, [pc, #148]	@ (800ce14 <_strtod_l+0x584>)
 800cd80:	460a      	mov	r2, r1
 800cd82:	400b      	ands	r3, r1
 800cd84:	4927      	ldr	r1, [pc, #156]	@ (800ce24 <_strtod_l+0x594>)
 800cd86:	4682      	mov	sl, r0
 800cd88:	428b      	cmp	r3, r1
 800cd8a:	d898      	bhi.n	800ccbe <_strtod_l+0x42e>
 800cd8c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800cd90:	428b      	cmp	r3, r1
 800cd92:	bf86      	itte	hi
 800cd94:	f04f 3aff 	movhi.w	sl, #4294967295
 800cd98:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800ce28 <_strtod_l+0x598>
 800cd9c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800cda0:	2300      	movs	r3, #0
 800cda2:	9308      	str	r3, [sp, #32]
 800cda4:	e07a      	b.n	800ce9c <_strtod_l+0x60c>
 800cda6:	07e2      	lsls	r2, r4, #31
 800cda8:	d505      	bpl.n	800cdb6 <_strtod_l+0x526>
 800cdaa:	9b08      	ldr	r3, [sp, #32]
 800cdac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb0:	f7f3 fc0c 	bl	80005cc <__aeabi_dmul>
 800cdb4:	2301      	movs	r3, #1
 800cdb6:	9a08      	ldr	r2, [sp, #32]
 800cdb8:	3601      	adds	r6, #1
 800cdba:	3208      	adds	r2, #8
 800cdbc:	1064      	asrs	r4, r4, #1
 800cdbe:	9208      	str	r2, [sp, #32]
 800cdc0:	e7cd      	b.n	800cd5e <_strtod_l+0x4ce>
 800cdc2:	d0ed      	beq.n	800cda0 <_strtod_l+0x510>
 800cdc4:	4264      	negs	r4, r4
 800cdc6:	f014 020f 	ands.w	r2, r4, #15
 800cdca:	d00a      	beq.n	800cde2 <_strtod_l+0x552>
 800cdcc:	4b13      	ldr	r3, [pc, #76]	@ (800ce1c <_strtod_l+0x58c>)
 800cdce:	4650      	mov	r0, sl
 800cdd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cdd4:	4659      	mov	r1, fp
 800cdd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdda:	f7f3 fd21 	bl	8000820 <__aeabi_ddiv>
 800cdde:	4682      	mov	sl, r0
 800cde0:	468b      	mov	fp, r1
 800cde2:	1124      	asrs	r4, r4, #4
 800cde4:	d0dc      	beq.n	800cda0 <_strtod_l+0x510>
 800cde6:	2c1f      	cmp	r4, #31
 800cde8:	dd20      	ble.n	800ce2c <_strtod_l+0x59c>
 800cdea:	2400      	movs	r4, #0
 800cdec:	46a0      	mov	r8, r4
 800cdee:	46a1      	mov	r9, r4
 800cdf0:	940a      	str	r4, [sp, #40]	@ 0x28
 800cdf2:	2322      	movs	r3, #34	@ 0x22
 800cdf4:	9a05      	ldr	r2, [sp, #20]
 800cdf6:	f04f 0a00 	mov.w	sl, #0
 800cdfa:	f04f 0b00 	mov.w	fp, #0
 800cdfe:	6013      	str	r3, [r2, #0]
 800ce00:	e768      	b.n	800ccd4 <_strtod_l+0x444>
 800ce02:	bf00      	nop
 800ce04:	0801205e 	.word	0x0801205e
 800ce08:	08011f00 	.word	0x08011f00
 800ce0c:	08012056 	.word	0x08012056
 800ce10:	080121e9 	.word	0x080121e9
 800ce14:	7ff00000 	.word	0x7ff00000
 800ce18:	080121e5 	.word	0x080121e5
 800ce1c:	08012350 	.word	0x08012350
 800ce20:	08012328 	.word	0x08012328
 800ce24:	7ca00000 	.word	0x7ca00000
 800ce28:	7fefffff 	.word	0x7fefffff
 800ce2c:	f014 0310 	ands.w	r3, r4, #16
 800ce30:	bf18      	it	ne
 800ce32:	236a      	movne	r3, #106	@ 0x6a
 800ce34:	4650      	mov	r0, sl
 800ce36:	9308      	str	r3, [sp, #32]
 800ce38:	4659      	mov	r1, fp
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	4ea9      	ldr	r6, [pc, #676]	@ (800d0e4 <_strtod_l+0x854>)
 800ce3e:	07e2      	lsls	r2, r4, #31
 800ce40:	d504      	bpl.n	800ce4c <_strtod_l+0x5bc>
 800ce42:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ce46:	f7f3 fbc1 	bl	80005cc <__aeabi_dmul>
 800ce4a:	2301      	movs	r3, #1
 800ce4c:	1064      	asrs	r4, r4, #1
 800ce4e:	f106 0608 	add.w	r6, r6, #8
 800ce52:	d1f4      	bne.n	800ce3e <_strtod_l+0x5ae>
 800ce54:	b10b      	cbz	r3, 800ce5a <_strtod_l+0x5ca>
 800ce56:	4682      	mov	sl, r0
 800ce58:	468b      	mov	fp, r1
 800ce5a:	9b08      	ldr	r3, [sp, #32]
 800ce5c:	b1b3      	cbz	r3, 800ce8c <_strtod_l+0x5fc>
 800ce5e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ce62:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	4659      	mov	r1, fp
 800ce6a:	dd0f      	ble.n	800ce8c <_strtod_l+0x5fc>
 800ce6c:	2b1f      	cmp	r3, #31
 800ce6e:	dd57      	ble.n	800cf20 <_strtod_l+0x690>
 800ce70:	2b34      	cmp	r3, #52	@ 0x34
 800ce72:	bfd8      	it	le
 800ce74:	f04f 33ff 	movle.w	r3, #4294967295
 800ce78:	f04f 0a00 	mov.w	sl, #0
 800ce7c:	bfcf      	iteee	gt
 800ce7e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ce82:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ce86:	4093      	lslle	r3, r2
 800ce88:	ea03 0b01 	andle.w	fp, r3, r1
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	2300      	movs	r3, #0
 800ce90:	4650      	mov	r0, sl
 800ce92:	4659      	mov	r1, fp
 800ce94:	f7f3 fe02 	bl	8000a9c <__aeabi_dcmpeq>
 800ce98:	2800      	cmp	r0, #0
 800ce9a:	d1a6      	bne.n	800cdea <_strtod_l+0x55a>
 800ce9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce9e:	463a      	mov	r2, r7
 800cea0:	9300      	str	r3, [sp, #0]
 800cea2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cea4:	462b      	mov	r3, r5
 800cea6:	9805      	ldr	r0, [sp, #20]
 800cea8:	f003 fb32 	bl	8010510 <__s2b>
 800ceac:	900a      	str	r0, [sp, #40]	@ 0x28
 800ceae:	2800      	cmp	r0, #0
 800ceb0:	f43f af05 	beq.w	800ccbe <_strtod_l+0x42e>
 800ceb4:	2400      	movs	r4, #0
 800ceb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ceb8:	eba9 0308 	sub.w	r3, r9, r8
 800cebc:	2a00      	cmp	r2, #0
 800cebe:	bfa8      	it	ge
 800cec0:	2300      	movge	r3, #0
 800cec2:	46a0      	mov	r8, r4
 800cec4:	9312      	str	r3, [sp, #72]	@ 0x48
 800cec6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ceca:	9316      	str	r3, [sp, #88]	@ 0x58
 800cecc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cece:	9805      	ldr	r0, [sp, #20]
 800ced0:	6859      	ldr	r1, [r3, #4]
 800ced2:	f003 fa75 	bl	80103c0 <_Balloc>
 800ced6:	4681      	mov	r9, r0
 800ced8:	2800      	cmp	r0, #0
 800ceda:	f43f aef4 	beq.w	800ccc6 <_strtod_l+0x436>
 800cede:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cee0:	300c      	adds	r0, #12
 800cee2:	691a      	ldr	r2, [r3, #16]
 800cee4:	f103 010c 	add.w	r1, r3, #12
 800cee8:	3202      	adds	r2, #2
 800ceea:	0092      	lsls	r2, r2, #2
 800ceec:	f001 ffff 	bl	800eeee <memcpy>
 800cef0:	ab1c      	add	r3, sp, #112	@ 0x70
 800cef2:	9301      	str	r3, [sp, #4]
 800cef4:	ab1b      	add	r3, sp, #108	@ 0x6c
 800cef6:	9300      	str	r3, [sp, #0]
 800cef8:	4652      	mov	r2, sl
 800cefa:	465b      	mov	r3, fp
 800cefc:	9805      	ldr	r0, [sp, #20]
 800cefe:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800cf02:	f003 fe37 	bl	8010b74 <__d2b>
 800cf06:	901a      	str	r0, [sp, #104]	@ 0x68
 800cf08:	2800      	cmp	r0, #0
 800cf0a:	f43f aedc 	beq.w	800ccc6 <_strtod_l+0x436>
 800cf0e:	2101      	movs	r1, #1
 800cf10:	9805      	ldr	r0, [sp, #20]
 800cf12:	f003 fb93 	bl	801063c <__i2b>
 800cf16:	4680      	mov	r8, r0
 800cf18:	b948      	cbnz	r0, 800cf2e <_strtod_l+0x69e>
 800cf1a:	f04f 0800 	mov.w	r8, #0
 800cf1e:	e6d2      	b.n	800ccc6 <_strtod_l+0x436>
 800cf20:	f04f 32ff 	mov.w	r2, #4294967295
 800cf24:	fa02 f303 	lsl.w	r3, r2, r3
 800cf28:	ea03 0a0a 	and.w	sl, r3, sl
 800cf2c:	e7ae      	b.n	800ce8c <_strtod_l+0x5fc>
 800cf2e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800cf30:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800cf32:	2d00      	cmp	r5, #0
 800cf34:	bfab      	itete	ge
 800cf36:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800cf38:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800cf3a:	18ef      	addge	r7, r5, r3
 800cf3c:	1b5e      	sublt	r6, r3, r5
 800cf3e:	9b08      	ldr	r3, [sp, #32]
 800cf40:	bfa8      	it	ge
 800cf42:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800cf44:	eba5 0503 	sub.w	r5, r5, r3
 800cf48:	4415      	add	r5, r2
 800cf4a:	4b67      	ldr	r3, [pc, #412]	@ (800d0e8 <_strtod_l+0x858>)
 800cf4c:	f105 35ff 	add.w	r5, r5, #4294967295
 800cf50:	bfb8      	it	lt
 800cf52:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800cf54:	429d      	cmp	r5, r3
 800cf56:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800cf5a:	da50      	bge.n	800cffe <_strtod_l+0x76e>
 800cf5c:	1b5b      	subs	r3, r3, r5
 800cf5e:	2b1f      	cmp	r3, #31
 800cf60:	f04f 0101 	mov.w	r1, #1
 800cf64:	eba2 0203 	sub.w	r2, r2, r3
 800cf68:	dc3d      	bgt.n	800cfe6 <_strtod_l+0x756>
 800cf6a:	fa01 f303 	lsl.w	r3, r1, r3
 800cf6e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cf70:	2300      	movs	r3, #0
 800cf72:	9310      	str	r3, [sp, #64]	@ 0x40
 800cf74:	18bd      	adds	r5, r7, r2
 800cf76:	9b08      	ldr	r3, [sp, #32]
 800cf78:	42af      	cmp	r7, r5
 800cf7a:	4416      	add	r6, r2
 800cf7c:	441e      	add	r6, r3
 800cf7e:	463b      	mov	r3, r7
 800cf80:	bfa8      	it	ge
 800cf82:	462b      	movge	r3, r5
 800cf84:	42b3      	cmp	r3, r6
 800cf86:	bfa8      	it	ge
 800cf88:	4633      	movge	r3, r6
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	bfc2      	ittt	gt
 800cf8e:	1aed      	subgt	r5, r5, r3
 800cf90:	1af6      	subgt	r6, r6, r3
 800cf92:	1aff      	subgt	r7, r7, r3
 800cf94:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	dd16      	ble.n	800cfc8 <_strtod_l+0x738>
 800cf9a:	4641      	mov	r1, r8
 800cf9c:	461a      	mov	r2, r3
 800cf9e:	9805      	ldr	r0, [sp, #20]
 800cfa0:	f003 fc0a 	bl	80107b8 <__pow5mult>
 800cfa4:	4680      	mov	r8, r0
 800cfa6:	2800      	cmp	r0, #0
 800cfa8:	d0b7      	beq.n	800cf1a <_strtod_l+0x68a>
 800cfaa:	4601      	mov	r1, r0
 800cfac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cfae:	9805      	ldr	r0, [sp, #20]
 800cfb0:	f003 fb5a 	bl	8010668 <__multiply>
 800cfb4:	900e      	str	r0, [sp, #56]	@ 0x38
 800cfb6:	2800      	cmp	r0, #0
 800cfb8:	f43f ae85 	beq.w	800ccc6 <_strtod_l+0x436>
 800cfbc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cfbe:	9805      	ldr	r0, [sp, #20]
 800cfc0:	f003 fa3e 	bl	8010440 <_Bfree>
 800cfc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cfc6:	931a      	str	r3, [sp, #104]	@ 0x68
 800cfc8:	2d00      	cmp	r5, #0
 800cfca:	dc1d      	bgt.n	800d008 <_strtod_l+0x778>
 800cfcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	dd23      	ble.n	800d01a <_strtod_l+0x78a>
 800cfd2:	4649      	mov	r1, r9
 800cfd4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800cfd6:	9805      	ldr	r0, [sp, #20]
 800cfd8:	f003 fbee 	bl	80107b8 <__pow5mult>
 800cfdc:	4681      	mov	r9, r0
 800cfde:	b9e0      	cbnz	r0, 800d01a <_strtod_l+0x78a>
 800cfe0:	f04f 0900 	mov.w	r9, #0
 800cfe4:	e66f      	b.n	800ccc6 <_strtod_l+0x436>
 800cfe6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800cfea:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800cfee:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800cff2:	35e2      	adds	r5, #226	@ 0xe2
 800cff4:	fa01 f305 	lsl.w	r3, r1, r5
 800cff8:	9310      	str	r3, [sp, #64]	@ 0x40
 800cffa:	9113      	str	r1, [sp, #76]	@ 0x4c
 800cffc:	e7ba      	b.n	800cf74 <_strtod_l+0x6e4>
 800cffe:	2300      	movs	r3, #0
 800d000:	9310      	str	r3, [sp, #64]	@ 0x40
 800d002:	2301      	movs	r3, #1
 800d004:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d006:	e7b5      	b.n	800cf74 <_strtod_l+0x6e4>
 800d008:	462a      	mov	r2, r5
 800d00a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d00c:	9805      	ldr	r0, [sp, #20]
 800d00e:	f003 fc2d 	bl	801086c <__lshift>
 800d012:	901a      	str	r0, [sp, #104]	@ 0x68
 800d014:	2800      	cmp	r0, #0
 800d016:	d1d9      	bne.n	800cfcc <_strtod_l+0x73c>
 800d018:	e655      	b.n	800ccc6 <_strtod_l+0x436>
 800d01a:	2e00      	cmp	r6, #0
 800d01c:	dd07      	ble.n	800d02e <_strtod_l+0x79e>
 800d01e:	4649      	mov	r1, r9
 800d020:	4632      	mov	r2, r6
 800d022:	9805      	ldr	r0, [sp, #20]
 800d024:	f003 fc22 	bl	801086c <__lshift>
 800d028:	4681      	mov	r9, r0
 800d02a:	2800      	cmp	r0, #0
 800d02c:	d0d8      	beq.n	800cfe0 <_strtod_l+0x750>
 800d02e:	2f00      	cmp	r7, #0
 800d030:	dd08      	ble.n	800d044 <_strtod_l+0x7b4>
 800d032:	4641      	mov	r1, r8
 800d034:	463a      	mov	r2, r7
 800d036:	9805      	ldr	r0, [sp, #20]
 800d038:	f003 fc18 	bl	801086c <__lshift>
 800d03c:	4680      	mov	r8, r0
 800d03e:	2800      	cmp	r0, #0
 800d040:	f43f ae41 	beq.w	800ccc6 <_strtod_l+0x436>
 800d044:	464a      	mov	r2, r9
 800d046:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d048:	9805      	ldr	r0, [sp, #20]
 800d04a:	f003 fc97 	bl	801097c <__mdiff>
 800d04e:	4604      	mov	r4, r0
 800d050:	2800      	cmp	r0, #0
 800d052:	f43f ae38 	beq.w	800ccc6 <_strtod_l+0x436>
 800d056:	68c3      	ldr	r3, [r0, #12]
 800d058:	4641      	mov	r1, r8
 800d05a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d05c:	2300      	movs	r3, #0
 800d05e:	60c3      	str	r3, [r0, #12]
 800d060:	f003 fc70 	bl	8010944 <__mcmp>
 800d064:	2800      	cmp	r0, #0
 800d066:	da45      	bge.n	800d0f4 <_strtod_l+0x864>
 800d068:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d06a:	ea53 030a 	orrs.w	r3, r3, sl
 800d06e:	d16b      	bne.n	800d148 <_strtod_l+0x8b8>
 800d070:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d074:	2b00      	cmp	r3, #0
 800d076:	d167      	bne.n	800d148 <_strtod_l+0x8b8>
 800d078:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d07c:	0d1b      	lsrs	r3, r3, #20
 800d07e:	051b      	lsls	r3, r3, #20
 800d080:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d084:	d960      	bls.n	800d148 <_strtod_l+0x8b8>
 800d086:	6963      	ldr	r3, [r4, #20]
 800d088:	b913      	cbnz	r3, 800d090 <_strtod_l+0x800>
 800d08a:	6923      	ldr	r3, [r4, #16]
 800d08c:	2b01      	cmp	r3, #1
 800d08e:	dd5b      	ble.n	800d148 <_strtod_l+0x8b8>
 800d090:	4621      	mov	r1, r4
 800d092:	2201      	movs	r2, #1
 800d094:	9805      	ldr	r0, [sp, #20]
 800d096:	f003 fbe9 	bl	801086c <__lshift>
 800d09a:	4641      	mov	r1, r8
 800d09c:	4604      	mov	r4, r0
 800d09e:	f003 fc51 	bl	8010944 <__mcmp>
 800d0a2:	2800      	cmp	r0, #0
 800d0a4:	dd50      	ble.n	800d148 <_strtod_l+0x8b8>
 800d0a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d0aa:	9a08      	ldr	r2, [sp, #32]
 800d0ac:	0d1b      	lsrs	r3, r3, #20
 800d0ae:	051b      	lsls	r3, r3, #20
 800d0b0:	2a00      	cmp	r2, #0
 800d0b2:	d06a      	beq.n	800d18a <_strtod_l+0x8fa>
 800d0b4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d0b8:	d867      	bhi.n	800d18a <_strtod_l+0x8fa>
 800d0ba:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d0be:	f67f ae98 	bls.w	800cdf2 <_strtod_l+0x562>
 800d0c2:	4650      	mov	r0, sl
 800d0c4:	4659      	mov	r1, fp
 800d0c6:	4b09      	ldr	r3, [pc, #36]	@ (800d0ec <_strtod_l+0x85c>)
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	f7f3 fa7f 	bl	80005cc <__aeabi_dmul>
 800d0ce:	4b08      	ldr	r3, [pc, #32]	@ (800d0f0 <_strtod_l+0x860>)
 800d0d0:	4682      	mov	sl, r0
 800d0d2:	400b      	ands	r3, r1
 800d0d4:	468b      	mov	fp, r1
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	f47f ae00 	bne.w	800ccdc <_strtod_l+0x44c>
 800d0dc:	2322      	movs	r3, #34	@ 0x22
 800d0de:	9a05      	ldr	r2, [sp, #20]
 800d0e0:	6013      	str	r3, [r2, #0]
 800d0e2:	e5fb      	b.n	800ccdc <_strtod_l+0x44c>
 800d0e4:	08011f28 	.word	0x08011f28
 800d0e8:	fffffc02 	.word	0xfffffc02
 800d0ec:	39500000 	.word	0x39500000
 800d0f0:	7ff00000 	.word	0x7ff00000
 800d0f4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d0f8:	d165      	bne.n	800d1c6 <_strtod_l+0x936>
 800d0fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d0fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d100:	b35a      	cbz	r2, 800d15a <_strtod_l+0x8ca>
 800d102:	4a99      	ldr	r2, [pc, #612]	@ (800d368 <_strtod_l+0xad8>)
 800d104:	4293      	cmp	r3, r2
 800d106:	d12b      	bne.n	800d160 <_strtod_l+0x8d0>
 800d108:	9b08      	ldr	r3, [sp, #32]
 800d10a:	4651      	mov	r1, sl
 800d10c:	b303      	cbz	r3, 800d150 <_strtod_l+0x8c0>
 800d10e:	465a      	mov	r2, fp
 800d110:	4b96      	ldr	r3, [pc, #600]	@ (800d36c <_strtod_l+0xadc>)
 800d112:	4013      	ands	r3, r2
 800d114:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d118:	f04f 32ff 	mov.w	r2, #4294967295
 800d11c:	d81b      	bhi.n	800d156 <_strtod_l+0x8c6>
 800d11e:	0d1b      	lsrs	r3, r3, #20
 800d120:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d124:	fa02 f303 	lsl.w	r3, r2, r3
 800d128:	4299      	cmp	r1, r3
 800d12a:	d119      	bne.n	800d160 <_strtod_l+0x8d0>
 800d12c:	4b90      	ldr	r3, [pc, #576]	@ (800d370 <_strtod_l+0xae0>)
 800d12e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d130:	429a      	cmp	r2, r3
 800d132:	d102      	bne.n	800d13a <_strtod_l+0x8aa>
 800d134:	3101      	adds	r1, #1
 800d136:	f43f adc6 	beq.w	800ccc6 <_strtod_l+0x436>
 800d13a:	f04f 0a00 	mov.w	sl, #0
 800d13e:	4b8b      	ldr	r3, [pc, #556]	@ (800d36c <_strtod_l+0xadc>)
 800d140:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d142:	401a      	ands	r2, r3
 800d144:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d148:	9b08      	ldr	r3, [sp, #32]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d1b9      	bne.n	800d0c2 <_strtod_l+0x832>
 800d14e:	e5c5      	b.n	800ccdc <_strtod_l+0x44c>
 800d150:	f04f 33ff 	mov.w	r3, #4294967295
 800d154:	e7e8      	b.n	800d128 <_strtod_l+0x898>
 800d156:	4613      	mov	r3, r2
 800d158:	e7e6      	b.n	800d128 <_strtod_l+0x898>
 800d15a:	ea53 030a 	orrs.w	r3, r3, sl
 800d15e:	d0a2      	beq.n	800d0a6 <_strtod_l+0x816>
 800d160:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d162:	b1db      	cbz	r3, 800d19c <_strtod_l+0x90c>
 800d164:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d166:	4213      	tst	r3, r2
 800d168:	d0ee      	beq.n	800d148 <_strtod_l+0x8b8>
 800d16a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d16c:	4650      	mov	r0, sl
 800d16e:	4659      	mov	r1, fp
 800d170:	9a08      	ldr	r2, [sp, #32]
 800d172:	b1bb      	cbz	r3, 800d1a4 <_strtod_l+0x914>
 800d174:	f7ff fb68 	bl	800c848 <sulp>
 800d178:	4602      	mov	r2, r0
 800d17a:	460b      	mov	r3, r1
 800d17c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d180:	f7f3 f86e 	bl	8000260 <__adddf3>
 800d184:	4682      	mov	sl, r0
 800d186:	468b      	mov	fp, r1
 800d188:	e7de      	b.n	800d148 <_strtod_l+0x8b8>
 800d18a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d18e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d192:	f04f 3aff 	mov.w	sl, #4294967295
 800d196:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d19a:	e7d5      	b.n	800d148 <_strtod_l+0x8b8>
 800d19c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d19e:	ea13 0f0a 	tst.w	r3, sl
 800d1a2:	e7e1      	b.n	800d168 <_strtod_l+0x8d8>
 800d1a4:	f7ff fb50 	bl	800c848 <sulp>
 800d1a8:	4602      	mov	r2, r0
 800d1aa:	460b      	mov	r3, r1
 800d1ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d1b0:	f7f3 f854 	bl	800025c <__aeabi_dsub>
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	4682      	mov	sl, r0
 800d1ba:	468b      	mov	fp, r1
 800d1bc:	f7f3 fc6e 	bl	8000a9c <__aeabi_dcmpeq>
 800d1c0:	2800      	cmp	r0, #0
 800d1c2:	d0c1      	beq.n	800d148 <_strtod_l+0x8b8>
 800d1c4:	e615      	b.n	800cdf2 <_strtod_l+0x562>
 800d1c6:	4641      	mov	r1, r8
 800d1c8:	4620      	mov	r0, r4
 800d1ca:	f003 fd2b 	bl	8010c24 <__ratio>
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d1d4:	4606      	mov	r6, r0
 800d1d6:	460f      	mov	r7, r1
 800d1d8:	f7f3 fc74 	bl	8000ac4 <__aeabi_dcmple>
 800d1dc:	2800      	cmp	r0, #0
 800d1de:	d06d      	beq.n	800d2bc <_strtod_l+0xa2c>
 800d1e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d178      	bne.n	800d2d8 <_strtod_l+0xa48>
 800d1e6:	f1ba 0f00 	cmp.w	sl, #0
 800d1ea:	d156      	bne.n	800d29a <_strtod_l+0xa0a>
 800d1ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d1ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d158      	bne.n	800d2a8 <_strtod_l+0xa18>
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	4630      	mov	r0, r6
 800d1fa:	4639      	mov	r1, r7
 800d1fc:	4b5d      	ldr	r3, [pc, #372]	@ (800d374 <_strtod_l+0xae4>)
 800d1fe:	f7f3 fc57 	bl	8000ab0 <__aeabi_dcmplt>
 800d202:	2800      	cmp	r0, #0
 800d204:	d157      	bne.n	800d2b6 <_strtod_l+0xa26>
 800d206:	4630      	mov	r0, r6
 800d208:	4639      	mov	r1, r7
 800d20a:	2200      	movs	r2, #0
 800d20c:	4b5a      	ldr	r3, [pc, #360]	@ (800d378 <_strtod_l+0xae8>)
 800d20e:	f7f3 f9dd 	bl	80005cc <__aeabi_dmul>
 800d212:	4606      	mov	r6, r0
 800d214:	460f      	mov	r7, r1
 800d216:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d21a:	9606      	str	r6, [sp, #24]
 800d21c:	9307      	str	r3, [sp, #28]
 800d21e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d222:	4d52      	ldr	r5, [pc, #328]	@ (800d36c <_strtod_l+0xadc>)
 800d224:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d228:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d22a:	401d      	ands	r5, r3
 800d22c:	4b53      	ldr	r3, [pc, #332]	@ (800d37c <_strtod_l+0xaec>)
 800d22e:	429d      	cmp	r5, r3
 800d230:	f040 80aa 	bne.w	800d388 <_strtod_l+0xaf8>
 800d234:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d236:	4650      	mov	r0, sl
 800d238:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d23c:	4659      	mov	r1, fp
 800d23e:	f003 fc31 	bl	8010aa4 <__ulp>
 800d242:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d246:	f7f3 f9c1 	bl	80005cc <__aeabi_dmul>
 800d24a:	4652      	mov	r2, sl
 800d24c:	465b      	mov	r3, fp
 800d24e:	f7f3 f807 	bl	8000260 <__adddf3>
 800d252:	460b      	mov	r3, r1
 800d254:	4945      	ldr	r1, [pc, #276]	@ (800d36c <_strtod_l+0xadc>)
 800d256:	4a4a      	ldr	r2, [pc, #296]	@ (800d380 <_strtod_l+0xaf0>)
 800d258:	4019      	ands	r1, r3
 800d25a:	4291      	cmp	r1, r2
 800d25c:	4682      	mov	sl, r0
 800d25e:	d942      	bls.n	800d2e6 <_strtod_l+0xa56>
 800d260:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d262:	4b43      	ldr	r3, [pc, #268]	@ (800d370 <_strtod_l+0xae0>)
 800d264:	429a      	cmp	r2, r3
 800d266:	d103      	bne.n	800d270 <_strtod_l+0x9e0>
 800d268:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d26a:	3301      	adds	r3, #1
 800d26c:	f43f ad2b 	beq.w	800ccc6 <_strtod_l+0x436>
 800d270:	f04f 3aff 	mov.w	sl, #4294967295
 800d274:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800d370 <_strtod_l+0xae0>
 800d278:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d27a:	9805      	ldr	r0, [sp, #20]
 800d27c:	f003 f8e0 	bl	8010440 <_Bfree>
 800d280:	4649      	mov	r1, r9
 800d282:	9805      	ldr	r0, [sp, #20]
 800d284:	f003 f8dc 	bl	8010440 <_Bfree>
 800d288:	4641      	mov	r1, r8
 800d28a:	9805      	ldr	r0, [sp, #20]
 800d28c:	f003 f8d8 	bl	8010440 <_Bfree>
 800d290:	4621      	mov	r1, r4
 800d292:	9805      	ldr	r0, [sp, #20]
 800d294:	f003 f8d4 	bl	8010440 <_Bfree>
 800d298:	e618      	b.n	800cecc <_strtod_l+0x63c>
 800d29a:	f1ba 0f01 	cmp.w	sl, #1
 800d29e:	d103      	bne.n	800d2a8 <_strtod_l+0xa18>
 800d2a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	f43f ada5 	beq.w	800cdf2 <_strtod_l+0x562>
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	4b36      	ldr	r3, [pc, #216]	@ (800d384 <_strtod_l+0xaf4>)
 800d2ac:	2600      	movs	r6, #0
 800d2ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d2b2:	4f30      	ldr	r7, [pc, #192]	@ (800d374 <_strtod_l+0xae4>)
 800d2b4:	e7b3      	b.n	800d21e <_strtod_l+0x98e>
 800d2b6:	2600      	movs	r6, #0
 800d2b8:	4f2f      	ldr	r7, [pc, #188]	@ (800d378 <_strtod_l+0xae8>)
 800d2ba:	e7ac      	b.n	800d216 <_strtod_l+0x986>
 800d2bc:	4630      	mov	r0, r6
 800d2be:	4639      	mov	r1, r7
 800d2c0:	4b2d      	ldr	r3, [pc, #180]	@ (800d378 <_strtod_l+0xae8>)
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	f7f3 f982 	bl	80005cc <__aeabi_dmul>
 800d2c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d2ca:	4606      	mov	r6, r0
 800d2cc:	460f      	mov	r7, r1
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d0a1      	beq.n	800d216 <_strtod_l+0x986>
 800d2d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d2d6:	e7a2      	b.n	800d21e <_strtod_l+0x98e>
 800d2d8:	2200      	movs	r2, #0
 800d2da:	4b26      	ldr	r3, [pc, #152]	@ (800d374 <_strtod_l+0xae4>)
 800d2dc:	4616      	mov	r6, r2
 800d2de:	461f      	mov	r7, r3
 800d2e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d2e4:	e79b      	b.n	800d21e <_strtod_l+0x98e>
 800d2e6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d2ea:	9b08      	ldr	r3, [sp, #32]
 800d2ec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d1c1      	bne.n	800d278 <_strtod_l+0x9e8>
 800d2f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d2f8:	0d1b      	lsrs	r3, r3, #20
 800d2fa:	051b      	lsls	r3, r3, #20
 800d2fc:	429d      	cmp	r5, r3
 800d2fe:	d1bb      	bne.n	800d278 <_strtod_l+0x9e8>
 800d300:	4630      	mov	r0, r6
 800d302:	4639      	mov	r1, r7
 800d304:	f7f3 ff94 	bl	8001230 <__aeabi_d2lz>
 800d308:	f7f3 f932 	bl	8000570 <__aeabi_l2d>
 800d30c:	4602      	mov	r2, r0
 800d30e:	460b      	mov	r3, r1
 800d310:	4630      	mov	r0, r6
 800d312:	4639      	mov	r1, r7
 800d314:	f7f2 ffa2 	bl	800025c <__aeabi_dsub>
 800d318:	460b      	mov	r3, r1
 800d31a:	4602      	mov	r2, r0
 800d31c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d320:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d324:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d326:	ea46 060a 	orr.w	r6, r6, sl
 800d32a:	431e      	orrs	r6, r3
 800d32c:	d069      	beq.n	800d402 <_strtod_l+0xb72>
 800d32e:	a30a      	add	r3, pc, #40	@ (adr r3, 800d358 <_strtod_l+0xac8>)
 800d330:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d334:	f7f3 fbbc 	bl	8000ab0 <__aeabi_dcmplt>
 800d338:	2800      	cmp	r0, #0
 800d33a:	f47f accf 	bne.w	800ccdc <_strtod_l+0x44c>
 800d33e:	a308      	add	r3, pc, #32	@ (adr r3, 800d360 <_strtod_l+0xad0>)
 800d340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d344:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d348:	f7f3 fbd0 	bl	8000aec <__aeabi_dcmpgt>
 800d34c:	2800      	cmp	r0, #0
 800d34e:	d093      	beq.n	800d278 <_strtod_l+0x9e8>
 800d350:	e4c4      	b.n	800ccdc <_strtod_l+0x44c>
 800d352:	bf00      	nop
 800d354:	f3af 8000 	nop.w
 800d358:	94a03595 	.word	0x94a03595
 800d35c:	3fdfffff 	.word	0x3fdfffff
 800d360:	35afe535 	.word	0x35afe535
 800d364:	3fe00000 	.word	0x3fe00000
 800d368:	000fffff 	.word	0x000fffff
 800d36c:	7ff00000 	.word	0x7ff00000
 800d370:	7fefffff 	.word	0x7fefffff
 800d374:	3ff00000 	.word	0x3ff00000
 800d378:	3fe00000 	.word	0x3fe00000
 800d37c:	7fe00000 	.word	0x7fe00000
 800d380:	7c9fffff 	.word	0x7c9fffff
 800d384:	bff00000 	.word	0xbff00000
 800d388:	9b08      	ldr	r3, [sp, #32]
 800d38a:	b323      	cbz	r3, 800d3d6 <_strtod_l+0xb46>
 800d38c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d390:	d821      	bhi.n	800d3d6 <_strtod_l+0xb46>
 800d392:	a327      	add	r3, pc, #156	@ (adr r3, 800d430 <_strtod_l+0xba0>)
 800d394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d398:	4630      	mov	r0, r6
 800d39a:	4639      	mov	r1, r7
 800d39c:	f7f3 fb92 	bl	8000ac4 <__aeabi_dcmple>
 800d3a0:	b1a0      	cbz	r0, 800d3cc <_strtod_l+0xb3c>
 800d3a2:	4639      	mov	r1, r7
 800d3a4:	4630      	mov	r0, r6
 800d3a6:	f7f3 fbe9 	bl	8000b7c <__aeabi_d2uiz>
 800d3aa:	2801      	cmp	r0, #1
 800d3ac:	bf38      	it	cc
 800d3ae:	2001      	movcc	r0, #1
 800d3b0:	f7f3 f892 	bl	80004d8 <__aeabi_ui2d>
 800d3b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3b6:	4606      	mov	r6, r0
 800d3b8:	460f      	mov	r7, r1
 800d3ba:	b9fb      	cbnz	r3, 800d3fc <_strtod_l+0xb6c>
 800d3bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d3c0:	9014      	str	r0, [sp, #80]	@ 0x50
 800d3c2:	9315      	str	r3, [sp, #84]	@ 0x54
 800d3c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d3c8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d3cc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d3ce:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d3d2:	1b5b      	subs	r3, r3, r5
 800d3d4:	9311      	str	r3, [sp, #68]	@ 0x44
 800d3d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d3da:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d3de:	f003 fb61 	bl	8010aa4 <__ulp>
 800d3e2:	4602      	mov	r2, r0
 800d3e4:	460b      	mov	r3, r1
 800d3e6:	4650      	mov	r0, sl
 800d3e8:	4659      	mov	r1, fp
 800d3ea:	f7f3 f8ef 	bl	80005cc <__aeabi_dmul>
 800d3ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d3f2:	f7f2 ff35 	bl	8000260 <__adddf3>
 800d3f6:	4682      	mov	sl, r0
 800d3f8:	468b      	mov	fp, r1
 800d3fa:	e776      	b.n	800d2ea <_strtod_l+0xa5a>
 800d3fc:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d400:	e7e0      	b.n	800d3c4 <_strtod_l+0xb34>
 800d402:	a30d      	add	r3, pc, #52	@ (adr r3, 800d438 <_strtod_l+0xba8>)
 800d404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d408:	f7f3 fb52 	bl	8000ab0 <__aeabi_dcmplt>
 800d40c:	e79e      	b.n	800d34c <_strtod_l+0xabc>
 800d40e:	2300      	movs	r3, #0
 800d410:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d412:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d414:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d416:	6013      	str	r3, [r2, #0]
 800d418:	f7ff ba77 	b.w	800c90a <_strtod_l+0x7a>
 800d41c:	2a65      	cmp	r2, #101	@ 0x65
 800d41e:	f43f ab6e 	beq.w	800cafe <_strtod_l+0x26e>
 800d422:	2a45      	cmp	r2, #69	@ 0x45
 800d424:	f43f ab6b 	beq.w	800cafe <_strtod_l+0x26e>
 800d428:	2301      	movs	r3, #1
 800d42a:	f7ff bba6 	b.w	800cb7a <_strtod_l+0x2ea>
 800d42e:	bf00      	nop
 800d430:	ffc00000 	.word	0xffc00000
 800d434:	41dfffff 	.word	0x41dfffff
 800d438:	94a03595 	.word	0x94a03595
 800d43c:	3fcfffff 	.word	0x3fcfffff

0800d440 <strtof>:
 800d440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d444:	4d24      	ldr	r5, [pc, #144]	@ (800d4d8 <strtof+0x98>)
 800d446:	460a      	mov	r2, r1
 800d448:	4b24      	ldr	r3, [pc, #144]	@ (800d4dc <strtof+0x9c>)
 800d44a:	4601      	mov	r1, r0
 800d44c:	6828      	ldr	r0, [r5, #0]
 800d44e:	f7ff fa1f 	bl	800c890 <_strtod_l>
 800d452:	4602      	mov	r2, r0
 800d454:	460b      	mov	r3, r1
 800d456:	4606      	mov	r6, r0
 800d458:	460f      	mov	r7, r1
 800d45a:	f7f3 fb51 	bl	8000b00 <__aeabi_dcmpun>
 800d45e:	b168      	cbz	r0, 800d47c <strtof+0x3c>
 800d460:	2f00      	cmp	r7, #0
 800d462:	481f      	ldr	r0, [pc, #124]	@ (800d4e0 <strtof+0xa0>)
 800d464:	da06      	bge.n	800d474 <strtof+0x34>
 800d466:	f001 fd57 	bl	800ef18 <nanf>
 800d46a:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800d46e:	4620      	mov	r0, r4
 800d470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d474:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d478:	f001 bd4e 	b.w	800ef18 <nanf>
 800d47c:	4639      	mov	r1, r7
 800d47e:	4630      	mov	r0, r6
 800d480:	f7f3 fb9c 	bl	8000bbc <__aeabi_d2f>
 800d484:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800d488:	4604      	mov	r4, r0
 800d48a:	4916      	ldr	r1, [pc, #88]	@ (800d4e4 <strtof+0xa4>)
 800d48c:	4640      	mov	r0, r8
 800d48e:	f7f3 feb9 	bl	8001204 <__aeabi_fcmpun>
 800d492:	b9b0      	cbnz	r0, 800d4c2 <strtof+0x82>
 800d494:	4640      	mov	r0, r8
 800d496:	4913      	ldr	r1, [pc, #76]	@ (800d4e4 <strtof+0xa4>)
 800d498:	f7f3 fe96 	bl	80011c8 <__aeabi_fcmple>
 800d49c:	b988      	cbnz	r0, 800d4c2 <strtof+0x82>
 800d49e:	f027 4900 	bic.w	r9, r7, #2147483648	@ 0x80000000
 800d4a2:	f04f 32ff 	mov.w	r2, #4294967295
 800d4a6:	4630      	mov	r0, r6
 800d4a8:	4649      	mov	r1, r9
 800d4aa:	4b0f      	ldr	r3, [pc, #60]	@ (800d4e8 <strtof+0xa8>)
 800d4ac:	f7f3 fb28 	bl	8000b00 <__aeabi_dcmpun>
 800d4b0:	b970      	cbnz	r0, 800d4d0 <strtof+0x90>
 800d4b2:	f04f 32ff 	mov.w	r2, #4294967295
 800d4b6:	4630      	mov	r0, r6
 800d4b8:	4649      	mov	r1, r9
 800d4ba:	4b0b      	ldr	r3, [pc, #44]	@ (800d4e8 <strtof+0xa8>)
 800d4bc:	f7f3 fb02 	bl	8000ac4 <__aeabi_dcmple>
 800d4c0:	b930      	cbnz	r0, 800d4d0 <strtof+0x90>
 800d4c2:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800d4c6:	d1d2      	bne.n	800d46e <strtof+0x2e>
 800d4c8:	4b08      	ldr	r3, [pc, #32]	@ (800d4ec <strtof+0xac>)
 800d4ca:	403b      	ands	r3, r7
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d0ce      	beq.n	800d46e <strtof+0x2e>
 800d4d0:	2222      	movs	r2, #34	@ 0x22
 800d4d2:	682b      	ldr	r3, [r5, #0]
 800d4d4:	601a      	str	r2, [r3, #0]
 800d4d6:	e7ca      	b.n	800d46e <strtof+0x2e>
 800d4d8:	20000284 	.word	0x20000284
 800d4dc:	20000118 	.word	0x20000118
 800d4e0:	080121e5 	.word	0x080121e5
 800d4e4:	7f7fffff 	.word	0x7f7fffff
 800d4e8:	7fefffff 	.word	0x7fefffff
 800d4ec:	7ff00000 	.word	0x7ff00000

0800d4f0 <_strtol_l.constprop.0>:
 800d4f0:	2b24      	cmp	r3, #36	@ 0x24
 800d4f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4f6:	4686      	mov	lr, r0
 800d4f8:	4690      	mov	r8, r2
 800d4fa:	d801      	bhi.n	800d500 <_strtol_l.constprop.0+0x10>
 800d4fc:	2b01      	cmp	r3, #1
 800d4fe:	d106      	bne.n	800d50e <_strtol_l.constprop.0+0x1e>
 800d500:	f001 fcb0 	bl	800ee64 <__errno>
 800d504:	2316      	movs	r3, #22
 800d506:	6003      	str	r3, [r0, #0]
 800d508:	2000      	movs	r0, #0
 800d50a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d50e:	460d      	mov	r5, r1
 800d510:	4833      	ldr	r0, [pc, #204]	@ (800d5e0 <_strtol_l.constprop.0+0xf0>)
 800d512:	462a      	mov	r2, r5
 800d514:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d518:	5d06      	ldrb	r6, [r0, r4]
 800d51a:	f016 0608 	ands.w	r6, r6, #8
 800d51e:	d1f8      	bne.n	800d512 <_strtol_l.constprop.0+0x22>
 800d520:	2c2d      	cmp	r4, #45	@ 0x2d
 800d522:	d12d      	bne.n	800d580 <_strtol_l.constprop.0+0x90>
 800d524:	2601      	movs	r6, #1
 800d526:	782c      	ldrb	r4, [r5, #0]
 800d528:	1c95      	adds	r5, r2, #2
 800d52a:	f033 0210 	bics.w	r2, r3, #16
 800d52e:	d109      	bne.n	800d544 <_strtol_l.constprop.0+0x54>
 800d530:	2c30      	cmp	r4, #48	@ 0x30
 800d532:	d12a      	bne.n	800d58a <_strtol_l.constprop.0+0x9a>
 800d534:	782a      	ldrb	r2, [r5, #0]
 800d536:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d53a:	2a58      	cmp	r2, #88	@ 0x58
 800d53c:	d125      	bne.n	800d58a <_strtol_l.constprop.0+0x9a>
 800d53e:	2310      	movs	r3, #16
 800d540:	786c      	ldrb	r4, [r5, #1]
 800d542:	3502      	adds	r5, #2
 800d544:	2200      	movs	r2, #0
 800d546:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d54a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d54e:	fbbc f9f3 	udiv	r9, ip, r3
 800d552:	4610      	mov	r0, r2
 800d554:	fb03 ca19 	mls	sl, r3, r9, ip
 800d558:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d55c:	2f09      	cmp	r7, #9
 800d55e:	d81b      	bhi.n	800d598 <_strtol_l.constprop.0+0xa8>
 800d560:	463c      	mov	r4, r7
 800d562:	42a3      	cmp	r3, r4
 800d564:	dd27      	ble.n	800d5b6 <_strtol_l.constprop.0+0xc6>
 800d566:	1c57      	adds	r7, r2, #1
 800d568:	d007      	beq.n	800d57a <_strtol_l.constprop.0+0x8a>
 800d56a:	4581      	cmp	r9, r0
 800d56c:	d320      	bcc.n	800d5b0 <_strtol_l.constprop.0+0xc0>
 800d56e:	d101      	bne.n	800d574 <_strtol_l.constprop.0+0x84>
 800d570:	45a2      	cmp	sl, r4
 800d572:	db1d      	blt.n	800d5b0 <_strtol_l.constprop.0+0xc0>
 800d574:	2201      	movs	r2, #1
 800d576:	fb00 4003 	mla	r0, r0, r3, r4
 800d57a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d57e:	e7eb      	b.n	800d558 <_strtol_l.constprop.0+0x68>
 800d580:	2c2b      	cmp	r4, #43	@ 0x2b
 800d582:	bf04      	itt	eq
 800d584:	782c      	ldrbeq	r4, [r5, #0]
 800d586:	1c95      	addeq	r5, r2, #2
 800d588:	e7cf      	b.n	800d52a <_strtol_l.constprop.0+0x3a>
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d1da      	bne.n	800d544 <_strtol_l.constprop.0+0x54>
 800d58e:	2c30      	cmp	r4, #48	@ 0x30
 800d590:	bf0c      	ite	eq
 800d592:	2308      	moveq	r3, #8
 800d594:	230a      	movne	r3, #10
 800d596:	e7d5      	b.n	800d544 <_strtol_l.constprop.0+0x54>
 800d598:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d59c:	2f19      	cmp	r7, #25
 800d59e:	d801      	bhi.n	800d5a4 <_strtol_l.constprop.0+0xb4>
 800d5a0:	3c37      	subs	r4, #55	@ 0x37
 800d5a2:	e7de      	b.n	800d562 <_strtol_l.constprop.0+0x72>
 800d5a4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d5a8:	2f19      	cmp	r7, #25
 800d5aa:	d804      	bhi.n	800d5b6 <_strtol_l.constprop.0+0xc6>
 800d5ac:	3c57      	subs	r4, #87	@ 0x57
 800d5ae:	e7d8      	b.n	800d562 <_strtol_l.constprop.0+0x72>
 800d5b0:	f04f 32ff 	mov.w	r2, #4294967295
 800d5b4:	e7e1      	b.n	800d57a <_strtol_l.constprop.0+0x8a>
 800d5b6:	1c53      	adds	r3, r2, #1
 800d5b8:	d108      	bne.n	800d5cc <_strtol_l.constprop.0+0xdc>
 800d5ba:	2322      	movs	r3, #34	@ 0x22
 800d5bc:	4660      	mov	r0, ip
 800d5be:	f8ce 3000 	str.w	r3, [lr]
 800d5c2:	f1b8 0f00 	cmp.w	r8, #0
 800d5c6:	d0a0      	beq.n	800d50a <_strtol_l.constprop.0+0x1a>
 800d5c8:	1e69      	subs	r1, r5, #1
 800d5ca:	e006      	b.n	800d5da <_strtol_l.constprop.0+0xea>
 800d5cc:	b106      	cbz	r6, 800d5d0 <_strtol_l.constprop.0+0xe0>
 800d5ce:	4240      	negs	r0, r0
 800d5d0:	f1b8 0f00 	cmp.w	r8, #0
 800d5d4:	d099      	beq.n	800d50a <_strtol_l.constprop.0+0x1a>
 800d5d6:	2a00      	cmp	r2, #0
 800d5d8:	d1f6      	bne.n	800d5c8 <_strtol_l.constprop.0+0xd8>
 800d5da:	f8c8 1000 	str.w	r1, [r8]
 800d5de:	e794      	b.n	800d50a <_strtol_l.constprop.0+0x1a>
 800d5e0:	08011f51 	.word	0x08011f51

0800d5e4 <_strtol_r>:
 800d5e4:	f7ff bf84 	b.w	800d4f0 <_strtol_l.constprop.0>

0800d5e8 <strtol>:
 800d5e8:	4613      	mov	r3, r2
 800d5ea:	460a      	mov	r2, r1
 800d5ec:	4601      	mov	r1, r0
 800d5ee:	4802      	ldr	r0, [pc, #8]	@ (800d5f8 <strtol+0x10>)
 800d5f0:	6800      	ldr	r0, [r0, #0]
 800d5f2:	f7ff bf7d 	b.w	800d4f0 <_strtol_l.constprop.0>
 800d5f6:	bf00      	nop
 800d5f8:	20000284 	.word	0x20000284

0800d5fc <__cvt>:
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d602:	461d      	mov	r5, r3
 800d604:	bfbb      	ittet	lt
 800d606:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800d60a:	461d      	movlt	r5, r3
 800d60c:	2300      	movge	r3, #0
 800d60e:	232d      	movlt	r3, #45	@ 0x2d
 800d610:	b088      	sub	sp, #32
 800d612:	4614      	mov	r4, r2
 800d614:	bfb8      	it	lt
 800d616:	4614      	movlt	r4, r2
 800d618:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d61a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800d61c:	7013      	strb	r3, [r2, #0]
 800d61e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d620:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800d624:	f023 0820 	bic.w	r8, r3, #32
 800d628:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d62c:	d005      	beq.n	800d63a <__cvt+0x3e>
 800d62e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d632:	d100      	bne.n	800d636 <__cvt+0x3a>
 800d634:	3601      	adds	r6, #1
 800d636:	2302      	movs	r3, #2
 800d638:	e000      	b.n	800d63c <__cvt+0x40>
 800d63a:	2303      	movs	r3, #3
 800d63c:	aa07      	add	r2, sp, #28
 800d63e:	9204      	str	r2, [sp, #16]
 800d640:	aa06      	add	r2, sp, #24
 800d642:	e9cd a202 	strd	sl, r2, [sp, #8]
 800d646:	e9cd 3600 	strd	r3, r6, [sp]
 800d64a:	4622      	mov	r2, r4
 800d64c:	462b      	mov	r3, r5
 800d64e:	f001 fd17 	bl	800f080 <_dtoa_r>
 800d652:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d656:	4607      	mov	r7, r0
 800d658:	d119      	bne.n	800d68e <__cvt+0x92>
 800d65a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d65c:	07db      	lsls	r3, r3, #31
 800d65e:	d50e      	bpl.n	800d67e <__cvt+0x82>
 800d660:	eb00 0906 	add.w	r9, r0, r6
 800d664:	2200      	movs	r2, #0
 800d666:	2300      	movs	r3, #0
 800d668:	4620      	mov	r0, r4
 800d66a:	4629      	mov	r1, r5
 800d66c:	f7f3 fa16 	bl	8000a9c <__aeabi_dcmpeq>
 800d670:	b108      	cbz	r0, 800d676 <__cvt+0x7a>
 800d672:	f8cd 901c 	str.w	r9, [sp, #28]
 800d676:	2230      	movs	r2, #48	@ 0x30
 800d678:	9b07      	ldr	r3, [sp, #28]
 800d67a:	454b      	cmp	r3, r9
 800d67c:	d31e      	bcc.n	800d6bc <__cvt+0xc0>
 800d67e:	4638      	mov	r0, r7
 800d680:	9b07      	ldr	r3, [sp, #28]
 800d682:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800d684:	1bdb      	subs	r3, r3, r7
 800d686:	6013      	str	r3, [r2, #0]
 800d688:	b008      	add	sp, #32
 800d68a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d68e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d692:	eb00 0906 	add.w	r9, r0, r6
 800d696:	d1e5      	bne.n	800d664 <__cvt+0x68>
 800d698:	7803      	ldrb	r3, [r0, #0]
 800d69a:	2b30      	cmp	r3, #48	@ 0x30
 800d69c:	d10a      	bne.n	800d6b4 <__cvt+0xb8>
 800d69e:	2200      	movs	r2, #0
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	4620      	mov	r0, r4
 800d6a4:	4629      	mov	r1, r5
 800d6a6:	f7f3 f9f9 	bl	8000a9c <__aeabi_dcmpeq>
 800d6aa:	b918      	cbnz	r0, 800d6b4 <__cvt+0xb8>
 800d6ac:	f1c6 0601 	rsb	r6, r6, #1
 800d6b0:	f8ca 6000 	str.w	r6, [sl]
 800d6b4:	f8da 3000 	ldr.w	r3, [sl]
 800d6b8:	4499      	add	r9, r3
 800d6ba:	e7d3      	b.n	800d664 <__cvt+0x68>
 800d6bc:	1c59      	adds	r1, r3, #1
 800d6be:	9107      	str	r1, [sp, #28]
 800d6c0:	701a      	strb	r2, [r3, #0]
 800d6c2:	e7d9      	b.n	800d678 <__cvt+0x7c>

0800d6c4 <__exponent>:
 800d6c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d6c6:	2900      	cmp	r1, #0
 800d6c8:	bfb6      	itet	lt
 800d6ca:	232d      	movlt	r3, #45	@ 0x2d
 800d6cc:	232b      	movge	r3, #43	@ 0x2b
 800d6ce:	4249      	neglt	r1, r1
 800d6d0:	2909      	cmp	r1, #9
 800d6d2:	7002      	strb	r2, [r0, #0]
 800d6d4:	7043      	strb	r3, [r0, #1]
 800d6d6:	dd29      	ble.n	800d72c <__exponent+0x68>
 800d6d8:	f10d 0307 	add.w	r3, sp, #7
 800d6dc:	461d      	mov	r5, r3
 800d6de:	270a      	movs	r7, #10
 800d6e0:	fbb1 f6f7 	udiv	r6, r1, r7
 800d6e4:	461a      	mov	r2, r3
 800d6e6:	fb07 1416 	mls	r4, r7, r6, r1
 800d6ea:	3430      	adds	r4, #48	@ 0x30
 800d6ec:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d6f0:	460c      	mov	r4, r1
 800d6f2:	2c63      	cmp	r4, #99	@ 0x63
 800d6f4:	4631      	mov	r1, r6
 800d6f6:	f103 33ff 	add.w	r3, r3, #4294967295
 800d6fa:	dcf1      	bgt.n	800d6e0 <__exponent+0x1c>
 800d6fc:	3130      	adds	r1, #48	@ 0x30
 800d6fe:	1e94      	subs	r4, r2, #2
 800d700:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d704:	4623      	mov	r3, r4
 800d706:	1c41      	adds	r1, r0, #1
 800d708:	42ab      	cmp	r3, r5
 800d70a:	d30a      	bcc.n	800d722 <__exponent+0x5e>
 800d70c:	f10d 0309 	add.w	r3, sp, #9
 800d710:	1a9b      	subs	r3, r3, r2
 800d712:	42ac      	cmp	r4, r5
 800d714:	bf88      	it	hi
 800d716:	2300      	movhi	r3, #0
 800d718:	3302      	adds	r3, #2
 800d71a:	4403      	add	r3, r0
 800d71c:	1a18      	subs	r0, r3, r0
 800d71e:	b003      	add	sp, #12
 800d720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d722:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d726:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d72a:	e7ed      	b.n	800d708 <__exponent+0x44>
 800d72c:	2330      	movs	r3, #48	@ 0x30
 800d72e:	3130      	adds	r1, #48	@ 0x30
 800d730:	7083      	strb	r3, [r0, #2]
 800d732:	70c1      	strb	r1, [r0, #3]
 800d734:	1d03      	adds	r3, r0, #4
 800d736:	e7f1      	b.n	800d71c <__exponent+0x58>

0800d738 <_printf_float>:
 800d738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d73c:	b091      	sub	sp, #68	@ 0x44
 800d73e:	460c      	mov	r4, r1
 800d740:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800d744:	4616      	mov	r6, r2
 800d746:	461f      	mov	r7, r3
 800d748:	4605      	mov	r5, r0
 800d74a:	f001 fadb 	bl	800ed04 <_localeconv_r>
 800d74e:	6803      	ldr	r3, [r0, #0]
 800d750:	4618      	mov	r0, r3
 800d752:	9308      	str	r3, [sp, #32]
 800d754:	f7f2 fd76 	bl	8000244 <strlen>
 800d758:	2300      	movs	r3, #0
 800d75a:	930e      	str	r3, [sp, #56]	@ 0x38
 800d75c:	f8d8 3000 	ldr.w	r3, [r8]
 800d760:	9009      	str	r0, [sp, #36]	@ 0x24
 800d762:	3307      	adds	r3, #7
 800d764:	f023 0307 	bic.w	r3, r3, #7
 800d768:	f103 0208 	add.w	r2, r3, #8
 800d76c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d770:	f8d4 b000 	ldr.w	fp, [r4]
 800d774:	f8c8 2000 	str.w	r2, [r8]
 800d778:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d77c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d780:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d782:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800d786:	f04f 32ff 	mov.w	r2, #4294967295
 800d78a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d78e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d792:	4b9c      	ldr	r3, [pc, #624]	@ (800da04 <_printf_float+0x2cc>)
 800d794:	f7f3 f9b4 	bl	8000b00 <__aeabi_dcmpun>
 800d798:	bb70      	cbnz	r0, 800d7f8 <_printf_float+0xc0>
 800d79a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d79e:	f04f 32ff 	mov.w	r2, #4294967295
 800d7a2:	4b98      	ldr	r3, [pc, #608]	@ (800da04 <_printf_float+0x2cc>)
 800d7a4:	f7f3 f98e 	bl	8000ac4 <__aeabi_dcmple>
 800d7a8:	bb30      	cbnz	r0, 800d7f8 <_printf_float+0xc0>
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	4640      	mov	r0, r8
 800d7b0:	4649      	mov	r1, r9
 800d7b2:	f7f3 f97d 	bl	8000ab0 <__aeabi_dcmplt>
 800d7b6:	b110      	cbz	r0, 800d7be <_printf_float+0x86>
 800d7b8:	232d      	movs	r3, #45	@ 0x2d
 800d7ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d7be:	4a92      	ldr	r2, [pc, #584]	@ (800da08 <_printf_float+0x2d0>)
 800d7c0:	4b92      	ldr	r3, [pc, #584]	@ (800da0c <_printf_float+0x2d4>)
 800d7c2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d7c6:	bf94      	ite	ls
 800d7c8:	4690      	movls	r8, r2
 800d7ca:	4698      	movhi	r8, r3
 800d7cc:	2303      	movs	r3, #3
 800d7ce:	f04f 0900 	mov.w	r9, #0
 800d7d2:	6123      	str	r3, [r4, #16]
 800d7d4:	f02b 0304 	bic.w	r3, fp, #4
 800d7d8:	6023      	str	r3, [r4, #0]
 800d7da:	4633      	mov	r3, r6
 800d7dc:	4621      	mov	r1, r4
 800d7de:	4628      	mov	r0, r5
 800d7e0:	9700      	str	r7, [sp, #0]
 800d7e2:	aa0f      	add	r2, sp, #60	@ 0x3c
 800d7e4:	f000 f9d4 	bl	800db90 <_printf_common>
 800d7e8:	3001      	adds	r0, #1
 800d7ea:	f040 8090 	bne.w	800d90e <_printf_float+0x1d6>
 800d7ee:	f04f 30ff 	mov.w	r0, #4294967295
 800d7f2:	b011      	add	sp, #68	@ 0x44
 800d7f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7f8:	4642      	mov	r2, r8
 800d7fa:	464b      	mov	r3, r9
 800d7fc:	4640      	mov	r0, r8
 800d7fe:	4649      	mov	r1, r9
 800d800:	f7f3 f97e 	bl	8000b00 <__aeabi_dcmpun>
 800d804:	b148      	cbz	r0, 800d81a <_printf_float+0xe2>
 800d806:	464b      	mov	r3, r9
 800d808:	2b00      	cmp	r3, #0
 800d80a:	bfb8      	it	lt
 800d80c:	232d      	movlt	r3, #45	@ 0x2d
 800d80e:	4a80      	ldr	r2, [pc, #512]	@ (800da10 <_printf_float+0x2d8>)
 800d810:	bfb8      	it	lt
 800d812:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d816:	4b7f      	ldr	r3, [pc, #508]	@ (800da14 <_printf_float+0x2dc>)
 800d818:	e7d3      	b.n	800d7c2 <_printf_float+0x8a>
 800d81a:	6863      	ldr	r3, [r4, #4]
 800d81c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800d820:	1c5a      	adds	r2, r3, #1
 800d822:	d13f      	bne.n	800d8a4 <_printf_float+0x16c>
 800d824:	2306      	movs	r3, #6
 800d826:	6063      	str	r3, [r4, #4]
 800d828:	2200      	movs	r2, #0
 800d82a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800d82e:	6023      	str	r3, [r4, #0]
 800d830:	9206      	str	r2, [sp, #24]
 800d832:	aa0e      	add	r2, sp, #56	@ 0x38
 800d834:	e9cd a204 	strd	sl, r2, [sp, #16]
 800d838:	aa0d      	add	r2, sp, #52	@ 0x34
 800d83a:	9203      	str	r2, [sp, #12]
 800d83c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800d840:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d844:	6863      	ldr	r3, [r4, #4]
 800d846:	4642      	mov	r2, r8
 800d848:	9300      	str	r3, [sp, #0]
 800d84a:	4628      	mov	r0, r5
 800d84c:	464b      	mov	r3, r9
 800d84e:	910a      	str	r1, [sp, #40]	@ 0x28
 800d850:	f7ff fed4 	bl	800d5fc <__cvt>
 800d854:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d856:	4680      	mov	r8, r0
 800d858:	2947      	cmp	r1, #71	@ 0x47
 800d85a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800d85c:	d128      	bne.n	800d8b0 <_printf_float+0x178>
 800d85e:	1cc8      	adds	r0, r1, #3
 800d860:	db02      	blt.n	800d868 <_printf_float+0x130>
 800d862:	6863      	ldr	r3, [r4, #4]
 800d864:	4299      	cmp	r1, r3
 800d866:	dd40      	ble.n	800d8ea <_printf_float+0x1b2>
 800d868:	f1aa 0a02 	sub.w	sl, sl, #2
 800d86c:	fa5f fa8a 	uxtb.w	sl, sl
 800d870:	4652      	mov	r2, sl
 800d872:	3901      	subs	r1, #1
 800d874:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d878:	910d      	str	r1, [sp, #52]	@ 0x34
 800d87a:	f7ff ff23 	bl	800d6c4 <__exponent>
 800d87e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d880:	4681      	mov	r9, r0
 800d882:	1813      	adds	r3, r2, r0
 800d884:	2a01      	cmp	r2, #1
 800d886:	6123      	str	r3, [r4, #16]
 800d888:	dc02      	bgt.n	800d890 <_printf_float+0x158>
 800d88a:	6822      	ldr	r2, [r4, #0]
 800d88c:	07d2      	lsls	r2, r2, #31
 800d88e:	d501      	bpl.n	800d894 <_printf_float+0x15c>
 800d890:	3301      	adds	r3, #1
 800d892:	6123      	str	r3, [r4, #16]
 800d894:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d09e      	beq.n	800d7da <_printf_float+0xa2>
 800d89c:	232d      	movs	r3, #45	@ 0x2d
 800d89e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d8a2:	e79a      	b.n	800d7da <_printf_float+0xa2>
 800d8a4:	2947      	cmp	r1, #71	@ 0x47
 800d8a6:	d1bf      	bne.n	800d828 <_printf_float+0xf0>
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d1bd      	bne.n	800d828 <_printf_float+0xf0>
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	e7ba      	b.n	800d826 <_printf_float+0xee>
 800d8b0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d8b4:	d9dc      	bls.n	800d870 <_printf_float+0x138>
 800d8b6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d8ba:	d118      	bne.n	800d8ee <_printf_float+0x1b6>
 800d8bc:	2900      	cmp	r1, #0
 800d8be:	6863      	ldr	r3, [r4, #4]
 800d8c0:	dd0b      	ble.n	800d8da <_printf_float+0x1a2>
 800d8c2:	6121      	str	r1, [r4, #16]
 800d8c4:	b913      	cbnz	r3, 800d8cc <_printf_float+0x194>
 800d8c6:	6822      	ldr	r2, [r4, #0]
 800d8c8:	07d0      	lsls	r0, r2, #31
 800d8ca:	d502      	bpl.n	800d8d2 <_printf_float+0x19a>
 800d8cc:	3301      	adds	r3, #1
 800d8ce:	440b      	add	r3, r1
 800d8d0:	6123      	str	r3, [r4, #16]
 800d8d2:	f04f 0900 	mov.w	r9, #0
 800d8d6:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d8d8:	e7dc      	b.n	800d894 <_printf_float+0x15c>
 800d8da:	b913      	cbnz	r3, 800d8e2 <_printf_float+0x1aa>
 800d8dc:	6822      	ldr	r2, [r4, #0]
 800d8de:	07d2      	lsls	r2, r2, #31
 800d8e0:	d501      	bpl.n	800d8e6 <_printf_float+0x1ae>
 800d8e2:	3302      	adds	r3, #2
 800d8e4:	e7f4      	b.n	800d8d0 <_printf_float+0x198>
 800d8e6:	2301      	movs	r3, #1
 800d8e8:	e7f2      	b.n	800d8d0 <_printf_float+0x198>
 800d8ea:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d8ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d8f0:	4299      	cmp	r1, r3
 800d8f2:	db05      	blt.n	800d900 <_printf_float+0x1c8>
 800d8f4:	6823      	ldr	r3, [r4, #0]
 800d8f6:	6121      	str	r1, [r4, #16]
 800d8f8:	07d8      	lsls	r0, r3, #31
 800d8fa:	d5ea      	bpl.n	800d8d2 <_printf_float+0x19a>
 800d8fc:	1c4b      	adds	r3, r1, #1
 800d8fe:	e7e7      	b.n	800d8d0 <_printf_float+0x198>
 800d900:	2900      	cmp	r1, #0
 800d902:	bfcc      	ite	gt
 800d904:	2201      	movgt	r2, #1
 800d906:	f1c1 0202 	rsble	r2, r1, #2
 800d90a:	4413      	add	r3, r2
 800d90c:	e7e0      	b.n	800d8d0 <_printf_float+0x198>
 800d90e:	6823      	ldr	r3, [r4, #0]
 800d910:	055a      	lsls	r2, r3, #21
 800d912:	d407      	bmi.n	800d924 <_printf_float+0x1ec>
 800d914:	6923      	ldr	r3, [r4, #16]
 800d916:	4642      	mov	r2, r8
 800d918:	4631      	mov	r1, r6
 800d91a:	4628      	mov	r0, r5
 800d91c:	47b8      	blx	r7
 800d91e:	3001      	adds	r0, #1
 800d920:	d12b      	bne.n	800d97a <_printf_float+0x242>
 800d922:	e764      	b.n	800d7ee <_printf_float+0xb6>
 800d924:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d928:	f240 80dc 	bls.w	800dae4 <_printf_float+0x3ac>
 800d92c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d930:	2200      	movs	r2, #0
 800d932:	2300      	movs	r3, #0
 800d934:	f7f3 f8b2 	bl	8000a9c <__aeabi_dcmpeq>
 800d938:	2800      	cmp	r0, #0
 800d93a:	d033      	beq.n	800d9a4 <_printf_float+0x26c>
 800d93c:	2301      	movs	r3, #1
 800d93e:	4631      	mov	r1, r6
 800d940:	4628      	mov	r0, r5
 800d942:	4a35      	ldr	r2, [pc, #212]	@ (800da18 <_printf_float+0x2e0>)
 800d944:	47b8      	blx	r7
 800d946:	3001      	adds	r0, #1
 800d948:	f43f af51 	beq.w	800d7ee <_printf_float+0xb6>
 800d94c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800d950:	4543      	cmp	r3, r8
 800d952:	db02      	blt.n	800d95a <_printf_float+0x222>
 800d954:	6823      	ldr	r3, [r4, #0]
 800d956:	07d8      	lsls	r0, r3, #31
 800d958:	d50f      	bpl.n	800d97a <_printf_float+0x242>
 800d95a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d95e:	4631      	mov	r1, r6
 800d960:	4628      	mov	r0, r5
 800d962:	47b8      	blx	r7
 800d964:	3001      	adds	r0, #1
 800d966:	f43f af42 	beq.w	800d7ee <_printf_float+0xb6>
 800d96a:	f04f 0900 	mov.w	r9, #0
 800d96e:	f108 38ff 	add.w	r8, r8, #4294967295
 800d972:	f104 0a1a 	add.w	sl, r4, #26
 800d976:	45c8      	cmp	r8, r9
 800d978:	dc09      	bgt.n	800d98e <_printf_float+0x256>
 800d97a:	6823      	ldr	r3, [r4, #0]
 800d97c:	079b      	lsls	r3, r3, #30
 800d97e:	f100 8102 	bmi.w	800db86 <_printf_float+0x44e>
 800d982:	68e0      	ldr	r0, [r4, #12]
 800d984:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d986:	4298      	cmp	r0, r3
 800d988:	bfb8      	it	lt
 800d98a:	4618      	movlt	r0, r3
 800d98c:	e731      	b.n	800d7f2 <_printf_float+0xba>
 800d98e:	2301      	movs	r3, #1
 800d990:	4652      	mov	r2, sl
 800d992:	4631      	mov	r1, r6
 800d994:	4628      	mov	r0, r5
 800d996:	47b8      	blx	r7
 800d998:	3001      	adds	r0, #1
 800d99a:	f43f af28 	beq.w	800d7ee <_printf_float+0xb6>
 800d99e:	f109 0901 	add.w	r9, r9, #1
 800d9a2:	e7e8      	b.n	800d976 <_printf_float+0x23e>
 800d9a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	dc38      	bgt.n	800da1c <_printf_float+0x2e4>
 800d9aa:	2301      	movs	r3, #1
 800d9ac:	4631      	mov	r1, r6
 800d9ae:	4628      	mov	r0, r5
 800d9b0:	4a19      	ldr	r2, [pc, #100]	@ (800da18 <_printf_float+0x2e0>)
 800d9b2:	47b8      	blx	r7
 800d9b4:	3001      	adds	r0, #1
 800d9b6:	f43f af1a 	beq.w	800d7ee <_printf_float+0xb6>
 800d9ba:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800d9be:	ea59 0303 	orrs.w	r3, r9, r3
 800d9c2:	d102      	bne.n	800d9ca <_printf_float+0x292>
 800d9c4:	6823      	ldr	r3, [r4, #0]
 800d9c6:	07d9      	lsls	r1, r3, #31
 800d9c8:	d5d7      	bpl.n	800d97a <_printf_float+0x242>
 800d9ca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d9ce:	4631      	mov	r1, r6
 800d9d0:	4628      	mov	r0, r5
 800d9d2:	47b8      	blx	r7
 800d9d4:	3001      	adds	r0, #1
 800d9d6:	f43f af0a 	beq.w	800d7ee <_printf_float+0xb6>
 800d9da:	f04f 0a00 	mov.w	sl, #0
 800d9de:	f104 0b1a 	add.w	fp, r4, #26
 800d9e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d9e4:	425b      	negs	r3, r3
 800d9e6:	4553      	cmp	r3, sl
 800d9e8:	dc01      	bgt.n	800d9ee <_printf_float+0x2b6>
 800d9ea:	464b      	mov	r3, r9
 800d9ec:	e793      	b.n	800d916 <_printf_float+0x1de>
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	465a      	mov	r2, fp
 800d9f2:	4631      	mov	r1, r6
 800d9f4:	4628      	mov	r0, r5
 800d9f6:	47b8      	blx	r7
 800d9f8:	3001      	adds	r0, #1
 800d9fa:	f43f aef8 	beq.w	800d7ee <_printf_float+0xb6>
 800d9fe:	f10a 0a01 	add.w	sl, sl, #1
 800da02:	e7ee      	b.n	800d9e2 <_printf_float+0x2aa>
 800da04:	7fefffff 	.word	0x7fefffff
 800da08:	08012051 	.word	0x08012051
 800da0c:	08012055 	.word	0x08012055
 800da10:	08012059 	.word	0x08012059
 800da14:	0801205d 	.word	0x0801205d
 800da18:	080124a2 	.word	0x080124a2
 800da1c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800da1e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800da22:	4553      	cmp	r3, sl
 800da24:	bfa8      	it	ge
 800da26:	4653      	movge	r3, sl
 800da28:	2b00      	cmp	r3, #0
 800da2a:	4699      	mov	r9, r3
 800da2c:	dc36      	bgt.n	800da9c <_printf_float+0x364>
 800da2e:	f04f 0b00 	mov.w	fp, #0
 800da32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800da36:	f104 021a 	add.w	r2, r4, #26
 800da3a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800da3c:	930a      	str	r3, [sp, #40]	@ 0x28
 800da3e:	eba3 0309 	sub.w	r3, r3, r9
 800da42:	455b      	cmp	r3, fp
 800da44:	dc31      	bgt.n	800daaa <_printf_float+0x372>
 800da46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800da48:	459a      	cmp	sl, r3
 800da4a:	dc3a      	bgt.n	800dac2 <_printf_float+0x38a>
 800da4c:	6823      	ldr	r3, [r4, #0]
 800da4e:	07da      	lsls	r2, r3, #31
 800da50:	d437      	bmi.n	800dac2 <_printf_float+0x38a>
 800da52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800da54:	ebaa 0903 	sub.w	r9, sl, r3
 800da58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da5a:	ebaa 0303 	sub.w	r3, sl, r3
 800da5e:	4599      	cmp	r9, r3
 800da60:	bfa8      	it	ge
 800da62:	4699      	movge	r9, r3
 800da64:	f1b9 0f00 	cmp.w	r9, #0
 800da68:	dc33      	bgt.n	800dad2 <_printf_float+0x39a>
 800da6a:	f04f 0800 	mov.w	r8, #0
 800da6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800da72:	f104 0b1a 	add.w	fp, r4, #26
 800da76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800da78:	ebaa 0303 	sub.w	r3, sl, r3
 800da7c:	eba3 0309 	sub.w	r3, r3, r9
 800da80:	4543      	cmp	r3, r8
 800da82:	f77f af7a 	ble.w	800d97a <_printf_float+0x242>
 800da86:	2301      	movs	r3, #1
 800da88:	465a      	mov	r2, fp
 800da8a:	4631      	mov	r1, r6
 800da8c:	4628      	mov	r0, r5
 800da8e:	47b8      	blx	r7
 800da90:	3001      	adds	r0, #1
 800da92:	f43f aeac 	beq.w	800d7ee <_printf_float+0xb6>
 800da96:	f108 0801 	add.w	r8, r8, #1
 800da9a:	e7ec      	b.n	800da76 <_printf_float+0x33e>
 800da9c:	4642      	mov	r2, r8
 800da9e:	4631      	mov	r1, r6
 800daa0:	4628      	mov	r0, r5
 800daa2:	47b8      	blx	r7
 800daa4:	3001      	adds	r0, #1
 800daa6:	d1c2      	bne.n	800da2e <_printf_float+0x2f6>
 800daa8:	e6a1      	b.n	800d7ee <_printf_float+0xb6>
 800daaa:	2301      	movs	r3, #1
 800daac:	4631      	mov	r1, r6
 800daae:	4628      	mov	r0, r5
 800dab0:	920a      	str	r2, [sp, #40]	@ 0x28
 800dab2:	47b8      	blx	r7
 800dab4:	3001      	adds	r0, #1
 800dab6:	f43f ae9a 	beq.w	800d7ee <_printf_float+0xb6>
 800daba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dabc:	f10b 0b01 	add.w	fp, fp, #1
 800dac0:	e7bb      	b.n	800da3a <_printf_float+0x302>
 800dac2:	4631      	mov	r1, r6
 800dac4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800dac8:	4628      	mov	r0, r5
 800daca:	47b8      	blx	r7
 800dacc:	3001      	adds	r0, #1
 800dace:	d1c0      	bne.n	800da52 <_printf_float+0x31a>
 800dad0:	e68d      	b.n	800d7ee <_printf_float+0xb6>
 800dad2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dad4:	464b      	mov	r3, r9
 800dad6:	4631      	mov	r1, r6
 800dad8:	4628      	mov	r0, r5
 800dada:	4442      	add	r2, r8
 800dadc:	47b8      	blx	r7
 800dade:	3001      	adds	r0, #1
 800dae0:	d1c3      	bne.n	800da6a <_printf_float+0x332>
 800dae2:	e684      	b.n	800d7ee <_printf_float+0xb6>
 800dae4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800dae8:	f1ba 0f01 	cmp.w	sl, #1
 800daec:	dc01      	bgt.n	800daf2 <_printf_float+0x3ba>
 800daee:	07db      	lsls	r3, r3, #31
 800daf0:	d536      	bpl.n	800db60 <_printf_float+0x428>
 800daf2:	2301      	movs	r3, #1
 800daf4:	4642      	mov	r2, r8
 800daf6:	4631      	mov	r1, r6
 800daf8:	4628      	mov	r0, r5
 800dafa:	47b8      	blx	r7
 800dafc:	3001      	adds	r0, #1
 800dafe:	f43f ae76 	beq.w	800d7ee <_printf_float+0xb6>
 800db02:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800db06:	4631      	mov	r1, r6
 800db08:	4628      	mov	r0, r5
 800db0a:	47b8      	blx	r7
 800db0c:	3001      	adds	r0, #1
 800db0e:	f43f ae6e 	beq.w	800d7ee <_printf_float+0xb6>
 800db12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800db16:	2200      	movs	r2, #0
 800db18:	2300      	movs	r3, #0
 800db1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800db1e:	f7f2 ffbd 	bl	8000a9c <__aeabi_dcmpeq>
 800db22:	b9c0      	cbnz	r0, 800db56 <_printf_float+0x41e>
 800db24:	4653      	mov	r3, sl
 800db26:	f108 0201 	add.w	r2, r8, #1
 800db2a:	4631      	mov	r1, r6
 800db2c:	4628      	mov	r0, r5
 800db2e:	47b8      	blx	r7
 800db30:	3001      	adds	r0, #1
 800db32:	d10c      	bne.n	800db4e <_printf_float+0x416>
 800db34:	e65b      	b.n	800d7ee <_printf_float+0xb6>
 800db36:	2301      	movs	r3, #1
 800db38:	465a      	mov	r2, fp
 800db3a:	4631      	mov	r1, r6
 800db3c:	4628      	mov	r0, r5
 800db3e:	47b8      	blx	r7
 800db40:	3001      	adds	r0, #1
 800db42:	f43f ae54 	beq.w	800d7ee <_printf_float+0xb6>
 800db46:	f108 0801 	add.w	r8, r8, #1
 800db4a:	45d0      	cmp	r8, sl
 800db4c:	dbf3      	blt.n	800db36 <_printf_float+0x3fe>
 800db4e:	464b      	mov	r3, r9
 800db50:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800db54:	e6e0      	b.n	800d918 <_printf_float+0x1e0>
 800db56:	f04f 0800 	mov.w	r8, #0
 800db5a:	f104 0b1a 	add.w	fp, r4, #26
 800db5e:	e7f4      	b.n	800db4a <_printf_float+0x412>
 800db60:	2301      	movs	r3, #1
 800db62:	4642      	mov	r2, r8
 800db64:	e7e1      	b.n	800db2a <_printf_float+0x3f2>
 800db66:	2301      	movs	r3, #1
 800db68:	464a      	mov	r2, r9
 800db6a:	4631      	mov	r1, r6
 800db6c:	4628      	mov	r0, r5
 800db6e:	47b8      	blx	r7
 800db70:	3001      	adds	r0, #1
 800db72:	f43f ae3c 	beq.w	800d7ee <_printf_float+0xb6>
 800db76:	f108 0801 	add.w	r8, r8, #1
 800db7a:	68e3      	ldr	r3, [r4, #12]
 800db7c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800db7e:	1a5b      	subs	r3, r3, r1
 800db80:	4543      	cmp	r3, r8
 800db82:	dcf0      	bgt.n	800db66 <_printf_float+0x42e>
 800db84:	e6fd      	b.n	800d982 <_printf_float+0x24a>
 800db86:	f04f 0800 	mov.w	r8, #0
 800db8a:	f104 0919 	add.w	r9, r4, #25
 800db8e:	e7f4      	b.n	800db7a <_printf_float+0x442>

0800db90 <_printf_common>:
 800db90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db94:	4616      	mov	r6, r2
 800db96:	4698      	mov	r8, r3
 800db98:	688a      	ldr	r2, [r1, #8]
 800db9a:	690b      	ldr	r3, [r1, #16]
 800db9c:	4607      	mov	r7, r0
 800db9e:	4293      	cmp	r3, r2
 800dba0:	bfb8      	it	lt
 800dba2:	4613      	movlt	r3, r2
 800dba4:	6033      	str	r3, [r6, #0]
 800dba6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dbaa:	460c      	mov	r4, r1
 800dbac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dbb0:	b10a      	cbz	r2, 800dbb6 <_printf_common+0x26>
 800dbb2:	3301      	adds	r3, #1
 800dbb4:	6033      	str	r3, [r6, #0]
 800dbb6:	6823      	ldr	r3, [r4, #0]
 800dbb8:	0699      	lsls	r1, r3, #26
 800dbba:	bf42      	ittt	mi
 800dbbc:	6833      	ldrmi	r3, [r6, #0]
 800dbbe:	3302      	addmi	r3, #2
 800dbc0:	6033      	strmi	r3, [r6, #0]
 800dbc2:	6825      	ldr	r5, [r4, #0]
 800dbc4:	f015 0506 	ands.w	r5, r5, #6
 800dbc8:	d106      	bne.n	800dbd8 <_printf_common+0x48>
 800dbca:	f104 0a19 	add.w	sl, r4, #25
 800dbce:	68e3      	ldr	r3, [r4, #12]
 800dbd0:	6832      	ldr	r2, [r6, #0]
 800dbd2:	1a9b      	subs	r3, r3, r2
 800dbd4:	42ab      	cmp	r3, r5
 800dbd6:	dc2b      	bgt.n	800dc30 <_printf_common+0xa0>
 800dbd8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dbdc:	6822      	ldr	r2, [r4, #0]
 800dbde:	3b00      	subs	r3, #0
 800dbe0:	bf18      	it	ne
 800dbe2:	2301      	movne	r3, #1
 800dbe4:	0692      	lsls	r2, r2, #26
 800dbe6:	d430      	bmi.n	800dc4a <_printf_common+0xba>
 800dbe8:	4641      	mov	r1, r8
 800dbea:	4638      	mov	r0, r7
 800dbec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dbf0:	47c8      	blx	r9
 800dbf2:	3001      	adds	r0, #1
 800dbf4:	d023      	beq.n	800dc3e <_printf_common+0xae>
 800dbf6:	6823      	ldr	r3, [r4, #0]
 800dbf8:	6922      	ldr	r2, [r4, #16]
 800dbfa:	f003 0306 	and.w	r3, r3, #6
 800dbfe:	2b04      	cmp	r3, #4
 800dc00:	bf14      	ite	ne
 800dc02:	2500      	movne	r5, #0
 800dc04:	6833      	ldreq	r3, [r6, #0]
 800dc06:	f04f 0600 	mov.w	r6, #0
 800dc0a:	bf08      	it	eq
 800dc0c:	68e5      	ldreq	r5, [r4, #12]
 800dc0e:	f104 041a 	add.w	r4, r4, #26
 800dc12:	bf08      	it	eq
 800dc14:	1aed      	subeq	r5, r5, r3
 800dc16:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800dc1a:	bf08      	it	eq
 800dc1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dc20:	4293      	cmp	r3, r2
 800dc22:	bfc4      	itt	gt
 800dc24:	1a9b      	subgt	r3, r3, r2
 800dc26:	18ed      	addgt	r5, r5, r3
 800dc28:	42b5      	cmp	r5, r6
 800dc2a:	d11a      	bne.n	800dc62 <_printf_common+0xd2>
 800dc2c:	2000      	movs	r0, #0
 800dc2e:	e008      	b.n	800dc42 <_printf_common+0xb2>
 800dc30:	2301      	movs	r3, #1
 800dc32:	4652      	mov	r2, sl
 800dc34:	4641      	mov	r1, r8
 800dc36:	4638      	mov	r0, r7
 800dc38:	47c8      	blx	r9
 800dc3a:	3001      	adds	r0, #1
 800dc3c:	d103      	bne.n	800dc46 <_printf_common+0xb6>
 800dc3e:	f04f 30ff 	mov.w	r0, #4294967295
 800dc42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc46:	3501      	adds	r5, #1
 800dc48:	e7c1      	b.n	800dbce <_printf_common+0x3e>
 800dc4a:	2030      	movs	r0, #48	@ 0x30
 800dc4c:	18e1      	adds	r1, r4, r3
 800dc4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dc52:	1c5a      	adds	r2, r3, #1
 800dc54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dc58:	4422      	add	r2, r4
 800dc5a:	3302      	adds	r3, #2
 800dc5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dc60:	e7c2      	b.n	800dbe8 <_printf_common+0x58>
 800dc62:	2301      	movs	r3, #1
 800dc64:	4622      	mov	r2, r4
 800dc66:	4641      	mov	r1, r8
 800dc68:	4638      	mov	r0, r7
 800dc6a:	47c8      	blx	r9
 800dc6c:	3001      	adds	r0, #1
 800dc6e:	d0e6      	beq.n	800dc3e <_printf_common+0xae>
 800dc70:	3601      	adds	r6, #1
 800dc72:	e7d9      	b.n	800dc28 <_printf_common+0x98>

0800dc74 <_printf_i>:
 800dc74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dc78:	7e0f      	ldrb	r7, [r1, #24]
 800dc7a:	4691      	mov	r9, r2
 800dc7c:	2f78      	cmp	r7, #120	@ 0x78
 800dc7e:	4680      	mov	r8, r0
 800dc80:	460c      	mov	r4, r1
 800dc82:	469a      	mov	sl, r3
 800dc84:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dc86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dc8a:	d807      	bhi.n	800dc9c <_printf_i+0x28>
 800dc8c:	2f62      	cmp	r7, #98	@ 0x62
 800dc8e:	d80a      	bhi.n	800dca6 <_printf_i+0x32>
 800dc90:	2f00      	cmp	r7, #0
 800dc92:	f000 80d3 	beq.w	800de3c <_printf_i+0x1c8>
 800dc96:	2f58      	cmp	r7, #88	@ 0x58
 800dc98:	f000 80ba 	beq.w	800de10 <_printf_i+0x19c>
 800dc9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dca0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dca4:	e03a      	b.n	800dd1c <_printf_i+0xa8>
 800dca6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dcaa:	2b15      	cmp	r3, #21
 800dcac:	d8f6      	bhi.n	800dc9c <_printf_i+0x28>
 800dcae:	a101      	add	r1, pc, #4	@ (adr r1, 800dcb4 <_printf_i+0x40>)
 800dcb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dcb4:	0800dd0d 	.word	0x0800dd0d
 800dcb8:	0800dd21 	.word	0x0800dd21
 800dcbc:	0800dc9d 	.word	0x0800dc9d
 800dcc0:	0800dc9d 	.word	0x0800dc9d
 800dcc4:	0800dc9d 	.word	0x0800dc9d
 800dcc8:	0800dc9d 	.word	0x0800dc9d
 800dccc:	0800dd21 	.word	0x0800dd21
 800dcd0:	0800dc9d 	.word	0x0800dc9d
 800dcd4:	0800dc9d 	.word	0x0800dc9d
 800dcd8:	0800dc9d 	.word	0x0800dc9d
 800dcdc:	0800dc9d 	.word	0x0800dc9d
 800dce0:	0800de23 	.word	0x0800de23
 800dce4:	0800dd4b 	.word	0x0800dd4b
 800dce8:	0800dddd 	.word	0x0800dddd
 800dcec:	0800dc9d 	.word	0x0800dc9d
 800dcf0:	0800dc9d 	.word	0x0800dc9d
 800dcf4:	0800de45 	.word	0x0800de45
 800dcf8:	0800dc9d 	.word	0x0800dc9d
 800dcfc:	0800dd4b 	.word	0x0800dd4b
 800dd00:	0800dc9d 	.word	0x0800dc9d
 800dd04:	0800dc9d 	.word	0x0800dc9d
 800dd08:	0800dde5 	.word	0x0800dde5
 800dd0c:	6833      	ldr	r3, [r6, #0]
 800dd0e:	1d1a      	adds	r2, r3, #4
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	6032      	str	r2, [r6, #0]
 800dd14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dd18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dd1c:	2301      	movs	r3, #1
 800dd1e:	e09e      	b.n	800de5e <_printf_i+0x1ea>
 800dd20:	6833      	ldr	r3, [r6, #0]
 800dd22:	6820      	ldr	r0, [r4, #0]
 800dd24:	1d19      	adds	r1, r3, #4
 800dd26:	6031      	str	r1, [r6, #0]
 800dd28:	0606      	lsls	r6, r0, #24
 800dd2a:	d501      	bpl.n	800dd30 <_printf_i+0xbc>
 800dd2c:	681d      	ldr	r5, [r3, #0]
 800dd2e:	e003      	b.n	800dd38 <_printf_i+0xc4>
 800dd30:	0645      	lsls	r5, r0, #25
 800dd32:	d5fb      	bpl.n	800dd2c <_printf_i+0xb8>
 800dd34:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dd38:	2d00      	cmp	r5, #0
 800dd3a:	da03      	bge.n	800dd44 <_printf_i+0xd0>
 800dd3c:	232d      	movs	r3, #45	@ 0x2d
 800dd3e:	426d      	negs	r5, r5
 800dd40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dd44:	230a      	movs	r3, #10
 800dd46:	4859      	ldr	r0, [pc, #356]	@ (800deac <_printf_i+0x238>)
 800dd48:	e011      	b.n	800dd6e <_printf_i+0xfa>
 800dd4a:	6821      	ldr	r1, [r4, #0]
 800dd4c:	6833      	ldr	r3, [r6, #0]
 800dd4e:	0608      	lsls	r0, r1, #24
 800dd50:	f853 5b04 	ldr.w	r5, [r3], #4
 800dd54:	d402      	bmi.n	800dd5c <_printf_i+0xe8>
 800dd56:	0649      	lsls	r1, r1, #25
 800dd58:	bf48      	it	mi
 800dd5a:	b2ad      	uxthmi	r5, r5
 800dd5c:	2f6f      	cmp	r7, #111	@ 0x6f
 800dd5e:	6033      	str	r3, [r6, #0]
 800dd60:	bf14      	ite	ne
 800dd62:	230a      	movne	r3, #10
 800dd64:	2308      	moveq	r3, #8
 800dd66:	4851      	ldr	r0, [pc, #324]	@ (800deac <_printf_i+0x238>)
 800dd68:	2100      	movs	r1, #0
 800dd6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dd6e:	6866      	ldr	r6, [r4, #4]
 800dd70:	2e00      	cmp	r6, #0
 800dd72:	bfa8      	it	ge
 800dd74:	6821      	ldrge	r1, [r4, #0]
 800dd76:	60a6      	str	r6, [r4, #8]
 800dd78:	bfa4      	itt	ge
 800dd7a:	f021 0104 	bicge.w	r1, r1, #4
 800dd7e:	6021      	strge	r1, [r4, #0]
 800dd80:	b90d      	cbnz	r5, 800dd86 <_printf_i+0x112>
 800dd82:	2e00      	cmp	r6, #0
 800dd84:	d04b      	beq.n	800de1e <_printf_i+0x1aa>
 800dd86:	4616      	mov	r6, r2
 800dd88:	fbb5 f1f3 	udiv	r1, r5, r3
 800dd8c:	fb03 5711 	mls	r7, r3, r1, r5
 800dd90:	5dc7      	ldrb	r7, [r0, r7]
 800dd92:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dd96:	462f      	mov	r7, r5
 800dd98:	42bb      	cmp	r3, r7
 800dd9a:	460d      	mov	r5, r1
 800dd9c:	d9f4      	bls.n	800dd88 <_printf_i+0x114>
 800dd9e:	2b08      	cmp	r3, #8
 800dda0:	d10b      	bne.n	800ddba <_printf_i+0x146>
 800dda2:	6823      	ldr	r3, [r4, #0]
 800dda4:	07df      	lsls	r7, r3, #31
 800dda6:	d508      	bpl.n	800ddba <_printf_i+0x146>
 800dda8:	6923      	ldr	r3, [r4, #16]
 800ddaa:	6861      	ldr	r1, [r4, #4]
 800ddac:	4299      	cmp	r1, r3
 800ddae:	bfde      	ittt	le
 800ddb0:	2330      	movle	r3, #48	@ 0x30
 800ddb2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ddb6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ddba:	1b92      	subs	r2, r2, r6
 800ddbc:	6122      	str	r2, [r4, #16]
 800ddbe:	464b      	mov	r3, r9
 800ddc0:	4621      	mov	r1, r4
 800ddc2:	4640      	mov	r0, r8
 800ddc4:	f8cd a000 	str.w	sl, [sp]
 800ddc8:	aa03      	add	r2, sp, #12
 800ddca:	f7ff fee1 	bl	800db90 <_printf_common>
 800ddce:	3001      	adds	r0, #1
 800ddd0:	d14a      	bne.n	800de68 <_printf_i+0x1f4>
 800ddd2:	f04f 30ff 	mov.w	r0, #4294967295
 800ddd6:	b004      	add	sp, #16
 800ddd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dddc:	6823      	ldr	r3, [r4, #0]
 800ddde:	f043 0320 	orr.w	r3, r3, #32
 800dde2:	6023      	str	r3, [r4, #0]
 800dde4:	2778      	movs	r7, #120	@ 0x78
 800dde6:	4832      	ldr	r0, [pc, #200]	@ (800deb0 <_printf_i+0x23c>)
 800dde8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ddec:	6823      	ldr	r3, [r4, #0]
 800ddee:	6831      	ldr	r1, [r6, #0]
 800ddf0:	061f      	lsls	r7, r3, #24
 800ddf2:	f851 5b04 	ldr.w	r5, [r1], #4
 800ddf6:	d402      	bmi.n	800ddfe <_printf_i+0x18a>
 800ddf8:	065f      	lsls	r7, r3, #25
 800ddfa:	bf48      	it	mi
 800ddfc:	b2ad      	uxthmi	r5, r5
 800ddfe:	6031      	str	r1, [r6, #0]
 800de00:	07d9      	lsls	r1, r3, #31
 800de02:	bf44      	itt	mi
 800de04:	f043 0320 	orrmi.w	r3, r3, #32
 800de08:	6023      	strmi	r3, [r4, #0]
 800de0a:	b11d      	cbz	r5, 800de14 <_printf_i+0x1a0>
 800de0c:	2310      	movs	r3, #16
 800de0e:	e7ab      	b.n	800dd68 <_printf_i+0xf4>
 800de10:	4826      	ldr	r0, [pc, #152]	@ (800deac <_printf_i+0x238>)
 800de12:	e7e9      	b.n	800dde8 <_printf_i+0x174>
 800de14:	6823      	ldr	r3, [r4, #0]
 800de16:	f023 0320 	bic.w	r3, r3, #32
 800de1a:	6023      	str	r3, [r4, #0]
 800de1c:	e7f6      	b.n	800de0c <_printf_i+0x198>
 800de1e:	4616      	mov	r6, r2
 800de20:	e7bd      	b.n	800dd9e <_printf_i+0x12a>
 800de22:	6833      	ldr	r3, [r6, #0]
 800de24:	6825      	ldr	r5, [r4, #0]
 800de26:	1d18      	adds	r0, r3, #4
 800de28:	6961      	ldr	r1, [r4, #20]
 800de2a:	6030      	str	r0, [r6, #0]
 800de2c:	062e      	lsls	r6, r5, #24
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	d501      	bpl.n	800de36 <_printf_i+0x1c2>
 800de32:	6019      	str	r1, [r3, #0]
 800de34:	e002      	b.n	800de3c <_printf_i+0x1c8>
 800de36:	0668      	lsls	r0, r5, #25
 800de38:	d5fb      	bpl.n	800de32 <_printf_i+0x1be>
 800de3a:	8019      	strh	r1, [r3, #0]
 800de3c:	2300      	movs	r3, #0
 800de3e:	4616      	mov	r6, r2
 800de40:	6123      	str	r3, [r4, #16]
 800de42:	e7bc      	b.n	800ddbe <_printf_i+0x14a>
 800de44:	6833      	ldr	r3, [r6, #0]
 800de46:	2100      	movs	r1, #0
 800de48:	1d1a      	adds	r2, r3, #4
 800de4a:	6032      	str	r2, [r6, #0]
 800de4c:	681e      	ldr	r6, [r3, #0]
 800de4e:	6862      	ldr	r2, [r4, #4]
 800de50:	4630      	mov	r0, r6
 800de52:	f001 f83e 	bl	800eed2 <memchr>
 800de56:	b108      	cbz	r0, 800de5c <_printf_i+0x1e8>
 800de58:	1b80      	subs	r0, r0, r6
 800de5a:	6060      	str	r0, [r4, #4]
 800de5c:	6863      	ldr	r3, [r4, #4]
 800de5e:	6123      	str	r3, [r4, #16]
 800de60:	2300      	movs	r3, #0
 800de62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800de66:	e7aa      	b.n	800ddbe <_printf_i+0x14a>
 800de68:	4632      	mov	r2, r6
 800de6a:	4649      	mov	r1, r9
 800de6c:	4640      	mov	r0, r8
 800de6e:	6923      	ldr	r3, [r4, #16]
 800de70:	47d0      	blx	sl
 800de72:	3001      	adds	r0, #1
 800de74:	d0ad      	beq.n	800ddd2 <_printf_i+0x15e>
 800de76:	6823      	ldr	r3, [r4, #0]
 800de78:	079b      	lsls	r3, r3, #30
 800de7a:	d413      	bmi.n	800dea4 <_printf_i+0x230>
 800de7c:	68e0      	ldr	r0, [r4, #12]
 800de7e:	9b03      	ldr	r3, [sp, #12]
 800de80:	4298      	cmp	r0, r3
 800de82:	bfb8      	it	lt
 800de84:	4618      	movlt	r0, r3
 800de86:	e7a6      	b.n	800ddd6 <_printf_i+0x162>
 800de88:	2301      	movs	r3, #1
 800de8a:	4632      	mov	r2, r6
 800de8c:	4649      	mov	r1, r9
 800de8e:	4640      	mov	r0, r8
 800de90:	47d0      	blx	sl
 800de92:	3001      	adds	r0, #1
 800de94:	d09d      	beq.n	800ddd2 <_printf_i+0x15e>
 800de96:	3501      	adds	r5, #1
 800de98:	68e3      	ldr	r3, [r4, #12]
 800de9a:	9903      	ldr	r1, [sp, #12]
 800de9c:	1a5b      	subs	r3, r3, r1
 800de9e:	42ab      	cmp	r3, r5
 800dea0:	dcf2      	bgt.n	800de88 <_printf_i+0x214>
 800dea2:	e7eb      	b.n	800de7c <_printf_i+0x208>
 800dea4:	2500      	movs	r5, #0
 800dea6:	f104 0619 	add.w	r6, r4, #25
 800deaa:	e7f5      	b.n	800de98 <_printf_i+0x224>
 800deac:	08012061 	.word	0x08012061
 800deb0:	08012072 	.word	0x08012072

0800deb4 <std>:
 800deb4:	2300      	movs	r3, #0
 800deb6:	b510      	push	{r4, lr}
 800deb8:	4604      	mov	r4, r0
 800deba:	e9c0 3300 	strd	r3, r3, [r0]
 800debe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dec2:	6083      	str	r3, [r0, #8]
 800dec4:	8181      	strh	r1, [r0, #12]
 800dec6:	6643      	str	r3, [r0, #100]	@ 0x64
 800dec8:	81c2      	strh	r2, [r0, #14]
 800deca:	6183      	str	r3, [r0, #24]
 800decc:	4619      	mov	r1, r3
 800dece:	2208      	movs	r2, #8
 800ded0:	305c      	adds	r0, #92	@ 0x5c
 800ded2:	f000 f908 	bl	800e0e6 <memset>
 800ded6:	4b0d      	ldr	r3, [pc, #52]	@ (800df0c <std+0x58>)
 800ded8:	6224      	str	r4, [r4, #32]
 800deda:	6263      	str	r3, [r4, #36]	@ 0x24
 800dedc:	4b0c      	ldr	r3, [pc, #48]	@ (800df10 <std+0x5c>)
 800dede:	62a3      	str	r3, [r4, #40]	@ 0x28
 800dee0:	4b0c      	ldr	r3, [pc, #48]	@ (800df14 <std+0x60>)
 800dee2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800dee4:	4b0c      	ldr	r3, [pc, #48]	@ (800df18 <std+0x64>)
 800dee6:	6323      	str	r3, [r4, #48]	@ 0x30
 800dee8:	4b0c      	ldr	r3, [pc, #48]	@ (800df1c <std+0x68>)
 800deea:	429c      	cmp	r4, r3
 800deec:	d006      	beq.n	800defc <std+0x48>
 800deee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800def2:	4294      	cmp	r4, r2
 800def4:	d002      	beq.n	800defc <std+0x48>
 800def6:	33d0      	adds	r3, #208	@ 0xd0
 800def8:	429c      	cmp	r4, r3
 800defa:	d105      	bne.n	800df08 <std+0x54>
 800defc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800df00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df04:	f000 bfd8 	b.w	800eeb8 <__retarget_lock_init_recursive>
 800df08:	bd10      	pop	{r4, pc}
 800df0a:	bf00      	nop
 800df0c:	0800e05d 	.word	0x0800e05d
 800df10:	0800e083 	.word	0x0800e083
 800df14:	0800e0bb 	.word	0x0800e0bb
 800df18:	0800e0df 	.word	0x0800e0df
 800df1c:	20005a24 	.word	0x20005a24

0800df20 <stdio_exit_handler>:
 800df20:	4a02      	ldr	r2, [pc, #8]	@ (800df2c <stdio_exit_handler+0xc>)
 800df22:	4903      	ldr	r1, [pc, #12]	@ (800df30 <stdio_exit_handler+0x10>)
 800df24:	4803      	ldr	r0, [pc, #12]	@ (800df34 <stdio_exit_handler+0x14>)
 800df26:	f000 b869 	b.w	800dffc <_fwalk_sglue>
 800df2a:	bf00      	nop
 800df2c:	20000104 	.word	0x20000104
 800df30:	08011199 	.word	0x08011199
 800df34:	20000288 	.word	0x20000288

0800df38 <cleanup_stdio>:
 800df38:	6841      	ldr	r1, [r0, #4]
 800df3a:	4b0c      	ldr	r3, [pc, #48]	@ (800df6c <cleanup_stdio+0x34>)
 800df3c:	b510      	push	{r4, lr}
 800df3e:	4299      	cmp	r1, r3
 800df40:	4604      	mov	r4, r0
 800df42:	d001      	beq.n	800df48 <cleanup_stdio+0x10>
 800df44:	f003 f928 	bl	8011198 <_fflush_r>
 800df48:	68a1      	ldr	r1, [r4, #8]
 800df4a:	4b09      	ldr	r3, [pc, #36]	@ (800df70 <cleanup_stdio+0x38>)
 800df4c:	4299      	cmp	r1, r3
 800df4e:	d002      	beq.n	800df56 <cleanup_stdio+0x1e>
 800df50:	4620      	mov	r0, r4
 800df52:	f003 f921 	bl	8011198 <_fflush_r>
 800df56:	68e1      	ldr	r1, [r4, #12]
 800df58:	4b06      	ldr	r3, [pc, #24]	@ (800df74 <cleanup_stdio+0x3c>)
 800df5a:	4299      	cmp	r1, r3
 800df5c:	d004      	beq.n	800df68 <cleanup_stdio+0x30>
 800df5e:	4620      	mov	r0, r4
 800df60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df64:	f003 b918 	b.w	8011198 <_fflush_r>
 800df68:	bd10      	pop	{r4, pc}
 800df6a:	bf00      	nop
 800df6c:	20005a24 	.word	0x20005a24
 800df70:	20005a8c 	.word	0x20005a8c
 800df74:	20005af4 	.word	0x20005af4

0800df78 <global_stdio_init.part.0>:
 800df78:	b510      	push	{r4, lr}
 800df7a:	4b0b      	ldr	r3, [pc, #44]	@ (800dfa8 <global_stdio_init.part.0+0x30>)
 800df7c:	4c0b      	ldr	r4, [pc, #44]	@ (800dfac <global_stdio_init.part.0+0x34>)
 800df7e:	4a0c      	ldr	r2, [pc, #48]	@ (800dfb0 <global_stdio_init.part.0+0x38>)
 800df80:	4620      	mov	r0, r4
 800df82:	601a      	str	r2, [r3, #0]
 800df84:	2104      	movs	r1, #4
 800df86:	2200      	movs	r2, #0
 800df88:	f7ff ff94 	bl	800deb4 <std>
 800df8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800df90:	2201      	movs	r2, #1
 800df92:	2109      	movs	r1, #9
 800df94:	f7ff ff8e 	bl	800deb4 <std>
 800df98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800df9c:	2202      	movs	r2, #2
 800df9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dfa2:	2112      	movs	r1, #18
 800dfa4:	f7ff bf86 	b.w	800deb4 <std>
 800dfa8:	20005b5c 	.word	0x20005b5c
 800dfac:	20005a24 	.word	0x20005a24
 800dfb0:	0800df21 	.word	0x0800df21

0800dfb4 <__sfp_lock_acquire>:
 800dfb4:	4801      	ldr	r0, [pc, #4]	@ (800dfbc <__sfp_lock_acquire+0x8>)
 800dfb6:	f000 bf81 	b.w	800eebc <__retarget_lock_acquire_recursive>
 800dfba:	bf00      	nop
 800dfbc:	20005b8b 	.word	0x20005b8b

0800dfc0 <__sfp_lock_release>:
 800dfc0:	4801      	ldr	r0, [pc, #4]	@ (800dfc8 <__sfp_lock_release+0x8>)
 800dfc2:	f000 bf7d 	b.w	800eec0 <__retarget_lock_release_recursive>
 800dfc6:	bf00      	nop
 800dfc8:	20005b8b 	.word	0x20005b8b

0800dfcc <__sinit>:
 800dfcc:	b510      	push	{r4, lr}
 800dfce:	4604      	mov	r4, r0
 800dfd0:	f7ff fff0 	bl	800dfb4 <__sfp_lock_acquire>
 800dfd4:	6a23      	ldr	r3, [r4, #32]
 800dfd6:	b11b      	cbz	r3, 800dfe0 <__sinit+0x14>
 800dfd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dfdc:	f7ff bff0 	b.w	800dfc0 <__sfp_lock_release>
 800dfe0:	4b04      	ldr	r3, [pc, #16]	@ (800dff4 <__sinit+0x28>)
 800dfe2:	6223      	str	r3, [r4, #32]
 800dfe4:	4b04      	ldr	r3, [pc, #16]	@ (800dff8 <__sinit+0x2c>)
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d1f5      	bne.n	800dfd8 <__sinit+0xc>
 800dfec:	f7ff ffc4 	bl	800df78 <global_stdio_init.part.0>
 800dff0:	e7f2      	b.n	800dfd8 <__sinit+0xc>
 800dff2:	bf00      	nop
 800dff4:	0800df39 	.word	0x0800df39
 800dff8:	20005b5c 	.word	0x20005b5c

0800dffc <_fwalk_sglue>:
 800dffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e000:	4607      	mov	r7, r0
 800e002:	4688      	mov	r8, r1
 800e004:	4614      	mov	r4, r2
 800e006:	2600      	movs	r6, #0
 800e008:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e00c:	f1b9 0901 	subs.w	r9, r9, #1
 800e010:	d505      	bpl.n	800e01e <_fwalk_sglue+0x22>
 800e012:	6824      	ldr	r4, [r4, #0]
 800e014:	2c00      	cmp	r4, #0
 800e016:	d1f7      	bne.n	800e008 <_fwalk_sglue+0xc>
 800e018:	4630      	mov	r0, r6
 800e01a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e01e:	89ab      	ldrh	r3, [r5, #12]
 800e020:	2b01      	cmp	r3, #1
 800e022:	d907      	bls.n	800e034 <_fwalk_sglue+0x38>
 800e024:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e028:	3301      	adds	r3, #1
 800e02a:	d003      	beq.n	800e034 <_fwalk_sglue+0x38>
 800e02c:	4629      	mov	r1, r5
 800e02e:	4638      	mov	r0, r7
 800e030:	47c0      	blx	r8
 800e032:	4306      	orrs	r6, r0
 800e034:	3568      	adds	r5, #104	@ 0x68
 800e036:	e7e9      	b.n	800e00c <_fwalk_sglue+0x10>

0800e038 <iprintf>:
 800e038:	b40f      	push	{r0, r1, r2, r3}
 800e03a:	b507      	push	{r0, r1, r2, lr}
 800e03c:	4906      	ldr	r1, [pc, #24]	@ (800e058 <iprintf+0x20>)
 800e03e:	ab04      	add	r3, sp, #16
 800e040:	6808      	ldr	r0, [r1, #0]
 800e042:	f853 2b04 	ldr.w	r2, [r3], #4
 800e046:	6881      	ldr	r1, [r0, #8]
 800e048:	9301      	str	r3, [sp, #4]
 800e04a:	f002 ff0d 	bl	8010e68 <_vfiprintf_r>
 800e04e:	b003      	add	sp, #12
 800e050:	f85d eb04 	ldr.w	lr, [sp], #4
 800e054:	b004      	add	sp, #16
 800e056:	4770      	bx	lr
 800e058:	20000284 	.word	0x20000284

0800e05c <__sread>:
 800e05c:	b510      	push	{r4, lr}
 800e05e:	460c      	mov	r4, r1
 800e060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e064:	f000 feca 	bl	800edfc <_read_r>
 800e068:	2800      	cmp	r0, #0
 800e06a:	bfab      	itete	ge
 800e06c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e06e:	89a3      	ldrhlt	r3, [r4, #12]
 800e070:	181b      	addge	r3, r3, r0
 800e072:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e076:	bfac      	ite	ge
 800e078:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e07a:	81a3      	strhlt	r3, [r4, #12]
 800e07c:	bd10      	pop	{r4, pc}

0800e07e <__seofread>:
 800e07e:	2000      	movs	r0, #0
 800e080:	4770      	bx	lr

0800e082 <__swrite>:
 800e082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e086:	461f      	mov	r7, r3
 800e088:	898b      	ldrh	r3, [r1, #12]
 800e08a:	4605      	mov	r5, r0
 800e08c:	05db      	lsls	r3, r3, #23
 800e08e:	460c      	mov	r4, r1
 800e090:	4616      	mov	r6, r2
 800e092:	d505      	bpl.n	800e0a0 <__swrite+0x1e>
 800e094:	2302      	movs	r3, #2
 800e096:	2200      	movs	r2, #0
 800e098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e09c:	f000 fe9c 	bl	800edd8 <_lseek_r>
 800e0a0:	89a3      	ldrh	r3, [r4, #12]
 800e0a2:	4632      	mov	r2, r6
 800e0a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e0a8:	81a3      	strh	r3, [r4, #12]
 800e0aa:	4628      	mov	r0, r5
 800e0ac:	463b      	mov	r3, r7
 800e0ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e0b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e0b6:	f000 bec3 	b.w	800ee40 <_write_r>

0800e0ba <__sseek>:
 800e0ba:	b510      	push	{r4, lr}
 800e0bc:	460c      	mov	r4, r1
 800e0be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0c2:	f000 fe89 	bl	800edd8 <_lseek_r>
 800e0c6:	1c43      	adds	r3, r0, #1
 800e0c8:	89a3      	ldrh	r3, [r4, #12]
 800e0ca:	bf15      	itete	ne
 800e0cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e0ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e0d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e0d6:	81a3      	strheq	r3, [r4, #12]
 800e0d8:	bf18      	it	ne
 800e0da:	81a3      	strhne	r3, [r4, #12]
 800e0dc:	bd10      	pop	{r4, pc}

0800e0de <__sclose>:
 800e0de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0e2:	f000 be13 	b.w	800ed0c <_close_r>

0800e0e6 <memset>:
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	4402      	add	r2, r0
 800e0ea:	4293      	cmp	r3, r2
 800e0ec:	d100      	bne.n	800e0f0 <memset+0xa>
 800e0ee:	4770      	bx	lr
 800e0f0:	f803 1b01 	strb.w	r1, [r3], #1
 800e0f4:	e7f9      	b.n	800e0ea <memset+0x4>

0800e0f6 <strchr>:
 800e0f6:	4603      	mov	r3, r0
 800e0f8:	b2c9      	uxtb	r1, r1
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e100:	b112      	cbz	r2, 800e108 <strchr+0x12>
 800e102:	428a      	cmp	r2, r1
 800e104:	d1f9      	bne.n	800e0fa <strchr+0x4>
 800e106:	4770      	bx	lr
 800e108:	2900      	cmp	r1, #0
 800e10a:	bf18      	it	ne
 800e10c:	2000      	movne	r0, #0
 800e10e:	4770      	bx	lr

0800e110 <strncmp>:
 800e110:	b510      	push	{r4, lr}
 800e112:	b16a      	cbz	r2, 800e130 <strncmp+0x20>
 800e114:	3901      	subs	r1, #1
 800e116:	1884      	adds	r4, r0, r2
 800e118:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e11c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e120:	429a      	cmp	r2, r3
 800e122:	d103      	bne.n	800e12c <strncmp+0x1c>
 800e124:	42a0      	cmp	r0, r4
 800e126:	d001      	beq.n	800e12c <strncmp+0x1c>
 800e128:	2a00      	cmp	r2, #0
 800e12a:	d1f5      	bne.n	800e118 <strncmp+0x8>
 800e12c:	1ad0      	subs	r0, r2, r3
 800e12e:	bd10      	pop	{r4, pc}
 800e130:	4610      	mov	r0, r2
 800e132:	e7fc      	b.n	800e12e <strncmp+0x1e>

0800e134 <strncpy>:
 800e134:	4603      	mov	r3, r0
 800e136:	b510      	push	{r4, lr}
 800e138:	3901      	subs	r1, #1
 800e13a:	b132      	cbz	r2, 800e14a <strncpy+0x16>
 800e13c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e140:	3a01      	subs	r2, #1
 800e142:	f803 4b01 	strb.w	r4, [r3], #1
 800e146:	2c00      	cmp	r4, #0
 800e148:	d1f7      	bne.n	800e13a <strncpy+0x6>
 800e14a:	2100      	movs	r1, #0
 800e14c:	441a      	add	r2, r3
 800e14e:	4293      	cmp	r3, r2
 800e150:	d100      	bne.n	800e154 <strncpy+0x20>
 800e152:	bd10      	pop	{r4, pc}
 800e154:	f803 1b01 	strb.w	r1, [r3], #1
 800e158:	e7f9      	b.n	800e14e <strncpy+0x1a>
	...

0800e15c <strtok>:
 800e15c:	4b16      	ldr	r3, [pc, #88]	@ (800e1b8 <strtok+0x5c>)
 800e15e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e162:	681f      	ldr	r7, [r3, #0]
 800e164:	4605      	mov	r5, r0
 800e166:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800e168:	460e      	mov	r6, r1
 800e16a:	b9ec      	cbnz	r4, 800e1a8 <strtok+0x4c>
 800e16c:	2050      	movs	r0, #80	@ 0x50
 800e16e:	f7fe faad 	bl	800c6cc <malloc>
 800e172:	4602      	mov	r2, r0
 800e174:	6478      	str	r0, [r7, #68]	@ 0x44
 800e176:	b920      	cbnz	r0, 800e182 <strtok+0x26>
 800e178:	215b      	movs	r1, #91	@ 0x5b
 800e17a:	4b10      	ldr	r3, [pc, #64]	@ (800e1bc <strtok+0x60>)
 800e17c:	4810      	ldr	r0, [pc, #64]	@ (800e1c0 <strtok+0x64>)
 800e17e:	f000 fecf 	bl	800ef20 <__assert_func>
 800e182:	e9c0 4400 	strd	r4, r4, [r0]
 800e186:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800e18a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800e18e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800e192:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800e196:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800e19a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800e19e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800e1a2:	6184      	str	r4, [r0, #24]
 800e1a4:	7704      	strb	r4, [r0, #28]
 800e1a6:	6244      	str	r4, [r0, #36]	@ 0x24
 800e1a8:	4631      	mov	r1, r6
 800e1aa:	4628      	mov	r0, r5
 800e1ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e1ae:	2301      	movs	r3, #1
 800e1b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e1b4:	f000 b806 	b.w	800e1c4 <__strtok_r>
 800e1b8:	20000284 	.word	0x20000284
 800e1bc:	08012083 	.word	0x08012083
 800e1c0:	0801209a 	.word	0x0801209a

0800e1c4 <__strtok_r>:
 800e1c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1c6:	4604      	mov	r4, r0
 800e1c8:	b908      	cbnz	r0, 800e1ce <__strtok_r+0xa>
 800e1ca:	6814      	ldr	r4, [r2, #0]
 800e1cc:	b144      	cbz	r4, 800e1e0 <__strtok_r+0x1c>
 800e1ce:	460f      	mov	r7, r1
 800e1d0:	4620      	mov	r0, r4
 800e1d2:	f814 5b01 	ldrb.w	r5, [r4], #1
 800e1d6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800e1da:	b91e      	cbnz	r6, 800e1e4 <__strtok_r+0x20>
 800e1dc:	b965      	cbnz	r5, 800e1f8 <__strtok_r+0x34>
 800e1de:	6015      	str	r5, [r2, #0]
 800e1e0:	2000      	movs	r0, #0
 800e1e2:	e005      	b.n	800e1f0 <__strtok_r+0x2c>
 800e1e4:	42b5      	cmp	r5, r6
 800e1e6:	d1f6      	bne.n	800e1d6 <__strtok_r+0x12>
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d1f0      	bne.n	800e1ce <__strtok_r+0xa>
 800e1ec:	6014      	str	r4, [r2, #0]
 800e1ee:	7003      	strb	r3, [r0, #0]
 800e1f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1f2:	461c      	mov	r4, r3
 800e1f4:	e00c      	b.n	800e210 <__strtok_r+0x4c>
 800e1f6:	b915      	cbnz	r5, 800e1fe <__strtok_r+0x3a>
 800e1f8:	460e      	mov	r6, r1
 800e1fa:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e1fe:	f816 5b01 	ldrb.w	r5, [r6], #1
 800e202:	42ab      	cmp	r3, r5
 800e204:	d1f7      	bne.n	800e1f6 <__strtok_r+0x32>
 800e206:	2b00      	cmp	r3, #0
 800e208:	d0f3      	beq.n	800e1f2 <__strtok_r+0x2e>
 800e20a:	2300      	movs	r3, #0
 800e20c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800e210:	6014      	str	r4, [r2, #0]
 800e212:	e7ed      	b.n	800e1f0 <__strtok_r+0x2c>

0800e214 <strstr>:
 800e214:	780a      	ldrb	r2, [r1, #0]
 800e216:	b570      	push	{r4, r5, r6, lr}
 800e218:	b96a      	cbnz	r2, 800e236 <strstr+0x22>
 800e21a:	bd70      	pop	{r4, r5, r6, pc}
 800e21c:	429a      	cmp	r2, r3
 800e21e:	d109      	bne.n	800e234 <strstr+0x20>
 800e220:	460c      	mov	r4, r1
 800e222:	4605      	mov	r5, r0
 800e224:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d0f6      	beq.n	800e21a <strstr+0x6>
 800e22c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800e230:	429e      	cmp	r6, r3
 800e232:	d0f7      	beq.n	800e224 <strstr+0x10>
 800e234:	3001      	adds	r0, #1
 800e236:	7803      	ldrb	r3, [r0, #0]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d1ef      	bne.n	800e21c <strstr+0x8>
 800e23c:	4618      	mov	r0, r3
 800e23e:	e7ec      	b.n	800e21a <strstr+0x6>

0800e240 <validate_structure>:
 800e240:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e242:	6801      	ldr	r1, [r0, #0]
 800e244:	4604      	mov	r4, r0
 800e246:	293b      	cmp	r1, #59	@ 0x3b
 800e248:	d911      	bls.n	800e26e <validate_structure+0x2e>
 800e24a:	223c      	movs	r2, #60	@ 0x3c
 800e24c:	4668      	mov	r0, sp
 800e24e:	f000 fe85 	bl	800ef5c <div>
 800e252:	9a01      	ldr	r2, [sp, #4]
 800e254:	6863      	ldr	r3, [r4, #4]
 800e256:	9900      	ldr	r1, [sp, #0]
 800e258:	2a00      	cmp	r2, #0
 800e25a:	440b      	add	r3, r1
 800e25c:	6063      	str	r3, [r4, #4]
 800e25e:	bfbb      	ittet	lt
 800e260:	323c      	addlt	r2, #60	@ 0x3c
 800e262:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800e266:	6022      	strge	r2, [r4, #0]
 800e268:	6022      	strlt	r2, [r4, #0]
 800e26a:	bfb8      	it	lt
 800e26c:	6063      	strlt	r3, [r4, #4]
 800e26e:	6861      	ldr	r1, [r4, #4]
 800e270:	293b      	cmp	r1, #59	@ 0x3b
 800e272:	d911      	bls.n	800e298 <validate_structure+0x58>
 800e274:	223c      	movs	r2, #60	@ 0x3c
 800e276:	4668      	mov	r0, sp
 800e278:	f000 fe70 	bl	800ef5c <div>
 800e27c:	9a01      	ldr	r2, [sp, #4]
 800e27e:	68a3      	ldr	r3, [r4, #8]
 800e280:	9900      	ldr	r1, [sp, #0]
 800e282:	2a00      	cmp	r2, #0
 800e284:	440b      	add	r3, r1
 800e286:	60a3      	str	r3, [r4, #8]
 800e288:	bfbb      	ittet	lt
 800e28a:	323c      	addlt	r2, #60	@ 0x3c
 800e28c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800e290:	6062      	strge	r2, [r4, #4]
 800e292:	6062      	strlt	r2, [r4, #4]
 800e294:	bfb8      	it	lt
 800e296:	60a3      	strlt	r3, [r4, #8]
 800e298:	68a1      	ldr	r1, [r4, #8]
 800e29a:	2917      	cmp	r1, #23
 800e29c:	d911      	bls.n	800e2c2 <validate_structure+0x82>
 800e29e:	2218      	movs	r2, #24
 800e2a0:	4668      	mov	r0, sp
 800e2a2:	f000 fe5b 	bl	800ef5c <div>
 800e2a6:	9a01      	ldr	r2, [sp, #4]
 800e2a8:	68e3      	ldr	r3, [r4, #12]
 800e2aa:	9900      	ldr	r1, [sp, #0]
 800e2ac:	2a00      	cmp	r2, #0
 800e2ae:	440b      	add	r3, r1
 800e2b0:	60e3      	str	r3, [r4, #12]
 800e2b2:	bfbb      	ittet	lt
 800e2b4:	3218      	addlt	r2, #24
 800e2b6:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800e2ba:	60a2      	strge	r2, [r4, #8]
 800e2bc:	60a2      	strlt	r2, [r4, #8]
 800e2be:	bfb8      	it	lt
 800e2c0:	60e3      	strlt	r3, [r4, #12]
 800e2c2:	6921      	ldr	r1, [r4, #16]
 800e2c4:	290b      	cmp	r1, #11
 800e2c6:	d911      	bls.n	800e2ec <validate_structure+0xac>
 800e2c8:	220c      	movs	r2, #12
 800e2ca:	4668      	mov	r0, sp
 800e2cc:	f000 fe46 	bl	800ef5c <div>
 800e2d0:	9a01      	ldr	r2, [sp, #4]
 800e2d2:	6963      	ldr	r3, [r4, #20]
 800e2d4:	9900      	ldr	r1, [sp, #0]
 800e2d6:	2a00      	cmp	r2, #0
 800e2d8:	440b      	add	r3, r1
 800e2da:	6163      	str	r3, [r4, #20]
 800e2dc:	bfbb      	ittet	lt
 800e2de:	320c      	addlt	r2, #12
 800e2e0:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800e2e4:	6122      	strge	r2, [r4, #16]
 800e2e6:	6122      	strlt	r2, [r4, #16]
 800e2e8:	bfb8      	it	lt
 800e2ea:	6163      	strlt	r3, [r4, #20]
 800e2ec:	6963      	ldr	r3, [r4, #20]
 800e2ee:	079a      	lsls	r2, r3, #30
 800e2f0:	d11c      	bne.n	800e32c <validate_structure+0xec>
 800e2f2:	2164      	movs	r1, #100	@ 0x64
 800e2f4:	fb93 f2f1 	sdiv	r2, r3, r1
 800e2f8:	fb01 3212 	mls	r2, r1, r2, r3
 800e2fc:	b9c2      	cbnz	r2, 800e330 <validate_structure+0xf0>
 800e2fe:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800e302:	f203 736c 	addw	r3, r3, #1900	@ 0x76c
 800e306:	fb93 f1f2 	sdiv	r1, r3, r2
 800e30a:	fb02 3311 	mls	r3, r2, r1, r3
 800e30e:	2b00      	cmp	r3, #0
 800e310:	bf14      	ite	ne
 800e312:	231c      	movne	r3, #28
 800e314:	231d      	moveq	r3, #29
 800e316:	68e2      	ldr	r2, [r4, #12]
 800e318:	2a00      	cmp	r2, #0
 800e31a:	dc0b      	bgt.n	800e334 <validate_structure+0xf4>
 800e31c:	200b      	movs	r0, #11
 800e31e:	2164      	movs	r1, #100	@ 0x64
 800e320:	4d30      	ldr	r5, [pc, #192]	@ (800e3e4 <validate_structure+0x1a4>)
 800e322:	68e6      	ldr	r6, [r4, #12]
 800e324:	2e00      	cmp	r6, #0
 800e326:	dd30      	ble.n	800e38a <validate_structure+0x14a>
 800e328:	b003      	add	sp, #12
 800e32a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e32c:	231c      	movs	r3, #28
 800e32e:	e7f2      	b.n	800e316 <validate_structure+0xd6>
 800e330:	231d      	movs	r3, #29
 800e332:	e7f0      	b.n	800e316 <validate_structure+0xd6>
 800e334:	4d2b      	ldr	r5, [pc, #172]	@ (800e3e4 <validate_structure+0x1a4>)
 800e336:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800e33a:	2a01      	cmp	r2, #1
 800e33c:	bf0c      	ite	eq
 800e33e:	4618      	moveq	r0, r3
 800e340:	f855 0022 	ldrne.w	r0, [r5, r2, lsl #2]
 800e344:	4281      	cmp	r1, r0
 800e346:	ddef      	ble.n	800e328 <validate_structure+0xe8>
 800e348:	3201      	adds	r2, #1
 800e34a:	1a09      	subs	r1, r1, r0
 800e34c:	2a0c      	cmp	r2, #12
 800e34e:	60e1      	str	r1, [r4, #12]
 800e350:	6122      	str	r2, [r4, #16]
 800e352:	d1f0      	bne.n	800e336 <validate_structure+0xf6>
 800e354:	2100      	movs	r1, #0
 800e356:	6963      	ldr	r3, [r4, #20]
 800e358:	6121      	str	r1, [r4, #16]
 800e35a:	1c5a      	adds	r2, r3, #1
 800e35c:	0791      	lsls	r1, r2, #30
 800e35e:	6162      	str	r2, [r4, #20]
 800e360:	d13c      	bne.n	800e3dc <validate_structure+0x19c>
 800e362:	2164      	movs	r1, #100	@ 0x64
 800e364:	fb92 f0f1 	sdiv	r0, r2, r1
 800e368:	fb01 2210 	mls	r2, r1, r0, r2
 800e36c:	2a00      	cmp	r2, #0
 800e36e:	d137      	bne.n	800e3e0 <validate_structure+0x1a0>
 800e370:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800e374:	f203 736d 	addw	r3, r3, #1901	@ 0x76d
 800e378:	fb93 f1f2 	sdiv	r1, r3, r2
 800e37c:	fb02 3311 	mls	r3, r2, r1, r3
 800e380:	2b00      	cmp	r3, #0
 800e382:	bf14      	ite	ne
 800e384:	231c      	movne	r3, #28
 800e386:	231d      	moveq	r3, #29
 800e388:	e7d5      	b.n	800e336 <validate_structure+0xf6>
 800e38a:	6922      	ldr	r2, [r4, #16]
 800e38c:	3a01      	subs	r2, #1
 800e38e:	6122      	str	r2, [r4, #16]
 800e390:	3201      	adds	r2, #1
 800e392:	d116      	bne.n	800e3c2 <validate_structure+0x182>
 800e394:	6963      	ldr	r3, [r4, #20]
 800e396:	1e5a      	subs	r2, r3, #1
 800e398:	0797      	lsls	r7, r2, #30
 800e39a:	e9c4 0204 	strd	r0, r2, [r4, #16]
 800e39e:	d119      	bne.n	800e3d4 <validate_structure+0x194>
 800e3a0:	fb92 f7f1 	sdiv	r7, r2, r1
 800e3a4:	fb01 2217 	mls	r2, r1, r7, r2
 800e3a8:	b9b2      	cbnz	r2, 800e3d8 <validate_structure+0x198>
 800e3aa:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800e3ae:	f203 736b 	addw	r3, r3, #1899	@ 0x76b
 800e3b2:	fb93 f7f2 	sdiv	r7, r3, r2
 800e3b6:	fb02 3317 	mls	r3, r2, r7, r3
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	bf14      	ite	ne
 800e3be:	231c      	movne	r3, #28
 800e3c0:	231d      	moveq	r3, #29
 800e3c2:	6922      	ldr	r2, [r4, #16]
 800e3c4:	2a01      	cmp	r2, #1
 800e3c6:	bf0c      	ite	eq
 800e3c8:	461a      	moveq	r2, r3
 800e3ca:	f855 2022 	ldrne.w	r2, [r5, r2, lsl #2]
 800e3ce:	4432      	add	r2, r6
 800e3d0:	60e2      	str	r2, [r4, #12]
 800e3d2:	e7a6      	b.n	800e322 <validate_structure+0xe2>
 800e3d4:	231c      	movs	r3, #28
 800e3d6:	e7f4      	b.n	800e3c2 <validate_structure+0x182>
 800e3d8:	231d      	movs	r3, #29
 800e3da:	e7f2      	b.n	800e3c2 <validate_structure+0x182>
 800e3dc:	231c      	movs	r3, #28
 800e3de:	e7aa      	b.n	800e336 <validate_structure+0xf6>
 800e3e0:	231d      	movs	r3, #29
 800e3e2:	e7a8      	b.n	800e336 <validate_structure+0xf6>
 800e3e4:	08012124 	.word	0x08012124

0800e3e8 <mktime>:
 800e3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3ec:	b085      	sub	sp, #20
 800e3ee:	4607      	mov	r7, r0
 800e3f0:	f002 ffca 	bl	8011388 <__gettzinfo>
 800e3f4:	4681      	mov	r9, r0
 800e3f6:	4638      	mov	r0, r7
 800e3f8:	f7ff ff22 	bl	800e240 <validate_structure>
 800e3fc:	e9d7 4300 	ldrd	r4, r3, [r7]
 800e400:	223c      	movs	r2, #60	@ 0x3c
 800e402:	fb02 4403 	mla	r4, r2, r3, r4
 800e406:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800e40a:	68bb      	ldr	r3, [r7, #8]
 800e40c:	697d      	ldr	r5, [r7, #20]
 800e40e:	fb02 4403 	mla	r4, r2, r3, r4
 800e412:	e9d7 6303 	ldrd	r6, r3, [r7, #12]
 800e416:	4ac1      	ldr	r2, [pc, #772]	@ (800e71c <mktime+0x334>)
 800e418:	3e01      	subs	r6, #1
 800e41a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800e41e:	2b01      	cmp	r3, #1
 800e420:	4416      	add	r6, r2
 800e422:	dd11      	ble.n	800e448 <mktime+0x60>
 800e424:	07a9      	lsls	r1, r5, #30
 800e426:	d10f      	bne.n	800e448 <mktime+0x60>
 800e428:	2264      	movs	r2, #100	@ 0x64
 800e42a:	fb95 f3f2 	sdiv	r3, r5, r2
 800e42e:	fb02 5313 	mls	r3, r2, r3, r5
 800e432:	b943      	cbnz	r3, 800e446 <mktime+0x5e>
 800e434:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800e438:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800e43c:	fb93 f1f2 	sdiv	r1, r3, r2
 800e440:	fb02 3311 	mls	r3, r2, r1, r3
 800e444:	b903      	cbnz	r3, 800e448 <mktime+0x60>
 800e446:	3601      	adds	r6, #1
 800e448:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800e44c:	f505 531c 	add.w	r3, r5, #9984	@ 0x2700
 800e450:	3310      	adds	r3, #16
 800e452:	4293      	cmp	r3, r2
 800e454:	61fe      	str	r6, [r7, #28]
 800e456:	f200 8167 	bhi.w	800e728 <mktime+0x340>
 800e45a:	2d46      	cmp	r5, #70	@ 0x46
 800e45c:	f340 808e 	ble.w	800e57c <mktime+0x194>
 800e460:	2346      	movs	r3, #70	@ 0x46
 800e462:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800e466:	2164      	movs	r1, #100	@ 0x64
 800e468:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800e46c:	079a      	lsls	r2, r3, #30
 800e46e:	d17f      	bne.n	800e570 <mktime+0x188>
 800e470:	fb93 f2f1 	sdiv	r2, r3, r1
 800e474:	fb01 3212 	mls	r2, r1, r2, r3
 800e478:	2a00      	cmp	r2, #0
 800e47a:	d17c      	bne.n	800e576 <mktime+0x18e>
 800e47c:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800e480:	fb92 fef0 	sdiv	lr, r2, r0
 800e484:	fb00 221e 	mls	r2, r0, lr, r2
 800e488:	2a00      	cmp	r2, #0
 800e48a:	bf14      	ite	ne
 800e48c:	4662      	movne	r2, ip
 800e48e:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800e492:	3301      	adds	r3, #1
 800e494:	429d      	cmp	r5, r3
 800e496:	4416      	add	r6, r2
 800e498:	d1e8      	bne.n	800e46c <mktime+0x84>
 800e49a:	4ba1      	ldr	r3, [pc, #644]	@ (800e720 <mktime+0x338>)
 800e49c:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800e4a0:	fbc6 4803 	smlal	r4, r8, r6, r3
 800e4a4:	f000 f9f8 	bl	800e898 <__tz_lock>
 800e4a8:	f000 fa02 	bl	800e8b0 <_tzset_unlocked>
 800e4ac:	4b9d      	ldr	r3, [pc, #628]	@ (800e724 <mktime+0x33c>)
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	f000 8140 	beq.w	800e736 <mktime+0x34e>
 800e4b6:	f8d7 a020 	ldr.w	sl, [r7, #32]
 800e4ba:	6978      	ldr	r0, [r7, #20]
 800e4bc:	4653      	mov	r3, sl
 800e4be:	2b01      	cmp	r3, #1
 800e4c0:	bfa8      	it	ge
 800e4c2:	2301      	movge	r3, #1
 800e4c4:	9301      	str	r3, [sp, #4]
 800e4c6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800e4ca:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 800e4ce:	4283      	cmp	r3, r0
 800e4d0:	f040 8096 	bne.w	800e600 <mktime+0x218>
 800e4d4:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 800e4d8:	f8d9 0050 	ldr.w	r0, [r9, #80]	@ 0x50
 800e4dc:	f8d9 c04c 	ldr.w	ip, [r9, #76]	@ 0x4c
 800e4e0:	1a13      	subs	r3, r2, r0
 800e4e2:	9303      	str	r3, [sp, #12]
 800e4e4:	f8d9 3048 	ldr.w	r3, [r9, #72]	@ 0x48
 800e4e8:	eb61 7be0 	sbc.w	fp, r1, r0, asr #31
 800e4ec:	9302      	str	r3, [sp, #8]
 800e4ee:	9a02      	ldr	r2, [sp, #8]
 800e4f0:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800e4f4:	ebb2 0e03 	subs.w	lr, r2, r3
 800e4f8:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 800e4fc:	4574      	cmp	r4, lr
 800e4fe:	eb78 0201 	sbcs.w	r2, r8, r1
 800e502:	f280 8085 	bge.w	800e610 <mktime+0x228>
 800e506:	f8d9 2000 	ldr.w	r2, [r9]
 800e50a:	2a00      	cmp	r2, #0
 800e50c:	f000 808d 	beq.w	800e62a <mktime+0x242>
 800e510:	9a03      	ldr	r2, [sp, #12]
 800e512:	4294      	cmp	r4, r2
 800e514:	eb78 020b 	sbcs.w	r2, r8, fp
 800e518:	f2c0 810a 	blt.w	800e730 <mktime+0x348>
 800e51c:	4574      	cmp	r4, lr
 800e51e:	eb78 0101 	sbcs.w	r1, r8, r1
 800e522:	bfb4      	ite	lt
 800e524:	f04f 0b01 	movlt.w	fp, #1
 800e528:	f04f 0b00 	movge.w	fp, #0
 800e52c:	f1ba 0f00 	cmp.w	sl, #0
 800e530:	f280 8087 	bge.w	800e642 <mktime+0x25a>
 800e534:	f1bb 0f01 	cmp.w	fp, #1
 800e538:	f040 80ff 	bne.w	800e73a <mktime+0x352>
 800e53c:	f04f 0b01 	mov.w	fp, #1
 800e540:	f8d9 3050 	ldr.w	r3, [r9, #80]	@ 0x50
 800e544:	191c      	adds	r4, r3, r4
 800e546:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800e54a:	f000 f9ab 	bl	800e8a4 <__tz_unlock>
 800e54e:	2307      	movs	r3, #7
 800e550:	3604      	adds	r6, #4
 800e552:	fb96 f3f3 	sdiv	r3, r6, r3
 800e556:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800e55a:	1af6      	subs	r6, r6, r3
 800e55c:	f100 80db 	bmi.w	800e716 <mktime+0x32e>
 800e560:	f8c7 b020 	str.w	fp, [r7, #32]
 800e564:	61be      	str	r6, [r7, #24]
 800e566:	4620      	mov	r0, r4
 800e568:	4641      	mov	r1, r8
 800e56a:	b005      	add	sp, #20
 800e56c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e570:	f240 126d 	movw	r2, #365	@ 0x16d
 800e574:	e78d      	b.n	800e492 <mktime+0xaa>
 800e576:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800e57a:	e78a      	b.n	800e492 <mktime+0xaa>
 800e57c:	d08d      	beq.n	800e49a <mktime+0xb2>
 800e57e:	2345      	movs	r3, #69	@ 0x45
 800e580:	f240 1c6d 	movw	ip, #365	@ 0x16d
 800e584:	2164      	movs	r1, #100	@ 0x64
 800e586:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800e58a:	e012      	b.n	800e5b2 <mktime+0x1ca>
 800e58c:	bb62      	cbnz	r2, 800e5e8 <mktime+0x200>
 800e58e:	fb93 f2f1 	sdiv	r2, r3, r1
 800e592:	fb01 3212 	mls	r2, r1, r2, r3
 800e596:	bb52      	cbnz	r2, 800e5ee <mktime+0x206>
 800e598:	f203 726c 	addw	r2, r3, #1900	@ 0x76c
 800e59c:	fb92 fef0 	sdiv	lr, r2, r0
 800e5a0:	fb00 221e 	mls	r2, r0, lr, r2
 800e5a4:	2a00      	cmp	r2, #0
 800e5a6:	bf14      	ite	ne
 800e5a8:	4662      	movne	r2, ip
 800e5aa:	f44f 72b7 	moveq.w	r2, #366	@ 0x16e
 800e5ae:	1ab6      	subs	r6, r6, r2
 800e5b0:	3b01      	subs	r3, #1
 800e5b2:	429d      	cmp	r5, r3
 800e5b4:	f003 0203 	and.w	r2, r3, #3
 800e5b8:	dbe8      	blt.n	800e58c <mktime+0x1a4>
 800e5ba:	b9da      	cbnz	r2, 800e5f4 <mktime+0x20c>
 800e5bc:	2264      	movs	r2, #100	@ 0x64
 800e5be:	fb95 f3f2 	sdiv	r3, r5, r2
 800e5c2:	fb02 5313 	mls	r3, r2, r3, r5
 800e5c6:	b9c3      	cbnz	r3, 800e5fa <mktime+0x212>
 800e5c8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800e5cc:	f205 736c 	addw	r3, r5, #1900	@ 0x76c
 800e5d0:	fb93 f1f2 	sdiv	r1, r3, r2
 800e5d4:	fb02 3311 	mls	r3, r2, r1, r3
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	f240 136d 	movw	r3, #365	@ 0x16d
 800e5de:	bf08      	it	eq
 800e5e0:	f44f 73b7 	moveq.w	r3, #366	@ 0x16e
 800e5e4:	1af6      	subs	r6, r6, r3
 800e5e6:	e758      	b.n	800e49a <mktime+0xb2>
 800e5e8:	f240 126d 	movw	r2, #365	@ 0x16d
 800e5ec:	e7df      	b.n	800e5ae <mktime+0x1c6>
 800e5ee:	f44f 72b7 	mov.w	r2, #366	@ 0x16e
 800e5f2:	e7dc      	b.n	800e5ae <mktime+0x1c6>
 800e5f4:	f240 136d 	movw	r3, #365	@ 0x16d
 800e5f8:	e7f4      	b.n	800e5e4 <mktime+0x1fc>
 800e5fa:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 800e5fe:	e7f1      	b.n	800e5e4 <mktime+0x1fc>
 800e600:	f000 f8a2 	bl	800e748 <__tzcalc_limits>
 800e604:	2800      	cmp	r0, #0
 800e606:	f47f af65 	bne.w	800e4d4 <mktime+0xec>
 800e60a:	f8dd b004 	ldr.w	fp, [sp, #4]
 800e60e:	e791      	b.n	800e534 <mktime+0x14c>
 800e610:	9a02      	ldr	r2, [sp, #8]
 800e612:	1a12      	subs	r2, r2, r0
 800e614:	9202      	str	r2, [sp, #8]
 800e616:	ea4f 72e0 	mov.w	r2, r0, asr #31
 800e61a:	eb6c 0c02 	sbc.w	ip, ip, r2
 800e61e:	9a02      	ldr	r2, [sp, #8]
 800e620:	4294      	cmp	r4, r2
 800e622:	eb78 0c0c 	sbcs.w	ip, r8, ip
 800e626:	dbf0      	blt.n	800e60a <mktime+0x222>
 800e628:	e76d      	b.n	800e506 <mktime+0x11e>
 800e62a:	9a03      	ldr	r2, [sp, #12]
 800e62c:	4294      	cmp	r4, r2
 800e62e:	eb78 020b 	sbcs.w	r2, r8, fp
 800e632:	f6ff af73 	blt.w	800e51c <mktime+0x134>
 800e636:	f1ba 0f00 	cmp.w	sl, #0
 800e63a:	f6ff af7f 	blt.w	800e53c <mktime+0x154>
 800e63e:	f04f 0b01 	mov.w	fp, #1
 800e642:	9a01      	ldr	r2, [sp, #4]
 800e644:	ea82 020b 	eor.w	r2, r2, fp
 800e648:	2a01      	cmp	r2, #1
 800e64a:	f47f af73 	bne.w	800e534 <mktime+0x14c>
 800e64e:	f1bb 0f00 	cmp.w	fp, #0
 800e652:	d035      	beq.n	800e6c0 <mktime+0x2d8>
 800e654:	1a1b      	subs	r3, r3, r0
 800e656:	683a      	ldr	r2, [r7, #0]
 800e658:	191c      	adds	r4, r3, r4
 800e65a:	441a      	add	r2, r3
 800e65c:	603a      	str	r2, [r7, #0]
 800e65e:	4638      	mov	r0, r7
 800e660:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800e664:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800e668:	f7ff fdea 	bl	800e240 <validate_structure>
 800e66c:	68fa      	ldr	r2, [r7, #12]
 800e66e:	ebb2 020a 	subs.w	r2, r2, sl
 800e672:	f43f af5f 	beq.w	800e534 <mktime+0x14c>
 800e676:	2a01      	cmp	r2, #1
 800e678:	dc24      	bgt.n	800e6c4 <mktime+0x2dc>
 800e67a:	1c93      	adds	r3, r2, #2
 800e67c:	bfd8      	it	le
 800e67e:	2201      	movle	r2, #1
 800e680:	69fb      	ldr	r3, [r7, #28]
 800e682:	18d3      	adds	r3, r2, r3
 800e684:	d527      	bpl.n	800e6d6 <mktime+0x2ee>
 800e686:	1e6b      	subs	r3, r5, #1
 800e688:	0798      	lsls	r0, r3, #30
 800e68a:	d11e      	bne.n	800e6ca <mktime+0x2e2>
 800e68c:	2164      	movs	r1, #100	@ 0x64
 800e68e:	fb93 f0f1 	sdiv	r0, r3, r1
 800e692:	fb01 3310 	mls	r3, r1, r0, r3
 800e696:	b9db      	cbnz	r3, 800e6d0 <mktime+0x2e8>
 800e698:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800e69c:	f205 756b 	addw	r5, r5, #1899	@ 0x76b
 800e6a0:	fb95 f1f3 	sdiv	r1, r5, r3
 800e6a4:	fb03 5511 	mls	r5, r3, r1, r5
 800e6a8:	2d00      	cmp	r5, #0
 800e6aa:	f240 136d 	movw	r3, #365	@ 0x16d
 800e6ae:	bf18      	it	ne
 800e6b0:	f44f 73b6 	movne.w	r3, #364	@ 0x16c
 800e6b4:	61fb      	str	r3, [r7, #28]
 800e6b6:	4416      	add	r6, r2
 800e6b8:	e73c      	b.n	800e534 <mktime+0x14c>
 800e6ba:	f04f 0b00 	mov.w	fp, #0
 800e6be:	e7c0      	b.n	800e642 <mktime+0x25a>
 800e6c0:	1ac3      	subs	r3, r0, r3
 800e6c2:	e7c8      	b.n	800e656 <mktime+0x26e>
 800e6c4:	f04f 32ff 	mov.w	r2, #4294967295
 800e6c8:	e7da      	b.n	800e680 <mktime+0x298>
 800e6ca:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 800e6ce:	e7f1      	b.n	800e6b4 <mktime+0x2cc>
 800e6d0:	f240 136d 	movw	r3, #365	@ 0x16d
 800e6d4:	e7ee      	b.n	800e6b4 <mktime+0x2cc>
 800e6d6:	07a9      	lsls	r1, r5, #30
 800e6d8:	d117      	bne.n	800e70a <mktime+0x322>
 800e6da:	2064      	movs	r0, #100	@ 0x64
 800e6dc:	fb95 f1f0 	sdiv	r1, r5, r0
 800e6e0:	fb00 5111 	mls	r1, r0, r1, r5
 800e6e4:	b9a1      	cbnz	r1, 800e710 <mktime+0x328>
 800e6e6:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800e6ea:	f205 756c 	addw	r5, r5, #1900	@ 0x76c
 800e6ee:	fb95 f0f1 	sdiv	r0, r5, r1
 800e6f2:	fb01 5510 	mls	r5, r1, r0, r5
 800e6f6:	2d00      	cmp	r5, #0
 800e6f8:	f240 116d 	movw	r1, #365	@ 0x16d
 800e6fc:	bf08      	it	eq
 800e6fe:	f44f 71b7 	moveq.w	r1, #366	@ 0x16e
 800e702:	428b      	cmp	r3, r1
 800e704:	bfa8      	it	ge
 800e706:	1a5b      	subge	r3, r3, r1
 800e708:	e7d4      	b.n	800e6b4 <mktime+0x2cc>
 800e70a:	f240 116d 	movw	r1, #365	@ 0x16d
 800e70e:	e7f8      	b.n	800e702 <mktime+0x31a>
 800e710:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 800e714:	e7f5      	b.n	800e702 <mktime+0x31a>
 800e716:	3607      	adds	r6, #7
 800e718:	e722      	b.n	800e560 <mktime+0x178>
 800e71a:	bf00      	nop
 800e71c:	080120f4 	.word	0x080120f4
 800e720:	00015180 	.word	0x00015180
 800e724:	20005b80 	.word	0x20005b80
 800e728:	f04f 34ff 	mov.w	r4, #4294967295
 800e72c:	46a0      	mov	r8, r4
 800e72e:	e71a      	b.n	800e566 <mktime+0x17e>
 800e730:	f1ba 0f00 	cmp.w	sl, #0
 800e734:	dac1      	bge.n	800e6ba <mktime+0x2d2>
 800e736:	f04f 0b00 	mov.w	fp, #0
 800e73a:	f8d9 3028 	ldr.w	r3, [r9, #40]	@ 0x28
 800e73e:	191c      	adds	r4, r3, r4
 800e740:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800e744:	e701      	b.n	800e54a <mktime+0x162>
 800e746:	bf00      	nop

0800e748 <__tzcalc_limits>:
 800e748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e74c:	4604      	mov	r4, r0
 800e74e:	f002 fe1b 	bl	8011388 <__gettzinfo>
 800e752:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 800e756:	429c      	cmp	r4, r3
 800e758:	f340 8098 	ble.w	800e88c <__tzcalc_limits+0x144>
 800e75c:	f46f 67f6 	mvn.w	r7, #1968	@ 0x7b0
 800e760:	f240 126d 	movw	r2, #365	@ 0x16d
 800e764:	19e5      	adds	r5, r4, r7
 800e766:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 800e76a:	10ad      	asrs	r5, r5, #2
 800e76c:	fb02 5503 	mla	r5, r2, r3, r5
 800e770:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 800e774:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 800e778:	fb93 f3f2 	sdiv	r3, r3, r2
 800e77c:	f46f 6cc8 	mvn.w	ip, #1600	@ 0x640
 800e780:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800e784:	441d      	add	r5, r3
 800e786:	eb04 030c 	add.w	r3, r4, ip
 800e78a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e78e:	4601      	mov	r1, r0
 800e790:	4f3f      	ldr	r7, [pc, #252]	@ (800e890 <__tzcalc_limits+0x148>)
 800e792:	6044      	str	r4, [r0, #4]
 800e794:	441d      	add	r5, r3
 800e796:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 800e79a:	7a0b      	ldrb	r3, [r1, #8]
 800e79c:	694a      	ldr	r2, [r1, #20]
 800e79e:	2b4a      	cmp	r3, #74	@ 0x4a
 800e7a0:	d133      	bne.n	800e80a <__tzcalc_limits+0xc2>
 800e7a2:	07a6      	lsls	r6, r4, #30
 800e7a4:	eb05 0302 	add.w	r3, r5, r2
 800e7a8:	d106      	bne.n	800e7b8 <__tzcalc_limits+0x70>
 800e7aa:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 800e7ae:	fb94 f6fe 	sdiv	r6, r4, lr
 800e7b2:	fb0e 4616 	mls	r6, lr, r6, r4
 800e7b6:	b936      	cbnz	r6, 800e7c6 <__tzcalc_limits+0x7e>
 800e7b8:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 800e7bc:	fb94 f6fe 	sdiv	r6, r4, lr
 800e7c0:	fb0e 4616 	mls	r6, lr, r6, r4
 800e7c4:	b9fe      	cbnz	r6, 800e806 <__tzcalc_limits+0xbe>
 800e7c6:	2a3b      	cmp	r2, #59	@ 0x3b
 800e7c8:	bfd4      	ite	le
 800e7ca:	2200      	movle	r2, #0
 800e7cc:	2201      	movgt	r2, #1
 800e7ce:	4413      	add	r3, r2
 800e7d0:	3b01      	subs	r3, #1
 800e7d2:	698a      	ldr	r2, [r1, #24]
 800e7d4:	17d6      	asrs	r6, r2, #31
 800e7d6:	fbc3 2607 	smlal	r2, r6, r3, r7
 800e7da:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800e7dc:	18d2      	adds	r2, r2, r3
 800e7de:	eb46 73e3 	adc.w	r3, r6, r3, asr #31
 800e7e2:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800e7e6:	3128      	adds	r1, #40	@ 0x28
 800e7e8:	458c      	cmp	ip, r1
 800e7ea:	d1d6      	bne.n	800e79a <__tzcalc_limits+0x52>
 800e7ec:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 800e7f0:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 800e7f4:	428c      	cmp	r4, r1
 800e7f6:	4193      	sbcs	r3, r2
 800e7f8:	bfb4      	ite	lt
 800e7fa:	2301      	movlt	r3, #1
 800e7fc:	2300      	movge	r3, #0
 800e7fe:	6003      	str	r3, [r0, #0]
 800e800:	2001      	movs	r0, #1
 800e802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e806:	2200      	movs	r2, #0
 800e808:	e7e1      	b.n	800e7ce <__tzcalc_limits+0x86>
 800e80a:	2b44      	cmp	r3, #68	@ 0x44
 800e80c:	d101      	bne.n	800e812 <__tzcalc_limits+0xca>
 800e80e:	18ab      	adds	r3, r5, r2
 800e810:	e7df      	b.n	800e7d2 <__tzcalc_limits+0x8a>
 800e812:	07a3      	lsls	r3, r4, #30
 800e814:	d105      	bne.n	800e822 <__tzcalc_limits+0xda>
 800e816:	2664      	movs	r6, #100	@ 0x64
 800e818:	fb94 f3f6 	sdiv	r3, r4, r6
 800e81c:	fb06 4313 	mls	r3, r6, r3, r4
 800e820:	bb73      	cbnz	r3, 800e880 <__tzcalc_limits+0x138>
 800e822:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800e826:	fb94 f6f3 	sdiv	r6, r4, r3
 800e82a:	fb03 4616 	mls	r6, r3, r6, r4
 800e82e:	fab6 f686 	clz	r6, r6
 800e832:	0976      	lsrs	r6, r6, #5
 800e834:	f04f 0a30 	mov.w	sl, #48	@ 0x30
 800e838:	462b      	mov	r3, r5
 800e83a:	f04f 0800 	mov.w	r8, #0
 800e83e:	f8df e054 	ldr.w	lr, [pc, #84]	@ 800e894 <__tzcalc_limits+0x14c>
 800e842:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800e846:	fb0a e606 	mla	r6, sl, r6, lr
 800e84a:	f108 0801 	add.w	r8, r8, #1
 800e84e:	45c1      	cmp	r9, r8
 800e850:	f856 e028 	ldr.w	lr, [r6, r8, lsl #2]
 800e854:	dc16      	bgt.n	800e884 <__tzcalc_limits+0x13c>
 800e856:	2607      	movs	r6, #7
 800e858:	f103 0804 	add.w	r8, r3, #4
 800e85c:	fb98 f6f6 	sdiv	r6, r8, r6
 800e860:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800e864:	eba8 0606 	sub.w	r6, r8, r6
 800e868:	1b92      	subs	r2, r2, r6
 800e86a:	690e      	ldr	r6, [r1, #16]
 800e86c:	bf48      	it	mi
 800e86e:	3207      	addmi	r2, #7
 800e870:	3e01      	subs	r6, #1
 800e872:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800e876:	4432      	add	r2, r6
 800e878:	4572      	cmp	r2, lr
 800e87a:	da05      	bge.n	800e888 <__tzcalc_limits+0x140>
 800e87c:	4413      	add	r3, r2
 800e87e:	e7a8      	b.n	800e7d2 <__tzcalc_limits+0x8a>
 800e880:	2601      	movs	r6, #1
 800e882:	e7d7      	b.n	800e834 <__tzcalc_limits+0xec>
 800e884:	4473      	add	r3, lr
 800e886:	e7e0      	b.n	800e84a <__tzcalc_limits+0x102>
 800e888:	3a07      	subs	r2, #7
 800e88a:	e7f5      	b.n	800e878 <__tzcalc_limits+0x130>
 800e88c:	2000      	movs	r0, #0
 800e88e:	e7b8      	b.n	800e802 <__tzcalc_limits+0xba>
 800e890:	00015180 	.word	0x00015180
 800e894:	08012428 	.word	0x08012428

0800e898 <__tz_lock>:
 800e898:	4801      	ldr	r0, [pc, #4]	@ (800e8a0 <__tz_lock+0x8>)
 800e89a:	f000 bb0e 	b.w	800eeba <__retarget_lock_acquire>
 800e89e:	bf00      	nop
 800e8a0:	20005b88 	.word	0x20005b88

0800e8a4 <__tz_unlock>:
 800e8a4:	4801      	ldr	r0, [pc, #4]	@ (800e8ac <__tz_unlock+0x8>)
 800e8a6:	f000 bb0a 	b.w	800eebe <__retarget_lock_release>
 800e8aa:	bf00      	nop
 800e8ac:	20005b88 	.word	0x20005b88

0800e8b0 <_tzset_unlocked>:
 800e8b0:	4b01      	ldr	r3, [pc, #4]	@ (800e8b8 <_tzset_unlocked+0x8>)
 800e8b2:	6818      	ldr	r0, [r3, #0]
 800e8b4:	f000 b802 	b.w	800e8bc <_tzset_unlocked_r>
 800e8b8:	20000284 	.word	0x20000284

0800e8bc <_tzset_unlocked_r>:
 800e8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8c0:	b08d      	sub	sp, #52	@ 0x34
 800e8c2:	4607      	mov	r7, r0
 800e8c4:	f002 fd60 	bl	8011388 <__gettzinfo>
 800e8c8:	496d      	ldr	r1, [pc, #436]	@ (800ea80 <_tzset_unlocked_r+0x1c4>)
 800e8ca:	4604      	mov	r4, r0
 800e8cc:	4638      	mov	r0, r7
 800e8ce:	f001 fd5d 	bl	801038c <_getenv_r>
 800e8d2:	4d6c      	ldr	r5, [pc, #432]	@ (800ea84 <_tzset_unlocked_r+0x1c8>)
 800e8d4:	4606      	mov	r6, r0
 800e8d6:	bb10      	cbnz	r0, 800e91e <_tzset_unlocked_r+0x62>
 800e8d8:	4b6b      	ldr	r3, [pc, #428]	@ (800ea88 <_tzset_unlocked_r+0x1cc>)
 800e8da:	4a6c      	ldr	r2, [pc, #432]	@ (800ea8c <_tzset_unlocked_r+0x1d0>)
 800e8dc:	6018      	str	r0, [r3, #0]
 800e8de:	4b6c      	ldr	r3, [pc, #432]	@ (800ea90 <_tzset_unlocked_r+0x1d4>)
 800e8e0:	214a      	movs	r1, #74	@ 0x4a
 800e8e2:	6018      	str	r0, [r3, #0]
 800e8e4:	4b6b      	ldr	r3, [pc, #428]	@ (800ea94 <_tzset_unlocked_r+0x1d8>)
 800e8e6:	e9c4 0003 	strd	r0, r0, [r4, #12]
 800e8ea:	e9c3 2200 	strd	r2, r2, [r3]
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	e9c4 0005 	strd	r0, r0, [r4, #20]
 800e8f6:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 800e8fa:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800e8fe:	62a0      	str	r0, [r4, #40]	@ 0x28
 800e900:	6520      	str	r0, [r4, #80]	@ 0x50
 800e902:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800e906:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800e90a:	6828      	ldr	r0, [r5, #0]
 800e90c:	7221      	strb	r1, [r4, #8]
 800e90e:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800e912:	f7fd fee3 	bl	800c6dc <free>
 800e916:	602e      	str	r6, [r5, #0]
 800e918:	b00d      	add	sp, #52	@ 0x34
 800e91a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e91e:	6829      	ldr	r1, [r5, #0]
 800e920:	2900      	cmp	r1, #0
 800e922:	f040 808e 	bne.w	800ea42 <_tzset_unlocked_r+0x186>
 800e926:	6828      	ldr	r0, [r5, #0]
 800e928:	f7fd fed8 	bl	800c6dc <free>
 800e92c:	4630      	mov	r0, r6
 800e92e:	f7f1 fc89 	bl	8000244 <strlen>
 800e932:	1c41      	adds	r1, r0, #1
 800e934:	4638      	mov	r0, r7
 800e936:	f7fd fefb 	bl	800c730 <_malloc_r>
 800e93a:	6028      	str	r0, [r5, #0]
 800e93c:	2800      	cmp	r0, #0
 800e93e:	f040 8086 	bne.w	800ea4e <_tzset_unlocked_r+0x192>
 800e942:	2300      	movs	r3, #0
 800e944:	4a52      	ldr	r2, [pc, #328]	@ (800ea90 <_tzset_unlocked_r+0x1d4>)
 800e946:	2000      	movs	r0, #0
 800e948:	6013      	str	r3, [r2, #0]
 800e94a:	2100      	movs	r1, #0
 800e94c:	4a52      	ldr	r2, [pc, #328]	@ (800ea98 <_tzset_unlocked_r+0x1dc>)
 800e94e:	f8df 8144 	ldr.w	r8, [pc, #324]	@ 800ea94 <_tzset_unlocked_r+0x1d8>
 800e952:	e9c4 3303 	strd	r3, r3, [r4, #12]
 800e956:	e9c8 2200 	strd	r2, r2, [r8]
 800e95a:	224a      	movs	r2, #74	@ 0x4a
 800e95c:	e9c4 3305 	strd	r3, r3, [r4, #20]
 800e960:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800e964:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 800e968:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 800e96c:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 800e970:	f8df a114 	ldr.w	sl, [pc, #276]	@ 800ea88 <_tzset_unlocked_r+0x1cc>
 800e974:	7222      	strb	r2, [r4, #8]
 800e976:	f8ca 3000 	str.w	r3, [sl]
 800e97a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e97c:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 800e980:	6523      	str	r3, [r4, #80]	@ 0x50
 800e982:	7833      	ldrb	r3, [r6, #0]
 800e984:	2b3a      	cmp	r3, #58	@ 0x3a
 800e986:	bf08      	it	eq
 800e988:	3601      	addeq	r6, #1
 800e98a:	7833      	ldrb	r3, [r6, #0]
 800e98c:	2b3c      	cmp	r3, #60	@ 0x3c
 800e98e:	d162      	bne.n	800ea56 <_tzset_unlocked_r+0x19a>
 800e990:	1c75      	adds	r5, r6, #1
 800e992:	4628      	mov	r0, r5
 800e994:	4a41      	ldr	r2, [pc, #260]	@ (800ea9c <_tzset_unlocked_r+0x1e0>)
 800e996:	4942      	ldr	r1, [pc, #264]	@ (800eaa0 <_tzset_unlocked_r+0x1e4>)
 800e998:	ab0a      	add	r3, sp, #40	@ 0x28
 800e99a:	f002 fc37 	bl	801120c <siscanf>
 800e99e:	2800      	cmp	r0, #0
 800e9a0:	ddba      	ble.n	800e918 <_tzset_unlocked_r+0x5c>
 800e9a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e9a4:	1eda      	subs	r2, r3, #3
 800e9a6:	2a07      	cmp	r2, #7
 800e9a8:	d8b6      	bhi.n	800e918 <_tzset_unlocked_r+0x5c>
 800e9aa:	5ceb      	ldrb	r3, [r5, r3]
 800e9ac:	2b3e      	cmp	r3, #62	@ 0x3e
 800e9ae:	d1b3      	bne.n	800e918 <_tzset_unlocked_r+0x5c>
 800e9b0:	3602      	adds	r6, #2
 800e9b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e9b4:	18f5      	adds	r5, r6, r3
 800e9b6:	5cf3      	ldrb	r3, [r6, r3]
 800e9b8:	2b2d      	cmp	r3, #45	@ 0x2d
 800e9ba:	d15a      	bne.n	800ea72 <_tzset_unlocked_r+0x1b6>
 800e9bc:	f04f 39ff 	mov.w	r9, #4294967295
 800e9c0:	3501      	adds	r5, #1
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	af08      	add	r7, sp, #32
 800e9c6:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e9ca:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e9ce:	ab0a      	add	r3, sp, #40	@ 0x28
 800e9d0:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800e9d4:	9303      	str	r3, [sp, #12]
 800e9d6:	f10d 031e 	add.w	r3, sp, #30
 800e9da:	9300      	str	r3, [sp, #0]
 800e9dc:	4628      	mov	r0, r5
 800e9de:	4931      	ldr	r1, [pc, #196]	@ (800eaa4 <_tzset_unlocked_r+0x1e8>)
 800e9e0:	ab0a      	add	r3, sp, #40	@ 0x28
 800e9e2:	aa07      	add	r2, sp, #28
 800e9e4:	f002 fc12 	bl	801120c <siscanf>
 800e9e8:	2800      	cmp	r0, #0
 800e9ea:	dd95      	ble.n	800e918 <_tzset_unlocked_r+0x5c>
 800e9ec:	223c      	movs	r2, #60	@ 0x3c
 800e9ee:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800e9f2:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 800e9f6:	fb02 6603 	mla	r6, r2, r3, r6
 800e9fa:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800e9fe:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800ea02:	fb02 6603 	mla	r6, r2, r3, r6
 800ea06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea08:	fb09 f606 	mul.w	r6, r9, r6
 800ea0c:	eb05 0903 	add.w	r9, r5, r3
 800ea10:	5ceb      	ldrb	r3, [r5, r3]
 800ea12:	2b3c      	cmp	r3, #60	@ 0x3c
 800ea14:	f040 80e8 	bne.w	800ebe8 <_tzset_unlocked_r+0x32c>
 800ea18:	f109 0501 	add.w	r5, r9, #1
 800ea1c:	4628      	mov	r0, r5
 800ea1e:	4a22      	ldr	r2, [pc, #136]	@ (800eaa8 <_tzset_unlocked_r+0x1ec>)
 800ea20:	491f      	ldr	r1, [pc, #124]	@ (800eaa0 <_tzset_unlocked_r+0x1e4>)
 800ea22:	ab0a      	add	r3, sp, #40	@ 0x28
 800ea24:	f002 fbf2 	bl	801120c <siscanf>
 800ea28:	2800      	cmp	r0, #0
 800ea2a:	dc41      	bgt.n	800eab0 <_tzset_unlocked_r+0x1f4>
 800ea2c:	f899 3001 	ldrb.w	r3, [r9, #1]
 800ea30:	2b3e      	cmp	r3, #62	@ 0x3e
 800ea32:	d13d      	bne.n	800eab0 <_tzset_unlocked_r+0x1f4>
 800ea34:	4b19      	ldr	r3, [pc, #100]	@ (800ea9c <_tzset_unlocked_r+0x1e0>)
 800ea36:	62a6      	str	r6, [r4, #40]	@ 0x28
 800ea38:	e9c8 3300 	strd	r3, r3, [r8]
 800ea3c:	f8ca 6000 	str.w	r6, [sl]
 800ea40:	e76a      	b.n	800e918 <_tzset_unlocked_r+0x5c>
 800ea42:	f7f1 fbf5 	bl	8000230 <strcmp>
 800ea46:	2800      	cmp	r0, #0
 800ea48:	f47f af6d 	bne.w	800e926 <_tzset_unlocked_r+0x6a>
 800ea4c:	e764      	b.n	800e918 <_tzset_unlocked_r+0x5c>
 800ea4e:	4631      	mov	r1, r6
 800ea50:	f000 fa37 	bl	800eec2 <strcpy>
 800ea54:	e775      	b.n	800e942 <_tzset_unlocked_r+0x86>
 800ea56:	4630      	mov	r0, r6
 800ea58:	4a10      	ldr	r2, [pc, #64]	@ (800ea9c <_tzset_unlocked_r+0x1e0>)
 800ea5a:	4914      	ldr	r1, [pc, #80]	@ (800eaac <_tzset_unlocked_r+0x1f0>)
 800ea5c:	ab0a      	add	r3, sp, #40	@ 0x28
 800ea5e:	f002 fbd5 	bl	801120c <siscanf>
 800ea62:	2800      	cmp	r0, #0
 800ea64:	f77f af58 	ble.w	800e918 <_tzset_unlocked_r+0x5c>
 800ea68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea6a:	3b03      	subs	r3, #3
 800ea6c:	2b07      	cmp	r3, #7
 800ea6e:	d9a0      	bls.n	800e9b2 <_tzset_unlocked_r+0xf6>
 800ea70:	e752      	b.n	800e918 <_tzset_unlocked_r+0x5c>
 800ea72:	2b2b      	cmp	r3, #43	@ 0x2b
 800ea74:	f04f 0901 	mov.w	r9, #1
 800ea78:	bf08      	it	eq
 800ea7a:	3501      	addeq	r5, #1
 800ea7c:	e7a1      	b.n	800e9c2 <_tzset_unlocked_r+0x106>
 800ea7e:	bf00      	nop
 800ea80:	08012154 	.word	0x08012154
 800ea84:	20005b60 	.word	0x20005b60
 800ea88:	20005b7c 	.word	0x20005b7c
 800ea8c:	08012157 	.word	0x08012157
 800ea90:	20005b80 	.word	0x20005b80
 800ea94:	20000110 	.word	0x20000110
 800ea98:	080121e5 	.word	0x080121e5
 800ea9c:	20005b70 	.word	0x20005b70
 800eaa0:	0801215b 	.word	0x0801215b
 800eaa4:	08012190 	.word	0x08012190
 800eaa8:	20005b64 	.word	0x20005b64
 800eaac:	0801216e 	.word	0x0801216e
 800eab0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eab2:	1eda      	subs	r2, r3, #3
 800eab4:	2a07      	cmp	r2, #7
 800eab6:	f63f af2f 	bhi.w	800e918 <_tzset_unlocked_r+0x5c>
 800eaba:	5ceb      	ldrb	r3, [r5, r3]
 800eabc:	2b3e      	cmp	r3, #62	@ 0x3e
 800eabe:	f47f af2b 	bne.w	800e918 <_tzset_unlocked_r+0x5c>
 800eac2:	f109 0902 	add.w	r9, r9, #2
 800eac6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eac8:	eb09 0503 	add.w	r5, r9, r3
 800eacc:	f819 3003 	ldrb.w	r3, [r9, r3]
 800ead0:	2b2d      	cmp	r3, #45	@ 0x2d
 800ead2:	f040 8098 	bne.w	800ec06 <_tzset_unlocked_r+0x34a>
 800ead6:	f04f 39ff 	mov.w	r9, #4294967295
 800eada:	3501      	adds	r5, #1
 800eadc:	2300      	movs	r3, #0
 800eade:	f8ad 301c 	strh.w	r3, [sp, #28]
 800eae2:	f8ad 301e 	strh.w	r3, [sp, #30]
 800eae6:	f8ad 3020 	strh.w	r3, [sp, #32]
 800eaea:	930a      	str	r3, [sp, #40]	@ 0x28
 800eaec:	ab0a      	add	r3, sp, #40	@ 0x28
 800eaee:	e9cd 7302 	strd	r7, r3, [sp, #8]
 800eaf2:	9301      	str	r3, [sp, #4]
 800eaf4:	f10d 031e 	add.w	r3, sp, #30
 800eaf8:	9300      	str	r3, [sp, #0]
 800eafa:	4628      	mov	r0, r5
 800eafc:	497a      	ldr	r1, [pc, #488]	@ (800ece8 <_tzset_unlocked_r+0x42c>)
 800eafe:	ab0a      	add	r3, sp, #40	@ 0x28
 800eb00:	aa07      	add	r2, sp, #28
 800eb02:	f002 fb83 	bl	801120c <siscanf>
 800eb06:	2800      	cmp	r0, #0
 800eb08:	f300 8083 	bgt.w	800ec12 <_tzset_unlocked_r+0x356>
 800eb0c:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 800eb10:	4627      	mov	r7, r4
 800eb12:	f04f 0b00 	mov.w	fp, #0
 800eb16:	9304      	str	r3, [sp, #16]
 800eb18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb1a:	441d      	add	r5, r3
 800eb1c:	782b      	ldrb	r3, [r5, #0]
 800eb1e:	2b2c      	cmp	r3, #44	@ 0x2c
 800eb20:	bf08      	it	eq
 800eb22:	3501      	addeq	r5, #1
 800eb24:	f895 9000 	ldrb.w	r9, [r5]
 800eb28:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 800eb2c:	f040 8084 	bne.w	800ec38 <_tzset_unlocked_r+0x37c>
 800eb30:	ab0a      	add	r3, sp, #40	@ 0x28
 800eb32:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 800eb36:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800eb3a:	aa09      	add	r2, sp, #36	@ 0x24
 800eb3c:	9200      	str	r2, [sp, #0]
 800eb3e:	4628      	mov	r0, r5
 800eb40:	496a      	ldr	r1, [pc, #424]	@ (800ecec <_tzset_unlocked_r+0x430>)
 800eb42:	9303      	str	r3, [sp, #12]
 800eb44:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 800eb48:	f002 fb60 	bl	801120c <siscanf>
 800eb4c:	2803      	cmp	r0, #3
 800eb4e:	f47f aee3 	bne.w	800e918 <_tzset_unlocked_r+0x5c>
 800eb52:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 800eb56:	1e4b      	subs	r3, r1, #1
 800eb58:	2b0b      	cmp	r3, #11
 800eb5a:	f63f aedd 	bhi.w	800e918 <_tzset_unlocked_r+0x5c>
 800eb5e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 800eb62:	1e53      	subs	r3, r2, #1
 800eb64:	2b04      	cmp	r3, #4
 800eb66:	f63f aed7 	bhi.w	800e918 <_tzset_unlocked_r+0x5c>
 800eb6a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800eb6e:	2b06      	cmp	r3, #6
 800eb70:	f63f aed2 	bhi.w	800e918 <_tzset_unlocked_r+0x5c>
 800eb74:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800eb78:	f887 9008 	strb.w	r9, [r7, #8]
 800eb7c:	617b      	str	r3, [r7, #20]
 800eb7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb80:	eb05 0903 	add.w	r9, r5, r3
 800eb84:	2500      	movs	r5, #0
 800eb86:	f04f 0302 	mov.w	r3, #2
 800eb8a:	f8ad 501e 	strh.w	r5, [sp, #30]
 800eb8e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800eb92:	f8ad 5020 	strh.w	r5, [sp, #32]
 800eb96:	950a      	str	r5, [sp, #40]	@ 0x28
 800eb98:	f899 3000 	ldrb.w	r3, [r9]
 800eb9c:	2b2f      	cmp	r3, #47	@ 0x2f
 800eb9e:	d177      	bne.n	800ec90 <_tzset_unlocked_r+0x3d4>
 800eba0:	ab0a      	add	r3, sp, #40	@ 0x28
 800eba2:	aa08      	add	r2, sp, #32
 800eba4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800eba8:	f10d 021e 	add.w	r2, sp, #30
 800ebac:	9200      	str	r2, [sp, #0]
 800ebae:	4648      	mov	r0, r9
 800ebb0:	494f      	ldr	r1, [pc, #316]	@ (800ecf0 <_tzset_unlocked_r+0x434>)
 800ebb2:	9303      	str	r3, [sp, #12]
 800ebb4:	aa07      	add	r2, sp, #28
 800ebb6:	f002 fb29 	bl	801120c <siscanf>
 800ebba:	42a8      	cmp	r0, r5
 800ebbc:	dc68      	bgt.n	800ec90 <_tzset_unlocked_r+0x3d4>
 800ebbe:	214a      	movs	r1, #74	@ 0x4a
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	e9c4 5503 	strd	r5, r5, [r4, #12]
 800ebc8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800ebcc:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800ebd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 800ebd4:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 800ebd8:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800ebdc:	7221      	strb	r1, [r4, #8]
 800ebde:	62a5      	str	r5, [r4, #40]	@ 0x28
 800ebe0:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800ebe4:	6525      	str	r5, [r4, #80]	@ 0x50
 800ebe6:	e697      	b.n	800e918 <_tzset_unlocked_r+0x5c>
 800ebe8:	4648      	mov	r0, r9
 800ebea:	4a42      	ldr	r2, [pc, #264]	@ (800ecf4 <_tzset_unlocked_r+0x438>)
 800ebec:	4942      	ldr	r1, [pc, #264]	@ (800ecf8 <_tzset_unlocked_r+0x43c>)
 800ebee:	ab0a      	add	r3, sp, #40	@ 0x28
 800ebf0:	f002 fb0c 	bl	801120c <siscanf>
 800ebf4:	2800      	cmp	r0, #0
 800ebf6:	f77f af1d 	ble.w	800ea34 <_tzset_unlocked_r+0x178>
 800ebfa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ebfc:	3b03      	subs	r3, #3
 800ebfe:	2b07      	cmp	r3, #7
 800ec00:	f67f af61 	bls.w	800eac6 <_tzset_unlocked_r+0x20a>
 800ec04:	e688      	b.n	800e918 <_tzset_unlocked_r+0x5c>
 800ec06:	2b2b      	cmp	r3, #43	@ 0x2b
 800ec08:	f04f 0901 	mov.w	r9, #1
 800ec0c:	bf08      	it	eq
 800ec0e:	3501      	addeq	r5, #1
 800ec10:	e764      	b.n	800eadc <_tzset_unlocked_r+0x220>
 800ec12:	213c      	movs	r1, #60	@ 0x3c
 800ec14:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800ec18:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800ec1c:	fb01 3302 	mla	r3, r1, r2, r3
 800ec20:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800ec24:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800ec28:	fb01 3302 	mla	r3, r1, r2, r3
 800ec2c:	fb09 f303 	mul.w	r3, r9, r3
 800ec30:	e76e      	b.n	800eb10 <_tzset_unlocked_r+0x254>
 800ec32:	f04f 0b01 	mov.w	fp, #1
 800ec36:	e771      	b.n	800eb1c <_tzset_unlocked_r+0x260>
 800ec38:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 800ec3c:	bf0a      	itet	eq
 800ec3e:	464b      	moveq	r3, r9
 800ec40:	2344      	movne	r3, #68	@ 0x44
 800ec42:	3501      	addeq	r5, #1
 800ec44:	220a      	movs	r2, #10
 800ec46:	4628      	mov	r0, r5
 800ec48:	a90b      	add	r1, sp, #44	@ 0x2c
 800ec4a:	9305      	str	r3, [sp, #20]
 800ec4c:	f002 f8ce 	bl	8010dec <strtoul>
 800ec50:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 800ec54:	9b05      	ldr	r3, [sp, #20]
 800ec56:	45a9      	cmp	r9, r5
 800ec58:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 800ec5c:	d114      	bne.n	800ec88 <_tzset_unlocked_r+0x3cc>
 800ec5e:	234d      	movs	r3, #77	@ 0x4d
 800ec60:	f1bb 0f00 	cmp.w	fp, #0
 800ec64:	d107      	bne.n	800ec76 <_tzset_unlocked_r+0x3ba>
 800ec66:	2103      	movs	r1, #3
 800ec68:	7223      	strb	r3, [r4, #8]
 800ec6a:	2302      	movs	r3, #2
 800ec6c:	f8c4 b014 	str.w	fp, [r4, #20]
 800ec70:	e9c4 1303 	strd	r1, r3, [r4, #12]
 800ec74:	e786      	b.n	800eb84 <_tzset_unlocked_r+0x2c8>
 800ec76:	220b      	movs	r2, #11
 800ec78:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 800ec7c:	2301      	movs	r3, #1
 800ec7e:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 800ec82:	2300      	movs	r3, #0
 800ec84:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800ec86:	e77d      	b.n	800eb84 <_tzset_unlocked_r+0x2c8>
 800ec88:	b280      	uxth	r0, r0
 800ec8a:	723b      	strb	r3, [r7, #8]
 800ec8c:	6178      	str	r0, [r7, #20]
 800ec8e:	e779      	b.n	800eb84 <_tzset_unlocked_r+0x2c8>
 800ec90:	213c      	movs	r1, #60	@ 0x3c
 800ec92:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800ec96:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800ec9a:	3728      	adds	r7, #40	@ 0x28
 800ec9c:	fb01 3302 	mla	r3, r1, r2, r3
 800eca0:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800eca4:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800eca8:	fb01 3302 	mla	r3, r1, r2, r3
 800ecac:	f847 3c10 	str.w	r3, [r7, #-16]
 800ecb0:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800ecb2:	444d      	add	r5, r9
 800ecb4:	f1bb 0f00 	cmp.w	fp, #0
 800ecb8:	d0bb      	beq.n	800ec32 <_tzset_unlocked_r+0x376>
 800ecba:	9b04      	ldr	r3, [sp, #16]
 800ecbc:	6860      	ldr	r0, [r4, #4]
 800ecbe:	6523      	str	r3, [r4, #80]	@ 0x50
 800ecc0:	4b0e      	ldr	r3, [pc, #56]	@ (800ecfc <_tzset_unlocked_r+0x440>)
 800ecc2:	62a6      	str	r6, [r4, #40]	@ 0x28
 800ecc4:	f8c8 3000 	str.w	r3, [r8]
 800ecc8:	4b0a      	ldr	r3, [pc, #40]	@ (800ecf4 <_tzset_unlocked_r+0x438>)
 800ecca:	f8c8 3004 	str.w	r3, [r8, #4]
 800ecce:	f7ff fd3b 	bl	800e748 <__tzcalc_limits>
 800ecd2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800ecd4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800ecd6:	f8ca 2000 	str.w	r2, [sl]
 800ecda:	1a9b      	subs	r3, r3, r2
 800ecdc:	bf18      	it	ne
 800ecde:	2301      	movne	r3, #1
 800ece0:	4a07      	ldr	r2, [pc, #28]	@ (800ed00 <_tzset_unlocked_r+0x444>)
 800ece2:	6013      	str	r3, [r2, #0]
 800ece4:	e618      	b.n	800e918 <_tzset_unlocked_r+0x5c>
 800ece6:	bf00      	nop
 800ece8:	08012190 	.word	0x08012190
 800ecec:	0801217c 	.word	0x0801217c
 800ecf0:	0801218f 	.word	0x0801218f
 800ecf4:	20005b64 	.word	0x20005b64
 800ecf8:	0801216e 	.word	0x0801216e
 800ecfc:	20005b70 	.word	0x20005b70
 800ed00:	20005b80 	.word	0x20005b80

0800ed04 <_localeconv_r>:
 800ed04:	4800      	ldr	r0, [pc, #0]	@ (800ed08 <_localeconv_r+0x4>)
 800ed06:	4770      	bx	lr
 800ed08:	20000208 	.word	0x20000208

0800ed0c <_close_r>:
 800ed0c:	b538      	push	{r3, r4, r5, lr}
 800ed0e:	2300      	movs	r3, #0
 800ed10:	4d05      	ldr	r5, [pc, #20]	@ (800ed28 <_close_r+0x1c>)
 800ed12:	4604      	mov	r4, r0
 800ed14:	4608      	mov	r0, r1
 800ed16:	602b      	str	r3, [r5, #0]
 800ed18:	f7f5 fae6 	bl	80042e8 <_close>
 800ed1c:	1c43      	adds	r3, r0, #1
 800ed1e:	d102      	bne.n	800ed26 <_close_r+0x1a>
 800ed20:	682b      	ldr	r3, [r5, #0]
 800ed22:	b103      	cbz	r3, 800ed26 <_close_r+0x1a>
 800ed24:	6023      	str	r3, [r4, #0]
 800ed26:	bd38      	pop	{r3, r4, r5, pc}
 800ed28:	20005b84 	.word	0x20005b84

0800ed2c <_reclaim_reent>:
 800ed2c:	4b29      	ldr	r3, [pc, #164]	@ (800edd4 <_reclaim_reent+0xa8>)
 800ed2e:	b570      	push	{r4, r5, r6, lr}
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	4604      	mov	r4, r0
 800ed34:	4283      	cmp	r3, r0
 800ed36:	d04b      	beq.n	800edd0 <_reclaim_reent+0xa4>
 800ed38:	69c3      	ldr	r3, [r0, #28]
 800ed3a:	b1ab      	cbz	r3, 800ed68 <_reclaim_reent+0x3c>
 800ed3c:	68db      	ldr	r3, [r3, #12]
 800ed3e:	b16b      	cbz	r3, 800ed5c <_reclaim_reent+0x30>
 800ed40:	2500      	movs	r5, #0
 800ed42:	69e3      	ldr	r3, [r4, #28]
 800ed44:	68db      	ldr	r3, [r3, #12]
 800ed46:	5959      	ldr	r1, [r3, r5]
 800ed48:	2900      	cmp	r1, #0
 800ed4a:	d13b      	bne.n	800edc4 <_reclaim_reent+0x98>
 800ed4c:	3504      	adds	r5, #4
 800ed4e:	2d80      	cmp	r5, #128	@ 0x80
 800ed50:	d1f7      	bne.n	800ed42 <_reclaim_reent+0x16>
 800ed52:	69e3      	ldr	r3, [r4, #28]
 800ed54:	4620      	mov	r0, r4
 800ed56:	68d9      	ldr	r1, [r3, #12]
 800ed58:	f000 ff5a 	bl	800fc10 <_free_r>
 800ed5c:	69e3      	ldr	r3, [r4, #28]
 800ed5e:	6819      	ldr	r1, [r3, #0]
 800ed60:	b111      	cbz	r1, 800ed68 <_reclaim_reent+0x3c>
 800ed62:	4620      	mov	r0, r4
 800ed64:	f000 ff54 	bl	800fc10 <_free_r>
 800ed68:	6961      	ldr	r1, [r4, #20]
 800ed6a:	b111      	cbz	r1, 800ed72 <_reclaim_reent+0x46>
 800ed6c:	4620      	mov	r0, r4
 800ed6e:	f000 ff4f 	bl	800fc10 <_free_r>
 800ed72:	69e1      	ldr	r1, [r4, #28]
 800ed74:	b111      	cbz	r1, 800ed7c <_reclaim_reent+0x50>
 800ed76:	4620      	mov	r0, r4
 800ed78:	f000 ff4a 	bl	800fc10 <_free_r>
 800ed7c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ed7e:	b111      	cbz	r1, 800ed86 <_reclaim_reent+0x5a>
 800ed80:	4620      	mov	r0, r4
 800ed82:	f000 ff45 	bl	800fc10 <_free_r>
 800ed86:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ed88:	b111      	cbz	r1, 800ed90 <_reclaim_reent+0x64>
 800ed8a:	4620      	mov	r0, r4
 800ed8c:	f000 ff40 	bl	800fc10 <_free_r>
 800ed90:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ed92:	b111      	cbz	r1, 800ed9a <_reclaim_reent+0x6e>
 800ed94:	4620      	mov	r0, r4
 800ed96:	f000 ff3b 	bl	800fc10 <_free_r>
 800ed9a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ed9c:	b111      	cbz	r1, 800eda4 <_reclaim_reent+0x78>
 800ed9e:	4620      	mov	r0, r4
 800eda0:	f000 ff36 	bl	800fc10 <_free_r>
 800eda4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800eda6:	b111      	cbz	r1, 800edae <_reclaim_reent+0x82>
 800eda8:	4620      	mov	r0, r4
 800edaa:	f000 ff31 	bl	800fc10 <_free_r>
 800edae:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800edb0:	b111      	cbz	r1, 800edb8 <_reclaim_reent+0x8c>
 800edb2:	4620      	mov	r0, r4
 800edb4:	f000 ff2c 	bl	800fc10 <_free_r>
 800edb8:	6a23      	ldr	r3, [r4, #32]
 800edba:	b14b      	cbz	r3, 800edd0 <_reclaim_reent+0xa4>
 800edbc:	4620      	mov	r0, r4
 800edbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800edc2:	4718      	bx	r3
 800edc4:	680e      	ldr	r6, [r1, #0]
 800edc6:	4620      	mov	r0, r4
 800edc8:	f000 ff22 	bl	800fc10 <_free_r>
 800edcc:	4631      	mov	r1, r6
 800edce:	e7bb      	b.n	800ed48 <_reclaim_reent+0x1c>
 800edd0:	bd70      	pop	{r4, r5, r6, pc}
 800edd2:	bf00      	nop
 800edd4:	20000284 	.word	0x20000284

0800edd8 <_lseek_r>:
 800edd8:	b538      	push	{r3, r4, r5, lr}
 800edda:	4604      	mov	r4, r0
 800eddc:	4608      	mov	r0, r1
 800edde:	4611      	mov	r1, r2
 800ede0:	2200      	movs	r2, #0
 800ede2:	4d05      	ldr	r5, [pc, #20]	@ (800edf8 <_lseek_r+0x20>)
 800ede4:	602a      	str	r2, [r5, #0]
 800ede6:	461a      	mov	r2, r3
 800ede8:	f7f5 faa2 	bl	8004330 <_lseek>
 800edec:	1c43      	adds	r3, r0, #1
 800edee:	d102      	bne.n	800edf6 <_lseek_r+0x1e>
 800edf0:	682b      	ldr	r3, [r5, #0]
 800edf2:	b103      	cbz	r3, 800edf6 <_lseek_r+0x1e>
 800edf4:	6023      	str	r3, [r4, #0]
 800edf6:	bd38      	pop	{r3, r4, r5, pc}
 800edf8:	20005b84 	.word	0x20005b84

0800edfc <_read_r>:
 800edfc:	b538      	push	{r3, r4, r5, lr}
 800edfe:	4604      	mov	r4, r0
 800ee00:	4608      	mov	r0, r1
 800ee02:	4611      	mov	r1, r2
 800ee04:	2200      	movs	r2, #0
 800ee06:	4d05      	ldr	r5, [pc, #20]	@ (800ee1c <_read_r+0x20>)
 800ee08:	602a      	str	r2, [r5, #0]
 800ee0a:	461a      	mov	r2, r3
 800ee0c:	f7f2 fba3 	bl	8001556 <_read>
 800ee10:	1c43      	adds	r3, r0, #1
 800ee12:	d102      	bne.n	800ee1a <_read_r+0x1e>
 800ee14:	682b      	ldr	r3, [r5, #0]
 800ee16:	b103      	cbz	r3, 800ee1a <_read_r+0x1e>
 800ee18:	6023      	str	r3, [r4, #0]
 800ee1a:	bd38      	pop	{r3, r4, r5, pc}
 800ee1c:	20005b84 	.word	0x20005b84

0800ee20 <_sbrk_r>:
 800ee20:	b538      	push	{r3, r4, r5, lr}
 800ee22:	2300      	movs	r3, #0
 800ee24:	4d05      	ldr	r5, [pc, #20]	@ (800ee3c <_sbrk_r+0x1c>)
 800ee26:	4604      	mov	r4, r0
 800ee28:	4608      	mov	r0, r1
 800ee2a:	602b      	str	r3, [r5, #0]
 800ee2c:	f7f5 fa8c 	bl	8004348 <_sbrk>
 800ee30:	1c43      	adds	r3, r0, #1
 800ee32:	d102      	bne.n	800ee3a <_sbrk_r+0x1a>
 800ee34:	682b      	ldr	r3, [r5, #0]
 800ee36:	b103      	cbz	r3, 800ee3a <_sbrk_r+0x1a>
 800ee38:	6023      	str	r3, [r4, #0]
 800ee3a:	bd38      	pop	{r3, r4, r5, pc}
 800ee3c:	20005b84 	.word	0x20005b84

0800ee40 <_write_r>:
 800ee40:	b538      	push	{r3, r4, r5, lr}
 800ee42:	4604      	mov	r4, r0
 800ee44:	4608      	mov	r0, r1
 800ee46:	4611      	mov	r1, r2
 800ee48:	2200      	movs	r2, #0
 800ee4a:	4d05      	ldr	r5, [pc, #20]	@ (800ee60 <_write_r+0x20>)
 800ee4c:	602a      	str	r2, [r5, #0]
 800ee4e:	461a      	mov	r2, r3
 800ee50:	f7f2 fb9e 	bl	8001590 <_write>
 800ee54:	1c43      	adds	r3, r0, #1
 800ee56:	d102      	bne.n	800ee5e <_write_r+0x1e>
 800ee58:	682b      	ldr	r3, [r5, #0]
 800ee5a:	b103      	cbz	r3, 800ee5e <_write_r+0x1e>
 800ee5c:	6023      	str	r3, [r4, #0]
 800ee5e:	bd38      	pop	{r3, r4, r5, pc}
 800ee60:	20005b84 	.word	0x20005b84

0800ee64 <__errno>:
 800ee64:	4b01      	ldr	r3, [pc, #4]	@ (800ee6c <__errno+0x8>)
 800ee66:	6818      	ldr	r0, [r3, #0]
 800ee68:	4770      	bx	lr
 800ee6a:	bf00      	nop
 800ee6c:	20000284 	.word	0x20000284

0800ee70 <__libc_init_array>:
 800ee70:	b570      	push	{r4, r5, r6, lr}
 800ee72:	2600      	movs	r6, #0
 800ee74:	4d0c      	ldr	r5, [pc, #48]	@ (800eea8 <__libc_init_array+0x38>)
 800ee76:	4c0d      	ldr	r4, [pc, #52]	@ (800eeac <__libc_init_array+0x3c>)
 800ee78:	1b64      	subs	r4, r4, r5
 800ee7a:	10a4      	asrs	r4, r4, #2
 800ee7c:	42a6      	cmp	r6, r4
 800ee7e:	d109      	bne.n	800ee94 <__libc_init_array+0x24>
 800ee80:	f002 ff32 	bl	8011ce8 <_init>
 800ee84:	2600      	movs	r6, #0
 800ee86:	4d0a      	ldr	r5, [pc, #40]	@ (800eeb0 <__libc_init_array+0x40>)
 800ee88:	4c0a      	ldr	r4, [pc, #40]	@ (800eeb4 <__libc_init_array+0x44>)
 800ee8a:	1b64      	subs	r4, r4, r5
 800ee8c:	10a4      	asrs	r4, r4, #2
 800ee8e:	42a6      	cmp	r6, r4
 800ee90:	d105      	bne.n	800ee9e <__libc_init_array+0x2e>
 800ee92:	bd70      	pop	{r4, r5, r6, pc}
 800ee94:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee98:	4798      	blx	r3
 800ee9a:	3601      	adds	r6, #1
 800ee9c:	e7ee      	b.n	800ee7c <__libc_init_array+0xc>
 800ee9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800eea2:	4798      	blx	r3
 800eea4:	3601      	adds	r6, #1
 800eea6:	e7f2      	b.n	800ee8e <__libc_init_array+0x1e>
 800eea8:	080124b0 	.word	0x080124b0
 800eeac:	080124b0 	.word	0x080124b0
 800eeb0:	080124b0 	.word	0x080124b0
 800eeb4:	080124b4 	.word	0x080124b4

0800eeb8 <__retarget_lock_init_recursive>:
 800eeb8:	4770      	bx	lr

0800eeba <__retarget_lock_acquire>:
 800eeba:	4770      	bx	lr

0800eebc <__retarget_lock_acquire_recursive>:
 800eebc:	4770      	bx	lr

0800eebe <__retarget_lock_release>:
 800eebe:	4770      	bx	lr

0800eec0 <__retarget_lock_release_recursive>:
 800eec0:	4770      	bx	lr

0800eec2 <strcpy>:
 800eec2:	4603      	mov	r3, r0
 800eec4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eec8:	f803 2b01 	strb.w	r2, [r3], #1
 800eecc:	2a00      	cmp	r2, #0
 800eece:	d1f9      	bne.n	800eec4 <strcpy+0x2>
 800eed0:	4770      	bx	lr

0800eed2 <memchr>:
 800eed2:	4603      	mov	r3, r0
 800eed4:	b510      	push	{r4, lr}
 800eed6:	b2c9      	uxtb	r1, r1
 800eed8:	4402      	add	r2, r0
 800eeda:	4293      	cmp	r3, r2
 800eedc:	4618      	mov	r0, r3
 800eede:	d101      	bne.n	800eee4 <memchr+0x12>
 800eee0:	2000      	movs	r0, #0
 800eee2:	e003      	b.n	800eeec <memchr+0x1a>
 800eee4:	7804      	ldrb	r4, [r0, #0]
 800eee6:	3301      	adds	r3, #1
 800eee8:	428c      	cmp	r4, r1
 800eeea:	d1f6      	bne.n	800eeda <memchr+0x8>
 800eeec:	bd10      	pop	{r4, pc}

0800eeee <memcpy>:
 800eeee:	440a      	add	r2, r1
 800eef0:	4291      	cmp	r1, r2
 800eef2:	f100 33ff 	add.w	r3, r0, #4294967295
 800eef6:	d100      	bne.n	800eefa <memcpy+0xc>
 800eef8:	4770      	bx	lr
 800eefa:	b510      	push	{r4, lr}
 800eefc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef00:	4291      	cmp	r1, r2
 800ef02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef06:	d1f9      	bne.n	800eefc <memcpy+0xe>
 800ef08:	bd10      	pop	{r4, pc}
	...

0800ef0c <nan>:
 800ef0c:	2000      	movs	r0, #0
 800ef0e:	4901      	ldr	r1, [pc, #4]	@ (800ef14 <nan+0x8>)
 800ef10:	4770      	bx	lr
 800ef12:	bf00      	nop
 800ef14:	7ff80000 	.word	0x7ff80000

0800ef18 <nanf>:
 800ef18:	4800      	ldr	r0, [pc, #0]	@ (800ef1c <nanf+0x4>)
 800ef1a:	4770      	bx	lr
 800ef1c:	7fc00000 	.word	0x7fc00000

0800ef20 <__assert_func>:
 800ef20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ef22:	4614      	mov	r4, r2
 800ef24:	461a      	mov	r2, r3
 800ef26:	4b09      	ldr	r3, [pc, #36]	@ (800ef4c <__assert_func+0x2c>)
 800ef28:	4605      	mov	r5, r0
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	68d8      	ldr	r0, [r3, #12]
 800ef2e:	b954      	cbnz	r4, 800ef46 <__assert_func+0x26>
 800ef30:	4b07      	ldr	r3, [pc, #28]	@ (800ef50 <__assert_func+0x30>)
 800ef32:	461c      	mov	r4, r3
 800ef34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ef38:	9100      	str	r1, [sp, #0]
 800ef3a:	462b      	mov	r3, r5
 800ef3c:	4905      	ldr	r1, [pc, #20]	@ (800ef54 <__assert_func+0x34>)
 800ef3e:	f002 f953 	bl	80111e8 <fiprintf>
 800ef42:	f002 fa25 	bl	8011390 <abort>
 800ef46:	4b04      	ldr	r3, [pc, #16]	@ (800ef58 <__assert_func+0x38>)
 800ef48:	e7f4      	b.n	800ef34 <__assert_func+0x14>
 800ef4a:	bf00      	nop
 800ef4c:	20000284 	.word	0x20000284
 800ef50:	080121e5 	.word	0x080121e5
 800ef54:	080121b7 	.word	0x080121b7
 800ef58:	080121aa 	.word	0x080121aa

0800ef5c <div>:
 800ef5c:	b510      	push	{r4, lr}
 800ef5e:	fb91 f4f2 	sdiv	r4, r1, r2
 800ef62:	fb02 1114 	mls	r1, r2, r4, r1
 800ef66:	6004      	str	r4, [r0, #0]
 800ef68:	6041      	str	r1, [r0, #4]
 800ef6a:	bd10      	pop	{r4, pc}

0800ef6c <quorem>:
 800ef6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef70:	6903      	ldr	r3, [r0, #16]
 800ef72:	690c      	ldr	r4, [r1, #16]
 800ef74:	4607      	mov	r7, r0
 800ef76:	42a3      	cmp	r3, r4
 800ef78:	db7e      	blt.n	800f078 <quorem+0x10c>
 800ef7a:	3c01      	subs	r4, #1
 800ef7c:	00a3      	lsls	r3, r4, #2
 800ef7e:	f100 0514 	add.w	r5, r0, #20
 800ef82:	f101 0814 	add.w	r8, r1, #20
 800ef86:	9300      	str	r3, [sp, #0]
 800ef88:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ef8c:	9301      	str	r3, [sp, #4]
 800ef8e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ef92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ef96:	3301      	adds	r3, #1
 800ef98:	429a      	cmp	r2, r3
 800ef9a:	fbb2 f6f3 	udiv	r6, r2, r3
 800ef9e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800efa2:	d32e      	bcc.n	800f002 <quorem+0x96>
 800efa4:	f04f 0a00 	mov.w	sl, #0
 800efa8:	46c4      	mov	ip, r8
 800efaa:	46ae      	mov	lr, r5
 800efac:	46d3      	mov	fp, sl
 800efae:	f85c 3b04 	ldr.w	r3, [ip], #4
 800efb2:	b298      	uxth	r0, r3
 800efb4:	fb06 a000 	mla	r0, r6, r0, sl
 800efb8:	0c1b      	lsrs	r3, r3, #16
 800efba:	0c02      	lsrs	r2, r0, #16
 800efbc:	fb06 2303 	mla	r3, r6, r3, r2
 800efc0:	f8de 2000 	ldr.w	r2, [lr]
 800efc4:	b280      	uxth	r0, r0
 800efc6:	b292      	uxth	r2, r2
 800efc8:	1a12      	subs	r2, r2, r0
 800efca:	445a      	add	r2, fp
 800efcc:	f8de 0000 	ldr.w	r0, [lr]
 800efd0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800efd4:	b29b      	uxth	r3, r3
 800efd6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800efda:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800efde:	b292      	uxth	r2, r2
 800efe0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800efe4:	45e1      	cmp	r9, ip
 800efe6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800efea:	f84e 2b04 	str.w	r2, [lr], #4
 800efee:	d2de      	bcs.n	800efae <quorem+0x42>
 800eff0:	9b00      	ldr	r3, [sp, #0]
 800eff2:	58eb      	ldr	r3, [r5, r3]
 800eff4:	b92b      	cbnz	r3, 800f002 <quorem+0x96>
 800eff6:	9b01      	ldr	r3, [sp, #4]
 800eff8:	3b04      	subs	r3, #4
 800effa:	429d      	cmp	r5, r3
 800effc:	461a      	mov	r2, r3
 800effe:	d32f      	bcc.n	800f060 <quorem+0xf4>
 800f000:	613c      	str	r4, [r7, #16]
 800f002:	4638      	mov	r0, r7
 800f004:	f001 fc9e 	bl	8010944 <__mcmp>
 800f008:	2800      	cmp	r0, #0
 800f00a:	db25      	blt.n	800f058 <quorem+0xec>
 800f00c:	4629      	mov	r1, r5
 800f00e:	2000      	movs	r0, #0
 800f010:	f858 2b04 	ldr.w	r2, [r8], #4
 800f014:	f8d1 c000 	ldr.w	ip, [r1]
 800f018:	fa1f fe82 	uxth.w	lr, r2
 800f01c:	fa1f f38c 	uxth.w	r3, ip
 800f020:	eba3 030e 	sub.w	r3, r3, lr
 800f024:	4403      	add	r3, r0
 800f026:	0c12      	lsrs	r2, r2, #16
 800f028:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f02c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f030:	b29b      	uxth	r3, r3
 800f032:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f036:	45c1      	cmp	r9, r8
 800f038:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f03c:	f841 3b04 	str.w	r3, [r1], #4
 800f040:	d2e6      	bcs.n	800f010 <quorem+0xa4>
 800f042:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f046:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f04a:	b922      	cbnz	r2, 800f056 <quorem+0xea>
 800f04c:	3b04      	subs	r3, #4
 800f04e:	429d      	cmp	r5, r3
 800f050:	461a      	mov	r2, r3
 800f052:	d30b      	bcc.n	800f06c <quorem+0x100>
 800f054:	613c      	str	r4, [r7, #16]
 800f056:	3601      	adds	r6, #1
 800f058:	4630      	mov	r0, r6
 800f05a:	b003      	add	sp, #12
 800f05c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f060:	6812      	ldr	r2, [r2, #0]
 800f062:	3b04      	subs	r3, #4
 800f064:	2a00      	cmp	r2, #0
 800f066:	d1cb      	bne.n	800f000 <quorem+0x94>
 800f068:	3c01      	subs	r4, #1
 800f06a:	e7c6      	b.n	800effa <quorem+0x8e>
 800f06c:	6812      	ldr	r2, [r2, #0]
 800f06e:	3b04      	subs	r3, #4
 800f070:	2a00      	cmp	r2, #0
 800f072:	d1ef      	bne.n	800f054 <quorem+0xe8>
 800f074:	3c01      	subs	r4, #1
 800f076:	e7ea      	b.n	800f04e <quorem+0xe2>
 800f078:	2000      	movs	r0, #0
 800f07a:	e7ee      	b.n	800f05a <quorem+0xee>
 800f07c:	0000      	movs	r0, r0
	...

0800f080 <_dtoa_r>:
 800f080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f084:	4614      	mov	r4, r2
 800f086:	461d      	mov	r5, r3
 800f088:	69c7      	ldr	r7, [r0, #28]
 800f08a:	b097      	sub	sp, #92	@ 0x5c
 800f08c:	4683      	mov	fp, r0
 800f08e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800f092:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800f094:	b97f      	cbnz	r7, 800f0b6 <_dtoa_r+0x36>
 800f096:	2010      	movs	r0, #16
 800f098:	f7fd fb18 	bl	800c6cc <malloc>
 800f09c:	4602      	mov	r2, r0
 800f09e:	f8cb 001c 	str.w	r0, [fp, #28]
 800f0a2:	b920      	cbnz	r0, 800f0ae <_dtoa_r+0x2e>
 800f0a4:	21ef      	movs	r1, #239	@ 0xef
 800f0a6:	4ba8      	ldr	r3, [pc, #672]	@ (800f348 <_dtoa_r+0x2c8>)
 800f0a8:	48a8      	ldr	r0, [pc, #672]	@ (800f34c <_dtoa_r+0x2cc>)
 800f0aa:	f7ff ff39 	bl	800ef20 <__assert_func>
 800f0ae:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f0b2:	6007      	str	r7, [r0, #0]
 800f0b4:	60c7      	str	r7, [r0, #12]
 800f0b6:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f0ba:	6819      	ldr	r1, [r3, #0]
 800f0bc:	b159      	cbz	r1, 800f0d6 <_dtoa_r+0x56>
 800f0be:	685a      	ldr	r2, [r3, #4]
 800f0c0:	2301      	movs	r3, #1
 800f0c2:	4093      	lsls	r3, r2
 800f0c4:	604a      	str	r2, [r1, #4]
 800f0c6:	608b      	str	r3, [r1, #8]
 800f0c8:	4658      	mov	r0, fp
 800f0ca:	f001 f9b9 	bl	8010440 <_Bfree>
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f0d4:	601a      	str	r2, [r3, #0]
 800f0d6:	1e2b      	subs	r3, r5, #0
 800f0d8:	bfaf      	iteee	ge
 800f0da:	2300      	movge	r3, #0
 800f0dc:	2201      	movlt	r2, #1
 800f0de:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f0e2:	9303      	strlt	r3, [sp, #12]
 800f0e4:	bfa8      	it	ge
 800f0e6:	6033      	strge	r3, [r6, #0]
 800f0e8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f0ec:	4b98      	ldr	r3, [pc, #608]	@ (800f350 <_dtoa_r+0x2d0>)
 800f0ee:	bfb8      	it	lt
 800f0f0:	6032      	strlt	r2, [r6, #0]
 800f0f2:	ea33 0308 	bics.w	r3, r3, r8
 800f0f6:	d112      	bne.n	800f11e <_dtoa_r+0x9e>
 800f0f8:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f0fc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800f0fe:	6013      	str	r3, [r2, #0]
 800f100:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800f104:	4323      	orrs	r3, r4
 800f106:	f000 8550 	beq.w	800fbaa <_dtoa_r+0xb2a>
 800f10a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800f10c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800f354 <_dtoa_r+0x2d4>
 800f110:	2b00      	cmp	r3, #0
 800f112:	f000 8552 	beq.w	800fbba <_dtoa_r+0xb3a>
 800f116:	f10a 0303 	add.w	r3, sl, #3
 800f11a:	f000 bd4c 	b.w	800fbb6 <_dtoa_r+0xb36>
 800f11e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f122:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f126:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f12a:	2200      	movs	r2, #0
 800f12c:	2300      	movs	r3, #0
 800f12e:	f7f1 fcb5 	bl	8000a9c <__aeabi_dcmpeq>
 800f132:	4607      	mov	r7, r0
 800f134:	b158      	cbz	r0, 800f14e <_dtoa_r+0xce>
 800f136:	2301      	movs	r3, #1
 800f138:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800f13a:	6013      	str	r3, [r2, #0]
 800f13c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800f13e:	b113      	cbz	r3, 800f146 <_dtoa_r+0xc6>
 800f140:	4b85      	ldr	r3, [pc, #532]	@ (800f358 <_dtoa_r+0x2d8>)
 800f142:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800f144:	6013      	str	r3, [r2, #0]
 800f146:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800f35c <_dtoa_r+0x2dc>
 800f14a:	f000 bd36 	b.w	800fbba <_dtoa_r+0xb3a>
 800f14e:	ab14      	add	r3, sp, #80	@ 0x50
 800f150:	9301      	str	r3, [sp, #4]
 800f152:	ab15      	add	r3, sp, #84	@ 0x54
 800f154:	9300      	str	r3, [sp, #0]
 800f156:	4658      	mov	r0, fp
 800f158:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f15c:	f001 fd0a 	bl	8010b74 <__d2b>
 800f160:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800f164:	4681      	mov	r9, r0
 800f166:	2e00      	cmp	r6, #0
 800f168:	d077      	beq.n	800f25a <_dtoa_r+0x1da>
 800f16a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f16e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f170:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f174:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f178:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f17c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f180:	9712      	str	r7, [sp, #72]	@ 0x48
 800f182:	4619      	mov	r1, r3
 800f184:	2200      	movs	r2, #0
 800f186:	4b76      	ldr	r3, [pc, #472]	@ (800f360 <_dtoa_r+0x2e0>)
 800f188:	f7f1 f868 	bl	800025c <__aeabi_dsub>
 800f18c:	a368      	add	r3, pc, #416	@ (adr r3, 800f330 <_dtoa_r+0x2b0>)
 800f18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f192:	f7f1 fa1b 	bl	80005cc <__aeabi_dmul>
 800f196:	a368      	add	r3, pc, #416	@ (adr r3, 800f338 <_dtoa_r+0x2b8>)
 800f198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f19c:	f7f1 f860 	bl	8000260 <__adddf3>
 800f1a0:	4604      	mov	r4, r0
 800f1a2:	4630      	mov	r0, r6
 800f1a4:	460d      	mov	r5, r1
 800f1a6:	f7f1 f9a7 	bl	80004f8 <__aeabi_i2d>
 800f1aa:	a365      	add	r3, pc, #404	@ (adr r3, 800f340 <_dtoa_r+0x2c0>)
 800f1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1b0:	f7f1 fa0c 	bl	80005cc <__aeabi_dmul>
 800f1b4:	4602      	mov	r2, r0
 800f1b6:	460b      	mov	r3, r1
 800f1b8:	4620      	mov	r0, r4
 800f1ba:	4629      	mov	r1, r5
 800f1bc:	f7f1 f850 	bl	8000260 <__adddf3>
 800f1c0:	4604      	mov	r4, r0
 800f1c2:	460d      	mov	r5, r1
 800f1c4:	f7f1 fcb2 	bl	8000b2c <__aeabi_d2iz>
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	4607      	mov	r7, r0
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	4620      	mov	r0, r4
 800f1d0:	4629      	mov	r1, r5
 800f1d2:	f7f1 fc6d 	bl	8000ab0 <__aeabi_dcmplt>
 800f1d6:	b140      	cbz	r0, 800f1ea <_dtoa_r+0x16a>
 800f1d8:	4638      	mov	r0, r7
 800f1da:	f7f1 f98d 	bl	80004f8 <__aeabi_i2d>
 800f1de:	4622      	mov	r2, r4
 800f1e0:	462b      	mov	r3, r5
 800f1e2:	f7f1 fc5b 	bl	8000a9c <__aeabi_dcmpeq>
 800f1e6:	b900      	cbnz	r0, 800f1ea <_dtoa_r+0x16a>
 800f1e8:	3f01      	subs	r7, #1
 800f1ea:	2f16      	cmp	r7, #22
 800f1ec:	d853      	bhi.n	800f296 <_dtoa_r+0x216>
 800f1ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f1f2:	4b5c      	ldr	r3, [pc, #368]	@ (800f364 <_dtoa_r+0x2e4>)
 800f1f4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1fc:	f7f1 fc58 	bl	8000ab0 <__aeabi_dcmplt>
 800f200:	2800      	cmp	r0, #0
 800f202:	d04a      	beq.n	800f29a <_dtoa_r+0x21a>
 800f204:	2300      	movs	r3, #0
 800f206:	3f01      	subs	r7, #1
 800f208:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f20a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f20c:	1b9b      	subs	r3, r3, r6
 800f20e:	1e5a      	subs	r2, r3, #1
 800f210:	bf46      	itte	mi
 800f212:	f1c3 0801 	rsbmi	r8, r3, #1
 800f216:	2300      	movmi	r3, #0
 800f218:	f04f 0800 	movpl.w	r8, #0
 800f21c:	9209      	str	r2, [sp, #36]	@ 0x24
 800f21e:	bf48      	it	mi
 800f220:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800f222:	2f00      	cmp	r7, #0
 800f224:	db3b      	blt.n	800f29e <_dtoa_r+0x21e>
 800f226:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f228:	970e      	str	r7, [sp, #56]	@ 0x38
 800f22a:	443b      	add	r3, r7
 800f22c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f22e:	2300      	movs	r3, #0
 800f230:	930a      	str	r3, [sp, #40]	@ 0x28
 800f232:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f234:	2b09      	cmp	r3, #9
 800f236:	d866      	bhi.n	800f306 <_dtoa_r+0x286>
 800f238:	2b05      	cmp	r3, #5
 800f23a:	bfc4      	itt	gt
 800f23c:	3b04      	subgt	r3, #4
 800f23e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800f240:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f242:	bfc8      	it	gt
 800f244:	2400      	movgt	r4, #0
 800f246:	f1a3 0302 	sub.w	r3, r3, #2
 800f24a:	bfd8      	it	le
 800f24c:	2401      	movle	r4, #1
 800f24e:	2b03      	cmp	r3, #3
 800f250:	d864      	bhi.n	800f31c <_dtoa_r+0x29c>
 800f252:	e8df f003 	tbb	[pc, r3]
 800f256:	382b      	.short	0x382b
 800f258:	5636      	.short	0x5636
 800f25a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800f25e:	441e      	add	r6, r3
 800f260:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f264:	2b20      	cmp	r3, #32
 800f266:	bfc1      	itttt	gt
 800f268:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f26c:	fa08 f803 	lslgt.w	r8, r8, r3
 800f270:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f274:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f278:	bfd6      	itet	le
 800f27a:	f1c3 0320 	rsble	r3, r3, #32
 800f27e:	ea48 0003 	orrgt.w	r0, r8, r3
 800f282:	fa04 f003 	lslle.w	r0, r4, r3
 800f286:	f7f1 f927 	bl	80004d8 <__aeabi_ui2d>
 800f28a:	2201      	movs	r2, #1
 800f28c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f290:	3e01      	subs	r6, #1
 800f292:	9212      	str	r2, [sp, #72]	@ 0x48
 800f294:	e775      	b.n	800f182 <_dtoa_r+0x102>
 800f296:	2301      	movs	r3, #1
 800f298:	e7b6      	b.n	800f208 <_dtoa_r+0x188>
 800f29a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800f29c:	e7b5      	b.n	800f20a <_dtoa_r+0x18a>
 800f29e:	427b      	negs	r3, r7
 800f2a0:	930a      	str	r3, [sp, #40]	@ 0x28
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	eba8 0807 	sub.w	r8, r8, r7
 800f2a8:	930e      	str	r3, [sp, #56]	@ 0x38
 800f2aa:	e7c2      	b.n	800f232 <_dtoa_r+0x1b2>
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f2b0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	dc35      	bgt.n	800f322 <_dtoa_r+0x2a2>
 800f2b6:	2301      	movs	r3, #1
 800f2b8:	461a      	mov	r2, r3
 800f2ba:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800f2be:	9221      	str	r2, [sp, #132]	@ 0x84
 800f2c0:	e00b      	b.n	800f2da <_dtoa_r+0x25a>
 800f2c2:	2301      	movs	r3, #1
 800f2c4:	e7f3      	b.n	800f2ae <_dtoa_r+0x22e>
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f2ca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f2cc:	18fb      	adds	r3, r7, r3
 800f2ce:	9308      	str	r3, [sp, #32]
 800f2d0:	3301      	adds	r3, #1
 800f2d2:	2b01      	cmp	r3, #1
 800f2d4:	9307      	str	r3, [sp, #28]
 800f2d6:	bfb8      	it	lt
 800f2d8:	2301      	movlt	r3, #1
 800f2da:	2100      	movs	r1, #0
 800f2dc:	2204      	movs	r2, #4
 800f2de:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f2e2:	f102 0514 	add.w	r5, r2, #20
 800f2e6:	429d      	cmp	r5, r3
 800f2e8:	d91f      	bls.n	800f32a <_dtoa_r+0x2aa>
 800f2ea:	6041      	str	r1, [r0, #4]
 800f2ec:	4658      	mov	r0, fp
 800f2ee:	f001 f867 	bl	80103c0 <_Balloc>
 800f2f2:	4682      	mov	sl, r0
 800f2f4:	2800      	cmp	r0, #0
 800f2f6:	d139      	bne.n	800f36c <_dtoa_r+0x2ec>
 800f2f8:	4602      	mov	r2, r0
 800f2fa:	f240 11af 	movw	r1, #431	@ 0x1af
 800f2fe:	4b1a      	ldr	r3, [pc, #104]	@ (800f368 <_dtoa_r+0x2e8>)
 800f300:	e6d2      	b.n	800f0a8 <_dtoa_r+0x28>
 800f302:	2301      	movs	r3, #1
 800f304:	e7e0      	b.n	800f2c8 <_dtoa_r+0x248>
 800f306:	2401      	movs	r4, #1
 800f308:	2300      	movs	r3, #0
 800f30a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f30c:	9320      	str	r3, [sp, #128]	@ 0x80
 800f30e:	f04f 33ff 	mov.w	r3, #4294967295
 800f312:	2200      	movs	r2, #0
 800f314:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800f318:	2312      	movs	r3, #18
 800f31a:	e7d0      	b.n	800f2be <_dtoa_r+0x23e>
 800f31c:	2301      	movs	r3, #1
 800f31e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f320:	e7f5      	b.n	800f30e <_dtoa_r+0x28e>
 800f322:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f324:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800f328:	e7d7      	b.n	800f2da <_dtoa_r+0x25a>
 800f32a:	3101      	adds	r1, #1
 800f32c:	0052      	lsls	r2, r2, #1
 800f32e:	e7d8      	b.n	800f2e2 <_dtoa_r+0x262>
 800f330:	636f4361 	.word	0x636f4361
 800f334:	3fd287a7 	.word	0x3fd287a7
 800f338:	8b60c8b3 	.word	0x8b60c8b3
 800f33c:	3fc68a28 	.word	0x3fc68a28
 800f340:	509f79fb 	.word	0x509f79fb
 800f344:	3fd34413 	.word	0x3fd34413
 800f348:	08012083 	.word	0x08012083
 800f34c:	080121f3 	.word	0x080121f3
 800f350:	7ff00000 	.word	0x7ff00000
 800f354:	080121ef 	.word	0x080121ef
 800f358:	080124a3 	.word	0x080124a3
 800f35c:	080124a2 	.word	0x080124a2
 800f360:	3ff80000 	.word	0x3ff80000
 800f364:	08012350 	.word	0x08012350
 800f368:	0801224b 	.word	0x0801224b
 800f36c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f370:	6018      	str	r0, [r3, #0]
 800f372:	9b07      	ldr	r3, [sp, #28]
 800f374:	2b0e      	cmp	r3, #14
 800f376:	f200 80a4 	bhi.w	800f4c2 <_dtoa_r+0x442>
 800f37a:	2c00      	cmp	r4, #0
 800f37c:	f000 80a1 	beq.w	800f4c2 <_dtoa_r+0x442>
 800f380:	2f00      	cmp	r7, #0
 800f382:	dd33      	ble.n	800f3ec <_dtoa_r+0x36c>
 800f384:	4b86      	ldr	r3, [pc, #536]	@ (800f5a0 <_dtoa_r+0x520>)
 800f386:	f007 020f 	and.w	r2, r7, #15
 800f38a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f38e:	05f8      	lsls	r0, r7, #23
 800f390:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f394:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f398:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f39c:	d516      	bpl.n	800f3cc <_dtoa_r+0x34c>
 800f39e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f3a2:	4b80      	ldr	r3, [pc, #512]	@ (800f5a4 <_dtoa_r+0x524>)
 800f3a4:	2603      	movs	r6, #3
 800f3a6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f3aa:	f7f1 fa39 	bl	8000820 <__aeabi_ddiv>
 800f3ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3b2:	f004 040f 	and.w	r4, r4, #15
 800f3b6:	4d7b      	ldr	r5, [pc, #492]	@ (800f5a4 <_dtoa_r+0x524>)
 800f3b8:	b954      	cbnz	r4, 800f3d0 <_dtoa_r+0x350>
 800f3ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f3be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f3c2:	f7f1 fa2d 	bl	8000820 <__aeabi_ddiv>
 800f3c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3ca:	e028      	b.n	800f41e <_dtoa_r+0x39e>
 800f3cc:	2602      	movs	r6, #2
 800f3ce:	e7f2      	b.n	800f3b6 <_dtoa_r+0x336>
 800f3d0:	07e1      	lsls	r1, r4, #31
 800f3d2:	d508      	bpl.n	800f3e6 <_dtoa_r+0x366>
 800f3d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f3d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f3dc:	f7f1 f8f6 	bl	80005cc <__aeabi_dmul>
 800f3e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f3e4:	3601      	adds	r6, #1
 800f3e6:	1064      	asrs	r4, r4, #1
 800f3e8:	3508      	adds	r5, #8
 800f3ea:	e7e5      	b.n	800f3b8 <_dtoa_r+0x338>
 800f3ec:	f000 80d2 	beq.w	800f594 <_dtoa_r+0x514>
 800f3f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f3f4:	427c      	negs	r4, r7
 800f3f6:	4b6a      	ldr	r3, [pc, #424]	@ (800f5a0 <_dtoa_r+0x520>)
 800f3f8:	f004 020f 	and.w	r2, r4, #15
 800f3fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f404:	f7f1 f8e2 	bl	80005cc <__aeabi_dmul>
 800f408:	2602      	movs	r6, #2
 800f40a:	2300      	movs	r3, #0
 800f40c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f410:	4d64      	ldr	r5, [pc, #400]	@ (800f5a4 <_dtoa_r+0x524>)
 800f412:	1124      	asrs	r4, r4, #4
 800f414:	2c00      	cmp	r4, #0
 800f416:	f040 80b2 	bne.w	800f57e <_dtoa_r+0x4fe>
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d1d3      	bne.n	800f3c6 <_dtoa_r+0x346>
 800f41e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f422:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f424:	2b00      	cmp	r3, #0
 800f426:	f000 80b7 	beq.w	800f598 <_dtoa_r+0x518>
 800f42a:	2200      	movs	r2, #0
 800f42c:	4620      	mov	r0, r4
 800f42e:	4629      	mov	r1, r5
 800f430:	4b5d      	ldr	r3, [pc, #372]	@ (800f5a8 <_dtoa_r+0x528>)
 800f432:	f7f1 fb3d 	bl	8000ab0 <__aeabi_dcmplt>
 800f436:	2800      	cmp	r0, #0
 800f438:	f000 80ae 	beq.w	800f598 <_dtoa_r+0x518>
 800f43c:	9b07      	ldr	r3, [sp, #28]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	f000 80aa 	beq.w	800f598 <_dtoa_r+0x518>
 800f444:	9b08      	ldr	r3, [sp, #32]
 800f446:	2b00      	cmp	r3, #0
 800f448:	dd37      	ble.n	800f4ba <_dtoa_r+0x43a>
 800f44a:	1e7b      	subs	r3, r7, #1
 800f44c:	4620      	mov	r0, r4
 800f44e:	9304      	str	r3, [sp, #16]
 800f450:	2200      	movs	r2, #0
 800f452:	4629      	mov	r1, r5
 800f454:	4b55      	ldr	r3, [pc, #340]	@ (800f5ac <_dtoa_r+0x52c>)
 800f456:	f7f1 f8b9 	bl	80005cc <__aeabi_dmul>
 800f45a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f45e:	9c08      	ldr	r4, [sp, #32]
 800f460:	3601      	adds	r6, #1
 800f462:	4630      	mov	r0, r6
 800f464:	f7f1 f848 	bl	80004f8 <__aeabi_i2d>
 800f468:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f46c:	f7f1 f8ae 	bl	80005cc <__aeabi_dmul>
 800f470:	2200      	movs	r2, #0
 800f472:	4b4f      	ldr	r3, [pc, #316]	@ (800f5b0 <_dtoa_r+0x530>)
 800f474:	f7f0 fef4 	bl	8000260 <__adddf3>
 800f478:	4605      	mov	r5, r0
 800f47a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f47e:	2c00      	cmp	r4, #0
 800f480:	f040 809a 	bne.w	800f5b8 <_dtoa_r+0x538>
 800f484:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f488:	2200      	movs	r2, #0
 800f48a:	4b4a      	ldr	r3, [pc, #296]	@ (800f5b4 <_dtoa_r+0x534>)
 800f48c:	f7f0 fee6 	bl	800025c <__aeabi_dsub>
 800f490:	4602      	mov	r2, r0
 800f492:	460b      	mov	r3, r1
 800f494:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f498:	462a      	mov	r2, r5
 800f49a:	4633      	mov	r3, r6
 800f49c:	f7f1 fb26 	bl	8000aec <__aeabi_dcmpgt>
 800f4a0:	2800      	cmp	r0, #0
 800f4a2:	f040 828e 	bne.w	800f9c2 <_dtoa_r+0x942>
 800f4a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f4aa:	462a      	mov	r2, r5
 800f4ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f4b0:	f7f1 fafe 	bl	8000ab0 <__aeabi_dcmplt>
 800f4b4:	2800      	cmp	r0, #0
 800f4b6:	f040 8127 	bne.w	800f708 <_dtoa_r+0x688>
 800f4ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f4be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f4c2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	f2c0 8163 	blt.w	800f790 <_dtoa_r+0x710>
 800f4ca:	2f0e      	cmp	r7, #14
 800f4cc:	f300 8160 	bgt.w	800f790 <_dtoa_r+0x710>
 800f4d0:	4b33      	ldr	r3, [pc, #204]	@ (800f5a0 <_dtoa_r+0x520>)
 800f4d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f4d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800f4da:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f4de:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	da03      	bge.n	800f4ec <_dtoa_r+0x46c>
 800f4e4:	9b07      	ldr	r3, [sp, #28]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	f340 8100 	ble.w	800f6ec <_dtoa_r+0x66c>
 800f4ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f4f0:	4656      	mov	r6, sl
 800f4f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f4f6:	4620      	mov	r0, r4
 800f4f8:	4629      	mov	r1, r5
 800f4fa:	f7f1 f991 	bl	8000820 <__aeabi_ddiv>
 800f4fe:	f7f1 fb15 	bl	8000b2c <__aeabi_d2iz>
 800f502:	4680      	mov	r8, r0
 800f504:	f7f0 fff8 	bl	80004f8 <__aeabi_i2d>
 800f508:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f50c:	f7f1 f85e 	bl	80005cc <__aeabi_dmul>
 800f510:	4602      	mov	r2, r0
 800f512:	460b      	mov	r3, r1
 800f514:	4620      	mov	r0, r4
 800f516:	4629      	mov	r1, r5
 800f518:	f7f0 fea0 	bl	800025c <__aeabi_dsub>
 800f51c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f520:	9d07      	ldr	r5, [sp, #28]
 800f522:	f806 4b01 	strb.w	r4, [r6], #1
 800f526:	eba6 040a 	sub.w	r4, r6, sl
 800f52a:	42a5      	cmp	r5, r4
 800f52c:	4602      	mov	r2, r0
 800f52e:	460b      	mov	r3, r1
 800f530:	f040 8116 	bne.w	800f760 <_dtoa_r+0x6e0>
 800f534:	f7f0 fe94 	bl	8000260 <__adddf3>
 800f538:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f53c:	4604      	mov	r4, r0
 800f53e:	460d      	mov	r5, r1
 800f540:	f7f1 fad4 	bl	8000aec <__aeabi_dcmpgt>
 800f544:	2800      	cmp	r0, #0
 800f546:	f040 80f8 	bne.w	800f73a <_dtoa_r+0x6ba>
 800f54a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f54e:	4620      	mov	r0, r4
 800f550:	4629      	mov	r1, r5
 800f552:	f7f1 faa3 	bl	8000a9c <__aeabi_dcmpeq>
 800f556:	b118      	cbz	r0, 800f560 <_dtoa_r+0x4e0>
 800f558:	f018 0f01 	tst.w	r8, #1
 800f55c:	f040 80ed 	bne.w	800f73a <_dtoa_r+0x6ba>
 800f560:	4649      	mov	r1, r9
 800f562:	4658      	mov	r0, fp
 800f564:	f000 ff6c 	bl	8010440 <_Bfree>
 800f568:	2300      	movs	r3, #0
 800f56a:	7033      	strb	r3, [r6, #0]
 800f56c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800f56e:	3701      	adds	r7, #1
 800f570:	601f      	str	r7, [r3, #0]
 800f572:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800f574:	2b00      	cmp	r3, #0
 800f576:	f000 8320 	beq.w	800fbba <_dtoa_r+0xb3a>
 800f57a:	601e      	str	r6, [r3, #0]
 800f57c:	e31d      	b.n	800fbba <_dtoa_r+0xb3a>
 800f57e:	07e2      	lsls	r2, r4, #31
 800f580:	d505      	bpl.n	800f58e <_dtoa_r+0x50e>
 800f582:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f586:	f7f1 f821 	bl	80005cc <__aeabi_dmul>
 800f58a:	2301      	movs	r3, #1
 800f58c:	3601      	adds	r6, #1
 800f58e:	1064      	asrs	r4, r4, #1
 800f590:	3508      	adds	r5, #8
 800f592:	e73f      	b.n	800f414 <_dtoa_r+0x394>
 800f594:	2602      	movs	r6, #2
 800f596:	e742      	b.n	800f41e <_dtoa_r+0x39e>
 800f598:	9c07      	ldr	r4, [sp, #28]
 800f59a:	9704      	str	r7, [sp, #16]
 800f59c:	e761      	b.n	800f462 <_dtoa_r+0x3e2>
 800f59e:	bf00      	nop
 800f5a0:	08012350 	.word	0x08012350
 800f5a4:	08012328 	.word	0x08012328
 800f5a8:	3ff00000 	.word	0x3ff00000
 800f5ac:	40240000 	.word	0x40240000
 800f5b0:	401c0000 	.word	0x401c0000
 800f5b4:	40140000 	.word	0x40140000
 800f5b8:	4b70      	ldr	r3, [pc, #448]	@ (800f77c <_dtoa_r+0x6fc>)
 800f5ba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f5bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f5c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f5c4:	4454      	add	r4, sl
 800f5c6:	2900      	cmp	r1, #0
 800f5c8:	d045      	beq.n	800f656 <_dtoa_r+0x5d6>
 800f5ca:	2000      	movs	r0, #0
 800f5cc:	496c      	ldr	r1, [pc, #432]	@ (800f780 <_dtoa_r+0x700>)
 800f5ce:	f7f1 f927 	bl	8000820 <__aeabi_ddiv>
 800f5d2:	4633      	mov	r3, r6
 800f5d4:	462a      	mov	r2, r5
 800f5d6:	f7f0 fe41 	bl	800025c <__aeabi_dsub>
 800f5da:	4656      	mov	r6, sl
 800f5dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f5e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f5e4:	f7f1 faa2 	bl	8000b2c <__aeabi_d2iz>
 800f5e8:	4605      	mov	r5, r0
 800f5ea:	f7f0 ff85 	bl	80004f8 <__aeabi_i2d>
 800f5ee:	4602      	mov	r2, r0
 800f5f0:	460b      	mov	r3, r1
 800f5f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f5f6:	f7f0 fe31 	bl	800025c <__aeabi_dsub>
 800f5fa:	4602      	mov	r2, r0
 800f5fc:	460b      	mov	r3, r1
 800f5fe:	3530      	adds	r5, #48	@ 0x30
 800f600:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f604:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f608:	f806 5b01 	strb.w	r5, [r6], #1
 800f60c:	f7f1 fa50 	bl	8000ab0 <__aeabi_dcmplt>
 800f610:	2800      	cmp	r0, #0
 800f612:	d163      	bne.n	800f6dc <_dtoa_r+0x65c>
 800f614:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f618:	2000      	movs	r0, #0
 800f61a:	495a      	ldr	r1, [pc, #360]	@ (800f784 <_dtoa_r+0x704>)
 800f61c:	f7f0 fe1e 	bl	800025c <__aeabi_dsub>
 800f620:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f624:	f7f1 fa44 	bl	8000ab0 <__aeabi_dcmplt>
 800f628:	2800      	cmp	r0, #0
 800f62a:	f040 8087 	bne.w	800f73c <_dtoa_r+0x6bc>
 800f62e:	42a6      	cmp	r6, r4
 800f630:	f43f af43 	beq.w	800f4ba <_dtoa_r+0x43a>
 800f634:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f638:	2200      	movs	r2, #0
 800f63a:	4b53      	ldr	r3, [pc, #332]	@ (800f788 <_dtoa_r+0x708>)
 800f63c:	f7f0 ffc6 	bl	80005cc <__aeabi_dmul>
 800f640:	2200      	movs	r2, #0
 800f642:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f646:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f64a:	4b4f      	ldr	r3, [pc, #316]	@ (800f788 <_dtoa_r+0x708>)
 800f64c:	f7f0 ffbe 	bl	80005cc <__aeabi_dmul>
 800f650:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f654:	e7c4      	b.n	800f5e0 <_dtoa_r+0x560>
 800f656:	4631      	mov	r1, r6
 800f658:	4628      	mov	r0, r5
 800f65a:	f7f0 ffb7 	bl	80005cc <__aeabi_dmul>
 800f65e:	4656      	mov	r6, sl
 800f660:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f664:	9413      	str	r4, [sp, #76]	@ 0x4c
 800f666:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f66a:	f7f1 fa5f 	bl	8000b2c <__aeabi_d2iz>
 800f66e:	4605      	mov	r5, r0
 800f670:	f7f0 ff42 	bl	80004f8 <__aeabi_i2d>
 800f674:	4602      	mov	r2, r0
 800f676:	460b      	mov	r3, r1
 800f678:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f67c:	f7f0 fdee 	bl	800025c <__aeabi_dsub>
 800f680:	4602      	mov	r2, r0
 800f682:	460b      	mov	r3, r1
 800f684:	3530      	adds	r5, #48	@ 0x30
 800f686:	f806 5b01 	strb.w	r5, [r6], #1
 800f68a:	42a6      	cmp	r6, r4
 800f68c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f690:	f04f 0200 	mov.w	r2, #0
 800f694:	d124      	bne.n	800f6e0 <_dtoa_r+0x660>
 800f696:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f69a:	4b39      	ldr	r3, [pc, #228]	@ (800f780 <_dtoa_r+0x700>)
 800f69c:	f7f0 fde0 	bl	8000260 <__adddf3>
 800f6a0:	4602      	mov	r2, r0
 800f6a2:	460b      	mov	r3, r1
 800f6a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6a8:	f7f1 fa20 	bl	8000aec <__aeabi_dcmpgt>
 800f6ac:	2800      	cmp	r0, #0
 800f6ae:	d145      	bne.n	800f73c <_dtoa_r+0x6bc>
 800f6b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f6b4:	2000      	movs	r0, #0
 800f6b6:	4932      	ldr	r1, [pc, #200]	@ (800f780 <_dtoa_r+0x700>)
 800f6b8:	f7f0 fdd0 	bl	800025c <__aeabi_dsub>
 800f6bc:	4602      	mov	r2, r0
 800f6be:	460b      	mov	r3, r1
 800f6c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6c4:	f7f1 f9f4 	bl	8000ab0 <__aeabi_dcmplt>
 800f6c8:	2800      	cmp	r0, #0
 800f6ca:	f43f aef6 	beq.w	800f4ba <_dtoa_r+0x43a>
 800f6ce:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800f6d0:	1e73      	subs	r3, r6, #1
 800f6d2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f6d4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f6d8:	2b30      	cmp	r3, #48	@ 0x30
 800f6da:	d0f8      	beq.n	800f6ce <_dtoa_r+0x64e>
 800f6dc:	9f04      	ldr	r7, [sp, #16]
 800f6de:	e73f      	b.n	800f560 <_dtoa_r+0x4e0>
 800f6e0:	4b29      	ldr	r3, [pc, #164]	@ (800f788 <_dtoa_r+0x708>)
 800f6e2:	f7f0 ff73 	bl	80005cc <__aeabi_dmul>
 800f6e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f6ea:	e7bc      	b.n	800f666 <_dtoa_r+0x5e6>
 800f6ec:	d10c      	bne.n	800f708 <_dtoa_r+0x688>
 800f6ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	4b25      	ldr	r3, [pc, #148]	@ (800f78c <_dtoa_r+0x70c>)
 800f6f6:	f7f0 ff69 	bl	80005cc <__aeabi_dmul>
 800f6fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f6fe:	f7f1 f9eb 	bl	8000ad8 <__aeabi_dcmpge>
 800f702:	2800      	cmp	r0, #0
 800f704:	f000 815b 	beq.w	800f9be <_dtoa_r+0x93e>
 800f708:	2400      	movs	r4, #0
 800f70a:	4625      	mov	r5, r4
 800f70c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f70e:	4656      	mov	r6, sl
 800f710:	43db      	mvns	r3, r3
 800f712:	9304      	str	r3, [sp, #16]
 800f714:	2700      	movs	r7, #0
 800f716:	4621      	mov	r1, r4
 800f718:	4658      	mov	r0, fp
 800f71a:	f000 fe91 	bl	8010440 <_Bfree>
 800f71e:	2d00      	cmp	r5, #0
 800f720:	d0dc      	beq.n	800f6dc <_dtoa_r+0x65c>
 800f722:	b12f      	cbz	r7, 800f730 <_dtoa_r+0x6b0>
 800f724:	42af      	cmp	r7, r5
 800f726:	d003      	beq.n	800f730 <_dtoa_r+0x6b0>
 800f728:	4639      	mov	r1, r7
 800f72a:	4658      	mov	r0, fp
 800f72c:	f000 fe88 	bl	8010440 <_Bfree>
 800f730:	4629      	mov	r1, r5
 800f732:	4658      	mov	r0, fp
 800f734:	f000 fe84 	bl	8010440 <_Bfree>
 800f738:	e7d0      	b.n	800f6dc <_dtoa_r+0x65c>
 800f73a:	9704      	str	r7, [sp, #16]
 800f73c:	4633      	mov	r3, r6
 800f73e:	461e      	mov	r6, r3
 800f740:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f744:	2a39      	cmp	r2, #57	@ 0x39
 800f746:	d107      	bne.n	800f758 <_dtoa_r+0x6d8>
 800f748:	459a      	cmp	sl, r3
 800f74a:	d1f8      	bne.n	800f73e <_dtoa_r+0x6be>
 800f74c:	9a04      	ldr	r2, [sp, #16]
 800f74e:	3201      	adds	r2, #1
 800f750:	9204      	str	r2, [sp, #16]
 800f752:	2230      	movs	r2, #48	@ 0x30
 800f754:	f88a 2000 	strb.w	r2, [sl]
 800f758:	781a      	ldrb	r2, [r3, #0]
 800f75a:	3201      	adds	r2, #1
 800f75c:	701a      	strb	r2, [r3, #0]
 800f75e:	e7bd      	b.n	800f6dc <_dtoa_r+0x65c>
 800f760:	2200      	movs	r2, #0
 800f762:	4b09      	ldr	r3, [pc, #36]	@ (800f788 <_dtoa_r+0x708>)
 800f764:	f7f0 ff32 	bl	80005cc <__aeabi_dmul>
 800f768:	2200      	movs	r2, #0
 800f76a:	2300      	movs	r3, #0
 800f76c:	4604      	mov	r4, r0
 800f76e:	460d      	mov	r5, r1
 800f770:	f7f1 f994 	bl	8000a9c <__aeabi_dcmpeq>
 800f774:	2800      	cmp	r0, #0
 800f776:	f43f aebc 	beq.w	800f4f2 <_dtoa_r+0x472>
 800f77a:	e6f1      	b.n	800f560 <_dtoa_r+0x4e0>
 800f77c:	08012350 	.word	0x08012350
 800f780:	3fe00000 	.word	0x3fe00000
 800f784:	3ff00000 	.word	0x3ff00000
 800f788:	40240000 	.word	0x40240000
 800f78c:	40140000 	.word	0x40140000
 800f790:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f792:	2a00      	cmp	r2, #0
 800f794:	f000 80db 	beq.w	800f94e <_dtoa_r+0x8ce>
 800f798:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f79a:	2a01      	cmp	r2, #1
 800f79c:	f300 80bf 	bgt.w	800f91e <_dtoa_r+0x89e>
 800f7a0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f7a2:	2a00      	cmp	r2, #0
 800f7a4:	f000 80b7 	beq.w	800f916 <_dtoa_r+0x896>
 800f7a8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f7ac:	4646      	mov	r6, r8
 800f7ae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f7b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f7b2:	2101      	movs	r1, #1
 800f7b4:	441a      	add	r2, r3
 800f7b6:	4658      	mov	r0, fp
 800f7b8:	4498      	add	r8, r3
 800f7ba:	9209      	str	r2, [sp, #36]	@ 0x24
 800f7bc:	f000 ff3e 	bl	801063c <__i2b>
 800f7c0:	4605      	mov	r5, r0
 800f7c2:	b15e      	cbz	r6, 800f7dc <_dtoa_r+0x75c>
 800f7c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	dd08      	ble.n	800f7dc <_dtoa_r+0x75c>
 800f7ca:	42b3      	cmp	r3, r6
 800f7cc:	bfa8      	it	ge
 800f7ce:	4633      	movge	r3, r6
 800f7d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f7d2:	eba8 0803 	sub.w	r8, r8, r3
 800f7d6:	1af6      	subs	r6, r6, r3
 800f7d8:	1ad3      	subs	r3, r2, r3
 800f7da:	9309      	str	r3, [sp, #36]	@ 0x24
 800f7dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f7de:	b1f3      	cbz	r3, 800f81e <_dtoa_r+0x79e>
 800f7e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	f000 80b7 	beq.w	800f956 <_dtoa_r+0x8d6>
 800f7e8:	b18c      	cbz	r4, 800f80e <_dtoa_r+0x78e>
 800f7ea:	4629      	mov	r1, r5
 800f7ec:	4622      	mov	r2, r4
 800f7ee:	4658      	mov	r0, fp
 800f7f0:	f000 ffe2 	bl	80107b8 <__pow5mult>
 800f7f4:	464a      	mov	r2, r9
 800f7f6:	4601      	mov	r1, r0
 800f7f8:	4605      	mov	r5, r0
 800f7fa:	4658      	mov	r0, fp
 800f7fc:	f000 ff34 	bl	8010668 <__multiply>
 800f800:	4649      	mov	r1, r9
 800f802:	9004      	str	r0, [sp, #16]
 800f804:	4658      	mov	r0, fp
 800f806:	f000 fe1b 	bl	8010440 <_Bfree>
 800f80a:	9b04      	ldr	r3, [sp, #16]
 800f80c:	4699      	mov	r9, r3
 800f80e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f810:	1b1a      	subs	r2, r3, r4
 800f812:	d004      	beq.n	800f81e <_dtoa_r+0x79e>
 800f814:	4649      	mov	r1, r9
 800f816:	4658      	mov	r0, fp
 800f818:	f000 ffce 	bl	80107b8 <__pow5mult>
 800f81c:	4681      	mov	r9, r0
 800f81e:	2101      	movs	r1, #1
 800f820:	4658      	mov	r0, fp
 800f822:	f000 ff0b 	bl	801063c <__i2b>
 800f826:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f828:	4604      	mov	r4, r0
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	f000 81c9 	beq.w	800fbc2 <_dtoa_r+0xb42>
 800f830:	461a      	mov	r2, r3
 800f832:	4601      	mov	r1, r0
 800f834:	4658      	mov	r0, fp
 800f836:	f000 ffbf 	bl	80107b8 <__pow5mult>
 800f83a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f83c:	4604      	mov	r4, r0
 800f83e:	2b01      	cmp	r3, #1
 800f840:	f300 808f 	bgt.w	800f962 <_dtoa_r+0x8e2>
 800f844:	9b02      	ldr	r3, [sp, #8]
 800f846:	2b00      	cmp	r3, #0
 800f848:	f040 8087 	bne.w	800f95a <_dtoa_r+0x8da>
 800f84c:	9b03      	ldr	r3, [sp, #12]
 800f84e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f852:	2b00      	cmp	r3, #0
 800f854:	f040 8083 	bne.w	800f95e <_dtoa_r+0x8de>
 800f858:	9b03      	ldr	r3, [sp, #12]
 800f85a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f85e:	0d1b      	lsrs	r3, r3, #20
 800f860:	051b      	lsls	r3, r3, #20
 800f862:	b12b      	cbz	r3, 800f870 <_dtoa_r+0x7f0>
 800f864:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f866:	f108 0801 	add.w	r8, r8, #1
 800f86a:	3301      	adds	r3, #1
 800f86c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f86e:	2301      	movs	r3, #1
 800f870:	930a      	str	r3, [sp, #40]	@ 0x28
 800f872:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f874:	2b00      	cmp	r3, #0
 800f876:	f000 81aa 	beq.w	800fbce <_dtoa_r+0xb4e>
 800f87a:	6923      	ldr	r3, [r4, #16]
 800f87c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f880:	6918      	ldr	r0, [r3, #16]
 800f882:	f000 fe8f 	bl	80105a4 <__hi0bits>
 800f886:	f1c0 0020 	rsb	r0, r0, #32
 800f88a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f88c:	4418      	add	r0, r3
 800f88e:	f010 001f 	ands.w	r0, r0, #31
 800f892:	d071      	beq.n	800f978 <_dtoa_r+0x8f8>
 800f894:	f1c0 0320 	rsb	r3, r0, #32
 800f898:	2b04      	cmp	r3, #4
 800f89a:	dd65      	ble.n	800f968 <_dtoa_r+0x8e8>
 800f89c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f89e:	f1c0 001c 	rsb	r0, r0, #28
 800f8a2:	4403      	add	r3, r0
 800f8a4:	4480      	add	r8, r0
 800f8a6:	4406      	add	r6, r0
 800f8a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800f8aa:	f1b8 0f00 	cmp.w	r8, #0
 800f8ae:	dd05      	ble.n	800f8bc <_dtoa_r+0x83c>
 800f8b0:	4649      	mov	r1, r9
 800f8b2:	4642      	mov	r2, r8
 800f8b4:	4658      	mov	r0, fp
 800f8b6:	f000 ffd9 	bl	801086c <__lshift>
 800f8ba:	4681      	mov	r9, r0
 800f8bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	dd05      	ble.n	800f8ce <_dtoa_r+0x84e>
 800f8c2:	4621      	mov	r1, r4
 800f8c4:	461a      	mov	r2, r3
 800f8c6:	4658      	mov	r0, fp
 800f8c8:	f000 ffd0 	bl	801086c <__lshift>
 800f8cc:	4604      	mov	r4, r0
 800f8ce:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d053      	beq.n	800f97c <_dtoa_r+0x8fc>
 800f8d4:	4621      	mov	r1, r4
 800f8d6:	4648      	mov	r0, r9
 800f8d8:	f001 f834 	bl	8010944 <__mcmp>
 800f8dc:	2800      	cmp	r0, #0
 800f8de:	da4d      	bge.n	800f97c <_dtoa_r+0x8fc>
 800f8e0:	1e7b      	subs	r3, r7, #1
 800f8e2:	4649      	mov	r1, r9
 800f8e4:	9304      	str	r3, [sp, #16]
 800f8e6:	220a      	movs	r2, #10
 800f8e8:	2300      	movs	r3, #0
 800f8ea:	4658      	mov	r0, fp
 800f8ec:	f000 fdca 	bl	8010484 <__multadd>
 800f8f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f8f2:	4681      	mov	r9, r0
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	f000 816c 	beq.w	800fbd2 <_dtoa_r+0xb52>
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	4629      	mov	r1, r5
 800f8fe:	220a      	movs	r2, #10
 800f900:	4658      	mov	r0, fp
 800f902:	f000 fdbf 	bl	8010484 <__multadd>
 800f906:	9b08      	ldr	r3, [sp, #32]
 800f908:	4605      	mov	r5, r0
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	dc61      	bgt.n	800f9d2 <_dtoa_r+0x952>
 800f90e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f910:	2b02      	cmp	r3, #2
 800f912:	dc3b      	bgt.n	800f98c <_dtoa_r+0x90c>
 800f914:	e05d      	b.n	800f9d2 <_dtoa_r+0x952>
 800f916:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f918:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f91c:	e746      	b.n	800f7ac <_dtoa_r+0x72c>
 800f91e:	9b07      	ldr	r3, [sp, #28]
 800f920:	1e5c      	subs	r4, r3, #1
 800f922:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f924:	42a3      	cmp	r3, r4
 800f926:	bfbf      	itttt	lt
 800f928:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f92a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800f92c:	1ae3      	sublt	r3, r4, r3
 800f92e:	18d2      	addlt	r2, r2, r3
 800f930:	bfa8      	it	ge
 800f932:	1b1c      	subge	r4, r3, r4
 800f934:	9b07      	ldr	r3, [sp, #28]
 800f936:	bfbe      	ittt	lt
 800f938:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f93a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800f93c:	2400      	movlt	r4, #0
 800f93e:	2b00      	cmp	r3, #0
 800f940:	bfb5      	itete	lt
 800f942:	eba8 0603 	sublt.w	r6, r8, r3
 800f946:	4646      	movge	r6, r8
 800f948:	2300      	movlt	r3, #0
 800f94a:	9b07      	ldrge	r3, [sp, #28]
 800f94c:	e730      	b.n	800f7b0 <_dtoa_r+0x730>
 800f94e:	4646      	mov	r6, r8
 800f950:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f952:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f954:	e735      	b.n	800f7c2 <_dtoa_r+0x742>
 800f956:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f958:	e75c      	b.n	800f814 <_dtoa_r+0x794>
 800f95a:	2300      	movs	r3, #0
 800f95c:	e788      	b.n	800f870 <_dtoa_r+0x7f0>
 800f95e:	9b02      	ldr	r3, [sp, #8]
 800f960:	e786      	b.n	800f870 <_dtoa_r+0x7f0>
 800f962:	2300      	movs	r3, #0
 800f964:	930a      	str	r3, [sp, #40]	@ 0x28
 800f966:	e788      	b.n	800f87a <_dtoa_r+0x7fa>
 800f968:	d09f      	beq.n	800f8aa <_dtoa_r+0x82a>
 800f96a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f96c:	331c      	adds	r3, #28
 800f96e:	441a      	add	r2, r3
 800f970:	4498      	add	r8, r3
 800f972:	441e      	add	r6, r3
 800f974:	9209      	str	r2, [sp, #36]	@ 0x24
 800f976:	e798      	b.n	800f8aa <_dtoa_r+0x82a>
 800f978:	4603      	mov	r3, r0
 800f97a:	e7f6      	b.n	800f96a <_dtoa_r+0x8ea>
 800f97c:	9b07      	ldr	r3, [sp, #28]
 800f97e:	9704      	str	r7, [sp, #16]
 800f980:	2b00      	cmp	r3, #0
 800f982:	dc20      	bgt.n	800f9c6 <_dtoa_r+0x946>
 800f984:	9308      	str	r3, [sp, #32]
 800f986:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f988:	2b02      	cmp	r3, #2
 800f98a:	dd1e      	ble.n	800f9ca <_dtoa_r+0x94a>
 800f98c:	9b08      	ldr	r3, [sp, #32]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	f47f aebc 	bne.w	800f70c <_dtoa_r+0x68c>
 800f994:	4621      	mov	r1, r4
 800f996:	2205      	movs	r2, #5
 800f998:	4658      	mov	r0, fp
 800f99a:	f000 fd73 	bl	8010484 <__multadd>
 800f99e:	4601      	mov	r1, r0
 800f9a0:	4604      	mov	r4, r0
 800f9a2:	4648      	mov	r0, r9
 800f9a4:	f000 ffce 	bl	8010944 <__mcmp>
 800f9a8:	2800      	cmp	r0, #0
 800f9aa:	f77f aeaf 	ble.w	800f70c <_dtoa_r+0x68c>
 800f9ae:	2331      	movs	r3, #49	@ 0x31
 800f9b0:	4656      	mov	r6, sl
 800f9b2:	f806 3b01 	strb.w	r3, [r6], #1
 800f9b6:	9b04      	ldr	r3, [sp, #16]
 800f9b8:	3301      	adds	r3, #1
 800f9ba:	9304      	str	r3, [sp, #16]
 800f9bc:	e6aa      	b.n	800f714 <_dtoa_r+0x694>
 800f9be:	9c07      	ldr	r4, [sp, #28]
 800f9c0:	9704      	str	r7, [sp, #16]
 800f9c2:	4625      	mov	r5, r4
 800f9c4:	e7f3      	b.n	800f9ae <_dtoa_r+0x92e>
 800f9c6:	9b07      	ldr	r3, [sp, #28]
 800f9c8:	9308      	str	r3, [sp, #32]
 800f9ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	f000 8104 	beq.w	800fbda <_dtoa_r+0xb5a>
 800f9d2:	2e00      	cmp	r6, #0
 800f9d4:	dd05      	ble.n	800f9e2 <_dtoa_r+0x962>
 800f9d6:	4629      	mov	r1, r5
 800f9d8:	4632      	mov	r2, r6
 800f9da:	4658      	mov	r0, fp
 800f9dc:	f000 ff46 	bl	801086c <__lshift>
 800f9e0:	4605      	mov	r5, r0
 800f9e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d05a      	beq.n	800fa9e <_dtoa_r+0xa1e>
 800f9e8:	4658      	mov	r0, fp
 800f9ea:	6869      	ldr	r1, [r5, #4]
 800f9ec:	f000 fce8 	bl	80103c0 <_Balloc>
 800f9f0:	4606      	mov	r6, r0
 800f9f2:	b928      	cbnz	r0, 800fa00 <_dtoa_r+0x980>
 800f9f4:	4602      	mov	r2, r0
 800f9f6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f9fa:	4b83      	ldr	r3, [pc, #524]	@ (800fc08 <_dtoa_r+0xb88>)
 800f9fc:	f7ff bb54 	b.w	800f0a8 <_dtoa_r+0x28>
 800fa00:	692a      	ldr	r2, [r5, #16]
 800fa02:	f105 010c 	add.w	r1, r5, #12
 800fa06:	3202      	adds	r2, #2
 800fa08:	0092      	lsls	r2, r2, #2
 800fa0a:	300c      	adds	r0, #12
 800fa0c:	f7ff fa6f 	bl	800eeee <memcpy>
 800fa10:	2201      	movs	r2, #1
 800fa12:	4631      	mov	r1, r6
 800fa14:	4658      	mov	r0, fp
 800fa16:	f000 ff29 	bl	801086c <__lshift>
 800fa1a:	462f      	mov	r7, r5
 800fa1c:	4605      	mov	r5, r0
 800fa1e:	f10a 0301 	add.w	r3, sl, #1
 800fa22:	9307      	str	r3, [sp, #28]
 800fa24:	9b08      	ldr	r3, [sp, #32]
 800fa26:	4453      	add	r3, sl
 800fa28:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fa2a:	9b02      	ldr	r3, [sp, #8]
 800fa2c:	f003 0301 	and.w	r3, r3, #1
 800fa30:	930a      	str	r3, [sp, #40]	@ 0x28
 800fa32:	9b07      	ldr	r3, [sp, #28]
 800fa34:	4621      	mov	r1, r4
 800fa36:	3b01      	subs	r3, #1
 800fa38:	4648      	mov	r0, r9
 800fa3a:	9302      	str	r3, [sp, #8]
 800fa3c:	f7ff fa96 	bl	800ef6c <quorem>
 800fa40:	4639      	mov	r1, r7
 800fa42:	9008      	str	r0, [sp, #32]
 800fa44:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fa48:	4648      	mov	r0, r9
 800fa4a:	f000 ff7b 	bl	8010944 <__mcmp>
 800fa4e:	462a      	mov	r2, r5
 800fa50:	9009      	str	r0, [sp, #36]	@ 0x24
 800fa52:	4621      	mov	r1, r4
 800fa54:	4658      	mov	r0, fp
 800fa56:	f000 ff91 	bl	801097c <__mdiff>
 800fa5a:	68c2      	ldr	r2, [r0, #12]
 800fa5c:	4606      	mov	r6, r0
 800fa5e:	bb02      	cbnz	r2, 800faa2 <_dtoa_r+0xa22>
 800fa60:	4601      	mov	r1, r0
 800fa62:	4648      	mov	r0, r9
 800fa64:	f000 ff6e 	bl	8010944 <__mcmp>
 800fa68:	4602      	mov	r2, r0
 800fa6a:	4631      	mov	r1, r6
 800fa6c:	4658      	mov	r0, fp
 800fa6e:	920c      	str	r2, [sp, #48]	@ 0x30
 800fa70:	f000 fce6 	bl	8010440 <_Bfree>
 800fa74:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800fa76:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800fa78:	9e07      	ldr	r6, [sp, #28]
 800fa7a:	ea43 0102 	orr.w	r1, r3, r2
 800fa7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa80:	4319      	orrs	r1, r3
 800fa82:	d110      	bne.n	800faa6 <_dtoa_r+0xa26>
 800fa84:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fa88:	d029      	beq.n	800fade <_dtoa_r+0xa5e>
 800fa8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	dd02      	ble.n	800fa96 <_dtoa_r+0xa16>
 800fa90:	9b08      	ldr	r3, [sp, #32]
 800fa92:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800fa96:	9b02      	ldr	r3, [sp, #8]
 800fa98:	f883 8000 	strb.w	r8, [r3]
 800fa9c:	e63b      	b.n	800f716 <_dtoa_r+0x696>
 800fa9e:	4628      	mov	r0, r5
 800faa0:	e7bb      	b.n	800fa1a <_dtoa_r+0x99a>
 800faa2:	2201      	movs	r2, #1
 800faa4:	e7e1      	b.n	800fa6a <_dtoa_r+0x9ea>
 800faa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	db04      	blt.n	800fab6 <_dtoa_r+0xa36>
 800faac:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800faae:	430b      	orrs	r3, r1
 800fab0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fab2:	430b      	orrs	r3, r1
 800fab4:	d120      	bne.n	800faf8 <_dtoa_r+0xa78>
 800fab6:	2a00      	cmp	r2, #0
 800fab8:	dded      	ble.n	800fa96 <_dtoa_r+0xa16>
 800faba:	4649      	mov	r1, r9
 800fabc:	2201      	movs	r2, #1
 800fabe:	4658      	mov	r0, fp
 800fac0:	f000 fed4 	bl	801086c <__lshift>
 800fac4:	4621      	mov	r1, r4
 800fac6:	4681      	mov	r9, r0
 800fac8:	f000 ff3c 	bl	8010944 <__mcmp>
 800facc:	2800      	cmp	r0, #0
 800face:	dc03      	bgt.n	800fad8 <_dtoa_r+0xa58>
 800fad0:	d1e1      	bne.n	800fa96 <_dtoa_r+0xa16>
 800fad2:	f018 0f01 	tst.w	r8, #1
 800fad6:	d0de      	beq.n	800fa96 <_dtoa_r+0xa16>
 800fad8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fadc:	d1d8      	bne.n	800fa90 <_dtoa_r+0xa10>
 800fade:	2339      	movs	r3, #57	@ 0x39
 800fae0:	9a02      	ldr	r2, [sp, #8]
 800fae2:	7013      	strb	r3, [r2, #0]
 800fae4:	4633      	mov	r3, r6
 800fae6:	461e      	mov	r6, r3
 800fae8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800faec:	3b01      	subs	r3, #1
 800faee:	2a39      	cmp	r2, #57	@ 0x39
 800faf0:	d052      	beq.n	800fb98 <_dtoa_r+0xb18>
 800faf2:	3201      	adds	r2, #1
 800faf4:	701a      	strb	r2, [r3, #0]
 800faf6:	e60e      	b.n	800f716 <_dtoa_r+0x696>
 800faf8:	2a00      	cmp	r2, #0
 800fafa:	dd07      	ble.n	800fb0c <_dtoa_r+0xa8c>
 800fafc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fb00:	d0ed      	beq.n	800fade <_dtoa_r+0xa5e>
 800fb02:	9a02      	ldr	r2, [sp, #8]
 800fb04:	f108 0301 	add.w	r3, r8, #1
 800fb08:	7013      	strb	r3, [r2, #0]
 800fb0a:	e604      	b.n	800f716 <_dtoa_r+0x696>
 800fb0c:	9b07      	ldr	r3, [sp, #28]
 800fb0e:	9a07      	ldr	r2, [sp, #28]
 800fb10:	f803 8c01 	strb.w	r8, [r3, #-1]
 800fb14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fb16:	4293      	cmp	r3, r2
 800fb18:	d028      	beq.n	800fb6c <_dtoa_r+0xaec>
 800fb1a:	4649      	mov	r1, r9
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	220a      	movs	r2, #10
 800fb20:	4658      	mov	r0, fp
 800fb22:	f000 fcaf 	bl	8010484 <__multadd>
 800fb26:	42af      	cmp	r7, r5
 800fb28:	4681      	mov	r9, r0
 800fb2a:	f04f 0300 	mov.w	r3, #0
 800fb2e:	f04f 020a 	mov.w	r2, #10
 800fb32:	4639      	mov	r1, r7
 800fb34:	4658      	mov	r0, fp
 800fb36:	d107      	bne.n	800fb48 <_dtoa_r+0xac8>
 800fb38:	f000 fca4 	bl	8010484 <__multadd>
 800fb3c:	4607      	mov	r7, r0
 800fb3e:	4605      	mov	r5, r0
 800fb40:	9b07      	ldr	r3, [sp, #28]
 800fb42:	3301      	adds	r3, #1
 800fb44:	9307      	str	r3, [sp, #28]
 800fb46:	e774      	b.n	800fa32 <_dtoa_r+0x9b2>
 800fb48:	f000 fc9c 	bl	8010484 <__multadd>
 800fb4c:	4629      	mov	r1, r5
 800fb4e:	4607      	mov	r7, r0
 800fb50:	2300      	movs	r3, #0
 800fb52:	220a      	movs	r2, #10
 800fb54:	4658      	mov	r0, fp
 800fb56:	f000 fc95 	bl	8010484 <__multadd>
 800fb5a:	4605      	mov	r5, r0
 800fb5c:	e7f0      	b.n	800fb40 <_dtoa_r+0xac0>
 800fb5e:	9b08      	ldr	r3, [sp, #32]
 800fb60:	2700      	movs	r7, #0
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	bfcc      	ite	gt
 800fb66:	461e      	movgt	r6, r3
 800fb68:	2601      	movle	r6, #1
 800fb6a:	4456      	add	r6, sl
 800fb6c:	4649      	mov	r1, r9
 800fb6e:	2201      	movs	r2, #1
 800fb70:	4658      	mov	r0, fp
 800fb72:	f000 fe7b 	bl	801086c <__lshift>
 800fb76:	4621      	mov	r1, r4
 800fb78:	4681      	mov	r9, r0
 800fb7a:	f000 fee3 	bl	8010944 <__mcmp>
 800fb7e:	2800      	cmp	r0, #0
 800fb80:	dcb0      	bgt.n	800fae4 <_dtoa_r+0xa64>
 800fb82:	d102      	bne.n	800fb8a <_dtoa_r+0xb0a>
 800fb84:	f018 0f01 	tst.w	r8, #1
 800fb88:	d1ac      	bne.n	800fae4 <_dtoa_r+0xa64>
 800fb8a:	4633      	mov	r3, r6
 800fb8c:	461e      	mov	r6, r3
 800fb8e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fb92:	2a30      	cmp	r2, #48	@ 0x30
 800fb94:	d0fa      	beq.n	800fb8c <_dtoa_r+0xb0c>
 800fb96:	e5be      	b.n	800f716 <_dtoa_r+0x696>
 800fb98:	459a      	cmp	sl, r3
 800fb9a:	d1a4      	bne.n	800fae6 <_dtoa_r+0xa66>
 800fb9c:	9b04      	ldr	r3, [sp, #16]
 800fb9e:	3301      	adds	r3, #1
 800fba0:	9304      	str	r3, [sp, #16]
 800fba2:	2331      	movs	r3, #49	@ 0x31
 800fba4:	f88a 3000 	strb.w	r3, [sl]
 800fba8:	e5b5      	b.n	800f716 <_dtoa_r+0x696>
 800fbaa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800fbac:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800fc0c <_dtoa_r+0xb8c>
 800fbb0:	b11b      	cbz	r3, 800fbba <_dtoa_r+0xb3a>
 800fbb2:	f10a 0308 	add.w	r3, sl, #8
 800fbb6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800fbb8:	6013      	str	r3, [r2, #0]
 800fbba:	4650      	mov	r0, sl
 800fbbc:	b017      	add	sp, #92	@ 0x5c
 800fbbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbc2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800fbc4:	2b01      	cmp	r3, #1
 800fbc6:	f77f ae3d 	ble.w	800f844 <_dtoa_r+0x7c4>
 800fbca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fbcc:	930a      	str	r3, [sp, #40]	@ 0x28
 800fbce:	2001      	movs	r0, #1
 800fbd0:	e65b      	b.n	800f88a <_dtoa_r+0x80a>
 800fbd2:	9b08      	ldr	r3, [sp, #32]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	f77f aed6 	ble.w	800f986 <_dtoa_r+0x906>
 800fbda:	4656      	mov	r6, sl
 800fbdc:	4621      	mov	r1, r4
 800fbde:	4648      	mov	r0, r9
 800fbe0:	f7ff f9c4 	bl	800ef6c <quorem>
 800fbe4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fbe8:	9b08      	ldr	r3, [sp, #32]
 800fbea:	f806 8b01 	strb.w	r8, [r6], #1
 800fbee:	eba6 020a 	sub.w	r2, r6, sl
 800fbf2:	4293      	cmp	r3, r2
 800fbf4:	ddb3      	ble.n	800fb5e <_dtoa_r+0xade>
 800fbf6:	4649      	mov	r1, r9
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	220a      	movs	r2, #10
 800fbfc:	4658      	mov	r0, fp
 800fbfe:	f000 fc41 	bl	8010484 <__multadd>
 800fc02:	4681      	mov	r9, r0
 800fc04:	e7ea      	b.n	800fbdc <_dtoa_r+0xb5c>
 800fc06:	bf00      	nop
 800fc08:	0801224b 	.word	0x0801224b
 800fc0c:	080121e6 	.word	0x080121e6

0800fc10 <_free_r>:
 800fc10:	b538      	push	{r3, r4, r5, lr}
 800fc12:	4605      	mov	r5, r0
 800fc14:	2900      	cmp	r1, #0
 800fc16:	d040      	beq.n	800fc9a <_free_r+0x8a>
 800fc18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc1c:	1f0c      	subs	r4, r1, #4
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	bfb8      	it	lt
 800fc22:	18e4      	addlt	r4, r4, r3
 800fc24:	f7fc fe04 	bl	800c830 <__malloc_lock>
 800fc28:	4a1c      	ldr	r2, [pc, #112]	@ (800fc9c <_free_r+0x8c>)
 800fc2a:	6813      	ldr	r3, [r2, #0]
 800fc2c:	b933      	cbnz	r3, 800fc3c <_free_r+0x2c>
 800fc2e:	6063      	str	r3, [r4, #4]
 800fc30:	6014      	str	r4, [r2, #0]
 800fc32:	4628      	mov	r0, r5
 800fc34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc38:	f7fc be00 	b.w	800c83c <__malloc_unlock>
 800fc3c:	42a3      	cmp	r3, r4
 800fc3e:	d908      	bls.n	800fc52 <_free_r+0x42>
 800fc40:	6820      	ldr	r0, [r4, #0]
 800fc42:	1821      	adds	r1, r4, r0
 800fc44:	428b      	cmp	r3, r1
 800fc46:	bf01      	itttt	eq
 800fc48:	6819      	ldreq	r1, [r3, #0]
 800fc4a:	685b      	ldreq	r3, [r3, #4]
 800fc4c:	1809      	addeq	r1, r1, r0
 800fc4e:	6021      	streq	r1, [r4, #0]
 800fc50:	e7ed      	b.n	800fc2e <_free_r+0x1e>
 800fc52:	461a      	mov	r2, r3
 800fc54:	685b      	ldr	r3, [r3, #4]
 800fc56:	b10b      	cbz	r3, 800fc5c <_free_r+0x4c>
 800fc58:	42a3      	cmp	r3, r4
 800fc5a:	d9fa      	bls.n	800fc52 <_free_r+0x42>
 800fc5c:	6811      	ldr	r1, [r2, #0]
 800fc5e:	1850      	adds	r0, r2, r1
 800fc60:	42a0      	cmp	r0, r4
 800fc62:	d10b      	bne.n	800fc7c <_free_r+0x6c>
 800fc64:	6820      	ldr	r0, [r4, #0]
 800fc66:	4401      	add	r1, r0
 800fc68:	1850      	adds	r0, r2, r1
 800fc6a:	4283      	cmp	r3, r0
 800fc6c:	6011      	str	r1, [r2, #0]
 800fc6e:	d1e0      	bne.n	800fc32 <_free_r+0x22>
 800fc70:	6818      	ldr	r0, [r3, #0]
 800fc72:	685b      	ldr	r3, [r3, #4]
 800fc74:	4408      	add	r0, r1
 800fc76:	6010      	str	r0, [r2, #0]
 800fc78:	6053      	str	r3, [r2, #4]
 800fc7a:	e7da      	b.n	800fc32 <_free_r+0x22>
 800fc7c:	d902      	bls.n	800fc84 <_free_r+0x74>
 800fc7e:	230c      	movs	r3, #12
 800fc80:	602b      	str	r3, [r5, #0]
 800fc82:	e7d6      	b.n	800fc32 <_free_r+0x22>
 800fc84:	6820      	ldr	r0, [r4, #0]
 800fc86:	1821      	adds	r1, r4, r0
 800fc88:	428b      	cmp	r3, r1
 800fc8a:	bf01      	itttt	eq
 800fc8c:	6819      	ldreq	r1, [r3, #0]
 800fc8e:	685b      	ldreq	r3, [r3, #4]
 800fc90:	1809      	addeq	r1, r1, r0
 800fc92:	6021      	streq	r1, [r4, #0]
 800fc94:	6063      	str	r3, [r4, #4]
 800fc96:	6054      	str	r4, [r2, #4]
 800fc98:	e7cb      	b.n	800fc32 <_free_r+0x22>
 800fc9a:	bd38      	pop	{r3, r4, r5, pc}
 800fc9c:	20005a20 	.word	0x20005a20

0800fca0 <rshift>:
 800fca0:	6903      	ldr	r3, [r0, #16]
 800fca2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fca6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fcaa:	f100 0414 	add.w	r4, r0, #20
 800fcae:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fcb2:	dd46      	ble.n	800fd42 <rshift+0xa2>
 800fcb4:	f011 011f 	ands.w	r1, r1, #31
 800fcb8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fcbc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fcc0:	d10c      	bne.n	800fcdc <rshift+0x3c>
 800fcc2:	4629      	mov	r1, r5
 800fcc4:	f100 0710 	add.w	r7, r0, #16
 800fcc8:	42b1      	cmp	r1, r6
 800fcca:	d335      	bcc.n	800fd38 <rshift+0x98>
 800fccc:	1a9b      	subs	r3, r3, r2
 800fcce:	009b      	lsls	r3, r3, #2
 800fcd0:	1eea      	subs	r2, r5, #3
 800fcd2:	4296      	cmp	r6, r2
 800fcd4:	bf38      	it	cc
 800fcd6:	2300      	movcc	r3, #0
 800fcd8:	4423      	add	r3, r4
 800fcda:	e015      	b.n	800fd08 <rshift+0x68>
 800fcdc:	46a1      	mov	r9, r4
 800fcde:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fce2:	f1c1 0820 	rsb	r8, r1, #32
 800fce6:	40cf      	lsrs	r7, r1
 800fce8:	f105 0e04 	add.w	lr, r5, #4
 800fcec:	4576      	cmp	r6, lr
 800fcee:	46f4      	mov	ip, lr
 800fcf0:	d816      	bhi.n	800fd20 <rshift+0x80>
 800fcf2:	1a9a      	subs	r2, r3, r2
 800fcf4:	0092      	lsls	r2, r2, #2
 800fcf6:	3a04      	subs	r2, #4
 800fcf8:	3501      	adds	r5, #1
 800fcfa:	42ae      	cmp	r6, r5
 800fcfc:	bf38      	it	cc
 800fcfe:	2200      	movcc	r2, #0
 800fd00:	18a3      	adds	r3, r4, r2
 800fd02:	50a7      	str	r7, [r4, r2]
 800fd04:	b107      	cbz	r7, 800fd08 <rshift+0x68>
 800fd06:	3304      	adds	r3, #4
 800fd08:	42a3      	cmp	r3, r4
 800fd0a:	eba3 0204 	sub.w	r2, r3, r4
 800fd0e:	bf08      	it	eq
 800fd10:	2300      	moveq	r3, #0
 800fd12:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fd16:	6102      	str	r2, [r0, #16]
 800fd18:	bf08      	it	eq
 800fd1a:	6143      	streq	r3, [r0, #20]
 800fd1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd20:	f8dc c000 	ldr.w	ip, [ip]
 800fd24:	fa0c fc08 	lsl.w	ip, ip, r8
 800fd28:	ea4c 0707 	orr.w	r7, ip, r7
 800fd2c:	f849 7b04 	str.w	r7, [r9], #4
 800fd30:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fd34:	40cf      	lsrs	r7, r1
 800fd36:	e7d9      	b.n	800fcec <rshift+0x4c>
 800fd38:	f851 cb04 	ldr.w	ip, [r1], #4
 800fd3c:	f847 cf04 	str.w	ip, [r7, #4]!
 800fd40:	e7c2      	b.n	800fcc8 <rshift+0x28>
 800fd42:	4623      	mov	r3, r4
 800fd44:	e7e0      	b.n	800fd08 <rshift+0x68>

0800fd46 <__hexdig_fun>:
 800fd46:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800fd4a:	2b09      	cmp	r3, #9
 800fd4c:	d802      	bhi.n	800fd54 <__hexdig_fun+0xe>
 800fd4e:	3820      	subs	r0, #32
 800fd50:	b2c0      	uxtb	r0, r0
 800fd52:	4770      	bx	lr
 800fd54:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800fd58:	2b05      	cmp	r3, #5
 800fd5a:	d801      	bhi.n	800fd60 <__hexdig_fun+0x1a>
 800fd5c:	3847      	subs	r0, #71	@ 0x47
 800fd5e:	e7f7      	b.n	800fd50 <__hexdig_fun+0xa>
 800fd60:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800fd64:	2b05      	cmp	r3, #5
 800fd66:	d801      	bhi.n	800fd6c <__hexdig_fun+0x26>
 800fd68:	3827      	subs	r0, #39	@ 0x27
 800fd6a:	e7f1      	b.n	800fd50 <__hexdig_fun+0xa>
 800fd6c:	2000      	movs	r0, #0
 800fd6e:	4770      	bx	lr

0800fd70 <__gethex>:
 800fd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd74:	468a      	mov	sl, r1
 800fd76:	4690      	mov	r8, r2
 800fd78:	b085      	sub	sp, #20
 800fd7a:	9302      	str	r3, [sp, #8]
 800fd7c:	680b      	ldr	r3, [r1, #0]
 800fd7e:	9001      	str	r0, [sp, #4]
 800fd80:	1c9c      	adds	r4, r3, #2
 800fd82:	46a1      	mov	r9, r4
 800fd84:	f814 0b01 	ldrb.w	r0, [r4], #1
 800fd88:	2830      	cmp	r0, #48	@ 0x30
 800fd8a:	d0fa      	beq.n	800fd82 <__gethex+0x12>
 800fd8c:	eba9 0303 	sub.w	r3, r9, r3
 800fd90:	f1a3 0b02 	sub.w	fp, r3, #2
 800fd94:	f7ff ffd7 	bl	800fd46 <__hexdig_fun>
 800fd98:	4605      	mov	r5, r0
 800fd9a:	2800      	cmp	r0, #0
 800fd9c:	d168      	bne.n	800fe70 <__gethex+0x100>
 800fd9e:	2201      	movs	r2, #1
 800fda0:	4648      	mov	r0, r9
 800fda2:	499f      	ldr	r1, [pc, #636]	@ (8010020 <__gethex+0x2b0>)
 800fda4:	f7fe f9b4 	bl	800e110 <strncmp>
 800fda8:	4607      	mov	r7, r0
 800fdaa:	2800      	cmp	r0, #0
 800fdac:	d167      	bne.n	800fe7e <__gethex+0x10e>
 800fdae:	f899 0001 	ldrb.w	r0, [r9, #1]
 800fdb2:	4626      	mov	r6, r4
 800fdb4:	f7ff ffc7 	bl	800fd46 <__hexdig_fun>
 800fdb8:	2800      	cmp	r0, #0
 800fdba:	d062      	beq.n	800fe82 <__gethex+0x112>
 800fdbc:	4623      	mov	r3, r4
 800fdbe:	7818      	ldrb	r0, [r3, #0]
 800fdc0:	4699      	mov	r9, r3
 800fdc2:	2830      	cmp	r0, #48	@ 0x30
 800fdc4:	f103 0301 	add.w	r3, r3, #1
 800fdc8:	d0f9      	beq.n	800fdbe <__gethex+0x4e>
 800fdca:	f7ff ffbc 	bl	800fd46 <__hexdig_fun>
 800fdce:	fab0 f580 	clz	r5, r0
 800fdd2:	f04f 0b01 	mov.w	fp, #1
 800fdd6:	096d      	lsrs	r5, r5, #5
 800fdd8:	464a      	mov	r2, r9
 800fdda:	4616      	mov	r6, r2
 800fddc:	7830      	ldrb	r0, [r6, #0]
 800fdde:	3201      	adds	r2, #1
 800fde0:	f7ff ffb1 	bl	800fd46 <__hexdig_fun>
 800fde4:	2800      	cmp	r0, #0
 800fde6:	d1f8      	bne.n	800fdda <__gethex+0x6a>
 800fde8:	2201      	movs	r2, #1
 800fdea:	4630      	mov	r0, r6
 800fdec:	498c      	ldr	r1, [pc, #560]	@ (8010020 <__gethex+0x2b0>)
 800fdee:	f7fe f98f 	bl	800e110 <strncmp>
 800fdf2:	2800      	cmp	r0, #0
 800fdf4:	d13f      	bne.n	800fe76 <__gethex+0x106>
 800fdf6:	b944      	cbnz	r4, 800fe0a <__gethex+0x9a>
 800fdf8:	1c74      	adds	r4, r6, #1
 800fdfa:	4622      	mov	r2, r4
 800fdfc:	4616      	mov	r6, r2
 800fdfe:	7830      	ldrb	r0, [r6, #0]
 800fe00:	3201      	adds	r2, #1
 800fe02:	f7ff ffa0 	bl	800fd46 <__hexdig_fun>
 800fe06:	2800      	cmp	r0, #0
 800fe08:	d1f8      	bne.n	800fdfc <__gethex+0x8c>
 800fe0a:	1ba4      	subs	r4, r4, r6
 800fe0c:	00a7      	lsls	r7, r4, #2
 800fe0e:	7833      	ldrb	r3, [r6, #0]
 800fe10:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800fe14:	2b50      	cmp	r3, #80	@ 0x50
 800fe16:	d13e      	bne.n	800fe96 <__gethex+0x126>
 800fe18:	7873      	ldrb	r3, [r6, #1]
 800fe1a:	2b2b      	cmp	r3, #43	@ 0x2b
 800fe1c:	d033      	beq.n	800fe86 <__gethex+0x116>
 800fe1e:	2b2d      	cmp	r3, #45	@ 0x2d
 800fe20:	d034      	beq.n	800fe8c <__gethex+0x11c>
 800fe22:	2400      	movs	r4, #0
 800fe24:	1c71      	adds	r1, r6, #1
 800fe26:	7808      	ldrb	r0, [r1, #0]
 800fe28:	f7ff ff8d 	bl	800fd46 <__hexdig_fun>
 800fe2c:	1e43      	subs	r3, r0, #1
 800fe2e:	b2db      	uxtb	r3, r3
 800fe30:	2b18      	cmp	r3, #24
 800fe32:	d830      	bhi.n	800fe96 <__gethex+0x126>
 800fe34:	f1a0 0210 	sub.w	r2, r0, #16
 800fe38:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fe3c:	f7ff ff83 	bl	800fd46 <__hexdig_fun>
 800fe40:	f100 3cff 	add.w	ip, r0, #4294967295
 800fe44:	fa5f fc8c 	uxtb.w	ip, ip
 800fe48:	f1bc 0f18 	cmp.w	ip, #24
 800fe4c:	f04f 030a 	mov.w	r3, #10
 800fe50:	d91e      	bls.n	800fe90 <__gethex+0x120>
 800fe52:	b104      	cbz	r4, 800fe56 <__gethex+0xe6>
 800fe54:	4252      	negs	r2, r2
 800fe56:	4417      	add	r7, r2
 800fe58:	f8ca 1000 	str.w	r1, [sl]
 800fe5c:	b1ed      	cbz	r5, 800fe9a <__gethex+0x12a>
 800fe5e:	f1bb 0f00 	cmp.w	fp, #0
 800fe62:	bf0c      	ite	eq
 800fe64:	2506      	moveq	r5, #6
 800fe66:	2500      	movne	r5, #0
 800fe68:	4628      	mov	r0, r5
 800fe6a:	b005      	add	sp, #20
 800fe6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe70:	2500      	movs	r5, #0
 800fe72:	462c      	mov	r4, r5
 800fe74:	e7b0      	b.n	800fdd8 <__gethex+0x68>
 800fe76:	2c00      	cmp	r4, #0
 800fe78:	d1c7      	bne.n	800fe0a <__gethex+0x9a>
 800fe7a:	4627      	mov	r7, r4
 800fe7c:	e7c7      	b.n	800fe0e <__gethex+0x9e>
 800fe7e:	464e      	mov	r6, r9
 800fe80:	462f      	mov	r7, r5
 800fe82:	2501      	movs	r5, #1
 800fe84:	e7c3      	b.n	800fe0e <__gethex+0x9e>
 800fe86:	2400      	movs	r4, #0
 800fe88:	1cb1      	adds	r1, r6, #2
 800fe8a:	e7cc      	b.n	800fe26 <__gethex+0xb6>
 800fe8c:	2401      	movs	r4, #1
 800fe8e:	e7fb      	b.n	800fe88 <__gethex+0x118>
 800fe90:	fb03 0002 	mla	r0, r3, r2, r0
 800fe94:	e7ce      	b.n	800fe34 <__gethex+0xc4>
 800fe96:	4631      	mov	r1, r6
 800fe98:	e7de      	b.n	800fe58 <__gethex+0xe8>
 800fe9a:	4629      	mov	r1, r5
 800fe9c:	eba6 0309 	sub.w	r3, r6, r9
 800fea0:	3b01      	subs	r3, #1
 800fea2:	2b07      	cmp	r3, #7
 800fea4:	dc0a      	bgt.n	800febc <__gethex+0x14c>
 800fea6:	9801      	ldr	r0, [sp, #4]
 800fea8:	f000 fa8a 	bl	80103c0 <_Balloc>
 800feac:	4604      	mov	r4, r0
 800feae:	b940      	cbnz	r0, 800fec2 <__gethex+0x152>
 800feb0:	4602      	mov	r2, r0
 800feb2:	21e4      	movs	r1, #228	@ 0xe4
 800feb4:	4b5b      	ldr	r3, [pc, #364]	@ (8010024 <__gethex+0x2b4>)
 800feb6:	485c      	ldr	r0, [pc, #368]	@ (8010028 <__gethex+0x2b8>)
 800feb8:	f7ff f832 	bl	800ef20 <__assert_func>
 800febc:	3101      	adds	r1, #1
 800febe:	105b      	asrs	r3, r3, #1
 800fec0:	e7ef      	b.n	800fea2 <__gethex+0x132>
 800fec2:	2300      	movs	r3, #0
 800fec4:	f100 0a14 	add.w	sl, r0, #20
 800fec8:	4655      	mov	r5, sl
 800feca:	469b      	mov	fp, r3
 800fecc:	45b1      	cmp	r9, r6
 800fece:	d337      	bcc.n	800ff40 <__gethex+0x1d0>
 800fed0:	f845 bb04 	str.w	fp, [r5], #4
 800fed4:	eba5 050a 	sub.w	r5, r5, sl
 800fed8:	10ad      	asrs	r5, r5, #2
 800feda:	6125      	str	r5, [r4, #16]
 800fedc:	4658      	mov	r0, fp
 800fede:	f000 fb61 	bl	80105a4 <__hi0bits>
 800fee2:	016d      	lsls	r5, r5, #5
 800fee4:	f8d8 6000 	ldr.w	r6, [r8]
 800fee8:	1a2d      	subs	r5, r5, r0
 800feea:	42b5      	cmp	r5, r6
 800feec:	dd54      	ble.n	800ff98 <__gethex+0x228>
 800feee:	1bad      	subs	r5, r5, r6
 800fef0:	4629      	mov	r1, r5
 800fef2:	4620      	mov	r0, r4
 800fef4:	f000 fee9 	bl	8010cca <__any_on>
 800fef8:	4681      	mov	r9, r0
 800fefa:	b178      	cbz	r0, 800ff1c <__gethex+0x1ac>
 800fefc:	f04f 0901 	mov.w	r9, #1
 800ff00:	1e6b      	subs	r3, r5, #1
 800ff02:	1159      	asrs	r1, r3, #5
 800ff04:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ff08:	f003 021f 	and.w	r2, r3, #31
 800ff0c:	fa09 f202 	lsl.w	r2, r9, r2
 800ff10:	420a      	tst	r2, r1
 800ff12:	d003      	beq.n	800ff1c <__gethex+0x1ac>
 800ff14:	454b      	cmp	r3, r9
 800ff16:	dc36      	bgt.n	800ff86 <__gethex+0x216>
 800ff18:	f04f 0902 	mov.w	r9, #2
 800ff1c:	4629      	mov	r1, r5
 800ff1e:	4620      	mov	r0, r4
 800ff20:	f7ff febe 	bl	800fca0 <rshift>
 800ff24:	442f      	add	r7, r5
 800ff26:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ff2a:	42bb      	cmp	r3, r7
 800ff2c:	da42      	bge.n	800ffb4 <__gethex+0x244>
 800ff2e:	4621      	mov	r1, r4
 800ff30:	9801      	ldr	r0, [sp, #4]
 800ff32:	f000 fa85 	bl	8010440 <_Bfree>
 800ff36:	2300      	movs	r3, #0
 800ff38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ff3a:	25a3      	movs	r5, #163	@ 0xa3
 800ff3c:	6013      	str	r3, [r2, #0]
 800ff3e:	e793      	b.n	800fe68 <__gethex+0xf8>
 800ff40:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ff44:	2a2e      	cmp	r2, #46	@ 0x2e
 800ff46:	d012      	beq.n	800ff6e <__gethex+0x1fe>
 800ff48:	2b20      	cmp	r3, #32
 800ff4a:	d104      	bne.n	800ff56 <__gethex+0x1e6>
 800ff4c:	f845 bb04 	str.w	fp, [r5], #4
 800ff50:	f04f 0b00 	mov.w	fp, #0
 800ff54:	465b      	mov	r3, fp
 800ff56:	7830      	ldrb	r0, [r6, #0]
 800ff58:	9303      	str	r3, [sp, #12]
 800ff5a:	f7ff fef4 	bl	800fd46 <__hexdig_fun>
 800ff5e:	9b03      	ldr	r3, [sp, #12]
 800ff60:	f000 000f 	and.w	r0, r0, #15
 800ff64:	4098      	lsls	r0, r3
 800ff66:	ea4b 0b00 	orr.w	fp, fp, r0
 800ff6a:	3304      	adds	r3, #4
 800ff6c:	e7ae      	b.n	800fecc <__gethex+0x15c>
 800ff6e:	45b1      	cmp	r9, r6
 800ff70:	d8ea      	bhi.n	800ff48 <__gethex+0x1d8>
 800ff72:	2201      	movs	r2, #1
 800ff74:	4630      	mov	r0, r6
 800ff76:	492a      	ldr	r1, [pc, #168]	@ (8010020 <__gethex+0x2b0>)
 800ff78:	9303      	str	r3, [sp, #12]
 800ff7a:	f7fe f8c9 	bl	800e110 <strncmp>
 800ff7e:	9b03      	ldr	r3, [sp, #12]
 800ff80:	2800      	cmp	r0, #0
 800ff82:	d1e1      	bne.n	800ff48 <__gethex+0x1d8>
 800ff84:	e7a2      	b.n	800fecc <__gethex+0x15c>
 800ff86:	4620      	mov	r0, r4
 800ff88:	1ea9      	subs	r1, r5, #2
 800ff8a:	f000 fe9e 	bl	8010cca <__any_on>
 800ff8e:	2800      	cmp	r0, #0
 800ff90:	d0c2      	beq.n	800ff18 <__gethex+0x1a8>
 800ff92:	f04f 0903 	mov.w	r9, #3
 800ff96:	e7c1      	b.n	800ff1c <__gethex+0x1ac>
 800ff98:	da09      	bge.n	800ffae <__gethex+0x23e>
 800ff9a:	1b75      	subs	r5, r6, r5
 800ff9c:	4621      	mov	r1, r4
 800ff9e:	462a      	mov	r2, r5
 800ffa0:	9801      	ldr	r0, [sp, #4]
 800ffa2:	f000 fc63 	bl	801086c <__lshift>
 800ffa6:	4604      	mov	r4, r0
 800ffa8:	1b7f      	subs	r7, r7, r5
 800ffaa:	f100 0a14 	add.w	sl, r0, #20
 800ffae:	f04f 0900 	mov.w	r9, #0
 800ffb2:	e7b8      	b.n	800ff26 <__gethex+0x1b6>
 800ffb4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ffb8:	42bd      	cmp	r5, r7
 800ffba:	dd6f      	ble.n	801009c <__gethex+0x32c>
 800ffbc:	1bed      	subs	r5, r5, r7
 800ffbe:	42ae      	cmp	r6, r5
 800ffc0:	dc34      	bgt.n	801002c <__gethex+0x2bc>
 800ffc2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ffc6:	2b02      	cmp	r3, #2
 800ffc8:	d022      	beq.n	8010010 <__gethex+0x2a0>
 800ffca:	2b03      	cmp	r3, #3
 800ffcc:	d024      	beq.n	8010018 <__gethex+0x2a8>
 800ffce:	2b01      	cmp	r3, #1
 800ffd0:	d115      	bne.n	800fffe <__gethex+0x28e>
 800ffd2:	42ae      	cmp	r6, r5
 800ffd4:	d113      	bne.n	800fffe <__gethex+0x28e>
 800ffd6:	2e01      	cmp	r6, #1
 800ffd8:	d10b      	bne.n	800fff2 <__gethex+0x282>
 800ffda:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ffde:	9a02      	ldr	r2, [sp, #8]
 800ffe0:	2562      	movs	r5, #98	@ 0x62
 800ffe2:	6013      	str	r3, [r2, #0]
 800ffe4:	2301      	movs	r3, #1
 800ffe6:	6123      	str	r3, [r4, #16]
 800ffe8:	f8ca 3000 	str.w	r3, [sl]
 800ffec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ffee:	601c      	str	r4, [r3, #0]
 800fff0:	e73a      	b.n	800fe68 <__gethex+0xf8>
 800fff2:	4620      	mov	r0, r4
 800fff4:	1e71      	subs	r1, r6, #1
 800fff6:	f000 fe68 	bl	8010cca <__any_on>
 800fffa:	2800      	cmp	r0, #0
 800fffc:	d1ed      	bne.n	800ffda <__gethex+0x26a>
 800fffe:	4621      	mov	r1, r4
 8010000:	9801      	ldr	r0, [sp, #4]
 8010002:	f000 fa1d 	bl	8010440 <_Bfree>
 8010006:	2300      	movs	r3, #0
 8010008:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801000a:	2550      	movs	r5, #80	@ 0x50
 801000c:	6013      	str	r3, [r2, #0]
 801000e:	e72b      	b.n	800fe68 <__gethex+0xf8>
 8010010:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010012:	2b00      	cmp	r3, #0
 8010014:	d1f3      	bne.n	800fffe <__gethex+0x28e>
 8010016:	e7e0      	b.n	800ffda <__gethex+0x26a>
 8010018:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801001a:	2b00      	cmp	r3, #0
 801001c:	d1dd      	bne.n	800ffda <__gethex+0x26a>
 801001e:	e7ee      	b.n	800fffe <__gethex+0x28e>
 8010020:	08011efe 	.word	0x08011efe
 8010024:	0801224b 	.word	0x0801224b
 8010028:	0801225c 	.word	0x0801225c
 801002c:	1e6f      	subs	r7, r5, #1
 801002e:	f1b9 0f00 	cmp.w	r9, #0
 8010032:	d130      	bne.n	8010096 <__gethex+0x326>
 8010034:	b127      	cbz	r7, 8010040 <__gethex+0x2d0>
 8010036:	4639      	mov	r1, r7
 8010038:	4620      	mov	r0, r4
 801003a:	f000 fe46 	bl	8010cca <__any_on>
 801003e:	4681      	mov	r9, r0
 8010040:	2301      	movs	r3, #1
 8010042:	4629      	mov	r1, r5
 8010044:	1b76      	subs	r6, r6, r5
 8010046:	2502      	movs	r5, #2
 8010048:	117a      	asrs	r2, r7, #5
 801004a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801004e:	f007 071f 	and.w	r7, r7, #31
 8010052:	40bb      	lsls	r3, r7
 8010054:	4213      	tst	r3, r2
 8010056:	4620      	mov	r0, r4
 8010058:	bf18      	it	ne
 801005a:	f049 0902 	orrne.w	r9, r9, #2
 801005e:	f7ff fe1f 	bl	800fca0 <rshift>
 8010062:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8010066:	f1b9 0f00 	cmp.w	r9, #0
 801006a:	d047      	beq.n	80100fc <__gethex+0x38c>
 801006c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010070:	2b02      	cmp	r3, #2
 8010072:	d015      	beq.n	80100a0 <__gethex+0x330>
 8010074:	2b03      	cmp	r3, #3
 8010076:	d017      	beq.n	80100a8 <__gethex+0x338>
 8010078:	2b01      	cmp	r3, #1
 801007a:	d109      	bne.n	8010090 <__gethex+0x320>
 801007c:	f019 0f02 	tst.w	r9, #2
 8010080:	d006      	beq.n	8010090 <__gethex+0x320>
 8010082:	f8da 3000 	ldr.w	r3, [sl]
 8010086:	ea49 0903 	orr.w	r9, r9, r3
 801008a:	f019 0f01 	tst.w	r9, #1
 801008e:	d10e      	bne.n	80100ae <__gethex+0x33e>
 8010090:	f045 0510 	orr.w	r5, r5, #16
 8010094:	e032      	b.n	80100fc <__gethex+0x38c>
 8010096:	f04f 0901 	mov.w	r9, #1
 801009a:	e7d1      	b.n	8010040 <__gethex+0x2d0>
 801009c:	2501      	movs	r5, #1
 801009e:	e7e2      	b.n	8010066 <__gethex+0x2f6>
 80100a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80100a2:	f1c3 0301 	rsb	r3, r3, #1
 80100a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80100a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d0f0      	beq.n	8010090 <__gethex+0x320>
 80100ae:	f04f 0c00 	mov.w	ip, #0
 80100b2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80100b6:	f104 0314 	add.w	r3, r4, #20
 80100ba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80100be:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80100c2:	4618      	mov	r0, r3
 80100c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80100c8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80100cc:	d01b      	beq.n	8010106 <__gethex+0x396>
 80100ce:	3201      	adds	r2, #1
 80100d0:	6002      	str	r2, [r0, #0]
 80100d2:	2d02      	cmp	r5, #2
 80100d4:	f104 0314 	add.w	r3, r4, #20
 80100d8:	d13c      	bne.n	8010154 <__gethex+0x3e4>
 80100da:	f8d8 2000 	ldr.w	r2, [r8]
 80100de:	3a01      	subs	r2, #1
 80100e0:	42b2      	cmp	r2, r6
 80100e2:	d109      	bne.n	80100f8 <__gethex+0x388>
 80100e4:	2201      	movs	r2, #1
 80100e6:	1171      	asrs	r1, r6, #5
 80100e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80100ec:	f006 061f 	and.w	r6, r6, #31
 80100f0:	fa02 f606 	lsl.w	r6, r2, r6
 80100f4:	421e      	tst	r6, r3
 80100f6:	d13a      	bne.n	801016e <__gethex+0x3fe>
 80100f8:	f045 0520 	orr.w	r5, r5, #32
 80100fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80100fe:	601c      	str	r4, [r3, #0]
 8010100:	9b02      	ldr	r3, [sp, #8]
 8010102:	601f      	str	r7, [r3, #0]
 8010104:	e6b0      	b.n	800fe68 <__gethex+0xf8>
 8010106:	4299      	cmp	r1, r3
 8010108:	f843 cc04 	str.w	ip, [r3, #-4]
 801010c:	d8d9      	bhi.n	80100c2 <__gethex+0x352>
 801010e:	68a3      	ldr	r3, [r4, #8]
 8010110:	459b      	cmp	fp, r3
 8010112:	db17      	blt.n	8010144 <__gethex+0x3d4>
 8010114:	6861      	ldr	r1, [r4, #4]
 8010116:	9801      	ldr	r0, [sp, #4]
 8010118:	3101      	adds	r1, #1
 801011a:	f000 f951 	bl	80103c0 <_Balloc>
 801011e:	4681      	mov	r9, r0
 8010120:	b918      	cbnz	r0, 801012a <__gethex+0x3ba>
 8010122:	4602      	mov	r2, r0
 8010124:	2184      	movs	r1, #132	@ 0x84
 8010126:	4b19      	ldr	r3, [pc, #100]	@ (801018c <__gethex+0x41c>)
 8010128:	e6c5      	b.n	800feb6 <__gethex+0x146>
 801012a:	6922      	ldr	r2, [r4, #16]
 801012c:	f104 010c 	add.w	r1, r4, #12
 8010130:	3202      	adds	r2, #2
 8010132:	0092      	lsls	r2, r2, #2
 8010134:	300c      	adds	r0, #12
 8010136:	f7fe feda 	bl	800eeee <memcpy>
 801013a:	4621      	mov	r1, r4
 801013c:	9801      	ldr	r0, [sp, #4]
 801013e:	f000 f97f 	bl	8010440 <_Bfree>
 8010142:	464c      	mov	r4, r9
 8010144:	6923      	ldr	r3, [r4, #16]
 8010146:	1c5a      	adds	r2, r3, #1
 8010148:	6122      	str	r2, [r4, #16]
 801014a:	2201      	movs	r2, #1
 801014c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010150:	615a      	str	r2, [r3, #20]
 8010152:	e7be      	b.n	80100d2 <__gethex+0x362>
 8010154:	6922      	ldr	r2, [r4, #16]
 8010156:	455a      	cmp	r2, fp
 8010158:	dd0b      	ble.n	8010172 <__gethex+0x402>
 801015a:	2101      	movs	r1, #1
 801015c:	4620      	mov	r0, r4
 801015e:	f7ff fd9f 	bl	800fca0 <rshift>
 8010162:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010166:	3701      	adds	r7, #1
 8010168:	42bb      	cmp	r3, r7
 801016a:	f6ff aee0 	blt.w	800ff2e <__gethex+0x1be>
 801016e:	2501      	movs	r5, #1
 8010170:	e7c2      	b.n	80100f8 <__gethex+0x388>
 8010172:	f016 061f 	ands.w	r6, r6, #31
 8010176:	d0fa      	beq.n	801016e <__gethex+0x3fe>
 8010178:	4453      	add	r3, sl
 801017a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801017e:	f000 fa11 	bl	80105a4 <__hi0bits>
 8010182:	f1c6 0620 	rsb	r6, r6, #32
 8010186:	42b0      	cmp	r0, r6
 8010188:	dbe7      	blt.n	801015a <__gethex+0x3ea>
 801018a:	e7f0      	b.n	801016e <__gethex+0x3fe>
 801018c:	0801224b 	.word	0x0801224b

08010190 <L_shift>:
 8010190:	f1c2 0208 	rsb	r2, r2, #8
 8010194:	0092      	lsls	r2, r2, #2
 8010196:	b570      	push	{r4, r5, r6, lr}
 8010198:	f1c2 0620 	rsb	r6, r2, #32
 801019c:	6843      	ldr	r3, [r0, #4]
 801019e:	6804      	ldr	r4, [r0, #0]
 80101a0:	fa03 f506 	lsl.w	r5, r3, r6
 80101a4:	432c      	orrs	r4, r5
 80101a6:	40d3      	lsrs	r3, r2
 80101a8:	6004      	str	r4, [r0, #0]
 80101aa:	f840 3f04 	str.w	r3, [r0, #4]!
 80101ae:	4288      	cmp	r0, r1
 80101b0:	d3f4      	bcc.n	801019c <L_shift+0xc>
 80101b2:	bd70      	pop	{r4, r5, r6, pc}

080101b4 <__match>:
 80101b4:	b530      	push	{r4, r5, lr}
 80101b6:	6803      	ldr	r3, [r0, #0]
 80101b8:	3301      	adds	r3, #1
 80101ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80101be:	b914      	cbnz	r4, 80101c6 <__match+0x12>
 80101c0:	6003      	str	r3, [r0, #0]
 80101c2:	2001      	movs	r0, #1
 80101c4:	bd30      	pop	{r4, r5, pc}
 80101c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80101ca:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80101ce:	2d19      	cmp	r5, #25
 80101d0:	bf98      	it	ls
 80101d2:	3220      	addls	r2, #32
 80101d4:	42a2      	cmp	r2, r4
 80101d6:	d0f0      	beq.n	80101ba <__match+0x6>
 80101d8:	2000      	movs	r0, #0
 80101da:	e7f3      	b.n	80101c4 <__match+0x10>

080101dc <__hexnan>:
 80101dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101e0:	2500      	movs	r5, #0
 80101e2:	680b      	ldr	r3, [r1, #0]
 80101e4:	4682      	mov	sl, r0
 80101e6:	115e      	asrs	r6, r3, #5
 80101e8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80101ec:	f013 031f 	ands.w	r3, r3, #31
 80101f0:	bf18      	it	ne
 80101f2:	3604      	addne	r6, #4
 80101f4:	1f37      	subs	r7, r6, #4
 80101f6:	4690      	mov	r8, r2
 80101f8:	46b9      	mov	r9, r7
 80101fa:	463c      	mov	r4, r7
 80101fc:	46ab      	mov	fp, r5
 80101fe:	b087      	sub	sp, #28
 8010200:	6801      	ldr	r1, [r0, #0]
 8010202:	9301      	str	r3, [sp, #4]
 8010204:	f846 5c04 	str.w	r5, [r6, #-4]
 8010208:	9502      	str	r5, [sp, #8]
 801020a:	784a      	ldrb	r2, [r1, #1]
 801020c:	1c4b      	adds	r3, r1, #1
 801020e:	9303      	str	r3, [sp, #12]
 8010210:	b342      	cbz	r2, 8010264 <__hexnan+0x88>
 8010212:	4610      	mov	r0, r2
 8010214:	9105      	str	r1, [sp, #20]
 8010216:	9204      	str	r2, [sp, #16]
 8010218:	f7ff fd95 	bl	800fd46 <__hexdig_fun>
 801021c:	2800      	cmp	r0, #0
 801021e:	d151      	bne.n	80102c4 <__hexnan+0xe8>
 8010220:	9a04      	ldr	r2, [sp, #16]
 8010222:	9905      	ldr	r1, [sp, #20]
 8010224:	2a20      	cmp	r2, #32
 8010226:	d818      	bhi.n	801025a <__hexnan+0x7e>
 8010228:	9b02      	ldr	r3, [sp, #8]
 801022a:	459b      	cmp	fp, r3
 801022c:	dd13      	ble.n	8010256 <__hexnan+0x7a>
 801022e:	454c      	cmp	r4, r9
 8010230:	d206      	bcs.n	8010240 <__hexnan+0x64>
 8010232:	2d07      	cmp	r5, #7
 8010234:	dc04      	bgt.n	8010240 <__hexnan+0x64>
 8010236:	462a      	mov	r2, r5
 8010238:	4649      	mov	r1, r9
 801023a:	4620      	mov	r0, r4
 801023c:	f7ff ffa8 	bl	8010190 <L_shift>
 8010240:	4544      	cmp	r4, r8
 8010242:	d952      	bls.n	80102ea <__hexnan+0x10e>
 8010244:	2300      	movs	r3, #0
 8010246:	f1a4 0904 	sub.w	r9, r4, #4
 801024a:	f844 3c04 	str.w	r3, [r4, #-4]
 801024e:	461d      	mov	r5, r3
 8010250:	464c      	mov	r4, r9
 8010252:	f8cd b008 	str.w	fp, [sp, #8]
 8010256:	9903      	ldr	r1, [sp, #12]
 8010258:	e7d7      	b.n	801020a <__hexnan+0x2e>
 801025a:	2a29      	cmp	r2, #41	@ 0x29
 801025c:	d157      	bne.n	801030e <__hexnan+0x132>
 801025e:	3102      	adds	r1, #2
 8010260:	f8ca 1000 	str.w	r1, [sl]
 8010264:	f1bb 0f00 	cmp.w	fp, #0
 8010268:	d051      	beq.n	801030e <__hexnan+0x132>
 801026a:	454c      	cmp	r4, r9
 801026c:	d206      	bcs.n	801027c <__hexnan+0xa0>
 801026e:	2d07      	cmp	r5, #7
 8010270:	dc04      	bgt.n	801027c <__hexnan+0xa0>
 8010272:	462a      	mov	r2, r5
 8010274:	4649      	mov	r1, r9
 8010276:	4620      	mov	r0, r4
 8010278:	f7ff ff8a 	bl	8010190 <L_shift>
 801027c:	4544      	cmp	r4, r8
 801027e:	d936      	bls.n	80102ee <__hexnan+0x112>
 8010280:	4623      	mov	r3, r4
 8010282:	f1a8 0204 	sub.w	r2, r8, #4
 8010286:	f853 1b04 	ldr.w	r1, [r3], #4
 801028a:	429f      	cmp	r7, r3
 801028c:	f842 1f04 	str.w	r1, [r2, #4]!
 8010290:	d2f9      	bcs.n	8010286 <__hexnan+0xaa>
 8010292:	1b3b      	subs	r3, r7, r4
 8010294:	f023 0303 	bic.w	r3, r3, #3
 8010298:	3304      	adds	r3, #4
 801029a:	3401      	adds	r4, #1
 801029c:	3e03      	subs	r6, #3
 801029e:	42b4      	cmp	r4, r6
 80102a0:	bf88      	it	hi
 80102a2:	2304      	movhi	r3, #4
 80102a4:	2200      	movs	r2, #0
 80102a6:	4443      	add	r3, r8
 80102a8:	f843 2b04 	str.w	r2, [r3], #4
 80102ac:	429f      	cmp	r7, r3
 80102ae:	d2fb      	bcs.n	80102a8 <__hexnan+0xcc>
 80102b0:	683b      	ldr	r3, [r7, #0]
 80102b2:	b91b      	cbnz	r3, 80102bc <__hexnan+0xe0>
 80102b4:	4547      	cmp	r7, r8
 80102b6:	d128      	bne.n	801030a <__hexnan+0x12e>
 80102b8:	2301      	movs	r3, #1
 80102ba:	603b      	str	r3, [r7, #0]
 80102bc:	2005      	movs	r0, #5
 80102be:	b007      	add	sp, #28
 80102c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102c4:	3501      	adds	r5, #1
 80102c6:	2d08      	cmp	r5, #8
 80102c8:	f10b 0b01 	add.w	fp, fp, #1
 80102cc:	dd06      	ble.n	80102dc <__hexnan+0x100>
 80102ce:	4544      	cmp	r4, r8
 80102d0:	d9c1      	bls.n	8010256 <__hexnan+0x7a>
 80102d2:	2300      	movs	r3, #0
 80102d4:	2501      	movs	r5, #1
 80102d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80102da:	3c04      	subs	r4, #4
 80102dc:	6822      	ldr	r2, [r4, #0]
 80102de:	f000 000f 	and.w	r0, r0, #15
 80102e2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80102e6:	6020      	str	r0, [r4, #0]
 80102e8:	e7b5      	b.n	8010256 <__hexnan+0x7a>
 80102ea:	2508      	movs	r5, #8
 80102ec:	e7b3      	b.n	8010256 <__hexnan+0x7a>
 80102ee:	9b01      	ldr	r3, [sp, #4]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d0dd      	beq.n	80102b0 <__hexnan+0xd4>
 80102f4:	f04f 32ff 	mov.w	r2, #4294967295
 80102f8:	f1c3 0320 	rsb	r3, r3, #32
 80102fc:	40da      	lsrs	r2, r3
 80102fe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010302:	4013      	ands	r3, r2
 8010304:	f846 3c04 	str.w	r3, [r6, #-4]
 8010308:	e7d2      	b.n	80102b0 <__hexnan+0xd4>
 801030a:	3f04      	subs	r7, #4
 801030c:	e7d0      	b.n	80102b0 <__hexnan+0xd4>
 801030e:	2004      	movs	r0, #4
 8010310:	e7d5      	b.n	80102be <__hexnan+0xe2>
	...

08010314 <_findenv_r>:
 8010314:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010318:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8010388 <_findenv_r+0x74>
 801031c:	4606      	mov	r6, r0
 801031e:	4689      	mov	r9, r1
 8010320:	4617      	mov	r7, r2
 8010322:	f001 f851 	bl	80113c8 <__env_lock>
 8010326:	f8da 4000 	ldr.w	r4, [sl]
 801032a:	b134      	cbz	r4, 801033a <_findenv_r+0x26>
 801032c:	464b      	mov	r3, r9
 801032e:	4698      	mov	r8, r3
 8010330:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010334:	b13a      	cbz	r2, 8010346 <_findenv_r+0x32>
 8010336:	2a3d      	cmp	r2, #61	@ 0x3d
 8010338:	d1f9      	bne.n	801032e <_findenv_r+0x1a>
 801033a:	4630      	mov	r0, r6
 801033c:	f001 f84a 	bl	80113d4 <__env_unlock>
 8010340:	2000      	movs	r0, #0
 8010342:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010346:	eba8 0809 	sub.w	r8, r8, r9
 801034a:	46a3      	mov	fp, r4
 801034c:	f854 0b04 	ldr.w	r0, [r4], #4
 8010350:	2800      	cmp	r0, #0
 8010352:	d0f2      	beq.n	801033a <_findenv_r+0x26>
 8010354:	4642      	mov	r2, r8
 8010356:	4649      	mov	r1, r9
 8010358:	f7fd feda 	bl	800e110 <strncmp>
 801035c:	2800      	cmp	r0, #0
 801035e:	d1f4      	bne.n	801034a <_findenv_r+0x36>
 8010360:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010364:	eb03 0508 	add.w	r5, r3, r8
 8010368:	f813 3008 	ldrb.w	r3, [r3, r8]
 801036c:	2b3d      	cmp	r3, #61	@ 0x3d
 801036e:	d1ec      	bne.n	801034a <_findenv_r+0x36>
 8010370:	f8da 3000 	ldr.w	r3, [sl]
 8010374:	4630      	mov	r0, r6
 8010376:	ebab 0303 	sub.w	r3, fp, r3
 801037a:	109b      	asrs	r3, r3, #2
 801037c:	603b      	str	r3, [r7, #0]
 801037e:	f001 f829 	bl	80113d4 <__env_unlock>
 8010382:	1c68      	adds	r0, r5, #1
 8010384:	e7dd      	b.n	8010342 <_findenv_r+0x2e>
 8010386:	bf00      	nop
 8010388:	200000dc 	.word	0x200000dc

0801038c <_getenv_r>:
 801038c:	b507      	push	{r0, r1, r2, lr}
 801038e:	aa01      	add	r2, sp, #4
 8010390:	f7ff ffc0 	bl	8010314 <_findenv_r>
 8010394:	b003      	add	sp, #12
 8010396:	f85d fb04 	ldr.w	pc, [sp], #4

0801039a <__ascii_mbtowc>:
 801039a:	b082      	sub	sp, #8
 801039c:	b901      	cbnz	r1, 80103a0 <__ascii_mbtowc+0x6>
 801039e:	a901      	add	r1, sp, #4
 80103a0:	b142      	cbz	r2, 80103b4 <__ascii_mbtowc+0x1a>
 80103a2:	b14b      	cbz	r3, 80103b8 <__ascii_mbtowc+0x1e>
 80103a4:	7813      	ldrb	r3, [r2, #0]
 80103a6:	600b      	str	r3, [r1, #0]
 80103a8:	7812      	ldrb	r2, [r2, #0]
 80103aa:	1e10      	subs	r0, r2, #0
 80103ac:	bf18      	it	ne
 80103ae:	2001      	movne	r0, #1
 80103b0:	b002      	add	sp, #8
 80103b2:	4770      	bx	lr
 80103b4:	4610      	mov	r0, r2
 80103b6:	e7fb      	b.n	80103b0 <__ascii_mbtowc+0x16>
 80103b8:	f06f 0001 	mvn.w	r0, #1
 80103bc:	e7f8      	b.n	80103b0 <__ascii_mbtowc+0x16>
	...

080103c0 <_Balloc>:
 80103c0:	b570      	push	{r4, r5, r6, lr}
 80103c2:	69c6      	ldr	r6, [r0, #28]
 80103c4:	4604      	mov	r4, r0
 80103c6:	460d      	mov	r5, r1
 80103c8:	b976      	cbnz	r6, 80103e8 <_Balloc+0x28>
 80103ca:	2010      	movs	r0, #16
 80103cc:	f7fc f97e 	bl	800c6cc <malloc>
 80103d0:	4602      	mov	r2, r0
 80103d2:	61e0      	str	r0, [r4, #28]
 80103d4:	b920      	cbnz	r0, 80103e0 <_Balloc+0x20>
 80103d6:	216b      	movs	r1, #107	@ 0x6b
 80103d8:	4b17      	ldr	r3, [pc, #92]	@ (8010438 <_Balloc+0x78>)
 80103da:	4818      	ldr	r0, [pc, #96]	@ (801043c <_Balloc+0x7c>)
 80103dc:	f7fe fda0 	bl	800ef20 <__assert_func>
 80103e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80103e4:	6006      	str	r6, [r0, #0]
 80103e6:	60c6      	str	r6, [r0, #12]
 80103e8:	69e6      	ldr	r6, [r4, #28]
 80103ea:	68f3      	ldr	r3, [r6, #12]
 80103ec:	b183      	cbz	r3, 8010410 <_Balloc+0x50>
 80103ee:	69e3      	ldr	r3, [r4, #28]
 80103f0:	68db      	ldr	r3, [r3, #12]
 80103f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80103f6:	b9b8      	cbnz	r0, 8010428 <_Balloc+0x68>
 80103f8:	2101      	movs	r1, #1
 80103fa:	fa01 f605 	lsl.w	r6, r1, r5
 80103fe:	1d72      	adds	r2, r6, #5
 8010400:	4620      	mov	r0, r4
 8010402:	0092      	lsls	r2, r2, #2
 8010404:	f000 ffcb 	bl	801139e <_calloc_r>
 8010408:	b160      	cbz	r0, 8010424 <_Balloc+0x64>
 801040a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801040e:	e00e      	b.n	801042e <_Balloc+0x6e>
 8010410:	2221      	movs	r2, #33	@ 0x21
 8010412:	2104      	movs	r1, #4
 8010414:	4620      	mov	r0, r4
 8010416:	f000 ffc2 	bl	801139e <_calloc_r>
 801041a:	69e3      	ldr	r3, [r4, #28]
 801041c:	60f0      	str	r0, [r6, #12]
 801041e:	68db      	ldr	r3, [r3, #12]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d1e4      	bne.n	80103ee <_Balloc+0x2e>
 8010424:	2000      	movs	r0, #0
 8010426:	bd70      	pop	{r4, r5, r6, pc}
 8010428:	6802      	ldr	r2, [r0, #0]
 801042a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801042e:	2300      	movs	r3, #0
 8010430:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010434:	e7f7      	b.n	8010426 <_Balloc+0x66>
 8010436:	bf00      	nop
 8010438:	08012083 	.word	0x08012083
 801043c:	080122bc 	.word	0x080122bc

08010440 <_Bfree>:
 8010440:	b570      	push	{r4, r5, r6, lr}
 8010442:	69c6      	ldr	r6, [r0, #28]
 8010444:	4605      	mov	r5, r0
 8010446:	460c      	mov	r4, r1
 8010448:	b976      	cbnz	r6, 8010468 <_Bfree+0x28>
 801044a:	2010      	movs	r0, #16
 801044c:	f7fc f93e 	bl	800c6cc <malloc>
 8010450:	4602      	mov	r2, r0
 8010452:	61e8      	str	r0, [r5, #28]
 8010454:	b920      	cbnz	r0, 8010460 <_Bfree+0x20>
 8010456:	218f      	movs	r1, #143	@ 0x8f
 8010458:	4b08      	ldr	r3, [pc, #32]	@ (801047c <_Bfree+0x3c>)
 801045a:	4809      	ldr	r0, [pc, #36]	@ (8010480 <_Bfree+0x40>)
 801045c:	f7fe fd60 	bl	800ef20 <__assert_func>
 8010460:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010464:	6006      	str	r6, [r0, #0]
 8010466:	60c6      	str	r6, [r0, #12]
 8010468:	b13c      	cbz	r4, 801047a <_Bfree+0x3a>
 801046a:	69eb      	ldr	r3, [r5, #28]
 801046c:	6862      	ldr	r2, [r4, #4]
 801046e:	68db      	ldr	r3, [r3, #12]
 8010470:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010474:	6021      	str	r1, [r4, #0]
 8010476:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801047a:	bd70      	pop	{r4, r5, r6, pc}
 801047c:	08012083 	.word	0x08012083
 8010480:	080122bc 	.word	0x080122bc

08010484 <__multadd>:
 8010484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010488:	4607      	mov	r7, r0
 801048a:	460c      	mov	r4, r1
 801048c:	461e      	mov	r6, r3
 801048e:	2000      	movs	r0, #0
 8010490:	690d      	ldr	r5, [r1, #16]
 8010492:	f101 0c14 	add.w	ip, r1, #20
 8010496:	f8dc 3000 	ldr.w	r3, [ip]
 801049a:	3001      	adds	r0, #1
 801049c:	b299      	uxth	r1, r3
 801049e:	fb02 6101 	mla	r1, r2, r1, r6
 80104a2:	0c1e      	lsrs	r6, r3, #16
 80104a4:	0c0b      	lsrs	r3, r1, #16
 80104a6:	fb02 3306 	mla	r3, r2, r6, r3
 80104aa:	b289      	uxth	r1, r1
 80104ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80104b0:	4285      	cmp	r5, r0
 80104b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80104b6:	f84c 1b04 	str.w	r1, [ip], #4
 80104ba:	dcec      	bgt.n	8010496 <__multadd+0x12>
 80104bc:	b30e      	cbz	r6, 8010502 <__multadd+0x7e>
 80104be:	68a3      	ldr	r3, [r4, #8]
 80104c0:	42ab      	cmp	r3, r5
 80104c2:	dc19      	bgt.n	80104f8 <__multadd+0x74>
 80104c4:	6861      	ldr	r1, [r4, #4]
 80104c6:	4638      	mov	r0, r7
 80104c8:	3101      	adds	r1, #1
 80104ca:	f7ff ff79 	bl	80103c0 <_Balloc>
 80104ce:	4680      	mov	r8, r0
 80104d0:	b928      	cbnz	r0, 80104de <__multadd+0x5a>
 80104d2:	4602      	mov	r2, r0
 80104d4:	21ba      	movs	r1, #186	@ 0xba
 80104d6:	4b0c      	ldr	r3, [pc, #48]	@ (8010508 <__multadd+0x84>)
 80104d8:	480c      	ldr	r0, [pc, #48]	@ (801050c <__multadd+0x88>)
 80104da:	f7fe fd21 	bl	800ef20 <__assert_func>
 80104de:	6922      	ldr	r2, [r4, #16]
 80104e0:	f104 010c 	add.w	r1, r4, #12
 80104e4:	3202      	adds	r2, #2
 80104e6:	0092      	lsls	r2, r2, #2
 80104e8:	300c      	adds	r0, #12
 80104ea:	f7fe fd00 	bl	800eeee <memcpy>
 80104ee:	4621      	mov	r1, r4
 80104f0:	4638      	mov	r0, r7
 80104f2:	f7ff ffa5 	bl	8010440 <_Bfree>
 80104f6:	4644      	mov	r4, r8
 80104f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80104fc:	3501      	adds	r5, #1
 80104fe:	615e      	str	r6, [r3, #20]
 8010500:	6125      	str	r5, [r4, #16]
 8010502:	4620      	mov	r0, r4
 8010504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010508:	0801224b 	.word	0x0801224b
 801050c:	080122bc 	.word	0x080122bc

08010510 <__s2b>:
 8010510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010514:	4615      	mov	r5, r2
 8010516:	2209      	movs	r2, #9
 8010518:	461f      	mov	r7, r3
 801051a:	3308      	adds	r3, #8
 801051c:	460c      	mov	r4, r1
 801051e:	fb93 f3f2 	sdiv	r3, r3, r2
 8010522:	4606      	mov	r6, r0
 8010524:	2201      	movs	r2, #1
 8010526:	2100      	movs	r1, #0
 8010528:	429a      	cmp	r2, r3
 801052a:	db09      	blt.n	8010540 <__s2b+0x30>
 801052c:	4630      	mov	r0, r6
 801052e:	f7ff ff47 	bl	80103c0 <_Balloc>
 8010532:	b940      	cbnz	r0, 8010546 <__s2b+0x36>
 8010534:	4602      	mov	r2, r0
 8010536:	21d3      	movs	r1, #211	@ 0xd3
 8010538:	4b18      	ldr	r3, [pc, #96]	@ (801059c <__s2b+0x8c>)
 801053a:	4819      	ldr	r0, [pc, #100]	@ (80105a0 <__s2b+0x90>)
 801053c:	f7fe fcf0 	bl	800ef20 <__assert_func>
 8010540:	0052      	lsls	r2, r2, #1
 8010542:	3101      	adds	r1, #1
 8010544:	e7f0      	b.n	8010528 <__s2b+0x18>
 8010546:	9b08      	ldr	r3, [sp, #32]
 8010548:	2d09      	cmp	r5, #9
 801054a:	6143      	str	r3, [r0, #20]
 801054c:	f04f 0301 	mov.w	r3, #1
 8010550:	6103      	str	r3, [r0, #16]
 8010552:	dd16      	ble.n	8010582 <__s2b+0x72>
 8010554:	f104 0909 	add.w	r9, r4, #9
 8010558:	46c8      	mov	r8, r9
 801055a:	442c      	add	r4, r5
 801055c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010560:	4601      	mov	r1, r0
 8010562:	220a      	movs	r2, #10
 8010564:	4630      	mov	r0, r6
 8010566:	3b30      	subs	r3, #48	@ 0x30
 8010568:	f7ff ff8c 	bl	8010484 <__multadd>
 801056c:	45a0      	cmp	r8, r4
 801056e:	d1f5      	bne.n	801055c <__s2b+0x4c>
 8010570:	f1a5 0408 	sub.w	r4, r5, #8
 8010574:	444c      	add	r4, r9
 8010576:	1b2d      	subs	r5, r5, r4
 8010578:	1963      	adds	r3, r4, r5
 801057a:	42bb      	cmp	r3, r7
 801057c:	db04      	blt.n	8010588 <__s2b+0x78>
 801057e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010582:	2509      	movs	r5, #9
 8010584:	340a      	adds	r4, #10
 8010586:	e7f6      	b.n	8010576 <__s2b+0x66>
 8010588:	f814 3b01 	ldrb.w	r3, [r4], #1
 801058c:	4601      	mov	r1, r0
 801058e:	220a      	movs	r2, #10
 8010590:	4630      	mov	r0, r6
 8010592:	3b30      	subs	r3, #48	@ 0x30
 8010594:	f7ff ff76 	bl	8010484 <__multadd>
 8010598:	e7ee      	b.n	8010578 <__s2b+0x68>
 801059a:	bf00      	nop
 801059c:	0801224b 	.word	0x0801224b
 80105a0:	080122bc 	.word	0x080122bc

080105a4 <__hi0bits>:
 80105a4:	4603      	mov	r3, r0
 80105a6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80105aa:	bf3a      	itte	cc
 80105ac:	0403      	lslcc	r3, r0, #16
 80105ae:	2010      	movcc	r0, #16
 80105b0:	2000      	movcs	r0, #0
 80105b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80105b6:	bf3c      	itt	cc
 80105b8:	021b      	lslcc	r3, r3, #8
 80105ba:	3008      	addcc	r0, #8
 80105bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80105c0:	bf3c      	itt	cc
 80105c2:	011b      	lslcc	r3, r3, #4
 80105c4:	3004      	addcc	r0, #4
 80105c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80105ca:	bf3c      	itt	cc
 80105cc:	009b      	lslcc	r3, r3, #2
 80105ce:	3002      	addcc	r0, #2
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	db05      	blt.n	80105e0 <__hi0bits+0x3c>
 80105d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80105d8:	f100 0001 	add.w	r0, r0, #1
 80105dc:	bf08      	it	eq
 80105de:	2020      	moveq	r0, #32
 80105e0:	4770      	bx	lr

080105e2 <__lo0bits>:
 80105e2:	6803      	ldr	r3, [r0, #0]
 80105e4:	4602      	mov	r2, r0
 80105e6:	f013 0007 	ands.w	r0, r3, #7
 80105ea:	d00b      	beq.n	8010604 <__lo0bits+0x22>
 80105ec:	07d9      	lsls	r1, r3, #31
 80105ee:	d421      	bmi.n	8010634 <__lo0bits+0x52>
 80105f0:	0798      	lsls	r0, r3, #30
 80105f2:	bf49      	itett	mi
 80105f4:	085b      	lsrmi	r3, r3, #1
 80105f6:	089b      	lsrpl	r3, r3, #2
 80105f8:	2001      	movmi	r0, #1
 80105fa:	6013      	strmi	r3, [r2, #0]
 80105fc:	bf5c      	itt	pl
 80105fe:	2002      	movpl	r0, #2
 8010600:	6013      	strpl	r3, [r2, #0]
 8010602:	4770      	bx	lr
 8010604:	b299      	uxth	r1, r3
 8010606:	b909      	cbnz	r1, 801060c <__lo0bits+0x2a>
 8010608:	2010      	movs	r0, #16
 801060a:	0c1b      	lsrs	r3, r3, #16
 801060c:	b2d9      	uxtb	r1, r3
 801060e:	b909      	cbnz	r1, 8010614 <__lo0bits+0x32>
 8010610:	3008      	adds	r0, #8
 8010612:	0a1b      	lsrs	r3, r3, #8
 8010614:	0719      	lsls	r1, r3, #28
 8010616:	bf04      	itt	eq
 8010618:	091b      	lsreq	r3, r3, #4
 801061a:	3004      	addeq	r0, #4
 801061c:	0799      	lsls	r1, r3, #30
 801061e:	bf04      	itt	eq
 8010620:	089b      	lsreq	r3, r3, #2
 8010622:	3002      	addeq	r0, #2
 8010624:	07d9      	lsls	r1, r3, #31
 8010626:	d403      	bmi.n	8010630 <__lo0bits+0x4e>
 8010628:	085b      	lsrs	r3, r3, #1
 801062a:	f100 0001 	add.w	r0, r0, #1
 801062e:	d003      	beq.n	8010638 <__lo0bits+0x56>
 8010630:	6013      	str	r3, [r2, #0]
 8010632:	4770      	bx	lr
 8010634:	2000      	movs	r0, #0
 8010636:	4770      	bx	lr
 8010638:	2020      	movs	r0, #32
 801063a:	4770      	bx	lr

0801063c <__i2b>:
 801063c:	b510      	push	{r4, lr}
 801063e:	460c      	mov	r4, r1
 8010640:	2101      	movs	r1, #1
 8010642:	f7ff febd 	bl	80103c0 <_Balloc>
 8010646:	4602      	mov	r2, r0
 8010648:	b928      	cbnz	r0, 8010656 <__i2b+0x1a>
 801064a:	f240 1145 	movw	r1, #325	@ 0x145
 801064e:	4b04      	ldr	r3, [pc, #16]	@ (8010660 <__i2b+0x24>)
 8010650:	4804      	ldr	r0, [pc, #16]	@ (8010664 <__i2b+0x28>)
 8010652:	f7fe fc65 	bl	800ef20 <__assert_func>
 8010656:	2301      	movs	r3, #1
 8010658:	6144      	str	r4, [r0, #20]
 801065a:	6103      	str	r3, [r0, #16]
 801065c:	bd10      	pop	{r4, pc}
 801065e:	bf00      	nop
 8010660:	0801224b 	.word	0x0801224b
 8010664:	080122bc 	.word	0x080122bc

08010668 <__multiply>:
 8010668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801066c:	4614      	mov	r4, r2
 801066e:	690a      	ldr	r2, [r1, #16]
 8010670:	6923      	ldr	r3, [r4, #16]
 8010672:	460f      	mov	r7, r1
 8010674:	429a      	cmp	r2, r3
 8010676:	bfa2      	ittt	ge
 8010678:	4623      	movge	r3, r4
 801067a:	460c      	movge	r4, r1
 801067c:	461f      	movge	r7, r3
 801067e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010682:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010686:	68a3      	ldr	r3, [r4, #8]
 8010688:	6861      	ldr	r1, [r4, #4]
 801068a:	eb0a 0609 	add.w	r6, sl, r9
 801068e:	42b3      	cmp	r3, r6
 8010690:	b085      	sub	sp, #20
 8010692:	bfb8      	it	lt
 8010694:	3101      	addlt	r1, #1
 8010696:	f7ff fe93 	bl	80103c0 <_Balloc>
 801069a:	b930      	cbnz	r0, 80106aa <__multiply+0x42>
 801069c:	4602      	mov	r2, r0
 801069e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80106a2:	4b43      	ldr	r3, [pc, #268]	@ (80107b0 <__multiply+0x148>)
 80106a4:	4843      	ldr	r0, [pc, #268]	@ (80107b4 <__multiply+0x14c>)
 80106a6:	f7fe fc3b 	bl	800ef20 <__assert_func>
 80106aa:	f100 0514 	add.w	r5, r0, #20
 80106ae:	462b      	mov	r3, r5
 80106b0:	2200      	movs	r2, #0
 80106b2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80106b6:	4543      	cmp	r3, r8
 80106b8:	d321      	bcc.n	80106fe <__multiply+0x96>
 80106ba:	f107 0114 	add.w	r1, r7, #20
 80106be:	f104 0214 	add.w	r2, r4, #20
 80106c2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80106c6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80106ca:	9302      	str	r3, [sp, #8]
 80106cc:	1b13      	subs	r3, r2, r4
 80106ce:	3b15      	subs	r3, #21
 80106d0:	f023 0303 	bic.w	r3, r3, #3
 80106d4:	3304      	adds	r3, #4
 80106d6:	f104 0715 	add.w	r7, r4, #21
 80106da:	42ba      	cmp	r2, r7
 80106dc:	bf38      	it	cc
 80106de:	2304      	movcc	r3, #4
 80106e0:	9301      	str	r3, [sp, #4]
 80106e2:	9b02      	ldr	r3, [sp, #8]
 80106e4:	9103      	str	r1, [sp, #12]
 80106e6:	428b      	cmp	r3, r1
 80106e8:	d80c      	bhi.n	8010704 <__multiply+0x9c>
 80106ea:	2e00      	cmp	r6, #0
 80106ec:	dd03      	ble.n	80106f6 <__multiply+0x8e>
 80106ee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d05a      	beq.n	80107ac <__multiply+0x144>
 80106f6:	6106      	str	r6, [r0, #16]
 80106f8:	b005      	add	sp, #20
 80106fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106fe:	f843 2b04 	str.w	r2, [r3], #4
 8010702:	e7d8      	b.n	80106b6 <__multiply+0x4e>
 8010704:	f8b1 a000 	ldrh.w	sl, [r1]
 8010708:	f1ba 0f00 	cmp.w	sl, #0
 801070c:	d023      	beq.n	8010756 <__multiply+0xee>
 801070e:	46a9      	mov	r9, r5
 8010710:	f04f 0c00 	mov.w	ip, #0
 8010714:	f104 0e14 	add.w	lr, r4, #20
 8010718:	f85e 7b04 	ldr.w	r7, [lr], #4
 801071c:	f8d9 3000 	ldr.w	r3, [r9]
 8010720:	fa1f fb87 	uxth.w	fp, r7
 8010724:	b29b      	uxth	r3, r3
 8010726:	fb0a 330b 	mla	r3, sl, fp, r3
 801072a:	4463      	add	r3, ip
 801072c:	f8d9 c000 	ldr.w	ip, [r9]
 8010730:	0c3f      	lsrs	r7, r7, #16
 8010732:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8010736:	fb0a c707 	mla	r7, sl, r7, ip
 801073a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801073e:	b29b      	uxth	r3, r3
 8010740:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010744:	4572      	cmp	r2, lr
 8010746:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801074a:	f849 3b04 	str.w	r3, [r9], #4
 801074e:	d8e3      	bhi.n	8010718 <__multiply+0xb0>
 8010750:	9b01      	ldr	r3, [sp, #4]
 8010752:	f845 c003 	str.w	ip, [r5, r3]
 8010756:	9b03      	ldr	r3, [sp, #12]
 8010758:	3104      	adds	r1, #4
 801075a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801075e:	f1b9 0f00 	cmp.w	r9, #0
 8010762:	d021      	beq.n	80107a8 <__multiply+0x140>
 8010764:	46ae      	mov	lr, r5
 8010766:	f04f 0a00 	mov.w	sl, #0
 801076a:	682b      	ldr	r3, [r5, #0]
 801076c:	f104 0c14 	add.w	ip, r4, #20
 8010770:	f8bc b000 	ldrh.w	fp, [ip]
 8010774:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8010778:	b29b      	uxth	r3, r3
 801077a:	fb09 770b 	mla	r7, r9, fp, r7
 801077e:	4457      	add	r7, sl
 8010780:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010784:	f84e 3b04 	str.w	r3, [lr], #4
 8010788:	f85c 3b04 	ldr.w	r3, [ip], #4
 801078c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010790:	f8be 3000 	ldrh.w	r3, [lr]
 8010794:	4562      	cmp	r2, ip
 8010796:	fb09 330a 	mla	r3, r9, sl, r3
 801079a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801079e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80107a2:	d8e5      	bhi.n	8010770 <__multiply+0x108>
 80107a4:	9f01      	ldr	r7, [sp, #4]
 80107a6:	51eb      	str	r3, [r5, r7]
 80107a8:	3504      	adds	r5, #4
 80107aa:	e79a      	b.n	80106e2 <__multiply+0x7a>
 80107ac:	3e01      	subs	r6, #1
 80107ae:	e79c      	b.n	80106ea <__multiply+0x82>
 80107b0:	0801224b 	.word	0x0801224b
 80107b4:	080122bc 	.word	0x080122bc

080107b8 <__pow5mult>:
 80107b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80107bc:	4615      	mov	r5, r2
 80107be:	f012 0203 	ands.w	r2, r2, #3
 80107c2:	4607      	mov	r7, r0
 80107c4:	460e      	mov	r6, r1
 80107c6:	d007      	beq.n	80107d8 <__pow5mult+0x20>
 80107c8:	4c25      	ldr	r4, [pc, #148]	@ (8010860 <__pow5mult+0xa8>)
 80107ca:	3a01      	subs	r2, #1
 80107cc:	2300      	movs	r3, #0
 80107ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80107d2:	f7ff fe57 	bl	8010484 <__multadd>
 80107d6:	4606      	mov	r6, r0
 80107d8:	10ad      	asrs	r5, r5, #2
 80107da:	d03d      	beq.n	8010858 <__pow5mult+0xa0>
 80107dc:	69fc      	ldr	r4, [r7, #28]
 80107de:	b97c      	cbnz	r4, 8010800 <__pow5mult+0x48>
 80107e0:	2010      	movs	r0, #16
 80107e2:	f7fb ff73 	bl	800c6cc <malloc>
 80107e6:	4602      	mov	r2, r0
 80107e8:	61f8      	str	r0, [r7, #28]
 80107ea:	b928      	cbnz	r0, 80107f8 <__pow5mult+0x40>
 80107ec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80107f0:	4b1c      	ldr	r3, [pc, #112]	@ (8010864 <__pow5mult+0xac>)
 80107f2:	481d      	ldr	r0, [pc, #116]	@ (8010868 <__pow5mult+0xb0>)
 80107f4:	f7fe fb94 	bl	800ef20 <__assert_func>
 80107f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80107fc:	6004      	str	r4, [r0, #0]
 80107fe:	60c4      	str	r4, [r0, #12]
 8010800:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010804:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010808:	b94c      	cbnz	r4, 801081e <__pow5mult+0x66>
 801080a:	f240 2171 	movw	r1, #625	@ 0x271
 801080e:	4638      	mov	r0, r7
 8010810:	f7ff ff14 	bl	801063c <__i2b>
 8010814:	2300      	movs	r3, #0
 8010816:	4604      	mov	r4, r0
 8010818:	f8c8 0008 	str.w	r0, [r8, #8]
 801081c:	6003      	str	r3, [r0, #0]
 801081e:	f04f 0900 	mov.w	r9, #0
 8010822:	07eb      	lsls	r3, r5, #31
 8010824:	d50a      	bpl.n	801083c <__pow5mult+0x84>
 8010826:	4631      	mov	r1, r6
 8010828:	4622      	mov	r2, r4
 801082a:	4638      	mov	r0, r7
 801082c:	f7ff ff1c 	bl	8010668 <__multiply>
 8010830:	4680      	mov	r8, r0
 8010832:	4631      	mov	r1, r6
 8010834:	4638      	mov	r0, r7
 8010836:	f7ff fe03 	bl	8010440 <_Bfree>
 801083a:	4646      	mov	r6, r8
 801083c:	106d      	asrs	r5, r5, #1
 801083e:	d00b      	beq.n	8010858 <__pow5mult+0xa0>
 8010840:	6820      	ldr	r0, [r4, #0]
 8010842:	b938      	cbnz	r0, 8010854 <__pow5mult+0x9c>
 8010844:	4622      	mov	r2, r4
 8010846:	4621      	mov	r1, r4
 8010848:	4638      	mov	r0, r7
 801084a:	f7ff ff0d 	bl	8010668 <__multiply>
 801084e:	6020      	str	r0, [r4, #0]
 8010850:	f8c0 9000 	str.w	r9, [r0]
 8010854:	4604      	mov	r4, r0
 8010856:	e7e4      	b.n	8010822 <__pow5mult+0x6a>
 8010858:	4630      	mov	r0, r6
 801085a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801085e:	bf00      	nop
 8010860:	08012318 	.word	0x08012318
 8010864:	08012083 	.word	0x08012083
 8010868:	080122bc 	.word	0x080122bc

0801086c <__lshift>:
 801086c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010870:	460c      	mov	r4, r1
 8010872:	4607      	mov	r7, r0
 8010874:	4691      	mov	r9, r2
 8010876:	6923      	ldr	r3, [r4, #16]
 8010878:	6849      	ldr	r1, [r1, #4]
 801087a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801087e:	68a3      	ldr	r3, [r4, #8]
 8010880:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010884:	f108 0601 	add.w	r6, r8, #1
 8010888:	42b3      	cmp	r3, r6
 801088a:	db0b      	blt.n	80108a4 <__lshift+0x38>
 801088c:	4638      	mov	r0, r7
 801088e:	f7ff fd97 	bl	80103c0 <_Balloc>
 8010892:	4605      	mov	r5, r0
 8010894:	b948      	cbnz	r0, 80108aa <__lshift+0x3e>
 8010896:	4602      	mov	r2, r0
 8010898:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801089c:	4b27      	ldr	r3, [pc, #156]	@ (801093c <__lshift+0xd0>)
 801089e:	4828      	ldr	r0, [pc, #160]	@ (8010940 <__lshift+0xd4>)
 80108a0:	f7fe fb3e 	bl	800ef20 <__assert_func>
 80108a4:	3101      	adds	r1, #1
 80108a6:	005b      	lsls	r3, r3, #1
 80108a8:	e7ee      	b.n	8010888 <__lshift+0x1c>
 80108aa:	2300      	movs	r3, #0
 80108ac:	f100 0114 	add.w	r1, r0, #20
 80108b0:	f100 0210 	add.w	r2, r0, #16
 80108b4:	4618      	mov	r0, r3
 80108b6:	4553      	cmp	r3, sl
 80108b8:	db33      	blt.n	8010922 <__lshift+0xb6>
 80108ba:	6920      	ldr	r0, [r4, #16]
 80108bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80108c0:	f104 0314 	add.w	r3, r4, #20
 80108c4:	f019 091f 	ands.w	r9, r9, #31
 80108c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80108cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80108d0:	d02b      	beq.n	801092a <__lshift+0xbe>
 80108d2:	468a      	mov	sl, r1
 80108d4:	2200      	movs	r2, #0
 80108d6:	f1c9 0e20 	rsb	lr, r9, #32
 80108da:	6818      	ldr	r0, [r3, #0]
 80108dc:	fa00 f009 	lsl.w	r0, r0, r9
 80108e0:	4310      	orrs	r0, r2
 80108e2:	f84a 0b04 	str.w	r0, [sl], #4
 80108e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80108ea:	459c      	cmp	ip, r3
 80108ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80108f0:	d8f3      	bhi.n	80108da <__lshift+0x6e>
 80108f2:	ebac 0304 	sub.w	r3, ip, r4
 80108f6:	3b15      	subs	r3, #21
 80108f8:	f023 0303 	bic.w	r3, r3, #3
 80108fc:	3304      	adds	r3, #4
 80108fe:	f104 0015 	add.w	r0, r4, #21
 8010902:	4584      	cmp	ip, r0
 8010904:	bf38      	it	cc
 8010906:	2304      	movcc	r3, #4
 8010908:	50ca      	str	r2, [r1, r3]
 801090a:	b10a      	cbz	r2, 8010910 <__lshift+0xa4>
 801090c:	f108 0602 	add.w	r6, r8, #2
 8010910:	3e01      	subs	r6, #1
 8010912:	4638      	mov	r0, r7
 8010914:	4621      	mov	r1, r4
 8010916:	612e      	str	r6, [r5, #16]
 8010918:	f7ff fd92 	bl	8010440 <_Bfree>
 801091c:	4628      	mov	r0, r5
 801091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010922:	f842 0f04 	str.w	r0, [r2, #4]!
 8010926:	3301      	adds	r3, #1
 8010928:	e7c5      	b.n	80108b6 <__lshift+0x4a>
 801092a:	3904      	subs	r1, #4
 801092c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010930:	459c      	cmp	ip, r3
 8010932:	f841 2f04 	str.w	r2, [r1, #4]!
 8010936:	d8f9      	bhi.n	801092c <__lshift+0xc0>
 8010938:	e7ea      	b.n	8010910 <__lshift+0xa4>
 801093a:	bf00      	nop
 801093c:	0801224b 	.word	0x0801224b
 8010940:	080122bc 	.word	0x080122bc

08010944 <__mcmp>:
 8010944:	4603      	mov	r3, r0
 8010946:	690a      	ldr	r2, [r1, #16]
 8010948:	6900      	ldr	r0, [r0, #16]
 801094a:	b530      	push	{r4, r5, lr}
 801094c:	1a80      	subs	r0, r0, r2
 801094e:	d10e      	bne.n	801096e <__mcmp+0x2a>
 8010950:	3314      	adds	r3, #20
 8010952:	3114      	adds	r1, #20
 8010954:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010958:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801095c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010960:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010964:	4295      	cmp	r5, r2
 8010966:	d003      	beq.n	8010970 <__mcmp+0x2c>
 8010968:	d205      	bcs.n	8010976 <__mcmp+0x32>
 801096a:	f04f 30ff 	mov.w	r0, #4294967295
 801096e:	bd30      	pop	{r4, r5, pc}
 8010970:	42a3      	cmp	r3, r4
 8010972:	d3f3      	bcc.n	801095c <__mcmp+0x18>
 8010974:	e7fb      	b.n	801096e <__mcmp+0x2a>
 8010976:	2001      	movs	r0, #1
 8010978:	e7f9      	b.n	801096e <__mcmp+0x2a>
	...

0801097c <__mdiff>:
 801097c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010980:	4689      	mov	r9, r1
 8010982:	4606      	mov	r6, r0
 8010984:	4611      	mov	r1, r2
 8010986:	4648      	mov	r0, r9
 8010988:	4614      	mov	r4, r2
 801098a:	f7ff ffdb 	bl	8010944 <__mcmp>
 801098e:	1e05      	subs	r5, r0, #0
 8010990:	d112      	bne.n	80109b8 <__mdiff+0x3c>
 8010992:	4629      	mov	r1, r5
 8010994:	4630      	mov	r0, r6
 8010996:	f7ff fd13 	bl	80103c0 <_Balloc>
 801099a:	4602      	mov	r2, r0
 801099c:	b928      	cbnz	r0, 80109aa <__mdiff+0x2e>
 801099e:	f240 2137 	movw	r1, #567	@ 0x237
 80109a2:	4b3e      	ldr	r3, [pc, #248]	@ (8010a9c <__mdiff+0x120>)
 80109a4:	483e      	ldr	r0, [pc, #248]	@ (8010aa0 <__mdiff+0x124>)
 80109a6:	f7fe fabb 	bl	800ef20 <__assert_func>
 80109aa:	2301      	movs	r3, #1
 80109ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80109b0:	4610      	mov	r0, r2
 80109b2:	b003      	add	sp, #12
 80109b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109b8:	bfbc      	itt	lt
 80109ba:	464b      	movlt	r3, r9
 80109bc:	46a1      	movlt	r9, r4
 80109be:	4630      	mov	r0, r6
 80109c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80109c4:	bfba      	itte	lt
 80109c6:	461c      	movlt	r4, r3
 80109c8:	2501      	movlt	r5, #1
 80109ca:	2500      	movge	r5, #0
 80109cc:	f7ff fcf8 	bl	80103c0 <_Balloc>
 80109d0:	4602      	mov	r2, r0
 80109d2:	b918      	cbnz	r0, 80109dc <__mdiff+0x60>
 80109d4:	f240 2145 	movw	r1, #581	@ 0x245
 80109d8:	4b30      	ldr	r3, [pc, #192]	@ (8010a9c <__mdiff+0x120>)
 80109da:	e7e3      	b.n	80109a4 <__mdiff+0x28>
 80109dc:	f100 0b14 	add.w	fp, r0, #20
 80109e0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80109e4:	f109 0310 	add.w	r3, r9, #16
 80109e8:	60c5      	str	r5, [r0, #12]
 80109ea:	f04f 0c00 	mov.w	ip, #0
 80109ee:	f109 0514 	add.w	r5, r9, #20
 80109f2:	46d9      	mov	r9, fp
 80109f4:	6926      	ldr	r6, [r4, #16]
 80109f6:	f104 0e14 	add.w	lr, r4, #20
 80109fa:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80109fe:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010a02:	9301      	str	r3, [sp, #4]
 8010a04:	9b01      	ldr	r3, [sp, #4]
 8010a06:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010a0a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010a0e:	b281      	uxth	r1, r0
 8010a10:	9301      	str	r3, [sp, #4]
 8010a12:	fa1f f38a 	uxth.w	r3, sl
 8010a16:	1a5b      	subs	r3, r3, r1
 8010a18:	0c00      	lsrs	r0, r0, #16
 8010a1a:	4463      	add	r3, ip
 8010a1c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010a20:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010a24:	b29b      	uxth	r3, r3
 8010a26:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010a2a:	4576      	cmp	r6, lr
 8010a2c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010a30:	f849 3b04 	str.w	r3, [r9], #4
 8010a34:	d8e6      	bhi.n	8010a04 <__mdiff+0x88>
 8010a36:	1b33      	subs	r3, r6, r4
 8010a38:	3b15      	subs	r3, #21
 8010a3a:	f023 0303 	bic.w	r3, r3, #3
 8010a3e:	3415      	adds	r4, #21
 8010a40:	3304      	adds	r3, #4
 8010a42:	42a6      	cmp	r6, r4
 8010a44:	bf38      	it	cc
 8010a46:	2304      	movcc	r3, #4
 8010a48:	441d      	add	r5, r3
 8010a4a:	445b      	add	r3, fp
 8010a4c:	461e      	mov	r6, r3
 8010a4e:	462c      	mov	r4, r5
 8010a50:	4544      	cmp	r4, r8
 8010a52:	d30e      	bcc.n	8010a72 <__mdiff+0xf6>
 8010a54:	f108 0103 	add.w	r1, r8, #3
 8010a58:	1b49      	subs	r1, r1, r5
 8010a5a:	f021 0103 	bic.w	r1, r1, #3
 8010a5e:	3d03      	subs	r5, #3
 8010a60:	45a8      	cmp	r8, r5
 8010a62:	bf38      	it	cc
 8010a64:	2100      	movcc	r1, #0
 8010a66:	440b      	add	r3, r1
 8010a68:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010a6c:	b199      	cbz	r1, 8010a96 <__mdiff+0x11a>
 8010a6e:	6117      	str	r7, [r2, #16]
 8010a70:	e79e      	b.n	80109b0 <__mdiff+0x34>
 8010a72:	46e6      	mov	lr, ip
 8010a74:	f854 1b04 	ldr.w	r1, [r4], #4
 8010a78:	fa1f fc81 	uxth.w	ip, r1
 8010a7c:	44f4      	add	ip, lr
 8010a7e:	0c08      	lsrs	r0, r1, #16
 8010a80:	4471      	add	r1, lr
 8010a82:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010a86:	b289      	uxth	r1, r1
 8010a88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010a8c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010a90:	f846 1b04 	str.w	r1, [r6], #4
 8010a94:	e7dc      	b.n	8010a50 <__mdiff+0xd4>
 8010a96:	3f01      	subs	r7, #1
 8010a98:	e7e6      	b.n	8010a68 <__mdiff+0xec>
 8010a9a:	bf00      	nop
 8010a9c:	0801224b 	.word	0x0801224b
 8010aa0:	080122bc 	.word	0x080122bc

08010aa4 <__ulp>:
 8010aa4:	4b0e      	ldr	r3, [pc, #56]	@ (8010ae0 <__ulp+0x3c>)
 8010aa6:	400b      	ands	r3, r1
 8010aa8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	dc08      	bgt.n	8010ac2 <__ulp+0x1e>
 8010ab0:	425b      	negs	r3, r3
 8010ab2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8010ab6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010aba:	da04      	bge.n	8010ac6 <__ulp+0x22>
 8010abc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010ac0:	4113      	asrs	r3, r2
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	e008      	b.n	8010ad8 <__ulp+0x34>
 8010ac6:	f1a2 0314 	sub.w	r3, r2, #20
 8010aca:	2b1e      	cmp	r3, #30
 8010acc:	bfd6      	itet	le
 8010ace:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8010ad2:	2201      	movgt	r2, #1
 8010ad4:	40da      	lsrle	r2, r3
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	4619      	mov	r1, r3
 8010ada:	4610      	mov	r0, r2
 8010adc:	4770      	bx	lr
 8010ade:	bf00      	nop
 8010ae0:	7ff00000 	.word	0x7ff00000

08010ae4 <__b2d>:
 8010ae4:	6902      	ldr	r2, [r0, #16]
 8010ae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ae8:	f100 0614 	add.w	r6, r0, #20
 8010aec:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8010af0:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8010af4:	4f1e      	ldr	r7, [pc, #120]	@ (8010b70 <__b2d+0x8c>)
 8010af6:	4620      	mov	r0, r4
 8010af8:	f7ff fd54 	bl	80105a4 <__hi0bits>
 8010afc:	4603      	mov	r3, r0
 8010afe:	f1c0 0020 	rsb	r0, r0, #32
 8010b02:	2b0a      	cmp	r3, #10
 8010b04:	f1a2 0504 	sub.w	r5, r2, #4
 8010b08:	6008      	str	r0, [r1, #0]
 8010b0a:	dc12      	bgt.n	8010b32 <__b2d+0x4e>
 8010b0c:	42ae      	cmp	r6, r5
 8010b0e:	bf2c      	ite	cs
 8010b10:	2200      	movcs	r2, #0
 8010b12:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8010b16:	f1c3 0c0b 	rsb	ip, r3, #11
 8010b1a:	3315      	adds	r3, #21
 8010b1c:	fa24 fe0c 	lsr.w	lr, r4, ip
 8010b20:	fa04 f303 	lsl.w	r3, r4, r3
 8010b24:	fa22 f20c 	lsr.w	r2, r2, ip
 8010b28:	ea4e 0107 	orr.w	r1, lr, r7
 8010b2c:	431a      	orrs	r2, r3
 8010b2e:	4610      	mov	r0, r2
 8010b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b32:	42ae      	cmp	r6, r5
 8010b34:	bf36      	itet	cc
 8010b36:	f1a2 0508 	subcc.w	r5, r2, #8
 8010b3a:	2200      	movcs	r2, #0
 8010b3c:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8010b40:	3b0b      	subs	r3, #11
 8010b42:	d012      	beq.n	8010b6a <__b2d+0x86>
 8010b44:	f1c3 0720 	rsb	r7, r3, #32
 8010b48:	fa22 f107 	lsr.w	r1, r2, r7
 8010b4c:	409c      	lsls	r4, r3
 8010b4e:	430c      	orrs	r4, r1
 8010b50:	42b5      	cmp	r5, r6
 8010b52:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8010b56:	bf94      	ite	ls
 8010b58:	2400      	movls	r4, #0
 8010b5a:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8010b5e:	409a      	lsls	r2, r3
 8010b60:	40fc      	lsrs	r4, r7
 8010b62:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8010b66:	4322      	orrs	r2, r4
 8010b68:	e7e1      	b.n	8010b2e <__b2d+0x4a>
 8010b6a:	ea44 0107 	orr.w	r1, r4, r7
 8010b6e:	e7de      	b.n	8010b2e <__b2d+0x4a>
 8010b70:	3ff00000 	.word	0x3ff00000

08010b74 <__d2b>:
 8010b74:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8010b78:	2101      	movs	r1, #1
 8010b7a:	4690      	mov	r8, r2
 8010b7c:	4699      	mov	r9, r3
 8010b7e:	9e08      	ldr	r6, [sp, #32]
 8010b80:	f7ff fc1e 	bl	80103c0 <_Balloc>
 8010b84:	4604      	mov	r4, r0
 8010b86:	b930      	cbnz	r0, 8010b96 <__d2b+0x22>
 8010b88:	4602      	mov	r2, r0
 8010b8a:	f240 310f 	movw	r1, #783	@ 0x30f
 8010b8e:	4b23      	ldr	r3, [pc, #140]	@ (8010c1c <__d2b+0xa8>)
 8010b90:	4823      	ldr	r0, [pc, #140]	@ (8010c20 <__d2b+0xac>)
 8010b92:	f7fe f9c5 	bl	800ef20 <__assert_func>
 8010b96:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010b9a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010b9e:	b10d      	cbz	r5, 8010ba4 <__d2b+0x30>
 8010ba0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010ba4:	9301      	str	r3, [sp, #4]
 8010ba6:	f1b8 0300 	subs.w	r3, r8, #0
 8010baa:	d024      	beq.n	8010bf6 <__d2b+0x82>
 8010bac:	4668      	mov	r0, sp
 8010bae:	9300      	str	r3, [sp, #0]
 8010bb0:	f7ff fd17 	bl	80105e2 <__lo0bits>
 8010bb4:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010bb8:	b1d8      	cbz	r0, 8010bf2 <__d2b+0x7e>
 8010bba:	f1c0 0320 	rsb	r3, r0, #32
 8010bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8010bc2:	430b      	orrs	r3, r1
 8010bc4:	40c2      	lsrs	r2, r0
 8010bc6:	6163      	str	r3, [r4, #20]
 8010bc8:	9201      	str	r2, [sp, #4]
 8010bca:	9b01      	ldr	r3, [sp, #4]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	bf0c      	ite	eq
 8010bd0:	2201      	moveq	r2, #1
 8010bd2:	2202      	movne	r2, #2
 8010bd4:	61a3      	str	r3, [r4, #24]
 8010bd6:	6122      	str	r2, [r4, #16]
 8010bd8:	b1ad      	cbz	r5, 8010c06 <__d2b+0x92>
 8010bda:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010bde:	4405      	add	r5, r0
 8010be0:	6035      	str	r5, [r6, #0]
 8010be2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010be6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010be8:	6018      	str	r0, [r3, #0]
 8010bea:	4620      	mov	r0, r4
 8010bec:	b002      	add	sp, #8
 8010bee:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8010bf2:	6161      	str	r1, [r4, #20]
 8010bf4:	e7e9      	b.n	8010bca <__d2b+0x56>
 8010bf6:	a801      	add	r0, sp, #4
 8010bf8:	f7ff fcf3 	bl	80105e2 <__lo0bits>
 8010bfc:	9b01      	ldr	r3, [sp, #4]
 8010bfe:	2201      	movs	r2, #1
 8010c00:	6163      	str	r3, [r4, #20]
 8010c02:	3020      	adds	r0, #32
 8010c04:	e7e7      	b.n	8010bd6 <__d2b+0x62>
 8010c06:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010c0a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010c0e:	6030      	str	r0, [r6, #0]
 8010c10:	6918      	ldr	r0, [r3, #16]
 8010c12:	f7ff fcc7 	bl	80105a4 <__hi0bits>
 8010c16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010c1a:	e7e4      	b.n	8010be6 <__d2b+0x72>
 8010c1c:	0801224b 	.word	0x0801224b
 8010c20:	080122bc 	.word	0x080122bc

08010c24 <__ratio>:
 8010c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c28:	b085      	sub	sp, #20
 8010c2a:	e9cd 1000 	strd	r1, r0, [sp]
 8010c2e:	a902      	add	r1, sp, #8
 8010c30:	f7ff ff58 	bl	8010ae4 <__b2d>
 8010c34:	468b      	mov	fp, r1
 8010c36:	4606      	mov	r6, r0
 8010c38:	460f      	mov	r7, r1
 8010c3a:	9800      	ldr	r0, [sp, #0]
 8010c3c:	a903      	add	r1, sp, #12
 8010c3e:	f7ff ff51 	bl	8010ae4 <__b2d>
 8010c42:	460d      	mov	r5, r1
 8010c44:	9b01      	ldr	r3, [sp, #4]
 8010c46:	4689      	mov	r9, r1
 8010c48:	6919      	ldr	r1, [r3, #16]
 8010c4a:	9b00      	ldr	r3, [sp, #0]
 8010c4c:	4604      	mov	r4, r0
 8010c4e:	691b      	ldr	r3, [r3, #16]
 8010c50:	4630      	mov	r0, r6
 8010c52:	1ac9      	subs	r1, r1, r3
 8010c54:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8010c58:	1a9b      	subs	r3, r3, r2
 8010c5a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	bfcd      	iteet	gt
 8010c62:	463a      	movgt	r2, r7
 8010c64:	462a      	movle	r2, r5
 8010c66:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010c6a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8010c6e:	bfd8      	it	le
 8010c70:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8010c74:	464b      	mov	r3, r9
 8010c76:	4622      	mov	r2, r4
 8010c78:	4659      	mov	r1, fp
 8010c7a:	f7ef fdd1 	bl	8000820 <__aeabi_ddiv>
 8010c7e:	b005      	add	sp, #20
 8010c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010c84 <__copybits>:
 8010c84:	3901      	subs	r1, #1
 8010c86:	b570      	push	{r4, r5, r6, lr}
 8010c88:	1149      	asrs	r1, r1, #5
 8010c8a:	6914      	ldr	r4, [r2, #16]
 8010c8c:	3101      	adds	r1, #1
 8010c8e:	f102 0314 	add.w	r3, r2, #20
 8010c92:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010c96:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010c9a:	1f05      	subs	r5, r0, #4
 8010c9c:	42a3      	cmp	r3, r4
 8010c9e:	d30c      	bcc.n	8010cba <__copybits+0x36>
 8010ca0:	1aa3      	subs	r3, r4, r2
 8010ca2:	3b11      	subs	r3, #17
 8010ca4:	f023 0303 	bic.w	r3, r3, #3
 8010ca8:	3211      	adds	r2, #17
 8010caa:	42a2      	cmp	r2, r4
 8010cac:	bf88      	it	hi
 8010cae:	2300      	movhi	r3, #0
 8010cb0:	4418      	add	r0, r3
 8010cb2:	2300      	movs	r3, #0
 8010cb4:	4288      	cmp	r0, r1
 8010cb6:	d305      	bcc.n	8010cc4 <__copybits+0x40>
 8010cb8:	bd70      	pop	{r4, r5, r6, pc}
 8010cba:	f853 6b04 	ldr.w	r6, [r3], #4
 8010cbe:	f845 6f04 	str.w	r6, [r5, #4]!
 8010cc2:	e7eb      	b.n	8010c9c <__copybits+0x18>
 8010cc4:	f840 3b04 	str.w	r3, [r0], #4
 8010cc8:	e7f4      	b.n	8010cb4 <__copybits+0x30>

08010cca <__any_on>:
 8010cca:	f100 0214 	add.w	r2, r0, #20
 8010cce:	6900      	ldr	r0, [r0, #16]
 8010cd0:	114b      	asrs	r3, r1, #5
 8010cd2:	4298      	cmp	r0, r3
 8010cd4:	b510      	push	{r4, lr}
 8010cd6:	db11      	blt.n	8010cfc <__any_on+0x32>
 8010cd8:	dd0a      	ble.n	8010cf0 <__any_on+0x26>
 8010cda:	f011 011f 	ands.w	r1, r1, #31
 8010cde:	d007      	beq.n	8010cf0 <__any_on+0x26>
 8010ce0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010ce4:	fa24 f001 	lsr.w	r0, r4, r1
 8010ce8:	fa00 f101 	lsl.w	r1, r0, r1
 8010cec:	428c      	cmp	r4, r1
 8010cee:	d10b      	bne.n	8010d08 <__any_on+0x3e>
 8010cf0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010cf4:	4293      	cmp	r3, r2
 8010cf6:	d803      	bhi.n	8010d00 <__any_on+0x36>
 8010cf8:	2000      	movs	r0, #0
 8010cfa:	bd10      	pop	{r4, pc}
 8010cfc:	4603      	mov	r3, r0
 8010cfe:	e7f7      	b.n	8010cf0 <__any_on+0x26>
 8010d00:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010d04:	2900      	cmp	r1, #0
 8010d06:	d0f5      	beq.n	8010cf4 <__any_on+0x2a>
 8010d08:	2001      	movs	r0, #1
 8010d0a:	e7f6      	b.n	8010cfa <__any_on+0x30>

08010d0c <_strtoul_l.constprop.0>:
 8010d0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010d10:	4686      	mov	lr, r0
 8010d12:	460d      	mov	r5, r1
 8010d14:	4e33      	ldr	r6, [pc, #204]	@ (8010de4 <_strtoul_l.constprop.0+0xd8>)
 8010d16:	4628      	mov	r0, r5
 8010d18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010d1c:	5d37      	ldrb	r7, [r6, r4]
 8010d1e:	f017 0708 	ands.w	r7, r7, #8
 8010d22:	d1f8      	bne.n	8010d16 <_strtoul_l.constprop.0+0xa>
 8010d24:	2c2d      	cmp	r4, #45	@ 0x2d
 8010d26:	d12f      	bne.n	8010d88 <_strtoul_l.constprop.0+0x7c>
 8010d28:	2701      	movs	r7, #1
 8010d2a:	782c      	ldrb	r4, [r5, #0]
 8010d2c:	1c85      	adds	r5, r0, #2
 8010d2e:	f033 0010 	bics.w	r0, r3, #16
 8010d32:	d109      	bne.n	8010d48 <_strtoul_l.constprop.0+0x3c>
 8010d34:	2c30      	cmp	r4, #48	@ 0x30
 8010d36:	d12c      	bne.n	8010d92 <_strtoul_l.constprop.0+0x86>
 8010d38:	7828      	ldrb	r0, [r5, #0]
 8010d3a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8010d3e:	2858      	cmp	r0, #88	@ 0x58
 8010d40:	d127      	bne.n	8010d92 <_strtoul_l.constprop.0+0x86>
 8010d42:	2310      	movs	r3, #16
 8010d44:	786c      	ldrb	r4, [r5, #1]
 8010d46:	3502      	adds	r5, #2
 8010d48:	f04f 38ff 	mov.w	r8, #4294967295
 8010d4c:	fbb8 f8f3 	udiv	r8, r8, r3
 8010d50:	2600      	movs	r6, #0
 8010d52:	fb03 f908 	mul.w	r9, r3, r8
 8010d56:	4630      	mov	r0, r6
 8010d58:	ea6f 0909 	mvn.w	r9, r9
 8010d5c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8010d60:	f1bc 0f09 	cmp.w	ip, #9
 8010d64:	d81c      	bhi.n	8010da0 <_strtoul_l.constprop.0+0x94>
 8010d66:	4664      	mov	r4, ip
 8010d68:	42a3      	cmp	r3, r4
 8010d6a:	dd2a      	ble.n	8010dc2 <_strtoul_l.constprop.0+0xb6>
 8010d6c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8010d70:	d007      	beq.n	8010d82 <_strtoul_l.constprop.0+0x76>
 8010d72:	4580      	cmp	r8, r0
 8010d74:	d322      	bcc.n	8010dbc <_strtoul_l.constprop.0+0xb0>
 8010d76:	d101      	bne.n	8010d7c <_strtoul_l.constprop.0+0x70>
 8010d78:	45a1      	cmp	r9, r4
 8010d7a:	db1f      	blt.n	8010dbc <_strtoul_l.constprop.0+0xb0>
 8010d7c:	2601      	movs	r6, #1
 8010d7e:	fb00 4003 	mla	r0, r0, r3, r4
 8010d82:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010d86:	e7e9      	b.n	8010d5c <_strtoul_l.constprop.0+0x50>
 8010d88:	2c2b      	cmp	r4, #43	@ 0x2b
 8010d8a:	bf04      	itt	eq
 8010d8c:	782c      	ldrbeq	r4, [r5, #0]
 8010d8e:	1c85      	addeq	r5, r0, #2
 8010d90:	e7cd      	b.n	8010d2e <_strtoul_l.constprop.0+0x22>
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d1d8      	bne.n	8010d48 <_strtoul_l.constprop.0+0x3c>
 8010d96:	2c30      	cmp	r4, #48	@ 0x30
 8010d98:	bf0c      	ite	eq
 8010d9a:	2308      	moveq	r3, #8
 8010d9c:	230a      	movne	r3, #10
 8010d9e:	e7d3      	b.n	8010d48 <_strtoul_l.constprop.0+0x3c>
 8010da0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8010da4:	f1bc 0f19 	cmp.w	ip, #25
 8010da8:	d801      	bhi.n	8010dae <_strtoul_l.constprop.0+0xa2>
 8010daa:	3c37      	subs	r4, #55	@ 0x37
 8010dac:	e7dc      	b.n	8010d68 <_strtoul_l.constprop.0+0x5c>
 8010dae:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8010db2:	f1bc 0f19 	cmp.w	ip, #25
 8010db6:	d804      	bhi.n	8010dc2 <_strtoul_l.constprop.0+0xb6>
 8010db8:	3c57      	subs	r4, #87	@ 0x57
 8010dba:	e7d5      	b.n	8010d68 <_strtoul_l.constprop.0+0x5c>
 8010dbc:	f04f 36ff 	mov.w	r6, #4294967295
 8010dc0:	e7df      	b.n	8010d82 <_strtoul_l.constprop.0+0x76>
 8010dc2:	1c73      	adds	r3, r6, #1
 8010dc4:	d106      	bne.n	8010dd4 <_strtoul_l.constprop.0+0xc8>
 8010dc6:	2322      	movs	r3, #34	@ 0x22
 8010dc8:	4630      	mov	r0, r6
 8010dca:	f8ce 3000 	str.w	r3, [lr]
 8010dce:	b932      	cbnz	r2, 8010dde <_strtoul_l.constprop.0+0xd2>
 8010dd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010dd4:	b107      	cbz	r7, 8010dd8 <_strtoul_l.constprop.0+0xcc>
 8010dd6:	4240      	negs	r0, r0
 8010dd8:	2a00      	cmp	r2, #0
 8010dda:	d0f9      	beq.n	8010dd0 <_strtoul_l.constprop.0+0xc4>
 8010ddc:	b106      	cbz	r6, 8010de0 <_strtoul_l.constprop.0+0xd4>
 8010dde:	1e69      	subs	r1, r5, #1
 8010de0:	6011      	str	r1, [r2, #0]
 8010de2:	e7f5      	b.n	8010dd0 <_strtoul_l.constprop.0+0xc4>
 8010de4:	08011f51 	.word	0x08011f51

08010de8 <_strtoul_r>:
 8010de8:	f7ff bf90 	b.w	8010d0c <_strtoul_l.constprop.0>

08010dec <strtoul>:
 8010dec:	4613      	mov	r3, r2
 8010dee:	460a      	mov	r2, r1
 8010df0:	4601      	mov	r1, r0
 8010df2:	4802      	ldr	r0, [pc, #8]	@ (8010dfc <strtoul+0x10>)
 8010df4:	6800      	ldr	r0, [r0, #0]
 8010df6:	f7ff bf89 	b.w	8010d0c <_strtoul_l.constprop.0>
 8010dfa:	bf00      	nop
 8010dfc:	20000284 	.word	0x20000284

08010e00 <__ascii_wctomb>:
 8010e00:	4603      	mov	r3, r0
 8010e02:	4608      	mov	r0, r1
 8010e04:	b141      	cbz	r1, 8010e18 <__ascii_wctomb+0x18>
 8010e06:	2aff      	cmp	r2, #255	@ 0xff
 8010e08:	d904      	bls.n	8010e14 <__ascii_wctomb+0x14>
 8010e0a:	228a      	movs	r2, #138	@ 0x8a
 8010e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8010e10:	601a      	str	r2, [r3, #0]
 8010e12:	4770      	bx	lr
 8010e14:	2001      	movs	r0, #1
 8010e16:	700a      	strb	r2, [r1, #0]
 8010e18:	4770      	bx	lr

08010e1a <__sfputc_r>:
 8010e1a:	6893      	ldr	r3, [r2, #8]
 8010e1c:	b410      	push	{r4}
 8010e1e:	3b01      	subs	r3, #1
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	6093      	str	r3, [r2, #8]
 8010e24:	da07      	bge.n	8010e36 <__sfputc_r+0x1c>
 8010e26:	6994      	ldr	r4, [r2, #24]
 8010e28:	42a3      	cmp	r3, r4
 8010e2a:	db01      	blt.n	8010e30 <__sfputc_r+0x16>
 8010e2c:	290a      	cmp	r1, #10
 8010e2e:	d102      	bne.n	8010e36 <__sfputc_r+0x1c>
 8010e30:	bc10      	pop	{r4}
 8010e32:	f000 ba15 	b.w	8011260 <__swbuf_r>
 8010e36:	6813      	ldr	r3, [r2, #0]
 8010e38:	1c58      	adds	r0, r3, #1
 8010e3a:	6010      	str	r0, [r2, #0]
 8010e3c:	7019      	strb	r1, [r3, #0]
 8010e3e:	4608      	mov	r0, r1
 8010e40:	bc10      	pop	{r4}
 8010e42:	4770      	bx	lr

08010e44 <__sfputs_r>:
 8010e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e46:	4606      	mov	r6, r0
 8010e48:	460f      	mov	r7, r1
 8010e4a:	4614      	mov	r4, r2
 8010e4c:	18d5      	adds	r5, r2, r3
 8010e4e:	42ac      	cmp	r4, r5
 8010e50:	d101      	bne.n	8010e56 <__sfputs_r+0x12>
 8010e52:	2000      	movs	r0, #0
 8010e54:	e007      	b.n	8010e66 <__sfputs_r+0x22>
 8010e56:	463a      	mov	r2, r7
 8010e58:	4630      	mov	r0, r6
 8010e5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e5e:	f7ff ffdc 	bl	8010e1a <__sfputc_r>
 8010e62:	1c43      	adds	r3, r0, #1
 8010e64:	d1f3      	bne.n	8010e4e <__sfputs_r+0xa>
 8010e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010e68 <_vfiprintf_r>:
 8010e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e6c:	460d      	mov	r5, r1
 8010e6e:	4614      	mov	r4, r2
 8010e70:	4698      	mov	r8, r3
 8010e72:	4606      	mov	r6, r0
 8010e74:	b09d      	sub	sp, #116	@ 0x74
 8010e76:	b118      	cbz	r0, 8010e80 <_vfiprintf_r+0x18>
 8010e78:	6a03      	ldr	r3, [r0, #32]
 8010e7a:	b90b      	cbnz	r3, 8010e80 <_vfiprintf_r+0x18>
 8010e7c:	f7fd f8a6 	bl	800dfcc <__sinit>
 8010e80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010e82:	07d9      	lsls	r1, r3, #31
 8010e84:	d405      	bmi.n	8010e92 <_vfiprintf_r+0x2a>
 8010e86:	89ab      	ldrh	r3, [r5, #12]
 8010e88:	059a      	lsls	r2, r3, #22
 8010e8a:	d402      	bmi.n	8010e92 <_vfiprintf_r+0x2a>
 8010e8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010e8e:	f7fe f815 	bl	800eebc <__retarget_lock_acquire_recursive>
 8010e92:	89ab      	ldrh	r3, [r5, #12]
 8010e94:	071b      	lsls	r3, r3, #28
 8010e96:	d501      	bpl.n	8010e9c <_vfiprintf_r+0x34>
 8010e98:	692b      	ldr	r3, [r5, #16]
 8010e9a:	b99b      	cbnz	r3, 8010ec4 <_vfiprintf_r+0x5c>
 8010e9c:	4629      	mov	r1, r5
 8010e9e:	4630      	mov	r0, r6
 8010ea0:	f000 fa1c 	bl	80112dc <__swsetup_r>
 8010ea4:	b170      	cbz	r0, 8010ec4 <_vfiprintf_r+0x5c>
 8010ea6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010ea8:	07dc      	lsls	r4, r3, #31
 8010eaa:	d504      	bpl.n	8010eb6 <_vfiprintf_r+0x4e>
 8010eac:	f04f 30ff 	mov.w	r0, #4294967295
 8010eb0:	b01d      	add	sp, #116	@ 0x74
 8010eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010eb6:	89ab      	ldrh	r3, [r5, #12]
 8010eb8:	0598      	lsls	r0, r3, #22
 8010eba:	d4f7      	bmi.n	8010eac <_vfiprintf_r+0x44>
 8010ebc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010ebe:	f7fd ffff 	bl	800eec0 <__retarget_lock_release_recursive>
 8010ec2:	e7f3      	b.n	8010eac <_vfiprintf_r+0x44>
 8010ec4:	2300      	movs	r3, #0
 8010ec6:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ec8:	2320      	movs	r3, #32
 8010eca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010ece:	2330      	movs	r3, #48	@ 0x30
 8010ed0:	f04f 0901 	mov.w	r9, #1
 8010ed4:	f8cd 800c 	str.w	r8, [sp, #12]
 8010ed8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8011084 <_vfiprintf_r+0x21c>
 8010edc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010ee0:	4623      	mov	r3, r4
 8010ee2:	469a      	mov	sl, r3
 8010ee4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ee8:	b10a      	cbz	r2, 8010eee <_vfiprintf_r+0x86>
 8010eea:	2a25      	cmp	r2, #37	@ 0x25
 8010eec:	d1f9      	bne.n	8010ee2 <_vfiprintf_r+0x7a>
 8010eee:	ebba 0b04 	subs.w	fp, sl, r4
 8010ef2:	d00b      	beq.n	8010f0c <_vfiprintf_r+0xa4>
 8010ef4:	465b      	mov	r3, fp
 8010ef6:	4622      	mov	r2, r4
 8010ef8:	4629      	mov	r1, r5
 8010efa:	4630      	mov	r0, r6
 8010efc:	f7ff ffa2 	bl	8010e44 <__sfputs_r>
 8010f00:	3001      	adds	r0, #1
 8010f02:	f000 80a7 	beq.w	8011054 <_vfiprintf_r+0x1ec>
 8010f06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010f08:	445a      	add	r2, fp
 8010f0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8010f0c:	f89a 3000 	ldrb.w	r3, [sl]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	f000 809f 	beq.w	8011054 <_vfiprintf_r+0x1ec>
 8010f16:	2300      	movs	r3, #0
 8010f18:	f04f 32ff 	mov.w	r2, #4294967295
 8010f1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010f20:	f10a 0a01 	add.w	sl, sl, #1
 8010f24:	9304      	str	r3, [sp, #16]
 8010f26:	9307      	str	r3, [sp, #28]
 8010f28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010f2c:	931a      	str	r3, [sp, #104]	@ 0x68
 8010f2e:	4654      	mov	r4, sl
 8010f30:	2205      	movs	r2, #5
 8010f32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f36:	4853      	ldr	r0, [pc, #332]	@ (8011084 <_vfiprintf_r+0x21c>)
 8010f38:	f7fd ffcb 	bl	800eed2 <memchr>
 8010f3c:	9a04      	ldr	r2, [sp, #16]
 8010f3e:	b9d8      	cbnz	r0, 8010f78 <_vfiprintf_r+0x110>
 8010f40:	06d1      	lsls	r1, r2, #27
 8010f42:	bf44      	itt	mi
 8010f44:	2320      	movmi	r3, #32
 8010f46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010f4a:	0713      	lsls	r3, r2, #28
 8010f4c:	bf44      	itt	mi
 8010f4e:	232b      	movmi	r3, #43	@ 0x2b
 8010f50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010f54:	f89a 3000 	ldrb.w	r3, [sl]
 8010f58:	2b2a      	cmp	r3, #42	@ 0x2a
 8010f5a:	d015      	beq.n	8010f88 <_vfiprintf_r+0x120>
 8010f5c:	4654      	mov	r4, sl
 8010f5e:	2000      	movs	r0, #0
 8010f60:	f04f 0c0a 	mov.w	ip, #10
 8010f64:	9a07      	ldr	r2, [sp, #28]
 8010f66:	4621      	mov	r1, r4
 8010f68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f6c:	3b30      	subs	r3, #48	@ 0x30
 8010f6e:	2b09      	cmp	r3, #9
 8010f70:	d94b      	bls.n	801100a <_vfiprintf_r+0x1a2>
 8010f72:	b1b0      	cbz	r0, 8010fa2 <_vfiprintf_r+0x13a>
 8010f74:	9207      	str	r2, [sp, #28]
 8010f76:	e014      	b.n	8010fa2 <_vfiprintf_r+0x13a>
 8010f78:	eba0 0308 	sub.w	r3, r0, r8
 8010f7c:	fa09 f303 	lsl.w	r3, r9, r3
 8010f80:	4313      	orrs	r3, r2
 8010f82:	46a2      	mov	sl, r4
 8010f84:	9304      	str	r3, [sp, #16]
 8010f86:	e7d2      	b.n	8010f2e <_vfiprintf_r+0xc6>
 8010f88:	9b03      	ldr	r3, [sp, #12]
 8010f8a:	1d19      	adds	r1, r3, #4
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	9103      	str	r1, [sp, #12]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	bfbb      	ittet	lt
 8010f94:	425b      	neglt	r3, r3
 8010f96:	f042 0202 	orrlt.w	r2, r2, #2
 8010f9a:	9307      	strge	r3, [sp, #28]
 8010f9c:	9307      	strlt	r3, [sp, #28]
 8010f9e:	bfb8      	it	lt
 8010fa0:	9204      	strlt	r2, [sp, #16]
 8010fa2:	7823      	ldrb	r3, [r4, #0]
 8010fa4:	2b2e      	cmp	r3, #46	@ 0x2e
 8010fa6:	d10a      	bne.n	8010fbe <_vfiprintf_r+0x156>
 8010fa8:	7863      	ldrb	r3, [r4, #1]
 8010faa:	2b2a      	cmp	r3, #42	@ 0x2a
 8010fac:	d132      	bne.n	8011014 <_vfiprintf_r+0x1ac>
 8010fae:	9b03      	ldr	r3, [sp, #12]
 8010fb0:	3402      	adds	r4, #2
 8010fb2:	1d1a      	adds	r2, r3, #4
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	9203      	str	r2, [sp, #12]
 8010fb8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010fbc:	9305      	str	r3, [sp, #20]
 8010fbe:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8011088 <_vfiprintf_r+0x220>
 8010fc2:	2203      	movs	r2, #3
 8010fc4:	4650      	mov	r0, sl
 8010fc6:	7821      	ldrb	r1, [r4, #0]
 8010fc8:	f7fd ff83 	bl	800eed2 <memchr>
 8010fcc:	b138      	cbz	r0, 8010fde <_vfiprintf_r+0x176>
 8010fce:	2240      	movs	r2, #64	@ 0x40
 8010fd0:	9b04      	ldr	r3, [sp, #16]
 8010fd2:	eba0 000a 	sub.w	r0, r0, sl
 8010fd6:	4082      	lsls	r2, r0
 8010fd8:	4313      	orrs	r3, r2
 8010fda:	3401      	adds	r4, #1
 8010fdc:	9304      	str	r3, [sp, #16]
 8010fde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010fe2:	2206      	movs	r2, #6
 8010fe4:	4829      	ldr	r0, [pc, #164]	@ (801108c <_vfiprintf_r+0x224>)
 8010fe6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010fea:	f7fd ff72 	bl	800eed2 <memchr>
 8010fee:	2800      	cmp	r0, #0
 8010ff0:	d03f      	beq.n	8011072 <_vfiprintf_r+0x20a>
 8010ff2:	4b27      	ldr	r3, [pc, #156]	@ (8011090 <_vfiprintf_r+0x228>)
 8010ff4:	bb1b      	cbnz	r3, 801103e <_vfiprintf_r+0x1d6>
 8010ff6:	9b03      	ldr	r3, [sp, #12]
 8010ff8:	3307      	adds	r3, #7
 8010ffa:	f023 0307 	bic.w	r3, r3, #7
 8010ffe:	3308      	adds	r3, #8
 8011000:	9303      	str	r3, [sp, #12]
 8011002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011004:	443b      	add	r3, r7
 8011006:	9309      	str	r3, [sp, #36]	@ 0x24
 8011008:	e76a      	b.n	8010ee0 <_vfiprintf_r+0x78>
 801100a:	460c      	mov	r4, r1
 801100c:	2001      	movs	r0, #1
 801100e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011012:	e7a8      	b.n	8010f66 <_vfiprintf_r+0xfe>
 8011014:	2300      	movs	r3, #0
 8011016:	f04f 0c0a 	mov.w	ip, #10
 801101a:	4619      	mov	r1, r3
 801101c:	3401      	adds	r4, #1
 801101e:	9305      	str	r3, [sp, #20]
 8011020:	4620      	mov	r0, r4
 8011022:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011026:	3a30      	subs	r2, #48	@ 0x30
 8011028:	2a09      	cmp	r2, #9
 801102a:	d903      	bls.n	8011034 <_vfiprintf_r+0x1cc>
 801102c:	2b00      	cmp	r3, #0
 801102e:	d0c6      	beq.n	8010fbe <_vfiprintf_r+0x156>
 8011030:	9105      	str	r1, [sp, #20]
 8011032:	e7c4      	b.n	8010fbe <_vfiprintf_r+0x156>
 8011034:	4604      	mov	r4, r0
 8011036:	2301      	movs	r3, #1
 8011038:	fb0c 2101 	mla	r1, ip, r1, r2
 801103c:	e7f0      	b.n	8011020 <_vfiprintf_r+0x1b8>
 801103e:	ab03      	add	r3, sp, #12
 8011040:	9300      	str	r3, [sp, #0]
 8011042:	462a      	mov	r2, r5
 8011044:	4630      	mov	r0, r6
 8011046:	4b13      	ldr	r3, [pc, #76]	@ (8011094 <_vfiprintf_r+0x22c>)
 8011048:	a904      	add	r1, sp, #16
 801104a:	f7fc fb75 	bl	800d738 <_printf_float>
 801104e:	4607      	mov	r7, r0
 8011050:	1c78      	adds	r0, r7, #1
 8011052:	d1d6      	bne.n	8011002 <_vfiprintf_r+0x19a>
 8011054:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011056:	07d9      	lsls	r1, r3, #31
 8011058:	d405      	bmi.n	8011066 <_vfiprintf_r+0x1fe>
 801105a:	89ab      	ldrh	r3, [r5, #12]
 801105c:	059a      	lsls	r2, r3, #22
 801105e:	d402      	bmi.n	8011066 <_vfiprintf_r+0x1fe>
 8011060:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011062:	f7fd ff2d 	bl	800eec0 <__retarget_lock_release_recursive>
 8011066:	89ab      	ldrh	r3, [r5, #12]
 8011068:	065b      	lsls	r3, r3, #25
 801106a:	f53f af1f 	bmi.w	8010eac <_vfiprintf_r+0x44>
 801106e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011070:	e71e      	b.n	8010eb0 <_vfiprintf_r+0x48>
 8011072:	ab03      	add	r3, sp, #12
 8011074:	9300      	str	r3, [sp, #0]
 8011076:	462a      	mov	r2, r5
 8011078:	4630      	mov	r0, r6
 801107a:	4b06      	ldr	r3, [pc, #24]	@ (8011094 <_vfiprintf_r+0x22c>)
 801107c:	a904      	add	r1, sp, #16
 801107e:	f7fc fdf9 	bl	800dc74 <_printf_i>
 8011082:	e7e4      	b.n	801104e <_vfiprintf_r+0x1e6>
 8011084:	08012418 	.word	0x08012418
 8011088:	0801241e 	.word	0x0801241e
 801108c:	08012422 	.word	0x08012422
 8011090:	0800d739 	.word	0x0800d739
 8011094:	08010e45 	.word	0x08010e45

08011098 <__sflush_r>:
 8011098:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801109c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801109e:	0716      	lsls	r6, r2, #28
 80110a0:	4605      	mov	r5, r0
 80110a2:	460c      	mov	r4, r1
 80110a4:	d454      	bmi.n	8011150 <__sflush_r+0xb8>
 80110a6:	684b      	ldr	r3, [r1, #4]
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	dc02      	bgt.n	80110b2 <__sflush_r+0x1a>
 80110ac:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	dd48      	ble.n	8011144 <__sflush_r+0xac>
 80110b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80110b4:	2e00      	cmp	r6, #0
 80110b6:	d045      	beq.n	8011144 <__sflush_r+0xac>
 80110b8:	2300      	movs	r3, #0
 80110ba:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80110be:	682f      	ldr	r7, [r5, #0]
 80110c0:	6a21      	ldr	r1, [r4, #32]
 80110c2:	602b      	str	r3, [r5, #0]
 80110c4:	d030      	beq.n	8011128 <__sflush_r+0x90>
 80110c6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80110c8:	89a3      	ldrh	r3, [r4, #12]
 80110ca:	0759      	lsls	r1, r3, #29
 80110cc:	d505      	bpl.n	80110da <__sflush_r+0x42>
 80110ce:	6863      	ldr	r3, [r4, #4]
 80110d0:	1ad2      	subs	r2, r2, r3
 80110d2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80110d4:	b10b      	cbz	r3, 80110da <__sflush_r+0x42>
 80110d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80110d8:	1ad2      	subs	r2, r2, r3
 80110da:	2300      	movs	r3, #0
 80110dc:	4628      	mov	r0, r5
 80110de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80110e0:	6a21      	ldr	r1, [r4, #32]
 80110e2:	47b0      	blx	r6
 80110e4:	1c43      	adds	r3, r0, #1
 80110e6:	89a3      	ldrh	r3, [r4, #12]
 80110e8:	d106      	bne.n	80110f8 <__sflush_r+0x60>
 80110ea:	6829      	ldr	r1, [r5, #0]
 80110ec:	291d      	cmp	r1, #29
 80110ee:	d82b      	bhi.n	8011148 <__sflush_r+0xb0>
 80110f0:	4a28      	ldr	r2, [pc, #160]	@ (8011194 <__sflush_r+0xfc>)
 80110f2:	410a      	asrs	r2, r1
 80110f4:	07d6      	lsls	r6, r2, #31
 80110f6:	d427      	bmi.n	8011148 <__sflush_r+0xb0>
 80110f8:	2200      	movs	r2, #0
 80110fa:	6062      	str	r2, [r4, #4]
 80110fc:	6922      	ldr	r2, [r4, #16]
 80110fe:	04d9      	lsls	r1, r3, #19
 8011100:	6022      	str	r2, [r4, #0]
 8011102:	d504      	bpl.n	801110e <__sflush_r+0x76>
 8011104:	1c42      	adds	r2, r0, #1
 8011106:	d101      	bne.n	801110c <__sflush_r+0x74>
 8011108:	682b      	ldr	r3, [r5, #0]
 801110a:	b903      	cbnz	r3, 801110e <__sflush_r+0x76>
 801110c:	6560      	str	r0, [r4, #84]	@ 0x54
 801110e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011110:	602f      	str	r7, [r5, #0]
 8011112:	b1b9      	cbz	r1, 8011144 <__sflush_r+0xac>
 8011114:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011118:	4299      	cmp	r1, r3
 801111a:	d002      	beq.n	8011122 <__sflush_r+0x8a>
 801111c:	4628      	mov	r0, r5
 801111e:	f7fe fd77 	bl	800fc10 <_free_r>
 8011122:	2300      	movs	r3, #0
 8011124:	6363      	str	r3, [r4, #52]	@ 0x34
 8011126:	e00d      	b.n	8011144 <__sflush_r+0xac>
 8011128:	2301      	movs	r3, #1
 801112a:	4628      	mov	r0, r5
 801112c:	47b0      	blx	r6
 801112e:	4602      	mov	r2, r0
 8011130:	1c50      	adds	r0, r2, #1
 8011132:	d1c9      	bne.n	80110c8 <__sflush_r+0x30>
 8011134:	682b      	ldr	r3, [r5, #0]
 8011136:	2b00      	cmp	r3, #0
 8011138:	d0c6      	beq.n	80110c8 <__sflush_r+0x30>
 801113a:	2b1d      	cmp	r3, #29
 801113c:	d001      	beq.n	8011142 <__sflush_r+0xaa>
 801113e:	2b16      	cmp	r3, #22
 8011140:	d11d      	bne.n	801117e <__sflush_r+0xe6>
 8011142:	602f      	str	r7, [r5, #0]
 8011144:	2000      	movs	r0, #0
 8011146:	e021      	b.n	801118c <__sflush_r+0xf4>
 8011148:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801114c:	b21b      	sxth	r3, r3
 801114e:	e01a      	b.n	8011186 <__sflush_r+0xee>
 8011150:	690f      	ldr	r7, [r1, #16]
 8011152:	2f00      	cmp	r7, #0
 8011154:	d0f6      	beq.n	8011144 <__sflush_r+0xac>
 8011156:	0793      	lsls	r3, r2, #30
 8011158:	bf18      	it	ne
 801115a:	2300      	movne	r3, #0
 801115c:	680e      	ldr	r6, [r1, #0]
 801115e:	bf08      	it	eq
 8011160:	694b      	ldreq	r3, [r1, #20]
 8011162:	1bf6      	subs	r6, r6, r7
 8011164:	600f      	str	r7, [r1, #0]
 8011166:	608b      	str	r3, [r1, #8]
 8011168:	2e00      	cmp	r6, #0
 801116a:	ddeb      	ble.n	8011144 <__sflush_r+0xac>
 801116c:	4633      	mov	r3, r6
 801116e:	463a      	mov	r2, r7
 8011170:	4628      	mov	r0, r5
 8011172:	6a21      	ldr	r1, [r4, #32]
 8011174:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8011178:	47e0      	blx	ip
 801117a:	2800      	cmp	r0, #0
 801117c:	dc07      	bgt.n	801118e <__sflush_r+0xf6>
 801117e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011182:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011186:	f04f 30ff 	mov.w	r0, #4294967295
 801118a:	81a3      	strh	r3, [r4, #12]
 801118c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801118e:	4407      	add	r7, r0
 8011190:	1a36      	subs	r6, r6, r0
 8011192:	e7e9      	b.n	8011168 <__sflush_r+0xd0>
 8011194:	dfbffffe 	.word	0xdfbffffe

08011198 <_fflush_r>:
 8011198:	b538      	push	{r3, r4, r5, lr}
 801119a:	690b      	ldr	r3, [r1, #16]
 801119c:	4605      	mov	r5, r0
 801119e:	460c      	mov	r4, r1
 80111a0:	b913      	cbnz	r3, 80111a8 <_fflush_r+0x10>
 80111a2:	2500      	movs	r5, #0
 80111a4:	4628      	mov	r0, r5
 80111a6:	bd38      	pop	{r3, r4, r5, pc}
 80111a8:	b118      	cbz	r0, 80111b2 <_fflush_r+0x1a>
 80111aa:	6a03      	ldr	r3, [r0, #32]
 80111ac:	b90b      	cbnz	r3, 80111b2 <_fflush_r+0x1a>
 80111ae:	f7fc ff0d 	bl	800dfcc <__sinit>
 80111b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d0f3      	beq.n	80111a2 <_fflush_r+0xa>
 80111ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80111bc:	07d0      	lsls	r0, r2, #31
 80111be:	d404      	bmi.n	80111ca <_fflush_r+0x32>
 80111c0:	0599      	lsls	r1, r3, #22
 80111c2:	d402      	bmi.n	80111ca <_fflush_r+0x32>
 80111c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80111c6:	f7fd fe79 	bl	800eebc <__retarget_lock_acquire_recursive>
 80111ca:	4628      	mov	r0, r5
 80111cc:	4621      	mov	r1, r4
 80111ce:	f7ff ff63 	bl	8011098 <__sflush_r>
 80111d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80111d4:	4605      	mov	r5, r0
 80111d6:	07da      	lsls	r2, r3, #31
 80111d8:	d4e4      	bmi.n	80111a4 <_fflush_r+0xc>
 80111da:	89a3      	ldrh	r3, [r4, #12]
 80111dc:	059b      	lsls	r3, r3, #22
 80111de:	d4e1      	bmi.n	80111a4 <_fflush_r+0xc>
 80111e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80111e2:	f7fd fe6d 	bl	800eec0 <__retarget_lock_release_recursive>
 80111e6:	e7dd      	b.n	80111a4 <_fflush_r+0xc>

080111e8 <fiprintf>:
 80111e8:	b40e      	push	{r1, r2, r3}
 80111ea:	b503      	push	{r0, r1, lr}
 80111ec:	4601      	mov	r1, r0
 80111ee:	ab03      	add	r3, sp, #12
 80111f0:	4805      	ldr	r0, [pc, #20]	@ (8011208 <fiprintf+0x20>)
 80111f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80111f6:	6800      	ldr	r0, [r0, #0]
 80111f8:	9301      	str	r3, [sp, #4]
 80111fa:	f7ff fe35 	bl	8010e68 <_vfiprintf_r>
 80111fe:	b002      	add	sp, #8
 8011200:	f85d eb04 	ldr.w	lr, [sp], #4
 8011204:	b003      	add	sp, #12
 8011206:	4770      	bx	lr
 8011208:	20000284 	.word	0x20000284

0801120c <siscanf>:
 801120c:	b40e      	push	{r1, r2, r3}
 801120e:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8011212:	b530      	push	{r4, r5, lr}
 8011214:	b09c      	sub	sp, #112	@ 0x70
 8011216:	ac1f      	add	r4, sp, #124	@ 0x7c
 8011218:	f854 5b04 	ldr.w	r5, [r4], #4
 801121c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011220:	9002      	str	r0, [sp, #8]
 8011222:	9006      	str	r0, [sp, #24]
 8011224:	f7ef f80e 	bl	8000244 <strlen>
 8011228:	4b0b      	ldr	r3, [pc, #44]	@ (8011258 <siscanf+0x4c>)
 801122a:	9003      	str	r0, [sp, #12]
 801122c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801122e:	2300      	movs	r3, #0
 8011230:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011232:	9314      	str	r3, [sp, #80]	@ 0x50
 8011234:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011238:	9007      	str	r0, [sp, #28]
 801123a:	4808      	ldr	r0, [pc, #32]	@ (801125c <siscanf+0x50>)
 801123c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011240:	462a      	mov	r2, r5
 8011242:	4623      	mov	r3, r4
 8011244:	a902      	add	r1, sp, #8
 8011246:	6800      	ldr	r0, [r0, #0]
 8011248:	9401      	str	r4, [sp, #4]
 801124a:	f000 f94f 	bl	80114ec <__ssvfiscanf_r>
 801124e:	b01c      	add	sp, #112	@ 0x70
 8011250:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011254:	b003      	add	sp, #12
 8011256:	4770      	bx	lr
 8011258:	0800e07f 	.word	0x0800e07f
 801125c:	20000284 	.word	0x20000284

08011260 <__swbuf_r>:
 8011260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011262:	460e      	mov	r6, r1
 8011264:	4614      	mov	r4, r2
 8011266:	4605      	mov	r5, r0
 8011268:	b118      	cbz	r0, 8011272 <__swbuf_r+0x12>
 801126a:	6a03      	ldr	r3, [r0, #32]
 801126c:	b90b      	cbnz	r3, 8011272 <__swbuf_r+0x12>
 801126e:	f7fc fead 	bl	800dfcc <__sinit>
 8011272:	69a3      	ldr	r3, [r4, #24]
 8011274:	60a3      	str	r3, [r4, #8]
 8011276:	89a3      	ldrh	r3, [r4, #12]
 8011278:	071a      	lsls	r2, r3, #28
 801127a:	d501      	bpl.n	8011280 <__swbuf_r+0x20>
 801127c:	6923      	ldr	r3, [r4, #16]
 801127e:	b943      	cbnz	r3, 8011292 <__swbuf_r+0x32>
 8011280:	4621      	mov	r1, r4
 8011282:	4628      	mov	r0, r5
 8011284:	f000 f82a 	bl	80112dc <__swsetup_r>
 8011288:	b118      	cbz	r0, 8011292 <__swbuf_r+0x32>
 801128a:	f04f 37ff 	mov.w	r7, #4294967295
 801128e:	4638      	mov	r0, r7
 8011290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011292:	6823      	ldr	r3, [r4, #0]
 8011294:	6922      	ldr	r2, [r4, #16]
 8011296:	b2f6      	uxtb	r6, r6
 8011298:	1a98      	subs	r0, r3, r2
 801129a:	6963      	ldr	r3, [r4, #20]
 801129c:	4637      	mov	r7, r6
 801129e:	4283      	cmp	r3, r0
 80112a0:	dc05      	bgt.n	80112ae <__swbuf_r+0x4e>
 80112a2:	4621      	mov	r1, r4
 80112a4:	4628      	mov	r0, r5
 80112a6:	f7ff ff77 	bl	8011198 <_fflush_r>
 80112aa:	2800      	cmp	r0, #0
 80112ac:	d1ed      	bne.n	801128a <__swbuf_r+0x2a>
 80112ae:	68a3      	ldr	r3, [r4, #8]
 80112b0:	3b01      	subs	r3, #1
 80112b2:	60a3      	str	r3, [r4, #8]
 80112b4:	6823      	ldr	r3, [r4, #0]
 80112b6:	1c5a      	adds	r2, r3, #1
 80112b8:	6022      	str	r2, [r4, #0]
 80112ba:	701e      	strb	r6, [r3, #0]
 80112bc:	6962      	ldr	r2, [r4, #20]
 80112be:	1c43      	adds	r3, r0, #1
 80112c0:	429a      	cmp	r2, r3
 80112c2:	d004      	beq.n	80112ce <__swbuf_r+0x6e>
 80112c4:	89a3      	ldrh	r3, [r4, #12]
 80112c6:	07db      	lsls	r3, r3, #31
 80112c8:	d5e1      	bpl.n	801128e <__swbuf_r+0x2e>
 80112ca:	2e0a      	cmp	r6, #10
 80112cc:	d1df      	bne.n	801128e <__swbuf_r+0x2e>
 80112ce:	4621      	mov	r1, r4
 80112d0:	4628      	mov	r0, r5
 80112d2:	f7ff ff61 	bl	8011198 <_fflush_r>
 80112d6:	2800      	cmp	r0, #0
 80112d8:	d0d9      	beq.n	801128e <__swbuf_r+0x2e>
 80112da:	e7d6      	b.n	801128a <__swbuf_r+0x2a>

080112dc <__swsetup_r>:
 80112dc:	b538      	push	{r3, r4, r5, lr}
 80112de:	4b29      	ldr	r3, [pc, #164]	@ (8011384 <__swsetup_r+0xa8>)
 80112e0:	4605      	mov	r5, r0
 80112e2:	6818      	ldr	r0, [r3, #0]
 80112e4:	460c      	mov	r4, r1
 80112e6:	b118      	cbz	r0, 80112f0 <__swsetup_r+0x14>
 80112e8:	6a03      	ldr	r3, [r0, #32]
 80112ea:	b90b      	cbnz	r3, 80112f0 <__swsetup_r+0x14>
 80112ec:	f7fc fe6e 	bl	800dfcc <__sinit>
 80112f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80112f4:	0719      	lsls	r1, r3, #28
 80112f6:	d422      	bmi.n	801133e <__swsetup_r+0x62>
 80112f8:	06da      	lsls	r2, r3, #27
 80112fa:	d407      	bmi.n	801130c <__swsetup_r+0x30>
 80112fc:	2209      	movs	r2, #9
 80112fe:	602a      	str	r2, [r5, #0]
 8011300:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011304:	f04f 30ff 	mov.w	r0, #4294967295
 8011308:	81a3      	strh	r3, [r4, #12]
 801130a:	e033      	b.n	8011374 <__swsetup_r+0x98>
 801130c:	0758      	lsls	r0, r3, #29
 801130e:	d512      	bpl.n	8011336 <__swsetup_r+0x5a>
 8011310:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011312:	b141      	cbz	r1, 8011326 <__swsetup_r+0x4a>
 8011314:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011318:	4299      	cmp	r1, r3
 801131a:	d002      	beq.n	8011322 <__swsetup_r+0x46>
 801131c:	4628      	mov	r0, r5
 801131e:	f7fe fc77 	bl	800fc10 <_free_r>
 8011322:	2300      	movs	r3, #0
 8011324:	6363      	str	r3, [r4, #52]	@ 0x34
 8011326:	89a3      	ldrh	r3, [r4, #12]
 8011328:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801132c:	81a3      	strh	r3, [r4, #12]
 801132e:	2300      	movs	r3, #0
 8011330:	6063      	str	r3, [r4, #4]
 8011332:	6923      	ldr	r3, [r4, #16]
 8011334:	6023      	str	r3, [r4, #0]
 8011336:	89a3      	ldrh	r3, [r4, #12]
 8011338:	f043 0308 	orr.w	r3, r3, #8
 801133c:	81a3      	strh	r3, [r4, #12]
 801133e:	6923      	ldr	r3, [r4, #16]
 8011340:	b94b      	cbnz	r3, 8011356 <__swsetup_r+0x7a>
 8011342:	89a3      	ldrh	r3, [r4, #12]
 8011344:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011348:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801134c:	d003      	beq.n	8011356 <__swsetup_r+0x7a>
 801134e:	4621      	mov	r1, r4
 8011350:	4628      	mov	r0, r5
 8011352:	f000 fbae 	bl	8011ab2 <__smakebuf_r>
 8011356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801135a:	f013 0201 	ands.w	r2, r3, #1
 801135e:	d00a      	beq.n	8011376 <__swsetup_r+0x9a>
 8011360:	2200      	movs	r2, #0
 8011362:	60a2      	str	r2, [r4, #8]
 8011364:	6962      	ldr	r2, [r4, #20]
 8011366:	4252      	negs	r2, r2
 8011368:	61a2      	str	r2, [r4, #24]
 801136a:	6922      	ldr	r2, [r4, #16]
 801136c:	b942      	cbnz	r2, 8011380 <__swsetup_r+0xa4>
 801136e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011372:	d1c5      	bne.n	8011300 <__swsetup_r+0x24>
 8011374:	bd38      	pop	{r3, r4, r5, pc}
 8011376:	0799      	lsls	r1, r3, #30
 8011378:	bf58      	it	pl
 801137a:	6962      	ldrpl	r2, [r4, #20]
 801137c:	60a2      	str	r2, [r4, #8]
 801137e:	e7f4      	b.n	801136a <__swsetup_r+0x8e>
 8011380:	2000      	movs	r0, #0
 8011382:	e7f7      	b.n	8011374 <__swsetup_r+0x98>
 8011384:	20000284 	.word	0x20000284

08011388 <__gettzinfo>:
 8011388:	4800      	ldr	r0, [pc, #0]	@ (801138c <__gettzinfo+0x4>)
 801138a:	4770      	bx	lr
 801138c:	200002d8 	.word	0x200002d8

08011390 <abort>:
 8011390:	2006      	movs	r0, #6
 8011392:	b508      	push	{r3, lr}
 8011394:	f000 fc62 	bl	8011c5c <raise>
 8011398:	2001      	movs	r0, #1
 801139a:	f7f2 ff9a 	bl	80042d2 <_exit>

0801139e <_calloc_r>:
 801139e:	b570      	push	{r4, r5, r6, lr}
 80113a0:	fba1 5402 	umull	r5, r4, r1, r2
 80113a4:	b93c      	cbnz	r4, 80113b6 <_calloc_r+0x18>
 80113a6:	4629      	mov	r1, r5
 80113a8:	f7fb f9c2 	bl	800c730 <_malloc_r>
 80113ac:	4606      	mov	r6, r0
 80113ae:	b928      	cbnz	r0, 80113bc <_calloc_r+0x1e>
 80113b0:	2600      	movs	r6, #0
 80113b2:	4630      	mov	r0, r6
 80113b4:	bd70      	pop	{r4, r5, r6, pc}
 80113b6:	220c      	movs	r2, #12
 80113b8:	6002      	str	r2, [r0, #0]
 80113ba:	e7f9      	b.n	80113b0 <_calloc_r+0x12>
 80113bc:	462a      	mov	r2, r5
 80113be:	4621      	mov	r1, r4
 80113c0:	f7fc fe91 	bl	800e0e6 <memset>
 80113c4:	e7f5      	b.n	80113b2 <_calloc_r+0x14>
	...

080113c8 <__env_lock>:
 80113c8:	4801      	ldr	r0, [pc, #4]	@ (80113d0 <__env_lock+0x8>)
 80113ca:	f7fd bd77 	b.w	800eebc <__retarget_lock_acquire_recursive>
 80113ce:	bf00      	nop
 80113d0:	20005b89 	.word	0x20005b89

080113d4 <__env_unlock>:
 80113d4:	4801      	ldr	r0, [pc, #4]	@ (80113dc <__env_unlock+0x8>)
 80113d6:	f7fd bd73 	b.w	800eec0 <__retarget_lock_release_recursive>
 80113da:	bf00      	nop
 80113dc:	20005b89 	.word	0x20005b89

080113e0 <_realloc_r>:
 80113e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113e4:	4680      	mov	r8, r0
 80113e6:	4615      	mov	r5, r2
 80113e8:	460c      	mov	r4, r1
 80113ea:	b921      	cbnz	r1, 80113f6 <_realloc_r+0x16>
 80113ec:	4611      	mov	r1, r2
 80113ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80113f2:	f7fb b99d 	b.w	800c730 <_malloc_r>
 80113f6:	b92a      	cbnz	r2, 8011404 <_realloc_r+0x24>
 80113f8:	f7fe fc0a 	bl	800fc10 <_free_r>
 80113fc:	2400      	movs	r4, #0
 80113fe:	4620      	mov	r0, r4
 8011400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011404:	f000 fc68 	bl	8011cd8 <_malloc_usable_size_r>
 8011408:	4285      	cmp	r5, r0
 801140a:	4606      	mov	r6, r0
 801140c:	d802      	bhi.n	8011414 <_realloc_r+0x34>
 801140e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011412:	d8f4      	bhi.n	80113fe <_realloc_r+0x1e>
 8011414:	4629      	mov	r1, r5
 8011416:	4640      	mov	r0, r8
 8011418:	f7fb f98a 	bl	800c730 <_malloc_r>
 801141c:	4607      	mov	r7, r0
 801141e:	2800      	cmp	r0, #0
 8011420:	d0ec      	beq.n	80113fc <_realloc_r+0x1c>
 8011422:	42b5      	cmp	r5, r6
 8011424:	462a      	mov	r2, r5
 8011426:	4621      	mov	r1, r4
 8011428:	bf28      	it	cs
 801142a:	4632      	movcs	r2, r6
 801142c:	f7fd fd5f 	bl	800eeee <memcpy>
 8011430:	4621      	mov	r1, r4
 8011432:	4640      	mov	r0, r8
 8011434:	f7fe fbec 	bl	800fc10 <_free_r>
 8011438:	463c      	mov	r4, r7
 801143a:	e7e0      	b.n	80113fe <_realloc_r+0x1e>

0801143c <_sungetc_r>:
 801143c:	b538      	push	{r3, r4, r5, lr}
 801143e:	1c4b      	adds	r3, r1, #1
 8011440:	4614      	mov	r4, r2
 8011442:	d103      	bne.n	801144c <_sungetc_r+0x10>
 8011444:	f04f 35ff 	mov.w	r5, #4294967295
 8011448:	4628      	mov	r0, r5
 801144a:	bd38      	pop	{r3, r4, r5, pc}
 801144c:	8993      	ldrh	r3, [r2, #12]
 801144e:	b2cd      	uxtb	r5, r1
 8011450:	f023 0320 	bic.w	r3, r3, #32
 8011454:	8193      	strh	r3, [r2, #12]
 8011456:	6853      	ldr	r3, [r2, #4]
 8011458:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801145a:	b18a      	cbz	r2, 8011480 <_sungetc_r+0x44>
 801145c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801145e:	429a      	cmp	r2, r3
 8011460:	dd08      	ble.n	8011474 <_sungetc_r+0x38>
 8011462:	6823      	ldr	r3, [r4, #0]
 8011464:	1e5a      	subs	r2, r3, #1
 8011466:	6022      	str	r2, [r4, #0]
 8011468:	f803 5c01 	strb.w	r5, [r3, #-1]
 801146c:	6863      	ldr	r3, [r4, #4]
 801146e:	3301      	adds	r3, #1
 8011470:	6063      	str	r3, [r4, #4]
 8011472:	e7e9      	b.n	8011448 <_sungetc_r+0xc>
 8011474:	4621      	mov	r1, r4
 8011476:	f000 fb91 	bl	8011b9c <__submore>
 801147a:	2800      	cmp	r0, #0
 801147c:	d0f1      	beq.n	8011462 <_sungetc_r+0x26>
 801147e:	e7e1      	b.n	8011444 <_sungetc_r+0x8>
 8011480:	6921      	ldr	r1, [r4, #16]
 8011482:	6822      	ldr	r2, [r4, #0]
 8011484:	b141      	cbz	r1, 8011498 <_sungetc_r+0x5c>
 8011486:	4291      	cmp	r1, r2
 8011488:	d206      	bcs.n	8011498 <_sungetc_r+0x5c>
 801148a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 801148e:	42a9      	cmp	r1, r5
 8011490:	d102      	bne.n	8011498 <_sungetc_r+0x5c>
 8011492:	3a01      	subs	r2, #1
 8011494:	6022      	str	r2, [r4, #0]
 8011496:	e7ea      	b.n	801146e <_sungetc_r+0x32>
 8011498:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 801149c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80114a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80114a2:	2303      	movs	r3, #3
 80114a4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80114a6:	4623      	mov	r3, r4
 80114a8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80114ac:	6023      	str	r3, [r4, #0]
 80114ae:	2301      	movs	r3, #1
 80114b0:	e7de      	b.n	8011470 <_sungetc_r+0x34>

080114b2 <__ssrefill_r>:
 80114b2:	b510      	push	{r4, lr}
 80114b4:	460c      	mov	r4, r1
 80114b6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80114b8:	b169      	cbz	r1, 80114d6 <__ssrefill_r+0x24>
 80114ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80114be:	4299      	cmp	r1, r3
 80114c0:	d001      	beq.n	80114c6 <__ssrefill_r+0x14>
 80114c2:	f7fe fba5 	bl	800fc10 <_free_r>
 80114c6:	2000      	movs	r0, #0
 80114c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80114ca:	6360      	str	r0, [r4, #52]	@ 0x34
 80114cc:	6063      	str	r3, [r4, #4]
 80114ce:	b113      	cbz	r3, 80114d6 <__ssrefill_r+0x24>
 80114d0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80114d2:	6023      	str	r3, [r4, #0]
 80114d4:	bd10      	pop	{r4, pc}
 80114d6:	6923      	ldr	r3, [r4, #16]
 80114d8:	f04f 30ff 	mov.w	r0, #4294967295
 80114dc:	6023      	str	r3, [r4, #0]
 80114de:	2300      	movs	r3, #0
 80114e0:	6063      	str	r3, [r4, #4]
 80114e2:	89a3      	ldrh	r3, [r4, #12]
 80114e4:	f043 0320 	orr.w	r3, r3, #32
 80114e8:	81a3      	strh	r3, [r4, #12]
 80114ea:	e7f3      	b.n	80114d4 <__ssrefill_r+0x22>

080114ec <__ssvfiscanf_r>:
 80114ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114f0:	460c      	mov	r4, r1
 80114f2:	2100      	movs	r1, #0
 80114f4:	4606      	mov	r6, r0
 80114f6:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80114fa:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80114fe:	49aa      	ldr	r1, [pc, #680]	@ (80117a8 <__ssvfiscanf_r+0x2bc>)
 8011500:	f10d 0804 	add.w	r8, sp, #4
 8011504:	91a0      	str	r1, [sp, #640]	@ 0x280
 8011506:	49a9      	ldr	r1, [pc, #676]	@ (80117ac <__ssvfiscanf_r+0x2c0>)
 8011508:	4fa9      	ldr	r7, [pc, #676]	@ (80117b0 <__ssvfiscanf_r+0x2c4>)
 801150a:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 801150e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8011510:	9300      	str	r3, [sp, #0]
 8011512:	7813      	ldrb	r3, [r2, #0]
 8011514:	2b00      	cmp	r3, #0
 8011516:	f000 8159 	beq.w	80117cc <__ssvfiscanf_r+0x2e0>
 801151a:	5cf9      	ldrb	r1, [r7, r3]
 801151c:	1c55      	adds	r5, r2, #1
 801151e:	f011 0108 	ands.w	r1, r1, #8
 8011522:	d019      	beq.n	8011558 <__ssvfiscanf_r+0x6c>
 8011524:	6863      	ldr	r3, [r4, #4]
 8011526:	2b00      	cmp	r3, #0
 8011528:	dd0f      	ble.n	801154a <__ssvfiscanf_r+0x5e>
 801152a:	6823      	ldr	r3, [r4, #0]
 801152c:	781a      	ldrb	r2, [r3, #0]
 801152e:	5cba      	ldrb	r2, [r7, r2]
 8011530:	0712      	lsls	r2, r2, #28
 8011532:	d401      	bmi.n	8011538 <__ssvfiscanf_r+0x4c>
 8011534:	462a      	mov	r2, r5
 8011536:	e7ec      	b.n	8011512 <__ssvfiscanf_r+0x26>
 8011538:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801153a:	3301      	adds	r3, #1
 801153c:	3201      	adds	r2, #1
 801153e:	9245      	str	r2, [sp, #276]	@ 0x114
 8011540:	6862      	ldr	r2, [r4, #4]
 8011542:	6023      	str	r3, [r4, #0]
 8011544:	3a01      	subs	r2, #1
 8011546:	6062      	str	r2, [r4, #4]
 8011548:	e7ec      	b.n	8011524 <__ssvfiscanf_r+0x38>
 801154a:	4621      	mov	r1, r4
 801154c:	4630      	mov	r0, r6
 801154e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011550:	4798      	blx	r3
 8011552:	2800      	cmp	r0, #0
 8011554:	d0e9      	beq.n	801152a <__ssvfiscanf_r+0x3e>
 8011556:	e7ed      	b.n	8011534 <__ssvfiscanf_r+0x48>
 8011558:	2b25      	cmp	r3, #37	@ 0x25
 801155a:	d012      	beq.n	8011582 <__ssvfiscanf_r+0x96>
 801155c:	4699      	mov	r9, r3
 801155e:	6863      	ldr	r3, [r4, #4]
 8011560:	2b00      	cmp	r3, #0
 8011562:	f340 8094 	ble.w	801168e <__ssvfiscanf_r+0x1a2>
 8011566:	6822      	ldr	r2, [r4, #0]
 8011568:	7813      	ldrb	r3, [r2, #0]
 801156a:	454b      	cmp	r3, r9
 801156c:	f040 812e 	bne.w	80117cc <__ssvfiscanf_r+0x2e0>
 8011570:	6863      	ldr	r3, [r4, #4]
 8011572:	3201      	adds	r2, #1
 8011574:	3b01      	subs	r3, #1
 8011576:	6063      	str	r3, [r4, #4]
 8011578:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801157a:	6022      	str	r2, [r4, #0]
 801157c:	3301      	adds	r3, #1
 801157e:	9345      	str	r3, [sp, #276]	@ 0x114
 8011580:	e7d8      	b.n	8011534 <__ssvfiscanf_r+0x48>
 8011582:	9141      	str	r1, [sp, #260]	@ 0x104
 8011584:	9143      	str	r1, [sp, #268]	@ 0x10c
 8011586:	7853      	ldrb	r3, [r2, #1]
 8011588:	2b2a      	cmp	r3, #42	@ 0x2a
 801158a:	bf04      	itt	eq
 801158c:	2310      	moveq	r3, #16
 801158e:	1c95      	addeq	r5, r2, #2
 8011590:	f04f 020a 	mov.w	r2, #10
 8011594:	bf08      	it	eq
 8011596:	9341      	streq	r3, [sp, #260]	@ 0x104
 8011598:	46a9      	mov	r9, r5
 801159a:	f819 1b01 	ldrb.w	r1, [r9], #1
 801159e:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80115a2:	2b09      	cmp	r3, #9
 80115a4:	d91e      	bls.n	80115e4 <__ssvfiscanf_r+0xf8>
 80115a6:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 80117b4 <__ssvfiscanf_r+0x2c8>
 80115aa:	2203      	movs	r2, #3
 80115ac:	4650      	mov	r0, sl
 80115ae:	f7fd fc90 	bl	800eed2 <memchr>
 80115b2:	b138      	cbz	r0, 80115c4 <__ssvfiscanf_r+0xd8>
 80115b4:	2301      	movs	r3, #1
 80115b6:	464d      	mov	r5, r9
 80115b8:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80115ba:	eba0 000a 	sub.w	r0, r0, sl
 80115be:	4083      	lsls	r3, r0
 80115c0:	4313      	orrs	r3, r2
 80115c2:	9341      	str	r3, [sp, #260]	@ 0x104
 80115c4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80115c8:	2b78      	cmp	r3, #120	@ 0x78
 80115ca:	d806      	bhi.n	80115da <__ssvfiscanf_r+0xee>
 80115cc:	2b57      	cmp	r3, #87	@ 0x57
 80115ce:	d810      	bhi.n	80115f2 <__ssvfiscanf_r+0x106>
 80115d0:	2b25      	cmp	r3, #37	@ 0x25
 80115d2:	d0c3      	beq.n	801155c <__ssvfiscanf_r+0x70>
 80115d4:	d856      	bhi.n	8011684 <__ssvfiscanf_r+0x198>
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d064      	beq.n	80116a4 <__ssvfiscanf_r+0x1b8>
 80115da:	2303      	movs	r3, #3
 80115dc:	9347      	str	r3, [sp, #284]	@ 0x11c
 80115de:	230a      	movs	r3, #10
 80115e0:	9342      	str	r3, [sp, #264]	@ 0x108
 80115e2:	e077      	b.n	80116d4 <__ssvfiscanf_r+0x1e8>
 80115e4:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80115e6:	464d      	mov	r5, r9
 80115e8:	fb02 1103 	mla	r1, r2, r3, r1
 80115ec:	3930      	subs	r1, #48	@ 0x30
 80115ee:	9143      	str	r1, [sp, #268]	@ 0x10c
 80115f0:	e7d2      	b.n	8011598 <__ssvfiscanf_r+0xac>
 80115f2:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80115f6:	2a20      	cmp	r2, #32
 80115f8:	d8ef      	bhi.n	80115da <__ssvfiscanf_r+0xee>
 80115fa:	a101      	add	r1, pc, #4	@ (adr r1, 8011600 <__ssvfiscanf_r+0x114>)
 80115fc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011600:	080116b3 	.word	0x080116b3
 8011604:	080115db 	.word	0x080115db
 8011608:	080115db 	.word	0x080115db
 801160c:	0801170d 	.word	0x0801170d
 8011610:	080115db 	.word	0x080115db
 8011614:	080115db 	.word	0x080115db
 8011618:	080115db 	.word	0x080115db
 801161c:	080115db 	.word	0x080115db
 8011620:	080115db 	.word	0x080115db
 8011624:	080115db 	.word	0x080115db
 8011628:	080115db 	.word	0x080115db
 801162c:	08011723 	.word	0x08011723
 8011630:	08011709 	.word	0x08011709
 8011634:	0801168b 	.word	0x0801168b
 8011638:	0801168b 	.word	0x0801168b
 801163c:	0801168b 	.word	0x0801168b
 8011640:	080115db 	.word	0x080115db
 8011644:	080116c5 	.word	0x080116c5
 8011648:	080115db 	.word	0x080115db
 801164c:	080115db 	.word	0x080115db
 8011650:	080115db 	.word	0x080115db
 8011654:	080115db 	.word	0x080115db
 8011658:	08011733 	.word	0x08011733
 801165c:	080116cd 	.word	0x080116cd
 8011660:	080116ab 	.word	0x080116ab
 8011664:	080115db 	.word	0x080115db
 8011668:	080115db 	.word	0x080115db
 801166c:	0801172f 	.word	0x0801172f
 8011670:	080115db 	.word	0x080115db
 8011674:	08011709 	.word	0x08011709
 8011678:	080115db 	.word	0x080115db
 801167c:	080115db 	.word	0x080115db
 8011680:	080116b3 	.word	0x080116b3
 8011684:	3b45      	subs	r3, #69	@ 0x45
 8011686:	2b02      	cmp	r3, #2
 8011688:	d8a7      	bhi.n	80115da <__ssvfiscanf_r+0xee>
 801168a:	2305      	movs	r3, #5
 801168c:	e021      	b.n	80116d2 <__ssvfiscanf_r+0x1e6>
 801168e:	4621      	mov	r1, r4
 8011690:	4630      	mov	r0, r6
 8011692:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011694:	4798      	blx	r3
 8011696:	2800      	cmp	r0, #0
 8011698:	f43f af65 	beq.w	8011566 <__ssvfiscanf_r+0x7a>
 801169c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801169e:	2800      	cmp	r0, #0
 80116a0:	f040 808c 	bne.w	80117bc <__ssvfiscanf_r+0x2d0>
 80116a4:	f04f 30ff 	mov.w	r0, #4294967295
 80116a8:	e08c      	b.n	80117c4 <__ssvfiscanf_r+0x2d8>
 80116aa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80116ac:	f042 0220 	orr.w	r2, r2, #32
 80116b0:	9241      	str	r2, [sp, #260]	@ 0x104
 80116b2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80116b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80116b8:	9241      	str	r2, [sp, #260]	@ 0x104
 80116ba:	2210      	movs	r2, #16
 80116bc:	2b6e      	cmp	r3, #110	@ 0x6e
 80116be:	9242      	str	r2, [sp, #264]	@ 0x108
 80116c0:	d902      	bls.n	80116c8 <__ssvfiscanf_r+0x1dc>
 80116c2:	e005      	b.n	80116d0 <__ssvfiscanf_r+0x1e4>
 80116c4:	2300      	movs	r3, #0
 80116c6:	9342      	str	r3, [sp, #264]	@ 0x108
 80116c8:	2303      	movs	r3, #3
 80116ca:	e002      	b.n	80116d2 <__ssvfiscanf_r+0x1e6>
 80116cc:	2308      	movs	r3, #8
 80116ce:	9342      	str	r3, [sp, #264]	@ 0x108
 80116d0:	2304      	movs	r3, #4
 80116d2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80116d4:	6863      	ldr	r3, [r4, #4]
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	dd39      	ble.n	801174e <__ssvfiscanf_r+0x262>
 80116da:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80116dc:	0659      	lsls	r1, r3, #25
 80116de:	d404      	bmi.n	80116ea <__ssvfiscanf_r+0x1fe>
 80116e0:	6823      	ldr	r3, [r4, #0]
 80116e2:	781a      	ldrb	r2, [r3, #0]
 80116e4:	5cba      	ldrb	r2, [r7, r2]
 80116e6:	0712      	lsls	r2, r2, #28
 80116e8:	d438      	bmi.n	801175c <__ssvfiscanf_r+0x270>
 80116ea:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80116ec:	2b02      	cmp	r3, #2
 80116ee:	dc47      	bgt.n	8011780 <__ssvfiscanf_r+0x294>
 80116f0:	466b      	mov	r3, sp
 80116f2:	4622      	mov	r2, r4
 80116f4:	4630      	mov	r0, r6
 80116f6:	a941      	add	r1, sp, #260	@ 0x104
 80116f8:	f000 f86a 	bl	80117d0 <_scanf_chars>
 80116fc:	2801      	cmp	r0, #1
 80116fe:	d065      	beq.n	80117cc <__ssvfiscanf_r+0x2e0>
 8011700:	2802      	cmp	r0, #2
 8011702:	f47f af17 	bne.w	8011534 <__ssvfiscanf_r+0x48>
 8011706:	e7c9      	b.n	801169c <__ssvfiscanf_r+0x1b0>
 8011708:	220a      	movs	r2, #10
 801170a:	e7d7      	b.n	80116bc <__ssvfiscanf_r+0x1d0>
 801170c:	4629      	mov	r1, r5
 801170e:	4640      	mov	r0, r8
 8011710:	f000 fa0b 	bl	8011b2a <__sccl>
 8011714:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011716:	4605      	mov	r5, r0
 8011718:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801171c:	9341      	str	r3, [sp, #260]	@ 0x104
 801171e:	2301      	movs	r3, #1
 8011720:	e7d7      	b.n	80116d2 <__ssvfiscanf_r+0x1e6>
 8011722:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8011724:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011728:	9341      	str	r3, [sp, #260]	@ 0x104
 801172a:	2300      	movs	r3, #0
 801172c:	e7d1      	b.n	80116d2 <__ssvfiscanf_r+0x1e6>
 801172e:	2302      	movs	r3, #2
 8011730:	e7cf      	b.n	80116d2 <__ssvfiscanf_r+0x1e6>
 8011732:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8011734:	06c3      	lsls	r3, r0, #27
 8011736:	f53f aefd 	bmi.w	8011534 <__ssvfiscanf_r+0x48>
 801173a:	9b00      	ldr	r3, [sp, #0]
 801173c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801173e:	1d19      	adds	r1, r3, #4
 8011740:	9100      	str	r1, [sp, #0]
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	07c0      	lsls	r0, r0, #31
 8011746:	bf4c      	ite	mi
 8011748:	801a      	strhmi	r2, [r3, #0]
 801174a:	601a      	strpl	r2, [r3, #0]
 801174c:	e6f2      	b.n	8011534 <__ssvfiscanf_r+0x48>
 801174e:	4621      	mov	r1, r4
 8011750:	4630      	mov	r0, r6
 8011752:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011754:	4798      	blx	r3
 8011756:	2800      	cmp	r0, #0
 8011758:	d0bf      	beq.n	80116da <__ssvfiscanf_r+0x1ee>
 801175a:	e79f      	b.n	801169c <__ssvfiscanf_r+0x1b0>
 801175c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801175e:	3201      	adds	r2, #1
 8011760:	9245      	str	r2, [sp, #276]	@ 0x114
 8011762:	6862      	ldr	r2, [r4, #4]
 8011764:	3a01      	subs	r2, #1
 8011766:	2a00      	cmp	r2, #0
 8011768:	6062      	str	r2, [r4, #4]
 801176a:	dd02      	ble.n	8011772 <__ssvfiscanf_r+0x286>
 801176c:	3301      	adds	r3, #1
 801176e:	6023      	str	r3, [r4, #0]
 8011770:	e7b6      	b.n	80116e0 <__ssvfiscanf_r+0x1f4>
 8011772:	4621      	mov	r1, r4
 8011774:	4630      	mov	r0, r6
 8011776:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011778:	4798      	blx	r3
 801177a:	2800      	cmp	r0, #0
 801177c:	d0b0      	beq.n	80116e0 <__ssvfiscanf_r+0x1f4>
 801177e:	e78d      	b.n	801169c <__ssvfiscanf_r+0x1b0>
 8011780:	2b04      	cmp	r3, #4
 8011782:	dc06      	bgt.n	8011792 <__ssvfiscanf_r+0x2a6>
 8011784:	466b      	mov	r3, sp
 8011786:	4622      	mov	r2, r4
 8011788:	4630      	mov	r0, r6
 801178a:	a941      	add	r1, sp, #260	@ 0x104
 801178c:	f000 f87a 	bl	8011884 <_scanf_i>
 8011790:	e7b4      	b.n	80116fc <__ssvfiscanf_r+0x210>
 8011792:	4b09      	ldr	r3, [pc, #36]	@ (80117b8 <__ssvfiscanf_r+0x2cc>)
 8011794:	2b00      	cmp	r3, #0
 8011796:	f43f aecd 	beq.w	8011534 <__ssvfiscanf_r+0x48>
 801179a:	466b      	mov	r3, sp
 801179c:	4622      	mov	r2, r4
 801179e:	4630      	mov	r0, r6
 80117a0:	a941      	add	r1, sp, #260	@ 0x104
 80117a2:	f3af 8000 	nop.w
 80117a6:	e7a9      	b.n	80116fc <__ssvfiscanf_r+0x210>
 80117a8:	0801143d 	.word	0x0801143d
 80117ac:	080114b3 	.word	0x080114b3
 80117b0:	08011f51 	.word	0x08011f51
 80117b4:	0801241e 	.word	0x0801241e
 80117b8:	00000000 	.word	0x00000000
 80117bc:	89a3      	ldrh	r3, [r4, #12]
 80117be:	065b      	lsls	r3, r3, #25
 80117c0:	f53f af70 	bmi.w	80116a4 <__ssvfiscanf_r+0x1b8>
 80117c4:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80117c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117cc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80117ce:	e7f9      	b.n	80117c4 <__ssvfiscanf_r+0x2d8>

080117d0 <_scanf_chars>:
 80117d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80117d4:	4615      	mov	r5, r2
 80117d6:	688a      	ldr	r2, [r1, #8]
 80117d8:	4680      	mov	r8, r0
 80117da:	460c      	mov	r4, r1
 80117dc:	b932      	cbnz	r2, 80117ec <_scanf_chars+0x1c>
 80117de:	698a      	ldr	r2, [r1, #24]
 80117e0:	2a00      	cmp	r2, #0
 80117e2:	bf14      	ite	ne
 80117e4:	f04f 32ff 	movne.w	r2, #4294967295
 80117e8:	2201      	moveq	r2, #1
 80117ea:	608a      	str	r2, [r1, #8]
 80117ec:	2700      	movs	r7, #0
 80117ee:	6822      	ldr	r2, [r4, #0]
 80117f0:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8011880 <_scanf_chars+0xb0>
 80117f4:	06d1      	lsls	r1, r2, #27
 80117f6:	bf5f      	itttt	pl
 80117f8:	681a      	ldrpl	r2, [r3, #0]
 80117fa:	1d11      	addpl	r1, r2, #4
 80117fc:	6019      	strpl	r1, [r3, #0]
 80117fe:	6816      	ldrpl	r6, [r2, #0]
 8011800:	69a0      	ldr	r0, [r4, #24]
 8011802:	b188      	cbz	r0, 8011828 <_scanf_chars+0x58>
 8011804:	2801      	cmp	r0, #1
 8011806:	d107      	bne.n	8011818 <_scanf_chars+0x48>
 8011808:	682b      	ldr	r3, [r5, #0]
 801180a:	781a      	ldrb	r2, [r3, #0]
 801180c:	6963      	ldr	r3, [r4, #20]
 801180e:	5c9b      	ldrb	r3, [r3, r2]
 8011810:	b953      	cbnz	r3, 8011828 <_scanf_chars+0x58>
 8011812:	2f00      	cmp	r7, #0
 8011814:	d031      	beq.n	801187a <_scanf_chars+0xaa>
 8011816:	e022      	b.n	801185e <_scanf_chars+0x8e>
 8011818:	2802      	cmp	r0, #2
 801181a:	d120      	bne.n	801185e <_scanf_chars+0x8e>
 801181c:	682b      	ldr	r3, [r5, #0]
 801181e:	781b      	ldrb	r3, [r3, #0]
 8011820:	f819 3003 	ldrb.w	r3, [r9, r3]
 8011824:	071b      	lsls	r3, r3, #28
 8011826:	d41a      	bmi.n	801185e <_scanf_chars+0x8e>
 8011828:	6823      	ldr	r3, [r4, #0]
 801182a:	3701      	adds	r7, #1
 801182c:	06da      	lsls	r2, r3, #27
 801182e:	bf5e      	ittt	pl
 8011830:	682b      	ldrpl	r3, [r5, #0]
 8011832:	781b      	ldrbpl	r3, [r3, #0]
 8011834:	f806 3b01 	strbpl.w	r3, [r6], #1
 8011838:	682a      	ldr	r2, [r5, #0]
 801183a:	686b      	ldr	r3, [r5, #4]
 801183c:	3201      	adds	r2, #1
 801183e:	602a      	str	r2, [r5, #0]
 8011840:	68a2      	ldr	r2, [r4, #8]
 8011842:	3b01      	subs	r3, #1
 8011844:	3a01      	subs	r2, #1
 8011846:	606b      	str	r3, [r5, #4]
 8011848:	60a2      	str	r2, [r4, #8]
 801184a:	b142      	cbz	r2, 801185e <_scanf_chars+0x8e>
 801184c:	2b00      	cmp	r3, #0
 801184e:	dcd7      	bgt.n	8011800 <_scanf_chars+0x30>
 8011850:	4629      	mov	r1, r5
 8011852:	4640      	mov	r0, r8
 8011854:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011858:	4798      	blx	r3
 801185a:	2800      	cmp	r0, #0
 801185c:	d0d0      	beq.n	8011800 <_scanf_chars+0x30>
 801185e:	6823      	ldr	r3, [r4, #0]
 8011860:	f013 0310 	ands.w	r3, r3, #16
 8011864:	d105      	bne.n	8011872 <_scanf_chars+0xa2>
 8011866:	68e2      	ldr	r2, [r4, #12]
 8011868:	3201      	adds	r2, #1
 801186a:	60e2      	str	r2, [r4, #12]
 801186c:	69a2      	ldr	r2, [r4, #24]
 801186e:	b102      	cbz	r2, 8011872 <_scanf_chars+0xa2>
 8011870:	7033      	strb	r3, [r6, #0]
 8011872:	2000      	movs	r0, #0
 8011874:	6923      	ldr	r3, [r4, #16]
 8011876:	443b      	add	r3, r7
 8011878:	6123      	str	r3, [r4, #16]
 801187a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801187e:	bf00      	nop
 8011880:	08011f51 	.word	0x08011f51

08011884 <_scanf_i>:
 8011884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011888:	460c      	mov	r4, r1
 801188a:	4698      	mov	r8, r3
 801188c:	4b72      	ldr	r3, [pc, #456]	@ (8011a58 <_scanf_i+0x1d4>)
 801188e:	b087      	sub	sp, #28
 8011890:	4682      	mov	sl, r0
 8011892:	4616      	mov	r6, r2
 8011894:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011898:	ab03      	add	r3, sp, #12
 801189a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801189e:	4b6f      	ldr	r3, [pc, #444]	@ (8011a5c <_scanf_i+0x1d8>)
 80118a0:	69a1      	ldr	r1, [r4, #24]
 80118a2:	4a6f      	ldr	r2, [pc, #444]	@ (8011a60 <_scanf_i+0x1dc>)
 80118a4:	4627      	mov	r7, r4
 80118a6:	2903      	cmp	r1, #3
 80118a8:	bf08      	it	eq
 80118aa:	461a      	moveq	r2, r3
 80118ac:	68a3      	ldr	r3, [r4, #8]
 80118ae:	9201      	str	r2, [sp, #4]
 80118b0:	1e5a      	subs	r2, r3, #1
 80118b2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80118b6:	bf81      	itttt	hi
 80118b8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80118bc:	eb03 0905 	addhi.w	r9, r3, r5
 80118c0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80118c4:	60a3      	strhi	r3, [r4, #8]
 80118c6:	f857 3b1c 	ldr.w	r3, [r7], #28
 80118ca:	bf98      	it	ls
 80118cc:	f04f 0900 	movls.w	r9, #0
 80118d0:	463d      	mov	r5, r7
 80118d2:	f04f 0b00 	mov.w	fp, #0
 80118d6:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80118da:	6023      	str	r3, [r4, #0]
 80118dc:	6831      	ldr	r1, [r6, #0]
 80118de:	ab03      	add	r3, sp, #12
 80118e0:	2202      	movs	r2, #2
 80118e2:	7809      	ldrb	r1, [r1, #0]
 80118e4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80118e8:	f7fd faf3 	bl	800eed2 <memchr>
 80118ec:	b328      	cbz	r0, 801193a <_scanf_i+0xb6>
 80118ee:	f1bb 0f01 	cmp.w	fp, #1
 80118f2:	d159      	bne.n	80119a8 <_scanf_i+0x124>
 80118f4:	6862      	ldr	r2, [r4, #4]
 80118f6:	b92a      	cbnz	r2, 8011904 <_scanf_i+0x80>
 80118f8:	2108      	movs	r1, #8
 80118fa:	6822      	ldr	r2, [r4, #0]
 80118fc:	6061      	str	r1, [r4, #4]
 80118fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8011902:	6022      	str	r2, [r4, #0]
 8011904:	6822      	ldr	r2, [r4, #0]
 8011906:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 801190a:	6022      	str	r2, [r4, #0]
 801190c:	68a2      	ldr	r2, [r4, #8]
 801190e:	1e51      	subs	r1, r2, #1
 8011910:	60a1      	str	r1, [r4, #8]
 8011912:	b192      	cbz	r2, 801193a <_scanf_i+0xb6>
 8011914:	6832      	ldr	r2, [r6, #0]
 8011916:	1c51      	adds	r1, r2, #1
 8011918:	6031      	str	r1, [r6, #0]
 801191a:	7812      	ldrb	r2, [r2, #0]
 801191c:	f805 2b01 	strb.w	r2, [r5], #1
 8011920:	6872      	ldr	r2, [r6, #4]
 8011922:	3a01      	subs	r2, #1
 8011924:	2a00      	cmp	r2, #0
 8011926:	6072      	str	r2, [r6, #4]
 8011928:	dc07      	bgt.n	801193a <_scanf_i+0xb6>
 801192a:	4631      	mov	r1, r6
 801192c:	4650      	mov	r0, sl
 801192e:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8011932:	4790      	blx	r2
 8011934:	2800      	cmp	r0, #0
 8011936:	f040 8085 	bne.w	8011a44 <_scanf_i+0x1c0>
 801193a:	f10b 0b01 	add.w	fp, fp, #1
 801193e:	f1bb 0f03 	cmp.w	fp, #3
 8011942:	d1cb      	bne.n	80118dc <_scanf_i+0x58>
 8011944:	6863      	ldr	r3, [r4, #4]
 8011946:	b90b      	cbnz	r3, 801194c <_scanf_i+0xc8>
 8011948:	230a      	movs	r3, #10
 801194a:	6063      	str	r3, [r4, #4]
 801194c:	6863      	ldr	r3, [r4, #4]
 801194e:	4945      	ldr	r1, [pc, #276]	@ (8011a64 <_scanf_i+0x1e0>)
 8011950:	6960      	ldr	r0, [r4, #20]
 8011952:	1ac9      	subs	r1, r1, r3
 8011954:	f000 f8e9 	bl	8011b2a <__sccl>
 8011958:	f04f 0b00 	mov.w	fp, #0
 801195c:	68a3      	ldr	r3, [r4, #8]
 801195e:	6822      	ldr	r2, [r4, #0]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d03d      	beq.n	80119e0 <_scanf_i+0x15c>
 8011964:	6831      	ldr	r1, [r6, #0]
 8011966:	6960      	ldr	r0, [r4, #20]
 8011968:	f891 c000 	ldrb.w	ip, [r1]
 801196c:	f810 000c 	ldrb.w	r0, [r0, ip]
 8011970:	2800      	cmp	r0, #0
 8011972:	d035      	beq.n	80119e0 <_scanf_i+0x15c>
 8011974:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8011978:	d124      	bne.n	80119c4 <_scanf_i+0x140>
 801197a:	0510      	lsls	r0, r2, #20
 801197c:	d522      	bpl.n	80119c4 <_scanf_i+0x140>
 801197e:	f10b 0b01 	add.w	fp, fp, #1
 8011982:	f1b9 0f00 	cmp.w	r9, #0
 8011986:	d003      	beq.n	8011990 <_scanf_i+0x10c>
 8011988:	3301      	adds	r3, #1
 801198a:	f109 39ff 	add.w	r9, r9, #4294967295
 801198e:	60a3      	str	r3, [r4, #8]
 8011990:	6873      	ldr	r3, [r6, #4]
 8011992:	3b01      	subs	r3, #1
 8011994:	2b00      	cmp	r3, #0
 8011996:	6073      	str	r3, [r6, #4]
 8011998:	dd1b      	ble.n	80119d2 <_scanf_i+0x14e>
 801199a:	6833      	ldr	r3, [r6, #0]
 801199c:	3301      	adds	r3, #1
 801199e:	6033      	str	r3, [r6, #0]
 80119a0:	68a3      	ldr	r3, [r4, #8]
 80119a2:	3b01      	subs	r3, #1
 80119a4:	60a3      	str	r3, [r4, #8]
 80119a6:	e7d9      	b.n	801195c <_scanf_i+0xd8>
 80119a8:	f1bb 0f02 	cmp.w	fp, #2
 80119ac:	d1ae      	bne.n	801190c <_scanf_i+0x88>
 80119ae:	6822      	ldr	r2, [r4, #0]
 80119b0:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80119b4:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80119b8:	d1bf      	bne.n	801193a <_scanf_i+0xb6>
 80119ba:	2110      	movs	r1, #16
 80119bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80119c0:	6061      	str	r1, [r4, #4]
 80119c2:	e7a2      	b.n	801190a <_scanf_i+0x86>
 80119c4:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80119c8:	6022      	str	r2, [r4, #0]
 80119ca:	780b      	ldrb	r3, [r1, #0]
 80119cc:	f805 3b01 	strb.w	r3, [r5], #1
 80119d0:	e7de      	b.n	8011990 <_scanf_i+0x10c>
 80119d2:	4631      	mov	r1, r6
 80119d4:	4650      	mov	r0, sl
 80119d6:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80119da:	4798      	blx	r3
 80119dc:	2800      	cmp	r0, #0
 80119de:	d0df      	beq.n	80119a0 <_scanf_i+0x11c>
 80119e0:	6823      	ldr	r3, [r4, #0]
 80119e2:	05d9      	lsls	r1, r3, #23
 80119e4:	d50d      	bpl.n	8011a02 <_scanf_i+0x17e>
 80119e6:	42bd      	cmp	r5, r7
 80119e8:	d909      	bls.n	80119fe <_scanf_i+0x17a>
 80119ea:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80119ee:	4632      	mov	r2, r6
 80119f0:	4650      	mov	r0, sl
 80119f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80119f6:	f105 39ff 	add.w	r9, r5, #4294967295
 80119fa:	4798      	blx	r3
 80119fc:	464d      	mov	r5, r9
 80119fe:	42bd      	cmp	r5, r7
 8011a00:	d028      	beq.n	8011a54 <_scanf_i+0x1d0>
 8011a02:	6822      	ldr	r2, [r4, #0]
 8011a04:	f012 0210 	ands.w	r2, r2, #16
 8011a08:	d113      	bne.n	8011a32 <_scanf_i+0x1ae>
 8011a0a:	702a      	strb	r2, [r5, #0]
 8011a0c:	4639      	mov	r1, r7
 8011a0e:	6863      	ldr	r3, [r4, #4]
 8011a10:	4650      	mov	r0, sl
 8011a12:	9e01      	ldr	r6, [sp, #4]
 8011a14:	47b0      	blx	r6
 8011a16:	f8d8 3000 	ldr.w	r3, [r8]
 8011a1a:	6821      	ldr	r1, [r4, #0]
 8011a1c:	1d1a      	adds	r2, r3, #4
 8011a1e:	f8c8 2000 	str.w	r2, [r8]
 8011a22:	f011 0f20 	tst.w	r1, #32
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	d00f      	beq.n	8011a4a <_scanf_i+0x1c6>
 8011a2a:	6018      	str	r0, [r3, #0]
 8011a2c:	68e3      	ldr	r3, [r4, #12]
 8011a2e:	3301      	adds	r3, #1
 8011a30:	60e3      	str	r3, [r4, #12]
 8011a32:	2000      	movs	r0, #0
 8011a34:	6923      	ldr	r3, [r4, #16]
 8011a36:	1bed      	subs	r5, r5, r7
 8011a38:	445d      	add	r5, fp
 8011a3a:	442b      	add	r3, r5
 8011a3c:	6123      	str	r3, [r4, #16]
 8011a3e:	b007      	add	sp, #28
 8011a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a44:	f04f 0b00 	mov.w	fp, #0
 8011a48:	e7ca      	b.n	80119e0 <_scanf_i+0x15c>
 8011a4a:	07ca      	lsls	r2, r1, #31
 8011a4c:	bf4c      	ite	mi
 8011a4e:	8018      	strhmi	r0, [r3, #0]
 8011a50:	6018      	strpl	r0, [r3, #0]
 8011a52:	e7eb      	b.n	8011a2c <_scanf_i+0x1a8>
 8011a54:	2001      	movs	r0, #1
 8011a56:	e7f2      	b.n	8011a3e <_scanf_i+0x1ba>
 8011a58:	08011e98 	.word	0x08011e98
 8011a5c:	0800d5e5 	.word	0x0800d5e5
 8011a60:	08010de9 	.word	0x08010de9
 8011a64:	0801249c 	.word	0x0801249c

08011a68 <__swhatbuf_r>:
 8011a68:	b570      	push	{r4, r5, r6, lr}
 8011a6a:	460c      	mov	r4, r1
 8011a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a70:	4615      	mov	r5, r2
 8011a72:	2900      	cmp	r1, #0
 8011a74:	461e      	mov	r6, r3
 8011a76:	b096      	sub	sp, #88	@ 0x58
 8011a78:	da0c      	bge.n	8011a94 <__swhatbuf_r+0x2c>
 8011a7a:	89a3      	ldrh	r3, [r4, #12]
 8011a7c:	2100      	movs	r1, #0
 8011a7e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011a82:	bf14      	ite	ne
 8011a84:	2340      	movne	r3, #64	@ 0x40
 8011a86:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011a8a:	2000      	movs	r0, #0
 8011a8c:	6031      	str	r1, [r6, #0]
 8011a8e:	602b      	str	r3, [r5, #0]
 8011a90:	b016      	add	sp, #88	@ 0x58
 8011a92:	bd70      	pop	{r4, r5, r6, pc}
 8011a94:	466a      	mov	r2, sp
 8011a96:	f000 f8e9 	bl	8011c6c <_fstat_r>
 8011a9a:	2800      	cmp	r0, #0
 8011a9c:	dbed      	blt.n	8011a7a <__swhatbuf_r+0x12>
 8011a9e:	9901      	ldr	r1, [sp, #4]
 8011aa0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011aa4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011aa8:	4259      	negs	r1, r3
 8011aaa:	4159      	adcs	r1, r3
 8011aac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011ab0:	e7eb      	b.n	8011a8a <__swhatbuf_r+0x22>

08011ab2 <__smakebuf_r>:
 8011ab2:	898b      	ldrh	r3, [r1, #12]
 8011ab4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011ab6:	079d      	lsls	r5, r3, #30
 8011ab8:	4606      	mov	r6, r0
 8011aba:	460c      	mov	r4, r1
 8011abc:	d507      	bpl.n	8011ace <__smakebuf_r+0x1c>
 8011abe:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011ac2:	6023      	str	r3, [r4, #0]
 8011ac4:	6123      	str	r3, [r4, #16]
 8011ac6:	2301      	movs	r3, #1
 8011ac8:	6163      	str	r3, [r4, #20]
 8011aca:	b003      	add	sp, #12
 8011acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ace:	466a      	mov	r2, sp
 8011ad0:	ab01      	add	r3, sp, #4
 8011ad2:	f7ff ffc9 	bl	8011a68 <__swhatbuf_r>
 8011ad6:	9f00      	ldr	r7, [sp, #0]
 8011ad8:	4605      	mov	r5, r0
 8011ada:	4639      	mov	r1, r7
 8011adc:	4630      	mov	r0, r6
 8011ade:	f7fa fe27 	bl	800c730 <_malloc_r>
 8011ae2:	b948      	cbnz	r0, 8011af8 <__smakebuf_r+0x46>
 8011ae4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ae8:	059a      	lsls	r2, r3, #22
 8011aea:	d4ee      	bmi.n	8011aca <__smakebuf_r+0x18>
 8011aec:	f023 0303 	bic.w	r3, r3, #3
 8011af0:	f043 0302 	orr.w	r3, r3, #2
 8011af4:	81a3      	strh	r3, [r4, #12]
 8011af6:	e7e2      	b.n	8011abe <__smakebuf_r+0xc>
 8011af8:	89a3      	ldrh	r3, [r4, #12]
 8011afa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011afe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b02:	81a3      	strh	r3, [r4, #12]
 8011b04:	9b01      	ldr	r3, [sp, #4]
 8011b06:	6020      	str	r0, [r4, #0]
 8011b08:	b15b      	cbz	r3, 8011b22 <__smakebuf_r+0x70>
 8011b0a:	4630      	mov	r0, r6
 8011b0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b10:	f000 f8be 	bl	8011c90 <_isatty_r>
 8011b14:	b128      	cbz	r0, 8011b22 <__smakebuf_r+0x70>
 8011b16:	89a3      	ldrh	r3, [r4, #12]
 8011b18:	f023 0303 	bic.w	r3, r3, #3
 8011b1c:	f043 0301 	orr.w	r3, r3, #1
 8011b20:	81a3      	strh	r3, [r4, #12]
 8011b22:	89a3      	ldrh	r3, [r4, #12]
 8011b24:	431d      	orrs	r5, r3
 8011b26:	81a5      	strh	r5, [r4, #12]
 8011b28:	e7cf      	b.n	8011aca <__smakebuf_r+0x18>

08011b2a <__sccl>:
 8011b2a:	b570      	push	{r4, r5, r6, lr}
 8011b2c:	780b      	ldrb	r3, [r1, #0]
 8011b2e:	4604      	mov	r4, r0
 8011b30:	2b5e      	cmp	r3, #94	@ 0x5e
 8011b32:	bf0b      	itete	eq
 8011b34:	784b      	ldrbeq	r3, [r1, #1]
 8011b36:	1c4a      	addne	r2, r1, #1
 8011b38:	1c8a      	addeq	r2, r1, #2
 8011b3a:	2100      	movne	r1, #0
 8011b3c:	bf08      	it	eq
 8011b3e:	2101      	moveq	r1, #1
 8011b40:	3801      	subs	r0, #1
 8011b42:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8011b46:	f800 1f01 	strb.w	r1, [r0, #1]!
 8011b4a:	42a8      	cmp	r0, r5
 8011b4c:	d1fb      	bne.n	8011b46 <__sccl+0x1c>
 8011b4e:	b90b      	cbnz	r3, 8011b54 <__sccl+0x2a>
 8011b50:	1e50      	subs	r0, r2, #1
 8011b52:	bd70      	pop	{r4, r5, r6, pc}
 8011b54:	f081 0101 	eor.w	r1, r1, #1
 8011b58:	4610      	mov	r0, r2
 8011b5a:	54e1      	strb	r1, [r4, r3]
 8011b5c:	4602      	mov	r2, r0
 8011b5e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011b62:	2d2d      	cmp	r5, #45	@ 0x2d
 8011b64:	d005      	beq.n	8011b72 <__sccl+0x48>
 8011b66:	2d5d      	cmp	r5, #93	@ 0x5d
 8011b68:	d016      	beq.n	8011b98 <__sccl+0x6e>
 8011b6a:	2d00      	cmp	r5, #0
 8011b6c:	d0f1      	beq.n	8011b52 <__sccl+0x28>
 8011b6e:	462b      	mov	r3, r5
 8011b70:	e7f2      	b.n	8011b58 <__sccl+0x2e>
 8011b72:	7846      	ldrb	r6, [r0, #1]
 8011b74:	2e5d      	cmp	r6, #93	@ 0x5d
 8011b76:	d0fa      	beq.n	8011b6e <__sccl+0x44>
 8011b78:	42b3      	cmp	r3, r6
 8011b7a:	dcf8      	bgt.n	8011b6e <__sccl+0x44>
 8011b7c:	461a      	mov	r2, r3
 8011b7e:	3002      	adds	r0, #2
 8011b80:	3201      	adds	r2, #1
 8011b82:	4296      	cmp	r6, r2
 8011b84:	54a1      	strb	r1, [r4, r2]
 8011b86:	dcfb      	bgt.n	8011b80 <__sccl+0x56>
 8011b88:	1af2      	subs	r2, r6, r3
 8011b8a:	3a01      	subs	r2, #1
 8011b8c:	42b3      	cmp	r3, r6
 8011b8e:	bfa8      	it	ge
 8011b90:	2200      	movge	r2, #0
 8011b92:	1c5d      	adds	r5, r3, #1
 8011b94:	18ab      	adds	r3, r5, r2
 8011b96:	e7e1      	b.n	8011b5c <__sccl+0x32>
 8011b98:	4610      	mov	r0, r2
 8011b9a:	e7da      	b.n	8011b52 <__sccl+0x28>

08011b9c <__submore>:
 8011b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ba0:	460c      	mov	r4, r1
 8011ba2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8011ba4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011ba8:	4299      	cmp	r1, r3
 8011baa:	d11b      	bne.n	8011be4 <__submore+0x48>
 8011bac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8011bb0:	f7fa fdbe 	bl	800c730 <_malloc_r>
 8011bb4:	b918      	cbnz	r0, 8011bbe <__submore+0x22>
 8011bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8011bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011bc2:	63a3      	str	r3, [r4, #56]	@ 0x38
 8011bc4:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8011bc8:	6360      	str	r0, [r4, #52]	@ 0x34
 8011bca:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8011bce:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8011bd2:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8011bd6:	7043      	strb	r3, [r0, #1]
 8011bd8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011bdc:	7003      	strb	r3, [r0, #0]
 8011bde:	6020      	str	r0, [r4, #0]
 8011be0:	2000      	movs	r0, #0
 8011be2:	e7ea      	b.n	8011bba <__submore+0x1e>
 8011be4:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8011be6:	0077      	lsls	r7, r6, #1
 8011be8:	463a      	mov	r2, r7
 8011bea:	f7ff fbf9 	bl	80113e0 <_realloc_r>
 8011bee:	4605      	mov	r5, r0
 8011bf0:	2800      	cmp	r0, #0
 8011bf2:	d0e0      	beq.n	8011bb6 <__submore+0x1a>
 8011bf4:	eb00 0806 	add.w	r8, r0, r6
 8011bf8:	4601      	mov	r1, r0
 8011bfa:	4632      	mov	r2, r6
 8011bfc:	4640      	mov	r0, r8
 8011bfe:	f7fd f976 	bl	800eeee <memcpy>
 8011c02:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8011c06:	f8c4 8000 	str.w	r8, [r4]
 8011c0a:	e7e9      	b.n	8011be0 <__submore+0x44>

08011c0c <_raise_r>:
 8011c0c:	291f      	cmp	r1, #31
 8011c0e:	b538      	push	{r3, r4, r5, lr}
 8011c10:	4605      	mov	r5, r0
 8011c12:	460c      	mov	r4, r1
 8011c14:	d904      	bls.n	8011c20 <_raise_r+0x14>
 8011c16:	2316      	movs	r3, #22
 8011c18:	6003      	str	r3, [r0, #0]
 8011c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8011c1e:	bd38      	pop	{r3, r4, r5, pc}
 8011c20:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011c22:	b112      	cbz	r2, 8011c2a <_raise_r+0x1e>
 8011c24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011c28:	b94b      	cbnz	r3, 8011c3e <_raise_r+0x32>
 8011c2a:	4628      	mov	r0, r5
 8011c2c:	f000 f852 	bl	8011cd4 <_getpid_r>
 8011c30:	4622      	mov	r2, r4
 8011c32:	4601      	mov	r1, r0
 8011c34:	4628      	mov	r0, r5
 8011c36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011c3a:	f000 b839 	b.w	8011cb0 <_kill_r>
 8011c3e:	2b01      	cmp	r3, #1
 8011c40:	d00a      	beq.n	8011c58 <_raise_r+0x4c>
 8011c42:	1c59      	adds	r1, r3, #1
 8011c44:	d103      	bne.n	8011c4e <_raise_r+0x42>
 8011c46:	2316      	movs	r3, #22
 8011c48:	6003      	str	r3, [r0, #0]
 8011c4a:	2001      	movs	r0, #1
 8011c4c:	e7e7      	b.n	8011c1e <_raise_r+0x12>
 8011c4e:	2100      	movs	r1, #0
 8011c50:	4620      	mov	r0, r4
 8011c52:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011c56:	4798      	blx	r3
 8011c58:	2000      	movs	r0, #0
 8011c5a:	e7e0      	b.n	8011c1e <_raise_r+0x12>

08011c5c <raise>:
 8011c5c:	4b02      	ldr	r3, [pc, #8]	@ (8011c68 <raise+0xc>)
 8011c5e:	4601      	mov	r1, r0
 8011c60:	6818      	ldr	r0, [r3, #0]
 8011c62:	f7ff bfd3 	b.w	8011c0c <_raise_r>
 8011c66:	bf00      	nop
 8011c68:	20000284 	.word	0x20000284

08011c6c <_fstat_r>:
 8011c6c:	b538      	push	{r3, r4, r5, lr}
 8011c6e:	2300      	movs	r3, #0
 8011c70:	4d06      	ldr	r5, [pc, #24]	@ (8011c8c <_fstat_r+0x20>)
 8011c72:	4604      	mov	r4, r0
 8011c74:	4608      	mov	r0, r1
 8011c76:	4611      	mov	r1, r2
 8011c78:	602b      	str	r3, [r5, #0]
 8011c7a:	f7f2 fb40 	bl	80042fe <_fstat>
 8011c7e:	1c43      	adds	r3, r0, #1
 8011c80:	d102      	bne.n	8011c88 <_fstat_r+0x1c>
 8011c82:	682b      	ldr	r3, [r5, #0]
 8011c84:	b103      	cbz	r3, 8011c88 <_fstat_r+0x1c>
 8011c86:	6023      	str	r3, [r4, #0]
 8011c88:	bd38      	pop	{r3, r4, r5, pc}
 8011c8a:	bf00      	nop
 8011c8c:	20005b84 	.word	0x20005b84

08011c90 <_isatty_r>:
 8011c90:	b538      	push	{r3, r4, r5, lr}
 8011c92:	2300      	movs	r3, #0
 8011c94:	4d05      	ldr	r5, [pc, #20]	@ (8011cac <_isatty_r+0x1c>)
 8011c96:	4604      	mov	r4, r0
 8011c98:	4608      	mov	r0, r1
 8011c9a:	602b      	str	r3, [r5, #0]
 8011c9c:	f7f2 fb3e 	bl	800431c <_isatty>
 8011ca0:	1c43      	adds	r3, r0, #1
 8011ca2:	d102      	bne.n	8011caa <_isatty_r+0x1a>
 8011ca4:	682b      	ldr	r3, [r5, #0]
 8011ca6:	b103      	cbz	r3, 8011caa <_isatty_r+0x1a>
 8011ca8:	6023      	str	r3, [r4, #0]
 8011caa:	bd38      	pop	{r3, r4, r5, pc}
 8011cac:	20005b84 	.word	0x20005b84

08011cb0 <_kill_r>:
 8011cb0:	b538      	push	{r3, r4, r5, lr}
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	4d06      	ldr	r5, [pc, #24]	@ (8011cd0 <_kill_r+0x20>)
 8011cb6:	4604      	mov	r4, r0
 8011cb8:	4608      	mov	r0, r1
 8011cba:	4611      	mov	r1, r2
 8011cbc:	602b      	str	r3, [r5, #0]
 8011cbe:	f7f2 faf8 	bl	80042b2 <_kill>
 8011cc2:	1c43      	adds	r3, r0, #1
 8011cc4:	d102      	bne.n	8011ccc <_kill_r+0x1c>
 8011cc6:	682b      	ldr	r3, [r5, #0]
 8011cc8:	b103      	cbz	r3, 8011ccc <_kill_r+0x1c>
 8011cca:	6023      	str	r3, [r4, #0]
 8011ccc:	bd38      	pop	{r3, r4, r5, pc}
 8011cce:	bf00      	nop
 8011cd0:	20005b84 	.word	0x20005b84

08011cd4 <_getpid_r>:
 8011cd4:	f7f2 bae6 	b.w	80042a4 <_getpid>

08011cd8 <_malloc_usable_size_r>:
 8011cd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011cdc:	1f18      	subs	r0, r3, #4
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	bfbc      	itt	lt
 8011ce2:	580b      	ldrlt	r3, [r1, r0]
 8011ce4:	18c0      	addlt	r0, r0, r3
 8011ce6:	4770      	bx	lr

08011ce8 <_init>:
 8011ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cea:	bf00      	nop
 8011cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011cee:	bc08      	pop	{r3}
 8011cf0:	469e      	mov	lr, r3
 8011cf2:	4770      	bx	lr

08011cf4 <_fini>:
 8011cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cf6:	bf00      	nop
 8011cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011cfa:	bc08      	pop	{r3}
 8011cfc:	469e      	mov	lr, r3
 8011cfe:	4770      	bx	lr
