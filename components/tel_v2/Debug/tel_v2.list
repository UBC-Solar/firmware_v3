
tel_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005910  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08005b00  08005b00  00015b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d40  08005d40  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08005d40  08005d40  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d40  08005d40  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d40  08005d40  00015d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d44  08005d44  00015d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005d48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000031b0  20000060  08005da8  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003210  08005da8  00023210  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018367  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000397f  00000000  00000000  00038433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001438  00000000  00000000  0003bdb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fab  00000000  00000000  0003d1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bda4  00000000  00000000  0003e19b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000195f8  00000000  00000000  00059f3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a0c57  00000000  00000000  00073537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000566c  00000000  00000000  00114190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  001197fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000060 	.word	0x20000060
 800020c:	00000000 	.word	0x00000000
 8000210:	08005ae8 	.word	0x08005ae8

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000064 	.word	0x20000064
 800022c:	08005ae8 	.word	0x08005ae8

08000230 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000234:	4b17      	ldr	r3, [pc, #92]	; (8000294 <MX_CAN_Init+0x64>)
 8000236:	4a18      	ldr	r2, [pc, #96]	; (8000298 <MX_CAN_Init+0x68>)
 8000238:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800023a:	4b16      	ldr	r3, [pc, #88]	; (8000294 <MX_CAN_Init+0x64>)
 800023c:	2204      	movs	r2, #4
 800023e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000240:	4b14      	ldr	r3, [pc, #80]	; (8000294 <MX_CAN_Init+0x64>)
 8000242:	2200      	movs	r2, #0
 8000244:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000246:	4b13      	ldr	r3, [pc, #76]	; (8000294 <MX_CAN_Init+0x64>)
 8000248:	2200      	movs	r2, #0
 800024a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 800024c:	4b11      	ldr	r3, [pc, #68]	; (8000294 <MX_CAN_Init+0x64>)
 800024e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000252:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000254:	4b0f      	ldr	r3, [pc, #60]	; (8000294 <MX_CAN_Init+0x64>)
 8000256:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 800025a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800025c:	4b0d      	ldr	r3, [pc, #52]	; (8000294 <MX_CAN_Init+0x64>)
 800025e:	2200      	movs	r2, #0
 8000260:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000262:	4b0c      	ldr	r3, [pc, #48]	; (8000294 <MX_CAN_Init+0x64>)
 8000264:	2200      	movs	r2, #0
 8000266:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000268:	4b0a      	ldr	r3, [pc, #40]	; (8000294 <MX_CAN_Init+0x64>)
 800026a:	2200      	movs	r2, #0
 800026c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800026e:	4b09      	ldr	r3, [pc, #36]	; (8000294 <MX_CAN_Init+0x64>)
 8000270:	2200      	movs	r2, #0
 8000272:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000274:	4b07      	ldr	r3, [pc, #28]	; (8000294 <MX_CAN_Init+0x64>)
 8000276:	2200      	movs	r2, #0
 8000278:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800027a:	4b06      	ldr	r3, [pc, #24]	; (8000294 <MX_CAN_Init+0x64>)
 800027c:	2200      	movs	r2, #0
 800027e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000280:	4804      	ldr	r0, [pc, #16]	; (8000294 <MX_CAN_Init+0x64>)
 8000282:	f000 fe19 	bl	8000eb8 <HAL_CAN_Init>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800028c:	f000 fbcc 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000290:	bf00      	nop
 8000292:	bd80      	pop	{r7, pc}
 8000294:	2000007c 	.word	0x2000007c
 8000298:	40006400 	.word	0x40006400

0800029c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b08a      	sub	sp, #40	; 0x28
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a4:	f107 0314 	add.w	r3, r7, #20
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	605a      	str	r2, [r3, #4]
 80002ae:	609a      	str	r2, [r3, #8]
 80002b0:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4a25      	ldr	r2, [pc, #148]	; (800034c <HAL_CAN_MspInit+0xb0>)
 80002b8:	4293      	cmp	r3, r2
 80002ba:	d143      	bne.n	8000344 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80002bc:	4b24      	ldr	r3, [pc, #144]	; (8000350 <HAL_CAN_MspInit+0xb4>)
 80002be:	69db      	ldr	r3, [r3, #28]
 80002c0:	4a23      	ldr	r2, [pc, #140]	; (8000350 <HAL_CAN_MspInit+0xb4>)
 80002c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002c6:	61d3      	str	r3, [r2, #28]
 80002c8:	4b21      	ldr	r3, [pc, #132]	; (8000350 <HAL_CAN_MspInit+0xb4>)
 80002ca:	69db      	ldr	r3, [r3, #28]
 80002cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002d0:	613b      	str	r3, [r7, #16]
 80002d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002d4:	4b1e      	ldr	r3, [pc, #120]	; (8000350 <HAL_CAN_MspInit+0xb4>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	4a1d      	ldr	r2, [pc, #116]	; (8000350 <HAL_CAN_MspInit+0xb4>)
 80002da:	f043 0308 	orr.w	r3, r3, #8
 80002de:	6193      	str	r3, [r2, #24]
 80002e0:	4b1b      	ldr	r3, [pc, #108]	; (8000350 <HAL_CAN_MspInit+0xb4>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	f003 0308 	and.w	r3, r3, #8
 80002e8:	60fb      	str	r3, [r7, #12]
 80002ea:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80002ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002f2:	2300      	movs	r3, #0
 80002f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f6:	2300      	movs	r3, #0
 80002f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002fa:	f107 0314 	add.w	r3, r7, #20
 80002fe:	4619      	mov	r1, r3
 8000300:	4814      	ldr	r0, [pc, #80]	; (8000354 <HAL_CAN_MspInit+0xb8>)
 8000302:	f001 f925 	bl	8001550 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000306:	f44f 7300 	mov.w	r3, #512	; 0x200
 800030a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800030c:	2302      	movs	r3, #2
 800030e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000310:	2303      	movs	r3, #3
 8000312:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000314:	f107 0314 	add.w	r3, r7, #20
 8000318:	4619      	mov	r1, r3
 800031a:	480e      	ldr	r0, [pc, #56]	; (8000354 <HAL_CAN_MspInit+0xb8>)
 800031c:	f001 f918 	bl	8001550 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000320:	4b0d      	ldr	r3, [pc, #52]	; (8000358 <HAL_CAN_MspInit+0xbc>)
 8000322:	685b      	ldr	r3, [r3, #4]
 8000324:	627b      	str	r3, [r7, #36]	; 0x24
 8000326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000328:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800032c:	627b      	str	r3, [r7, #36]	; 0x24
 800032e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000330:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000334:	627b      	str	r3, [r7, #36]	; 0x24
 8000336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000338:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800033c:	627b      	str	r3, [r7, #36]	; 0x24
 800033e:	4a06      	ldr	r2, [pc, #24]	; (8000358 <HAL_CAN_MspInit+0xbc>)
 8000340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000342:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000344:	bf00      	nop
 8000346:	3728      	adds	r7, #40	; 0x28
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	40006400 	.word	0x40006400
 8000350:	40021000 	.word	0x40021000
 8000354:	40010c00 	.word	0x40010c00
 8000358:	40010000 	.word	0x40010000

0800035c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of canMessageQueue */
  canMessageQueueHandle = osMessageQueueNew (10, sizeof(uint16_t), &canMessageQueue_attributes);
 8000360:	4a28      	ldr	r2, [pc, #160]	; (8000404 <MX_FREERTOS_Init+0xa8>)
 8000362:	2102      	movs	r1, #2
 8000364:	200a      	movs	r0, #10
 8000366:	f002 fc87 	bl	8002c78 <osMessageQueueNew>
 800036a:	4603      	mov	r3, r0
 800036c:	4a26      	ldr	r2, [pc, #152]	; (8000408 <MX_FREERTOS_Init+0xac>)
 800036e:	6013      	str	r3, [r2, #0]

  /* creation of imuMessageQueue */
  imuMessageQueueHandle = osMessageQueueNew (10, sizeof(uint16_t), &imuMessageQueue_attributes);
 8000370:	4a26      	ldr	r2, [pc, #152]	; (800040c <MX_FREERTOS_Init+0xb0>)
 8000372:	2102      	movs	r1, #2
 8000374:	200a      	movs	r0, #10
 8000376:	f002 fc7f 	bl	8002c78 <osMessageQueueNew>
 800037a:	4603      	mov	r3, r0
 800037c:	4a24      	ldr	r2, [pc, #144]	; (8000410 <MX_FREERTOS_Init+0xb4>)
 800037e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of StartDefaultTask */
  StartDefaultTaskHandle = osThreadNew(startDefaultTask, NULL, &StartDefaultTask_attributes);
 8000380:	4a24      	ldr	r2, [pc, #144]	; (8000414 <MX_FREERTOS_Init+0xb8>)
 8000382:	2100      	movs	r1, #0
 8000384:	4824      	ldr	r0, [pc, #144]	; (8000418 <MX_FREERTOS_Init+0xbc>)
 8000386:	f002 fad9 	bl	800293c <osThreadNew>
 800038a:	4603      	mov	r3, r0
 800038c:	4a23      	ldr	r2, [pc, #140]	; (800041c <MX_FREERTOS_Init+0xc0>)
 800038e:	6013      	str	r3, [r2, #0]

  /* creation of readCANTask */
  readCANTaskHandle = osThreadNew(read_CAN_task, NULL, &readCANTask_attributes);
 8000390:	4a23      	ldr	r2, [pc, #140]	; (8000420 <MX_FREERTOS_Init+0xc4>)
 8000392:	2100      	movs	r1, #0
 8000394:	4823      	ldr	r0, [pc, #140]	; (8000424 <MX_FREERTOS_Init+0xc8>)
 8000396:	f002 fad1 	bl	800293c <osThreadNew>
 800039a:	4603      	mov	r3, r0
 800039c:	4a22      	ldr	r2, [pc, #136]	; (8000428 <MX_FREERTOS_Init+0xcc>)
 800039e:	6013      	str	r3, [r2, #0]

  /* creation of transmitCANTask */
  transmitCANTaskHandle = osThreadNew(transmit_CAN_task, NULL, &transmitCANTask_attributes);
 80003a0:	4a22      	ldr	r2, [pc, #136]	; (800042c <MX_FREERTOS_Init+0xd0>)
 80003a2:	2100      	movs	r1, #0
 80003a4:	4822      	ldr	r0, [pc, #136]	; (8000430 <MX_FREERTOS_Init+0xd4>)
 80003a6:	f002 fac9 	bl	800293c <osThreadNew>
 80003aa:	4603      	mov	r3, r0
 80003ac:	4a21      	ldr	r2, [pc, #132]	; (8000434 <MX_FREERTOS_Init+0xd8>)
 80003ae:	6013      	str	r3, [r2, #0]

  /* creation of readIMUTask */
  readIMUTaskHandle = osThreadNew(read_IMU_task, NULL, &readIMUTask_attributes);
 80003b0:	4a21      	ldr	r2, [pc, #132]	; (8000438 <MX_FREERTOS_Init+0xdc>)
 80003b2:	2100      	movs	r1, #0
 80003b4:	4821      	ldr	r0, [pc, #132]	; (800043c <MX_FREERTOS_Init+0xe0>)
 80003b6:	f002 fac1 	bl	800293c <osThreadNew>
 80003ba:	4603      	mov	r3, r0
 80003bc:	4a20      	ldr	r2, [pc, #128]	; (8000440 <MX_FREERTOS_Init+0xe4>)
 80003be:	6013      	str	r3, [r2, #0]

  /* creation of transmitIMUTask */
  transmitIMUTaskHandle = osThreadNew(transmit_IMU_task, NULL, &transmitIMUTask_attributes);
 80003c0:	4a20      	ldr	r2, [pc, #128]	; (8000444 <MX_FREERTOS_Init+0xe8>)
 80003c2:	2100      	movs	r1, #0
 80003c4:	4820      	ldr	r0, [pc, #128]	; (8000448 <MX_FREERTOS_Init+0xec>)
 80003c6:	f002 fab9 	bl	800293c <osThreadNew>
 80003ca:	4603      	mov	r3, r0
 80003cc:	4a1f      	ldr	r2, [pc, #124]	; (800044c <MX_FREERTOS_Init+0xf0>)
 80003ce:	6013      	str	r3, [r2, #0]

  /* creation of readGPSTask */
  readGPSTaskHandle = osThreadNew(read_GPS_task, NULL, &readGPSTask_attributes);
 80003d0:	4a1f      	ldr	r2, [pc, #124]	; (8000450 <MX_FREERTOS_Init+0xf4>)
 80003d2:	2100      	movs	r1, #0
 80003d4:	481f      	ldr	r0, [pc, #124]	; (8000454 <MX_FREERTOS_Init+0xf8>)
 80003d6:	f002 fab1 	bl	800293c <osThreadNew>
 80003da:	4603      	mov	r3, r0
 80003dc:	4a1e      	ldr	r2, [pc, #120]	; (8000458 <MX_FREERTOS_Init+0xfc>)
 80003de:	6013      	str	r3, [r2, #0]

  /* creation of transmitGPSTask */
  transmitGPSTaskHandle = osThreadNew(transmit_GPS_task, NULL, &transmitGPSTask_attributes);
 80003e0:	4a1e      	ldr	r2, [pc, #120]	; (800045c <MX_FREERTOS_Init+0x100>)
 80003e2:	2100      	movs	r1, #0
 80003e4:	481e      	ldr	r0, [pc, #120]	; (8000460 <MX_FREERTOS_Init+0x104>)
 80003e6:	f002 faa9 	bl	800293c <osThreadNew>
 80003ea:	4603      	mov	r3, r0
 80003ec:	4a1d      	ldr	r2, [pc, #116]	; (8000464 <MX_FREERTOS_Init+0x108>)
 80003ee:	6013      	str	r3, [r2, #0]

  /* creation of kernelLEDTask */
  kernelLEDTaskHandle = osThreadNew(kernel_LED_task, NULL, &kernelLEDTask_attributes);
 80003f0:	4a1d      	ldr	r2, [pc, #116]	; (8000468 <MX_FREERTOS_Init+0x10c>)
 80003f2:	2100      	movs	r1, #0
 80003f4:	481d      	ldr	r0, [pc, #116]	; (800046c <MX_FREERTOS_Init+0x110>)
 80003f6:	f002 faa1 	bl	800293c <osThreadNew>
 80003fa:	4603      	mov	r3, r0
 80003fc:	4a1c      	ldr	r2, [pc, #112]	; (8000470 <MX_FREERTOS_Init+0x114>)
 80003fe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000400:	bf00      	nop
 8000402:	bd80      	pop	{r7, pc}
 8000404:	08005ce4 	.word	0x08005ce4
 8000408:	200000c4 	.word	0x200000c4
 800040c:	08005cfc 	.word	0x08005cfc
 8000410:	200000c8 	.word	0x200000c8
 8000414:	08005bc4 	.word	0x08005bc4
 8000418:	08000475 	.word	0x08000475
 800041c:	200000a4 	.word	0x200000a4
 8000420:	08005be8 	.word	0x08005be8
 8000424:	08000485 	.word	0x08000485
 8000428:	200000a8 	.word	0x200000a8
 800042c:	08005c0c 	.word	0x08005c0c
 8000430:	0800052d 	.word	0x0800052d
 8000434:	200000ac 	.word	0x200000ac
 8000438:	08005c30 	.word	0x08005c30
 800043c:	08000625 	.word	0x08000625
 8000440:	200000b0 	.word	0x200000b0
 8000444:	08005c54 	.word	0x08005c54
 8000448:	08000635 	.word	0x08000635
 800044c:	200000b4 	.word	0x200000b4
 8000450:	08005c78 	.word	0x08005c78
 8000454:	08000645 	.word	0x08000645
 8000458:	200000b8 	.word	0x200000b8
 800045c:	08005c9c 	.word	0x08005c9c
 8000460:	08000655 	.word	0x08000655
 8000464:	200000bc 	.word	0x200000bc
 8000468:	08005cc0 	.word	0x08005cc0
 800046c:	08000665 	.word	0x08000665
 8000470:	200000c0 	.word	0x200000c0

08000474 <startDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startDefaultTask */
void startDefaultTask(void *argument)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800047c:	2001      	movs	r0, #1
 800047e:	f002 fbcd 	bl	8002c1c <osDelay>
 8000482:	e7fb      	b.n	800047c <startDefaultTask+0x8>

08000484 <read_CAN_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_CAN_task */
void read_CAN_task(void *argument)
{
 8000484:	b5b0      	push	{r4, r5, r7, lr}
 8000486:	b084      	sub	sp, #16
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  while (1) {

    /* Wait for thread flags to be set in the CAN Rx FIFO0 Interrupt Callback */
    osThreadFlagsWait(CAN_READY, osFlagsWaitAll, osWaitForever);
 800048c:	f04f 32ff 	mov.w	r2, #4294967295
 8000490:	2101      	movs	r1, #1
 8000492:	2001      	movs	r0, #1
 8000494:	f002 fb2e 	bl	8002af4 <osThreadFlagsWait>

    /* If CAN Rx FIFO0 is not empty */
    if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) != 0) {
 8000498:	2100      	movs	r1, #0
 800049a:	481e      	ldr	r0, [pc, #120]	; (8000514 <read_CAN_task+0x90>)
 800049c:	f000 ff28 	bl	80012f0 <HAL_CAN_GetRxFifoFillLevel>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d031      	beq.n	800050a <read_CAN_task+0x86>

      /* There are multiple CAN IDs being passed through the filter, pull out the current message */
      rx_status = HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &can_rx_header, current_can_data);
 80004a6:	4b1c      	ldr	r3, [pc, #112]	; (8000518 <read_CAN_task+0x94>)
 80004a8:	4a1c      	ldr	r2, [pc, #112]	; (800051c <read_CAN_task+0x98>)
 80004aa:	2100      	movs	r1, #0
 80004ac:	4819      	ldr	r0, [pc, #100]	; (8000514 <read_CAN_task+0x90>)
 80004ae:	f000 fdfe 	bl	80010ae <HAL_CAN_GetRxMessage>
 80004b2:	4603      	mov	r3, r0
 80004b4:	461a      	mov	r2, r3
 80004b6:	4b1a      	ldr	r3, [pc, #104]	; (8000520 <read_CAN_task+0x9c>)
 80004b8:	701a      	strb	r2, [r3, #0]

      /* Check the rx status */
      if (rx_status != HAL_OK) {
 80004ba:	4b19      	ldr	r3, [pc, #100]	; (8000520 <read_CAN_task+0x9c>)
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <read_CAN_task+0x42>
	  Error_Handler();
 80004c2:	f000 fab1 	bl	8000a28 <Error_Handler>
      }

      /* Package into CAN_msg_t */
      current_can_message.header = can_rx_header;
 80004c6:	4a17      	ldr	r2, [pc, #92]	; (8000524 <read_CAN_task+0xa0>)
 80004c8:	4b14      	ldr	r3, [pc, #80]	; (800051c <read_CAN_task+0x98>)
 80004ca:	4614      	mov	r4, r2
 80004cc:	461d      	mov	r5, r3
 80004ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}

      /* Copy all bytes of data */
      for (uint8_t i = 0; i < 8; i++) {
 80004da:	2300      	movs	r3, #0
 80004dc:	73fb      	strb	r3, [r7, #15]
 80004de:	e00a      	b.n	80004f6 <read_CAN_task+0x72>
	current_can_message.data[i] = current_can_data[i];
 80004e0:	7bfa      	ldrb	r2, [r7, #15]
 80004e2:	7bfb      	ldrb	r3, [r7, #15]
 80004e4:	490c      	ldr	r1, [pc, #48]	; (8000518 <read_CAN_task+0x94>)
 80004e6:	5c89      	ldrb	r1, [r1, r2]
 80004e8:	4a0e      	ldr	r2, [pc, #56]	; (8000524 <read_CAN_task+0xa0>)
 80004ea:	4413      	add	r3, r2
 80004ec:	460a      	mov	r2, r1
 80004ee:	771a      	strb	r2, [r3, #28]
      for (uint8_t i = 0; i < 8; i++) {
 80004f0:	7bfb      	ldrb	r3, [r7, #15]
 80004f2:	3301      	adds	r3, #1
 80004f4:	73fb      	strb	r3, [r7, #15]
 80004f6:	7bfb      	ldrb	r3, [r7, #15]
 80004f8:	2b07      	cmp	r3, #7
 80004fa:	d9f1      	bls.n	80004e0 <read_CAN_task+0x5c>
      }

      /* Add CAN message onto canMessageQueue */
      osMessageQueuePut(canMessageQueueHandle, &current_can_message, 0U, 0U);
 80004fc:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <read_CAN_task+0xa4>)
 80004fe:	6818      	ldr	r0, [r3, #0]
 8000500:	2300      	movs	r3, #0
 8000502:	2200      	movs	r2, #0
 8000504:	4907      	ldr	r1, [pc, #28]	; (8000524 <read_CAN_task+0xa0>)
 8000506:	f002 fc3d 	bl	8002d84 <osMessageQueuePut>
    }

    /* Enables Interrupts */
    HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800050a:	2102      	movs	r1, #2
 800050c:	4801      	ldr	r0, [pc, #4]	; (8000514 <read_CAN_task+0x90>)
 800050e:	f000 ff16 	bl	800133e <HAL_CAN_ActivateNotification>
    osThreadFlagsWait(CAN_READY, osFlagsWaitAll, osWaitForever);
 8000512:	e7bb      	b.n	800048c <read_CAN_task+0x8>
 8000514:	2000007c 	.word	0x2000007c
 8000518:	200001dc 	.word	0x200001dc
 800051c:	200001c0 	.word	0x200001c0
 8000520:	200000cc 	.word	0x200000cc
 8000524:	200000d0 	.word	0x200000d0
 8000528:	200000c4 	.word	0x200000c4

0800052c <transmit_CAN_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_transmit_CAN_task */
void transmit_CAN_task(void *argument)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b08c      	sub	sp, #48	; 0x30
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  osStatus_t queue_status;	/* CAN Message Queue Status */

  /* Infinite loop */
  while (1) {
    /* Retrieve CAN message from queue */
    queue_status = osMessageQueueGet(canMessageQueueHandle, &can_message, NULL, osWaitForever);
 8000534:	4b37      	ldr	r3, [pc, #220]	; (8000614 <transmit_CAN_task+0xe8>)
 8000536:	6818      	ldr	r0, [r3, #0]
 8000538:	f04f 33ff 	mov.w	r3, #4294967295
 800053c:	2200      	movs	r2, #0
 800053e:	4936      	ldr	r1, [pc, #216]	; (8000618 <transmit_CAN_task+0xec>)
 8000540:	f002 fc94 	bl	8002e6c <osMessageQueueGet>
 8000544:	62b8      	str	r0, [r7, #40]	; 0x28

    /* Yield if nothing on queue */
    if (queue_status != osOK){
 8000546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <transmit_CAN_task+0x24>
      osThreadYield();
 800054c:	f002 faa0 	bl	8002a90 <osThreadYield>
    }

    /* Initialize a CAN buffer */
    uint8_t can_buffer[CAN_BUFFER_LEN] = {0};
 8000550:	2300      	movs	r3, #0
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	f107 0310 	add.w	r3, r7, #16
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	821a      	strh	r2, [r3, #16]

    /* TIMESTAMP: 8 ASCII characters */
    for (uint8_t i=0; i<CAN_BUFFER_LEN - 14; i++) {
 8000564:	2300      	movs	r3, #0
 8000566:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800056a:	e00b      	b.n	8000584 <transmit_CAN_task+0x58>
      /* send 'D' as placeholder */
      can_buffer[i] = 'D';
 800056c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000570:	3330      	adds	r3, #48	; 0x30
 8000572:	443b      	add	r3, r7
 8000574:	2244      	movs	r2, #68	; 0x44
 8000576:	f803 2c24 	strb.w	r2, [r3, #-36]
    for (uint8_t i=0; i<CAN_BUFFER_LEN - 14; i++) {
 800057a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800057e:	3301      	adds	r3, #1
 8000580:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000584:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000588:	2b07      	cmp	r3, #7
 800058a:	d9ef      	bls.n	800056c <transmit_CAN_task+0x40>
    }

    /* CAN MESSAGE IDENTIFIER */
    can_buffer[CAN_BUFFER_LEN - 14] = '#';
 800058c:	2323      	movs	r3, #35	; 0x23
 800058e:	753b      	strb	r3, [r7, #20]

    /* CAN ID: 4 ASCII characters */
    uint8_t id_h = 0xFFUL & (can_message.header.StdId >> 8);
 8000590:	4b21      	ldr	r3, [pc, #132]	; (8000618 <transmit_CAN_task+0xec>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	0a1b      	lsrs	r3, r3, #8
 8000596:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t id_l = 0xFFUL & (can_message.header.StdId);
 800059a:	4b1f      	ldr	r3, [pc, #124]	; (8000618 <transmit_CAN_task+0xec>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    can_buffer[CAN_BUFFER_LEN - 13] = id_h;
 80005a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80005a6:	757b      	strb	r3, [r7, #21]
    can_buffer[CAN_BUFFER_LEN - 12] = id_l;
 80005a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80005ac:	75bb      	strb	r3, [r7, #22]


    /* CAN DATA: 16 ASCII characters */
    for (uint8_t i=0; i<8; i++) {
 80005ae:	2300      	movs	r3, #0
 80005b0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80005b4:	e010      	b.n	80005d8 <transmit_CAN_task+0xac>
      /* Copy each byte */
      can_buffer[i + CAN_BUFFER_LEN - 11]= can_message.data[i];
 80005b6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80005ba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80005be:	330b      	adds	r3, #11
 80005c0:	4915      	ldr	r1, [pc, #84]	; (8000618 <transmit_CAN_task+0xec>)
 80005c2:	440a      	add	r2, r1
 80005c4:	7f12      	ldrb	r2, [r2, #28]
 80005c6:	3330      	adds	r3, #48	; 0x30
 80005c8:	443b      	add	r3, r7
 80005ca:	f803 2c24 	strb.w	r2, [r3, #-36]
    for (uint8_t i=0; i<8; i++) {
 80005ce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80005d2:	3301      	adds	r3, #1
 80005d4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80005d8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80005dc:	2b07      	cmp	r3, #7
 80005de:	d9ea      	bls.n	80005b6 <transmit_CAN_task+0x8a>
    }


    /* CAN DATA LENGTH: 1 ASCII character */
    uint8_t length = "0123456789ABCDEF"[ can_message.header.DLC & 0xFUL];
 80005e0:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <transmit_CAN_task+0xec>)
 80005e2:	691b      	ldr	r3, [r3, #16]
 80005e4:	f003 030f 	and.w	r3, r3, #15
 80005e8:	4a0c      	ldr	r2, [pc, #48]	; (800061c <transmit_CAN_task+0xf0>)
 80005ea:	5cd3      	ldrb	r3, [r2, r3]
 80005ec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    can_buffer[CAN_BUFFER_LEN - 3] = length;
 80005f0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80005f4:	77fb      	strb	r3, [r7, #31]

    /* NEW LINE: 1 ASCII character */
    can_buffer[CAN_BUFFER_LEN - 2] = '\r';
 80005f6:	230d      	movs	r3, #13
 80005f8:	f887 3020 	strb.w	r3, [r7, #32]

    /* CARRIAGE RETURN: 1 ASCII character */
    can_buffer[CAN_BUFFER_LEN - 1] = '\n';
 80005fc:	230a      	movs	r3, #10
 80005fe:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

    /* Transmit over Radio */
    HAL_UART_Transmit(&huart1, can_buffer, sizeof(can_buffer), 1000);
 8000602:	f107 010c 	add.w	r1, r7, #12
 8000606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060a:	2216      	movs	r2, #22
 800060c:	4804      	ldr	r0, [pc, #16]	; (8000620 <transmit_CAN_task+0xf4>)
 800060e:	f001 ff8d 	bl	800252c <HAL_UART_Transmit>
  while (1) {
 8000612:	e78f      	b.n	8000534 <transmit_CAN_task+0x8>
 8000614:	200000c4 	.word	0x200000c4
 8000618:	200000f4 	.word	0x200000f4
 800061c:	08005b98 	.word	0x08005b98
 8000620:	20000284 	.word	0x20000284

08000624 <read_IMU_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_IMU_task */
void read_IMU_task(void *argument)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN read_IMU_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800062c:	2001      	movs	r0, #1
 800062e:	f002 faf5 	bl	8002c1c <osDelay>
 8000632:	e7fb      	b.n	800062c <read_IMU_task+0x8>

08000634 <transmit_IMU_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_transmit_IMU_task */
void transmit_IMU_task(void *argument)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN transmit_IMU_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800063c:	2001      	movs	r0, #1
 800063e:	f002 faed 	bl	8002c1c <osDelay>
 8000642:	e7fb      	b.n	800063c <transmit_IMU_task+0x8>

08000644 <read_GPS_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_GPS_task */
void read_GPS_task(void *argument)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN read_GPS_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800064c:	2001      	movs	r0, #1
 800064e:	f002 fae5 	bl	8002c1c <osDelay>
 8000652:	e7fb      	b.n	800064c <read_GPS_task+0x8>

08000654 <transmit_GPS_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_transmit_GPS_task */
void transmit_GPS_task(void *argument)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN transmit_GPS_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800065c:	2001      	movs	r0, #1
 800065e:	f002 fadd 	bl	8002c1c <osDelay>
 8000662:	e7fb      	b.n	800065c <transmit_GPS_task+0x8>

08000664 <kernel_LED_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_kernel_LED_task */
void kernel_LED_task(void *argument)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  while (1) {

    /* Get the kernel status */
    kernel_status = osKernelGetState();
 800066c:	f002 f910 	bl	8002890 <osKernelGetState>
 8000670:	60f8      	str	r0, [r7, #12]

    /* Check if the kernel status is "Running" */
    if (kernel_status == osKernelRunning) {
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	2b02      	cmp	r3, #2
 8000676:	d103      	bne.n	8000680 <kernel_LED_task+0x1c>

      /* If running, toggle the LED */
      HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
 8000678:	2102      	movs	r1, #2
 800067a:	4803      	ldr	r0, [pc, #12]	; (8000688 <kernel_LED_task+0x24>)
 800067c:	f001 f914 	bl	80018a8 <HAL_GPIO_TogglePin>
    }

    /* Delay */
    osDelay(KERNEL_LED_DELAY);
 8000680:	20c8      	movs	r0, #200	; 0xc8
 8000682:	f002 facb 	bl	8002c1c <osDelay>
    kernel_status = osKernelGetState();
 8000686:	e7f1      	b.n	800066c <kernel_LED_task+0x8>
 8000688:	40010800 	.word	0x40010800

0800068c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b088      	sub	sp, #32
 8000690:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000692:	f107 0310 	add.w	r3, r7, #16
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006a0:	4b49      	ldr	r3, [pc, #292]	; (80007c8 <MX_GPIO_Init+0x13c>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	4a48      	ldr	r2, [pc, #288]	; (80007c8 <MX_GPIO_Init+0x13c>)
 80006a6:	f043 0320 	orr.w	r3, r3, #32
 80006aa:	6193      	str	r3, [r2, #24]
 80006ac:	4b46      	ldr	r3, [pc, #280]	; (80007c8 <MX_GPIO_Init+0x13c>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	f003 0320 	and.w	r3, r3, #32
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b8:	4b43      	ldr	r3, [pc, #268]	; (80007c8 <MX_GPIO_Init+0x13c>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	4a42      	ldr	r2, [pc, #264]	; (80007c8 <MX_GPIO_Init+0x13c>)
 80006be:	f043 0310 	orr.w	r3, r3, #16
 80006c2:	6193      	str	r3, [r2, #24]
 80006c4:	4b40      	ldr	r3, [pc, #256]	; (80007c8 <MX_GPIO_Init+0x13c>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	f003 0310 	and.w	r3, r3, #16
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d0:	4b3d      	ldr	r3, [pc, #244]	; (80007c8 <MX_GPIO_Init+0x13c>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a3c      	ldr	r2, [pc, #240]	; (80007c8 <MX_GPIO_Init+0x13c>)
 80006d6:	f043 0304 	orr.w	r3, r3, #4
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b3a      	ldr	r3, [pc, #232]	; (80007c8 <MX_GPIO_Init+0x13c>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f003 0304 	and.w	r3, r3, #4
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e8:	4b37      	ldr	r3, [pc, #220]	; (80007c8 <MX_GPIO_Init+0x13c>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	4a36      	ldr	r2, [pc, #216]	; (80007c8 <MX_GPIO_Init+0x13c>)
 80006ee:	f043 0308 	orr.w	r3, r3, #8
 80006f2:	6193      	str	r3, [r2, #24]
 80006f4:	4b34      	ldr	r3, [pc, #208]	; (80007c8 <MX_GPIO_Init+0x13c>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	f003 0308 	and.w	r3, r3, #8
 80006fc:	603b      	str	r3, [r7, #0]
 80006fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RADIO_GPIO_DIO7_Pin|RADIO_GPIO_DIO9_SLEEP_Pin|RADIO_GPIO_DIO11_Pin|RADIO_GPIO_DIO10_Pin, GPIO_PIN_RESET);
 8000700:	2200      	movs	r2, #0
 8000702:	2178      	movs	r1, #120	; 0x78
 8000704:	4831      	ldr	r0, [pc, #196]	; (80007cc <MX_GPIO_Init+0x140>)
 8000706:	f001 f8b7 	bl	8001878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USER_LED_Pin|SDL_CS_Pin, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	2112      	movs	r1, #18
 800070e:	4830      	ldr	r0, [pc, #192]	; (80007d0 <MX_GPIO_Init+0x144>)
 8000710:	f001 f8b2 	bl	8001878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RADIO_GPIO_DIO4_Pin|RADIO_GPIO_DIO3_Pin|RADIO_GPIO_DIO2_Pin, GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	f24a 0101 	movw	r1, #40961	; 0xa001
 800071a:	482e      	ldr	r0, [pc, #184]	; (80007d4 <MX_GPIO_Init+0x148>)
 800071c:	f001 f8ac 	bl	8001878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RADIO_GPIO_DIO12_Pin|RADIO_GPIO_DIO6_Pin|RADIO_DIO8_SLEEP_CONTROL_Pin, GPIO_PIN_RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	f245 0102 	movw	r1, #20482	; 0x5002
 8000726:	482b      	ldr	r0, [pc, #172]	; (80007d4 <MX_GPIO_Init+0x148>)
 8000728:	f001 f8a6 	bl	8001878 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RADIO_GPIO_DIO1_Pin|RADIO_GPIO_DIO0_Pin, GPIO_PIN_SET);
 800072c:	2201      	movs	r2, #1
 800072e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000732:	4826      	ldr	r0, [pc, #152]	; (80007cc <MX_GPIO_Init+0x140>)
 8000734:	f001 f8a0 	bl	8001878 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = RADIO_GPIO_DIO7_Pin|RADIO_GPIO_DIO9_SLEEP_Pin|RADIO_GPIO_DIO11_Pin|RADIO_GPIO_DIO10_Pin
 8000738:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 800073c:	613b      	str	r3, [r7, #16]
                          |RADIO_GPIO_DIO1_Pin|RADIO_GPIO_DIO0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073e:	2301      	movs	r3, #1
 8000740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	2302      	movs	r3, #2
 8000748:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800074a:	f107 0310 	add.w	r3, r7, #16
 800074e:	4619      	mov	r1, r3
 8000750:	481e      	ldr	r0, [pc, #120]	; (80007cc <MX_GPIO_Init+0x140>)
 8000752:	f000 fefd 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USER_LED_Pin|SDL_CS_Pin;
 8000756:	2312      	movs	r3, #18
 8000758:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075a:	2301      	movs	r3, #1
 800075c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	2302      	movs	r3, #2
 8000764:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000766:	f107 0310 	add.w	r3, r7, #16
 800076a:	4619      	mov	r1, r3
 800076c:	4818      	ldr	r0, [pc, #96]	; (80007d0 <MX_GPIO_Init+0x144>)
 800076e:	f000 feef 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RTC_SYNC_Pin|SDL_CD_Pin;
 8000772:	230c      	movs	r3, #12
 8000774:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077e:	f107 0310 	add.w	r3, r7, #16
 8000782:	4619      	mov	r1, r3
 8000784:	4812      	ldr	r0, [pc, #72]	; (80007d0 <MX_GPIO_Init+0x144>)
 8000786:	f000 fee3 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = RADIO_GPIO_DIO4_Pin|RADIO_GPIO_DIO12_Pin|RADIO_GPIO_DIO6_Pin|RADIO_GPIO_DIO3_Pin
 800078a:	f24f 0303 	movw	r3, #61443	; 0xf003
 800078e:	613b      	str	r3, [r7, #16]
                          |RADIO_DIO8_SLEEP_CONTROL_Pin|RADIO_GPIO_DIO2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000790:	2301      	movs	r3, #1
 8000792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2302      	movs	r3, #2
 800079a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079c:	f107 0310 	add.w	r3, r7, #16
 80007a0:	4619      	mov	r1, r3
 80007a2:	480c      	ldr	r0, [pc, #48]	; (80007d4 <MX_GPIO_Init+0x148>)
 80007a4:	f000 fed4 	bl	8001550 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80007a8:	2304      	movs	r3, #4
 80007aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80007b4:	f107 0310 	add.w	r3, r7, #16
 80007b8:	4619      	mov	r1, r3
 80007ba:	4806      	ldr	r0, [pc, #24]	; (80007d4 <MX_GPIO_Init+0x148>)
 80007bc:	f000 fec8 	bl	8001550 <HAL_GPIO_Init>

}
 80007c0:	bf00      	nop
 80007c2:	3720      	adds	r7, #32
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40021000 	.word	0x40021000
 80007cc:	40011000 	.word	0x40011000
 80007d0:	40010800 	.word	0x40010800
 80007d4:	40010c00 	.word	0x40010c00

080007d8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_I2C1_Init+0x50>)
 80007de:	4a13      	ldr	r2, [pc, #76]	; (800082c <MX_I2C1_Init+0x54>)
 80007e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_I2C1_Init+0x50>)
 80007e4:	4a12      	ldr	r2, [pc, #72]	; (8000830 <MX_I2C1_Init+0x58>)
 80007e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_I2C1_Init+0x50>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_I2C1_Init+0x50>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_I2C1_Init+0x50>)
 80007f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007fc:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <MX_I2C1_Init+0x50>)
 80007fe:	2200      	movs	r2, #0
 8000800:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_I2C1_Init+0x50>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <MX_I2C1_Init+0x50>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_I2C1_Init+0x50>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000814:	4804      	ldr	r0, [pc, #16]	; (8000828 <MX_I2C1_Init+0x50>)
 8000816:	f001 f861 	bl	80018dc <HAL_I2C_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000820:	f000 f902 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000118 	.word	0x20000118
 800082c:	40005400 	.word	0x40005400
 8000830:	000186a0 	.word	0x000186a0

08000834 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <MX_I2C2_Init+0x50>)
 800083a:	4a13      	ldr	r2, [pc, #76]	; (8000888 <MX_I2C2_Init+0x54>)
 800083c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_I2C2_Init+0x50>)
 8000840:	4a12      	ldr	r2, [pc, #72]	; (800088c <MX_I2C2_Init+0x58>)
 8000842:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000844:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <MX_I2C2_Init+0x50>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_I2C2_Init+0x50>)
 800084c:	2200      	movs	r2, #0
 800084e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_I2C2_Init+0x50>)
 8000852:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000856:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000858:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <MX_I2C2_Init+0x50>)
 800085a:	2200      	movs	r2, #0
 800085c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_I2C2_Init+0x50>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000864:	4b07      	ldr	r3, [pc, #28]	; (8000884 <MX_I2C2_Init+0x50>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_I2C2_Init+0x50>)
 800086c:	2200      	movs	r2, #0
 800086e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000870:	4804      	ldr	r0, [pc, #16]	; (8000884 <MX_I2C2_Init+0x50>)
 8000872:	f001 f833 	bl	80018dc <HAL_I2C_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800087c:	f000 f8d4 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	2000016c 	.word	0x2000016c
 8000888:	40005800 	.word	0x40005800
 800088c:	000186a0 	.word	0x000186a0

08000890 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08a      	sub	sp, #40	; 0x28
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	f107 0318 	add.w	r3, r7, #24
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a2b      	ldr	r2, [pc, #172]	; (8000958 <HAL_I2C_MspInit+0xc8>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d124      	bne.n	80008fa <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b0:	4b2a      	ldr	r3, [pc, #168]	; (800095c <HAL_I2C_MspInit+0xcc>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	4a29      	ldr	r2, [pc, #164]	; (800095c <HAL_I2C_MspInit+0xcc>)
 80008b6:	f043 0308 	orr.w	r3, r3, #8
 80008ba:	6193      	str	r3, [r2, #24]
 80008bc:	4b27      	ldr	r3, [pc, #156]	; (800095c <HAL_I2C_MspInit+0xcc>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	f003 0308 	and.w	r3, r3, #8
 80008c4:	617b      	str	r3, [r7, #20]
 80008c6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPS_SCL_Pin|GPS_SDA_Pin;
 80008c8:	23c0      	movs	r3, #192	; 0xc0
 80008ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008cc:	2312      	movs	r3, #18
 80008ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008d0:	2303      	movs	r3, #3
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d4:	f107 0318 	add.w	r3, r7, #24
 80008d8:	4619      	mov	r1, r3
 80008da:	4821      	ldr	r0, [pc, #132]	; (8000960 <HAL_I2C_MspInit+0xd0>)
 80008dc:	f000 fe38 	bl	8001550 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008e0:	4b1e      	ldr	r3, [pc, #120]	; (800095c <HAL_I2C_MspInit+0xcc>)
 80008e2:	69db      	ldr	r3, [r3, #28]
 80008e4:	4a1d      	ldr	r2, [pc, #116]	; (800095c <HAL_I2C_MspInit+0xcc>)
 80008e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008ea:	61d3      	str	r3, [r2, #28]
 80008ec:	4b1b      	ldr	r3, [pc, #108]	; (800095c <HAL_I2C_MspInit+0xcc>)
 80008ee:	69db      	ldr	r3, [r3, #28]
 80008f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008f4:	613b      	str	r3, [r7, #16]
 80008f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80008f8:	e029      	b.n	800094e <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4a19      	ldr	r2, [pc, #100]	; (8000964 <HAL_I2C_MspInit+0xd4>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d124      	bne.n	800094e <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000904:	4b15      	ldr	r3, [pc, #84]	; (800095c <HAL_I2C_MspInit+0xcc>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	4a14      	ldr	r2, [pc, #80]	; (800095c <HAL_I2C_MspInit+0xcc>)
 800090a:	f043 0308 	orr.w	r3, r3, #8
 800090e:	6193      	str	r3, [r2, #24]
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <HAL_I2C_MspInit+0xcc>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	f003 0308 	and.w	r3, r3, #8
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 800091c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000920:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000922:	2312      	movs	r3, #18
 8000924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000926:	2303      	movs	r3, #3
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092a:	f107 0318 	add.w	r3, r7, #24
 800092e:	4619      	mov	r1, r3
 8000930:	480b      	ldr	r0, [pc, #44]	; (8000960 <HAL_I2C_MspInit+0xd0>)
 8000932:	f000 fe0d 	bl	8001550 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <HAL_I2C_MspInit+0xcc>)
 8000938:	69db      	ldr	r3, [r3, #28]
 800093a:	4a08      	ldr	r2, [pc, #32]	; (800095c <HAL_I2C_MspInit+0xcc>)
 800093c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000940:	61d3      	str	r3, [r2, #28]
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_I2C_MspInit+0xcc>)
 8000944:	69db      	ldr	r3, [r3, #28]
 8000946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	68bb      	ldr	r3, [r7, #8]
}
 800094e:	bf00      	nop
 8000950:	3728      	adds	r7, #40	; 0x28
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40005400 	.word	0x40005400
 800095c:	40021000 	.word	0x40021000
 8000960:	40010c00 	.word	0x40010c00
 8000964:	40005800 	.word	0x40005800

08000968 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800096c:	f000 fa42 	bl	8000df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000970:	f000 f815 	bl	800099e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000974:	f7ff fe8a 	bl	800068c <MX_GPIO_Init>
  MX_CAN_Init();
 8000978:	f7ff fc5a 	bl	8000230 <MX_CAN_Init>
  MX_SPI1_Init();
 800097c:	f000 f85a 	bl	8000a34 <MX_SPI1_Init>
  MX_UART5_Init();
 8000980:	f000 f928 	bl	8000bd4 <MX_UART5_Init>
  MX_I2C1_Init();
 8000984:	f7ff ff28 	bl	80007d8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000988:	f7ff ff54 	bl	8000834 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800098c:	f000 f94c 	bl	8000c28 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000990:	f001 ff4c 	bl	800282c <osKernelInitialize>
  MX_FREERTOS_Init();
 8000994:	f7ff fce2 	bl	800035c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000998:	f001 ff9c 	bl	80028d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800099c:	e7fe      	b.n	800099c <main+0x34>

0800099e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b090      	sub	sp, #64	; 0x40
 80009a2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a4:	f107 0318 	add.w	r3, r7, #24
 80009a8:	2228      	movs	r2, #40	; 0x28
 80009aa:	2100      	movs	r1, #0
 80009ac:	4618      	mov	r0, r3
 80009ae:	f004 ffb5 	bl	800591c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009c0:	2301      	movs	r3, #1
 80009c2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009c8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009ce:	2301      	movs	r3, #1
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d2:	2302      	movs	r3, #2
 80009d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009dc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e2:	f107 0318 	add.w	r3, r7, #24
 80009e6:	4618      	mov	r0, r3
 80009e8:	f001 f8bc 	bl	8001b64 <HAL_RCC_OscConfig>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80009f2:	f000 f819 	bl	8000a28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f6:	230f      	movs	r3, #15
 80009f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009fa:	2302      	movs	r3, #2
 80009fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	2102      	movs	r1, #2
 8000a10:	4618      	mov	r0, r3
 8000a12:	f001 fb29 	bl	8002068 <HAL_RCC_ClockConfig>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000a1c:	f000 f804 	bl	8000a28 <Error_Handler>
  }
}
 8000a20:	bf00      	nop
 8000a22:	3740      	adds	r7, #64	; 0x40
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2c:	b672      	cpsid	i
}
 8000a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <Error_Handler+0x8>
	...

08000a34 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000a38:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a3a:	4a18      	ldr	r2, [pc, #96]	; (8000a9c <MX_SPI1_Init+0x68>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a3e:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a46:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a64:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a68:	2208      	movs	r2, #8
 8000a6a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a72:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a78:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a80:	220a      	movs	r2, #10
 8000a82:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a84:	4804      	ldr	r0, [pc, #16]	; (8000a98 <MX_SPI1_Init+0x64>)
 8000a86:	f001 fc7d 	bl	8002384 <HAL_SPI_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a90:	f7ff ffca 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	200001e4 	.word	0x200001e4
 8000a9c:	40013000 	.word	0x40013000

08000aa0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b088      	sub	sp, #32
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 0310 	add.w	r3, r7, #16
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a1b      	ldr	r2, [pc, #108]	; (8000b28 <HAL_SPI_MspInit+0x88>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d12f      	bne.n	8000b20 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ac0:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <HAL_SPI_MspInit+0x8c>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	4a19      	ldr	r2, [pc, #100]	; (8000b2c <HAL_SPI_MspInit+0x8c>)
 8000ac6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000aca:	6193      	str	r3, [r2, #24]
 8000acc:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <HAL_SPI_MspInit+0x8c>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad8:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <HAL_SPI_MspInit+0x8c>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	4a13      	ldr	r2, [pc, #76]	; (8000b2c <HAL_SPI_MspInit+0x8c>)
 8000ade:	f043 0304 	orr.w	r3, r3, #4
 8000ae2:	6193      	str	r3, [r2, #24]
 8000ae4:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <HAL_SPI_MspInit+0x8c>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	f003 0304 	and.w	r3, r3, #4
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SDL_CLK_Pin|SDL_MOSI_Pin;
 8000af0:	23a0      	movs	r3, #160	; 0xa0
 8000af2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af4:	2302      	movs	r3, #2
 8000af6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000af8:	2303      	movs	r3, #3
 8000afa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afc:	f107 0310 	add.w	r3, r7, #16
 8000b00:	4619      	mov	r1, r3
 8000b02:	480b      	ldr	r0, [pc, #44]	; (8000b30 <HAL_SPI_MspInit+0x90>)
 8000b04:	f000 fd24 	bl	8001550 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDL_MISO_Pin;
 8000b08:	2340      	movs	r3, #64	; 0x40
 8000b0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SDL_MISO_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 0310 	add.w	r3, r7, #16
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4805      	ldr	r0, [pc, #20]	; (8000b30 <HAL_SPI_MspInit+0x90>)
 8000b1c:	f000 fd18 	bl	8001550 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b20:	bf00      	nop
 8000b22:	3720      	adds	r7, #32
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40013000 	.word	0x40013000
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	40010800 	.word	0x40010800

08000b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b3a:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b3c:	699b      	ldr	r3, [r3, #24]
 8000b3e:	4a10      	ldr	r2, [pc, #64]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6193      	str	r3, [r2, #24]
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b48:	699b      	ldr	r3, [r3, #24]
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b52:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b54:	69db      	ldr	r3, [r3, #28]
 8000b56:	4a0a      	ldr	r2, [pc, #40]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b5c:	61d3      	str	r3, [r2, #28]
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b60:	69db      	ldr	r3, [r3, #28]
 8000b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	210f      	movs	r1, #15
 8000b6e:	f06f 0001 	mvn.w	r0, #1
 8000b72:	f000 fcc4 	bl	80014fe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40021000 	.word	0x40021000

08000b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <NMI_Handler+0x4>

08000b8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <HardFault_Handler+0x4>

08000b90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <MemManage_Handler+0x4>

08000b96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <BusFault_Handler+0x4>

08000b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <UsageFault_Handler+0x4>

08000ba2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc80      	pop	{r7}
 8000bac:	4770      	bx	lr

08000bae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb2:	f000 f965 	bl	8000e80 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000bb6:	f003 fe95 	bl	80048e4 <xTaskGetSchedulerState>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d001      	beq.n	8000bc4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000bc0:	f004 fc52 	bl	8005468 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr

08000bd4 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart1;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000bd8:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <MX_UART5_Init+0x4c>)
 8000bda:	4a12      	ldr	r2, [pc, #72]	; (8000c24 <MX_UART5_Init+0x50>)
 8000bdc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000bde:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <MX_UART5_Init+0x4c>)
 8000be0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000be4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000be6:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <MX_UART5_Init+0x4c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <MX_UART5_Init+0x4c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <MX_UART5_Init+0x4c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000bf8:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <MX_UART5_Init+0x4c>)
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfe:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <MX_UART5_Init+0x4c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <MX_UART5_Init+0x4c>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000c0a:	4805      	ldr	r0, [pc, #20]	; (8000c20 <MX_UART5_Init+0x4c>)
 8000c0c:	f001 fc3e 	bl	800248c <HAL_UART_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000c16:	f7ff ff07 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	2000023c 	.word	0x2000023c
 8000c24:	40005000 	.word	0x40005000

08000c28 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <MX_USART1_UART_Init+0x4c>)
 8000c2e:	4a12      	ldr	r2, [pc, #72]	; (8000c78 <MX_USART1_UART_Init+0x50>)
 8000c30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c32:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <MX_USART1_UART_Init+0x4c>)
 8000c34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <MX_USART1_UART_Init+0x4c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <MX_USART1_UART_Init+0x4c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c46:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <MX_USART1_UART_Init+0x4c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c4c:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <MX_USART1_UART_Init+0x4c>)
 8000c4e:	220c      	movs	r2, #12
 8000c50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c52:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <MX_USART1_UART_Init+0x4c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <MX_USART1_UART_Init+0x4c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c5e:	4805      	ldr	r0, [pc, #20]	; (8000c74 <MX_USART1_UART_Init+0x4c>)
 8000c60:	f001 fc14 	bl	800248c <HAL_UART_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c6a:	f7ff fedd 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000284 	.word	0x20000284
 8000c78:	40013800 	.word	0x40013800

08000c7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08c      	sub	sp, #48	; 0x30
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 0320 	add.w	r3, r7, #32
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==UART5)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a3e      	ldr	r2, [pc, #248]	; (8000d90 <HAL_UART_MspInit+0x114>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d13d      	bne.n	8000d18 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000c9c:	4b3d      	ldr	r3, [pc, #244]	; (8000d94 <HAL_UART_MspInit+0x118>)
 8000c9e:	69db      	ldr	r3, [r3, #28]
 8000ca0:	4a3c      	ldr	r2, [pc, #240]	; (8000d94 <HAL_UART_MspInit+0x118>)
 8000ca2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ca6:	61d3      	str	r3, [r2, #28]
 8000ca8:	4b3a      	ldr	r3, [pc, #232]	; (8000d94 <HAL_UART_MspInit+0x118>)
 8000caa:	69db      	ldr	r3, [r3, #28]
 8000cac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cb0:	61fb      	str	r3, [r7, #28]
 8000cb2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb4:	4b37      	ldr	r3, [pc, #220]	; (8000d94 <HAL_UART_MspInit+0x118>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a36      	ldr	r2, [pc, #216]	; (8000d94 <HAL_UART_MspInit+0x118>)
 8000cba:	f043 0310 	orr.w	r3, r3, #16
 8000cbe:	6193      	str	r3, [r2, #24]
 8000cc0:	4b34      	ldr	r3, [pc, #208]	; (8000d94 <HAL_UART_MspInit+0x118>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	f003 0310 	and.w	r3, r3, #16
 8000cc8:	61bb      	str	r3, [r7, #24]
 8000cca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ccc:	4b31      	ldr	r3, [pc, #196]	; (8000d94 <HAL_UART_MspInit+0x118>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	4a30      	ldr	r2, [pc, #192]	; (8000d94 <HAL_UART_MspInit+0x118>)
 8000cd2:	f043 0320 	orr.w	r3, r3, #32
 8000cd6:	6193      	str	r3, [r2, #24]
 8000cd8:	4b2e      	ldr	r3, [pc, #184]	; (8000d94 <HAL_UART_MspInit+0x118>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	f003 0320 	and.w	r3, r3, #32
 8000ce0:	617b      	str	r3, [r7, #20]
 8000ce2:	697b      	ldr	r3, [r7, #20]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ce4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cea:	2302      	movs	r3, #2
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf2:	f107 0320 	add.w	r3, r7, #32
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4827      	ldr	r0, [pc, #156]	; (8000d98 <HAL_UART_MspInit+0x11c>)
 8000cfa:	f000 fc29 	bl	8001550 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cfe:	2304      	movs	r3, #4
 8000d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d02:	2300      	movs	r3, #0
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d0a:	f107 0320 	add.w	r3, r7, #32
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4822      	ldr	r0, [pc, #136]	; (8000d9c <HAL_UART_MspInit+0x120>)
 8000d12:	f000 fc1d 	bl	8001550 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d16:	e036      	b.n	8000d86 <HAL_UART_MspInit+0x10a>
  else if(uartHandle->Instance==USART1)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a20      	ldr	r2, [pc, #128]	; (8000da0 <HAL_UART_MspInit+0x124>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d131      	bne.n	8000d86 <HAL_UART_MspInit+0x10a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d22:	4b1c      	ldr	r3, [pc, #112]	; (8000d94 <HAL_UART_MspInit+0x118>)
 8000d24:	699b      	ldr	r3, [r3, #24]
 8000d26:	4a1b      	ldr	r2, [pc, #108]	; (8000d94 <HAL_UART_MspInit+0x118>)
 8000d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d2c:	6193      	str	r3, [r2, #24]
 8000d2e:	4b19      	ldr	r3, [pc, #100]	; (8000d94 <HAL_UART_MspInit+0x118>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <HAL_UART_MspInit+0x118>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	4a15      	ldr	r2, [pc, #84]	; (8000d94 <HAL_UART_MspInit+0x118>)
 8000d40:	f043 0304 	orr.w	r3, r3, #4
 8000d44:	6193      	str	r3, [r2, #24]
 8000d46:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <HAL_UART_MspInit+0x118>)
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	f003 0304 	and.w	r3, r3, #4
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RADIO_TX_Pin;
 8000d52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RADIO_TX_GPIO_Port, &GPIO_InitStruct);
 8000d60:	f107 0320 	add.w	r3, r7, #32
 8000d64:	4619      	mov	r1, r3
 8000d66:	480f      	ldr	r0, [pc, #60]	; (8000da4 <HAL_UART_MspInit+0x128>)
 8000d68:	f000 fbf2 	bl	8001550 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RADIO_RX_Pin;
 8000d6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d72:	2300      	movs	r3, #0
 8000d74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(RADIO_RX_GPIO_Port, &GPIO_InitStruct);
 8000d7a:	f107 0320 	add.w	r3, r7, #32
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4808      	ldr	r0, [pc, #32]	; (8000da4 <HAL_UART_MspInit+0x128>)
 8000d82:	f000 fbe5 	bl	8001550 <HAL_GPIO_Init>
}
 8000d86:	bf00      	nop
 8000d88:	3730      	adds	r7, #48	; 0x30
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40005000 	.word	0x40005000
 8000d94:	40021000 	.word	0x40021000
 8000d98:	40011000 	.word	0x40011000
 8000d9c:	40011400 	.word	0x40011400
 8000da0:	40013800 	.word	0x40013800
 8000da4:	40010800 	.word	0x40010800

08000da8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000da8:	f7ff ff0e 	bl	8000bc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dac:	480b      	ldr	r0, [pc, #44]	; (8000ddc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000dae:	490c      	ldr	r1, [pc, #48]	; (8000de0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000db0:	4a0c      	ldr	r2, [pc, #48]	; (8000de4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db4:	e002      	b.n	8000dbc <LoopCopyDataInit>

08000db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dba:	3304      	adds	r3, #4

08000dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc0:	d3f9      	bcc.n	8000db6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc2:	4a09      	ldr	r2, [pc, #36]	; (8000de8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000dc4:	4c09      	ldr	r4, [pc, #36]	; (8000dec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc8:	e001      	b.n	8000dce <LoopFillZerobss>

08000dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dcc:	3204      	adds	r2, #4

08000dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd0:	d3fb      	bcc.n	8000dca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dd2:	f004 fe01 	bl	80059d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dd6:	f7ff fdc7 	bl	8000968 <main>
  bx lr
 8000dda:	4770      	bx	lr
  ldr r0, =_sdata
 8000ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000de4:	08005d48 	.word	0x08005d48
  ldr r2, =_sbss
 8000de8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000dec:	20003210 	.word	0x20003210

08000df0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000df0:	e7fe      	b.n	8000df0 <ADC1_2_IRQHandler>
	...

08000df4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <HAL_Init+0x28>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a07      	ldr	r2, [pc, #28]	; (8000e1c <HAL_Init+0x28>)
 8000dfe:	f043 0310 	orr.w	r3, r3, #16
 8000e02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e04:	2003      	movs	r0, #3
 8000e06:	f000 fb6f 	bl	80014e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0a:	200f      	movs	r0, #15
 8000e0c:	f000 f808 	bl	8000e20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e10:	f7ff fe90 	bl	8000b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40022000 	.word	0x40022000

08000e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e28:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <HAL_InitTick+0x54>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <HAL_InitTick+0x58>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	4619      	mov	r1, r3
 8000e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 fb79 	bl	8001536 <HAL_SYSTICK_Config>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00e      	b.n	8000e6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b0f      	cmp	r3, #15
 8000e52:	d80a      	bhi.n	8000e6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e54:	2200      	movs	r2, #0
 8000e56:	6879      	ldr	r1, [r7, #4]
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5c:	f000 fb4f 	bl	80014fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e60:	4a06      	ldr	r2, [pc, #24]	; (8000e7c <HAL_InitTick+0x5c>)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e66:	2300      	movs	r3, #0
 8000e68:	e000      	b.n	8000e6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000000 	.word	0x20000000
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	20000004 	.word	0x20000004

08000e80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e84:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <HAL_IncTick+0x1c>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <HAL_IncTick+0x20>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4413      	add	r3, r2
 8000e90:	4a03      	ldr	r2, [pc, #12]	; (8000ea0 <HAL_IncTick+0x20>)
 8000e92:	6013      	str	r3, [r2, #0]
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bc80      	pop	{r7}
 8000e9a:	4770      	bx	lr
 8000e9c:	20000008 	.word	0x20000008
 8000ea0:	200002cc 	.word	0x200002cc

08000ea4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea8:	4b02      	ldr	r3, [pc, #8]	; (8000eb4 <HAL_GetTick+0x10>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr
 8000eb4:	200002cc 	.word	0x200002cc

08000eb8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d101      	bne.n	8000eca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e0ed      	b.n	80010a6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d102      	bne.n	8000edc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f7ff f9e0 	bl	800029c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f042 0201 	orr.w	r2, r2, #1
 8000eea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000eec:	f7ff ffda 	bl	8000ea4 <HAL_GetTick>
 8000ef0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ef2:	e012      	b.n	8000f1a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ef4:	f7ff ffd6 	bl	8000ea4 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	2b0a      	cmp	r3, #10
 8000f00:	d90b      	bls.n	8000f1a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2205      	movs	r2, #5
 8000f12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e0c5      	b.n	80010a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d0e5      	beq.n	8000ef4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f022 0202 	bic.w	r2, r2, #2
 8000f36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f38:	f7ff ffb4 	bl	8000ea4 <HAL_GetTick>
 8000f3c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f3e:	e012      	b.n	8000f66 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f40:	f7ff ffb0 	bl	8000ea4 <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b0a      	cmp	r3, #10
 8000f4c:	d90b      	bls.n	8000f66 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2205      	movs	r2, #5
 8000f5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e09f      	b.n	80010a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 0302 	and.w	r3, r3, #2
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d1e5      	bne.n	8000f40 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	7e1b      	ldrb	r3, [r3, #24]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d108      	bne.n	8000f8e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	e007      	b.n	8000f9e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	7e5b      	ldrb	r3, [r3, #25]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d108      	bne.n	8000fb8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	e007      	b.n	8000fc8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000fc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	7e9b      	ldrb	r3, [r3, #26]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d108      	bne.n	8000fe2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f042 0220 	orr.w	r2, r2, #32
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	e007      	b.n	8000ff2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f022 0220 	bic.w	r2, r2, #32
 8000ff0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	7edb      	ldrb	r3, [r3, #27]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d108      	bne.n	800100c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f022 0210 	bic.w	r2, r2, #16
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	e007      	b.n	800101c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f042 0210 	orr.w	r2, r2, #16
 800101a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	7f1b      	ldrb	r3, [r3, #28]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d108      	bne.n	8001036 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f042 0208 	orr.w	r2, r2, #8
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	e007      	b.n	8001046 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f022 0208 	bic.w	r2, r2, #8
 8001044:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	7f5b      	ldrb	r3, [r3, #29]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d108      	bne.n	8001060 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f042 0204 	orr.w	r2, r2, #4
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	e007      	b.n	8001070 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f022 0204 	bic.w	r2, r2, #4
 800106e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689a      	ldr	r2, [r3, #8]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	431a      	orrs	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	691b      	ldr	r3, [r3, #16]
 800107e:	431a      	orrs	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	695b      	ldr	r3, [r3, #20]
 8001084:	ea42 0103 	orr.w	r1, r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	1e5a      	subs	r2, r3, #1
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	430a      	orrs	r2, r1
 8001094:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2201      	movs	r2, #1
 80010a0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80010ae:	b480      	push	{r7}
 80010b0:	b087      	sub	sp, #28
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	60f8      	str	r0, [r7, #12]
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
 80010ba:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010c2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80010c4:	7dfb      	ldrb	r3, [r7, #23]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d003      	beq.n	80010d2 <HAL_CAN_GetRxMessage+0x24>
 80010ca:	7dfb      	ldrb	r3, [r7, #23]
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	f040 8103 	bne.w	80012d8 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d10e      	bne.n	80010f6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	f003 0303 	and.w	r3, r3, #3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d116      	bne.n	8001114 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e0f7      	b.n	80012e6 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	691b      	ldr	r3, [r3, #16]
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	2b00      	cmp	r3, #0
 8001102:	d107      	bne.n	8001114 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001108:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e0e8      	b.n	80012e6 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	331b      	adds	r3, #27
 800111c:	011b      	lsls	r3, r3, #4
 800111e:	4413      	add	r3, r2
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0204 	and.w	r2, r3, #4
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d10c      	bne.n	800114c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	331b      	adds	r3, #27
 800113a:	011b      	lsls	r3, r3, #4
 800113c:	4413      	add	r3, r2
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	0d5b      	lsrs	r3, r3, #21
 8001142:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	e00b      	b.n	8001164 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	331b      	adds	r3, #27
 8001154:	011b      	lsls	r3, r3, #4
 8001156:	4413      	add	r3, r2
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	08db      	lsrs	r3, r3, #3
 800115c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	331b      	adds	r3, #27
 800116c:	011b      	lsls	r3, r3, #4
 800116e:	4413      	add	r3, r2
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0202 	and.w	r2, r3, #2
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	331b      	adds	r3, #27
 8001182:	011b      	lsls	r3, r3, #4
 8001184:	4413      	add	r3, r2
 8001186:	3304      	adds	r3, #4
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0308 	and.w	r3, r3, #8
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2208      	movs	r2, #8
 8001196:	611a      	str	r2, [r3, #16]
 8001198:	e00b      	b.n	80011b2 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	331b      	adds	r3, #27
 80011a2:	011b      	lsls	r3, r3, #4
 80011a4:	4413      	add	r3, r2
 80011a6:	3304      	adds	r3, #4
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 020f 	and.w	r2, r3, #15
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	331b      	adds	r3, #27
 80011ba:	011b      	lsls	r3, r3, #4
 80011bc:	4413      	add	r3, r2
 80011be:	3304      	adds	r3, #4
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	0a1b      	lsrs	r3, r3, #8
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	331b      	adds	r3, #27
 80011d2:	011b      	lsls	r3, r3, #4
 80011d4:	4413      	add	r3, r2
 80011d6:	3304      	adds	r3, #4
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	0c1b      	lsrs	r3, r3, #16
 80011dc:	b29a      	uxth	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	011b      	lsls	r3, r3, #4
 80011ea:	4413      	add	r3, r2
 80011ec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	011b      	lsls	r3, r3, #4
 8001200:	4413      	add	r3, r2
 8001202:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	0a1a      	lsrs	r2, r3, #8
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	3301      	adds	r3, #1
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	011b      	lsls	r3, r3, #4
 800121a:	4413      	add	r3, r2
 800121c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	0c1a      	lsrs	r2, r3, #16
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	3302      	adds	r3, #2
 8001228:	b2d2      	uxtb	r2, r2
 800122a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	011b      	lsls	r3, r3, #4
 8001234:	4413      	add	r3, r2
 8001236:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	0e1a      	lsrs	r2, r3, #24
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	3303      	adds	r3, #3
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	011b      	lsls	r3, r3, #4
 800124e:	4413      	add	r3, r2
 8001250:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	3304      	adds	r3, #4
 800125a:	b2d2      	uxtb	r2, r2
 800125c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	011b      	lsls	r3, r3, #4
 8001266:	4413      	add	r3, r2
 8001268:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	0a1a      	lsrs	r2, r3, #8
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	3305      	adds	r3, #5
 8001274:	b2d2      	uxtb	r2, r2
 8001276:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	011b      	lsls	r3, r3, #4
 8001280:	4413      	add	r3, r2
 8001282:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	0c1a      	lsrs	r2, r3, #16
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	3306      	adds	r3, #6
 800128e:	b2d2      	uxtb	r2, r2
 8001290:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	011b      	lsls	r3, r3, #4
 800129a:	4413      	add	r3, r2
 800129c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	0e1a      	lsrs	r2, r3, #24
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	3307      	adds	r3, #7
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d108      	bne.n	80012c4 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	68da      	ldr	r2, [r3, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f042 0220 	orr.w	r2, r2, #32
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	e007      	b.n	80012d4 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	691a      	ldr	r2, [r3, #16]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f042 0220 	orr.w	r2, r2, #32
 80012d2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80012d4:	2300      	movs	r3, #0
 80012d6:	e006      	b.n	80012e6 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
  }
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	371c      	adds	r7, #28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr

080012f0 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001304:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001306:	7afb      	ldrb	r3, [r7, #11]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d002      	beq.n	8001312 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800130c:	7afb      	ldrb	r3, [r7, #11]
 800130e:	2b02      	cmp	r3, #2
 8001310:	d10f      	bne.n	8001332 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d106      	bne.n	8001326 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	f003 0303 	and.w	r3, r3, #3
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	e005      	b.n	8001332 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001332:	68fb      	ldr	r3, [r7, #12]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr

0800133e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800133e:	b480      	push	{r7}
 8001340:	b085      	sub	sp, #20
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
 8001346:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800134e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001350:	7bfb      	ldrb	r3, [r7, #15]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d002      	beq.n	800135c <HAL_CAN_ActivateNotification+0x1e>
 8001356:	7bfb      	ldrb	r3, [r7, #15]
 8001358:	2b02      	cmp	r3, #2
 800135a:	d109      	bne.n	8001370 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	6959      	ldr	r1, [r3, #20]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	430a      	orrs	r2, r1
 800136a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800136c:	2300      	movs	r3, #0
 800136e:	e006      	b.n	800137e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001374:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
  }
}
 800137e:	4618      	mov	r0, r3
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr

08001388 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <__NVIC_SetPriorityGrouping+0x44>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800139e:	68ba      	ldr	r2, [r7, #8]
 80013a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013a4:	4013      	ands	r3, r2
 80013a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ba:	4a04      	ldr	r2, [pc, #16]	; (80013cc <__NVIC_SetPriorityGrouping+0x44>)
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	60d3      	str	r3, [r2, #12]
}
 80013c0:	bf00      	nop
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d4:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <__NVIC_GetPriorityGrouping+0x18>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	0a1b      	lsrs	r3, r3, #8
 80013da:	f003 0307 	and.w	r3, r3, #7
}
 80013de:	4618      	mov	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	6039      	str	r1, [r7, #0]
 80013f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	db0a      	blt.n	8001416 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	b2da      	uxtb	r2, r3
 8001404:	490c      	ldr	r1, [pc, #48]	; (8001438 <__NVIC_SetPriority+0x4c>)
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	0112      	lsls	r2, r2, #4
 800140c:	b2d2      	uxtb	r2, r2
 800140e:	440b      	add	r3, r1
 8001410:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001414:	e00a      	b.n	800142c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	b2da      	uxtb	r2, r3
 800141a:	4908      	ldr	r1, [pc, #32]	; (800143c <__NVIC_SetPriority+0x50>)
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	f003 030f 	and.w	r3, r3, #15
 8001422:	3b04      	subs	r3, #4
 8001424:	0112      	lsls	r2, r2, #4
 8001426:	b2d2      	uxtb	r2, r2
 8001428:	440b      	add	r3, r1
 800142a:	761a      	strb	r2, [r3, #24]
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000e100 	.word	0xe000e100
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001440:	b480      	push	{r7}
 8001442:	b089      	sub	sp, #36	; 0x24
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f1c3 0307 	rsb	r3, r3, #7
 800145a:	2b04      	cmp	r3, #4
 800145c:	bf28      	it	cs
 800145e:	2304      	movcs	r3, #4
 8001460:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3304      	adds	r3, #4
 8001466:	2b06      	cmp	r3, #6
 8001468:	d902      	bls.n	8001470 <NVIC_EncodePriority+0x30>
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3b03      	subs	r3, #3
 800146e:	e000      	b.n	8001472 <NVIC_EncodePriority+0x32>
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001474:	f04f 32ff 	mov.w	r2, #4294967295
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43da      	mvns	r2, r3
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	401a      	ands	r2, r3
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001488:	f04f 31ff 	mov.w	r1, #4294967295
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	fa01 f303 	lsl.w	r3, r1, r3
 8001492:	43d9      	mvns	r1, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001498:	4313      	orrs	r3, r2
         );
}
 800149a:	4618      	mov	r0, r3
 800149c:	3724      	adds	r7, #36	; 0x24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr

080014a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014b4:	d301      	bcc.n	80014ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014b6:	2301      	movs	r3, #1
 80014b8:	e00f      	b.n	80014da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ba:	4a0a      	ldr	r2, [pc, #40]	; (80014e4 <SysTick_Config+0x40>)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3b01      	subs	r3, #1
 80014c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014c2:	210f      	movs	r1, #15
 80014c4:	f04f 30ff 	mov.w	r0, #4294967295
 80014c8:	f7ff ff90 	bl	80013ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014cc:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <SysTick_Config+0x40>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014d2:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <SysTick_Config+0x40>)
 80014d4:	2207      	movs	r2, #7
 80014d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	e000e010 	.word	0xe000e010

080014e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f7ff ff49 	bl	8001388 <__NVIC_SetPriorityGrouping>
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014fe:	b580      	push	{r7, lr}
 8001500:	b086      	sub	sp, #24
 8001502:	af00      	add	r7, sp, #0
 8001504:	4603      	mov	r3, r0
 8001506:	60b9      	str	r1, [r7, #8]
 8001508:	607a      	str	r2, [r7, #4]
 800150a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001510:	f7ff ff5e 	bl	80013d0 <__NVIC_GetPriorityGrouping>
 8001514:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	68b9      	ldr	r1, [r7, #8]
 800151a:	6978      	ldr	r0, [r7, #20]
 800151c:	f7ff ff90 	bl	8001440 <NVIC_EncodePriority>
 8001520:	4602      	mov	r2, r0
 8001522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001526:	4611      	mov	r1, r2
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff ff5f 	bl	80013ec <__NVIC_SetPriority>
}
 800152e:	bf00      	nop
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b082      	sub	sp, #8
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff ffb0 	bl	80014a4 <SysTick_Config>
 8001544:	4603      	mov	r3, r0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001550:	b480      	push	{r7}
 8001552:	b08b      	sub	sp, #44	; 0x2c
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800155a:	2300      	movs	r3, #0
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800155e:	2300      	movs	r3, #0
 8001560:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001562:	e179      	b.n	8001858 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001564:	2201      	movs	r2, #1
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	69fa      	ldr	r2, [r7, #28]
 8001574:	4013      	ands	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	429a      	cmp	r2, r3
 800157e:	f040 8168 	bne.w	8001852 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	4a96      	ldr	r2, [pc, #600]	; (80017e0 <HAL_GPIO_Init+0x290>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d05e      	beq.n	800164a <HAL_GPIO_Init+0xfa>
 800158c:	4a94      	ldr	r2, [pc, #592]	; (80017e0 <HAL_GPIO_Init+0x290>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d875      	bhi.n	800167e <HAL_GPIO_Init+0x12e>
 8001592:	4a94      	ldr	r2, [pc, #592]	; (80017e4 <HAL_GPIO_Init+0x294>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d058      	beq.n	800164a <HAL_GPIO_Init+0xfa>
 8001598:	4a92      	ldr	r2, [pc, #584]	; (80017e4 <HAL_GPIO_Init+0x294>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d86f      	bhi.n	800167e <HAL_GPIO_Init+0x12e>
 800159e:	4a92      	ldr	r2, [pc, #584]	; (80017e8 <HAL_GPIO_Init+0x298>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d052      	beq.n	800164a <HAL_GPIO_Init+0xfa>
 80015a4:	4a90      	ldr	r2, [pc, #576]	; (80017e8 <HAL_GPIO_Init+0x298>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d869      	bhi.n	800167e <HAL_GPIO_Init+0x12e>
 80015aa:	4a90      	ldr	r2, [pc, #576]	; (80017ec <HAL_GPIO_Init+0x29c>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d04c      	beq.n	800164a <HAL_GPIO_Init+0xfa>
 80015b0:	4a8e      	ldr	r2, [pc, #568]	; (80017ec <HAL_GPIO_Init+0x29c>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d863      	bhi.n	800167e <HAL_GPIO_Init+0x12e>
 80015b6:	4a8e      	ldr	r2, [pc, #568]	; (80017f0 <HAL_GPIO_Init+0x2a0>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d046      	beq.n	800164a <HAL_GPIO_Init+0xfa>
 80015bc:	4a8c      	ldr	r2, [pc, #560]	; (80017f0 <HAL_GPIO_Init+0x2a0>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d85d      	bhi.n	800167e <HAL_GPIO_Init+0x12e>
 80015c2:	2b12      	cmp	r3, #18
 80015c4:	d82a      	bhi.n	800161c <HAL_GPIO_Init+0xcc>
 80015c6:	2b12      	cmp	r3, #18
 80015c8:	d859      	bhi.n	800167e <HAL_GPIO_Init+0x12e>
 80015ca:	a201      	add	r2, pc, #4	; (adr r2, 80015d0 <HAL_GPIO_Init+0x80>)
 80015cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d0:	0800164b 	.word	0x0800164b
 80015d4:	08001625 	.word	0x08001625
 80015d8:	08001637 	.word	0x08001637
 80015dc:	08001679 	.word	0x08001679
 80015e0:	0800167f 	.word	0x0800167f
 80015e4:	0800167f 	.word	0x0800167f
 80015e8:	0800167f 	.word	0x0800167f
 80015ec:	0800167f 	.word	0x0800167f
 80015f0:	0800167f 	.word	0x0800167f
 80015f4:	0800167f 	.word	0x0800167f
 80015f8:	0800167f 	.word	0x0800167f
 80015fc:	0800167f 	.word	0x0800167f
 8001600:	0800167f 	.word	0x0800167f
 8001604:	0800167f 	.word	0x0800167f
 8001608:	0800167f 	.word	0x0800167f
 800160c:	0800167f 	.word	0x0800167f
 8001610:	0800167f 	.word	0x0800167f
 8001614:	0800162d 	.word	0x0800162d
 8001618:	08001641 	.word	0x08001641
 800161c:	4a75      	ldr	r2, [pc, #468]	; (80017f4 <HAL_GPIO_Init+0x2a4>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d013      	beq.n	800164a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001622:	e02c      	b.n	800167e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	623b      	str	r3, [r7, #32]
          break;
 800162a:	e029      	b.n	8001680 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	3304      	adds	r3, #4
 8001632:	623b      	str	r3, [r7, #32]
          break;
 8001634:	e024      	b.n	8001680 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	3308      	adds	r3, #8
 800163c:	623b      	str	r3, [r7, #32]
          break;
 800163e:	e01f      	b.n	8001680 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	330c      	adds	r3, #12
 8001646:	623b      	str	r3, [r7, #32]
          break;
 8001648:	e01a      	b.n	8001680 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d102      	bne.n	8001658 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001652:	2304      	movs	r3, #4
 8001654:	623b      	str	r3, [r7, #32]
          break;
 8001656:	e013      	b.n	8001680 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d105      	bne.n	800166c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001660:	2308      	movs	r3, #8
 8001662:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	69fa      	ldr	r2, [r7, #28]
 8001668:	611a      	str	r2, [r3, #16]
          break;
 800166a:	e009      	b.n	8001680 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800166c:	2308      	movs	r3, #8
 800166e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69fa      	ldr	r2, [r7, #28]
 8001674:	615a      	str	r2, [r3, #20]
          break;
 8001676:	e003      	b.n	8001680 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001678:	2300      	movs	r3, #0
 800167a:	623b      	str	r3, [r7, #32]
          break;
 800167c:	e000      	b.n	8001680 <HAL_GPIO_Init+0x130>
          break;
 800167e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	2bff      	cmp	r3, #255	; 0xff
 8001684:	d801      	bhi.n	800168a <HAL_GPIO_Init+0x13a>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	e001      	b.n	800168e <HAL_GPIO_Init+0x13e>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	3304      	adds	r3, #4
 800168e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	2bff      	cmp	r3, #255	; 0xff
 8001694:	d802      	bhi.n	800169c <HAL_GPIO_Init+0x14c>
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	e002      	b.n	80016a2 <HAL_GPIO_Init+0x152>
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	3b08      	subs	r3, #8
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	210f      	movs	r1, #15
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	fa01 f303 	lsl.w	r3, r1, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	401a      	ands	r2, r3
 80016b4:	6a39      	ldr	r1, [r7, #32]
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	fa01 f303 	lsl.w	r3, r1, r3
 80016bc:	431a      	orrs	r2, r3
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f000 80c1 	beq.w	8001852 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016d0:	4b49      	ldr	r3, [pc, #292]	; (80017f8 <HAL_GPIO_Init+0x2a8>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	4a48      	ldr	r2, [pc, #288]	; (80017f8 <HAL_GPIO_Init+0x2a8>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	6193      	str	r3, [r2, #24]
 80016dc:	4b46      	ldr	r3, [pc, #280]	; (80017f8 <HAL_GPIO_Init+0x2a8>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016e8:	4a44      	ldr	r2, [pc, #272]	; (80017fc <HAL_GPIO_Init+0x2ac>)
 80016ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ec:	089b      	lsrs	r3, r3, #2
 80016ee:	3302      	adds	r3, #2
 80016f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	f003 0303 	and.w	r3, r3, #3
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	220f      	movs	r2, #15
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	4013      	ands	r3, r2
 800170a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4a3c      	ldr	r2, [pc, #240]	; (8001800 <HAL_GPIO_Init+0x2b0>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d01f      	beq.n	8001754 <HAL_GPIO_Init+0x204>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a3b      	ldr	r2, [pc, #236]	; (8001804 <HAL_GPIO_Init+0x2b4>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d019      	beq.n	8001750 <HAL_GPIO_Init+0x200>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a3a      	ldr	r2, [pc, #232]	; (8001808 <HAL_GPIO_Init+0x2b8>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d013      	beq.n	800174c <HAL_GPIO_Init+0x1fc>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a39      	ldr	r2, [pc, #228]	; (800180c <HAL_GPIO_Init+0x2bc>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d00d      	beq.n	8001748 <HAL_GPIO_Init+0x1f8>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4a38      	ldr	r2, [pc, #224]	; (8001810 <HAL_GPIO_Init+0x2c0>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d007      	beq.n	8001744 <HAL_GPIO_Init+0x1f4>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a37      	ldr	r2, [pc, #220]	; (8001814 <HAL_GPIO_Init+0x2c4>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d101      	bne.n	8001740 <HAL_GPIO_Init+0x1f0>
 800173c:	2305      	movs	r3, #5
 800173e:	e00a      	b.n	8001756 <HAL_GPIO_Init+0x206>
 8001740:	2306      	movs	r3, #6
 8001742:	e008      	b.n	8001756 <HAL_GPIO_Init+0x206>
 8001744:	2304      	movs	r3, #4
 8001746:	e006      	b.n	8001756 <HAL_GPIO_Init+0x206>
 8001748:	2303      	movs	r3, #3
 800174a:	e004      	b.n	8001756 <HAL_GPIO_Init+0x206>
 800174c:	2302      	movs	r3, #2
 800174e:	e002      	b.n	8001756 <HAL_GPIO_Init+0x206>
 8001750:	2301      	movs	r3, #1
 8001752:	e000      	b.n	8001756 <HAL_GPIO_Init+0x206>
 8001754:	2300      	movs	r3, #0
 8001756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001758:	f002 0203 	and.w	r2, r2, #3
 800175c:	0092      	lsls	r2, r2, #2
 800175e:	4093      	lsls	r3, r2
 8001760:	68fa      	ldr	r2, [r7, #12]
 8001762:	4313      	orrs	r3, r2
 8001764:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001766:	4925      	ldr	r1, [pc, #148]	; (80017fc <HAL_GPIO_Init+0x2ac>)
 8001768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176a:	089b      	lsrs	r3, r3, #2
 800176c:	3302      	adds	r3, #2
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d006      	beq.n	800178e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001780:	4b25      	ldr	r3, [pc, #148]	; (8001818 <HAL_GPIO_Init+0x2c8>)
 8001782:	689a      	ldr	r2, [r3, #8]
 8001784:	4924      	ldr	r1, [pc, #144]	; (8001818 <HAL_GPIO_Init+0x2c8>)
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	4313      	orrs	r3, r2
 800178a:	608b      	str	r3, [r1, #8]
 800178c:	e006      	b.n	800179c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800178e:	4b22      	ldr	r3, [pc, #136]	; (8001818 <HAL_GPIO_Init+0x2c8>)
 8001790:	689a      	ldr	r2, [r3, #8]
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	43db      	mvns	r3, r3
 8001796:	4920      	ldr	r1, [pc, #128]	; (8001818 <HAL_GPIO_Init+0x2c8>)
 8001798:	4013      	ands	r3, r2
 800179a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d006      	beq.n	80017b6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017a8:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <HAL_GPIO_Init+0x2c8>)
 80017aa:	68da      	ldr	r2, [r3, #12]
 80017ac:	491a      	ldr	r1, [pc, #104]	; (8001818 <HAL_GPIO_Init+0x2c8>)
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	60cb      	str	r3, [r1, #12]
 80017b4:	e006      	b.n	80017c4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017b6:	4b18      	ldr	r3, [pc, #96]	; (8001818 <HAL_GPIO_Init+0x2c8>)
 80017b8:	68da      	ldr	r2, [r3, #12]
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	43db      	mvns	r3, r3
 80017be:	4916      	ldr	r1, [pc, #88]	; (8001818 <HAL_GPIO_Init+0x2c8>)
 80017c0:	4013      	ands	r3, r2
 80017c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d025      	beq.n	800181c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017d0:	4b11      	ldr	r3, [pc, #68]	; (8001818 <HAL_GPIO_Init+0x2c8>)
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	4910      	ldr	r1, [pc, #64]	; (8001818 <HAL_GPIO_Init+0x2c8>)
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	4313      	orrs	r3, r2
 80017da:	604b      	str	r3, [r1, #4]
 80017dc:	e025      	b.n	800182a <HAL_GPIO_Init+0x2da>
 80017de:	bf00      	nop
 80017e0:	10320000 	.word	0x10320000
 80017e4:	10310000 	.word	0x10310000
 80017e8:	10220000 	.word	0x10220000
 80017ec:	10210000 	.word	0x10210000
 80017f0:	10120000 	.word	0x10120000
 80017f4:	10110000 	.word	0x10110000
 80017f8:	40021000 	.word	0x40021000
 80017fc:	40010000 	.word	0x40010000
 8001800:	40010800 	.word	0x40010800
 8001804:	40010c00 	.word	0x40010c00
 8001808:	40011000 	.word	0x40011000
 800180c:	40011400 	.word	0x40011400
 8001810:	40011800 	.word	0x40011800
 8001814:	40011c00 	.word	0x40011c00
 8001818:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800181c:	4b15      	ldr	r3, [pc, #84]	; (8001874 <HAL_GPIO_Init+0x324>)
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	43db      	mvns	r3, r3
 8001824:	4913      	ldr	r1, [pc, #76]	; (8001874 <HAL_GPIO_Init+0x324>)
 8001826:	4013      	ands	r3, r2
 8001828:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d006      	beq.n	8001844 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001836:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <HAL_GPIO_Init+0x324>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	490e      	ldr	r1, [pc, #56]	; (8001874 <HAL_GPIO_Init+0x324>)
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	4313      	orrs	r3, r2
 8001840:	600b      	str	r3, [r1, #0]
 8001842:	e006      	b.n	8001852 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001844:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <HAL_GPIO_Init+0x324>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	43db      	mvns	r3, r3
 800184c:	4909      	ldr	r1, [pc, #36]	; (8001874 <HAL_GPIO_Init+0x324>)
 800184e:	4013      	ands	r3, r2
 8001850:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	3301      	adds	r3, #1
 8001856:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	fa22 f303 	lsr.w	r3, r2, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	f47f ae7e 	bne.w	8001564 <HAL_GPIO_Init+0x14>
  }
}
 8001868:	bf00      	nop
 800186a:	bf00      	nop
 800186c:	372c      	adds	r7, #44	; 0x2c
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr
 8001874:	40010400 	.word	0x40010400

08001878 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	460b      	mov	r3, r1
 8001882:	807b      	strh	r3, [r7, #2]
 8001884:	4613      	mov	r3, r2
 8001886:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001888:	787b      	ldrb	r3, [r7, #1]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800188e:	887a      	ldrh	r2, [r7, #2]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001894:	e003      	b.n	800189e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001896:	887b      	ldrh	r3, [r7, #2]
 8001898:	041a      	lsls	r2, r3, #16
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	611a      	str	r2, [r3, #16]
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr

080018a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	460b      	mov	r3, r1
 80018b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018ba:	887a      	ldrh	r2, [r7, #2]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4013      	ands	r3, r2
 80018c0:	041a      	lsls	r2, r3, #16
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	43d9      	mvns	r1, r3
 80018c6:	887b      	ldrh	r3, [r7, #2]
 80018c8:	400b      	ands	r3, r1
 80018ca:	431a      	orrs	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	611a      	str	r2, [r3, #16]
}
 80018d0:	bf00      	nop
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr
	...

080018dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e12b      	b.n	8001b46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d106      	bne.n	8001908 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7fe ffc4 	bl	8000890 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2224      	movs	r2, #36	; 0x24
 800190c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 0201 	bic.w	r2, r2, #1
 800191e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800192e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800193e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001940:	f000 fcda 	bl	80022f8 <HAL_RCC_GetPCLK1Freq>
 8001944:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	4a81      	ldr	r2, [pc, #516]	; (8001b50 <HAL_I2C_Init+0x274>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d807      	bhi.n	8001960 <HAL_I2C_Init+0x84>
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4a80      	ldr	r2, [pc, #512]	; (8001b54 <HAL_I2C_Init+0x278>)
 8001954:	4293      	cmp	r3, r2
 8001956:	bf94      	ite	ls
 8001958:	2301      	movls	r3, #1
 800195a:	2300      	movhi	r3, #0
 800195c:	b2db      	uxtb	r3, r3
 800195e:	e006      	b.n	800196e <HAL_I2C_Init+0x92>
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4a7d      	ldr	r2, [pc, #500]	; (8001b58 <HAL_I2C_Init+0x27c>)
 8001964:	4293      	cmp	r3, r2
 8001966:	bf94      	ite	ls
 8001968:	2301      	movls	r3, #1
 800196a:	2300      	movhi	r3, #0
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e0e7      	b.n	8001b46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	4a78      	ldr	r2, [pc, #480]	; (8001b5c <HAL_I2C_Init+0x280>)
 800197a:	fba2 2303 	umull	r2, r3, r2, r3
 800197e:	0c9b      	lsrs	r3, r3, #18
 8001980:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	68ba      	ldr	r2, [r7, #8]
 8001992:	430a      	orrs	r2, r1
 8001994:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6a1b      	ldr	r3, [r3, #32]
 800199c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	4a6a      	ldr	r2, [pc, #424]	; (8001b50 <HAL_I2C_Init+0x274>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d802      	bhi.n	80019b0 <HAL_I2C_Init+0xd4>
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	3301      	adds	r3, #1
 80019ae:	e009      	b.n	80019c4 <HAL_I2C_Init+0xe8>
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80019b6:	fb02 f303 	mul.w	r3, r2, r3
 80019ba:	4a69      	ldr	r2, [pc, #420]	; (8001b60 <HAL_I2C_Init+0x284>)
 80019bc:	fba2 2303 	umull	r2, r3, r2, r3
 80019c0:	099b      	lsrs	r3, r3, #6
 80019c2:	3301      	adds	r3, #1
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	6812      	ldr	r2, [r2, #0]
 80019c8:	430b      	orrs	r3, r1
 80019ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80019d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	495c      	ldr	r1, [pc, #368]	; (8001b50 <HAL_I2C_Init+0x274>)
 80019e0:	428b      	cmp	r3, r1
 80019e2:	d819      	bhi.n	8001a18 <HAL_I2C_Init+0x13c>
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	1e59      	subs	r1, r3, #1
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80019f2:	1c59      	adds	r1, r3, #1
 80019f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80019f8:	400b      	ands	r3, r1
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d00a      	beq.n	8001a14 <HAL_I2C_Init+0x138>
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	1e59      	subs	r1, r3, #1
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a12:	e051      	b.n	8001ab8 <HAL_I2C_Init+0x1dc>
 8001a14:	2304      	movs	r3, #4
 8001a16:	e04f      	b.n	8001ab8 <HAL_I2C_Init+0x1dc>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d111      	bne.n	8001a44 <HAL_I2C_Init+0x168>
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	1e58      	subs	r0, r3, #1
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6859      	ldr	r1, [r3, #4]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	440b      	add	r3, r1
 8001a2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a32:	3301      	adds	r3, #1
 8001a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	bf0c      	ite	eq
 8001a3c:	2301      	moveq	r3, #1
 8001a3e:	2300      	movne	r3, #0
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	e012      	b.n	8001a6a <HAL_I2C_Init+0x18e>
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	1e58      	subs	r0, r3, #1
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6859      	ldr	r1, [r3, #4]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	440b      	add	r3, r1
 8001a52:	0099      	lsls	r1, r3, #2
 8001a54:	440b      	add	r3, r1
 8001a56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	bf0c      	ite	eq
 8001a64:	2301      	moveq	r3, #1
 8001a66:	2300      	movne	r3, #0
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_I2C_Init+0x196>
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e022      	b.n	8001ab8 <HAL_I2C_Init+0x1dc>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d10e      	bne.n	8001a98 <HAL_I2C_Init+0x1bc>
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	1e58      	subs	r0, r3, #1
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6859      	ldr	r1, [r3, #4]
 8001a82:	460b      	mov	r3, r1
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	440b      	add	r3, r1
 8001a88:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a96:	e00f      	b.n	8001ab8 <HAL_I2C_Init+0x1dc>
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	1e58      	subs	r0, r3, #1
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6859      	ldr	r1, [r3, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	0099      	lsls	r1, r3, #2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001aae:	3301      	adds	r3, #1
 8001ab0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ab4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ab8:	6879      	ldr	r1, [r7, #4]
 8001aba:	6809      	ldr	r1, [r1, #0]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69da      	ldr	r2, [r3, #28]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ae6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	6911      	ldr	r1, [r2, #16]
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	68d2      	ldr	r2, [r2, #12]
 8001af2:	4311      	orrs	r1, r2
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	6812      	ldr	r2, [r2, #0]
 8001af8:	430b      	orrs	r3, r1
 8001afa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	695a      	ldr	r2, [r3, #20]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	430a      	orrs	r2, r1
 8001b16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f042 0201 	orr.w	r2, r2, #1
 8001b26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2220      	movs	r2, #32
 8001b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	000186a0 	.word	0x000186a0
 8001b54:	001e847f 	.word	0x001e847f
 8001b58:	003d08ff 	.word	0x003d08ff
 8001b5c:	431bde83 	.word	0x431bde83
 8001b60:	10624dd3 	.word	0x10624dd3

08001b64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e272      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 8087 	beq.w	8001c92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b84:	4b92      	ldr	r3, [pc, #584]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 030c 	and.w	r3, r3, #12
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	d00c      	beq.n	8001baa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b90:	4b8f      	ldr	r3, [pc, #572]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 030c 	and.w	r3, r3, #12
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	d112      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x5e>
 8001b9c:	4b8c      	ldr	r3, [pc, #560]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba8:	d10b      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001baa:	4b89      	ldr	r3, [pc, #548]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d06c      	beq.n	8001c90 <HAL_RCC_OscConfig+0x12c>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d168      	bne.n	8001c90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e24c      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bca:	d106      	bne.n	8001bda <HAL_RCC_OscConfig+0x76>
 8001bcc:	4b80      	ldr	r3, [pc, #512]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a7f      	ldr	r2, [pc, #508]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001bd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	e02e      	b.n	8001c38 <HAL_RCC_OscConfig+0xd4>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10c      	bne.n	8001bfc <HAL_RCC_OscConfig+0x98>
 8001be2:	4b7b      	ldr	r3, [pc, #492]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a7a      	ldr	r2, [pc, #488]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001be8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	4b78      	ldr	r3, [pc, #480]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a77      	ldr	r2, [pc, #476]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	e01d      	b.n	8001c38 <HAL_RCC_OscConfig+0xd4>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c04:	d10c      	bne.n	8001c20 <HAL_RCC_OscConfig+0xbc>
 8001c06:	4b72      	ldr	r3, [pc, #456]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a71      	ldr	r2, [pc, #452]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	4b6f      	ldr	r3, [pc, #444]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a6e      	ldr	r2, [pc, #440]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	e00b      	b.n	8001c38 <HAL_RCC_OscConfig+0xd4>
 8001c20:	4b6b      	ldr	r3, [pc, #428]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a6a      	ldr	r2, [pc, #424]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c2a:	6013      	str	r3, [r2, #0]
 8001c2c:	4b68      	ldr	r3, [pc, #416]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a67      	ldr	r2, [pc, #412]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d013      	beq.n	8001c68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c40:	f7ff f930 	bl	8000ea4 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c48:	f7ff f92c 	bl	8000ea4 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b64      	cmp	r3, #100	; 0x64
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e200      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5a:	4b5d      	ldr	r3, [pc, #372]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d0f0      	beq.n	8001c48 <HAL_RCC_OscConfig+0xe4>
 8001c66:	e014      	b.n	8001c92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c68:	f7ff f91c 	bl	8000ea4 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c70:	f7ff f918 	bl	8000ea4 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b64      	cmp	r3, #100	; 0x64
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e1ec      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c82:	4b53      	ldr	r3, [pc, #332]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1f0      	bne.n	8001c70 <HAL_RCC_OscConfig+0x10c>
 8001c8e:	e000      	b.n	8001c92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d063      	beq.n	8001d66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c9e:	4b4c      	ldr	r3, [pc, #304]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 030c 	and.w	r3, r3, #12
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00b      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001caa:	4b49      	ldr	r3, [pc, #292]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 030c 	and.w	r3, r3, #12
 8001cb2:	2b08      	cmp	r3, #8
 8001cb4:	d11c      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x18c>
 8001cb6:	4b46      	ldr	r3, [pc, #280]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d116      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc2:	4b43      	ldr	r3, [pc, #268]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d005      	beq.n	8001cda <HAL_RCC_OscConfig+0x176>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d001      	beq.n	8001cda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e1c0      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cda:	4b3d      	ldr	r3, [pc, #244]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	4939      	ldr	r1, [pc, #228]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cee:	e03a      	b.n	8001d66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d020      	beq.n	8001d3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cf8:	4b36      	ldr	r3, [pc, #216]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfe:	f7ff f8d1 	bl	8000ea4 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d06:	f7ff f8cd 	bl	8000ea4 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e1a1      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d18:	4b2d      	ldr	r3, [pc, #180]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0f0      	beq.n	8001d06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d24:	4b2a      	ldr	r3, [pc, #168]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	695b      	ldr	r3, [r3, #20]
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4927      	ldr	r1, [pc, #156]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	600b      	str	r3, [r1, #0]
 8001d38:	e015      	b.n	8001d66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d3a:	4b26      	ldr	r3, [pc, #152]	; (8001dd4 <HAL_RCC_OscConfig+0x270>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d40:	f7ff f8b0 	bl	8000ea4 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d48:	f7ff f8ac 	bl	8000ea4 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e180      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d5a:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f0      	bne.n	8001d48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d03a      	beq.n	8001de8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d019      	beq.n	8001dae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d7a:	4b17      	ldr	r3, [pc, #92]	; (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d80:	f7ff f890 	bl	8000ea4 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d88:	f7ff f88c 	bl	8000ea4 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e160      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d9a:	4b0d      	ldr	r3, [pc, #52]	; (8001dd0 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0f0      	beq.n	8001d88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001da6:	2001      	movs	r0, #1
 8001da8:	f000 face 	bl	8002348 <RCC_Delay>
 8001dac:	e01c      	b.n	8001de8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dae:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <HAL_RCC_OscConfig+0x274>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db4:	f7ff f876 	bl	8000ea4 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dba:	e00f      	b.n	8001ddc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dbc:	f7ff f872 	bl	8000ea4 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d908      	bls.n	8001ddc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e146      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
 8001dce:	bf00      	nop
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	42420000 	.word	0x42420000
 8001dd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ddc:	4b92      	ldr	r3, [pc, #584]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1e9      	bne.n	8001dbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 80a6 	beq.w	8001f42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001df6:	2300      	movs	r3, #0
 8001df8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dfa:	4b8b      	ldr	r3, [pc, #556]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10d      	bne.n	8001e22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e06:	4b88      	ldr	r3, [pc, #544]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	4a87      	ldr	r2, [pc, #540]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e10:	61d3      	str	r3, [r2, #28]
 8001e12:	4b85      	ldr	r3, [pc, #532]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1a:	60bb      	str	r3, [r7, #8]
 8001e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e22:	4b82      	ldr	r3, [pc, #520]	; (800202c <HAL_RCC_OscConfig+0x4c8>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d118      	bne.n	8001e60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e2e:	4b7f      	ldr	r3, [pc, #508]	; (800202c <HAL_RCC_OscConfig+0x4c8>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a7e      	ldr	r2, [pc, #504]	; (800202c <HAL_RCC_OscConfig+0x4c8>)
 8001e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e3a:	f7ff f833 	bl	8000ea4 <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e42:	f7ff f82f 	bl	8000ea4 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b64      	cmp	r3, #100	; 0x64
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e103      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e54:	4b75      	ldr	r3, [pc, #468]	; (800202c <HAL_RCC_OscConfig+0x4c8>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0f0      	beq.n	8001e42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d106      	bne.n	8001e76 <HAL_RCC_OscConfig+0x312>
 8001e68:	4b6f      	ldr	r3, [pc, #444]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	4a6e      	ldr	r2, [pc, #440]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	6213      	str	r3, [r2, #32]
 8001e74:	e02d      	b.n	8001ed2 <HAL_RCC_OscConfig+0x36e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10c      	bne.n	8001e98 <HAL_RCC_OscConfig+0x334>
 8001e7e:	4b6a      	ldr	r3, [pc, #424]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	4a69      	ldr	r2, [pc, #420]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	f023 0301 	bic.w	r3, r3, #1
 8001e88:	6213      	str	r3, [r2, #32]
 8001e8a:	4b67      	ldr	r3, [pc, #412]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	4a66      	ldr	r2, [pc, #408]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001e90:	f023 0304 	bic.w	r3, r3, #4
 8001e94:	6213      	str	r3, [r2, #32]
 8001e96:	e01c      	b.n	8001ed2 <HAL_RCC_OscConfig+0x36e>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	2b05      	cmp	r3, #5
 8001e9e:	d10c      	bne.n	8001eba <HAL_RCC_OscConfig+0x356>
 8001ea0:	4b61      	ldr	r3, [pc, #388]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	4a60      	ldr	r2, [pc, #384]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001ea6:	f043 0304 	orr.w	r3, r3, #4
 8001eaa:	6213      	str	r3, [r2, #32]
 8001eac:	4b5e      	ldr	r3, [pc, #376]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	4a5d      	ldr	r2, [pc, #372]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001eb2:	f043 0301 	orr.w	r3, r3, #1
 8001eb6:	6213      	str	r3, [r2, #32]
 8001eb8:	e00b      	b.n	8001ed2 <HAL_RCC_OscConfig+0x36e>
 8001eba:	4b5b      	ldr	r3, [pc, #364]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	4a5a      	ldr	r2, [pc, #360]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001ec0:	f023 0301 	bic.w	r3, r3, #1
 8001ec4:	6213      	str	r3, [r2, #32]
 8001ec6:	4b58      	ldr	r3, [pc, #352]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	4a57      	ldr	r2, [pc, #348]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001ecc:	f023 0304 	bic.w	r3, r3, #4
 8001ed0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d015      	beq.n	8001f06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eda:	f7fe ffe3 	bl	8000ea4 <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee0:	e00a      	b.n	8001ef8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee2:	f7fe ffdf 	bl	8000ea4 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e0b1      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ef8:	4b4b      	ldr	r3, [pc, #300]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0ee      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x37e>
 8001f04:	e014      	b.n	8001f30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f06:	f7fe ffcd 	bl	8000ea4 <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f0c:	e00a      	b.n	8001f24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f0e:	f7fe ffc9 	bl	8000ea4 <HAL_GetTick>
 8001f12:	4602      	mov	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e09b      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f24:	4b40      	ldr	r3, [pc, #256]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1ee      	bne.n	8001f0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f30:	7dfb      	ldrb	r3, [r7, #23]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d105      	bne.n	8001f42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f36:	4b3c      	ldr	r3, [pc, #240]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	4a3b      	ldr	r2, [pc, #236]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 8087 	beq.w	800205a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f4c:	4b36      	ldr	r3, [pc, #216]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f003 030c 	and.w	r3, r3, #12
 8001f54:	2b08      	cmp	r3, #8
 8001f56:	d061      	beq.n	800201c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	69db      	ldr	r3, [r3, #28]
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d146      	bne.n	8001fee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f60:	4b33      	ldr	r3, [pc, #204]	; (8002030 <HAL_RCC_OscConfig+0x4cc>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f66:	f7fe ff9d 	bl	8000ea4 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f6e:	f7fe ff99 	bl	8000ea4 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e06d      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f80:	4b29      	ldr	r3, [pc, #164]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1f0      	bne.n	8001f6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f94:	d108      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f96:	4b24      	ldr	r3, [pc, #144]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	4921      	ldr	r1, [pc, #132]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fa8:	4b1f      	ldr	r3, [pc, #124]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a19      	ldr	r1, [r3, #32]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb8:	430b      	orrs	r3, r1
 8001fba:	491b      	ldr	r1, [pc, #108]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fc0:	4b1b      	ldr	r3, [pc, #108]	; (8002030 <HAL_RCC_OscConfig+0x4cc>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc6:	f7fe ff6d 	bl	8000ea4 <HAL_GetTick>
 8001fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fce:	f7fe ff69 	bl	8000ea4 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e03d      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fe0:	4b11      	ldr	r3, [pc, #68]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d0f0      	beq.n	8001fce <HAL_RCC_OscConfig+0x46a>
 8001fec:	e035      	b.n	800205a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fee:	4b10      	ldr	r3, [pc, #64]	; (8002030 <HAL_RCC_OscConfig+0x4cc>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff4:	f7fe ff56 	bl	8000ea4 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ffc:	f7fe ff52 	bl	8000ea4 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e026      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800200e:	4b06      	ldr	r3, [pc, #24]	; (8002028 <HAL_RCC_OscConfig+0x4c4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1f0      	bne.n	8001ffc <HAL_RCC_OscConfig+0x498>
 800201a:	e01e      	b.n	800205a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d107      	bne.n	8002034 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e019      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
 8002028:	40021000 	.word	0x40021000
 800202c:	40007000 	.word	0x40007000
 8002030:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002034:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <HAL_RCC_OscConfig+0x500>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	429a      	cmp	r2, r3
 8002046:	d106      	bne.n	8002056 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002052:	429a      	cmp	r2, r3
 8002054:	d001      	beq.n	800205a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40021000 	.word	0x40021000

08002068 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0d0      	b.n	800221e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800207c:	4b6a      	ldr	r3, [pc, #424]	; (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d910      	bls.n	80020ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208a:	4b67      	ldr	r3, [pc, #412]	; (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f023 0207 	bic.w	r2, r3, #7
 8002092:	4965      	ldr	r1, [pc, #404]	; (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	4313      	orrs	r3, r2
 8002098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800209a:	4b63      	ldr	r3, [pc, #396]	; (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d001      	beq.n	80020ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e0b8      	b.n	800221e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d020      	beq.n	80020fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d005      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020c4:	4b59      	ldr	r3, [pc, #356]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	4a58      	ldr	r2, [pc, #352]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80020ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0308 	and.w	r3, r3, #8
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d005      	beq.n	80020e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020dc:	4b53      	ldr	r3, [pc, #332]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	4a52      	ldr	r2, [pc, #328]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80020e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e8:	4b50      	ldr	r3, [pc, #320]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	494d      	ldr	r1, [pc, #308]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d040      	beq.n	8002188 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d107      	bne.n	800211e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800210e:	4b47      	ldr	r3, [pc, #284]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d115      	bne.n	8002146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e07f      	b.n	800221e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b02      	cmp	r3, #2
 8002124:	d107      	bne.n	8002136 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002126:	4b41      	ldr	r3, [pc, #260]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d109      	bne.n	8002146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e073      	b.n	800221e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002136:	4b3d      	ldr	r3, [pc, #244]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e06b      	b.n	800221e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002146:	4b39      	ldr	r3, [pc, #228]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f023 0203 	bic.w	r2, r3, #3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	4936      	ldr	r1, [pc, #216]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 8002154:	4313      	orrs	r3, r2
 8002156:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002158:	f7fe fea4 	bl	8000ea4 <HAL_GetTick>
 800215c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215e:	e00a      	b.n	8002176 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002160:	f7fe fea0 	bl	8000ea4 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	f241 3288 	movw	r2, #5000	; 0x1388
 800216e:	4293      	cmp	r3, r2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e053      	b.n	800221e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002176:	4b2d      	ldr	r3, [pc, #180]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f003 020c 	and.w	r2, r3, #12
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	429a      	cmp	r2, r3
 8002186:	d1eb      	bne.n	8002160 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002188:	4b27      	ldr	r3, [pc, #156]	; (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d210      	bcs.n	80021b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002196:	4b24      	ldr	r3, [pc, #144]	; (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f023 0207 	bic.w	r2, r3, #7
 800219e:	4922      	ldr	r1, [pc, #136]	; (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a6:	4b20      	ldr	r3, [pc, #128]	; (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d001      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e032      	b.n	800221e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d008      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021c4:	4b19      	ldr	r3, [pc, #100]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	4916      	ldr	r1, [pc, #88]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0308 	and.w	r3, r3, #8
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d009      	beq.n	80021f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021e2:	4b12      	ldr	r3, [pc, #72]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	490e      	ldr	r1, [pc, #56]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021f6:	f000 f821 	bl	800223c <HAL_RCC_GetSysClockFreq>
 80021fa:	4602      	mov	r2, r0
 80021fc:	4b0b      	ldr	r3, [pc, #44]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	091b      	lsrs	r3, r3, #4
 8002202:	f003 030f 	and.w	r3, r3, #15
 8002206:	490a      	ldr	r1, [pc, #40]	; (8002230 <HAL_RCC_ClockConfig+0x1c8>)
 8002208:	5ccb      	ldrb	r3, [r1, r3]
 800220a:	fa22 f303 	lsr.w	r3, r2, r3
 800220e:	4a09      	ldr	r2, [pc, #36]	; (8002234 <HAL_RCC_ClockConfig+0x1cc>)
 8002210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002212:	4b09      	ldr	r3, [pc, #36]	; (8002238 <HAL_RCC_ClockConfig+0x1d0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe fe02 	bl	8000e20 <HAL_InitTick>

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40022000 	.word	0x40022000
 800222c:	40021000 	.word	0x40021000
 8002230:	08005d14 	.word	0x08005d14
 8002234:	20000000 	.word	0x20000000
 8002238:	20000004 	.word	0x20000004

0800223c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800223c:	b480      	push	{r7}
 800223e:	b087      	sub	sp, #28
 8002240:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	2300      	movs	r3, #0
 8002248:	60bb      	str	r3, [r7, #8]
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
 800224e:	2300      	movs	r3, #0
 8002250:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002252:	2300      	movs	r3, #0
 8002254:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002256:	4b1e      	ldr	r3, [pc, #120]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f003 030c 	and.w	r3, r3, #12
 8002262:	2b04      	cmp	r3, #4
 8002264:	d002      	beq.n	800226c <HAL_RCC_GetSysClockFreq+0x30>
 8002266:	2b08      	cmp	r3, #8
 8002268:	d003      	beq.n	8002272 <HAL_RCC_GetSysClockFreq+0x36>
 800226a:	e027      	b.n	80022bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800226c:	4b19      	ldr	r3, [pc, #100]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800226e:	613b      	str	r3, [r7, #16]
      break;
 8002270:	e027      	b.n	80022c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	0c9b      	lsrs	r3, r3, #18
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	4a17      	ldr	r2, [pc, #92]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800227c:	5cd3      	ldrb	r3, [r2, r3]
 800227e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d010      	beq.n	80022ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800228a:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	0c5b      	lsrs	r3, r3, #17
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	4a11      	ldr	r2, [pc, #68]	; (80022dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002296:	5cd3      	ldrb	r3, [r2, r3]
 8002298:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a0d      	ldr	r2, [pc, #52]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800229e:	fb03 f202 	mul.w	r2, r3, r2
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	e004      	b.n	80022b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a0c      	ldr	r2, [pc, #48]	; (80022e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022b0:	fb02 f303 	mul.w	r3, r2, r3
 80022b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	613b      	str	r3, [r7, #16]
      break;
 80022ba:	e002      	b.n	80022c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022bc:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80022be:	613b      	str	r3, [r7, #16]
      break;
 80022c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022c2:	693b      	ldr	r3, [r7, #16]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	371c      	adds	r7, #28
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bc80      	pop	{r7}
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	40021000 	.word	0x40021000
 80022d4:	007a1200 	.word	0x007a1200
 80022d8:	08005d2c 	.word	0x08005d2c
 80022dc:	08005d3c 	.word	0x08005d3c
 80022e0:	003d0900 	.word	0x003d0900

080022e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022e8:	4b02      	ldr	r3, [pc, #8]	; (80022f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80022ea:	681b      	ldr	r3, [r3, #0]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr
 80022f4:	20000000 	.word	0x20000000

080022f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022fc:	f7ff fff2 	bl	80022e4 <HAL_RCC_GetHCLKFreq>
 8002300:	4602      	mov	r2, r0
 8002302:	4b05      	ldr	r3, [pc, #20]	; (8002318 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	0a1b      	lsrs	r3, r3, #8
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	4903      	ldr	r1, [pc, #12]	; (800231c <HAL_RCC_GetPCLK1Freq+0x24>)
 800230e:	5ccb      	ldrb	r3, [r1, r3]
 8002310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002314:	4618      	mov	r0, r3
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40021000 	.word	0x40021000
 800231c:	08005d24 	.word	0x08005d24

08002320 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002324:	f7ff ffde 	bl	80022e4 <HAL_RCC_GetHCLKFreq>
 8002328:	4602      	mov	r2, r0
 800232a:	4b05      	ldr	r3, [pc, #20]	; (8002340 <HAL_RCC_GetPCLK2Freq+0x20>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	0adb      	lsrs	r3, r3, #11
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	4903      	ldr	r1, [pc, #12]	; (8002344 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002336:	5ccb      	ldrb	r3, [r1, r3]
 8002338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800233c:	4618      	mov	r0, r3
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40021000 	.word	0x40021000
 8002344:	08005d24 	.word	0x08005d24

08002348 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002350:	4b0a      	ldr	r3, [pc, #40]	; (800237c <RCC_Delay+0x34>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a0a      	ldr	r2, [pc, #40]	; (8002380 <RCC_Delay+0x38>)
 8002356:	fba2 2303 	umull	r2, r3, r2, r3
 800235a:	0a5b      	lsrs	r3, r3, #9
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	fb02 f303 	mul.w	r3, r2, r3
 8002362:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002364:	bf00      	nop
  }
  while (Delay --);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	1e5a      	subs	r2, r3, #1
 800236a:	60fa      	str	r2, [r7, #12]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1f9      	bne.n	8002364 <RCC_Delay+0x1c>
}
 8002370:	bf00      	nop
 8002372:	bf00      	nop
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr
 800237c:	20000000 	.word	0x20000000
 8002380:	10624dd3 	.word	0x10624dd3

08002384 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e076      	b.n	8002484 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239a:	2b00      	cmp	r3, #0
 800239c:	d108      	bne.n	80023b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023a6:	d009      	beq.n	80023bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	61da      	str	r2, [r3, #28]
 80023ae:	e005      	b.n	80023bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d106      	bne.n	80023dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f7fe fb62 	bl	8000aa0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2202      	movs	r2, #2
 80023e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002404:	431a      	orrs	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	431a      	orrs	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800242c:	431a      	orrs	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002440:	ea42 0103 	orr.w	r1, r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002448:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	0c1a      	lsrs	r2, r3, #16
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f002 0204 	and.w	r2, r2, #4
 8002462:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	69da      	ldr	r2, [r3, #28]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002472:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e042      	b.n	8002524 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d106      	bne.n	80024b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7fe fbe2 	bl	8000c7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2224      	movs	r2, #36	; 0x24
 80024bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 f91d 	bl	8002710 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	691a      	ldr	r2, [r3, #16]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	695a      	ldr	r2, [r3, #20]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68da      	ldr	r2, [r3, #12]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002504:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2220      	movs	r2, #32
 8002510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2220      	movs	r2, #32
 8002518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08a      	sub	sp, #40	; 0x28
 8002530:	af02      	add	r7, sp, #8
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	4613      	mov	r3, r2
 800253a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800253c:	2300      	movs	r3, #0
 800253e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b20      	cmp	r3, #32
 800254a:	d16d      	bne.n	8002628 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d002      	beq.n	8002558 <HAL_UART_Transmit+0x2c>
 8002552:	88fb      	ldrh	r3, [r7, #6]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e066      	b.n	800262a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2221      	movs	r2, #33	; 0x21
 8002566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800256a:	f7fe fc9b 	bl	8000ea4 <HAL_GetTick>
 800256e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	88fa      	ldrh	r2, [r7, #6]
 8002574:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	88fa      	ldrh	r2, [r7, #6]
 800257a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002584:	d108      	bne.n	8002598 <HAL_UART_Transmit+0x6c>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d104      	bne.n	8002598 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800258e:	2300      	movs	r3, #0
 8002590:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	61bb      	str	r3, [r7, #24]
 8002596:	e003      	b.n	80025a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800259c:	2300      	movs	r3, #0
 800259e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80025a0:	e02a      	b.n	80025f8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	2200      	movs	r2, #0
 80025aa:	2180      	movs	r1, #128	; 0x80
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f000 f840 	bl	8002632 <UART_WaitOnFlagUntilTimeout>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e036      	b.n	800262a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10b      	bne.n	80025da <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	461a      	mov	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	3302      	adds	r3, #2
 80025d6:	61bb      	str	r3, [r7, #24]
 80025d8:	e007      	b.n	80025ea <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	781a      	ldrb	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	3301      	adds	r3, #1
 80025e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	3b01      	subs	r3, #1
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1cf      	bne.n	80025a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	2200      	movs	r2, #0
 800260a:	2140      	movs	r1, #64	; 0x40
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 f810 	bl	8002632 <UART_WaitOnFlagUntilTimeout>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e006      	b.n	800262a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2220      	movs	r2, #32
 8002620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002624:	2300      	movs	r3, #0
 8002626:	e000      	b.n	800262a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002628:	2302      	movs	r3, #2
  }
}
 800262a:	4618      	mov	r0, r3
 800262c:	3720      	adds	r7, #32
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b090      	sub	sp, #64	; 0x40
 8002636:	af00      	add	r7, sp, #0
 8002638:	60f8      	str	r0, [r7, #12]
 800263a:	60b9      	str	r1, [r7, #8]
 800263c:	603b      	str	r3, [r7, #0]
 800263e:	4613      	mov	r3, r2
 8002640:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002642:	e050      	b.n	80026e6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800264a:	d04c      	beq.n	80026e6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800264c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800264e:	2b00      	cmp	r3, #0
 8002650:	d007      	beq.n	8002662 <UART_WaitOnFlagUntilTimeout+0x30>
 8002652:	f7fe fc27 	bl	8000ea4 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800265e:	429a      	cmp	r2, r3
 8002660:	d241      	bcs.n	80026e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	330c      	adds	r3, #12
 8002668:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800266a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266c:	e853 3f00 	ldrex	r3, [r3]
 8002670:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002678:	63fb      	str	r3, [r7, #60]	; 0x3c
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	330c      	adds	r3, #12
 8002680:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002682:	637a      	str	r2, [r7, #52]	; 0x34
 8002684:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002686:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002688:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800268a:	e841 2300 	strex	r3, r2, [r1]
 800268e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1e5      	bne.n	8002662 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	3314      	adds	r3, #20
 800269c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	e853 3f00 	ldrex	r3, [r3]
 80026a4:	613b      	str	r3, [r7, #16]
   return(result);
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	f023 0301 	bic.w	r3, r3, #1
 80026ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	3314      	adds	r3, #20
 80026b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026b6:	623a      	str	r2, [r7, #32]
 80026b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ba:	69f9      	ldr	r1, [r7, #28]
 80026bc:	6a3a      	ldr	r2, [r7, #32]
 80026be:	e841 2300 	strex	r3, r2, [r1]
 80026c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1e5      	bne.n	8002696 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2220      	movs	r2, #32
 80026ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2220      	movs	r2, #32
 80026d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e00f      	b.n	8002706 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	4013      	ands	r3, r2
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	bf0c      	ite	eq
 80026f6:	2301      	moveq	r3, #1
 80026f8:	2300      	movne	r3, #0
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	461a      	mov	r2, r3
 80026fe:	79fb      	ldrb	r3, [r7, #7]
 8002700:	429a      	cmp	r2, r3
 8002702:	d09f      	beq.n	8002644 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3740      	adds	r7, #64	; 0x40
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
	...

08002710 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68da      	ldr	r2, [r3, #12]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	431a      	orrs	r2, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	4313      	orrs	r3, r2
 800273e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800274a:	f023 030c 	bic.w	r3, r3, #12
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6812      	ldr	r2, [r2, #0]
 8002752:	68b9      	ldr	r1, [r7, #8]
 8002754:	430b      	orrs	r3, r1
 8002756:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699a      	ldr	r2, [r3, #24]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a2c      	ldr	r2, [pc, #176]	; (8002824 <UART_SetConfig+0x114>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d103      	bne.n	8002780 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002778:	f7ff fdd2 	bl	8002320 <HAL_RCC_GetPCLK2Freq>
 800277c:	60f8      	str	r0, [r7, #12]
 800277e:	e002      	b.n	8002786 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002780:	f7ff fdba 	bl	80022f8 <HAL_RCC_GetPCLK1Freq>
 8002784:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	4613      	mov	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	009a      	lsls	r2, r3, #2
 8002790:	441a      	add	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	fbb2 f3f3 	udiv	r3, r2, r3
 800279c:	4a22      	ldr	r2, [pc, #136]	; (8002828 <UART_SetConfig+0x118>)
 800279e:	fba2 2303 	umull	r2, r3, r2, r3
 80027a2:	095b      	lsrs	r3, r3, #5
 80027a4:	0119      	lsls	r1, r3, #4
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	4613      	mov	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	009a      	lsls	r2, r3, #2
 80027b0:	441a      	add	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80027bc:	4b1a      	ldr	r3, [pc, #104]	; (8002828 <UART_SetConfig+0x118>)
 80027be:	fba3 0302 	umull	r0, r3, r3, r2
 80027c2:	095b      	lsrs	r3, r3, #5
 80027c4:	2064      	movs	r0, #100	; 0x64
 80027c6:	fb00 f303 	mul.w	r3, r0, r3
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	011b      	lsls	r3, r3, #4
 80027ce:	3332      	adds	r3, #50	; 0x32
 80027d0:	4a15      	ldr	r2, [pc, #84]	; (8002828 <UART_SetConfig+0x118>)
 80027d2:	fba2 2303 	umull	r2, r3, r2, r3
 80027d6:	095b      	lsrs	r3, r3, #5
 80027d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027dc:	4419      	add	r1, r3
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	009a      	lsls	r2, r3, #2
 80027e8:	441a      	add	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80027f4:	4b0c      	ldr	r3, [pc, #48]	; (8002828 <UART_SetConfig+0x118>)
 80027f6:	fba3 0302 	umull	r0, r3, r3, r2
 80027fa:	095b      	lsrs	r3, r3, #5
 80027fc:	2064      	movs	r0, #100	; 0x64
 80027fe:	fb00 f303 	mul.w	r3, r0, r3
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	011b      	lsls	r3, r3, #4
 8002806:	3332      	adds	r3, #50	; 0x32
 8002808:	4a07      	ldr	r2, [pc, #28]	; (8002828 <UART_SetConfig+0x118>)
 800280a:	fba2 2303 	umull	r2, r3, r2, r3
 800280e:	095b      	lsrs	r3, r3, #5
 8002810:	f003 020f 	and.w	r2, r3, #15
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	440a      	add	r2, r1
 800281a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800281c:	bf00      	nop
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40013800 	.word	0x40013800
 8002828:	51eb851f 	.word	0x51eb851f

0800282c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002832:	f3ef 8305 	mrs	r3, IPSR
 8002836:	60bb      	str	r3, [r7, #8]
  return(result);
 8002838:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10f      	bne.n	800285e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800283e:	f3ef 8310 	mrs	r3, PRIMASK
 8002842:	607b      	str	r3, [r7, #4]
  return(result);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d109      	bne.n	800285e <osKernelInitialize+0x32>
 800284a:	4b10      	ldr	r3, [pc, #64]	; (800288c <osKernelInitialize+0x60>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2b02      	cmp	r3, #2
 8002850:	d109      	bne.n	8002866 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002852:	f3ef 8311 	mrs	r3, BASEPRI
 8002856:	603b      	str	r3, [r7, #0]
  return(result);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800285e:	f06f 0305 	mvn.w	r3, #5
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	e00c      	b.n	8002880 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002866:	4b09      	ldr	r3, [pc, #36]	; (800288c <osKernelInitialize+0x60>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d105      	bne.n	800287a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800286e:	4b07      	ldr	r3, [pc, #28]	; (800288c <osKernelInitialize+0x60>)
 8002870:	2201      	movs	r2, #1
 8002872:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002874:	2300      	movs	r3, #0
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	e002      	b.n	8002880 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800287a:	f04f 33ff 	mov.w	r3, #4294967295
 800287e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002880:	68fb      	ldr	r3, [r7, #12]
}
 8002882:	4618      	mov	r0, r3
 8002884:	3714      	adds	r7, #20
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr
 800288c:	200002d0 	.word	0x200002d0

08002890 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8002896:	f002 f825 	bl	80048e4 <xTaskGetSchedulerState>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d004      	beq.n	80028aa <osKernelGetState+0x1a>
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d105      	bne.n	80028b0 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 80028a4:	2302      	movs	r3, #2
 80028a6:	607b      	str	r3, [r7, #4]
      break;
 80028a8:	e00c      	b.n	80028c4 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 80028aa:	2303      	movs	r3, #3
 80028ac:	607b      	str	r3, [r7, #4]
      break;
 80028ae:	e009      	b.n	80028c4 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 80028b0:	4b07      	ldr	r3, [pc, #28]	; (80028d0 <osKernelGetState+0x40>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d102      	bne.n	80028be <osKernelGetState+0x2e>
        state = osKernelReady;
 80028b8:	2301      	movs	r3, #1
 80028ba:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 80028bc:	e001      	b.n	80028c2 <osKernelGetState+0x32>
        state = osKernelInactive;
 80028be:	2300      	movs	r3, #0
 80028c0:	607b      	str	r3, [r7, #4]
      break;
 80028c2:	bf00      	nop
  }

  return (state);
 80028c4:	687b      	ldr	r3, [r7, #4]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	200002d0 	.word	0x200002d0

080028d4 <osKernelStart>:

osStatus_t osKernelStart (void) {
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028da:	f3ef 8305 	mrs	r3, IPSR
 80028de:	60bb      	str	r3, [r7, #8]
  return(result);
 80028e0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10f      	bne.n	8002906 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028e6:	f3ef 8310 	mrs	r3, PRIMASK
 80028ea:	607b      	str	r3, [r7, #4]
  return(result);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d109      	bne.n	8002906 <osKernelStart+0x32>
 80028f2:	4b11      	ldr	r3, [pc, #68]	; (8002938 <osKernelStart+0x64>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d109      	bne.n	800290e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80028fa:	f3ef 8311 	mrs	r3, BASEPRI
 80028fe:	603b      	str	r3, [r7, #0]
  return(result);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <osKernelStart+0x3a>
    stat = osErrorISR;
 8002906:	f06f 0305 	mvn.w	r3, #5
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	e00e      	b.n	800292c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800290e:	4b0a      	ldr	r3, [pc, #40]	; (8002938 <osKernelStart+0x64>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d107      	bne.n	8002926 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002916:	4b08      	ldr	r3, [pc, #32]	; (8002938 <osKernelStart+0x64>)
 8002918:	2202      	movs	r2, #2
 800291a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800291c:	f001 fb80 	bl	8004020 <vTaskStartScheduler>
      stat = osOK;
 8002920:	2300      	movs	r3, #0
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	e002      	b.n	800292c <osKernelStart+0x58>
    } else {
      stat = osError;
 8002926:	f04f 33ff 	mov.w	r3, #4294967295
 800292a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800292c:	68fb      	ldr	r3, [r7, #12]
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	200002d0 	.word	0x200002d0

0800293c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800293c:	b580      	push	{r7, lr}
 800293e:	b092      	sub	sp, #72	; 0x48
 8002940:	af04      	add	r7, sp, #16
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002948:	2300      	movs	r3, #0
 800294a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800294c:	f3ef 8305 	mrs	r3, IPSR
 8002950:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002954:	2b00      	cmp	r3, #0
 8002956:	f040 8094 	bne.w	8002a82 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800295a:	f3ef 8310 	mrs	r3, PRIMASK
 800295e:	623b      	str	r3, [r7, #32]
  return(result);
 8002960:	6a3b      	ldr	r3, [r7, #32]
 8002962:	2b00      	cmp	r3, #0
 8002964:	f040 808d 	bne.w	8002a82 <osThreadNew+0x146>
 8002968:	4b48      	ldr	r3, [pc, #288]	; (8002a8c <osThreadNew+0x150>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b02      	cmp	r3, #2
 800296e:	d106      	bne.n	800297e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002970:	f3ef 8311 	mrs	r3, BASEPRI
 8002974:	61fb      	str	r3, [r7, #28]
  return(result);
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	2b00      	cmp	r3, #0
 800297a:	f040 8082 	bne.w	8002a82 <osThreadNew+0x146>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d07e      	beq.n	8002a82 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002984:	2380      	movs	r3, #128	; 0x80
 8002986:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002988:	2318      	movs	r3, #24
 800298a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800298c:	2300      	movs	r3, #0
 800298e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002990:	f107 031b 	add.w	r3, r7, #27
 8002994:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002996:	f04f 33ff 	mov.w	r3, #4294967295
 800299a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d045      	beq.n	8002a2e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d002      	beq.n	80029b0 <osThreadNew+0x74>
        name = attr->name;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d002      	beq.n	80029be <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80029be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d008      	beq.n	80029d6 <osThreadNew+0x9a>
 80029c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c6:	2b38      	cmp	r3, #56	; 0x38
 80029c8:	d805      	bhi.n	80029d6 <osThreadNew+0x9a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <osThreadNew+0x9e>
        return (NULL);
 80029d6:	2300      	movs	r3, #0
 80029d8:	e054      	b.n	8002a84 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	089b      	lsrs	r3, r3, #2
 80029e8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00e      	beq.n	8002a10 <osThreadNew+0xd4>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	2bb7      	cmp	r3, #183	; 0xb7
 80029f8:	d90a      	bls.n	8002a10 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d006      	beq.n	8002a10 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d002      	beq.n	8002a10 <osThreadNew+0xd4>
        mem = 1;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a0e:	e010      	b.n	8002a32 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10c      	bne.n	8002a32 <osThreadNew+0xf6>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d108      	bne.n	8002a32 <osThreadNew+0xf6>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d104      	bne.n	8002a32 <osThreadNew+0xf6>
          mem = 0;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a2c:	e001      	b.n	8002a32 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d110      	bne.n	8002a5a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002a40:	9202      	str	r2, [sp, #8]
 8002a42:	9301      	str	r3, [sp, #4]
 8002a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f001 f902 	bl	8003c58 <xTaskCreateStatic>
 8002a54:	4603      	mov	r3, r0
 8002a56:	617b      	str	r3, [r7, #20]
 8002a58:	e013      	b.n	8002a82 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d110      	bne.n	8002a82 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	f107 0314 	add.w	r3, r7, #20
 8002a68:	9301      	str	r3, [sp, #4]
 8002a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f001 f94c 	bl	8003d10 <xTaskCreate>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d001      	beq.n	8002a82 <osThreadNew+0x146>
          hTask = NULL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002a82:	697b      	ldr	r3, [r7, #20]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3738      	adds	r7, #56	; 0x38
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	200002d0 	.word	0x200002d0

08002a90 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a96:	f3ef 8305 	mrs	r3, IPSR
 8002a9a:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a9c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10f      	bne.n	8002ac2 <osThreadYield+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aa2:	f3ef 8310 	mrs	r3, PRIMASK
 8002aa6:	607b      	str	r3, [r7, #4]
  return(result);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d109      	bne.n	8002ac2 <osThreadYield+0x32>
 8002aae:	4b0f      	ldr	r3, [pc, #60]	; (8002aec <osThreadYield+0x5c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d109      	bne.n	8002aca <osThreadYield+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002ab6:	f3ef 8311 	mrs	r3, BASEPRI
 8002aba:	603b      	str	r3, [r7, #0]
  return(result);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <osThreadYield+0x3a>
    stat = osErrorISR;
 8002ac2:	f06f 0305 	mvn.w	r3, #5
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	e009      	b.n	8002ade <osThreadYield+0x4e>
  } else {
    stat = osOK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
    taskYIELD();
 8002ace:	4b08      	ldr	r3, [pc, #32]	; (8002af0 <osThreadYield+0x60>)
 8002ad0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	f3bf 8f4f 	dsb	sy
 8002ada:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8002ade:	68fb      	ldr	r3, [r7, #12]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bc80      	pop	{r7}
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	200002d0 	.word	0x200002d0
 8002af0:	e000ed04 	.word	0xe000ed04

08002af4 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08e      	sub	sp, #56	; 0x38
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b00:	f3ef 8305 	mrs	r3, IPSR
 8002b04:	61fb      	str	r3, [r7, #28]
  return(result);
 8002b06:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10f      	bne.n	8002b2c <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b0c:	f3ef 8310 	mrs	r3, PRIMASK
 8002b10:	61bb      	str	r3, [r7, #24]
  return(result);
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d109      	bne.n	8002b2c <osThreadFlagsWait+0x38>
 8002b18:	4b3f      	ldr	r3, [pc, #252]	; (8002c18 <osThreadFlagsWait+0x124>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d109      	bne.n	8002b34 <osThreadFlagsWait+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002b20:	f3ef 8311 	mrs	r3, BASEPRI
 8002b24:	617b      	str	r3, [r7, #20]
  return(result);
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 8002b2c:	f06f 0305 	mvn.w	r3, #5
 8002b30:	637b      	str	r3, [r7, #52]	; 0x34
 8002b32:	e06b      	b.n	8002c0c <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	da03      	bge.n	8002b42 <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 8002b3a:	f06f 0303 	mvn.w	r3, #3
 8002b3e:	637b      	str	r3, [r7, #52]	; 0x34
 8002b40:	e064      	b.n	8002c0c <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d002      	beq.n	8002b52 <osThreadFlagsWait+0x5e>
      clear = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	633b      	str	r3, [r7, #48]	; 0x30
 8002b50:	e001      	b.n	8002b56 <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 8002b56:	2300      	movs	r3, #0
 8002b58:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 8002b5e:	f001 fb7b 	bl	8004258 <xTaskGetTickCount>
 8002b62:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8002b64:	f107 0210 	add.w	r2, r7, #16
 8002b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	f001 ff45 	bl	80049fc <xTaskNotifyWait>
 8002b72:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d137      	bne.n	8002bea <osThreadFlagsWait+0xf6>
        rflags &= flags;
 8002b7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b86:	4313      	orrs	r3, r2
 8002b88:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00c      	beq.n	8002bae <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b98:	4013      	ands	r3, r2
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d032      	beq.n	8002c06 <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10f      	bne.n	8002bc6 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 8002ba6:	f06f 0302 	mvn.w	r3, #2
 8002baa:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8002bac:	e02e      	b.n	8002c0c <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d128      	bne.n	8002c0a <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d103      	bne.n	8002bc6 <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 8002bbe:	f06f 0302 	mvn.w	r3, #2
 8002bc2:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8002bc4:	e022      	b.n	8002c0c <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8002bc6:	f001 fb47 	bl	8004258 <xTaskGetTickCount>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 8002bd2:	6a3a      	ldr	r2, [r7, #32]
 8002bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d902      	bls.n	8002be0 <osThreadFlagsWait+0xec>
          tout  = 0;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bde:	e00e      	b.n	8002bfe <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 8002be0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002be8:	e009      	b.n	8002bfe <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d103      	bne.n	8002bf8 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 8002bf0:	f06f 0302 	mvn.w	r3, #2
 8002bf4:	637b      	str	r3, [r7, #52]	; 0x34
 8002bf6:	e002      	b.n	8002bfe <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8002bf8:	f06f 0301 	mvn.w	r3, #1
 8002bfc:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1af      	bne.n	8002b64 <osThreadFlagsWait+0x70>
 8002c04:	e002      	b.n	8002c0c <osThreadFlagsWait+0x118>
            break;
 8002c06:	bf00      	nop
 8002c08:	e000      	b.n	8002c0c <osThreadFlagsWait+0x118>
            break;
 8002c0a:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8002c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3738      	adds	r7, #56	; 0x38
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	200002d0 	.word	0x200002d0

08002c1c <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c24:	f3ef 8305 	mrs	r3, IPSR
 8002c28:	613b      	str	r3, [r7, #16]
  return(result);
 8002c2a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10f      	bne.n	8002c50 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c30:	f3ef 8310 	mrs	r3, PRIMASK
 8002c34:	60fb      	str	r3, [r7, #12]
  return(result);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d109      	bne.n	8002c50 <osDelay+0x34>
 8002c3c:	4b0d      	ldr	r3, [pc, #52]	; (8002c74 <osDelay+0x58>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d109      	bne.n	8002c58 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002c44:	f3ef 8311 	mrs	r3, BASEPRI
 8002c48:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d003      	beq.n	8002c58 <osDelay+0x3c>
    stat = osErrorISR;
 8002c50:	f06f 0305 	mvn.w	r3, #5
 8002c54:	617b      	str	r3, [r7, #20]
 8002c56:	e007      	b.n	8002c68 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d002      	beq.n	8002c68 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f001 f9a8 	bl	8003fb8 <vTaskDelay>
    }
  }

  return (stat);
 8002c68:	697b      	ldr	r3, [r7, #20]
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3718      	adds	r7, #24
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	200002d0 	.word	0x200002d0

08002c78 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08c      	sub	sp, #48	; 0x30
 8002c7c:	af02      	add	r7, sp, #8
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c88:	f3ef 8305 	mrs	r3, IPSR
 8002c8c:	61bb      	str	r3, [r7, #24]
  return(result);
 8002c8e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d16f      	bne.n	8002d74 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c94:	f3ef 8310 	mrs	r3, PRIMASK
 8002c98:	617b      	str	r3, [r7, #20]
  return(result);
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d169      	bne.n	8002d74 <osMessageQueueNew+0xfc>
 8002ca0:	4b37      	ldr	r3, [pc, #220]	; (8002d80 <osMessageQueueNew+0x108>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d105      	bne.n	8002cb4 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002ca8:	f3ef 8311 	mrs	r3, BASEPRI
 8002cac:	613b      	str	r3, [r7, #16]
  return(result);
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d15f      	bne.n	8002d74 <osMessageQueueNew+0xfc>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d05c      	beq.n	8002d74 <osMessageQueueNew+0xfc>
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d059      	beq.n	8002d74 <osMessageQueueNew+0xfc>
    mem = -1;
 8002cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d029      	beq.n	8002d20 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d012      	beq.n	8002cfa <osMessageQueueNew+0x82>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	2b4f      	cmp	r3, #79	; 0x4f
 8002cda:	d90e      	bls.n	8002cfa <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00a      	beq.n	8002cfa <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	695a      	ldr	r2, [r3, #20]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	68b9      	ldr	r1, [r7, #8]
 8002cec:	fb01 f303 	mul.w	r3, r1, r3
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d302      	bcc.n	8002cfa <osMessageQueueNew+0x82>
        mem = 1;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	623b      	str	r3, [r7, #32]
 8002cf8:	e014      	b.n	8002d24 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d110      	bne.n	8002d24 <osMessageQueueNew+0xac>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10c      	bne.n	8002d24 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d108      	bne.n	8002d24 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d104      	bne.n	8002d24 <osMessageQueueNew+0xac>
          mem = 0;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	623b      	str	r3, [r7, #32]
 8002d1e:	e001      	b.n	8002d24 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d10b      	bne.n	8002d42 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691a      	ldr	r2, [r3, #16]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	2100      	movs	r1, #0
 8002d34:	9100      	str	r1, [sp, #0]
 8002d36:	68b9      	ldr	r1, [r7, #8]
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f000 fa53 	bl	80031e4 <xQueueGenericCreateStatic>
 8002d3e:	6278      	str	r0, [r7, #36]	; 0x24
 8002d40:	e008      	b.n	8002d54 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d105      	bne.n	8002d54 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8002d48:	2200      	movs	r2, #0
 8002d4a:	68b9      	ldr	r1, [r7, #8]
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 fac0 	bl	80032d2 <xQueueGenericCreate>
 8002d52:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00c      	beq.n	8002d74 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <osMessageQueueNew+0xf0>
        name = attr->name;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	61fb      	str	r3, [r7, #28]
 8002d66:	e001      	b.n	8002d6c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8002d6c:	69f9      	ldr	r1, [r7, #28]
 8002d6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d70:	f000 ff16 	bl	8003ba0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3728      	adds	r7, #40	; 0x28
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	200002d0 	.word	0x200002d0

08002d84 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b08a      	sub	sp, #40	; 0x28
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	603b      	str	r3, [r7, #0]
 8002d90:	4613      	mov	r3, r2
 8002d92:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d9c:	f3ef 8305 	mrs	r3, IPSR
 8002da0:	61fb      	str	r3, [r7, #28]
  return(result);
 8002da2:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10f      	bne.n	8002dc8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002da8:	f3ef 8310 	mrs	r3, PRIMASK
 8002dac:	61bb      	str	r3, [r7, #24]
  return(result);
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d109      	bne.n	8002dc8 <osMessageQueuePut+0x44>
 8002db4:	4b2b      	ldr	r3, [pc, #172]	; (8002e64 <osMessageQueuePut+0xe0>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d12e      	bne.n	8002e1a <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002dbc:	f3ef 8311 	mrs	r3, BASEPRI
 8002dc0:	617b      	str	r3, [r7, #20]
  return(result);
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d028      	beq.n	8002e1a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002dc8:	6a3b      	ldr	r3, [r7, #32]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d005      	beq.n	8002dda <osMessageQueuePut+0x56>
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d002      	beq.n	8002dda <osMessageQueuePut+0x56>
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8002dda:	f06f 0303 	mvn.w	r3, #3
 8002dde:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002de0:	e039      	b.n	8002e56 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8002de2:	2300      	movs	r3, #0
 8002de4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8002de6:	f107 0210 	add.w	r2, r7, #16
 8002dea:	2300      	movs	r3, #0
 8002dec:	68b9      	ldr	r1, [r7, #8]
 8002dee:	6a38      	ldr	r0, [r7, #32]
 8002df0:	f000 fbce 	bl	8003590 <xQueueGenericSendFromISR>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d003      	beq.n	8002e02 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8002dfa:	f06f 0302 	mvn.w	r3, #2
 8002dfe:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002e00:	e029      	b.n	8002e56 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d026      	beq.n	8002e56 <osMessageQueuePut+0xd2>
 8002e08:	4b17      	ldr	r3, [pc, #92]	; (8002e68 <osMessageQueuePut+0xe4>)
 8002e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	f3bf 8f4f 	dsb	sy
 8002e14:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002e18:	e01d      	b.n	8002e56 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d002      	beq.n	8002e26 <osMessageQueuePut+0xa2>
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d103      	bne.n	8002e2e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8002e26:	f06f 0303 	mvn.w	r3, #3
 8002e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e2c:	e014      	b.n	8002e58 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002e2e:	2300      	movs	r3, #0
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	68b9      	ldr	r1, [r7, #8]
 8002e34:	6a38      	ldr	r0, [r7, #32]
 8002e36:	f000 faad 	bl	8003394 <xQueueGenericSend>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d00b      	beq.n	8002e58 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8002e46:	f06f 0301 	mvn.w	r3, #1
 8002e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e4c:	e004      	b.n	8002e58 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8002e4e:	f06f 0302 	mvn.w	r3, #2
 8002e52:	627b      	str	r3, [r7, #36]	; 0x24
 8002e54:	e000      	b.n	8002e58 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002e56:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3728      	adds	r7, #40	; 0x28
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	200002d0 	.word	0x200002d0
 8002e68:	e000ed04 	.word	0xe000ed04

08002e6c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08a      	sub	sp, #40	; 0x28
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
 8002e78:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e82:	f3ef 8305 	mrs	r3, IPSR
 8002e86:	61fb      	str	r3, [r7, #28]
  return(result);
 8002e88:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10f      	bne.n	8002eae <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e8e:	f3ef 8310 	mrs	r3, PRIMASK
 8002e92:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d109      	bne.n	8002eae <osMessageQueueGet+0x42>
 8002e9a:	4b2b      	ldr	r3, [pc, #172]	; (8002f48 <osMessageQueueGet+0xdc>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d12e      	bne.n	8002f00 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002ea2:	f3ef 8311 	mrs	r3, BASEPRI
 8002ea6:	617b      	str	r3, [r7, #20]
  return(result);
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d028      	beq.n	8002f00 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002eae:	6a3b      	ldr	r3, [r7, #32]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d005      	beq.n	8002ec0 <osMessageQueueGet+0x54>
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <osMessageQueueGet+0x54>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d003      	beq.n	8002ec8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8002ec0:	f06f 0303 	mvn.w	r3, #3
 8002ec4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002ec6:	e038      	b.n	8002f3a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8002ecc:	f107 0310 	add.w	r3, r7, #16
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	68b9      	ldr	r1, [r7, #8]
 8002ed4:	6a38      	ldr	r0, [r7, #32]
 8002ed6:	f000 fcd3 	bl	8003880 <xQueueReceiveFromISR>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d003      	beq.n	8002ee8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8002ee0:	f06f 0302 	mvn.w	r3, #2
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002ee6:	e028      	b.n	8002f3a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d025      	beq.n	8002f3a <osMessageQueueGet+0xce>
 8002eee:	4b17      	ldr	r3, [pc, #92]	; (8002f4c <osMessageQueueGet+0xe0>)
 8002ef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	f3bf 8f4f 	dsb	sy
 8002efa:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002efe:	e01c      	b.n	8002f3a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002f00:	6a3b      	ldr	r3, [r7, #32]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d002      	beq.n	8002f0c <osMessageQueueGet+0xa0>
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d103      	bne.n	8002f14 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8002f0c:	f06f 0303 	mvn.w	r3, #3
 8002f10:	627b      	str	r3, [r7, #36]	; 0x24
 8002f12:	e013      	b.n	8002f3c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	68b9      	ldr	r1, [r7, #8]
 8002f18:	6a38      	ldr	r0, [r7, #32]
 8002f1a:	f000 fbd1 	bl	80036c0 <xQueueReceive>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d00b      	beq.n	8002f3c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8002f2a:	f06f 0301 	mvn.w	r3, #1
 8002f2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f30:	e004      	b.n	8002f3c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8002f32:	f06f 0302 	mvn.w	r3, #2
 8002f36:	627b      	str	r3, [r7, #36]	; 0x24
 8002f38:	e000      	b.n	8002f3c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002f3a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3728      	adds	r7, #40	; 0x28
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	200002d0 	.word	0x200002d0
 8002f4c:	e000ed04 	.word	0xe000ed04

08002f50 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4a06      	ldr	r2, [pc, #24]	; (8002f78 <vApplicationGetIdleTaskMemory+0x28>)
 8002f60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	4a05      	ldr	r2, [pc, #20]	; (8002f7c <vApplicationGetIdleTaskMemory+0x2c>)
 8002f66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2280      	movs	r2, #128	; 0x80
 8002f6c:	601a      	str	r2, [r3, #0]
}
 8002f6e:	bf00      	nop
 8002f70:	3714      	adds	r7, #20
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr
 8002f78:	200002d4 	.word	0x200002d4
 8002f7c:	2000038c 	.word	0x2000038c

08002f80 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4a07      	ldr	r2, [pc, #28]	; (8002fac <vApplicationGetTimerTaskMemory+0x2c>)
 8002f90:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	4a06      	ldr	r2, [pc, #24]	; (8002fb0 <vApplicationGetTimerTaskMemory+0x30>)
 8002f96:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f9e:	601a      	str	r2, [r3, #0]
}
 8002fa0:	bf00      	nop
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bc80      	pop	{r7}
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	2000058c 	.word	0x2000058c
 8002fb0:	20000644 	.word	0x20000644

08002fb4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f103 0208 	add.w	r2, r3, #8
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fcc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f103 0208 	add.w	r2, r3, #8
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f103 0208 	add.w	r2, r3, #8
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bc80      	pop	{r7}
 8002ff0:	4770      	bx	lr

08002ff2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b083      	sub	sp, #12
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	bc80      	pop	{r7}
 8003008:	4770      	bx	lr

0800300a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800300a:	b480      	push	{r7}
 800300c:	b085      	sub	sp, #20
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
 8003012:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	601a      	str	r2, [r3, #0]
}
 8003046:	bf00      	nop
 8003048:	3714      	adds	r7, #20
 800304a:	46bd      	mov	sp, r7
 800304c:	bc80      	pop	{r7}
 800304e:	4770      	bx	lr

08003050 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003066:	d103      	bne.n	8003070 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	e00c      	b.n	800308a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3308      	adds	r3, #8
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	e002      	b.n	800307e <vListInsert+0x2e>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68ba      	ldr	r2, [r7, #8]
 8003086:	429a      	cmp	r2, r3
 8003088:	d2f6      	bcs.n	8003078 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	1c5a      	adds	r2, r3, #1
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	601a      	str	r2, [r3, #0]
}
 80030b6:	bf00      	nop
 80030b8:	3714      	adds	r7, #20
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bc80      	pop	{r7}
 80030be:	4770      	bx	lr

080030c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6892      	ldr	r2, [r2, #8]
 80030d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	6852      	ldr	r2, [r2, #4]
 80030e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d103      	bne.n	80030f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	1e5a      	subs	r2, r3, #1
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3714      	adds	r7, #20
 800310c:	46bd      	mov	sp, r7
 800310e:	bc80      	pop	{r7}
 8003110:	4770      	bx	lr
	...

08003114 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d10a      	bne.n	800313e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800312c:	f383 8811 	msr	BASEPRI, r3
 8003130:	f3bf 8f6f 	isb	sy
 8003134:	f3bf 8f4f 	dsb	sy
 8003138:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800313a:	bf00      	nop
 800313c:	e7fe      	b.n	800313c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800313e:	f002 f915 	bl	800536c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314a:	68f9      	ldr	r1, [r7, #12]
 800314c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800314e:	fb01 f303 	mul.w	r3, r1, r3
 8003152:	441a      	add	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316e:	3b01      	subs	r3, #1
 8003170:	68f9      	ldr	r1, [r7, #12]
 8003172:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003174:	fb01 f303 	mul.w	r3, r1, r3
 8003178:	441a      	add	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	22ff      	movs	r2, #255	; 0xff
 8003182:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	22ff      	movs	r2, #255	; 0xff
 800318a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d114      	bne.n	80031be <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d01a      	beq.n	80031d2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	3310      	adds	r3, #16
 80031a0:	4618      	mov	r0, r3
 80031a2:	f001 f9d9 	bl	8004558 <xTaskRemoveFromEventList>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d012      	beq.n	80031d2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80031ac:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <xQueueGenericReset+0xcc>)
 80031ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	f3bf 8f4f 	dsb	sy
 80031b8:	f3bf 8f6f 	isb	sy
 80031bc:	e009      	b.n	80031d2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	3310      	adds	r3, #16
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff fef6 	bl	8002fb4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	3324      	adds	r3, #36	; 0x24
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff fef1 	bl	8002fb4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80031d2:	f002 f8fb 	bl	80053cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80031d6:	2301      	movs	r3, #1
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	e000ed04 	.word	0xe000ed04

080031e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b08e      	sub	sp, #56	; 0x38
 80031e8:	af02      	add	r7, sp, #8
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
 80031f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d10a      	bne.n	800320e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80031f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fc:	f383 8811 	msr	BASEPRI, r3
 8003200:	f3bf 8f6f 	isb	sy
 8003204:	f3bf 8f4f 	dsb	sy
 8003208:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800320a:	bf00      	nop
 800320c:	e7fe      	b.n	800320c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10a      	bne.n	800322a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003218:	f383 8811 	msr	BASEPRI, r3
 800321c:	f3bf 8f6f 	isb	sy
 8003220:	f3bf 8f4f 	dsb	sy
 8003224:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003226:	bf00      	nop
 8003228:	e7fe      	b.n	8003228 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d002      	beq.n	8003236 <xQueueGenericCreateStatic+0x52>
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <xQueueGenericCreateStatic+0x56>
 8003236:	2301      	movs	r3, #1
 8003238:	e000      	b.n	800323c <xQueueGenericCreateStatic+0x58>
 800323a:	2300      	movs	r3, #0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10a      	bne.n	8003256 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003244:	f383 8811 	msr	BASEPRI, r3
 8003248:	f3bf 8f6f 	isb	sy
 800324c:	f3bf 8f4f 	dsb	sy
 8003250:	623b      	str	r3, [r7, #32]
}
 8003252:	bf00      	nop
 8003254:	e7fe      	b.n	8003254 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d102      	bne.n	8003262 <xQueueGenericCreateStatic+0x7e>
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <xQueueGenericCreateStatic+0x82>
 8003262:	2301      	movs	r3, #1
 8003264:	e000      	b.n	8003268 <xQueueGenericCreateStatic+0x84>
 8003266:	2300      	movs	r3, #0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10a      	bne.n	8003282 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800326c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003270:	f383 8811 	msr	BASEPRI, r3
 8003274:	f3bf 8f6f 	isb	sy
 8003278:	f3bf 8f4f 	dsb	sy
 800327c:	61fb      	str	r3, [r7, #28]
}
 800327e:	bf00      	nop
 8003280:	e7fe      	b.n	8003280 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003282:	2350      	movs	r3, #80	; 0x50
 8003284:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2b50      	cmp	r3, #80	; 0x50
 800328a:	d00a      	beq.n	80032a2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800328c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003290:	f383 8811 	msr	BASEPRI, r3
 8003294:	f3bf 8f6f 	isb	sy
 8003298:	f3bf 8f4f 	dsb	sy
 800329c:	61bb      	str	r3, [r7, #24]
}
 800329e:	bf00      	nop
 80032a0:	e7fe      	b.n	80032a0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80032a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00d      	beq.n	80032c8 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80032ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80032b4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80032b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	4613      	mov	r3, r2
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	68b9      	ldr	r1, [r7, #8]
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 f843 	bl	800334e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80032c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3730      	adds	r7, #48	; 0x30
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b08a      	sub	sp, #40	; 0x28
 80032d6:	af02      	add	r7, sp, #8
 80032d8:	60f8      	str	r0, [r7, #12]
 80032da:	60b9      	str	r1, [r7, #8]
 80032dc:	4613      	mov	r3, r2
 80032de:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10a      	bne.n	80032fc <xQueueGenericCreate+0x2a>
	__asm volatile
 80032e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ea:	f383 8811 	msr	BASEPRI, r3
 80032ee:	f3bf 8f6f 	isb	sy
 80032f2:	f3bf 8f4f 	dsb	sy
 80032f6:	613b      	str	r3, [r7, #16]
}
 80032f8:	bf00      	nop
 80032fa:	e7fe      	b.n	80032fa <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d102      	bne.n	8003308 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003302:	2300      	movs	r3, #0
 8003304:	61fb      	str	r3, [r7, #28]
 8003306:	e004      	b.n	8003312 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	fb02 f303 	mul.w	r3, r2, r3
 8003310:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	3350      	adds	r3, #80	; 0x50
 8003316:	4618      	mov	r0, r3
 8003318:	f002 f928 	bl	800556c <pvPortMalloc>
 800331c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00f      	beq.n	8003344 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	3350      	adds	r3, #80	; 0x50
 8003328:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003332:	79fa      	ldrb	r2, [r7, #7]
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	4613      	mov	r3, r2
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	68b9      	ldr	r1, [r7, #8]
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f000 f805 	bl	800334e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003344:	69bb      	ldr	r3, [r7, #24]
	}
 8003346:	4618      	mov	r0, r3
 8003348:	3720      	adds	r7, #32
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b084      	sub	sp, #16
 8003352:	af00      	add	r7, sp, #0
 8003354:	60f8      	str	r0, [r7, #12]
 8003356:	60b9      	str	r1, [r7, #8]
 8003358:	607a      	str	r2, [r7, #4]
 800335a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d103      	bne.n	800336a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	e002      	b.n	8003370 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	68ba      	ldr	r2, [r7, #8]
 800337a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800337c:	2101      	movs	r1, #1
 800337e:	69b8      	ldr	r0, [r7, #24]
 8003380:	f7ff fec8 	bl	8003114 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	78fa      	ldrb	r2, [r7, #3]
 8003388:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800338c:	bf00      	nop
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b08e      	sub	sp, #56	; 0x38
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
 80033a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80033a2:	2300      	movs	r3, #0
 80033a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80033aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10a      	bne.n	80033c6 <xQueueGenericSend+0x32>
	__asm volatile
 80033b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b4:	f383 8811 	msr	BASEPRI, r3
 80033b8:	f3bf 8f6f 	isb	sy
 80033bc:	f3bf 8f4f 	dsb	sy
 80033c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80033c2:	bf00      	nop
 80033c4:	e7fe      	b.n	80033c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d103      	bne.n	80033d4 <xQueueGenericSend+0x40>
 80033cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <xQueueGenericSend+0x44>
 80033d4:	2301      	movs	r3, #1
 80033d6:	e000      	b.n	80033da <xQueueGenericSend+0x46>
 80033d8:	2300      	movs	r3, #0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10a      	bne.n	80033f4 <xQueueGenericSend+0x60>
	__asm volatile
 80033de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e2:	f383 8811 	msr	BASEPRI, r3
 80033e6:	f3bf 8f6f 	isb	sy
 80033ea:	f3bf 8f4f 	dsb	sy
 80033ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80033f0:	bf00      	nop
 80033f2:	e7fe      	b.n	80033f2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d103      	bne.n	8003402 <xQueueGenericSend+0x6e>
 80033fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d101      	bne.n	8003406 <xQueueGenericSend+0x72>
 8003402:	2301      	movs	r3, #1
 8003404:	e000      	b.n	8003408 <xQueueGenericSend+0x74>
 8003406:	2300      	movs	r3, #0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10a      	bne.n	8003422 <xQueueGenericSend+0x8e>
	__asm volatile
 800340c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003410:	f383 8811 	msr	BASEPRI, r3
 8003414:	f3bf 8f6f 	isb	sy
 8003418:	f3bf 8f4f 	dsb	sy
 800341c:	623b      	str	r3, [r7, #32]
}
 800341e:	bf00      	nop
 8003420:	e7fe      	b.n	8003420 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003422:	f001 fa5f 	bl	80048e4 <xTaskGetSchedulerState>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d102      	bne.n	8003432 <xQueueGenericSend+0x9e>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <xQueueGenericSend+0xa2>
 8003432:	2301      	movs	r3, #1
 8003434:	e000      	b.n	8003438 <xQueueGenericSend+0xa4>
 8003436:	2300      	movs	r3, #0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10a      	bne.n	8003452 <xQueueGenericSend+0xbe>
	__asm volatile
 800343c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003440:	f383 8811 	msr	BASEPRI, r3
 8003444:	f3bf 8f6f 	isb	sy
 8003448:	f3bf 8f4f 	dsb	sy
 800344c:	61fb      	str	r3, [r7, #28]
}
 800344e:	bf00      	nop
 8003450:	e7fe      	b.n	8003450 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003452:	f001 ff8b 	bl	800536c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003458:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800345a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800345e:	429a      	cmp	r2, r3
 8003460:	d302      	bcc.n	8003468 <xQueueGenericSend+0xd4>
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	2b02      	cmp	r3, #2
 8003466:	d129      	bne.n	80034bc <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	68b9      	ldr	r1, [r7, #8]
 800346c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800346e:	f000 fa87 	bl	8003980 <prvCopyDataToQueue>
 8003472:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	2b00      	cmp	r3, #0
 800347a:	d010      	beq.n	800349e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800347c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347e:	3324      	adds	r3, #36	; 0x24
 8003480:	4618      	mov	r0, r3
 8003482:	f001 f869 	bl	8004558 <xTaskRemoveFromEventList>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d013      	beq.n	80034b4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800348c:	4b3f      	ldr	r3, [pc, #252]	; (800358c <xQueueGenericSend+0x1f8>)
 800348e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	f3bf 8f4f 	dsb	sy
 8003498:	f3bf 8f6f 	isb	sy
 800349c:	e00a      	b.n	80034b4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800349e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d007      	beq.n	80034b4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80034a4:	4b39      	ldr	r3, [pc, #228]	; (800358c <xQueueGenericSend+0x1f8>)
 80034a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	f3bf 8f4f 	dsb	sy
 80034b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80034b4:	f001 ff8a 	bl	80053cc <vPortExitCritical>
				return pdPASS;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e063      	b.n	8003584 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d103      	bne.n	80034ca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80034c2:	f001 ff83 	bl	80053cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80034c6:	2300      	movs	r3, #0
 80034c8:	e05c      	b.n	8003584 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80034ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d106      	bne.n	80034de <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80034d0:	f107 0314 	add.w	r3, r7, #20
 80034d4:	4618      	mov	r0, r3
 80034d6:	f001 f8a3 	bl	8004620 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80034da:	2301      	movs	r3, #1
 80034dc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80034de:	f001 ff75 	bl	80053cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80034e2:	f000 fe0d 	bl	8004100 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034e6:	f001 ff41 	bl	800536c <vPortEnterCritical>
 80034ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034f0:	b25b      	sxtb	r3, r3
 80034f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f6:	d103      	bne.n	8003500 <xQueueGenericSend+0x16c>
 80034f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003502:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003506:	b25b      	sxtb	r3, r3
 8003508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800350c:	d103      	bne.n	8003516 <xQueueGenericSend+0x182>
 800350e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003510:	2200      	movs	r2, #0
 8003512:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003516:	f001 ff59 	bl	80053cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800351a:	1d3a      	adds	r2, r7, #4
 800351c:	f107 0314 	add.w	r3, r7, #20
 8003520:	4611      	mov	r1, r2
 8003522:	4618      	mov	r0, r3
 8003524:	f001 f892 	bl	800464c <xTaskCheckForTimeOut>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d124      	bne.n	8003578 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800352e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003530:	f000 fb1e 	bl	8003b70 <prvIsQueueFull>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d018      	beq.n	800356c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800353a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800353c:	3310      	adds	r3, #16
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	4611      	mov	r1, r2
 8003542:	4618      	mov	r0, r3
 8003544:	f000 ffb8 	bl	80044b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003548:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800354a:	f000 faa9 	bl	8003aa0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800354e:	f000 fde5 	bl	800411c <xTaskResumeAll>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	f47f af7c 	bne.w	8003452 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800355a:	4b0c      	ldr	r3, [pc, #48]	; (800358c <xQueueGenericSend+0x1f8>)
 800355c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003560:	601a      	str	r2, [r3, #0]
 8003562:	f3bf 8f4f 	dsb	sy
 8003566:	f3bf 8f6f 	isb	sy
 800356a:	e772      	b.n	8003452 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800356c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800356e:	f000 fa97 	bl	8003aa0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003572:	f000 fdd3 	bl	800411c <xTaskResumeAll>
 8003576:	e76c      	b.n	8003452 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003578:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800357a:	f000 fa91 	bl	8003aa0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800357e:	f000 fdcd 	bl	800411c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003582:	2300      	movs	r3, #0
		}
	}
}
 8003584:	4618      	mov	r0, r3
 8003586:	3738      	adds	r7, #56	; 0x38
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	e000ed04 	.word	0xe000ed04

08003590 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b08e      	sub	sp, #56	; 0x38
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
 800359c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80035a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10a      	bne.n	80035be <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80035a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ac:	f383 8811 	msr	BASEPRI, r3
 80035b0:	f3bf 8f6f 	isb	sy
 80035b4:	f3bf 8f4f 	dsb	sy
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80035ba:	bf00      	nop
 80035bc:	e7fe      	b.n	80035bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d103      	bne.n	80035cc <xQueueGenericSendFromISR+0x3c>
 80035c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d101      	bne.n	80035d0 <xQueueGenericSendFromISR+0x40>
 80035cc:	2301      	movs	r3, #1
 80035ce:	e000      	b.n	80035d2 <xQueueGenericSendFromISR+0x42>
 80035d0:	2300      	movs	r3, #0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10a      	bne.n	80035ec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80035d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035da:	f383 8811 	msr	BASEPRI, r3
 80035de:	f3bf 8f6f 	isb	sy
 80035e2:	f3bf 8f4f 	dsb	sy
 80035e6:	623b      	str	r3, [r7, #32]
}
 80035e8:	bf00      	nop
 80035ea:	e7fe      	b.n	80035ea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d103      	bne.n	80035fa <xQueueGenericSendFromISR+0x6a>
 80035f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d101      	bne.n	80035fe <xQueueGenericSendFromISR+0x6e>
 80035fa:	2301      	movs	r3, #1
 80035fc:	e000      	b.n	8003600 <xQueueGenericSendFromISR+0x70>
 80035fe:	2300      	movs	r3, #0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10a      	bne.n	800361a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003608:	f383 8811 	msr	BASEPRI, r3
 800360c:	f3bf 8f6f 	isb	sy
 8003610:	f3bf 8f4f 	dsb	sy
 8003614:	61fb      	str	r3, [r7, #28]
}
 8003616:	bf00      	nop
 8003618:	e7fe      	b.n	8003618 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800361a:	f001 ff69 	bl	80054f0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800361e:	f3ef 8211 	mrs	r2, BASEPRI
 8003622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003626:	f383 8811 	msr	BASEPRI, r3
 800362a:	f3bf 8f6f 	isb	sy
 800362e:	f3bf 8f4f 	dsb	sy
 8003632:	61ba      	str	r2, [r7, #24]
 8003634:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003636:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003638:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800363a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800363c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800363e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003642:	429a      	cmp	r2, r3
 8003644:	d302      	bcc.n	800364c <xQueueGenericSendFromISR+0xbc>
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	2b02      	cmp	r3, #2
 800364a:	d12c      	bne.n	80036a6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800364c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	68b9      	ldr	r1, [r7, #8]
 800365a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800365c:	f000 f990 	bl	8003980 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003660:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003668:	d112      	bne.n	8003690 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800366a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366e:	2b00      	cmp	r3, #0
 8003670:	d016      	beq.n	80036a0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003674:	3324      	adds	r3, #36	; 0x24
 8003676:	4618      	mov	r0, r3
 8003678:	f000 ff6e 	bl	8004558 <xTaskRemoveFromEventList>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00e      	beq.n	80036a0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00b      	beq.n	80036a0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	e007      	b.n	80036a0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003690:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003694:	3301      	adds	r3, #1
 8003696:	b2db      	uxtb	r3, r3
 8003698:	b25a      	sxtb	r2, r3
 800369a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80036a0:	2301      	movs	r3, #1
 80036a2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80036a4:	e001      	b.n	80036aa <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80036a6:	2300      	movs	r3, #0
 80036a8:	637b      	str	r3, [r7, #52]	; 0x34
 80036aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ac:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80036b4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80036b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3738      	adds	r7, #56	; 0x38
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b08c      	sub	sp, #48	; 0x30
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80036cc:	2300      	movs	r3, #0
 80036ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80036d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10a      	bne.n	80036f0 <xQueueReceive+0x30>
	__asm volatile
 80036da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036de:	f383 8811 	msr	BASEPRI, r3
 80036e2:	f3bf 8f6f 	isb	sy
 80036e6:	f3bf 8f4f 	dsb	sy
 80036ea:	623b      	str	r3, [r7, #32]
}
 80036ec:	bf00      	nop
 80036ee:	e7fe      	b.n	80036ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d103      	bne.n	80036fe <xQueueReceive+0x3e>
 80036f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <xQueueReceive+0x42>
 80036fe:	2301      	movs	r3, #1
 8003700:	e000      	b.n	8003704 <xQueueReceive+0x44>
 8003702:	2300      	movs	r3, #0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10a      	bne.n	800371e <xQueueReceive+0x5e>
	__asm volatile
 8003708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800370c:	f383 8811 	msr	BASEPRI, r3
 8003710:	f3bf 8f6f 	isb	sy
 8003714:	f3bf 8f4f 	dsb	sy
 8003718:	61fb      	str	r3, [r7, #28]
}
 800371a:	bf00      	nop
 800371c:	e7fe      	b.n	800371c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800371e:	f001 f8e1 	bl	80048e4 <xTaskGetSchedulerState>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d102      	bne.n	800372e <xQueueReceive+0x6e>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <xQueueReceive+0x72>
 800372e:	2301      	movs	r3, #1
 8003730:	e000      	b.n	8003734 <xQueueReceive+0x74>
 8003732:	2300      	movs	r3, #0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10a      	bne.n	800374e <xQueueReceive+0x8e>
	__asm volatile
 8003738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373c:	f383 8811 	msr	BASEPRI, r3
 8003740:	f3bf 8f6f 	isb	sy
 8003744:	f3bf 8f4f 	dsb	sy
 8003748:	61bb      	str	r3, [r7, #24]
}
 800374a:	bf00      	nop
 800374c:	e7fe      	b.n	800374c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800374e:	f001 fe0d 	bl	800536c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003756:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	2b00      	cmp	r3, #0
 800375c:	d01f      	beq.n	800379e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800375e:	68b9      	ldr	r1, [r7, #8]
 8003760:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003762:	f000 f977 	bl	8003a54 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	1e5a      	subs	r2, r3, #1
 800376a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800376e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00f      	beq.n	8003796 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003778:	3310      	adds	r3, #16
 800377a:	4618      	mov	r0, r3
 800377c:	f000 feec 	bl	8004558 <xTaskRemoveFromEventList>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d007      	beq.n	8003796 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003786:	4b3d      	ldr	r3, [pc, #244]	; (800387c <xQueueReceive+0x1bc>)
 8003788:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	f3bf 8f4f 	dsb	sy
 8003792:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003796:	f001 fe19 	bl	80053cc <vPortExitCritical>
				return pdPASS;
 800379a:	2301      	movs	r3, #1
 800379c:	e069      	b.n	8003872 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d103      	bne.n	80037ac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80037a4:	f001 fe12 	bl	80053cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80037a8:	2300      	movs	r3, #0
 80037aa:	e062      	b.n	8003872 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80037ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d106      	bne.n	80037c0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80037b2:	f107 0310 	add.w	r3, r7, #16
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 ff32 	bl	8004620 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80037bc:	2301      	movs	r3, #1
 80037be:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80037c0:	f001 fe04 	bl	80053cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80037c4:	f000 fc9c 	bl	8004100 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80037c8:	f001 fdd0 	bl	800536c <vPortEnterCritical>
 80037cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037d2:	b25b      	sxtb	r3, r3
 80037d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d8:	d103      	bne.n	80037e2 <xQueueReceive+0x122>
 80037da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037e8:	b25b      	sxtb	r3, r3
 80037ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ee:	d103      	bne.n	80037f8 <xQueueReceive+0x138>
 80037f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037f8:	f001 fde8 	bl	80053cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037fc:	1d3a      	adds	r2, r7, #4
 80037fe:	f107 0310 	add.w	r3, r7, #16
 8003802:	4611      	mov	r1, r2
 8003804:	4618      	mov	r0, r3
 8003806:	f000 ff21 	bl	800464c <xTaskCheckForTimeOut>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d123      	bne.n	8003858 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003810:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003812:	f000 f997 	bl	8003b44 <prvIsQueueEmpty>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d017      	beq.n	800384c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800381c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381e:	3324      	adds	r3, #36	; 0x24
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	4611      	mov	r1, r2
 8003824:	4618      	mov	r0, r3
 8003826:	f000 fe47 	bl	80044b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800382a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800382c:	f000 f938 	bl	8003aa0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003830:	f000 fc74 	bl	800411c <xTaskResumeAll>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d189      	bne.n	800374e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800383a:	4b10      	ldr	r3, [pc, #64]	; (800387c <xQueueReceive+0x1bc>)
 800383c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	f3bf 8f4f 	dsb	sy
 8003846:	f3bf 8f6f 	isb	sy
 800384a:	e780      	b.n	800374e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800384c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800384e:	f000 f927 	bl	8003aa0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003852:	f000 fc63 	bl	800411c <xTaskResumeAll>
 8003856:	e77a      	b.n	800374e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800385a:	f000 f921 	bl	8003aa0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800385e:	f000 fc5d 	bl	800411c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003862:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003864:	f000 f96e 	bl	8003b44 <prvIsQueueEmpty>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	f43f af6f 	beq.w	800374e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003870:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003872:	4618      	mov	r0, r3
 8003874:	3730      	adds	r7, #48	; 0x30
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	e000ed04 	.word	0xe000ed04

08003880 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b08e      	sub	sp, #56	; 0x38
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10a      	bne.n	80038ac <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800389a:	f383 8811 	msr	BASEPRI, r3
 800389e:	f3bf 8f6f 	isb	sy
 80038a2:	f3bf 8f4f 	dsb	sy
 80038a6:	623b      	str	r3, [r7, #32]
}
 80038a8:	bf00      	nop
 80038aa:	e7fe      	b.n	80038aa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d103      	bne.n	80038ba <xQueueReceiveFromISR+0x3a>
 80038b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <xQueueReceiveFromISR+0x3e>
 80038ba:	2301      	movs	r3, #1
 80038bc:	e000      	b.n	80038c0 <xQueueReceiveFromISR+0x40>
 80038be:	2300      	movs	r3, #0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10a      	bne.n	80038da <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80038c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c8:	f383 8811 	msr	BASEPRI, r3
 80038cc:	f3bf 8f6f 	isb	sy
 80038d0:	f3bf 8f4f 	dsb	sy
 80038d4:	61fb      	str	r3, [r7, #28]
}
 80038d6:	bf00      	nop
 80038d8:	e7fe      	b.n	80038d8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80038da:	f001 fe09 	bl	80054f0 <vPortValidateInterruptPriority>
	__asm volatile
 80038de:	f3ef 8211 	mrs	r2, BASEPRI
 80038e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e6:	f383 8811 	msr	BASEPRI, r3
 80038ea:	f3bf 8f6f 	isb	sy
 80038ee:	f3bf 8f4f 	dsb	sy
 80038f2:	61ba      	str	r2, [r7, #24]
 80038f4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80038f6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80038f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003902:	2b00      	cmp	r3, #0
 8003904:	d02f      	beq.n	8003966 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003908:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800390c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003910:	68b9      	ldr	r1, [r7, #8]
 8003912:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003914:	f000 f89e 	bl	8003a54 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391a:	1e5a      	subs	r2, r3, #1
 800391c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003920:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003928:	d112      	bne.n	8003950 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800392a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392c:	691b      	ldr	r3, [r3, #16]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d016      	beq.n	8003960 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003934:	3310      	adds	r3, #16
 8003936:	4618      	mov	r0, r3
 8003938:	f000 fe0e 	bl	8004558 <xTaskRemoveFromEventList>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00e      	beq.n	8003960 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00b      	beq.n	8003960 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	e007      	b.n	8003960 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003950:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003954:	3301      	adds	r3, #1
 8003956:	b2db      	uxtb	r3, r3
 8003958:	b25a      	sxtb	r2, r3
 800395a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003960:	2301      	movs	r3, #1
 8003962:	637b      	str	r3, [r7, #52]	; 0x34
 8003964:	e001      	b.n	800396a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8003966:	2300      	movs	r3, #0
 8003968:	637b      	str	r3, [r7, #52]	; 0x34
 800396a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	f383 8811 	msr	BASEPRI, r3
}
 8003974:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003978:	4618      	mov	r0, r3
 800397a:	3738      	adds	r7, #56	; 0x38
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800398c:	2300      	movs	r3, #0
 800398e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003994:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10d      	bne.n	80039ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d14d      	bne.n	8003a42 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f000 ffb8 	bl	8004920 <xTaskPriorityDisinherit>
 80039b0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	605a      	str	r2, [r3, #4]
 80039b8:	e043      	b.n	8003a42 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d119      	bne.n	80039f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6898      	ldr	r0, [r3, #8]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c8:	461a      	mov	r2, r3
 80039ca:	68b9      	ldr	r1, [r7, #8]
 80039cc:	f002 f82a 	bl	8005a24 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	441a      	add	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	689a      	ldr	r2, [r3, #8]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d32b      	bcc.n	8003a42 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	609a      	str	r2, [r3, #8]
 80039f2:	e026      	b.n	8003a42 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	68d8      	ldr	r0, [r3, #12]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fc:	461a      	mov	r2, r3
 80039fe:	68b9      	ldr	r1, [r7, #8]
 8003a00:	f002 f810 	bl	8005a24 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	68da      	ldr	r2, [r3, #12]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0c:	425b      	negs	r3, r3
 8003a0e:	441a      	add	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	68da      	ldr	r2, [r3, #12]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d207      	bcs.n	8003a30 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a28:	425b      	negs	r3, r3
 8003a2a:	441a      	add	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d105      	bne.n	8003a42 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d002      	beq.n	8003a42 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1c5a      	adds	r2, r3, #1
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003a4a:	697b      	ldr	r3, [r7, #20]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3718      	adds	r7, #24
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d018      	beq.n	8003a98 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68da      	ldr	r2, [r3, #12]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	441a      	add	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68da      	ldr	r2, [r3, #12]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d303      	bcc.n	8003a88 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68d9      	ldr	r1, [r3, #12]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a90:	461a      	mov	r2, r3
 8003a92:	6838      	ldr	r0, [r7, #0]
 8003a94:	f001 ffc6 	bl	8005a24 <memcpy>
	}
}
 8003a98:	bf00      	nop
 8003a9a:	3708      	adds	r7, #8
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003aa8:	f001 fc60 	bl	800536c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ab2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ab4:	e011      	b.n	8003ada <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d012      	beq.n	8003ae4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	3324      	adds	r3, #36	; 0x24
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 fd48 	bl	8004558 <xTaskRemoveFromEventList>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003ace:	f000 fe1f 	bl	8004710 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003ad2:	7bfb      	ldrb	r3, [r7, #15]
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	dce9      	bgt.n	8003ab6 <prvUnlockQueue+0x16>
 8003ae2:	e000      	b.n	8003ae6 <prvUnlockQueue+0x46>
					break;
 8003ae4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	22ff      	movs	r2, #255	; 0xff
 8003aea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003aee:	f001 fc6d 	bl	80053cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003af2:	f001 fc3b 	bl	800536c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003afc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003afe:	e011      	b.n	8003b24 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d012      	beq.n	8003b2e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	3310      	adds	r3, #16
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 fd23 	bl	8004558 <xTaskRemoveFromEventList>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003b18:	f000 fdfa 	bl	8004710 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003b1c:	7bbb      	ldrb	r3, [r7, #14]
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003b24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	dce9      	bgt.n	8003b00 <prvUnlockQueue+0x60>
 8003b2c:	e000      	b.n	8003b30 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003b2e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	22ff      	movs	r2, #255	; 0xff
 8003b34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003b38:	f001 fc48 	bl	80053cc <vPortExitCritical>
}
 8003b3c:	bf00      	nop
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b4c:	f001 fc0e 	bl	800536c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d102      	bne.n	8003b5e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	60fb      	str	r3, [r7, #12]
 8003b5c:	e001      	b.n	8003b62 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b62:	f001 fc33 	bl	80053cc <vPortExitCritical>

	return xReturn;
 8003b66:	68fb      	ldr	r3, [r7, #12]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b78:	f001 fbf8 	bl	800536c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d102      	bne.n	8003b8e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	60fb      	str	r3, [r7, #12]
 8003b8c:	e001      	b.n	8003b92 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b92:	f001 fc1b 	bl	80053cc <vPortExitCritical>

	return xReturn;
 8003b96:	68fb      	ldr	r3, [r7, #12]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003baa:	2300      	movs	r3, #0
 8003bac:	60fb      	str	r3, [r7, #12]
 8003bae:	e014      	b.n	8003bda <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003bb0:	4a0e      	ldr	r2, [pc, #56]	; (8003bec <vQueueAddToRegistry+0x4c>)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10b      	bne.n	8003bd4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003bbc:	490b      	ldr	r1, [pc, #44]	; (8003bec <vQueueAddToRegistry+0x4c>)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003bc6:	4a09      	ldr	r2, [pc, #36]	; (8003bec <vQueueAddToRegistry+0x4c>)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	4413      	add	r3, r2
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003bd2:	e006      	b.n	8003be2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	60fb      	str	r3, [r7, #12]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2b07      	cmp	r3, #7
 8003bde:	d9e7      	bls.n	8003bb0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003be0:	bf00      	nop
 8003be2:	bf00      	nop
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bc80      	pop	{r7}
 8003bea:	4770      	bx	lr
 8003bec:	20000a44 	.word	0x20000a44

08003bf0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003c00:	f001 fbb4 	bl	800536c <vPortEnterCritical>
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c0a:	b25b      	sxtb	r3, r3
 8003c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c10:	d103      	bne.n	8003c1a <vQueueWaitForMessageRestricted+0x2a>
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c20:	b25b      	sxtb	r3, r3
 8003c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c26:	d103      	bne.n	8003c30 <vQueueWaitForMessageRestricted+0x40>
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c30:	f001 fbcc 	bl	80053cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d106      	bne.n	8003c4a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	3324      	adds	r3, #36	; 0x24
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	68b9      	ldr	r1, [r7, #8]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 fc5b 	bl	8004500 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003c4a:	6978      	ldr	r0, [r7, #20]
 8003c4c:	f7ff ff28 	bl	8003aa0 <prvUnlockQueue>
	}
 8003c50:	bf00      	nop
 8003c52:	3718      	adds	r7, #24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08e      	sub	sp, #56	; 0x38
 8003c5c:	af04      	add	r7, sp, #16
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
 8003c64:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10a      	bne.n	8003c82 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c70:	f383 8811 	msr	BASEPRI, r3
 8003c74:	f3bf 8f6f 	isb	sy
 8003c78:	f3bf 8f4f 	dsb	sy
 8003c7c:	623b      	str	r3, [r7, #32]
}
 8003c7e:	bf00      	nop
 8003c80:	e7fe      	b.n	8003c80 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10a      	bne.n	8003c9e <xTaskCreateStatic+0x46>
	__asm volatile
 8003c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8c:	f383 8811 	msr	BASEPRI, r3
 8003c90:	f3bf 8f6f 	isb	sy
 8003c94:	f3bf 8f4f 	dsb	sy
 8003c98:	61fb      	str	r3, [r7, #28]
}
 8003c9a:	bf00      	nop
 8003c9c:	e7fe      	b.n	8003c9c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003c9e:	23b8      	movs	r3, #184	; 0xb8
 8003ca0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	2bb8      	cmp	r3, #184	; 0xb8
 8003ca6:	d00a      	beq.n	8003cbe <xTaskCreateStatic+0x66>
	__asm volatile
 8003ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cac:	f383 8811 	msr	BASEPRI, r3
 8003cb0:	f3bf 8f6f 	isb	sy
 8003cb4:	f3bf 8f4f 	dsb	sy
 8003cb8:	61bb      	str	r3, [r7, #24]
}
 8003cba:	bf00      	nop
 8003cbc:	e7fe      	b.n	8003cbc <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d01e      	beq.n	8003d02 <xTaskCreateStatic+0xaa>
 8003cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d01b      	beq.n	8003d02 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ccc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cd2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003cdc:	2300      	movs	r3, #0
 8003cde:	9303      	str	r3, [sp, #12]
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce2:	9302      	str	r3, [sp, #8]
 8003ce4:	f107 0314 	add.w	r3, r7, #20
 8003ce8:	9301      	str	r3, [sp, #4]
 8003cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	68b9      	ldr	r1, [r7, #8]
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f000 f851 	bl	8003d9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003cfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003cfc:	f000 f8ec 	bl	8003ed8 <prvAddNewTaskToReadyList>
 8003d00:	e001      	b.n	8003d06 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003d02:	2300      	movs	r3, #0
 8003d04:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003d06:	697b      	ldr	r3, [r7, #20]
	}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3728      	adds	r7, #40	; 0x28
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b08c      	sub	sp, #48	; 0x30
 8003d14:	af04      	add	r7, sp, #16
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	603b      	str	r3, [r7, #0]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d20:	88fb      	ldrh	r3, [r7, #6]
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	4618      	mov	r0, r3
 8003d26:	f001 fc21 	bl	800556c <pvPortMalloc>
 8003d2a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00e      	beq.n	8003d50 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003d32:	20b8      	movs	r0, #184	; 0xb8
 8003d34:	f001 fc1a 	bl	800556c <pvPortMalloc>
 8003d38:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d003      	beq.n	8003d48 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	697a      	ldr	r2, [r7, #20]
 8003d44:	631a      	str	r2, [r3, #48]	; 0x30
 8003d46:	e005      	b.n	8003d54 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003d48:	6978      	ldr	r0, [r7, #20]
 8003d4a:	f001 fcd3 	bl	80056f4 <vPortFree>
 8003d4e:	e001      	b.n	8003d54 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003d50:	2300      	movs	r3, #0
 8003d52:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d017      	beq.n	8003d8a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d62:	88fa      	ldrh	r2, [r7, #6]
 8003d64:	2300      	movs	r3, #0
 8003d66:	9303      	str	r3, [sp, #12]
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	9302      	str	r3, [sp, #8]
 8003d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6e:	9301      	str	r3, [sp, #4]
 8003d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	68b9      	ldr	r1, [r7, #8]
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f000 f80f 	bl	8003d9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d7e:	69f8      	ldr	r0, [r7, #28]
 8003d80:	f000 f8aa 	bl	8003ed8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003d84:	2301      	movs	r3, #1
 8003d86:	61bb      	str	r3, [r7, #24]
 8003d88:	e002      	b.n	8003d90 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d8e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003d90:	69bb      	ldr	r3, [r7, #24]
	}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3720      	adds	r7, #32
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
	...

08003d9c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b088      	sub	sp, #32
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
 8003da8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	461a      	mov	r2, r3
 8003db4:	21a5      	movs	r1, #165	; 0xa5
 8003db6:	f001 fdb1 	bl	800591c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4413      	add	r3, r2
 8003dca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	f023 0307 	bic.w	r3, r3, #7
 8003dd2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00a      	beq.n	8003df4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de2:	f383 8811 	msr	BASEPRI, r3
 8003de6:	f3bf 8f6f 	isb	sy
 8003dea:	f3bf 8f4f 	dsb	sy
 8003dee:	617b      	str	r3, [r7, #20]
}
 8003df0:	bf00      	nop
 8003df2:	e7fe      	b.n	8003df2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003df4:	2300      	movs	r3, #0
 8003df6:	61fb      	str	r3, [r7, #28]
 8003df8:	e012      	b.n	8003e20 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	4413      	add	r3, r2
 8003e00:	7819      	ldrb	r1, [r3, #0]
 8003e02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	4413      	add	r3, r2
 8003e08:	3334      	adds	r3, #52	; 0x34
 8003e0a:	460a      	mov	r2, r1
 8003e0c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	4413      	add	r3, r2
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d006      	beq.n	8003e28 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	61fb      	str	r3, [r7, #28]
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	2b1f      	cmp	r3, #31
 8003e24:	d9e9      	bls.n	8003dfa <prvInitialiseNewTask+0x5e>
 8003e26:	e000      	b.n	8003e2a <prvInitialiseNewTask+0x8e>
		{
			break;
 8003e28:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e34:	2b37      	cmp	r3, #55	; 0x37
 8003e36:	d901      	bls.n	8003e3c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003e38:	2337      	movs	r3, #55	; 0x37
 8003e3a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e40:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e46:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8003e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e50:	3304      	adds	r3, #4
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7ff f8cd 	bl	8002ff2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5a:	3318      	adds	r3, #24
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f7ff f8c8 	bl	8002ff2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e66:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e70:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e76:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8a:	3364      	adds	r3, #100	; 0x64
 8003e8c:	224c      	movs	r2, #76	; 0x4c
 8003e8e:	2100      	movs	r1, #0
 8003e90:	4618      	mov	r0, r3
 8003e92:	f001 fd43 	bl	800591c <memset>
 8003e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e98:	4a0c      	ldr	r2, [pc, #48]	; (8003ecc <prvInitialiseNewTask+0x130>)
 8003e9a:	669a      	str	r2, [r3, #104]	; 0x68
 8003e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9e:	4a0c      	ldr	r2, [pc, #48]	; (8003ed0 <prvInitialiseNewTask+0x134>)
 8003ea0:	66da      	str	r2, [r3, #108]	; 0x6c
 8003ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea4:	4a0b      	ldr	r2, [pc, #44]	; (8003ed4 <prvInitialiseNewTask+0x138>)
 8003ea6:	671a      	str	r2, [r3, #112]	; 0x70
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	68f9      	ldr	r1, [r7, #12]
 8003eac:	69b8      	ldr	r0, [r7, #24]
 8003eae:	f001 f96b 	bl	8005188 <pxPortInitialiseStack>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d002      	beq.n	8003ec4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ec2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ec4:	bf00      	nop
 8003ec6:	3720      	adds	r7, #32
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	200030d0 	.word	0x200030d0
 8003ed0:	20003138 	.word	0x20003138
 8003ed4:	200031a0 	.word	0x200031a0

08003ed8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ee0:	f001 fa44 	bl	800536c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003ee4:	4b2d      	ldr	r3, [pc, #180]	; (8003f9c <prvAddNewTaskToReadyList+0xc4>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	3301      	adds	r3, #1
 8003eea:	4a2c      	ldr	r2, [pc, #176]	; (8003f9c <prvAddNewTaskToReadyList+0xc4>)
 8003eec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003eee:	4b2c      	ldr	r3, [pc, #176]	; (8003fa0 <prvAddNewTaskToReadyList+0xc8>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d109      	bne.n	8003f0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003ef6:	4a2a      	ldr	r2, [pc, #168]	; (8003fa0 <prvAddNewTaskToReadyList+0xc8>)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003efc:	4b27      	ldr	r3, [pc, #156]	; (8003f9c <prvAddNewTaskToReadyList+0xc4>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d110      	bne.n	8003f26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003f04:	f000 fc28 	bl	8004758 <prvInitialiseTaskLists>
 8003f08:	e00d      	b.n	8003f26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003f0a:	4b26      	ldr	r3, [pc, #152]	; (8003fa4 <prvAddNewTaskToReadyList+0xcc>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d109      	bne.n	8003f26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003f12:	4b23      	ldr	r3, [pc, #140]	; (8003fa0 <prvAddNewTaskToReadyList+0xc8>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d802      	bhi.n	8003f26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003f20:	4a1f      	ldr	r2, [pc, #124]	; (8003fa0 <prvAddNewTaskToReadyList+0xc8>)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003f26:	4b20      	ldr	r3, [pc, #128]	; (8003fa8 <prvAddNewTaskToReadyList+0xd0>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	4a1e      	ldr	r2, [pc, #120]	; (8003fa8 <prvAddNewTaskToReadyList+0xd0>)
 8003f2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003f30:	4b1d      	ldr	r3, [pc, #116]	; (8003fa8 <prvAddNewTaskToReadyList+0xd0>)
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f3c:	4b1b      	ldr	r3, [pc, #108]	; (8003fac <prvAddNewTaskToReadyList+0xd4>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d903      	bls.n	8003f4c <prvAddNewTaskToReadyList+0x74>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f48:	4a18      	ldr	r2, [pc, #96]	; (8003fac <prvAddNewTaskToReadyList+0xd4>)
 8003f4a:	6013      	str	r3, [r2, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f50:	4613      	mov	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4413      	add	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4a15      	ldr	r2, [pc, #84]	; (8003fb0 <prvAddNewTaskToReadyList+0xd8>)
 8003f5a:	441a      	add	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3304      	adds	r3, #4
 8003f60:	4619      	mov	r1, r3
 8003f62:	4610      	mov	r0, r2
 8003f64:	f7ff f851 	bl	800300a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003f68:	f001 fa30 	bl	80053cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003f6c:	4b0d      	ldr	r3, [pc, #52]	; (8003fa4 <prvAddNewTaskToReadyList+0xcc>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00e      	beq.n	8003f92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f74:	4b0a      	ldr	r3, [pc, #40]	; (8003fa0 <prvAddNewTaskToReadyList+0xc8>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d207      	bcs.n	8003f92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003f82:	4b0c      	ldr	r3, [pc, #48]	; (8003fb4 <prvAddNewTaskToReadyList+0xdc>)
 8003f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	f3bf 8f4f 	dsb	sy
 8003f8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f92:	bf00      	nop
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	20000f58 	.word	0x20000f58
 8003fa0:	20000a84 	.word	0x20000a84
 8003fa4:	20000f64 	.word	0x20000f64
 8003fa8:	20000f74 	.word	0x20000f74
 8003fac:	20000f60 	.word	0x20000f60
 8003fb0:	20000a88 	.word	0x20000a88
 8003fb4:	e000ed04 	.word	0xe000ed04

08003fb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d017      	beq.n	8003ffa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003fca:	4b13      	ldr	r3, [pc, #76]	; (8004018 <vTaskDelay+0x60>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00a      	beq.n	8003fe8 <vTaskDelay+0x30>
	__asm volatile
 8003fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd6:	f383 8811 	msr	BASEPRI, r3
 8003fda:	f3bf 8f6f 	isb	sy
 8003fde:	f3bf 8f4f 	dsb	sy
 8003fe2:	60bb      	str	r3, [r7, #8]
}
 8003fe4:	bf00      	nop
 8003fe6:	e7fe      	b.n	8003fe6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003fe8:	f000 f88a 	bl	8004100 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003fec:	2100      	movs	r1, #0
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 fd64 	bl	8004abc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003ff4:	f000 f892 	bl	800411c <xTaskResumeAll>
 8003ff8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d107      	bne.n	8004010 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004000:	4b06      	ldr	r3, [pc, #24]	; (800401c <vTaskDelay+0x64>)
 8004002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	f3bf 8f4f 	dsb	sy
 800400c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004010:	bf00      	nop
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	20000f80 	.word	0x20000f80
 800401c:	e000ed04 	.word	0xe000ed04

08004020 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b08a      	sub	sp, #40	; 0x28
 8004024:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004026:	2300      	movs	r3, #0
 8004028:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800402a:	2300      	movs	r3, #0
 800402c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800402e:	463a      	mov	r2, r7
 8004030:	1d39      	adds	r1, r7, #4
 8004032:	f107 0308 	add.w	r3, r7, #8
 8004036:	4618      	mov	r0, r3
 8004038:	f7fe ff8a 	bl	8002f50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800403c:	6839      	ldr	r1, [r7, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	9202      	str	r2, [sp, #8]
 8004044:	9301      	str	r3, [sp, #4]
 8004046:	2300      	movs	r3, #0
 8004048:	9300      	str	r3, [sp, #0]
 800404a:	2300      	movs	r3, #0
 800404c:	460a      	mov	r2, r1
 800404e:	4924      	ldr	r1, [pc, #144]	; (80040e0 <vTaskStartScheduler+0xc0>)
 8004050:	4824      	ldr	r0, [pc, #144]	; (80040e4 <vTaskStartScheduler+0xc4>)
 8004052:	f7ff fe01 	bl	8003c58 <xTaskCreateStatic>
 8004056:	4603      	mov	r3, r0
 8004058:	4a23      	ldr	r2, [pc, #140]	; (80040e8 <vTaskStartScheduler+0xc8>)
 800405a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800405c:	4b22      	ldr	r3, [pc, #136]	; (80040e8 <vTaskStartScheduler+0xc8>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d002      	beq.n	800406a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004064:	2301      	movs	r3, #1
 8004066:	617b      	str	r3, [r7, #20]
 8004068:	e001      	b.n	800406e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800406a:	2300      	movs	r3, #0
 800406c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d102      	bne.n	800407a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004074:	f000 fd76 	bl	8004b64 <xTimerCreateTimerTask>
 8004078:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d11b      	bne.n	80040b8 <vTaskStartScheduler+0x98>
	__asm volatile
 8004080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004084:	f383 8811 	msr	BASEPRI, r3
 8004088:	f3bf 8f6f 	isb	sy
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	613b      	str	r3, [r7, #16]
}
 8004092:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004094:	4b15      	ldr	r3, [pc, #84]	; (80040ec <vTaskStartScheduler+0xcc>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	3364      	adds	r3, #100	; 0x64
 800409a:	4a15      	ldr	r2, [pc, #84]	; (80040f0 <vTaskStartScheduler+0xd0>)
 800409c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800409e:	4b15      	ldr	r3, [pc, #84]	; (80040f4 <vTaskStartScheduler+0xd4>)
 80040a0:	f04f 32ff 	mov.w	r2, #4294967295
 80040a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80040a6:	4b14      	ldr	r3, [pc, #80]	; (80040f8 <vTaskStartScheduler+0xd8>)
 80040a8:	2201      	movs	r2, #1
 80040aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80040ac:	4b13      	ldr	r3, [pc, #76]	; (80040fc <vTaskStartScheduler+0xdc>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80040b2:	f001 f8e9 	bl	8005288 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80040b6:	e00e      	b.n	80040d6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040be:	d10a      	bne.n	80040d6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80040c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c4:	f383 8811 	msr	BASEPRI, r3
 80040c8:	f3bf 8f6f 	isb	sy
 80040cc:	f3bf 8f4f 	dsb	sy
 80040d0:	60fb      	str	r3, [r7, #12]
}
 80040d2:	bf00      	nop
 80040d4:	e7fe      	b.n	80040d4 <vTaskStartScheduler+0xb4>
}
 80040d6:	bf00      	nop
 80040d8:	3718      	adds	r7, #24
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	08005bac 	.word	0x08005bac
 80040e4:	08004729 	.word	0x08004729
 80040e8:	20000f7c 	.word	0x20000f7c
 80040ec:	20000a84 	.word	0x20000a84
 80040f0:	2000005c 	.word	0x2000005c
 80040f4:	20000f78 	.word	0x20000f78
 80040f8:	20000f64 	.word	0x20000f64
 80040fc:	20000f5c 	.word	0x20000f5c

08004100 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004104:	4b04      	ldr	r3, [pc, #16]	; (8004118 <vTaskSuspendAll+0x18>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	3301      	adds	r3, #1
 800410a:	4a03      	ldr	r2, [pc, #12]	; (8004118 <vTaskSuspendAll+0x18>)
 800410c:	6013      	str	r3, [r2, #0]
}
 800410e:	bf00      	nop
 8004110:	46bd      	mov	sp, r7
 8004112:	bc80      	pop	{r7}
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	20000f80 	.word	0x20000f80

0800411c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004122:	2300      	movs	r3, #0
 8004124:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004126:	2300      	movs	r3, #0
 8004128:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800412a:	4b42      	ldr	r3, [pc, #264]	; (8004234 <xTaskResumeAll+0x118>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10a      	bne.n	8004148 <xTaskResumeAll+0x2c>
	__asm volatile
 8004132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004136:	f383 8811 	msr	BASEPRI, r3
 800413a:	f3bf 8f6f 	isb	sy
 800413e:	f3bf 8f4f 	dsb	sy
 8004142:	603b      	str	r3, [r7, #0]
}
 8004144:	bf00      	nop
 8004146:	e7fe      	b.n	8004146 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004148:	f001 f910 	bl	800536c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800414c:	4b39      	ldr	r3, [pc, #228]	; (8004234 <xTaskResumeAll+0x118>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	3b01      	subs	r3, #1
 8004152:	4a38      	ldr	r2, [pc, #224]	; (8004234 <xTaskResumeAll+0x118>)
 8004154:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004156:	4b37      	ldr	r3, [pc, #220]	; (8004234 <xTaskResumeAll+0x118>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d162      	bne.n	8004224 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800415e:	4b36      	ldr	r3, [pc, #216]	; (8004238 <xTaskResumeAll+0x11c>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d05e      	beq.n	8004224 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004166:	e02f      	b.n	80041c8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004168:	4b34      	ldr	r3, [pc, #208]	; (800423c <xTaskResumeAll+0x120>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	3318      	adds	r3, #24
 8004174:	4618      	mov	r0, r3
 8004176:	f7fe ffa3 	bl	80030c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	3304      	adds	r3, #4
 800417e:	4618      	mov	r0, r3
 8004180:	f7fe ff9e 	bl	80030c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004188:	4b2d      	ldr	r3, [pc, #180]	; (8004240 <xTaskResumeAll+0x124>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	429a      	cmp	r2, r3
 800418e:	d903      	bls.n	8004198 <xTaskResumeAll+0x7c>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004194:	4a2a      	ldr	r2, [pc, #168]	; (8004240 <xTaskResumeAll+0x124>)
 8004196:	6013      	str	r3, [r2, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800419c:	4613      	mov	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4a27      	ldr	r2, [pc, #156]	; (8004244 <xTaskResumeAll+0x128>)
 80041a6:	441a      	add	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	3304      	adds	r3, #4
 80041ac:	4619      	mov	r1, r3
 80041ae:	4610      	mov	r0, r2
 80041b0:	f7fe ff2b 	bl	800300a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b8:	4b23      	ldr	r3, [pc, #140]	; (8004248 <xTaskResumeAll+0x12c>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041be:	429a      	cmp	r2, r3
 80041c0:	d302      	bcc.n	80041c8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80041c2:	4b22      	ldr	r3, [pc, #136]	; (800424c <xTaskResumeAll+0x130>)
 80041c4:	2201      	movs	r2, #1
 80041c6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80041c8:	4b1c      	ldr	r3, [pc, #112]	; (800423c <xTaskResumeAll+0x120>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1cb      	bne.n	8004168 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80041d6:	f000 fb61 	bl	800489c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80041da:	4b1d      	ldr	r3, [pc, #116]	; (8004250 <xTaskResumeAll+0x134>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d010      	beq.n	8004208 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80041e6:	f000 f845 	bl	8004274 <xTaskIncrementTick>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d002      	beq.n	80041f6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80041f0:	4b16      	ldr	r3, [pc, #88]	; (800424c <xTaskResumeAll+0x130>)
 80041f2:	2201      	movs	r2, #1
 80041f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	3b01      	subs	r3, #1
 80041fa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1f1      	bne.n	80041e6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8004202:	4b13      	ldr	r3, [pc, #76]	; (8004250 <xTaskResumeAll+0x134>)
 8004204:	2200      	movs	r2, #0
 8004206:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004208:	4b10      	ldr	r3, [pc, #64]	; (800424c <xTaskResumeAll+0x130>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d009      	beq.n	8004224 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004210:	2301      	movs	r3, #1
 8004212:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004214:	4b0f      	ldr	r3, [pc, #60]	; (8004254 <xTaskResumeAll+0x138>)
 8004216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800421a:	601a      	str	r2, [r3, #0]
 800421c:	f3bf 8f4f 	dsb	sy
 8004220:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004224:	f001 f8d2 	bl	80053cc <vPortExitCritical>

	return xAlreadyYielded;
 8004228:	68bb      	ldr	r3, [r7, #8]
}
 800422a:	4618      	mov	r0, r3
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	20000f80 	.word	0x20000f80
 8004238:	20000f58 	.word	0x20000f58
 800423c:	20000f18 	.word	0x20000f18
 8004240:	20000f60 	.word	0x20000f60
 8004244:	20000a88 	.word	0x20000a88
 8004248:	20000a84 	.word	0x20000a84
 800424c:	20000f6c 	.word	0x20000f6c
 8004250:	20000f68 	.word	0x20000f68
 8004254:	e000ed04 	.word	0xe000ed04

08004258 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800425e:	4b04      	ldr	r3, [pc, #16]	; (8004270 <xTaskGetTickCount+0x18>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004264:	687b      	ldr	r3, [r7, #4]
}
 8004266:	4618      	mov	r0, r3
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	bc80      	pop	{r7}
 800426e:	4770      	bx	lr
 8004270:	20000f5c 	.word	0x20000f5c

08004274 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800427a:	2300      	movs	r3, #0
 800427c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800427e:	4b51      	ldr	r3, [pc, #324]	; (80043c4 <xTaskIncrementTick+0x150>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	f040 808e 	bne.w	80043a4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004288:	4b4f      	ldr	r3, [pc, #316]	; (80043c8 <xTaskIncrementTick+0x154>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	3301      	adds	r3, #1
 800428e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004290:	4a4d      	ldr	r2, [pc, #308]	; (80043c8 <xTaskIncrementTick+0x154>)
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d120      	bne.n	80042de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800429c:	4b4b      	ldr	r3, [pc, #300]	; (80043cc <xTaskIncrementTick+0x158>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00a      	beq.n	80042bc <xTaskIncrementTick+0x48>
	__asm volatile
 80042a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042aa:	f383 8811 	msr	BASEPRI, r3
 80042ae:	f3bf 8f6f 	isb	sy
 80042b2:	f3bf 8f4f 	dsb	sy
 80042b6:	603b      	str	r3, [r7, #0]
}
 80042b8:	bf00      	nop
 80042ba:	e7fe      	b.n	80042ba <xTaskIncrementTick+0x46>
 80042bc:	4b43      	ldr	r3, [pc, #268]	; (80043cc <xTaskIncrementTick+0x158>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	60fb      	str	r3, [r7, #12]
 80042c2:	4b43      	ldr	r3, [pc, #268]	; (80043d0 <xTaskIncrementTick+0x15c>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a41      	ldr	r2, [pc, #260]	; (80043cc <xTaskIncrementTick+0x158>)
 80042c8:	6013      	str	r3, [r2, #0]
 80042ca:	4a41      	ldr	r2, [pc, #260]	; (80043d0 <xTaskIncrementTick+0x15c>)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6013      	str	r3, [r2, #0]
 80042d0:	4b40      	ldr	r3, [pc, #256]	; (80043d4 <xTaskIncrementTick+0x160>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	3301      	adds	r3, #1
 80042d6:	4a3f      	ldr	r2, [pc, #252]	; (80043d4 <xTaskIncrementTick+0x160>)
 80042d8:	6013      	str	r3, [r2, #0]
 80042da:	f000 fadf 	bl	800489c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80042de:	4b3e      	ldr	r3, [pc, #248]	; (80043d8 <xTaskIncrementTick+0x164>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d34e      	bcc.n	8004386 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042e8:	4b38      	ldr	r3, [pc, #224]	; (80043cc <xTaskIncrementTick+0x158>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <xTaskIncrementTick+0x82>
 80042f2:	2301      	movs	r3, #1
 80042f4:	e000      	b.n	80042f8 <xTaskIncrementTick+0x84>
 80042f6:	2300      	movs	r3, #0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d004      	beq.n	8004306 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042fc:	4b36      	ldr	r3, [pc, #216]	; (80043d8 <xTaskIncrementTick+0x164>)
 80042fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004302:	601a      	str	r2, [r3, #0]
					break;
 8004304:	e03f      	b.n	8004386 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004306:	4b31      	ldr	r3, [pc, #196]	; (80043cc <xTaskIncrementTick+0x158>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	429a      	cmp	r2, r3
 800431c:	d203      	bcs.n	8004326 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800431e:	4a2e      	ldr	r2, [pc, #184]	; (80043d8 <xTaskIncrementTick+0x164>)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6013      	str	r3, [r2, #0]
						break;
 8004324:	e02f      	b.n	8004386 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	3304      	adds	r3, #4
 800432a:	4618      	mov	r0, r3
 800432c:	f7fe fec8 	bl	80030c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004334:	2b00      	cmp	r3, #0
 8004336:	d004      	beq.n	8004342 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	3318      	adds	r3, #24
 800433c:	4618      	mov	r0, r3
 800433e:	f7fe febf 	bl	80030c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004346:	4b25      	ldr	r3, [pc, #148]	; (80043dc <xTaskIncrementTick+0x168>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	429a      	cmp	r2, r3
 800434c:	d903      	bls.n	8004356 <xTaskIncrementTick+0xe2>
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004352:	4a22      	ldr	r2, [pc, #136]	; (80043dc <xTaskIncrementTick+0x168>)
 8004354:	6013      	str	r3, [r2, #0]
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800435a:	4613      	mov	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	4413      	add	r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	4a1f      	ldr	r2, [pc, #124]	; (80043e0 <xTaskIncrementTick+0x16c>)
 8004364:	441a      	add	r2, r3
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	3304      	adds	r3, #4
 800436a:	4619      	mov	r1, r3
 800436c:	4610      	mov	r0, r2
 800436e:	f7fe fe4c 	bl	800300a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004376:	4b1b      	ldr	r3, [pc, #108]	; (80043e4 <xTaskIncrementTick+0x170>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437c:	429a      	cmp	r2, r3
 800437e:	d3b3      	bcc.n	80042e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004380:	2301      	movs	r3, #1
 8004382:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004384:	e7b0      	b.n	80042e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004386:	4b17      	ldr	r3, [pc, #92]	; (80043e4 <xTaskIncrementTick+0x170>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800438c:	4914      	ldr	r1, [pc, #80]	; (80043e0 <xTaskIncrementTick+0x16c>)
 800438e:	4613      	mov	r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4413      	add	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	440b      	add	r3, r1
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d907      	bls.n	80043ae <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800439e:	2301      	movs	r3, #1
 80043a0:	617b      	str	r3, [r7, #20]
 80043a2:	e004      	b.n	80043ae <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80043a4:	4b10      	ldr	r3, [pc, #64]	; (80043e8 <xTaskIncrementTick+0x174>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	3301      	adds	r3, #1
 80043aa:	4a0f      	ldr	r2, [pc, #60]	; (80043e8 <xTaskIncrementTick+0x174>)
 80043ac:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80043ae:	4b0f      	ldr	r3, [pc, #60]	; (80043ec <xTaskIncrementTick+0x178>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80043b6:	2301      	movs	r3, #1
 80043b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80043ba:	697b      	ldr	r3, [r7, #20]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3718      	adds	r7, #24
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	20000f80 	.word	0x20000f80
 80043c8:	20000f5c 	.word	0x20000f5c
 80043cc:	20000f10 	.word	0x20000f10
 80043d0:	20000f14 	.word	0x20000f14
 80043d4:	20000f70 	.word	0x20000f70
 80043d8:	20000f78 	.word	0x20000f78
 80043dc:	20000f60 	.word	0x20000f60
 80043e0:	20000a88 	.word	0x20000a88
 80043e4:	20000a84 	.word	0x20000a84
 80043e8:	20000f68 	.word	0x20000f68
 80043ec:	20000f6c 	.word	0x20000f6c

080043f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80043f6:	4b2a      	ldr	r3, [pc, #168]	; (80044a0 <vTaskSwitchContext+0xb0>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d003      	beq.n	8004406 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80043fe:	4b29      	ldr	r3, [pc, #164]	; (80044a4 <vTaskSwitchContext+0xb4>)
 8004400:	2201      	movs	r2, #1
 8004402:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004404:	e046      	b.n	8004494 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004406:	4b27      	ldr	r3, [pc, #156]	; (80044a4 <vTaskSwitchContext+0xb4>)
 8004408:	2200      	movs	r2, #0
 800440a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800440c:	4b26      	ldr	r3, [pc, #152]	; (80044a8 <vTaskSwitchContext+0xb8>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	60fb      	str	r3, [r7, #12]
 8004412:	e010      	b.n	8004436 <vTaskSwitchContext+0x46>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10a      	bne.n	8004430 <vTaskSwitchContext+0x40>
	__asm volatile
 800441a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441e:	f383 8811 	msr	BASEPRI, r3
 8004422:	f3bf 8f6f 	isb	sy
 8004426:	f3bf 8f4f 	dsb	sy
 800442a:	607b      	str	r3, [r7, #4]
}
 800442c:	bf00      	nop
 800442e:	e7fe      	b.n	800442e <vTaskSwitchContext+0x3e>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	3b01      	subs	r3, #1
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	491d      	ldr	r1, [pc, #116]	; (80044ac <vTaskSwitchContext+0xbc>)
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	4613      	mov	r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	4413      	add	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	440b      	add	r3, r1
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d0e4      	beq.n	8004414 <vTaskSwitchContext+0x24>
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	4613      	mov	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4a15      	ldr	r2, [pc, #84]	; (80044ac <vTaskSwitchContext+0xbc>)
 8004456:	4413      	add	r3, r2
 8004458:	60bb      	str	r3, [r7, #8]
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	605a      	str	r2, [r3, #4]
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	3308      	adds	r3, #8
 800446c:	429a      	cmp	r2, r3
 800446e:	d104      	bne.n	800447a <vTaskSwitchContext+0x8a>
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	605a      	str	r2, [r3, #4]
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	4a0b      	ldr	r2, [pc, #44]	; (80044b0 <vTaskSwitchContext+0xc0>)
 8004482:	6013      	str	r3, [r2, #0]
 8004484:	4a08      	ldr	r2, [pc, #32]	; (80044a8 <vTaskSwitchContext+0xb8>)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800448a:	4b09      	ldr	r3, [pc, #36]	; (80044b0 <vTaskSwitchContext+0xc0>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	3364      	adds	r3, #100	; 0x64
 8004490:	4a08      	ldr	r2, [pc, #32]	; (80044b4 <vTaskSwitchContext+0xc4>)
 8004492:	6013      	str	r3, [r2, #0]
}
 8004494:	bf00      	nop
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	bc80      	pop	{r7}
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	20000f80 	.word	0x20000f80
 80044a4:	20000f6c 	.word	0x20000f6c
 80044a8:	20000f60 	.word	0x20000f60
 80044ac:	20000a88 	.word	0x20000a88
 80044b0:	20000a84 	.word	0x20000a84
 80044b4:	2000005c 	.word	0x2000005c

080044b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10a      	bne.n	80044de <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80044c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044cc:	f383 8811 	msr	BASEPRI, r3
 80044d0:	f3bf 8f6f 	isb	sy
 80044d4:	f3bf 8f4f 	dsb	sy
 80044d8:	60fb      	str	r3, [r7, #12]
}
 80044da:	bf00      	nop
 80044dc:	e7fe      	b.n	80044dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80044de:	4b07      	ldr	r3, [pc, #28]	; (80044fc <vTaskPlaceOnEventList+0x44>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	3318      	adds	r3, #24
 80044e4:	4619      	mov	r1, r3
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f7fe fdb2 	bl	8003050 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80044ec:	2101      	movs	r1, #1
 80044ee:	6838      	ldr	r0, [r7, #0]
 80044f0:	f000 fae4 	bl	8004abc <prvAddCurrentTaskToDelayedList>
}
 80044f4:	bf00      	nop
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	20000a84 	.word	0x20000a84

08004500 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
 8004506:	60f8      	str	r0, [r7, #12]
 8004508:	60b9      	str	r1, [r7, #8]
 800450a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10a      	bne.n	8004528 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004516:	f383 8811 	msr	BASEPRI, r3
 800451a:	f3bf 8f6f 	isb	sy
 800451e:	f3bf 8f4f 	dsb	sy
 8004522:	617b      	str	r3, [r7, #20]
}
 8004524:	bf00      	nop
 8004526:	e7fe      	b.n	8004526 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004528:	4b0a      	ldr	r3, [pc, #40]	; (8004554 <vTaskPlaceOnEventListRestricted+0x54>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	3318      	adds	r3, #24
 800452e:	4619      	mov	r1, r3
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f7fe fd6a 	bl	800300a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d002      	beq.n	8004542 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800453c:	f04f 33ff 	mov.w	r3, #4294967295
 8004540:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004542:	6879      	ldr	r1, [r7, #4]
 8004544:	68b8      	ldr	r0, [r7, #8]
 8004546:	f000 fab9 	bl	8004abc <prvAddCurrentTaskToDelayedList>
	}
 800454a:	bf00      	nop
 800454c:	3718      	adds	r7, #24
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	20000a84 	.word	0x20000a84

08004558 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10a      	bne.n	8004584 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800456e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004572:	f383 8811 	msr	BASEPRI, r3
 8004576:	f3bf 8f6f 	isb	sy
 800457a:	f3bf 8f4f 	dsb	sy
 800457e:	60fb      	str	r3, [r7, #12]
}
 8004580:	bf00      	nop
 8004582:	e7fe      	b.n	8004582 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	3318      	adds	r3, #24
 8004588:	4618      	mov	r0, r3
 800458a:	f7fe fd99 	bl	80030c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800458e:	4b1e      	ldr	r3, [pc, #120]	; (8004608 <xTaskRemoveFromEventList+0xb0>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d11d      	bne.n	80045d2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	3304      	adds	r3, #4
 800459a:	4618      	mov	r0, r3
 800459c:	f7fe fd90 	bl	80030c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a4:	4b19      	ldr	r3, [pc, #100]	; (800460c <xTaskRemoveFromEventList+0xb4>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d903      	bls.n	80045b4 <xTaskRemoveFromEventList+0x5c>
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b0:	4a16      	ldr	r2, [pc, #88]	; (800460c <xTaskRemoveFromEventList+0xb4>)
 80045b2:	6013      	str	r3, [r2, #0]
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b8:	4613      	mov	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4a13      	ldr	r2, [pc, #76]	; (8004610 <xTaskRemoveFromEventList+0xb8>)
 80045c2:	441a      	add	r2, r3
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	3304      	adds	r3, #4
 80045c8:	4619      	mov	r1, r3
 80045ca:	4610      	mov	r0, r2
 80045cc:	f7fe fd1d 	bl	800300a <vListInsertEnd>
 80045d0:	e005      	b.n	80045de <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	3318      	adds	r3, #24
 80045d6:	4619      	mov	r1, r3
 80045d8:	480e      	ldr	r0, [pc, #56]	; (8004614 <xTaskRemoveFromEventList+0xbc>)
 80045da:	f7fe fd16 	bl	800300a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e2:	4b0d      	ldr	r3, [pc, #52]	; (8004618 <xTaskRemoveFromEventList+0xc0>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d905      	bls.n	80045f8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80045ec:	2301      	movs	r3, #1
 80045ee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80045f0:	4b0a      	ldr	r3, [pc, #40]	; (800461c <xTaskRemoveFromEventList+0xc4>)
 80045f2:	2201      	movs	r2, #1
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	e001      	b.n	80045fc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80045f8:	2300      	movs	r3, #0
 80045fa:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80045fc:	697b      	ldr	r3, [r7, #20]
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3718      	adds	r7, #24
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	20000f80 	.word	0x20000f80
 800460c:	20000f60 	.word	0x20000f60
 8004610:	20000a88 	.word	0x20000a88
 8004614:	20000f18 	.word	0x20000f18
 8004618:	20000a84 	.word	0x20000a84
 800461c:	20000f6c 	.word	0x20000f6c

08004620 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004628:	4b06      	ldr	r3, [pc, #24]	; (8004644 <vTaskInternalSetTimeOutState+0x24>)
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004630:	4b05      	ldr	r3, [pc, #20]	; (8004648 <vTaskInternalSetTimeOutState+0x28>)
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	605a      	str	r2, [r3, #4]
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	bc80      	pop	{r7}
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	20000f70 	.word	0x20000f70
 8004648:	20000f5c 	.word	0x20000f5c

0800464c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b088      	sub	sp, #32
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10a      	bne.n	8004672 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800465c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004660:	f383 8811 	msr	BASEPRI, r3
 8004664:	f3bf 8f6f 	isb	sy
 8004668:	f3bf 8f4f 	dsb	sy
 800466c:	613b      	str	r3, [r7, #16]
}
 800466e:	bf00      	nop
 8004670:	e7fe      	b.n	8004670 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10a      	bne.n	800468e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800467c:	f383 8811 	msr	BASEPRI, r3
 8004680:	f3bf 8f6f 	isb	sy
 8004684:	f3bf 8f4f 	dsb	sy
 8004688:	60fb      	str	r3, [r7, #12]
}
 800468a:	bf00      	nop
 800468c:	e7fe      	b.n	800468c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800468e:	f000 fe6d 	bl	800536c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004692:	4b1d      	ldr	r3, [pc, #116]	; (8004708 <xTaskCheckForTimeOut+0xbc>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	1ad3      	subs	r3, r2, r3
 80046a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046aa:	d102      	bne.n	80046b2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80046ac:	2300      	movs	r3, #0
 80046ae:	61fb      	str	r3, [r7, #28]
 80046b0:	e023      	b.n	80046fa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	4b15      	ldr	r3, [pc, #84]	; (800470c <xTaskCheckForTimeOut+0xc0>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d007      	beq.n	80046ce <xTaskCheckForTimeOut+0x82>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d302      	bcc.n	80046ce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80046c8:	2301      	movs	r3, #1
 80046ca:	61fb      	str	r3, [r7, #28]
 80046cc:	e015      	b.n	80046fa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d20b      	bcs.n	80046f0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	1ad2      	subs	r2, r2, r3
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f7ff ff9b 	bl	8004620 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80046ea:	2300      	movs	r3, #0
 80046ec:	61fb      	str	r3, [r7, #28]
 80046ee:	e004      	b.n	80046fa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	2200      	movs	r2, #0
 80046f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80046f6:	2301      	movs	r3, #1
 80046f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80046fa:	f000 fe67 	bl	80053cc <vPortExitCritical>

	return xReturn;
 80046fe:	69fb      	ldr	r3, [r7, #28]
}
 8004700:	4618      	mov	r0, r3
 8004702:	3720      	adds	r7, #32
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	20000f5c 	.word	0x20000f5c
 800470c:	20000f70 	.word	0x20000f70

08004710 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004710:	b480      	push	{r7}
 8004712:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004714:	4b03      	ldr	r3, [pc, #12]	; (8004724 <vTaskMissedYield+0x14>)
 8004716:	2201      	movs	r2, #1
 8004718:	601a      	str	r2, [r3, #0]
}
 800471a:	bf00      	nop
 800471c:	46bd      	mov	sp, r7
 800471e:	bc80      	pop	{r7}
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	20000f6c 	.word	0x20000f6c

08004728 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004730:	f000 f852 	bl	80047d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004734:	4b06      	ldr	r3, [pc, #24]	; (8004750 <prvIdleTask+0x28>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d9f9      	bls.n	8004730 <prvIdleTask+0x8>
			{
				taskYIELD();
 800473c:	4b05      	ldr	r3, [pc, #20]	; (8004754 <prvIdleTask+0x2c>)
 800473e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	f3bf 8f4f 	dsb	sy
 8004748:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800474c:	e7f0      	b.n	8004730 <prvIdleTask+0x8>
 800474e:	bf00      	nop
 8004750:	20000a88 	.word	0x20000a88
 8004754:	e000ed04 	.word	0xe000ed04

08004758 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800475e:	2300      	movs	r3, #0
 8004760:	607b      	str	r3, [r7, #4]
 8004762:	e00c      	b.n	800477e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	4613      	mov	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4413      	add	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4a12      	ldr	r2, [pc, #72]	; (80047b8 <prvInitialiseTaskLists+0x60>)
 8004770:	4413      	add	r3, r2
 8004772:	4618      	mov	r0, r3
 8004774:	f7fe fc1e 	bl	8002fb4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	3301      	adds	r3, #1
 800477c:	607b      	str	r3, [r7, #4]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2b37      	cmp	r3, #55	; 0x37
 8004782:	d9ef      	bls.n	8004764 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004784:	480d      	ldr	r0, [pc, #52]	; (80047bc <prvInitialiseTaskLists+0x64>)
 8004786:	f7fe fc15 	bl	8002fb4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800478a:	480d      	ldr	r0, [pc, #52]	; (80047c0 <prvInitialiseTaskLists+0x68>)
 800478c:	f7fe fc12 	bl	8002fb4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004790:	480c      	ldr	r0, [pc, #48]	; (80047c4 <prvInitialiseTaskLists+0x6c>)
 8004792:	f7fe fc0f 	bl	8002fb4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004796:	480c      	ldr	r0, [pc, #48]	; (80047c8 <prvInitialiseTaskLists+0x70>)
 8004798:	f7fe fc0c 	bl	8002fb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800479c:	480b      	ldr	r0, [pc, #44]	; (80047cc <prvInitialiseTaskLists+0x74>)
 800479e:	f7fe fc09 	bl	8002fb4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80047a2:	4b0b      	ldr	r3, [pc, #44]	; (80047d0 <prvInitialiseTaskLists+0x78>)
 80047a4:	4a05      	ldr	r2, [pc, #20]	; (80047bc <prvInitialiseTaskLists+0x64>)
 80047a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80047a8:	4b0a      	ldr	r3, [pc, #40]	; (80047d4 <prvInitialiseTaskLists+0x7c>)
 80047aa:	4a05      	ldr	r2, [pc, #20]	; (80047c0 <prvInitialiseTaskLists+0x68>)
 80047ac:	601a      	str	r2, [r3, #0]
}
 80047ae:	bf00      	nop
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	20000a88 	.word	0x20000a88
 80047bc:	20000ee8 	.word	0x20000ee8
 80047c0:	20000efc 	.word	0x20000efc
 80047c4:	20000f18 	.word	0x20000f18
 80047c8:	20000f2c 	.word	0x20000f2c
 80047cc:	20000f44 	.word	0x20000f44
 80047d0:	20000f10 	.word	0x20000f10
 80047d4:	20000f14 	.word	0x20000f14

080047d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047de:	e019      	b.n	8004814 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80047e0:	f000 fdc4 	bl	800536c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80047e4:	4b10      	ldr	r3, [pc, #64]	; (8004828 <prvCheckTasksWaitingTermination+0x50>)
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3304      	adds	r3, #4
 80047f0:	4618      	mov	r0, r3
 80047f2:	f7fe fc65 	bl	80030c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80047f6:	4b0d      	ldr	r3, [pc, #52]	; (800482c <prvCheckTasksWaitingTermination+0x54>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	3b01      	subs	r3, #1
 80047fc:	4a0b      	ldr	r2, [pc, #44]	; (800482c <prvCheckTasksWaitingTermination+0x54>)
 80047fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004800:	4b0b      	ldr	r3, [pc, #44]	; (8004830 <prvCheckTasksWaitingTermination+0x58>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3b01      	subs	r3, #1
 8004806:	4a0a      	ldr	r2, [pc, #40]	; (8004830 <prvCheckTasksWaitingTermination+0x58>)
 8004808:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800480a:	f000 fddf 	bl	80053cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 f810 	bl	8004834 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004814:	4b06      	ldr	r3, [pc, #24]	; (8004830 <prvCheckTasksWaitingTermination+0x58>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1e1      	bne.n	80047e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800481c:	bf00      	nop
 800481e:	bf00      	nop
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop
 8004828:	20000f2c 	.word	0x20000f2c
 800482c:	20000f58 	.word	0x20000f58
 8004830:	20000f40 	.word	0x20000f40

08004834 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	3364      	adds	r3, #100	; 0x64
 8004840:	4618      	mov	r0, r3
 8004842:	f001 f873 	bl	800592c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800484c:	2b00      	cmp	r3, #0
 800484e:	d108      	bne.n	8004862 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004854:	4618      	mov	r0, r3
 8004856:	f000 ff4d 	bl	80056f4 <vPortFree>
				vPortFree( pxTCB );
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 ff4a 	bl	80056f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004860:	e018      	b.n	8004894 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8004868:	2b01      	cmp	r3, #1
 800486a:	d103      	bne.n	8004874 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 ff41 	bl	80056f4 <vPortFree>
	}
 8004872:	e00f      	b.n	8004894 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800487a:	2b02      	cmp	r3, #2
 800487c:	d00a      	beq.n	8004894 <prvDeleteTCB+0x60>
	__asm volatile
 800487e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004882:	f383 8811 	msr	BASEPRI, r3
 8004886:	f3bf 8f6f 	isb	sy
 800488a:	f3bf 8f4f 	dsb	sy
 800488e:	60fb      	str	r3, [r7, #12]
}
 8004890:	bf00      	nop
 8004892:	e7fe      	b.n	8004892 <prvDeleteTCB+0x5e>
	}
 8004894:	bf00      	nop
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048a2:	4b0e      	ldr	r3, [pc, #56]	; (80048dc <prvResetNextTaskUnblockTime+0x40>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d101      	bne.n	80048b0 <prvResetNextTaskUnblockTime+0x14>
 80048ac:	2301      	movs	r3, #1
 80048ae:	e000      	b.n	80048b2 <prvResetNextTaskUnblockTime+0x16>
 80048b0:	2300      	movs	r3, #0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d004      	beq.n	80048c0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80048b6:	4b0a      	ldr	r3, [pc, #40]	; (80048e0 <prvResetNextTaskUnblockTime+0x44>)
 80048b8:	f04f 32ff 	mov.w	r2, #4294967295
 80048bc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80048be:	e008      	b.n	80048d2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80048c0:	4b06      	ldr	r3, [pc, #24]	; (80048dc <prvResetNextTaskUnblockTime+0x40>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	4a04      	ldr	r2, [pc, #16]	; (80048e0 <prvResetNextTaskUnblockTime+0x44>)
 80048d0:	6013      	str	r3, [r2, #0]
}
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bc80      	pop	{r7}
 80048da:	4770      	bx	lr
 80048dc:	20000f10 	.word	0x20000f10
 80048e0:	20000f78 	.word	0x20000f78

080048e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80048ea:	4b0b      	ldr	r3, [pc, #44]	; (8004918 <xTaskGetSchedulerState+0x34>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d102      	bne.n	80048f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80048f2:	2301      	movs	r3, #1
 80048f4:	607b      	str	r3, [r7, #4]
 80048f6:	e008      	b.n	800490a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048f8:	4b08      	ldr	r3, [pc, #32]	; (800491c <xTaskGetSchedulerState+0x38>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d102      	bne.n	8004906 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004900:	2302      	movs	r3, #2
 8004902:	607b      	str	r3, [r7, #4]
 8004904:	e001      	b.n	800490a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004906:	2300      	movs	r3, #0
 8004908:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800490a:	687b      	ldr	r3, [r7, #4]
	}
 800490c:	4618      	mov	r0, r3
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	bc80      	pop	{r7}
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	20000f64 	.word	0x20000f64
 800491c:	20000f80 	.word	0x20000f80

08004920 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800492c:	2300      	movs	r3, #0
 800492e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d056      	beq.n	80049e4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004936:	4b2e      	ldr	r3, [pc, #184]	; (80049f0 <xTaskPriorityDisinherit+0xd0>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	429a      	cmp	r2, r3
 800493e:	d00a      	beq.n	8004956 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004944:	f383 8811 	msr	BASEPRI, r3
 8004948:	f3bf 8f6f 	isb	sy
 800494c:	f3bf 8f4f 	dsb	sy
 8004950:	60fb      	str	r3, [r7, #12]
}
 8004952:	bf00      	nop
 8004954:	e7fe      	b.n	8004954 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10a      	bne.n	8004974 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800495e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004962:	f383 8811 	msr	BASEPRI, r3
 8004966:	f3bf 8f6f 	isb	sy
 800496a:	f3bf 8f4f 	dsb	sy
 800496e:	60bb      	str	r3, [r7, #8]
}
 8004970:	bf00      	nop
 8004972:	e7fe      	b.n	8004972 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004978:	1e5a      	subs	r2, r3, #1
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004986:	429a      	cmp	r2, r3
 8004988:	d02c      	beq.n	80049e4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800498e:	2b00      	cmp	r3, #0
 8004990:	d128      	bne.n	80049e4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	3304      	adds	r3, #4
 8004996:	4618      	mov	r0, r3
 8004998:	f7fe fb92 	bl	80030c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b4:	4b0f      	ldr	r3, [pc, #60]	; (80049f4 <xTaskPriorityDisinherit+0xd4>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d903      	bls.n	80049c4 <xTaskPriorityDisinherit+0xa4>
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c0:	4a0c      	ldr	r2, [pc, #48]	; (80049f4 <xTaskPriorityDisinherit+0xd4>)
 80049c2:	6013      	str	r3, [r2, #0]
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c8:	4613      	mov	r3, r2
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4413      	add	r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4a09      	ldr	r2, [pc, #36]	; (80049f8 <xTaskPriorityDisinherit+0xd8>)
 80049d2:	441a      	add	r2, r3
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	3304      	adds	r3, #4
 80049d8:	4619      	mov	r1, r3
 80049da:	4610      	mov	r0, r2
 80049dc:	f7fe fb15 	bl	800300a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80049e0:	2301      	movs	r3, #1
 80049e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80049e4:	697b      	ldr	r3, [r7, #20]
	}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3718      	adds	r7, #24
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	20000a84 	.word	0x20000a84
 80049f4:	20000f60 	.word	0x20000f60
 80049f8:	20000a88 	.word	0x20000a88

080049fc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
 8004a08:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8004a0a:	f000 fcaf 	bl	800536c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004a0e:	4b29      	ldr	r3, [pc, #164]	; (8004ab4 <xTaskNotifyWait+0xb8>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d01c      	beq.n	8004a56 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8004a1c:	4b25      	ldr	r3, [pc, #148]	; (8004ab4 <xTaskNotifyWait+0xb8>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	43d2      	mvns	r2, r2
 8004a28:	400a      	ands	r2, r1
 8004a2a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8004a2e:	4b21      	ldr	r3, [pc, #132]	; (8004ab4 <xTaskNotifyWait+0xb8>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

				if( xTicksToWait > ( TickType_t ) 0 )
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00b      	beq.n	8004a56 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a3e:	2101      	movs	r1, #1
 8004a40:	6838      	ldr	r0, [r7, #0]
 8004a42:	f000 f83b 	bl	8004abc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8004a46:	4b1c      	ldr	r3, [pc, #112]	; (8004ab8 <xTaskNotifyWait+0xbc>)
 8004a48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a4c:	601a      	str	r2, [r3, #0]
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004a56:	f000 fcb9 	bl	80053cc <vPortExitCritical>

		taskENTER_CRITICAL();
 8004a5a:	f000 fc87 	bl	800536c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d005      	beq.n	8004a70 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8004a64:	4b13      	ldr	r3, [pc, #76]	; (8004ab4 <xTaskNotifyWait+0xb8>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004a70:	4b10      	ldr	r3, [pc, #64]	; (8004ab4 <xTaskNotifyWait+0xb8>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d002      	beq.n	8004a84 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	617b      	str	r3, [r7, #20]
 8004a82:	e00a      	b.n	8004a9a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8004a84:	4b0b      	ldr	r3, [pc, #44]	; (8004ab4 <xTaskNotifyWait+0xb8>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	43d2      	mvns	r2, r2
 8004a90:	400a      	ands	r2, r1
 8004a92:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
				xReturn = pdTRUE;
 8004a96:	2301      	movs	r3, #1
 8004a98:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004a9a:	4b06      	ldr	r3, [pc, #24]	; (8004ab4 <xTaskNotifyWait+0xb8>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
		}
		taskEXIT_CRITICAL();
 8004aa4:	f000 fc92 	bl	80053cc <vPortExitCritical>

		return xReturn;
 8004aa8:	697b      	ldr	r3, [r7, #20]
	}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3718      	adds	r7, #24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	20000a84 	.word	0x20000a84
 8004ab8:	e000ed04 	.word	0xe000ed04

08004abc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004ac6:	4b21      	ldr	r3, [pc, #132]	; (8004b4c <prvAddCurrentTaskToDelayedList+0x90>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004acc:	4b20      	ldr	r3, [pc, #128]	; (8004b50 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	3304      	adds	r3, #4
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7fe faf4 	bl	80030c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ade:	d10a      	bne.n	8004af6 <prvAddCurrentTaskToDelayedList+0x3a>
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d007      	beq.n	8004af6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ae6:	4b1a      	ldr	r3, [pc, #104]	; (8004b50 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	3304      	adds	r3, #4
 8004aec:	4619      	mov	r1, r3
 8004aee:	4819      	ldr	r0, [pc, #100]	; (8004b54 <prvAddCurrentTaskToDelayedList+0x98>)
 8004af0:	f7fe fa8b 	bl	800300a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004af4:	e026      	b.n	8004b44 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4413      	add	r3, r2
 8004afc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004afe:	4b14      	ldr	r3, [pc, #80]	; (8004b50 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68ba      	ldr	r2, [r7, #8]
 8004b04:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d209      	bcs.n	8004b22 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b0e:	4b12      	ldr	r3, [pc, #72]	; (8004b58 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	4b0f      	ldr	r3, [pc, #60]	; (8004b50 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	3304      	adds	r3, #4
 8004b18:	4619      	mov	r1, r3
 8004b1a:	4610      	mov	r0, r2
 8004b1c:	f7fe fa98 	bl	8003050 <vListInsert>
}
 8004b20:	e010      	b.n	8004b44 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b22:	4b0e      	ldr	r3, [pc, #56]	; (8004b5c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	4b0a      	ldr	r3, [pc, #40]	; (8004b50 <prvAddCurrentTaskToDelayedList+0x94>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	3304      	adds	r3, #4
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	4610      	mov	r0, r2
 8004b30:	f7fe fa8e 	bl	8003050 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004b34:	4b0a      	ldr	r3, [pc, #40]	; (8004b60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d202      	bcs.n	8004b44 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004b3e:	4a08      	ldr	r2, [pc, #32]	; (8004b60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	6013      	str	r3, [r2, #0]
}
 8004b44:	bf00      	nop
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	20000f5c 	.word	0x20000f5c
 8004b50:	20000a84 	.word	0x20000a84
 8004b54:	20000f44 	.word	0x20000f44
 8004b58:	20000f14 	.word	0x20000f14
 8004b5c:	20000f10 	.word	0x20000f10
 8004b60:	20000f78 	.word	0x20000f78

08004b64 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b08a      	sub	sp, #40	; 0x28
 8004b68:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004b6e:	f000 facb 	bl	8005108 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004b72:	4b1c      	ldr	r3, [pc, #112]	; (8004be4 <xTimerCreateTimerTask+0x80>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d021      	beq.n	8004bbe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004b82:	1d3a      	adds	r2, r7, #4
 8004b84:	f107 0108 	add.w	r1, r7, #8
 8004b88:	f107 030c 	add.w	r3, r7, #12
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7fe f9f7 	bl	8002f80 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004b92:	6879      	ldr	r1, [r7, #4]
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	68fa      	ldr	r2, [r7, #12]
 8004b98:	9202      	str	r2, [sp, #8]
 8004b9a:	9301      	str	r3, [sp, #4]
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	460a      	mov	r2, r1
 8004ba4:	4910      	ldr	r1, [pc, #64]	; (8004be8 <xTimerCreateTimerTask+0x84>)
 8004ba6:	4811      	ldr	r0, [pc, #68]	; (8004bec <xTimerCreateTimerTask+0x88>)
 8004ba8:	f7ff f856 	bl	8003c58 <xTaskCreateStatic>
 8004bac:	4603      	mov	r3, r0
 8004bae:	4a10      	ldr	r2, [pc, #64]	; (8004bf0 <xTimerCreateTimerTask+0x8c>)
 8004bb0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004bb2:	4b0f      	ldr	r3, [pc, #60]	; (8004bf0 <xTimerCreateTimerTask+0x8c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10a      	bne.n	8004bda <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc8:	f383 8811 	msr	BASEPRI, r3
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	613b      	str	r3, [r7, #16]
}
 8004bd6:	bf00      	nop
 8004bd8:	e7fe      	b.n	8004bd8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004bda:	697b      	ldr	r3, [r7, #20]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3718      	adds	r7, #24
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	20000fb4 	.word	0x20000fb4
 8004be8:	08005bb4 	.word	0x08005bb4
 8004bec:	08004d11 	.word	0x08004d11
 8004bf0:	20000fb8 	.word	0x20000fb8

08004bf4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b08a      	sub	sp, #40	; 0x28
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
 8004c00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004c02:	2300      	movs	r3, #0
 8004c04:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d10a      	bne.n	8004c22 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c10:	f383 8811 	msr	BASEPRI, r3
 8004c14:	f3bf 8f6f 	isb	sy
 8004c18:	f3bf 8f4f 	dsb	sy
 8004c1c:	623b      	str	r3, [r7, #32]
}
 8004c1e:	bf00      	nop
 8004c20:	e7fe      	b.n	8004c20 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004c22:	4b1a      	ldr	r3, [pc, #104]	; (8004c8c <xTimerGenericCommand+0x98>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d02a      	beq.n	8004c80 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	2b05      	cmp	r3, #5
 8004c3a:	dc18      	bgt.n	8004c6e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004c3c:	f7ff fe52 	bl	80048e4 <xTaskGetSchedulerState>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d109      	bne.n	8004c5a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004c46:	4b11      	ldr	r3, [pc, #68]	; (8004c8c <xTimerGenericCommand+0x98>)
 8004c48:	6818      	ldr	r0, [r3, #0]
 8004c4a:	f107 0110 	add.w	r1, r7, #16
 8004c4e:	2300      	movs	r3, #0
 8004c50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c52:	f7fe fb9f 	bl	8003394 <xQueueGenericSend>
 8004c56:	6278      	str	r0, [r7, #36]	; 0x24
 8004c58:	e012      	b.n	8004c80 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004c5a:	4b0c      	ldr	r3, [pc, #48]	; (8004c8c <xTimerGenericCommand+0x98>)
 8004c5c:	6818      	ldr	r0, [r3, #0]
 8004c5e:	f107 0110 	add.w	r1, r7, #16
 8004c62:	2300      	movs	r3, #0
 8004c64:	2200      	movs	r2, #0
 8004c66:	f7fe fb95 	bl	8003394 <xQueueGenericSend>
 8004c6a:	6278      	str	r0, [r7, #36]	; 0x24
 8004c6c:	e008      	b.n	8004c80 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004c6e:	4b07      	ldr	r3, [pc, #28]	; (8004c8c <xTimerGenericCommand+0x98>)
 8004c70:	6818      	ldr	r0, [r3, #0]
 8004c72:	f107 0110 	add.w	r1, r7, #16
 8004c76:	2300      	movs	r3, #0
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	f7fe fc89 	bl	8003590 <xQueueGenericSendFromISR>
 8004c7e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3728      	adds	r7, #40	; 0x28
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	20000fb4 	.word	0x20000fb4

08004c90 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b088      	sub	sp, #32
 8004c94:	af02      	add	r7, sp, #8
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c9a:	4b1c      	ldr	r3, [pc, #112]	; (8004d0c <prvProcessExpiredTimer+0x7c>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	3304      	adds	r3, #4
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7fe fa09 	bl	80030c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d122      	bne.n	8004cfc <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	699a      	ldr	r2, [r3, #24]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	18d1      	adds	r1, r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	6978      	ldr	r0, [r7, #20]
 8004cc4:	f000 f8c8 	bl	8004e58 <prvInsertTimerInActiveList>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d016      	beq.n	8004cfc <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004cce:	2300      	movs	r3, #0
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	2100      	movs	r1, #0
 8004cd8:	6978      	ldr	r0, [r7, #20]
 8004cda:	f7ff ff8b 	bl	8004bf4 <xTimerGenericCommand>
 8004cde:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10a      	bne.n	8004cfc <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cea:	f383 8811 	msr	BASEPRI, r3
 8004cee:	f3bf 8f6f 	isb	sy
 8004cf2:	f3bf 8f4f 	dsb	sy
 8004cf6:	60fb      	str	r3, [r7, #12]
}
 8004cf8:	bf00      	nop
 8004cfa:	e7fe      	b.n	8004cfa <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d00:	6978      	ldr	r0, [r7, #20]
 8004d02:	4798      	blx	r3
}
 8004d04:	bf00      	nop
 8004d06:	3718      	adds	r7, #24
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	20000fac 	.word	0x20000fac

08004d10 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d18:	f107 0308 	add.w	r3, r7, #8
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f000 f857 	bl	8004dd0 <prvGetNextExpireTime>
 8004d22:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	4619      	mov	r1, r3
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f000 f803 	bl	8004d34 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004d2e:	f000 f8d5 	bl	8004edc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d32:	e7f1      	b.n	8004d18 <prvTimerTask+0x8>

08004d34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004d3e:	f7ff f9df 	bl	8004100 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d42:	f107 0308 	add.w	r3, r7, #8
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 f866 	bl	8004e18 <prvSampleTimeNow>
 8004d4c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d130      	bne.n	8004db6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10a      	bne.n	8004d70 <prvProcessTimerOrBlockTask+0x3c>
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d806      	bhi.n	8004d70 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004d62:	f7ff f9db 	bl	800411c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004d66:	68f9      	ldr	r1, [r7, #12]
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f7ff ff91 	bl	8004c90 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004d6e:	e024      	b.n	8004dba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d008      	beq.n	8004d88 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004d76:	4b13      	ldr	r3, [pc, #76]	; (8004dc4 <prvProcessTimerOrBlockTask+0x90>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	bf0c      	ite	eq
 8004d80:	2301      	moveq	r3, #1
 8004d82:	2300      	movne	r3, #0
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004d88:	4b0f      	ldr	r3, [pc, #60]	; (8004dc8 <prvProcessTimerOrBlockTask+0x94>)
 8004d8a:	6818      	ldr	r0, [r3, #0]
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	683a      	ldr	r2, [r7, #0]
 8004d94:	4619      	mov	r1, r3
 8004d96:	f7fe ff2b 	bl	8003bf0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004d9a:	f7ff f9bf 	bl	800411c <xTaskResumeAll>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10a      	bne.n	8004dba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004da4:	4b09      	ldr	r3, [pc, #36]	; (8004dcc <prvProcessTimerOrBlockTask+0x98>)
 8004da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004daa:	601a      	str	r2, [r3, #0]
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	f3bf 8f6f 	isb	sy
}
 8004db4:	e001      	b.n	8004dba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004db6:	f7ff f9b1 	bl	800411c <xTaskResumeAll>
}
 8004dba:	bf00      	nop
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	20000fb0 	.word	0x20000fb0
 8004dc8:	20000fb4 	.word	0x20000fb4
 8004dcc:	e000ed04 	.word	0xe000ed04

08004dd0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004dd8:	4b0e      	ldr	r3, [pc, #56]	; (8004e14 <prvGetNextExpireTime+0x44>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	bf0c      	ite	eq
 8004de2:	2301      	moveq	r3, #1
 8004de4:	2300      	movne	r3, #0
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	461a      	mov	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d105      	bne.n	8004e02 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004df6:	4b07      	ldr	r3, [pc, #28]	; (8004e14 <prvGetNextExpireTime+0x44>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	60fb      	str	r3, [r7, #12]
 8004e00:	e001      	b.n	8004e06 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004e02:	2300      	movs	r3, #0
 8004e04:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004e06:	68fb      	ldr	r3, [r7, #12]
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3714      	adds	r7, #20
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bc80      	pop	{r7}
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	20000fac 	.word	0x20000fac

08004e18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004e20:	f7ff fa1a 	bl	8004258 <xTaskGetTickCount>
 8004e24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004e26:	4b0b      	ldr	r3, [pc, #44]	; (8004e54 <prvSampleTimeNow+0x3c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d205      	bcs.n	8004e3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004e30:	f000 f908 	bl	8005044 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	601a      	str	r2, [r3, #0]
 8004e3a:	e002      	b.n	8004e42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004e42:	4a04      	ldr	r2, [pc, #16]	; (8004e54 <prvSampleTimeNow+0x3c>)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004e48:	68fb      	ldr	r3, [r7, #12]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	20000fbc 	.word	0x20000fbc

08004e58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
 8004e64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004e66:	2300      	movs	r3, #0
 8004e68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004e76:	68ba      	ldr	r2, [r7, #8]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d812      	bhi.n	8004ea4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	1ad2      	subs	r2, r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d302      	bcc.n	8004e92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	617b      	str	r3, [r7, #20]
 8004e90:	e01b      	b.n	8004eca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004e92:	4b10      	ldr	r3, [pc, #64]	; (8004ed4 <prvInsertTimerInActiveList+0x7c>)
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	3304      	adds	r3, #4
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	4610      	mov	r0, r2
 8004e9e:	f7fe f8d7 	bl	8003050 <vListInsert>
 8004ea2:	e012      	b.n	8004eca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d206      	bcs.n	8004eba <prvInsertTimerInActiveList+0x62>
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d302      	bcc.n	8004eba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	617b      	str	r3, [r7, #20]
 8004eb8:	e007      	b.n	8004eca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004eba:	4b07      	ldr	r3, [pc, #28]	; (8004ed8 <prvInsertTimerInActiveList+0x80>)
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	3304      	adds	r3, #4
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	4610      	mov	r0, r2
 8004ec6:	f7fe f8c3 	bl	8003050 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004eca:	697b      	ldr	r3, [r7, #20]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3718      	adds	r7, #24
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	20000fb0 	.word	0x20000fb0
 8004ed8:	20000fac 	.word	0x20000fac

08004edc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08e      	sub	sp, #56	; 0x38
 8004ee0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ee2:	e09d      	b.n	8005020 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	da18      	bge.n	8004f1c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004eea:	1d3b      	adds	r3, r7, #4
 8004eec:	3304      	adds	r3, #4
 8004eee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10a      	bne.n	8004f0c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efa:	f383 8811 	msr	BASEPRI, r3
 8004efe:	f3bf 8f6f 	isb	sy
 8004f02:	f3bf 8f4f 	dsb	sy
 8004f06:	61fb      	str	r3, [r7, #28]
}
 8004f08:	bf00      	nop
 8004f0a:	e7fe      	b.n	8004f0a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f12:	6850      	ldr	r0, [r2, #4]
 8004f14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f16:	6892      	ldr	r2, [r2, #8]
 8004f18:	4611      	mov	r1, r2
 8004f1a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	db7e      	blt.n	8005020 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d004      	beq.n	8004f38 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f30:	3304      	adds	r3, #4
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7fe f8c4 	bl	80030c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f38:	463b      	mov	r3, r7
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7ff ff6c 	bl	8004e18 <prvSampleTimeNow>
 8004f40:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2b09      	cmp	r3, #9
 8004f46:	d86a      	bhi.n	800501e <prvProcessReceivedCommands+0x142>
 8004f48:	a201      	add	r2, pc, #4	; (adr r2, 8004f50 <prvProcessReceivedCommands+0x74>)
 8004f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4e:	bf00      	nop
 8004f50:	08004f79 	.word	0x08004f79
 8004f54:	08004f79 	.word	0x08004f79
 8004f58:	08004f79 	.word	0x08004f79
 8004f5c:	08005021 	.word	0x08005021
 8004f60:	08004fd5 	.word	0x08004fd5
 8004f64:	0800500d 	.word	0x0800500d
 8004f68:	08004f79 	.word	0x08004f79
 8004f6c:	08004f79 	.word	0x08004f79
 8004f70:	08005021 	.word	0x08005021
 8004f74:	08004fd5 	.word	0x08004fd5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004f78:	68ba      	ldr	r2, [r7, #8]
 8004f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	18d1      	adds	r1, r2, r3
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f86:	f7ff ff67 	bl	8004e58 <prvInsertTimerInActiveList>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d047      	beq.n	8005020 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f96:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9a:	69db      	ldr	r3, [r3, #28]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d13f      	bne.n	8005020 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004fa0:	68ba      	ldr	r2, [r7, #8]
 8004fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	441a      	add	r2, r3
 8004fa8:	2300      	movs	r3, #0
 8004faa:	9300      	str	r3, [sp, #0]
 8004fac:	2300      	movs	r3, #0
 8004fae:	2100      	movs	r1, #0
 8004fb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fb2:	f7ff fe1f 	bl	8004bf4 <xTimerGenericCommand>
 8004fb6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d130      	bne.n	8005020 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc2:	f383 8811 	msr	BASEPRI, r3
 8004fc6:	f3bf 8f6f 	isb	sy
 8004fca:	f3bf 8f4f 	dsb	sy
 8004fce:	61bb      	str	r3, [r7, #24]
}
 8004fd0:	bf00      	nop
 8004fd2:	e7fe      	b.n	8004fd2 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004fd4:	68ba      	ldr	r2, [r7, #8]
 8004fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d10a      	bne.n	8004ff8 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8004fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe6:	f383 8811 	msr	BASEPRI, r3
 8004fea:	f3bf 8f6f 	isb	sy
 8004fee:	f3bf 8f4f 	dsb	sy
 8004ff2:	617b      	str	r3, [r7, #20]
}
 8004ff4:	bf00      	nop
 8004ff6:	e7fe      	b.n	8004ff6 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffa:	699a      	ldr	r2, [r3, #24]
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	18d1      	adds	r1, r2, r3
 8005000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005004:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005006:	f7ff ff27 	bl	8004e58 <prvInsertTimerInActiveList>
					break;
 800500a:	e009      	b.n	8005020 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800500c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005012:	2b00      	cmp	r3, #0
 8005014:	d104      	bne.n	8005020 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8005016:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005018:	f000 fb6c 	bl	80056f4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800501c:	e000      	b.n	8005020 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800501e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005020:	4b07      	ldr	r3, [pc, #28]	; (8005040 <prvProcessReceivedCommands+0x164>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	1d39      	adds	r1, r7, #4
 8005026:	2200      	movs	r2, #0
 8005028:	4618      	mov	r0, r3
 800502a:	f7fe fb49 	bl	80036c0 <xQueueReceive>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	f47f af57 	bne.w	8004ee4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005036:	bf00      	nop
 8005038:	bf00      	nop
 800503a:	3730      	adds	r7, #48	; 0x30
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	20000fb4 	.word	0x20000fb4

08005044 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b088      	sub	sp, #32
 8005048:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800504a:	e045      	b.n	80050d8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800504c:	4b2c      	ldr	r3, [pc, #176]	; (8005100 <prvSwitchTimerLists+0xbc>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005056:	4b2a      	ldr	r3, [pc, #168]	; (8005100 <prvSwitchTimerLists+0xbc>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	3304      	adds	r3, #4
 8005064:	4618      	mov	r0, r3
 8005066:	f7fe f82b 	bl	80030c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d12e      	bne.n	80050d8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	4413      	add	r3, r2
 8005082:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	429a      	cmp	r2, r3
 800508a:	d90e      	bls.n	80050aa <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	68ba      	ldr	r2, [r7, #8]
 8005090:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005098:	4b19      	ldr	r3, [pc, #100]	; (8005100 <prvSwitchTimerLists+0xbc>)
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	3304      	adds	r3, #4
 80050a0:	4619      	mov	r1, r3
 80050a2:	4610      	mov	r0, r2
 80050a4:	f7fd ffd4 	bl	8003050 <vListInsert>
 80050a8:	e016      	b.n	80050d8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80050aa:	2300      	movs	r3, #0
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	2300      	movs	r3, #0
 80050b0:	693a      	ldr	r2, [r7, #16]
 80050b2:	2100      	movs	r1, #0
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f7ff fd9d 	bl	8004bf4 <xTimerGenericCommand>
 80050ba:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10a      	bne.n	80050d8 <prvSwitchTimerLists+0x94>
	__asm volatile
 80050c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c6:	f383 8811 	msr	BASEPRI, r3
 80050ca:	f3bf 8f6f 	isb	sy
 80050ce:	f3bf 8f4f 	dsb	sy
 80050d2:	603b      	str	r3, [r7, #0]
}
 80050d4:	bf00      	nop
 80050d6:	e7fe      	b.n	80050d6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80050d8:	4b09      	ldr	r3, [pc, #36]	; (8005100 <prvSwitchTimerLists+0xbc>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1b4      	bne.n	800504c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80050e2:	4b07      	ldr	r3, [pc, #28]	; (8005100 <prvSwitchTimerLists+0xbc>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80050e8:	4b06      	ldr	r3, [pc, #24]	; (8005104 <prvSwitchTimerLists+0xc0>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a04      	ldr	r2, [pc, #16]	; (8005100 <prvSwitchTimerLists+0xbc>)
 80050ee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80050f0:	4a04      	ldr	r2, [pc, #16]	; (8005104 <prvSwitchTimerLists+0xc0>)
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	6013      	str	r3, [r2, #0]
}
 80050f6:	bf00      	nop
 80050f8:	3718      	adds	r7, #24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	20000fac 	.word	0x20000fac
 8005104:	20000fb0 	.word	0x20000fb0

08005108 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800510e:	f000 f92d 	bl	800536c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005112:	4b15      	ldr	r3, [pc, #84]	; (8005168 <prvCheckForValidListAndQueue+0x60>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d120      	bne.n	800515c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800511a:	4814      	ldr	r0, [pc, #80]	; (800516c <prvCheckForValidListAndQueue+0x64>)
 800511c:	f7fd ff4a 	bl	8002fb4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005120:	4813      	ldr	r0, [pc, #76]	; (8005170 <prvCheckForValidListAndQueue+0x68>)
 8005122:	f7fd ff47 	bl	8002fb4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005126:	4b13      	ldr	r3, [pc, #76]	; (8005174 <prvCheckForValidListAndQueue+0x6c>)
 8005128:	4a10      	ldr	r2, [pc, #64]	; (800516c <prvCheckForValidListAndQueue+0x64>)
 800512a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800512c:	4b12      	ldr	r3, [pc, #72]	; (8005178 <prvCheckForValidListAndQueue+0x70>)
 800512e:	4a10      	ldr	r2, [pc, #64]	; (8005170 <prvCheckForValidListAndQueue+0x68>)
 8005130:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005132:	2300      	movs	r3, #0
 8005134:	9300      	str	r3, [sp, #0]
 8005136:	4b11      	ldr	r3, [pc, #68]	; (800517c <prvCheckForValidListAndQueue+0x74>)
 8005138:	4a11      	ldr	r2, [pc, #68]	; (8005180 <prvCheckForValidListAndQueue+0x78>)
 800513a:	2110      	movs	r1, #16
 800513c:	200a      	movs	r0, #10
 800513e:	f7fe f851 	bl	80031e4 <xQueueGenericCreateStatic>
 8005142:	4603      	mov	r3, r0
 8005144:	4a08      	ldr	r2, [pc, #32]	; (8005168 <prvCheckForValidListAndQueue+0x60>)
 8005146:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005148:	4b07      	ldr	r3, [pc, #28]	; (8005168 <prvCheckForValidListAndQueue+0x60>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d005      	beq.n	800515c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005150:	4b05      	ldr	r3, [pc, #20]	; (8005168 <prvCheckForValidListAndQueue+0x60>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	490b      	ldr	r1, [pc, #44]	; (8005184 <prvCheckForValidListAndQueue+0x7c>)
 8005156:	4618      	mov	r0, r3
 8005158:	f7fe fd22 	bl	8003ba0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800515c:	f000 f936 	bl	80053cc <vPortExitCritical>
}
 8005160:	bf00      	nop
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	20000fb4 	.word	0x20000fb4
 800516c:	20000f84 	.word	0x20000f84
 8005170:	20000f98 	.word	0x20000f98
 8005174:	20000fac 	.word	0x20000fac
 8005178:	20000fb0 	.word	0x20000fb0
 800517c:	20001060 	.word	0x20001060
 8005180:	20000fc0 	.word	0x20000fc0
 8005184:	08005bbc 	.word	0x08005bbc

08005188 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	3b04      	subs	r3, #4
 8005198:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80051a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	3b04      	subs	r3, #4
 80051a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	f023 0201 	bic.w	r2, r3, #1
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	3b04      	subs	r3, #4
 80051b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80051b8:	4a08      	ldr	r2, [pc, #32]	; (80051dc <pxPortInitialiseStack+0x54>)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	3b14      	subs	r3, #20
 80051c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	3b20      	subs	r3, #32
 80051ce:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80051d0:	68fb      	ldr	r3, [r7, #12]
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3714      	adds	r7, #20
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bc80      	pop	{r7}
 80051da:	4770      	bx	lr
 80051dc:	080051e1 	.word	0x080051e1

080051e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80051e6:	2300      	movs	r3, #0
 80051e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80051ea:	4b12      	ldr	r3, [pc, #72]	; (8005234 <prvTaskExitError+0x54>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f2:	d00a      	beq.n	800520a <prvTaskExitError+0x2a>
	__asm volatile
 80051f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f8:	f383 8811 	msr	BASEPRI, r3
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	60fb      	str	r3, [r7, #12]
}
 8005206:	bf00      	nop
 8005208:	e7fe      	b.n	8005208 <prvTaskExitError+0x28>
	__asm volatile
 800520a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520e:	f383 8811 	msr	BASEPRI, r3
 8005212:	f3bf 8f6f 	isb	sy
 8005216:	f3bf 8f4f 	dsb	sy
 800521a:	60bb      	str	r3, [r7, #8]
}
 800521c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800521e:	bf00      	nop
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d0fc      	beq.n	8005220 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005226:	bf00      	nop
 8005228:	bf00      	nop
 800522a:	3714      	adds	r7, #20
 800522c:	46bd      	mov	sp, r7
 800522e:	bc80      	pop	{r7}
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	2000000c 	.word	0x2000000c
	...

08005240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005240:	4b07      	ldr	r3, [pc, #28]	; (8005260 <pxCurrentTCBConst2>)
 8005242:	6819      	ldr	r1, [r3, #0]
 8005244:	6808      	ldr	r0, [r1, #0]
 8005246:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800524a:	f380 8809 	msr	PSP, r0
 800524e:	f3bf 8f6f 	isb	sy
 8005252:	f04f 0000 	mov.w	r0, #0
 8005256:	f380 8811 	msr	BASEPRI, r0
 800525a:	f04e 0e0d 	orr.w	lr, lr, #13
 800525e:	4770      	bx	lr

08005260 <pxCurrentTCBConst2>:
 8005260:	20000a84 	.word	0x20000a84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005264:	bf00      	nop
 8005266:	bf00      	nop

08005268 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005268:	4806      	ldr	r0, [pc, #24]	; (8005284 <prvPortStartFirstTask+0x1c>)
 800526a:	6800      	ldr	r0, [r0, #0]
 800526c:	6800      	ldr	r0, [r0, #0]
 800526e:	f380 8808 	msr	MSP, r0
 8005272:	b662      	cpsie	i
 8005274:	b661      	cpsie	f
 8005276:	f3bf 8f4f 	dsb	sy
 800527a:	f3bf 8f6f 	isb	sy
 800527e:	df00      	svc	0
 8005280:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005282:	bf00      	nop
 8005284:	e000ed08 	.word	0xe000ed08

08005288 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800528e:	4b32      	ldr	r3, [pc, #200]	; (8005358 <xPortStartScheduler+0xd0>)
 8005290:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	b2db      	uxtb	r3, r3
 8005298:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	22ff      	movs	r2, #255	; 0xff
 800529e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80052a8:	78fb      	ldrb	r3, [r7, #3]
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80052b0:	b2da      	uxtb	r2, r3
 80052b2:	4b2a      	ldr	r3, [pc, #168]	; (800535c <xPortStartScheduler+0xd4>)
 80052b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80052b6:	4b2a      	ldr	r3, [pc, #168]	; (8005360 <xPortStartScheduler+0xd8>)
 80052b8:	2207      	movs	r2, #7
 80052ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052bc:	e009      	b.n	80052d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80052be:	4b28      	ldr	r3, [pc, #160]	; (8005360 <xPortStartScheduler+0xd8>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	3b01      	subs	r3, #1
 80052c4:	4a26      	ldr	r2, [pc, #152]	; (8005360 <xPortStartScheduler+0xd8>)
 80052c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80052c8:	78fb      	ldrb	r3, [r7, #3]
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	005b      	lsls	r3, r3, #1
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052d2:	78fb      	ldrb	r3, [r7, #3]
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052da:	2b80      	cmp	r3, #128	; 0x80
 80052dc:	d0ef      	beq.n	80052be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80052de:	4b20      	ldr	r3, [pc, #128]	; (8005360 <xPortStartScheduler+0xd8>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f1c3 0307 	rsb	r3, r3, #7
 80052e6:	2b04      	cmp	r3, #4
 80052e8:	d00a      	beq.n	8005300 <xPortStartScheduler+0x78>
	__asm volatile
 80052ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	60bb      	str	r3, [r7, #8]
}
 80052fc:	bf00      	nop
 80052fe:	e7fe      	b.n	80052fe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005300:	4b17      	ldr	r3, [pc, #92]	; (8005360 <xPortStartScheduler+0xd8>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	021b      	lsls	r3, r3, #8
 8005306:	4a16      	ldr	r2, [pc, #88]	; (8005360 <xPortStartScheduler+0xd8>)
 8005308:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800530a:	4b15      	ldr	r3, [pc, #84]	; (8005360 <xPortStartScheduler+0xd8>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005312:	4a13      	ldr	r2, [pc, #76]	; (8005360 <xPortStartScheduler+0xd8>)
 8005314:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	b2da      	uxtb	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800531e:	4b11      	ldr	r3, [pc, #68]	; (8005364 <xPortStartScheduler+0xdc>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a10      	ldr	r2, [pc, #64]	; (8005364 <xPortStartScheduler+0xdc>)
 8005324:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005328:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800532a:	4b0e      	ldr	r3, [pc, #56]	; (8005364 <xPortStartScheduler+0xdc>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a0d      	ldr	r2, [pc, #52]	; (8005364 <xPortStartScheduler+0xdc>)
 8005330:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005334:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005336:	f000 f8b9 	bl	80054ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800533a:	4b0b      	ldr	r3, [pc, #44]	; (8005368 <xPortStartScheduler+0xe0>)
 800533c:	2200      	movs	r2, #0
 800533e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005340:	f7ff ff92 	bl	8005268 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005344:	f7ff f854 	bl	80043f0 <vTaskSwitchContext>
	prvTaskExitError();
 8005348:	f7ff ff4a 	bl	80051e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	e000e400 	.word	0xe000e400
 800535c:	200010b0 	.word	0x200010b0
 8005360:	200010b4 	.word	0x200010b4
 8005364:	e000ed20 	.word	0xe000ed20
 8005368:	2000000c 	.word	0x2000000c

0800536c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
	__asm volatile
 8005372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005376:	f383 8811 	msr	BASEPRI, r3
 800537a:	f3bf 8f6f 	isb	sy
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	607b      	str	r3, [r7, #4]
}
 8005384:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005386:	4b0f      	ldr	r3, [pc, #60]	; (80053c4 <vPortEnterCritical+0x58>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	3301      	adds	r3, #1
 800538c:	4a0d      	ldr	r2, [pc, #52]	; (80053c4 <vPortEnterCritical+0x58>)
 800538e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005390:	4b0c      	ldr	r3, [pc, #48]	; (80053c4 <vPortEnterCritical+0x58>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d10f      	bne.n	80053b8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005398:	4b0b      	ldr	r3, [pc, #44]	; (80053c8 <vPortEnterCritical+0x5c>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00a      	beq.n	80053b8 <vPortEnterCritical+0x4c>
	__asm volatile
 80053a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a6:	f383 8811 	msr	BASEPRI, r3
 80053aa:	f3bf 8f6f 	isb	sy
 80053ae:	f3bf 8f4f 	dsb	sy
 80053b2:	603b      	str	r3, [r7, #0]
}
 80053b4:	bf00      	nop
 80053b6:	e7fe      	b.n	80053b6 <vPortEnterCritical+0x4a>
	}
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	bc80      	pop	{r7}
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	2000000c 	.word	0x2000000c
 80053c8:	e000ed04 	.word	0xe000ed04

080053cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80053d2:	4b11      	ldr	r3, [pc, #68]	; (8005418 <vPortExitCritical+0x4c>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d10a      	bne.n	80053f0 <vPortExitCritical+0x24>
	__asm volatile
 80053da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053de:	f383 8811 	msr	BASEPRI, r3
 80053e2:	f3bf 8f6f 	isb	sy
 80053e6:	f3bf 8f4f 	dsb	sy
 80053ea:	607b      	str	r3, [r7, #4]
}
 80053ec:	bf00      	nop
 80053ee:	e7fe      	b.n	80053ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80053f0:	4b09      	ldr	r3, [pc, #36]	; (8005418 <vPortExitCritical+0x4c>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	3b01      	subs	r3, #1
 80053f6:	4a08      	ldr	r2, [pc, #32]	; (8005418 <vPortExitCritical+0x4c>)
 80053f8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80053fa:	4b07      	ldr	r3, [pc, #28]	; (8005418 <vPortExitCritical+0x4c>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d105      	bne.n	800540e <vPortExitCritical+0x42>
 8005402:	2300      	movs	r3, #0
 8005404:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	f383 8811 	msr	BASEPRI, r3
}
 800540c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800540e:	bf00      	nop
 8005410:	370c      	adds	r7, #12
 8005412:	46bd      	mov	sp, r7
 8005414:	bc80      	pop	{r7}
 8005416:	4770      	bx	lr
 8005418:	2000000c 	.word	0x2000000c
 800541c:	00000000 	.word	0x00000000

08005420 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005420:	f3ef 8009 	mrs	r0, PSP
 8005424:	f3bf 8f6f 	isb	sy
 8005428:	4b0d      	ldr	r3, [pc, #52]	; (8005460 <pxCurrentTCBConst>)
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005430:	6010      	str	r0, [r2, #0]
 8005432:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005436:	f04f 0050 	mov.w	r0, #80	; 0x50
 800543a:	f380 8811 	msr	BASEPRI, r0
 800543e:	f7fe ffd7 	bl	80043f0 <vTaskSwitchContext>
 8005442:	f04f 0000 	mov.w	r0, #0
 8005446:	f380 8811 	msr	BASEPRI, r0
 800544a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800544e:	6819      	ldr	r1, [r3, #0]
 8005450:	6808      	ldr	r0, [r1, #0]
 8005452:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005456:	f380 8809 	msr	PSP, r0
 800545a:	f3bf 8f6f 	isb	sy
 800545e:	4770      	bx	lr

08005460 <pxCurrentTCBConst>:
 8005460:	20000a84 	.word	0x20000a84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005464:	bf00      	nop
 8005466:	bf00      	nop

08005468 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
	__asm volatile
 800546e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005472:	f383 8811 	msr	BASEPRI, r3
 8005476:	f3bf 8f6f 	isb	sy
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	607b      	str	r3, [r7, #4]
}
 8005480:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005482:	f7fe fef7 	bl	8004274 <xTaskIncrementTick>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d003      	beq.n	8005494 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800548c:	4b06      	ldr	r3, [pc, #24]	; (80054a8 <xPortSysTickHandler+0x40>)
 800548e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005492:	601a      	str	r2, [r3, #0]
 8005494:	2300      	movs	r3, #0
 8005496:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	f383 8811 	msr	BASEPRI, r3
}
 800549e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80054a0:	bf00      	nop
 80054a2:	3708      	adds	r7, #8
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	e000ed04 	.word	0xe000ed04

080054ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80054ac:	b480      	push	{r7}
 80054ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80054b0:	4b0a      	ldr	r3, [pc, #40]	; (80054dc <vPortSetupTimerInterrupt+0x30>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80054b6:	4b0a      	ldr	r3, [pc, #40]	; (80054e0 <vPortSetupTimerInterrupt+0x34>)
 80054b8:	2200      	movs	r2, #0
 80054ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80054bc:	4b09      	ldr	r3, [pc, #36]	; (80054e4 <vPortSetupTimerInterrupt+0x38>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a09      	ldr	r2, [pc, #36]	; (80054e8 <vPortSetupTimerInterrupt+0x3c>)
 80054c2:	fba2 2303 	umull	r2, r3, r2, r3
 80054c6:	099b      	lsrs	r3, r3, #6
 80054c8:	4a08      	ldr	r2, [pc, #32]	; (80054ec <vPortSetupTimerInterrupt+0x40>)
 80054ca:	3b01      	subs	r3, #1
 80054cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80054ce:	4b03      	ldr	r3, [pc, #12]	; (80054dc <vPortSetupTimerInterrupt+0x30>)
 80054d0:	2207      	movs	r2, #7
 80054d2:	601a      	str	r2, [r3, #0]
}
 80054d4:	bf00      	nop
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bc80      	pop	{r7}
 80054da:	4770      	bx	lr
 80054dc:	e000e010 	.word	0xe000e010
 80054e0:	e000e018 	.word	0xe000e018
 80054e4:	20000000 	.word	0x20000000
 80054e8:	10624dd3 	.word	0x10624dd3
 80054ec:	e000e014 	.word	0xe000e014

080054f0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80054f6:	f3ef 8305 	mrs	r3, IPSR
 80054fa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2b0f      	cmp	r3, #15
 8005500:	d914      	bls.n	800552c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005502:	4a16      	ldr	r2, [pc, #88]	; (800555c <vPortValidateInterruptPriority+0x6c>)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	4413      	add	r3, r2
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800550c:	4b14      	ldr	r3, [pc, #80]	; (8005560 <vPortValidateInterruptPriority+0x70>)
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	7afa      	ldrb	r2, [r7, #11]
 8005512:	429a      	cmp	r2, r3
 8005514:	d20a      	bcs.n	800552c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551a:	f383 8811 	msr	BASEPRI, r3
 800551e:	f3bf 8f6f 	isb	sy
 8005522:	f3bf 8f4f 	dsb	sy
 8005526:	607b      	str	r3, [r7, #4]
}
 8005528:	bf00      	nop
 800552a:	e7fe      	b.n	800552a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800552c:	4b0d      	ldr	r3, [pc, #52]	; (8005564 <vPortValidateInterruptPriority+0x74>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005534:	4b0c      	ldr	r3, [pc, #48]	; (8005568 <vPortValidateInterruptPriority+0x78>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	429a      	cmp	r2, r3
 800553a:	d90a      	bls.n	8005552 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800553c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005540:	f383 8811 	msr	BASEPRI, r3
 8005544:	f3bf 8f6f 	isb	sy
 8005548:	f3bf 8f4f 	dsb	sy
 800554c:	603b      	str	r3, [r7, #0]
}
 800554e:	bf00      	nop
 8005550:	e7fe      	b.n	8005550 <vPortValidateInterruptPriority+0x60>
	}
 8005552:	bf00      	nop
 8005554:	3714      	adds	r7, #20
 8005556:	46bd      	mov	sp, r7
 8005558:	bc80      	pop	{r7}
 800555a:	4770      	bx	lr
 800555c:	e000e3f0 	.word	0xe000e3f0
 8005560:	200010b0 	.word	0x200010b0
 8005564:	e000ed0c 	.word	0xe000ed0c
 8005568:	200010b4 	.word	0x200010b4

0800556c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b08a      	sub	sp, #40	; 0x28
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005574:	2300      	movs	r3, #0
 8005576:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005578:	f7fe fdc2 	bl	8004100 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800557c:	4b58      	ldr	r3, [pc, #352]	; (80056e0 <pvPortMalloc+0x174>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d101      	bne.n	8005588 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005584:	f000 f910 	bl	80057a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005588:	4b56      	ldr	r3, [pc, #344]	; (80056e4 <pvPortMalloc+0x178>)
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4013      	ands	r3, r2
 8005590:	2b00      	cmp	r3, #0
 8005592:	f040 808e 	bne.w	80056b2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d01d      	beq.n	80055d8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800559c:	2208      	movs	r2, #8
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4413      	add	r3, r2
 80055a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f003 0307 	and.w	r3, r3, #7
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d014      	beq.n	80055d8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f023 0307 	bic.w	r3, r3, #7
 80055b4:	3308      	adds	r3, #8
 80055b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f003 0307 	and.w	r3, r3, #7
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00a      	beq.n	80055d8 <pvPortMalloc+0x6c>
	__asm volatile
 80055c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c6:	f383 8811 	msr	BASEPRI, r3
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	f3bf 8f4f 	dsb	sy
 80055d2:	617b      	str	r3, [r7, #20]
}
 80055d4:	bf00      	nop
 80055d6:	e7fe      	b.n	80055d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d069      	beq.n	80056b2 <pvPortMalloc+0x146>
 80055de:	4b42      	ldr	r3, [pc, #264]	; (80056e8 <pvPortMalloc+0x17c>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d864      	bhi.n	80056b2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80055e8:	4b40      	ldr	r3, [pc, #256]	; (80056ec <pvPortMalloc+0x180>)
 80055ea:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80055ec:	4b3f      	ldr	r3, [pc, #252]	; (80056ec <pvPortMalloc+0x180>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055f2:	e004      	b.n	80055fe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80055f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80055f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	429a      	cmp	r2, r3
 8005606:	d903      	bls.n	8005610 <pvPortMalloc+0xa4>
 8005608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1f1      	bne.n	80055f4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005610:	4b33      	ldr	r3, [pc, #204]	; (80056e0 <pvPortMalloc+0x174>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005616:	429a      	cmp	r2, r3
 8005618:	d04b      	beq.n	80056b2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800561a:	6a3b      	ldr	r3, [r7, #32]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2208      	movs	r2, #8
 8005620:	4413      	add	r3, r2
 8005622:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	6a3b      	ldr	r3, [r7, #32]
 800562a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	1ad2      	subs	r2, r2, r3
 8005634:	2308      	movs	r3, #8
 8005636:	005b      	lsls	r3, r3, #1
 8005638:	429a      	cmp	r2, r3
 800563a:	d91f      	bls.n	800567c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800563c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4413      	add	r3, r2
 8005642:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	f003 0307 	and.w	r3, r3, #7
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00a      	beq.n	8005664 <pvPortMalloc+0xf8>
	__asm volatile
 800564e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005652:	f383 8811 	msr	BASEPRI, r3
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	613b      	str	r3, [r7, #16]
}
 8005660:	bf00      	nop
 8005662:	e7fe      	b.n	8005662 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005666:	685a      	ldr	r2, [r3, #4]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	1ad2      	subs	r2, r2, r3
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005676:	69b8      	ldr	r0, [r7, #24]
 8005678:	f000 f8f8 	bl	800586c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800567c:	4b1a      	ldr	r3, [pc, #104]	; (80056e8 <pvPortMalloc+0x17c>)
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	4a18      	ldr	r2, [pc, #96]	; (80056e8 <pvPortMalloc+0x17c>)
 8005688:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800568a:	4b17      	ldr	r3, [pc, #92]	; (80056e8 <pvPortMalloc+0x17c>)
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	4b18      	ldr	r3, [pc, #96]	; (80056f0 <pvPortMalloc+0x184>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	429a      	cmp	r2, r3
 8005694:	d203      	bcs.n	800569e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005696:	4b14      	ldr	r3, [pc, #80]	; (80056e8 <pvPortMalloc+0x17c>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a15      	ldr	r2, [pc, #84]	; (80056f0 <pvPortMalloc+0x184>)
 800569c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	685a      	ldr	r2, [r3, #4]
 80056a2:	4b10      	ldr	r3, [pc, #64]	; (80056e4 <pvPortMalloc+0x178>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	431a      	orrs	r2, r3
 80056a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80056ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ae:	2200      	movs	r2, #0
 80056b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80056b2:	f7fe fd33 	bl	800411c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	f003 0307 	and.w	r3, r3, #7
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00a      	beq.n	80056d6 <pvPortMalloc+0x16a>
	__asm volatile
 80056c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c4:	f383 8811 	msr	BASEPRI, r3
 80056c8:	f3bf 8f6f 	isb	sy
 80056cc:	f3bf 8f4f 	dsb	sy
 80056d0:	60fb      	str	r3, [r7, #12]
}
 80056d2:	bf00      	nop
 80056d4:	e7fe      	b.n	80056d4 <pvPortMalloc+0x168>
	return pvReturn;
 80056d6:	69fb      	ldr	r3, [r7, #28]
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3728      	adds	r7, #40	; 0x28
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	200030c0 	.word	0x200030c0
 80056e4:	200030cc 	.word	0x200030cc
 80056e8:	200030c4 	.word	0x200030c4
 80056ec:	200030b8 	.word	0x200030b8
 80056f0:	200030c8 	.word	0x200030c8

080056f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d048      	beq.n	8005798 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005706:	2308      	movs	r3, #8
 8005708:	425b      	negs	r3, r3
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	4413      	add	r3, r2
 800570e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	685a      	ldr	r2, [r3, #4]
 8005718:	4b21      	ldr	r3, [pc, #132]	; (80057a0 <vPortFree+0xac>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4013      	ands	r3, r2
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10a      	bne.n	8005738 <vPortFree+0x44>
	__asm volatile
 8005722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005726:	f383 8811 	msr	BASEPRI, r3
 800572a:	f3bf 8f6f 	isb	sy
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	60fb      	str	r3, [r7, #12]
}
 8005734:	bf00      	nop
 8005736:	e7fe      	b.n	8005736 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00a      	beq.n	8005756 <vPortFree+0x62>
	__asm volatile
 8005740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005744:	f383 8811 	msr	BASEPRI, r3
 8005748:	f3bf 8f6f 	isb	sy
 800574c:	f3bf 8f4f 	dsb	sy
 8005750:	60bb      	str	r3, [r7, #8]
}
 8005752:	bf00      	nop
 8005754:	e7fe      	b.n	8005754 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	685a      	ldr	r2, [r3, #4]
 800575a:	4b11      	ldr	r3, [pc, #68]	; (80057a0 <vPortFree+0xac>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4013      	ands	r3, r2
 8005760:	2b00      	cmp	r3, #0
 8005762:	d019      	beq.n	8005798 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d115      	bne.n	8005798 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	685a      	ldr	r2, [r3, #4]
 8005770:	4b0b      	ldr	r3, [pc, #44]	; (80057a0 <vPortFree+0xac>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	43db      	mvns	r3, r3
 8005776:	401a      	ands	r2, r3
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800577c:	f7fe fcc0 	bl	8004100 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	4b07      	ldr	r3, [pc, #28]	; (80057a4 <vPortFree+0xb0>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4413      	add	r3, r2
 800578a:	4a06      	ldr	r2, [pc, #24]	; (80057a4 <vPortFree+0xb0>)
 800578c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800578e:	6938      	ldr	r0, [r7, #16]
 8005790:	f000 f86c 	bl	800586c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005794:	f7fe fcc2 	bl	800411c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005798:	bf00      	nop
 800579a:	3718      	adds	r7, #24
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	200030cc 	.word	0x200030cc
 80057a4:	200030c4 	.word	0x200030c4

080057a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80057ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80057b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80057b4:	4b27      	ldr	r3, [pc, #156]	; (8005854 <prvHeapInit+0xac>)
 80057b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f003 0307 	and.w	r3, r3, #7
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00c      	beq.n	80057dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	3307      	adds	r3, #7
 80057c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f023 0307 	bic.w	r3, r3, #7
 80057ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80057d0:	68ba      	ldr	r2, [r7, #8]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	4a1f      	ldr	r2, [pc, #124]	; (8005854 <prvHeapInit+0xac>)
 80057d8:	4413      	add	r3, r2
 80057da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80057e0:	4a1d      	ldr	r2, [pc, #116]	; (8005858 <prvHeapInit+0xb0>)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80057e6:	4b1c      	ldr	r3, [pc, #112]	; (8005858 <prvHeapInit+0xb0>)
 80057e8:	2200      	movs	r2, #0
 80057ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	4413      	add	r3, r2
 80057f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80057f4:	2208      	movs	r2, #8
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	1a9b      	subs	r3, r3, r2
 80057fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f023 0307 	bic.w	r3, r3, #7
 8005802:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	4a15      	ldr	r2, [pc, #84]	; (800585c <prvHeapInit+0xb4>)
 8005808:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800580a:	4b14      	ldr	r3, [pc, #80]	; (800585c <prvHeapInit+0xb4>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2200      	movs	r2, #0
 8005810:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005812:	4b12      	ldr	r3, [pc, #72]	; (800585c <prvHeapInit+0xb4>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2200      	movs	r2, #0
 8005818:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	1ad2      	subs	r2, r2, r3
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005828:	4b0c      	ldr	r3, [pc, #48]	; (800585c <prvHeapInit+0xb4>)
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	4a0a      	ldr	r2, [pc, #40]	; (8005860 <prvHeapInit+0xb8>)
 8005836:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	4a09      	ldr	r2, [pc, #36]	; (8005864 <prvHeapInit+0xbc>)
 800583e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005840:	4b09      	ldr	r3, [pc, #36]	; (8005868 <prvHeapInit+0xc0>)
 8005842:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005846:	601a      	str	r2, [r3, #0]
}
 8005848:	bf00      	nop
 800584a:	3714      	adds	r7, #20
 800584c:	46bd      	mov	sp, r7
 800584e:	bc80      	pop	{r7}
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	200010b8 	.word	0x200010b8
 8005858:	200030b8 	.word	0x200030b8
 800585c:	200030c0 	.word	0x200030c0
 8005860:	200030c8 	.word	0x200030c8
 8005864:	200030c4 	.word	0x200030c4
 8005868:	200030cc 	.word	0x200030cc

0800586c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005874:	4b27      	ldr	r3, [pc, #156]	; (8005914 <prvInsertBlockIntoFreeList+0xa8>)
 8005876:	60fb      	str	r3, [r7, #12]
 8005878:	e002      	b.n	8005880 <prvInsertBlockIntoFreeList+0x14>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	60fb      	str	r3, [r7, #12]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	429a      	cmp	r2, r3
 8005888:	d8f7      	bhi.n	800587a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	4413      	add	r3, r2
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	429a      	cmp	r2, r3
 800589a:	d108      	bne.n	80058ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	685a      	ldr	r2, [r3, #4]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	441a      	add	r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	441a      	add	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	429a      	cmp	r2, r3
 80058c0:	d118      	bne.n	80058f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	4b14      	ldr	r3, [pc, #80]	; (8005918 <prvInsertBlockIntoFreeList+0xac>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d00d      	beq.n	80058ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	441a      	add	r2, r3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	601a      	str	r2, [r3, #0]
 80058e8:	e008      	b.n	80058fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80058ea:	4b0b      	ldr	r3, [pc, #44]	; (8005918 <prvInsertBlockIntoFreeList+0xac>)
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	601a      	str	r2, [r3, #0]
 80058f2:	e003      	b.n	80058fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	429a      	cmp	r2, r3
 8005902:	d002      	beq.n	800590a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800590a:	bf00      	nop
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	bc80      	pop	{r7}
 8005912:	4770      	bx	lr
 8005914:	200030b8 	.word	0x200030b8
 8005918:	200030c0 	.word	0x200030c0

0800591c <memset>:
 800591c:	4603      	mov	r3, r0
 800591e:	4402      	add	r2, r0
 8005920:	4293      	cmp	r3, r2
 8005922:	d100      	bne.n	8005926 <memset+0xa>
 8005924:	4770      	bx	lr
 8005926:	f803 1b01 	strb.w	r1, [r3], #1
 800592a:	e7f9      	b.n	8005920 <memset+0x4>

0800592c <_reclaim_reent>:
 800592c:	4b29      	ldr	r3, [pc, #164]	; (80059d4 <_reclaim_reent+0xa8>)
 800592e:	b570      	push	{r4, r5, r6, lr}
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4604      	mov	r4, r0
 8005934:	4283      	cmp	r3, r0
 8005936:	d04b      	beq.n	80059d0 <_reclaim_reent+0xa4>
 8005938:	69c3      	ldr	r3, [r0, #28]
 800593a:	b143      	cbz	r3, 800594e <_reclaim_reent+0x22>
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d144      	bne.n	80059cc <_reclaim_reent+0xa0>
 8005942:	69e3      	ldr	r3, [r4, #28]
 8005944:	6819      	ldr	r1, [r3, #0]
 8005946:	b111      	cbz	r1, 800594e <_reclaim_reent+0x22>
 8005948:	4620      	mov	r0, r4
 800594a:	f000 f879 	bl	8005a40 <_free_r>
 800594e:	6961      	ldr	r1, [r4, #20]
 8005950:	b111      	cbz	r1, 8005958 <_reclaim_reent+0x2c>
 8005952:	4620      	mov	r0, r4
 8005954:	f000 f874 	bl	8005a40 <_free_r>
 8005958:	69e1      	ldr	r1, [r4, #28]
 800595a:	b111      	cbz	r1, 8005962 <_reclaim_reent+0x36>
 800595c:	4620      	mov	r0, r4
 800595e:	f000 f86f 	bl	8005a40 <_free_r>
 8005962:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005964:	b111      	cbz	r1, 800596c <_reclaim_reent+0x40>
 8005966:	4620      	mov	r0, r4
 8005968:	f000 f86a 	bl	8005a40 <_free_r>
 800596c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800596e:	b111      	cbz	r1, 8005976 <_reclaim_reent+0x4a>
 8005970:	4620      	mov	r0, r4
 8005972:	f000 f865 	bl	8005a40 <_free_r>
 8005976:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005978:	b111      	cbz	r1, 8005980 <_reclaim_reent+0x54>
 800597a:	4620      	mov	r0, r4
 800597c:	f000 f860 	bl	8005a40 <_free_r>
 8005980:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005982:	b111      	cbz	r1, 800598a <_reclaim_reent+0x5e>
 8005984:	4620      	mov	r0, r4
 8005986:	f000 f85b 	bl	8005a40 <_free_r>
 800598a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800598c:	b111      	cbz	r1, 8005994 <_reclaim_reent+0x68>
 800598e:	4620      	mov	r0, r4
 8005990:	f000 f856 	bl	8005a40 <_free_r>
 8005994:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005996:	b111      	cbz	r1, 800599e <_reclaim_reent+0x72>
 8005998:	4620      	mov	r0, r4
 800599a:	f000 f851 	bl	8005a40 <_free_r>
 800599e:	6a23      	ldr	r3, [r4, #32]
 80059a0:	b1b3      	cbz	r3, 80059d0 <_reclaim_reent+0xa4>
 80059a2:	4620      	mov	r0, r4
 80059a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80059a8:	4718      	bx	r3
 80059aa:	5949      	ldr	r1, [r1, r5]
 80059ac:	b941      	cbnz	r1, 80059c0 <_reclaim_reent+0x94>
 80059ae:	3504      	adds	r5, #4
 80059b0:	69e3      	ldr	r3, [r4, #28]
 80059b2:	2d80      	cmp	r5, #128	; 0x80
 80059b4:	68d9      	ldr	r1, [r3, #12]
 80059b6:	d1f8      	bne.n	80059aa <_reclaim_reent+0x7e>
 80059b8:	4620      	mov	r0, r4
 80059ba:	f000 f841 	bl	8005a40 <_free_r>
 80059be:	e7c0      	b.n	8005942 <_reclaim_reent+0x16>
 80059c0:	680e      	ldr	r6, [r1, #0]
 80059c2:	4620      	mov	r0, r4
 80059c4:	f000 f83c 	bl	8005a40 <_free_r>
 80059c8:	4631      	mov	r1, r6
 80059ca:	e7ef      	b.n	80059ac <_reclaim_reent+0x80>
 80059cc:	2500      	movs	r5, #0
 80059ce:	e7ef      	b.n	80059b0 <_reclaim_reent+0x84>
 80059d0:	bd70      	pop	{r4, r5, r6, pc}
 80059d2:	bf00      	nop
 80059d4:	2000005c 	.word	0x2000005c

080059d8 <__libc_init_array>:
 80059d8:	b570      	push	{r4, r5, r6, lr}
 80059da:	2600      	movs	r6, #0
 80059dc:	4d0c      	ldr	r5, [pc, #48]	; (8005a10 <__libc_init_array+0x38>)
 80059de:	4c0d      	ldr	r4, [pc, #52]	; (8005a14 <__libc_init_array+0x3c>)
 80059e0:	1b64      	subs	r4, r4, r5
 80059e2:	10a4      	asrs	r4, r4, #2
 80059e4:	42a6      	cmp	r6, r4
 80059e6:	d109      	bne.n	80059fc <__libc_init_array+0x24>
 80059e8:	f000 f87e 	bl	8005ae8 <_init>
 80059ec:	2600      	movs	r6, #0
 80059ee:	4d0a      	ldr	r5, [pc, #40]	; (8005a18 <__libc_init_array+0x40>)
 80059f0:	4c0a      	ldr	r4, [pc, #40]	; (8005a1c <__libc_init_array+0x44>)
 80059f2:	1b64      	subs	r4, r4, r5
 80059f4:	10a4      	asrs	r4, r4, #2
 80059f6:	42a6      	cmp	r6, r4
 80059f8:	d105      	bne.n	8005a06 <__libc_init_array+0x2e>
 80059fa:	bd70      	pop	{r4, r5, r6, pc}
 80059fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a00:	4798      	blx	r3
 8005a02:	3601      	adds	r6, #1
 8005a04:	e7ee      	b.n	80059e4 <__libc_init_array+0xc>
 8005a06:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a0a:	4798      	blx	r3
 8005a0c:	3601      	adds	r6, #1
 8005a0e:	e7f2      	b.n	80059f6 <__libc_init_array+0x1e>
 8005a10:	08005d40 	.word	0x08005d40
 8005a14:	08005d40 	.word	0x08005d40
 8005a18:	08005d40 	.word	0x08005d40
 8005a1c:	08005d44 	.word	0x08005d44

08005a20 <__retarget_lock_acquire_recursive>:
 8005a20:	4770      	bx	lr

08005a22 <__retarget_lock_release_recursive>:
 8005a22:	4770      	bx	lr

08005a24 <memcpy>:
 8005a24:	440a      	add	r2, r1
 8005a26:	4291      	cmp	r1, r2
 8005a28:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a2c:	d100      	bne.n	8005a30 <memcpy+0xc>
 8005a2e:	4770      	bx	lr
 8005a30:	b510      	push	{r4, lr}
 8005a32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a36:	4291      	cmp	r1, r2
 8005a38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a3c:	d1f9      	bne.n	8005a32 <memcpy+0xe>
 8005a3e:	bd10      	pop	{r4, pc}

08005a40 <_free_r>:
 8005a40:	b538      	push	{r3, r4, r5, lr}
 8005a42:	4605      	mov	r5, r0
 8005a44:	2900      	cmp	r1, #0
 8005a46:	d040      	beq.n	8005aca <_free_r+0x8a>
 8005a48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a4c:	1f0c      	subs	r4, r1, #4
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	bfb8      	it	lt
 8005a52:	18e4      	addlt	r4, r4, r3
 8005a54:	f000 f83c 	bl	8005ad0 <__malloc_lock>
 8005a58:	4a1c      	ldr	r2, [pc, #112]	; (8005acc <_free_r+0x8c>)
 8005a5a:	6813      	ldr	r3, [r2, #0]
 8005a5c:	b933      	cbnz	r3, 8005a6c <_free_r+0x2c>
 8005a5e:	6063      	str	r3, [r4, #4]
 8005a60:	6014      	str	r4, [r2, #0]
 8005a62:	4628      	mov	r0, r5
 8005a64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a68:	f000 b838 	b.w	8005adc <__malloc_unlock>
 8005a6c:	42a3      	cmp	r3, r4
 8005a6e:	d908      	bls.n	8005a82 <_free_r+0x42>
 8005a70:	6820      	ldr	r0, [r4, #0]
 8005a72:	1821      	adds	r1, r4, r0
 8005a74:	428b      	cmp	r3, r1
 8005a76:	bf01      	itttt	eq
 8005a78:	6819      	ldreq	r1, [r3, #0]
 8005a7a:	685b      	ldreq	r3, [r3, #4]
 8005a7c:	1809      	addeq	r1, r1, r0
 8005a7e:	6021      	streq	r1, [r4, #0]
 8005a80:	e7ed      	b.n	8005a5e <_free_r+0x1e>
 8005a82:	461a      	mov	r2, r3
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	b10b      	cbz	r3, 8005a8c <_free_r+0x4c>
 8005a88:	42a3      	cmp	r3, r4
 8005a8a:	d9fa      	bls.n	8005a82 <_free_r+0x42>
 8005a8c:	6811      	ldr	r1, [r2, #0]
 8005a8e:	1850      	adds	r0, r2, r1
 8005a90:	42a0      	cmp	r0, r4
 8005a92:	d10b      	bne.n	8005aac <_free_r+0x6c>
 8005a94:	6820      	ldr	r0, [r4, #0]
 8005a96:	4401      	add	r1, r0
 8005a98:	1850      	adds	r0, r2, r1
 8005a9a:	4283      	cmp	r3, r0
 8005a9c:	6011      	str	r1, [r2, #0]
 8005a9e:	d1e0      	bne.n	8005a62 <_free_r+0x22>
 8005aa0:	6818      	ldr	r0, [r3, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	4408      	add	r0, r1
 8005aa6:	6010      	str	r0, [r2, #0]
 8005aa8:	6053      	str	r3, [r2, #4]
 8005aaa:	e7da      	b.n	8005a62 <_free_r+0x22>
 8005aac:	d902      	bls.n	8005ab4 <_free_r+0x74>
 8005aae:	230c      	movs	r3, #12
 8005ab0:	602b      	str	r3, [r5, #0]
 8005ab2:	e7d6      	b.n	8005a62 <_free_r+0x22>
 8005ab4:	6820      	ldr	r0, [r4, #0]
 8005ab6:	1821      	adds	r1, r4, r0
 8005ab8:	428b      	cmp	r3, r1
 8005aba:	bf01      	itttt	eq
 8005abc:	6819      	ldreq	r1, [r3, #0]
 8005abe:	685b      	ldreq	r3, [r3, #4]
 8005ac0:	1809      	addeq	r1, r1, r0
 8005ac2:	6021      	streq	r1, [r4, #0]
 8005ac4:	6063      	str	r3, [r4, #4]
 8005ac6:	6054      	str	r4, [r2, #4]
 8005ac8:	e7cb      	b.n	8005a62 <_free_r+0x22>
 8005aca:	bd38      	pop	{r3, r4, r5, pc}
 8005acc:	2000320c 	.word	0x2000320c

08005ad0 <__malloc_lock>:
 8005ad0:	4801      	ldr	r0, [pc, #4]	; (8005ad8 <__malloc_lock+0x8>)
 8005ad2:	f7ff bfa5 	b.w	8005a20 <__retarget_lock_acquire_recursive>
 8005ad6:	bf00      	nop
 8005ad8:	20003208 	.word	0x20003208

08005adc <__malloc_unlock>:
 8005adc:	4801      	ldr	r0, [pc, #4]	; (8005ae4 <__malloc_unlock+0x8>)
 8005ade:	f7ff bfa0 	b.w	8005a22 <__retarget_lock_release_recursive>
 8005ae2:	bf00      	nop
 8005ae4:	20003208 	.word	0x20003208

08005ae8 <_init>:
 8005ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aea:	bf00      	nop
 8005aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aee:	bc08      	pop	{r3}
 8005af0:	469e      	mov	lr, r3
 8005af2:	4770      	bx	lr

08005af4 <_fini>:
 8005af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005af6:	bf00      	nop
 8005af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005afa:	bc08      	pop	{r3}
 8005afc:	469e      	mov	lr, r3
 8005afe:	4770      	bx	lr
