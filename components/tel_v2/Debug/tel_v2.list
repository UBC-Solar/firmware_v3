
tel_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d30  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  08004f20  08004f20  00014f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800514c  0800514c  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  0800514c  0800514c  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800514c  0800514c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800514c  0800514c  0001514c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005150  08005150  00015150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005154  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003140  20000060  080051b4  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200031a0  080051b4  000231a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   000174e4  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000380d  00000000  00000000  000375b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001420  00000000  00000000  0003adc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f96  00000000  00000000  0003c1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bd3f  00000000  00000000  0003d176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019421  00000000  00000000  00058eb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a0b85  00000000  00000000  000722d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005604  00000000  00000000  00112e5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00118460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000060 	.word	0x20000060
 800020c:	00000000 	.word	0x00000000
 8000210:	08004f08 	.word	0x08004f08

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000064 	.word	0x20000064
 800022c:	08004f08 	.word	0x08004f08

08000230 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000234:	4b17      	ldr	r3, [pc, #92]	; (8000294 <MX_CAN_Init+0x64>)
 8000236:	4a18      	ldr	r2, [pc, #96]	; (8000298 <MX_CAN_Init+0x68>)
 8000238:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 800023a:	4b16      	ldr	r3, [pc, #88]	; (8000294 <MX_CAN_Init+0x64>)
 800023c:	2204      	movs	r2, #4
 800023e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000240:	4b14      	ldr	r3, [pc, #80]	; (8000294 <MX_CAN_Init+0x64>)
 8000242:	2200      	movs	r2, #0
 8000244:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000246:	4b13      	ldr	r3, [pc, #76]	; (8000294 <MX_CAN_Init+0x64>)
 8000248:	2200      	movs	r2, #0
 800024a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 800024c:	4b11      	ldr	r3, [pc, #68]	; (8000294 <MX_CAN_Init+0x64>)
 800024e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000252:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000254:	4b0f      	ldr	r3, [pc, #60]	; (8000294 <MX_CAN_Init+0x64>)
 8000256:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 800025a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800025c:	4b0d      	ldr	r3, [pc, #52]	; (8000294 <MX_CAN_Init+0x64>)
 800025e:	2200      	movs	r2, #0
 8000260:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000262:	4b0c      	ldr	r3, [pc, #48]	; (8000294 <MX_CAN_Init+0x64>)
 8000264:	2200      	movs	r2, #0
 8000266:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000268:	4b0a      	ldr	r3, [pc, #40]	; (8000294 <MX_CAN_Init+0x64>)
 800026a:	2200      	movs	r2, #0
 800026c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800026e:	4b09      	ldr	r3, [pc, #36]	; (8000294 <MX_CAN_Init+0x64>)
 8000270:	2200      	movs	r2, #0
 8000272:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000274:	4b07      	ldr	r3, [pc, #28]	; (8000294 <MX_CAN_Init+0x64>)
 8000276:	2200      	movs	r2, #0
 8000278:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800027a:	4b06      	ldr	r3, [pc, #24]	; (8000294 <MX_CAN_Init+0x64>)
 800027c:	2200      	movs	r2, #0
 800027e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000280:	4804      	ldr	r0, [pc, #16]	; (8000294 <MX_CAN_Init+0x64>)
 8000282:	f000 fd4d 	bl	8000d20 <HAL_CAN_Init>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800028c:	f000 fb00 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000290:	bf00      	nop
 8000292:	bd80      	pop	{r7, pc}
 8000294:	2000007c 	.word	0x2000007c
 8000298:	40006400 	.word	0x40006400

0800029c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b08a      	sub	sp, #40	; 0x28
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a4:	f107 0314 	add.w	r3, r7, #20
 80002a8:	2200      	movs	r2, #0
 80002aa:	601a      	str	r2, [r3, #0]
 80002ac:	605a      	str	r2, [r3, #4]
 80002ae:	609a      	str	r2, [r3, #8]
 80002b0:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4a25      	ldr	r2, [pc, #148]	; (800034c <HAL_CAN_MspInit+0xb0>)
 80002b8:	4293      	cmp	r3, r2
 80002ba:	d143      	bne.n	8000344 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80002bc:	4b24      	ldr	r3, [pc, #144]	; (8000350 <HAL_CAN_MspInit+0xb4>)
 80002be:	69db      	ldr	r3, [r3, #28]
 80002c0:	4a23      	ldr	r2, [pc, #140]	; (8000350 <HAL_CAN_MspInit+0xb4>)
 80002c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002c6:	61d3      	str	r3, [r2, #28]
 80002c8:	4b21      	ldr	r3, [pc, #132]	; (8000350 <HAL_CAN_MspInit+0xb4>)
 80002ca:	69db      	ldr	r3, [r3, #28]
 80002cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002d0:	613b      	str	r3, [r7, #16]
 80002d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80002d4:	4b1e      	ldr	r3, [pc, #120]	; (8000350 <HAL_CAN_MspInit+0xb4>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	4a1d      	ldr	r2, [pc, #116]	; (8000350 <HAL_CAN_MspInit+0xb4>)
 80002da:	f043 0308 	orr.w	r3, r3, #8
 80002de:	6193      	str	r3, [r2, #24]
 80002e0:	4b1b      	ldr	r3, [pc, #108]	; (8000350 <HAL_CAN_MspInit+0xb4>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	f003 0308 	and.w	r3, r3, #8
 80002e8:	60fb      	str	r3, [r7, #12]
 80002ea:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80002ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002f2:	2300      	movs	r3, #0
 80002f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f6:	2300      	movs	r3, #0
 80002f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002fa:	f107 0314 	add.w	r3, r7, #20
 80002fe:	4619      	mov	r1, r3
 8000300:	4814      	ldr	r0, [pc, #80]	; (8000354 <HAL_CAN_MspInit+0xb8>)
 8000302:	f000 feed 	bl	80010e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000306:	f44f 7300 	mov.w	r3, #512	; 0x200
 800030a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800030c:	2302      	movs	r3, #2
 800030e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000310:	2303      	movs	r3, #3
 8000312:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000314:	f107 0314 	add.w	r3, r7, #20
 8000318:	4619      	mov	r1, r3
 800031a:	480e      	ldr	r0, [pc, #56]	; (8000354 <HAL_CAN_MspInit+0xb8>)
 800031c:	f000 fee0 	bl	80010e0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000320:	4b0d      	ldr	r3, [pc, #52]	; (8000358 <HAL_CAN_MspInit+0xbc>)
 8000322:	685b      	ldr	r3, [r3, #4]
 8000324:	627b      	str	r3, [r7, #36]	; 0x24
 8000326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000328:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800032c:	627b      	str	r3, [r7, #36]	; 0x24
 800032e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000330:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000334:	627b      	str	r3, [r7, #36]	; 0x24
 8000336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000338:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800033c:	627b      	str	r3, [r7, #36]	; 0x24
 800033e:	4a06      	ldr	r2, [pc, #24]	; (8000358 <HAL_CAN_MspInit+0xbc>)
 8000340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000342:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000344:	bf00      	nop
 8000346:	3728      	adds	r7, #40	; 0x28
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	40006400 	.word	0x40006400
 8000350:	40021000 	.word	0x40021000
 8000354:	40010c00 	.word	0x40010c00
 8000358:	40010000 	.word	0x40010000

0800035c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of canMessageQueue */
  canMessageQueueHandle = osMessageQueueNew (10, sizeof(uint16_t), &canMessageQueue_attributes);
 8000360:	4a28      	ldr	r2, [pc, #160]	; (8000404 <MX_FREERTOS_Init+0xa8>)
 8000362:	2102      	movs	r1, #2
 8000364:	200a      	movs	r0, #10
 8000366:	f002 f85b 	bl	8002420 <osMessageQueueNew>
 800036a:	4603      	mov	r3, r0
 800036c:	4a26      	ldr	r2, [pc, #152]	; (8000408 <MX_FREERTOS_Init+0xac>)
 800036e:	6013      	str	r3, [r2, #0]

  /* creation of imuMessageQueue */
  imuMessageQueueHandle = osMessageQueueNew (10, sizeof(uint16_t), &imuMessageQueue_attributes);
 8000370:	4a26      	ldr	r2, [pc, #152]	; (800040c <MX_FREERTOS_Init+0xb0>)
 8000372:	2102      	movs	r1, #2
 8000374:	200a      	movs	r0, #10
 8000376:	f002 f853 	bl	8002420 <osMessageQueueNew>
 800037a:	4603      	mov	r3, r0
 800037c:	4a24      	ldr	r2, [pc, #144]	; (8000410 <MX_FREERTOS_Init+0xb4>)
 800037e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of StartDefaultTask */
  StartDefaultTaskHandle = osThreadNew(startDefaultTask, NULL, &StartDefaultTask_attributes);
 8000380:	4a24      	ldr	r2, [pc, #144]	; (8000414 <MX_FREERTOS_Init+0xb8>)
 8000382:	2100      	movs	r1, #0
 8000384:	4824      	ldr	r0, [pc, #144]	; (8000418 <MX_FREERTOS_Init+0xbc>)
 8000386:	f001 ff73 	bl	8002270 <osThreadNew>
 800038a:	4603      	mov	r3, r0
 800038c:	4a23      	ldr	r2, [pc, #140]	; (800041c <MX_FREERTOS_Init+0xc0>)
 800038e:	6013      	str	r3, [r2, #0]

  /* creation of readCANTask */
  readCANTaskHandle = osThreadNew(read_CAN_task, NULL, &readCANTask_attributes);
 8000390:	4a23      	ldr	r2, [pc, #140]	; (8000420 <MX_FREERTOS_Init+0xc4>)
 8000392:	2100      	movs	r1, #0
 8000394:	4823      	ldr	r0, [pc, #140]	; (8000424 <MX_FREERTOS_Init+0xc8>)
 8000396:	f001 ff6b 	bl	8002270 <osThreadNew>
 800039a:	4603      	mov	r3, r0
 800039c:	4a22      	ldr	r2, [pc, #136]	; (8000428 <MX_FREERTOS_Init+0xcc>)
 800039e:	6013      	str	r3, [r2, #0]

  /* creation of transmitCANTask */
  transmitCANTaskHandle = osThreadNew(transmit_CAN_task, NULL, &transmitCANTask_attributes);
 80003a0:	4a22      	ldr	r2, [pc, #136]	; (800042c <MX_FREERTOS_Init+0xd0>)
 80003a2:	2100      	movs	r1, #0
 80003a4:	4822      	ldr	r0, [pc, #136]	; (8000430 <MX_FREERTOS_Init+0xd4>)
 80003a6:	f001 ff63 	bl	8002270 <osThreadNew>
 80003aa:	4603      	mov	r3, r0
 80003ac:	4a21      	ldr	r2, [pc, #132]	; (8000434 <MX_FREERTOS_Init+0xd8>)
 80003ae:	6013      	str	r3, [r2, #0]

  /* creation of readIMUTask */
  readIMUTaskHandle = osThreadNew(read_IMU_task, NULL, &readIMUTask_attributes);
 80003b0:	4a21      	ldr	r2, [pc, #132]	; (8000438 <MX_FREERTOS_Init+0xdc>)
 80003b2:	2100      	movs	r1, #0
 80003b4:	4821      	ldr	r0, [pc, #132]	; (800043c <MX_FREERTOS_Init+0xe0>)
 80003b6:	f001 ff5b 	bl	8002270 <osThreadNew>
 80003ba:	4603      	mov	r3, r0
 80003bc:	4a20      	ldr	r2, [pc, #128]	; (8000440 <MX_FREERTOS_Init+0xe4>)
 80003be:	6013      	str	r3, [r2, #0]

  /* creation of transmitIMUTask */
  transmitIMUTaskHandle = osThreadNew(transmit_IMU_task, NULL, &transmitIMUTask_attributes);
 80003c0:	4a20      	ldr	r2, [pc, #128]	; (8000444 <MX_FREERTOS_Init+0xe8>)
 80003c2:	2100      	movs	r1, #0
 80003c4:	4820      	ldr	r0, [pc, #128]	; (8000448 <MX_FREERTOS_Init+0xec>)
 80003c6:	f001 ff53 	bl	8002270 <osThreadNew>
 80003ca:	4603      	mov	r3, r0
 80003cc:	4a1f      	ldr	r2, [pc, #124]	; (800044c <MX_FREERTOS_Init+0xf0>)
 80003ce:	6013      	str	r3, [r2, #0]

  /* creation of readGPSTask */
  readGPSTaskHandle = osThreadNew(read_GPS_task, NULL, &readGPSTask_attributes);
 80003d0:	4a1f      	ldr	r2, [pc, #124]	; (8000450 <MX_FREERTOS_Init+0xf4>)
 80003d2:	2100      	movs	r1, #0
 80003d4:	481f      	ldr	r0, [pc, #124]	; (8000454 <MX_FREERTOS_Init+0xf8>)
 80003d6:	f001 ff4b 	bl	8002270 <osThreadNew>
 80003da:	4603      	mov	r3, r0
 80003dc:	4a1e      	ldr	r2, [pc, #120]	; (8000458 <MX_FREERTOS_Init+0xfc>)
 80003de:	6013      	str	r3, [r2, #0]

  /* creation of transmitGPSTask */
  transmitGPSTaskHandle = osThreadNew(transmit_GPS_task, NULL, &transmitGPSTask_attributes);
 80003e0:	4a1e      	ldr	r2, [pc, #120]	; (800045c <MX_FREERTOS_Init+0x100>)
 80003e2:	2100      	movs	r1, #0
 80003e4:	481e      	ldr	r0, [pc, #120]	; (8000460 <MX_FREERTOS_Init+0x104>)
 80003e6:	f001 ff43 	bl	8002270 <osThreadNew>
 80003ea:	4603      	mov	r3, r0
 80003ec:	4a1d      	ldr	r2, [pc, #116]	; (8000464 <MX_FREERTOS_Init+0x108>)
 80003ee:	6013      	str	r3, [r2, #0]

  /* creation of kernelLEDTask */
  kernelLEDTaskHandle = osThreadNew(kernel_LED_task, NULL, &kernelLEDTask_attributes);
 80003f0:	4a1d      	ldr	r2, [pc, #116]	; (8000468 <MX_FREERTOS_Init+0x10c>)
 80003f2:	2100      	movs	r1, #0
 80003f4:	481d      	ldr	r0, [pc, #116]	; (800046c <MX_FREERTOS_Init+0x110>)
 80003f6:	f001 ff3b 	bl	8002270 <osThreadNew>
 80003fa:	4603      	mov	r3, r0
 80003fc:	4a1c      	ldr	r2, [pc, #112]	; (8000470 <MX_FREERTOS_Init+0x114>)
 80003fe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000400:	bf00      	nop
 8000402:	bd80      	pop	{r7, pc}
 8000404:	080050f0 	.word	0x080050f0
 8000408:	200000c4 	.word	0x200000c4
 800040c:	08005108 	.word	0x08005108
 8000410:	200000c8 	.word	0x200000c8
 8000414:	08004fd0 	.word	0x08004fd0
 8000418:	08000475 	.word	0x08000475
 800041c:	200000a4 	.word	0x200000a4
 8000420:	08004ff4 	.word	0x08004ff4
 8000424:	08000485 	.word	0x08000485
 8000428:	200000a8 	.word	0x200000a8
 800042c:	08005018 	.word	0x08005018
 8000430:	08000495 	.word	0x08000495
 8000434:	200000ac 	.word	0x200000ac
 8000438:	0800503c 	.word	0x0800503c
 800043c:	080004a5 	.word	0x080004a5
 8000440:	200000b0 	.word	0x200000b0
 8000444:	08005060 	.word	0x08005060
 8000448:	080004b5 	.word	0x080004b5
 800044c:	200000b4 	.word	0x200000b4
 8000450:	08005084 	.word	0x08005084
 8000454:	080004c5 	.word	0x080004c5
 8000458:	200000b8 	.word	0x200000b8
 800045c:	080050a8 	.word	0x080050a8
 8000460:	080004d5 	.word	0x080004d5
 8000464:	200000bc 	.word	0x200000bc
 8000468:	080050cc 	.word	0x080050cc
 800046c:	080004e5 	.word	0x080004e5
 8000470:	200000c0 	.word	0x200000c0

08000474 <startDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startDefaultTask */
void startDefaultTask(void *argument)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800047c:	2001      	movs	r0, #1
 800047e:	f001 ffa1 	bl	80023c4 <osDelay>
 8000482:	e7fb      	b.n	800047c <startDefaultTask+0x8>

08000484 <read_CAN_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_CAN_task */
void read_CAN_task(void *argument)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN read_CAN_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800048c:	2001      	movs	r0, #1
 800048e:	f001 ff99 	bl	80023c4 <osDelay>
 8000492:	e7fb      	b.n	800048c <read_CAN_task+0x8>

08000494 <transmit_CAN_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_transmit_CAN_task */
void transmit_CAN_task(void *argument)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN transmit_CAN_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800049c:	2001      	movs	r0, #1
 800049e:	f001 ff91 	bl	80023c4 <osDelay>
 80004a2:	e7fb      	b.n	800049c <transmit_CAN_task+0x8>

080004a4 <read_IMU_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_IMU_task */
void read_IMU_task(void *argument)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN read_IMU_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80004ac:	2001      	movs	r0, #1
 80004ae:	f001 ff89 	bl	80023c4 <osDelay>
 80004b2:	e7fb      	b.n	80004ac <read_IMU_task+0x8>

080004b4 <transmit_IMU_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_transmit_IMU_task */
void transmit_IMU_task(void *argument)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN transmit_IMU_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80004bc:	2001      	movs	r0, #1
 80004be:	f001 ff81 	bl	80023c4 <osDelay>
 80004c2:	e7fb      	b.n	80004bc <transmit_IMU_task+0x8>

080004c4 <read_GPS_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_GPS_task */
void read_GPS_task(void *argument)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN read_GPS_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80004cc:	2001      	movs	r0, #1
 80004ce:	f001 ff79 	bl	80023c4 <osDelay>
 80004d2:	e7fb      	b.n	80004cc <read_GPS_task+0x8>

080004d4 <transmit_GPS_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_transmit_GPS_task */
void transmit_GPS_task(void *argument)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN transmit_GPS_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80004dc:	2001      	movs	r0, #1
 80004de:	f001 ff71 	bl	80023c4 <osDelay>
 80004e2:	e7fb      	b.n	80004dc <transmit_GPS_task+0x8>

080004e4 <kernel_LED_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_kernel_LED_task */
void kernel_LED_task(void *argument)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN kernel_LED_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80004ec:	2001      	movs	r0, #1
 80004ee:	f001 ff69 	bl	80023c4 <osDelay>
 80004f2:	e7fb      	b.n	80004ec <kernel_LED_task+0x8>

080004f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b088      	sub	sp, #32
 80004f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fa:	f107 0310 	add.w	r3, r7, #16
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000508:	4b49      	ldr	r3, [pc, #292]	; (8000630 <MX_GPIO_Init+0x13c>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	4a48      	ldr	r2, [pc, #288]	; (8000630 <MX_GPIO_Init+0x13c>)
 800050e:	f043 0320 	orr.w	r3, r3, #32
 8000512:	6193      	str	r3, [r2, #24]
 8000514:	4b46      	ldr	r3, [pc, #280]	; (8000630 <MX_GPIO_Init+0x13c>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	f003 0320 	and.w	r3, r3, #32
 800051c:	60fb      	str	r3, [r7, #12]
 800051e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000520:	4b43      	ldr	r3, [pc, #268]	; (8000630 <MX_GPIO_Init+0x13c>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	4a42      	ldr	r2, [pc, #264]	; (8000630 <MX_GPIO_Init+0x13c>)
 8000526:	f043 0310 	orr.w	r3, r3, #16
 800052a:	6193      	str	r3, [r2, #24]
 800052c:	4b40      	ldr	r3, [pc, #256]	; (8000630 <MX_GPIO_Init+0x13c>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	f003 0310 	and.w	r3, r3, #16
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000538:	4b3d      	ldr	r3, [pc, #244]	; (8000630 <MX_GPIO_Init+0x13c>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	4a3c      	ldr	r2, [pc, #240]	; (8000630 <MX_GPIO_Init+0x13c>)
 800053e:	f043 0304 	orr.w	r3, r3, #4
 8000542:	6193      	str	r3, [r2, #24]
 8000544:	4b3a      	ldr	r3, [pc, #232]	; (8000630 <MX_GPIO_Init+0x13c>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	f003 0304 	and.w	r3, r3, #4
 800054c:	607b      	str	r3, [r7, #4]
 800054e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000550:	4b37      	ldr	r3, [pc, #220]	; (8000630 <MX_GPIO_Init+0x13c>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	4a36      	ldr	r2, [pc, #216]	; (8000630 <MX_GPIO_Init+0x13c>)
 8000556:	f043 0308 	orr.w	r3, r3, #8
 800055a:	6193      	str	r3, [r2, #24]
 800055c:	4b34      	ldr	r3, [pc, #208]	; (8000630 <MX_GPIO_Init+0x13c>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	f003 0308 	and.w	r3, r3, #8
 8000564:	603b      	str	r3, [r7, #0]
 8000566:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RADIO_GPIO_DIO7_Pin|RADIO_GPIO_DIO9_SLEEP_Pin|RADIO_GPIO_DIO11_Pin|RADIO_GPIO_DIO10_Pin, GPIO_PIN_RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	2178      	movs	r1, #120	; 0x78
 800056c:	4831      	ldr	r0, [pc, #196]	; (8000634 <MX_GPIO_Init+0x140>)
 800056e:	f000 ff4b 	bl	8001408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USER_LED_Pin|SDL_CS_Pin, GPIO_PIN_RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	2112      	movs	r1, #18
 8000576:	4830      	ldr	r0, [pc, #192]	; (8000638 <MX_GPIO_Init+0x144>)
 8000578:	f000 ff46 	bl	8001408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RADIO_GPIO_DIO4_Pin|RADIO_GPIO_DIO3_Pin|RADIO_GPIO_DIO2_Pin, GPIO_PIN_SET);
 800057c:	2201      	movs	r2, #1
 800057e:	f24a 0101 	movw	r1, #40961	; 0xa001
 8000582:	482e      	ldr	r0, [pc, #184]	; (800063c <MX_GPIO_Init+0x148>)
 8000584:	f000 ff40 	bl	8001408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RADIO_GPIO_DIO12_Pin|RADIO_GPIO_DIO6_Pin|RADIO_DIO8_SLEEP_CONTROL_Pin, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	f245 0102 	movw	r1, #20482	; 0x5002
 800058e:	482b      	ldr	r0, [pc, #172]	; (800063c <MX_GPIO_Init+0x148>)
 8000590:	f000 ff3a 	bl	8001408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RADIO_GPIO_DIO1_Pin|RADIO_GPIO_DIO0_Pin, GPIO_PIN_SET);
 8000594:	2201      	movs	r2, #1
 8000596:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800059a:	4826      	ldr	r0, [pc, #152]	; (8000634 <MX_GPIO_Init+0x140>)
 800059c:	f000 ff34 	bl	8001408 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = RADIO_GPIO_DIO7_Pin|RADIO_GPIO_DIO9_SLEEP_Pin|RADIO_GPIO_DIO11_Pin|RADIO_GPIO_DIO10_Pin
 80005a0:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80005a4:	613b      	str	r3, [r7, #16]
                          |RADIO_GPIO_DIO1_Pin|RADIO_GPIO_DIO0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a6:	2301      	movs	r3, #1
 80005a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ae:	2302      	movs	r3, #2
 80005b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005b2:	f107 0310 	add.w	r3, r7, #16
 80005b6:	4619      	mov	r1, r3
 80005b8:	481e      	ldr	r0, [pc, #120]	; (8000634 <MX_GPIO_Init+0x140>)
 80005ba:	f000 fd91 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USER_LED_Pin|SDL_CS_Pin;
 80005be:	2312      	movs	r3, #18
 80005c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c2:	2301      	movs	r3, #1
 80005c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ca:	2302      	movs	r3, #2
 80005cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ce:	f107 0310 	add.w	r3, r7, #16
 80005d2:	4619      	mov	r1, r3
 80005d4:	4818      	ldr	r0, [pc, #96]	; (8000638 <MX_GPIO_Init+0x144>)
 80005d6:	f000 fd83 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RTC_SYNC_Pin|SDL_CD_Pin;
 80005da:	230c      	movs	r3, #12
 80005dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e6:	f107 0310 	add.w	r3, r7, #16
 80005ea:	4619      	mov	r1, r3
 80005ec:	4812      	ldr	r0, [pc, #72]	; (8000638 <MX_GPIO_Init+0x144>)
 80005ee:	f000 fd77 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = RADIO_GPIO_DIO4_Pin|RADIO_GPIO_DIO12_Pin|RADIO_GPIO_DIO6_Pin|RADIO_GPIO_DIO3_Pin
 80005f2:	f24f 0303 	movw	r3, #61443	; 0xf003
 80005f6:	613b      	str	r3, [r7, #16]
                          |RADIO_DIO8_SLEEP_CONTROL_Pin|RADIO_GPIO_DIO2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f8:	2301      	movs	r3, #1
 80005fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000600:	2302      	movs	r3, #2
 8000602:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000604:	f107 0310 	add.w	r3, r7, #16
 8000608:	4619      	mov	r1, r3
 800060a:	480c      	ldr	r0, [pc, #48]	; (800063c <MX_GPIO_Init+0x148>)
 800060c:	f000 fd68 	bl	80010e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000610:	2304      	movs	r3, #4
 8000612:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000614:	2300      	movs	r3, #0
 8000616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2300      	movs	r3, #0
 800061a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800061c:	f107 0310 	add.w	r3, r7, #16
 8000620:	4619      	mov	r1, r3
 8000622:	4806      	ldr	r0, [pc, #24]	; (800063c <MX_GPIO_Init+0x148>)
 8000624:	f000 fd5c 	bl	80010e0 <HAL_GPIO_Init>

}
 8000628:	bf00      	nop
 800062a:	3720      	adds	r7, #32
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40021000 	.word	0x40021000
 8000634:	40011000 	.word	0x40011000
 8000638:	40010800 	.word	0x40010800
 800063c:	40010c00 	.word	0x40010c00

08000640 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <MX_I2C1_Init+0x50>)
 8000646:	4a13      	ldr	r2, [pc, #76]	; (8000694 <MX_I2C1_Init+0x54>)
 8000648:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800064a:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_I2C1_Init+0x50>)
 800064c:	4a12      	ldr	r2, [pc, #72]	; (8000698 <MX_I2C1_Init+0x58>)
 800064e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <MX_I2C1_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <MX_I2C1_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800065c:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <MX_I2C1_Init+0x50>)
 800065e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000662:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000664:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <MX_I2C1_Init+0x50>)
 8000666:	2200      	movs	r2, #0
 8000668:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <MX_I2C1_Init+0x50>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000670:	4b07      	ldr	r3, [pc, #28]	; (8000690 <MX_I2C1_Init+0x50>)
 8000672:	2200      	movs	r2, #0
 8000674:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <MX_I2C1_Init+0x50>)
 8000678:	2200      	movs	r2, #0
 800067a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800067c:	4804      	ldr	r0, [pc, #16]	; (8000690 <MX_I2C1_Init+0x50>)
 800067e:	f000 fedb 	bl	8001438 <HAL_I2C_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000688:	f000 f902 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	200000cc 	.word	0x200000cc
 8000694:	40005400 	.word	0x40005400
 8000698:	000186a0 	.word	0x000186a0

0800069c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <MX_I2C2_Init+0x50>)
 80006a2:	4a13      	ldr	r2, [pc, #76]	; (80006f0 <MX_I2C2_Init+0x54>)
 80006a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_I2C2_Init+0x50>)
 80006a8:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <MX_I2C2_Init+0x58>)
 80006aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_I2C2_Init+0x50>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_I2C2_Init+0x50>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_I2C2_Init+0x50>)
 80006ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006be:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <MX_I2C2_Init+0x50>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_I2C2_Init+0x50>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006cc:	4b07      	ldr	r3, [pc, #28]	; (80006ec <MX_I2C2_Init+0x50>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_I2C2_Init+0x50>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006d8:	4804      	ldr	r0, [pc, #16]	; (80006ec <MX_I2C2_Init+0x50>)
 80006da:	f000 fead 	bl	8001438 <HAL_I2C_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80006e4:	f000 f8d4 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000120 	.word	0x20000120
 80006f0:	40005800 	.word	0x40005800
 80006f4:	000186a0 	.word	0x000186a0

080006f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	; 0x28
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000700:	f107 0318 	add.w	r3, r7, #24
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a2b      	ldr	r2, [pc, #172]	; (80007c0 <HAL_I2C_MspInit+0xc8>)
 8000714:	4293      	cmp	r3, r2
 8000716:	d124      	bne.n	8000762 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000718:	4b2a      	ldr	r3, [pc, #168]	; (80007c4 <HAL_I2C_MspInit+0xcc>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	4a29      	ldr	r2, [pc, #164]	; (80007c4 <HAL_I2C_MspInit+0xcc>)
 800071e:	f043 0308 	orr.w	r3, r3, #8
 8000722:	6193      	str	r3, [r2, #24]
 8000724:	4b27      	ldr	r3, [pc, #156]	; (80007c4 <HAL_I2C_MspInit+0xcc>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	f003 0308 	and.w	r3, r3, #8
 800072c:	617b      	str	r3, [r7, #20]
 800072e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPS_SCL_Pin|GPS_SDA_Pin;
 8000730:	23c0      	movs	r3, #192	; 0xc0
 8000732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000734:	2312      	movs	r3, #18
 8000736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000738:	2303      	movs	r3, #3
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073c:	f107 0318 	add.w	r3, r7, #24
 8000740:	4619      	mov	r1, r3
 8000742:	4821      	ldr	r0, [pc, #132]	; (80007c8 <HAL_I2C_MspInit+0xd0>)
 8000744:	f000 fccc 	bl	80010e0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000748:	4b1e      	ldr	r3, [pc, #120]	; (80007c4 <HAL_I2C_MspInit+0xcc>)
 800074a:	69db      	ldr	r3, [r3, #28]
 800074c:	4a1d      	ldr	r2, [pc, #116]	; (80007c4 <HAL_I2C_MspInit+0xcc>)
 800074e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000752:	61d3      	str	r3, [r2, #28]
 8000754:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <HAL_I2C_MspInit+0xcc>)
 8000756:	69db      	ldr	r3, [r3, #28]
 8000758:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800075c:	613b      	str	r3, [r7, #16]
 800075e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000760:	e029      	b.n	80007b6 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a19      	ldr	r2, [pc, #100]	; (80007cc <HAL_I2C_MspInit+0xd4>)
 8000768:	4293      	cmp	r3, r2
 800076a:	d124      	bne.n	80007b6 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800076c:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <HAL_I2C_MspInit+0xcc>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	4a14      	ldr	r2, [pc, #80]	; (80007c4 <HAL_I2C_MspInit+0xcc>)
 8000772:	f043 0308 	orr.w	r3, r3, #8
 8000776:	6193      	str	r3, [r2, #24]
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <HAL_I2C_MspInit+0xcc>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	f003 0308 	and.w	r3, r3, #8
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 8000784:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800078a:	2312      	movs	r3, #18
 800078c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800078e:	2303      	movs	r3, #3
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000792:	f107 0318 	add.w	r3, r7, #24
 8000796:	4619      	mov	r1, r3
 8000798:	480b      	ldr	r0, [pc, #44]	; (80007c8 <HAL_I2C_MspInit+0xd0>)
 800079a:	f000 fca1 	bl	80010e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <HAL_I2C_MspInit+0xcc>)
 80007a0:	69db      	ldr	r3, [r3, #28]
 80007a2:	4a08      	ldr	r2, [pc, #32]	; (80007c4 <HAL_I2C_MspInit+0xcc>)
 80007a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007a8:	61d3      	str	r3, [r2, #28]
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <HAL_I2C_MspInit+0xcc>)
 80007ac:	69db      	ldr	r3, [r3, #28]
 80007ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
}
 80007b6:	bf00      	nop
 80007b8:	3728      	adds	r7, #40	; 0x28
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40005400 	.word	0x40005400
 80007c4:	40021000 	.word	0x40021000
 80007c8:	40010c00 	.word	0x40010c00
 80007cc:	40005800 	.word	0x40005800

080007d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d4:	f000 fa42 	bl	8000c5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d8:	f000 f815 	bl	8000806 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007dc:	f7ff fe8a 	bl	80004f4 <MX_GPIO_Init>
  MX_CAN_Init();
 80007e0:	f7ff fd26 	bl	8000230 <MX_CAN_Init>
  MX_SPI1_Init();
 80007e4:	f000 f85a 	bl	800089c <MX_SPI1_Init>
  MX_UART5_Init();
 80007e8:	f000 f928 	bl	8000a3c <MX_UART5_Init>
  MX_I2C1_Init();
 80007ec:	f7ff ff28 	bl	8000640 <MX_I2C1_Init>
  MX_I2C2_Init();
 80007f0:	f7ff ff54 	bl	800069c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80007f4:	f000 f94c 	bl	8000a90 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80007f8:	f001 fcd4 	bl	80021a4 <osKernelInitialize>
  MX_FREERTOS_Init();
 80007fc:	f7ff fdae 	bl	800035c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000800:	f001 fd02 	bl	8002208 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000804:	e7fe      	b.n	8000804 <main+0x34>

08000806 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b090      	sub	sp, #64	; 0x40
 800080a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080c:	f107 0318 	add.w	r3, r7, #24
 8000810:	2228      	movs	r2, #40	; 0x28
 8000812:	2100      	movs	r1, #0
 8000814:	4618      	mov	r0, r3
 8000816:	f004 fa91 	bl	8004d3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000828:	2301      	movs	r3, #1
 800082a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800082c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000830:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000836:	2301      	movs	r3, #1
 8000838:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083a:	2302      	movs	r3, #2
 800083c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800083e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000842:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000844:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000848:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084a:	f107 0318 	add.w	r3, r7, #24
 800084e:	4618      	mov	r0, r3
 8000850:	f000 ff36 	bl	80016c0 <HAL_RCC_OscConfig>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <SystemClock_Config+0x58>
  {
    Error_Handler();
 800085a:	f000 f819 	bl	8000890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085e:	230f      	movs	r3, #15
 8000860:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000862:	2302      	movs	r3, #2
 8000864:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800086a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800086e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	2102      	movs	r1, #2
 8000878:	4618      	mov	r0, r3
 800087a:	f001 f9a3 	bl	8001bc4 <HAL_RCC_ClockConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000884:	f000 f804 	bl	8000890 <Error_Handler>
  }
}
 8000888:	bf00      	nop
 800088a:	3740      	adds	r7, #64	; 0x40
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000894:	b672      	cpsid	i
}
 8000896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000898:	e7fe      	b.n	8000898 <Error_Handler+0x8>
	...

0800089c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80008a0:	4b17      	ldr	r3, [pc, #92]	; (8000900 <MX_SPI1_Init+0x64>)
 80008a2:	4a18      	ldr	r2, [pc, #96]	; (8000904 <MX_SPI1_Init+0x68>)
 80008a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008a6:	4b16      	ldr	r3, [pc, #88]	; (8000900 <MX_SPI1_Init+0x64>)
 80008a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008ae:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_SPI1_Init+0x64>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <MX_SPI1_Init+0x64>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_SPI1_Init+0x64>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_SPI1_Init+0x64>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_SPI1_Init+0x64>)
 80008c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008ce:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_SPI1_Init+0x64>)
 80008d0:	2208      	movs	r2, #8
 80008d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008d4:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <MX_SPI1_Init+0x64>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_SPI1_Init+0x64>)
 80008dc:	2200      	movs	r2, #0
 80008de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008e0:	4b07      	ldr	r3, [pc, #28]	; (8000900 <MX_SPI1_Init+0x64>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_SPI1_Init+0x64>)
 80008e8:	220a      	movs	r2, #10
 80008ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008ec:	4804      	ldr	r0, [pc, #16]	; (8000900 <MX_SPI1_Init+0x64>)
 80008ee:	f001 faf7 	bl	8001ee0 <HAL_SPI_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008f8:	f7ff ffca 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000174 	.word	0x20000174
 8000904:	40013000 	.word	0x40013000

08000908 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b088      	sub	sp, #32
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	f107 0310 	add.w	r3, r7, #16
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a1b      	ldr	r2, [pc, #108]	; (8000990 <HAL_SPI_MspInit+0x88>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d12f      	bne.n	8000988 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000928:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <HAL_SPI_MspInit+0x8c>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	4a19      	ldr	r2, [pc, #100]	; (8000994 <HAL_SPI_MspInit+0x8c>)
 800092e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000932:	6193      	str	r3, [r2, #24]
 8000934:	4b17      	ldr	r3, [pc, #92]	; (8000994 <HAL_SPI_MspInit+0x8c>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000940:	4b14      	ldr	r3, [pc, #80]	; (8000994 <HAL_SPI_MspInit+0x8c>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	4a13      	ldr	r2, [pc, #76]	; (8000994 <HAL_SPI_MspInit+0x8c>)
 8000946:	f043 0304 	orr.w	r3, r3, #4
 800094a:	6193      	str	r3, [r2, #24]
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <HAL_SPI_MspInit+0x8c>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f003 0304 	and.w	r3, r3, #4
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SDL_CLK_Pin|SDL_MOSI_Pin;
 8000958:	23a0      	movs	r3, #160	; 0xa0
 800095a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095c:	2302      	movs	r3, #2
 800095e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000960:	2303      	movs	r3, #3
 8000962:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000964:	f107 0310 	add.w	r3, r7, #16
 8000968:	4619      	mov	r1, r3
 800096a:	480b      	ldr	r0, [pc, #44]	; (8000998 <HAL_SPI_MspInit+0x90>)
 800096c:	f000 fbb8 	bl	80010e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDL_MISO_Pin;
 8000970:	2340      	movs	r3, #64	; 0x40
 8000972:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SDL_MISO_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 0310 	add.w	r3, r7, #16
 8000980:	4619      	mov	r1, r3
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <HAL_SPI_MspInit+0x90>)
 8000984:	f000 fbac 	bl	80010e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000988:	bf00      	nop
 800098a:	3720      	adds	r7, #32
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40013000 	.word	0x40013000
 8000994:	40021000 	.word	0x40021000
 8000998:	40010800 	.word	0x40010800

0800099c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <HAL_MspInit+0x4c>)
 80009a4:	699b      	ldr	r3, [r3, #24]
 80009a6:	4a10      	ldr	r2, [pc, #64]	; (80009e8 <HAL_MspInit+0x4c>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	6193      	str	r3, [r2, #24]
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <HAL_MspInit+0x4c>)
 80009b0:	699b      	ldr	r3, [r3, #24]
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <HAL_MspInit+0x4c>)
 80009bc:	69db      	ldr	r3, [r3, #28]
 80009be:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <HAL_MspInit+0x4c>)
 80009c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c4:	61d3      	str	r3, [r2, #28]
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <HAL_MspInit+0x4c>)
 80009c8:	69db      	ldr	r3, [r3, #28]
 80009ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	210f      	movs	r1, #15
 80009d6:	f06f 0001 	mvn.w	r0, #1
 80009da:	f000 fb58 	bl	800108e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40021000 	.word	0x40021000

080009ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <NMI_Handler+0x4>

080009f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f6:	e7fe      	b.n	80009f6 <HardFault_Handler+0x4>

080009f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <MemManage_Handler+0x4>

080009fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <BusFault_Handler+0x4>

08000a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <UsageFault_Handler+0x4>

08000a0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr

08000a16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a1a:	f000 f965 	bl	8000ce8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a1e:	f003 f9cf 	bl	8003dc0 <xTaskGetSchedulerState>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d001      	beq.n	8000a2c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a28:	f003 ff2e 	bl	8004888 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr

08000a3c <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart1;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000a40:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <MX_UART5_Init+0x4c>)
 8000a42:	4a12      	ldr	r2, [pc, #72]	; (8000a8c <MX_UART5_Init+0x50>)
 8000a44:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <MX_UART5_Init+0x4c>)
 8000a48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a4c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <MX_UART5_Init+0x4c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <MX_UART5_Init+0x4c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <MX_UART5_Init+0x4c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000a60:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <MX_UART5_Init+0x4c>)
 8000a62:	220c      	movs	r2, #12
 8000a64:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a66:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <MX_UART5_Init+0x4c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <MX_UART5_Init+0x4c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000a72:	4805      	ldr	r0, [pc, #20]	; (8000a88 <MX_UART5_Init+0x4c>)
 8000a74:	f001 fab8 	bl	8001fe8 <HAL_UART_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000a7e:	f7ff ff07 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	200001cc 	.word	0x200001cc
 8000a8c:	40005000 	.word	0x40005000

08000a90 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000a96:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <MX_USART1_UART_Init+0x50>)
 8000a98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000a9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ab4:	4b09      	ldr	r3, [pc, #36]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aba:	4b08      	ldr	r3, [pc, #32]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_USART1_UART_Init+0x4c>)
 8000ac8:	f001 fa8e 	bl	8001fe8 <HAL_UART_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ad2:	f7ff fedd 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000214 	.word	0x20000214
 8000ae0:	40013800 	.word	0x40013800

08000ae4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08c      	sub	sp, #48	; 0x30
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 0320 	add.w	r3, r7, #32
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==UART5)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a3e      	ldr	r2, [pc, #248]	; (8000bf8 <HAL_UART_MspInit+0x114>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d13d      	bne.n	8000b80 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000b04:	4b3d      	ldr	r3, [pc, #244]	; (8000bfc <HAL_UART_MspInit+0x118>)
 8000b06:	69db      	ldr	r3, [r3, #28]
 8000b08:	4a3c      	ldr	r2, [pc, #240]	; (8000bfc <HAL_UART_MspInit+0x118>)
 8000b0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000b0e:	61d3      	str	r3, [r2, #28]
 8000b10:	4b3a      	ldr	r3, [pc, #232]	; (8000bfc <HAL_UART_MspInit+0x118>)
 8000b12:	69db      	ldr	r3, [r3, #28]
 8000b14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b18:	61fb      	str	r3, [r7, #28]
 8000b1a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1c:	4b37      	ldr	r3, [pc, #220]	; (8000bfc <HAL_UART_MspInit+0x118>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	4a36      	ldr	r2, [pc, #216]	; (8000bfc <HAL_UART_MspInit+0x118>)
 8000b22:	f043 0310 	orr.w	r3, r3, #16
 8000b26:	6193      	str	r3, [r2, #24]
 8000b28:	4b34      	ldr	r3, [pc, #208]	; (8000bfc <HAL_UART_MspInit+0x118>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	f003 0310 	and.w	r3, r3, #16
 8000b30:	61bb      	str	r3, [r7, #24]
 8000b32:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b34:	4b31      	ldr	r3, [pc, #196]	; (8000bfc <HAL_UART_MspInit+0x118>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	4a30      	ldr	r2, [pc, #192]	; (8000bfc <HAL_UART_MspInit+0x118>)
 8000b3a:	f043 0320 	orr.w	r3, r3, #32
 8000b3e:	6193      	str	r3, [r2, #24]
 8000b40:	4b2e      	ldr	r3, [pc, #184]	; (8000bfc <HAL_UART_MspInit+0x118>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	f003 0320 	and.w	r3, r3, #32
 8000b48:	617b      	str	r3, [r7, #20]
 8000b4a:	697b      	ldr	r3, [r7, #20]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	2302      	movs	r3, #2
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b56:	2303      	movs	r3, #3
 8000b58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b5a:	f107 0320 	add.w	r3, r7, #32
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4827      	ldr	r0, [pc, #156]	; (8000c00 <HAL_UART_MspInit+0x11c>)
 8000b62:	f000 fabd 	bl	80010e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b66:	2304      	movs	r3, #4
 8000b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b72:	f107 0320 	add.w	r3, r7, #32
 8000b76:	4619      	mov	r1, r3
 8000b78:	4822      	ldr	r0, [pc, #136]	; (8000c04 <HAL_UART_MspInit+0x120>)
 8000b7a:	f000 fab1 	bl	80010e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000b7e:	e036      	b.n	8000bee <HAL_UART_MspInit+0x10a>
  else if(uartHandle->Instance==USART1)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a20      	ldr	r2, [pc, #128]	; (8000c08 <HAL_UART_MspInit+0x124>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d131      	bne.n	8000bee <HAL_UART_MspInit+0x10a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b8a:	4b1c      	ldr	r3, [pc, #112]	; (8000bfc <HAL_UART_MspInit+0x118>)
 8000b8c:	699b      	ldr	r3, [r3, #24]
 8000b8e:	4a1b      	ldr	r2, [pc, #108]	; (8000bfc <HAL_UART_MspInit+0x118>)
 8000b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b94:	6193      	str	r3, [r2, #24]
 8000b96:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <HAL_UART_MspInit+0x118>)
 8000b98:	699b      	ldr	r3, [r3, #24]
 8000b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <HAL_UART_MspInit+0x118>)
 8000ba4:	699b      	ldr	r3, [r3, #24]
 8000ba6:	4a15      	ldr	r2, [pc, #84]	; (8000bfc <HAL_UART_MspInit+0x118>)
 8000ba8:	f043 0304 	orr.w	r3, r3, #4
 8000bac:	6193      	str	r3, [r2, #24]
 8000bae:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <HAL_UART_MspInit+0x118>)
 8000bb0:	699b      	ldr	r3, [r3, #24]
 8000bb2:	f003 0304 	and.w	r3, r3, #4
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RADIO_TX_Pin;
 8000bba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RADIO_TX_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 0320 	add.w	r3, r7, #32
 8000bcc:	4619      	mov	r1, r3
 8000bce:	480f      	ldr	r0, [pc, #60]	; (8000c0c <HAL_UART_MspInit+0x128>)
 8000bd0:	f000 fa86 	bl	80010e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RADIO_RX_Pin;
 8000bd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(RADIO_RX_GPIO_Port, &GPIO_InitStruct);
 8000be2:	f107 0320 	add.w	r3, r7, #32
 8000be6:	4619      	mov	r1, r3
 8000be8:	4808      	ldr	r0, [pc, #32]	; (8000c0c <HAL_UART_MspInit+0x128>)
 8000bea:	f000 fa79 	bl	80010e0 <HAL_GPIO_Init>
}
 8000bee:	bf00      	nop
 8000bf0:	3730      	adds	r7, #48	; 0x30
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40005000 	.word	0x40005000
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	40011000 	.word	0x40011000
 8000c04:	40011400 	.word	0x40011400
 8000c08:	40013800 	.word	0x40013800
 8000c0c:	40010800 	.word	0x40010800

08000c10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c10:	f7ff ff0e 	bl	8000a30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c14:	480b      	ldr	r0, [pc, #44]	; (8000c44 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c16:	490c      	ldr	r1, [pc, #48]	; (8000c48 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c18:	4a0c      	ldr	r2, [pc, #48]	; (8000c4c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c1c:	e002      	b.n	8000c24 <LoopCopyDataInit>

08000c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c22:	3304      	adds	r3, #4

08000c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c28:	d3f9      	bcc.n	8000c1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2a:	4a09      	ldr	r2, [pc, #36]	; (8000c50 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c2c:	4c09      	ldr	r4, [pc, #36]	; (8000c54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c30:	e001      	b.n	8000c36 <LoopFillZerobss>

08000c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c34:	3204      	adds	r2, #4

08000c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c38:	d3fb      	bcc.n	8000c32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c3a:	f004 f8dd 	bl	8004df8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c3e:	f7ff fdc7 	bl	80007d0 <main>
  bx lr
 8000c42:	4770      	bx	lr
  ldr r0, =_sdata
 8000c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c48:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c4c:	08005154 	.word	0x08005154
  ldr r2, =_sbss
 8000c50:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c54:	200031a0 	.word	0x200031a0

08000c58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c58:	e7fe      	b.n	8000c58 <ADC1_2_IRQHandler>
	...

08000c5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <HAL_Init+0x28>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a07      	ldr	r2, [pc, #28]	; (8000c84 <HAL_Init+0x28>)
 8000c66:	f043 0310 	orr.w	r3, r3, #16
 8000c6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c6c:	2003      	movs	r0, #3
 8000c6e:	f000 fa03 	bl	8001078 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c72:	200f      	movs	r0, #15
 8000c74:	f000 f808 	bl	8000c88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c78:	f7ff fe90 	bl	800099c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40022000 	.word	0x40022000

08000c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c90:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <HAL_InitTick+0x54>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_InitTick+0x58>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 fa0d 	bl	80010c6 <HAL_SYSTICK_Config>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e00e      	b.n	8000cd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b0f      	cmp	r3, #15
 8000cba:	d80a      	bhi.n	8000cd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc4:	f000 f9e3 	bl	800108e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc8:	4a06      	ldr	r2, [pc, #24]	; (8000ce4 <HAL_InitTick+0x5c>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	e000      	b.n	8000cd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000000 	.word	0x20000000
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	20000004 	.word	0x20000004

08000ce8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cec:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <HAL_IncTick+0x1c>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <HAL_IncTick+0x20>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	4a03      	ldr	r2, [pc, #12]	; (8000d08 <HAL_IncTick+0x20>)
 8000cfa:	6013      	str	r3, [r2, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr
 8000d04:	20000008 	.word	0x20000008
 8000d08:	2000025c 	.word	0x2000025c

08000d0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d10:	4b02      	ldr	r3, [pc, #8]	; (8000d1c <HAL_GetTick+0x10>)
 8000d12:	681b      	ldr	r3, [r3, #0]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	2000025c 	.word	0x2000025c

08000d20 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d101      	bne.n	8000d32 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e0ed      	b.n	8000f0e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d102      	bne.n	8000d44 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff faac 	bl	800029c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f042 0201 	orr.w	r2, r2, #1
 8000d52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d54:	f7ff ffda 	bl	8000d0c <HAL_GetTick>
 8000d58:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d5a:	e012      	b.n	8000d82 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d5c:	f7ff ffd6 	bl	8000d0c <HAL_GetTick>
 8000d60:	4602      	mov	r2, r0
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	2b0a      	cmp	r3, #10
 8000d68:	d90b      	bls.n	8000d82 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2205      	movs	r2, #5
 8000d7a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e0c5      	b.n	8000f0e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 0301 	and.w	r3, r3, #1
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d0e5      	beq.n	8000d5c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f022 0202 	bic.w	r2, r2, #2
 8000d9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000da0:	f7ff ffb4 	bl	8000d0c <HAL_GetTick>
 8000da4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000da6:	e012      	b.n	8000dce <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000da8:	f7ff ffb0 	bl	8000d0c <HAL_GetTick>
 8000dac:	4602      	mov	r2, r0
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	2b0a      	cmp	r3, #10
 8000db4:	d90b      	bls.n	8000dce <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2205      	movs	r2, #5
 8000dc6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e09f      	b.n	8000f0e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 0302 	and.w	r3, r3, #2
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d1e5      	bne.n	8000da8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	7e1b      	ldrb	r3, [r3, #24]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d108      	bne.n	8000df6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	e007      	b.n	8000e06 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	7e5b      	ldrb	r3, [r3, #25]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d108      	bne.n	8000e20 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	e007      	b.n	8000e30 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	7e9b      	ldrb	r3, [r3, #26]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d108      	bne.n	8000e4a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f042 0220 	orr.w	r2, r2, #32
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	e007      	b.n	8000e5a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f022 0220 	bic.w	r2, r2, #32
 8000e58:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	7edb      	ldrb	r3, [r3, #27]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d108      	bne.n	8000e74 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f022 0210 	bic.w	r2, r2, #16
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	e007      	b.n	8000e84 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f042 0210 	orr.w	r2, r2, #16
 8000e82:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	7f1b      	ldrb	r3, [r3, #28]
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d108      	bne.n	8000e9e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f042 0208 	orr.w	r2, r2, #8
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	e007      	b.n	8000eae <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f022 0208 	bic.w	r2, r2, #8
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	7f5b      	ldrb	r3, [r3, #29]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d108      	bne.n	8000ec8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f042 0204 	orr.w	r2, r2, #4
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	e007      	b.n	8000ed8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f022 0204 	bic.w	r2, r2, #4
 8000ed6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	689a      	ldr	r2, [r3, #8]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	431a      	orrs	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	691b      	ldr	r3, [r3, #16]
 8000ee6:	431a      	orrs	r2, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	695b      	ldr	r3, [r3, #20]
 8000eec:	ea42 0103 	orr.w	r1, r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	1e5a      	subs	r2, r3, #1
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	430a      	orrs	r2, r1
 8000efc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2201      	movs	r2, #1
 8000f08:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <__NVIC_SetPriorityGrouping+0x44>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f2e:	68ba      	ldr	r2, [r7, #8]
 8000f30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f34:	4013      	ands	r3, r2
 8000f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f4a:	4a04      	ldr	r2, [pc, #16]	; (8000f5c <__NVIC_SetPriorityGrouping+0x44>)
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	60d3      	str	r3, [r2, #12]
}
 8000f50:	bf00      	nop
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bc80      	pop	{r7}
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <__NVIC_GetPriorityGrouping+0x18>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	0a1b      	lsrs	r3, r3, #8
 8000f6a:	f003 0307 	and.w	r3, r3, #7
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	6039      	str	r1, [r7, #0]
 8000f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	db0a      	blt.n	8000fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	490c      	ldr	r1, [pc, #48]	; (8000fc8 <__NVIC_SetPriority+0x4c>)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	0112      	lsls	r2, r2, #4
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa4:	e00a      	b.n	8000fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4908      	ldr	r1, [pc, #32]	; (8000fcc <__NVIC_SetPriority+0x50>)
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	f003 030f 	and.w	r3, r3, #15
 8000fb2:	3b04      	subs	r3, #4
 8000fb4:	0112      	lsls	r2, r2, #4
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	440b      	add	r3, r1
 8000fba:	761a      	strb	r2, [r3, #24]
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000e100 	.word	0xe000e100
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b089      	sub	sp, #36	; 0x24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f1c3 0307 	rsb	r3, r3, #7
 8000fea:	2b04      	cmp	r3, #4
 8000fec:	bf28      	it	cs
 8000fee:	2304      	movcs	r3, #4
 8000ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	2b06      	cmp	r3, #6
 8000ff8:	d902      	bls.n	8001000 <NVIC_EncodePriority+0x30>
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3b03      	subs	r3, #3
 8000ffe:	e000      	b.n	8001002 <NVIC_EncodePriority+0x32>
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	f04f 32ff 	mov.w	r2, #4294967295
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43da      	mvns	r2, r3
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	401a      	ands	r2, r3
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001018:	f04f 31ff 	mov.w	r1, #4294967295
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	fa01 f303 	lsl.w	r3, r1, r3
 8001022:	43d9      	mvns	r1, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	4313      	orrs	r3, r2
         );
}
 800102a:	4618      	mov	r0, r3
 800102c:	3724      	adds	r7, #36	; 0x24
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr

08001034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	3b01      	subs	r3, #1
 8001040:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001044:	d301      	bcc.n	800104a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001046:	2301      	movs	r3, #1
 8001048:	e00f      	b.n	800106a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104a:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <SysTick_Config+0x40>)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3b01      	subs	r3, #1
 8001050:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001052:	210f      	movs	r1, #15
 8001054:	f04f 30ff 	mov.w	r0, #4294967295
 8001058:	f7ff ff90 	bl	8000f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <SysTick_Config+0x40>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001062:	4b04      	ldr	r3, [pc, #16]	; (8001074 <SysTick_Config+0x40>)
 8001064:	2207      	movs	r2, #7
 8001066:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	e000e010 	.word	0xe000e010

08001078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff ff49 	bl	8000f18 <__NVIC_SetPriorityGrouping>
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800108e:	b580      	push	{r7, lr}
 8001090:	b086      	sub	sp, #24
 8001092:	af00      	add	r7, sp, #0
 8001094:	4603      	mov	r3, r0
 8001096:	60b9      	str	r1, [r7, #8]
 8001098:	607a      	str	r2, [r7, #4]
 800109a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010a0:	f7ff ff5e 	bl	8000f60 <__NVIC_GetPriorityGrouping>
 80010a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	68b9      	ldr	r1, [r7, #8]
 80010aa:	6978      	ldr	r0, [r7, #20]
 80010ac:	f7ff ff90 	bl	8000fd0 <NVIC_EncodePriority>
 80010b0:	4602      	mov	r2, r0
 80010b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b6:	4611      	mov	r1, r2
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff5f 	bl	8000f7c <__NVIC_SetPriority>
}
 80010be:	bf00      	nop
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff ffb0 	bl	8001034 <SysTick_Config>
 80010d4:	4603      	mov	r3, r0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b08b      	sub	sp, #44	; 0x2c
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010ea:	2300      	movs	r3, #0
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010ee:	2300      	movs	r3, #0
 80010f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010f2:	e179      	b.n	80013e8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010f4:	2201      	movs	r2, #1
 80010f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	69fa      	ldr	r2, [r7, #28]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	429a      	cmp	r2, r3
 800110e:	f040 8168 	bne.w	80013e2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	4a96      	ldr	r2, [pc, #600]	; (8001370 <HAL_GPIO_Init+0x290>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d05e      	beq.n	80011da <HAL_GPIO_Init+0xfa>
 800111c:	4a94      	ldr	r2, [pc, #592]	; (8001370 <HAL_GPIO_Init+0x290>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d875      	bhi.n	800120e <HAL_GPIO_Init+0x12e>
 8001122:	4a94      	ldr	r2, [pc, #592]	; (8001374 <HAL_GPIO_Init+0x294>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d058      	beq.n	80011da <HAL_GPIO_Init+0xfa>
 8001128:	4a92      	ldr	r2, [pc, #584]	; (8001374 <HAL_GPIO_Init+0x294>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d86f      	bhi.n	800120e <HAL_GPIO_Init+0x12e>
 800112e:	4a92      	ldr	r2, [pc, #584]	; (8001378 <HAL_GPIO_Init+0x298>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d052      	beq.n	80011da <HAL_GPIO_Init+0xfa>
 8001134:	4a90      	ldr	r2, [pc, #576]	; (8001378 <HAL_GPIO_Init+0x298>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d869      	bhi.n	800120e <HAL_GPIO_Init+0x12e>
 800113a:	4a90      	ldr	r2, [pc, #576]	; (800137c <HAL_GPIO_Init+0x29c>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d04c      	beq.n	80011da <HAL_GPIO_Init+0xfa>
 8001140:	4a8e      	ldr	r2, [pc, #568]	; (800137c <HAL_GPIO_Init+0x29c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d863      	bhi.n	800120e <HAL_GPIO_Init+0x12e>
 8001146:	4a8e      	ldr	r2, [pc, #568]	; (8001380 <HAL_GPIO_Init+0x2a0>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d046      	beq.n	80011da <HAL_GPIO_Init+0xfa>
 800114c:	4a8c      	ldr	r2, [pc, #560]	; (8001380 <HAL_GPIO_Init+0x2a0>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d85d      	bhi.n	800120e <HAL_GPIO_Init+0x12e>
 8001152:	2b12      	cmp	r3, #18
 8001154:	d82a      	bhi.n	80011ac <HAL_GPIO_Init+0xcc>
 8001156:	2b12      	cmp	r3, #18
 8001158:	d859      	bhi.n	800120e <HAL_GPIO_Init+0x12e>
 800115a:	a201      	add	r2, pc, #4	; (adr r2, 8001160 <HAL_GPIO_Init+0x80>)
 800115c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001160:	080011db 	.word	0x080011db
 8001164:	080011b5 	.word	0x080011b5
 8001168:	080011c7 	.word	0x080011c7
 800116c:	08001209 	.word	0x08001209
 8001170:	0800120f 	.word	0x0800120f
 8001174:	0800120f 	.word	0x0800120f
 8001178:	0800120f 	.word	0x0800120f
 800117c:	0800120f 	.word	0x0800120f
 8001180:	0800120f 	.word	0x0800120f
 8001184:	0800120f 	.word	0x0800120f
 8001188:	0800120f 	.word	0x0800120f
 800118c:	0800120f 	.word	0x0800120f
 8001190:	0800120f 	.word	0x0800120f
 8001194:	0800120f 	.word	0x0800120f
 8001198:	0800120f 	.word	0x0800120f
 800119c:	0800120f 	.word	0x0800120f
 80011a0:	0800120f 	.word	0x0800120f
 80011a4:	080011bd 	.word	0x080011bd
 80011a8:	080011d1 	.word	0x080011d1
 80011ac:	4a75      	ldr	r2, [pc, #468]	; (8001384 <HAL_GPIO_Init+0x2a4>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d013      	beq.n	80011da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011b2:	e02c      	b.n	800120e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	623b      	str	r3, [r7, #32]
          break;
 80011ba:	e029      	b.n	8001210 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	3304      	adds	r3, #4
 80011c2:	623b      	str	r3, [r7, #32]
          break;
 80011c4:	e024      	b.n	8001210 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	3308      	adds	r3, #8
 80011cc:	623b      	str	r3, [r7, #32]
          break;
 80011ce:	e01f      	b.n	8001210 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	330c      	adds	r3, #12
 80011d6:	623b      	str	r3, [r7, #32]
          break;
 80011d8:	e01a      	b.n	8001210 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d102      	bne.n	80011e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011e2:	2304      	movs	r3, #4
 80011e4:	623b      	str	r3, [r7, #32]
          break;
 80011e6:	e013      	b.n	8001210 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d105      	bne.n	80011fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011f0:	2308      	movs	r3, #8
 80011f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	69fa      	ldr	r2, [r7, #28]
 80011f8:	611a      	str	r2, [r3, #16]
          break;
 80011fa:	e009      	b.n	8001210 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011fc:	2308      	movs	r3, #8
 80011fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	69fa      	ldr	r2, [r7, #28]
 8001204:	615a      	str	r2, [r3, #20]
          break;
 8001206:	e003      	b.n	8001210 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001208:	2300      	movs	r3, #0
 800120a:	623b      	str	r3, [r7, #32]
          break;
 800120c:	e000      	b.n	8001210 <HAL_GPIO_Init+0x130>
          break;
 800120e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	2bff      	cmp	r3, #255	; 0xff
 8001214:	d801      	bhi.n	800121a <HAL_GPIO_Init+0x13a>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	e001      	b.n	800121e <HAL_GPIO_Init+0x13e>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3304      	adds	r3, #4
 800121e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	2bff      	cmp	r3, #255	; 0xff
 8001224:	d802      	bhi.n	800122c <HAL_GPIO_Init+0x14c>
 8001226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	e002      	b.n	8001232 <HAL_GPIO_Init+0x152>
 800122c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122e:	3b08      	subs	r3, #8
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	210f      	movs	r1, #15
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	fa01 f303 	lsl.w	r3, r1, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	401a      	ands	r2, r3
 8001244:	6a39      	ldr	r1, [r7, #32]
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	fa01 f303 	lsl.w	r3, r1, r3
 800124c:	431a      	orrs	r2, r3
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125a:	2b00      	cmp	r3, #0
 800125c:	f000 80c1 	beq.w	80013e2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001260:	4b49      	ldr	r3, [pc, #292]	; (8001388 <HAL_GPIO_Init+0x2a8>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	4a48      	ldr	r2, [pc, #288]	; (8001388 <HAL_GPIO_Init+0x2a8>)
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	6193      	str	r3, [r2, #24]
 800126c:	4b46      	ldr	r3, [pc, #280]	; (8001388 <HAL_GPIO_Init+0x2a8>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001278:	4a44      	ldr	r2, [pc, #272]	; (800138c <HAL_GPIO_Init+0x2ac>)
 800127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127c:	089b      	lsrs	r3, r3, #2
 800127e:	3302      	adds	r3, #2
 8001280:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001284:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001288:	f003 0303 	and.w	r3, r3, #3
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	220f      	movs	r2, #15
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	4013      	ands	r3, r2
 800129a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a3c      	ldr	r2, [pc, #240]	; (8001390 <HAL_GPIO_Init+0x2b0>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d01f      	beq.n	80012e4 <HAL_GPIO_Init+0x204>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a3b      	ldr	r2, [pc, #236]	; (8001394 <HAL_GPIO_Init+0x2b4>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d019      	beq.n	80012e0 <HAL_GPIO_Init+0x200>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a3a      	ldr	r2, [pc, #232]	; (8001398 <HAL_GPIO_Init+0x2b8>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d013      	beq.n	80012dc <HAL_GPIO_Init+0x1fc>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4a39      	ldr	r2, [pc, #228]	; (800139c <HAL_GPIO_Init+0x2bc>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d00d      	beq.n	80012d8 <HAL_GPIO_Init+0x1f8>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a38      	ldr	r2, [pc, #224]	; (80013a0 <HAL_GPIO_Init+0x2c0>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d007      	beq.n	80012d4 <HAL_GPIO_Init+0x1f4>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a37      	ldr	r2, [pc, #220]	; (80013a4 <HAL_GPIO_Init+0x2c4>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d101      	bne.n	80012d0 <HAL_GPIO_Init+0x1f0>
 80012cc:	2305      	movs	r3, #5
 80012ce:	e00a      	b.n	80012e6 <HAL_GPIO_Init+0x206>
 80012d0:	2306      	movs	r3, #6
 80012d2:	e008      	b.n	80012e6 <HAL_GPIO_Init+0x206>
 80012d4:	2304      	movs	r3, #4
 80012d6:	e006      	b.n	80012e6 <HAL_GPIO_Init+0x206>
 80012d8:	2303      	movs	r3, #3
 80012da:	e004      	b.n	80012e6 <HAL_GPIO_Init+0x206>
 80012dc:	2302      	movs	r3, #2
 80012de:	e002      	b.n	80012e6 <HAL_GPIO_Init+0x206>
 80012e0:	2301      	movs	r3, #1
 80012e2:	e000      	b.n	80012e6 <HAL_GPIO_Init+0x206>
 80012e4:	2300      	movs	r3, #0
 80012e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012e8:	f002 0203 	and.w	r2, r2, #3
 80012ec:	0092      	lsls	r2, r2, #2
 80012ee:	4093      	lsls	r3, r2
 80012f0:	68fa      	ldr	r2, [r7, #12]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012f6:	4925      	ldr	r1, [pc, #148]	; (800138c <HAL_GPIO_Init+0x2ac>)
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	089b      	lsrs	r3, r3, #2
 80012fc:	3302      	adds	r3, #2
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d006      	beq.n	800131e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001310:	4b25      	ldr	r3, [pc, #148]	; (80013a8 <HAL_GPIO_Init+0x2c8>)
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	4924      	ldr	r1, [pc, #144]	; (80013a8 <HAL_GPIO_Init+0x2c8>)
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	4313      	orrs	r3, r2
 800131a:	608b      	str	r3, [r1, #8]
 800131c:	e006      	b.n	800132c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800131e:	4b22      	ldr	r3, [pc, #136]	; (80013a8 <HAL_GPIO_Init+0x2c8>)
 8001320:	689a      	ldr	r2, [r3, #8]
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	43db      	mvns	r3, r3
 8001326:	4920      	ldr	r1, [pc, #128]	; (80013a8 <HAL_GPIO_Init+0x2c8>)
 8001328:	4013      	ands	r3, r2
 800132a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d006      	beq.n	8001346 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001338:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <HAL_GPIO_Init+0x2c8>)
 800133a:	68da      	ldr	r2, [r3, #12]
 800133c:	491a      	ldr	r1, [pc, #104]	; (80013a8 <HAL_GPIO_Init+0x2c8>)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	4313      	orrs	r3, r2
 8001342:	60cb      	str	r3, [r1, #12]
 8001344:	e006      	b.n	8001354 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001346:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <HAL_GPIO_Init+0x2c8>)
 8001348:	68da      	ldr	r2, [r3, #12]
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	43db      	mvns	r3, r3
 800134e:	4916      	ldr	r1, [pc, #88]	; (80013a8 <HAL_GPIO_Init+0x2c8>)
 8001350:	4013      	ands	r3, r2
 8001352:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d025      	beq.n	80013ac <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001360:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <HAL_GPIO_Init+0x2c8>)
 8001362:	685a      	ldr	r2, [r3, #4]
 8001364:	4910      	ldr	r1, [pc, #64]	; (80013a8 <HAL_GPIO_Init+0x2c8>)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	4313      	orrs	r3, r2
 800136a:	604b      	str	r3, [r1, #4]
 800136c:	e025      	b.n	80013ba <HAL_GPIO_Init+0x2da>
 800136e:	bf00      	nop
 8001370:	10320000 	.word	0x10320000
 8001374:	10310000 	.word	0x10310000
 8001378:	10220000 	.word	0x10220000
 800137c:	10210000 	.word	0x10210000
 8001380:	10120000 	.word	0x10120000
 8001384:	10110000 	.word	0x10110000
 8001388:	40021000 	.word	0x40021000
 800138c:	40010000 	.word	0x40010000
 8001390:	40010800 	.word	0x40010800
 8001394:	40010c00 	.word	0x40010c00
 8001398:	40011000 	.word	0x40011000
 800139c:	40011400 	.word	0x40011400
 80013a0:	40011800 	.word	0x40011800
 80013a4:	40011c00 	.word	0x40011c00
 80013a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013ac:	4b15      	ldr	r3, [pc, #84]	; (8001404 <HAL_GPIO_Init+0x324>)
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	43db      	mvns	r3, r3
 80013b4:	4913      	ldr	r1, [pc, #76]	; (8001404 <HAL_GPIO_Init+0x324>)
 80013b6:	4013      	ands	r3, r2
 80013b8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d006      	beq.n	80013d4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <HAL_GPIO_Init+0x324>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	490e      	ldr	r1, [pc, #56]	; (8001404 <HAL_GPIO_Init+0x324>)
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	600b      	str	r3, [r1, #0]
 80013d2:	e006      	b.n	80013e2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <HAL_GPIO_Init+0x324>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	43db      	mvns	r3, r3
 80013dc:	4909      	ldr	r1, [pc, #36]	; (8001404 <HAL_GPIO_Init+0x324>)
 80013de:	4013      	ands	r3, r2
 80013e0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e4:	3301      	adds	r3, #1
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ee:	fa22 f303 	lsr.w	r3, r2, r3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f47f ae7e 	bne.w	80010f4 <HAL_GPIO_Init+0x14>
  }
}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	372c      	adds	r7, #44	; 0x2c
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr
 8001404:	40010400 	.word	0x40010400

08001408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	807b      	strh	r3, [r7, #2]
 8001414:	4613      	mov	r3, r2
 8001416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001418:	787b      	ldrb	r3, [r7, #1]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800141e:	887a      	ldrh	r2, [r7, #2]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001424:	e003      	b.n	800142e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001426:	887b      	ldrh	r3, [r7, #2]
 8001428:	041a      	lsls	r2, r3, #16
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	611a      	str	r2, [r3, #16]
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr

08001438 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e12b      	b.n	80016a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d106      	bne.n	8001464 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff f94a 	bl	80006f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2224      	movs	r2, #36	; 0x24
 8001468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 0201 	bic.w	r2, r2, #1
 800147a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800148a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800149a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800149c:	f000 fcda 	bl	8001e54 <HAL_RCC_GetPCLK1Freq>
 80014a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	4a81      	ldr	r2, [pc, #516]	; (80016ac <HAL_I2C_Init+0x274>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d807      	bhi.n	80014bc <HAL_I2C_Init+0x84>
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4a80      	ldr	r2, [pc, #512]	; (80016b0 <HAL_I2C_Init+0x278>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	bf94      	ite	ls
 80014b4:	2301      	movls	r3, #1
 80014b6:	2300      	movhi	r3, #0
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	e006      	b.n	80014ca <HAL_I2C_Init+0x92>
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4a7d      	ldr	r2, [pc, #500]	; (80016b4 <HAL_I2C_Init+0x27c>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	bf94      	ite	ls
 80014c4:	2301      	movls	r3, #1
 80014c6:	2300      	movhi	r3, #0
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e0e7      	b.n	80016a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	4a78      	ldr	r2, [pc, #480]	; (80016b8 <HAL_I2C_Init+0x280>)
 80014d6:	fba2 2303 	umull	r2, r3, r2, r3
 80014da:	0c9b      	lsrs	r3, r3, #18
 80014dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	68ba      	ldr	r2, [r7, #8]
 80014ee:	430a      	orrs	r2, r1
 80014f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	4a6a      	ldr	r2, [pc, #424]	; (80016ac <HAL_I2C_Init+0x274>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d802      	bhi.n	800150c <HAL_I2C_Init+0xd4>
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	3301      	adds	r3, #1
 800150a:	e009      	b.n	8001520 <HAL_I2C_Init+0xe8>
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001512:	fb02 f303 	mul.w	r3, r2, r3
 8001516:	4a69      	ldr	r2, [pc, #420]	; (80016bc <HAL_I2C_Init+0x284>)
 8001518:	fba2 2303 	umull	r2, r3, r2, r3
 800151c:	099b      	lsrs	r3, r3, #6
 800151e:	3301      	adds	r3, #1
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	6812      	ldr	r2, [r2, #0]
 8001524:	430b      	orrs	r3, r1
 8001526:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001532:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	495c      	ldr	r1, [pc, #368]	; (80016ac <HAL_I2C_Init+0x274>)
 800153c:	428b      	cmp	r3, r1
 800153e:	d819      	bhi.n	8001574 <HAL_I2C_Init+0x13c>
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	1e59      	subs	r1, r3, #1
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	fbb1 f3f3 	udiv	r3, r1, r3
 800154e:	1c59      	adds	r1, r3, #1
 8001550:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001554:	400b      	ands	r3, r1
 8001556:	2b00      	cmp	r3, #0
 8001558:	d00a      	beq.n	8001570 <HAL_I2C_Init+0x138>
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	1e59      	subs	r1, r3, #1
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	fbb1 f3f3 	udiv	r3, r1, r3
 8001568:	3301      	adds	r3, #1
 800156a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800156e:	e051      	b.n	8001614 <HAL_I2C_Init+0x1dc>
 8001570:	2304      	movs	r3, #4
 8001572:	e04f      	b.n	8001614 <HAL_I2C_Init+0x1dc>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d111      	bne.n	80015a0 <HAL_I2C_Init+0x168>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	1e58      	subs	r0, r3, #1
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6859      	ldr	r1, [r3, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	440b      	add	r3, r1
 800158a:	fbb0 f3f3 	udiv	r3, r0, r3
 800158e:	3301      	adds	r3, #1
 8001590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001594:	2b00      	cmp	r3, #0
 8001596:	bf0c      	ite	eq
 8001598:	2301      	moveq	r3, #1
 800159a:	2300      	movne	r3, #0
 800159c:	b2db      	uxtb	r3, r3
 800159e:	e012      	b.n	80015c6 <HAL_I2C_Init+0x18e>
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	1e58      	subs	r0, r3, #1
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6859      	ldr	r1, [r3, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	440b      	add	r3, r1
 80015ae:	0099      	lsls	r1, r3, #2
 80015b0:	440b      	add	r3, r1
 80015b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80015b6:	3301      	adds	r3, #1
 80015b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015bc:	2b00      	cmp	r3, #0
 80015be:	bf0c      	ite	eq
 80015c0:	2301      	moveq	r3, #1
 80015c2:	2300      	movne	r3, #0
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <HAL_I2C_Init+0x196>
 80015ca:	2301      	movs	r3, #1
 80015cc:	e022      	b.n	8001614 <HAL_I2C_Init+0x1dc>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10e      	bne.n	80015f4 <HAL_I2C_Init+0x1bc>
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	1e58      	subs	r0, r3, #1
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6859      	ldr	r1, [r3, #4]
 80015de:	460b      	mov	r3, r1
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	440b      	add	r3, r1
 80015e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80015e8:	3301      	adds	r3, #1
 80015ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015f2:	e00f      	b.n	8001614 <HAL_I2C_Init+0x1dc>
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	1e58      	subs	r0, r3, #1
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6859      	ldr	r1, [r3, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	440b      	add	r3, r1
 8001602:	0099      	lsls	r1, r3, #2
 8001604:	440b      	add	r3, r1
 8001606:	fbb0 f3f3 	udiv	r3, r0, r3
 800160a:	3301      	adds	r3, #1
 800160c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001610:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001614:	6879      	ldr	r1, [r7, #4]
 8001616:	6809      	ldr	r1, [r1, #0]
 8001618:	4313      	orrs	r3, r2
 800161a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	69da      	ldr	r2, [r3, #28]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a1b      	ldr	r3, [r3, #32]
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	430a      	orrs	r2, r1
 8001636:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001642:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	6911      	ldr	r1, [r2, #16]
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	68d2      	ldr	r2, [r2, #12]
 800164e:	4311      	orrs	r1, r2
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	6812      	ldr	r2, [r2, #0]
 8001654:	430b      	orrs	r3, r1
 8001656:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	695a      	ldr	r2, [r3, #20]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	431a      	orrs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	430a      	orrs	r2, r1
 8001672:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 0201 	orr.w	r2, r2, #1
 8001682:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2220      	movs	r2, #32
 800168e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	000186a0 	.word	0x000186a0
 80016b0:	001e847f 	.word	0x001e847f
 80016b4:	003d08ff 	.word	0x003d08ff
 80016b8:	431bde83 	.word	0x431bde83
 80016bc:	10624dd3 	.word	0x10624dd3

080016c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e272      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f000 8087 	beq.w	80017ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016e0:	4b92      	ldr	r3, [pc, #584]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 030c 	and.w	r3, r3, #12
 80016e8:	2b04      	cmp	r3, #4
 80016ea:	d00c      	beq.n	8001706 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016ec:	4b8f      	ldr	r3, [pc, #572]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 030c 	and.w	r3, r3, #12
 80016f4:	2b08      	cmp	r3, #8
 80016f6:	d112      	bne.n	800171e <HAL_RCC_OscConfig+0x5e>
 80016f8:	4b8c      	ldr	r3, [pc, #560]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001704:	d10b      	bne.n	800171e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001706:	4b89      	ldr	r3, [pc, #548]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d06c      	beq.n	80017ec <HAL_RCC_OscConfig+0x12c>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d168      	bne.n	80017ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e24c      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001726:	d106      	bne.n	8001736 <HAL_RCC_OscConfig+0x76>
 8001728:	4b80      	ldr	r3, [pc, #512]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a7f      	ldr	r2, [pc, #508]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 800172e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001732:	6013      	str	r3, [r2, #0]
 8001734:	e02e      	b.n	8001794 <HAL_RCC_OscConfig+0xd4>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d10c      	bne.n	8001758 <HAL_RCC_OscConfig+0x98>
 800173e:	4b7b      	ldr	r3, [pc, #492]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a7a      	ldr	r2, [pc, #488]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001744:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	4b78      	ldr	r3, [pc, #480]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a77      	ldr	r2, [pc, #476]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001750:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	e01d      	b.n	8001794 <HAL_RCC_OscConfig+0xd4>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001760:	d10c      	bne.n	800177c <HAL_RCC_OscConfig+0xbc>
 8001762:	4b72      	ldr	r3, [pc, #456]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a71      	ldr	r2, [pc, #452]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001768:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	4b6f      	ldr	r3, [pc, #444]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a6e      	ldr	r2, [pc, #440]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	e00b      	b.n	8001794 <HAL_RCC_OscConfig+0xd4>
 800177c:	4b6b      	ldr	r3, [pc, #428]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a6a      	ldr	r2, [pc, #424]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001786:	6013      	str	r3, [r2, #0]
 8001788:	4b68      	ldr	r3, [pc, #416]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a67      	ldr	r2, [pc, #412]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 800178e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001792:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d013      	beq.n	80017c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179c:	f7ff fab6 	bl	8000d0c <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017a4:	f7ff fab2 	bl	8000d0c <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b64      	cmp	r3, #100	; 0x64
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e200      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b6:	4b5d      	ldr	r3, [pc, #372]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d0f0      	beq.n	80017a4 <HAL_RCC_OscConfig+0xe4>
 80017c2:	e014      	b.n	80017ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c4:	f7ff faa2 	bl	8000d0c <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017cc:	f7ff fa9e 	bl	8000d0c <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b64      	cmp	r3, #100	; 0x64
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e1ec      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017de:	4b53      	ldr	r3, [pc, #332]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f0      	bne.n	80017cc <HAL_RCC_OscConfig+0x10c>
 80017ea:	e000      	b.n	80017ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d063      	beq.n	80018c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017fa:	4b4c      	ldr	r3, [pc, #304]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f003 030c 	and.w	r3, r3, #12
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00b      	beq.n	800181e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001806:	4b49      	ldr	r3, [pc, #292]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f003 030c 	and.w	r3, r3, #12
 800180e:	2b08      	cmp	r3, #8
 8001810:	d11c      	bne.n	800184c <HAL_RCC_OscConfig+0x18c>
 8001812:	4b46      	ldr	r3, [pc, #280]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d116      	bne.n	800184c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800181e:	4b43      	ldr	r3, [pc, #268]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d005      	beq.n	8001836 <HAL_RCC_OscConfig+0x176>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d001      	beq.n	8001836 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e1c0      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001836:	4b3d      	ldr	r3, [pc, #244]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	4939      	ldr	r1, [pc, #228]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001846:	4313      	orrs	r3, r2
 8001848:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800184a:	e03a      	b.n	80018c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d020      	beq.n	8001896 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001854:	4b36      	ldr	r3, [pc, #216]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001856:	2201      	movs	r2, #1
 8001858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185a:	f7ff fa57 	bl	8000d0c <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001860:	e008      	b.n	8001874 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001862:	f7ff fa53 	bl	8000d0c <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e1a1      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001874:	4b2d      	ldr	r3, [pc, #180]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0f0      	beq.n	8001862 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001880:	4b2a      	ldr	r3, [pc, #168]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	4927      	ldr	r1, [pc, #156]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 8001890:	4313      	orrs	r3, r2
 8001892:	600b      	str	r3, [r1, #0]
 8001894:	e015      	b.n	80018c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001896:	4b26      	ldr	r3, [pc, #152]	; (8001930 <HAL_RCC_OscConfig+0x270>)
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189c:	f7ff fa36 	bl	8000d0c <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018a4:	f7ff fa32 	bl	8000d0c <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e180      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018b6:	4b1d      	ldr	r3, [pc, #116]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1f0      	bne.n	80018a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0308 	and.w	r3, r3, #8
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d03a      	beq.n	8001944 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d019      	beq.n	800190a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018d6:	4b17      	ldr	r3, [pc, #92]	; (8001934 <HAL_RCC_OscConfig+0x274>)
 80018d8:	2201      	movs	r2, #1
 80018da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018dc:	f7ff fa16 	bl	8000d0c <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018e4:	f7ff fa12 	bl	8000d0c <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e160      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018f6:	4b0d      	ldr	r3, [pc, #52]	; (800192c <HAL_RCC_OscConfig+0x26c>)
 80018f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d0f0      	beq.n	80018e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001902:	2001      	movs	r0, #1
 8001904:	f000 face 	bl	8001ea4 <RCC_Delay>
 8001908:	e01c      	b.n	8001944 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800190a:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <HAL_RCC_OscConfig+0x274>)
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001910:	f7ff f9fc 	bl	8000d0c <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001916:	e00f      	b.n	8001938 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001918:	f7ff f9f8 	bl	8000d0c <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d908      	bls.n	8001938 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e146      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4f8>
 800192a:	bf00      	nop
 800192c:	40021000 	.word	0x40021000
 8001930:	42420000 	.word	0x42420000
 8001934:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001938:	4b92      	ldr	r3, [pc, #584]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 800193a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d1e9      	bne.n	8001918 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0304 	and.w	r3, r3, #4
 800194c:	2b00      	cmp	r3, #0
 800194e:	f000 80a6 	beq.w	8001a9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001952:	2300      	movs	r3, #0
 8001954:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001956:	4b8b      	ldr	r3, [pc, #556]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d10d      	bne.n	800197e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001962:	4b88      	ldr	r3, [pc, #544]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	4a87      	ldr	r2, [pc, #540]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800196c:	61d3      	str	r3, [r2, #28]
 800196e:	4b85      	ldr	r3, [pc, #532]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001976:	60bb      	str	r3, [r7, #8]
 8001978:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800197a:	2301      	movs	r3, #1
 800197c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800197e:	4b82      	ldr	r3, [pc, #520]	; (8001b88 <HAL_RCC_OscConfig+0x4c8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001986:	2b00      	cmp	r3, #0
 8001988:	d118      	bne.n	80019bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800198a:	4b7f      	ldr	r3, [pc, #508]	; (8001b88 <HAL_RCC_OscConfig+0x4c8>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a7e      	ldr	r2, [pc, #504]	; (8001b88 <HAL_RCC_OscConfig+0x4c8>)
 8001990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001994:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001996:	f7ff f9b9 	bl	8000d0c <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800199e:	f7ff f9b5 	bl	8000d0c <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b64      	cmp	r3, #100	; 0x64
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e103      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b0:	4b75      	ldr	r3, [pc, #468]	; (8001b88 <HAL_RCC_OscConfig+0x4c8>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0f0      	beq.n	800199e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d106      	bne.n	80019d2 <HAL_RCC_OscConfig+0x312>
 80019c4:	4b6f      	ldr	r3, [pc, #444]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	4a6e      	ldr	r2, [pc, #440]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	6213      	str	r3, [r2, #32]
 80019d0:	e02d      	b.n	8001a2e <HAL_RCC_OscConfig+0x36e>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d10c      	bne.n	80019f4 <HAL_RCC_OscConfig+0x334>
 80019da:	4b6a      	ldr	r3, [pc, #424]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 80019dc:	6a1b      	ldr	r3, [r3, #32]
 80019de:	4a69      	ldr	r2, [pc, #420]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 80019e0:	f023 0301 	bic.w	r3, r3, #1
 80019e4:	6213      	str	r3, [r2, #32]
 80019e6:	4b67      	ldr	r3, [pc, #412]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	4a66      	ldr	r2, [pc, #408]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 80019ec:	f023 0304 	bic.w	r3, r3, #4
 80019f0:	6213      	str	r3, [r2, #32]
 80019f2:	e01c      	b.n	8001a2e <HAL_RCC_OscConfig+0x36e>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	2b05      	cmp	r3, #5
 80019fa:	d10c      	bne.n	8001a16 <HAL_RCC_OscConfig+0x356>
 80019fc:	4b61      	ldr	r3, [pc, #388]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 80019fe:	6a1b      	ldr	r3, [r3, #32]
 8001a00:	4a60      	ldr	r2, [pc, #384]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001a02:	f043 0304 	orr.w	r3, r3, #4
 8001a06:	6213      	str	r3, [r2, #32]
 8001a08:	4b5e      	ldr	r3, [pc, #376]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	4a5d      	ldr	r2, [pc, #372]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	6213      	str	r3, [r2, #32]
 8001a14:	e00b      	b.n	8001a2e <HAL_RCC_OscConfig+0x36e>
 8001a16:	4b5b      	ldr	r3, [pc, #364]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	4a5a      	ldr	r2, [pc, #360]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001a1c:	f023 0301 	bic.w	r3, r3, #1
 8001a20:	6213      	str	r3, [r2, #32]
 8001a22:	4b58      	ldr	r3, [pc, #352]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	4a57      	ldr	r2, [pc, #348]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001a28:	f023 0304 	bic.w	r3, r3, #4
 8001a2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d015      	beq.n	8001a62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a36:	f7ff f969 	bl	8000d0c <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a3c:	e00a      	b.n	8001a54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a3e:	f7ff f965 	bl	8000d0c <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e0b1      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a54:	4b4b      	ldr	r3, [pc, #300]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0ee      	beq.n	8001a3e <HAL_RCC_OscConfig+0x37e>
 8001a60:	e014      	b.n	8001a8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a62:	f7ff f953 	bl	8000d0c <HAL_GetTick>
 8001a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a68:	e00a      	b.n	8001a80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a6a:	f7ff f94f 	bl	8000d0c <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e09b      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a80:	4b40      	ldr	r3, [pc, #256]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1ee      	bne.n	8001a6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a8c:	7dfb      	ldrb	r3, [r7, #23]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d105      	bne.n	8001a9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a92:	4b3c      	ldr	r3, [pc, #240]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	4a3b      	ldr	r2, [pc, #236]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001a98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 8087 	beq.w	8001bb6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aa8:	4b36      	ldr	r3, [pc, #216]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f003 030c 	and.w	r3, r3, #12
 8001ab0:	2b08      	cmp	r3, #8
 8001ab2:	d061      	beq.n	8001b78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69db      	ldr	r3, [r3, #28]
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d146      	bne.n	8001b4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001abc:	4b33      	ldr	r3, [pc, #204]	; (8001b8c <HAL_RCC_OscConfig+0x4cc>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac2:	f7ff f923 	bl	8000d0c <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aca:	f7ff f91f 	bl	8000d0c <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e06d      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001adc:	4b29      	ldr	r3, [pc, #164]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1f0      	bne.n	8001aca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001af0:	d108      	bne.n	8001b04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001af2:	4b24      	ldr	r3, [pc, #144]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	4921      	ldr	r1, [pc, #132]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001b00:	4313      	orrs	r3, r2
 8001b02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b04:	4b1f      	ldr	r3, [pc, #124]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a19      	ldr	r1, [r3, #32]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b14:	430b      	orrs	r3, r1
 8001b16:	491b      	ldr	r1, [pc, #108]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <HAL_RCC_OscConfig+0x4cc>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b22:	f7ff f8f3 	bl	8000d0c <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b2a:	f7ff f8ef 	bl	8000d0c <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e03d      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b3c:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0f0      	beq.n	8001b2a <HAL_RCC_OscConfig+0x46a>
 8001b48:	e035      	b.n	8001bb6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b4a:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <HAL_RCC_OscConfig+0x4cc>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b50:	f7ff f8dc 	bl	8000d0c <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b58:	f7ff f8d8 	bl	8000d0c <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e026      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <HAL_RCC_OscConfig+0x4c4>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1f0      	bne.n	8001b58 <HAL_RCC_OscConfig+0x498>
 8001b76:	e01e      	b.n	8001bb6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69db      	ldr	r3, [r3, #28]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d107      	bne.n	8001b90 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e019      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4f8>
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40007000 	.word	0x40007000
 8001b8c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b90:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <HAL_RCC_OscConfig+0x500>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d106      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d001      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40021000 	.word	0x40021000

08001bc4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e0d0      	b.n	8001d7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bd8:	4b6a      	ldr	r3, [pc, #424]	; (8001d84 <HAL_RCC_ClockConfig+0x1c0>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d910      	bls.n	8001c08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be6:	4b67      	ldr	r3, [pc, #412]	; (8001d84 <HAL_RCC_ClockConfig+0x1c0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f023 0207 	bic.w	r2, r3, #7
 8001bee:	4965      	ldr	r1, [pc, #404]	; (8001d84 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf6:	4b63      	ldr	r3, [pc, #396]	; (8001d84 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	683a      	ldr	r2, [r7, #0]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d001      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e0b8      	b.n	8001d7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d020      	beq.n	8001c56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d005      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c20:	4b59      	ldr	r3, [pc, #356]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	4a58      	ldr	r2, [pc, #352]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001c26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0308 	and.w	r3, r3, #8
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d005      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c38:	4b53      	ldr	r3, [pc, #332]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	4a52      	ldr	r2, [pc, #328]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c44:	4b50      	ldr	r3, [pc, #320]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	494d      	ldr	r1, [pc, #308]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d040      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d107      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c6a:	4b47      	ldr	r3, [pc, #284]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d115      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e07f      	b.n	8001d7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d107      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c82:	4b41      	ldr	r3, [pc, #260]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d109      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e073      	b.n	8001d7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c92:	4b3d      	ldr	r3, [pc, #244]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e06b      	b.n	8001d7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ca2:	4b39      	ldr	r3, [pc, #228]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f023 0203 	bic.w	r2, r3, #3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	4936      	ldr	r1, [pc, #216]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cb4:	f7ff f82a 	bl	8000d0c <HAL_GetTick>
 8001cb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cba:	e00a      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cbc:	f7ff f826 	bl	8000d0c <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e053      	b.n	8001d7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cd2:	4b2d      	ldr	r3, [pc, #180]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f003 020c 	and.w	r2, r3, #12
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d1eb      	bne.n	8001cbc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ce4:	4b27      	ldr	r3, [pc, #156]	; (8001d84 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d210      	bcs.n	8001d14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf2:	4b24      	ldr	r3, [pc, #144]	; (8001d84 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f023 0207 	bic.w	r2, r3, #7
 8001cfa:	4922      	ldr	r1, [pc, #136]	; (8001d84 <HAL_RCC_ClockConfig+0x1c0>)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d02:	4b20      	ldr	r3, [pc, #128]	; (8001d84 <HAL_RCC_ClockConfig+0x1c0>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d001      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e032      	b.n	8001d7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0304 	and.w	r3, r3, #4
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d008      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d20:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	4916      	ldr	r1, [pc, #88]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0308 	and.w	r3, r3, #8
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d009      	beq.n	8001d52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d3e:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	490e      	ldr	r1, [pc, #56]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d52:	f000 f821 	bl	8001d98 <HAL_RCC_GetSysClockFreq>
 8001d56:	4602      	mov	r2, r0
 8001d58:	4b0b      	ldr	r3, [pc, #44]	; (8001d88 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	091b      	lsrs	r3, r3, #4
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	490a      	ldr	r1, [pc, #40]	; (8001d8c <HAL_RCC_ClockConfig+0x1c8>)
 8001d64:	5ccb      	ldrb	r3, [r1, r3]
 8001d66:	fa22 f303 	lsr.w	r3, r2, r3
 8001d6a:	4a09      	ldr	r2, [pc, #36]	; (8001d90 <HAL_RCC_ClockConfig+0x1cc>)
 8001d6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d6e:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <HAL_RCC_ClockConfig+0x1d0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7fe ff88 	bl	8000c88 <HAL_InitTick>

  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40022000 	.word	0x40022000
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	08005120 	.word	0x08005120
 8001d90:	20000000 	.word	0x20000000
 8001d94:	20000004 	.word	0x20000004

08001d98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b087      	sub	sp, #28
 8001d9c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	2300      	movs	r3, #0
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
 8001daa:	2300      	movs	r3, #0
 8001dac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001dae:	2300      	movs	r3, #0
 8001db0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001db2:	4b1e      	ldr	r3, [pc, #120]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x94>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f003 030c 	and.w	r3, r3, #12
 8001dbe:	2b04      	cmp	r3, #4
 8001dc0:	d002      	beq.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x30>
 8001dc2:	2b08      	cmp	r3, #8
 8001dc4:	d003      	beq.n	8001dce <HAL_RCC_GetSysClockFreq+0x36>
 8001dc6:	e027      	b.n	8001e18 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dc8:	4b19      	ldr	r3, [pc, #100]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dca:	613b      	str	r3, [r7, #16]
      break;
 8001dcc:	e027      	b.n	8001e1e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	0c9b      	lsrs	r3, r3, #18
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	4a17      	ldr	r2, [pc, #92]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001dd8:	5cd3      	ldrb	r3, [r2, r3]
 8001dda:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d010      	beq.n	8001e08 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001de6:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <HAL_RCC_GetSysClockFreq+0x94>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	0c5b      	lsrs	r3, r3, #17
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	4a11      	ldr	r2, [pc, #68]	; (8001e38 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001df2:	5cd3      	ldrb	r3, [r2, r3]
 8001df4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a0d      	ldr	r2, [pc, #52]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dfa:	fb03 f202 	mul.w	r2, r3, r2
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e04:	617b      	str	r3, [r7, #20]
 8001e06:	e004      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a0c      	ldr	r2, [pc, #48]	; (8001e3c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e0c:	fb02 f303 	mul.w	r3, r2, r3
 8001e10:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	613b      	str	r3, [r7, #16]
      break;
 8001e16:	e002      	b.n	8001e1e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e1a:	613b      	str	r3, [r7, #16]
      break;
 8001e1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e1e:	693b      	ldr	r3, [r7, #16]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	371c      	adds	r7, #28
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bc80      	pop	{r7}
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	007a1200 	.word	0x007a1200
 8001e34:	08005138 	.word	0x08005138
 8001e38:	08005148 	.word	0x08005148
 8001e3c:	003d0900 	.word	0x003d0900

08001e40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e44:	4b02      	ldr	r3, [pc, #8]	; (8001e50 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e46:	681b      	ldr	r3, [r3, #0]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr
 8001e50:	20000000 	.word	0x20000000

08001e54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e58:	f7ff fff2 	bl	8001e40 <HAL_RCC_GetHCLKFreq>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	0a1b      	lsrs	r3, r3, #8
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	4903      	ldr	r1, [pc, #12]	; (8001e78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e6a:	5ccb      	ldrb	r3, [r1, r3]
 8001e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40021000 	.word	0x40021000
 8001e78:	08005130 	.word	0x08005130

08001e7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e80:	f7ff ffde 	bl	8001e40 <HAL_RCC_GetHCLKFreq>
 8001e84:	4602      	mov	r2, r0
 8001e86:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	0adb      	lsrs	r3, r3, #11
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	4903      	ldr	r1, [pc, #12]	; (8001ea0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e92:	5ccb      	ldrb	r3, [r1, r3]
 8001e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	08005130 	.word	0x08005130

08001ea4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001eac:	4b0a      	ldr	r3, [pc, #40]	; (8001ed8 <RCC_Delay+0x34>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a0a      	ldr	r2, [pc, #40]	; (8001edc <RCC_Delay+0x38>)
 8001eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb6:	0a5b      	lsrs	r3, r3, #9
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	fb02 f303 	mul.w	r3, r2, r3
 8001ebe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ec0:	bf00      	nop
  }
  while (Delay --);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	1e5a      	subs	r2, r3, #1
 8001ec6:	60fa      	str	r2, [r7, #12]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1f9      	bne.n	8001ec0 <RCC_Delay+0x1c>
}
 8001ecc:	bf00      	nop
 8001ece:	bf00      	nop
 8001ed0:	3714      	adds	r7, #20
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr
 8001ed8:	20000000 	.word	0x20000000
 8001edc:	10624dd3 	.word	0x10624dd3

08001ee0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e076      	b.n	8001fe0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d108      	bne.n	8001f0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f02:	d009      	beq.n	8001f18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	61da      	str	r2, [r3, #28]
 8001f0a:	e005      	b.n	8001f18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d106      	bne.n	8001f38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7fe fce8 	bl	8000908 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f4e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001f60:	431a      	orrs	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	431a      	orrs	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69db      	ldr	r3, [r3, #28]
 8001f8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f92:	431a      	orrs	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f9c:	ea42 0103 	orr.w	r1, r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	0c1a      	lsrs	r2, r3, #16
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f002 0204 	and.w	r2, r2, #4
 8001fbe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	69da      	ldr	r2, [r3, #28]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e042      	b.n	8002080 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d106      	bne.n	8002014 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7fe fd68 	bl	8000ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2224      	movs	r2, #36	; 0x24
 8002018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68da      	ldr	r2, [r3, #12]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800202a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 f82b 	bl	8002088 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	691a      	ldr	r2, [r3, #16]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002040:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	695a      	ldr	r2, [r3, #20]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002050:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68da      	ldr	r2, [r3, #12]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002060:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2220      	movs	r2, #32
 800206c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2220      	movs	r2, #32
 8002074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68da      	ldr	r2, [r3, #12]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	430a      	orrs	r2, r1
 80020a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80020c2:	f023 030c 	bic.w	r3, r3, #12
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	6812      	ldr	r2, [r2, #0]
 80020ca:	68b9      	ldr	r1, [r7, #8]
 80020cc:	430b      	orrs	r3, r1
 80020ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	699a      	ldr	r2, [r3, #24]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a2c      	ldr	r2, [pc, #176]	; (800219c <UART_SetConfig+0x114>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d103      	bne.n	80020f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80020f0:	f7ff fec4 	bl	8001e7c <HAL_RCC_GetPCLK2Freq>
 80020f4:	60f8      	str	r0, [r7, #12]
 80020f6:	e002      	b.n	80020fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80020f8:	f7ff feac 	bl	8001e54 <HAL_RCC_GetPCLK1Freq>
 80020fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	4613      	mov	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	009a      	lsls	r2, r3, #2
 8002108:	441a      	add	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	fbb2 f3f3 	udiv	r3, r2, r3
 8002114:	4a22      	ldr	r2, [pc, #136]	; (80021a0 <UART_SetConfig+0x118>)
 8002116:	fba2 2303 	umull	r2, r3, r2, r3
 800211a:	095b      	lsrs	r3, r3, #5
 800211c:	0119      	lsls	r1, r3, #4
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	4613      	mov	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	009a      	lsls	r2, r3, #2
 8002128:	441a      	add	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	fbb2 f2f3 	udiv	r2, r2, r3
 8002134:	4b1a      	ldr	r3, [pc, #104]	; (80021a0 <UART_SetConfig+0x118>)
 8002136:	fba3 0302 	umull	r0, r3, r3, r2
 800213a:	095b      	lsrs	r3, r3, #5
 800213c:	2064      	movs	r0, #100	; 0x64
 800213e:	fb00 f303 	mul.w	r3, r0, r3
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	011b      	lsls	r3, r3, #4
 8002146:	3332      	adds	r3, #50	; 0x32
 8002148:	4a15      	ldr	r2, [pc, #84]	; (80021a0 <UART_SetConfig+0x118>)
 800214a:	fba2 2303 	umull	r2, r3, r2, r3
 800214e:	095b      	lsrs	r3, r3, #5
 8002150:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002154:	4419      	add	r1, r3
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	4613      	mov	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	009a      	lsls	r2, r3, #2
 8002160:	441a      	add	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	fbb2 f2f3 	udiv	r2, r2, r3
 800216c:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <UART_SetConfig+0x118>)
 800216e:	fba3 0302 	umull	r0, r3, r3, r2
 8002172:	095b      	lsrs	r3, r3, #5
 8002174:	2064      	movs	r0, #100	; 0x64
 8002176:	fb00 f303 	mul.w	r3, r0, r3
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	011b      	lsls	r3, r3, #4
 800217e:	3332      	adds	r3, #50	; 0x32
 8002180:	4a07      	ldr	r2, [pc, #28]	; (80021a0 <UART_SetConfig+0x118>)
 8002182:	fba2 2303 	umull	r2, r3, r2, r3
 8002186:	095b      	lsrs	r3, r3, #5
 8002188:	f003 020f 	and.w	r2, r3, #15
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	440a      	add	r2, r1
 8002192:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002194:	bf00      	nop
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40013800 	.word	0x40013800
 80021a0:	51eb851f 	.word	0x51eb851f

080021a4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021aa:	f3ef 8305 	mrs	r3, IPSR
 80021ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80021b0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10f      	bne.n	80021d6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021b6:	f3ef 8310 	mrs	r3, PRIMASK
 80021ba:	607b      	str	r3, [r7, #4]
  return(result);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d109      	bne.n	80021d6 <osKernelInitialize+0x32>
 80021c2:	4b10      	ldr	r3, [pc, #64]	; (8002204 <osKernelInitialize+0x60>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d109      	bne.n	80021de <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80021ca:	f3ef 8311 	mrs	r3, BASEPRI
 80021ce:	603b      	str	r3, [r7, #0]
  return(result);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80021d6:	f06f 0305 	mvn.w	r3, #5
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	e00c      	b.n	80021f8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80021de:	4b09      	ldr	r3, [pc, #36]	; (8002204 <osKernelInitialize+0x60>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d105      	bne.n	80021f2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80021e6:	4b07      	ldr	r3, [pc, #28]	; (8002204 <osKernelInitialize+0x60>)
 80021e8:	2201      	movs	r2, #1
 80021ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80021ec:	2300      	movs	r3, #0
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	e002      	b.n	80021f8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80021f2:	f04f 33ff 	mov.w	r3, #4294967295
 80021f6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80021f8:	68fb      	ldr	r3, [r7, #12]
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr
 8002204:	20000260 	.word	0x20000260

08002208 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800220e:	f3ef 8305 	mrs	r3, IPSR
 8002212:	60bb      	str	r3, [r7, #8]
  return(result);
 8002214:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10f      	bne.n	800223a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800221a:	f3ef 8310 	mrs	r3, PRIMASK
 800221e:	607b      	str	r3, [r7, #4]
  return(result);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d109      	bne.n	800223a <osKernelStart+0x32>
 8002226:	4b11      	ldr	r3, [pc, #68]	; (800226c <osKernelStart+0x64>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d109      	bne.n	8002242 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800222e:	f3ef 8311 	mrs	r3, BASEPRI
 8002232:	603b      	str	r3, [r7, #0]
  return(result);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <osKernelStart+0x3a>
    stat = osErrorISR;
 800223a:	f06f 0305 	mvn.w	r3, #5
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	e00e      	b.n	8002260 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002242:	4b0a      	ldr	r3, [pc, #40]	; (800226c <osKernelStart+0x64>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d107      	bne.n	800225a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800224a:	4b08      	ldr	r3, [pc, #32]	; (800226c <osKernelStart+0x64>)
 800224c:	2202      	movs	r2, #2
 800224e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002250:	f001 f954 	bl	80034fc <vTaskStartScheduler>
      stat = osOK;
 8002254:	2300      	movs	r3, #0
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	e002      	b.n	8002260 <osKernelStart+0x58>
    } else {
      stat = osError;
 800225a:	f04f 33ff 	mov.w	r3, #4294967295
 800225e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002260:	68fb      	ldr	r3, [r7, #12]
}
 8002262:	4618      	mov	r0, r3
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20000260 	.word	0x20000260

08002270 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002270:	b580      	push	{r7, lr}
 8002272:	b092      	sub	sp, #72	; 0x48
 8002274:	af04      	add	r7, sp, #16
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002280:	f3ef 8305 	mrs	r3, IPSR
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002288:	2b00      	cmp	r3, #0
 800228a:	f040 8094 	bne.w	80023b6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800228e:	f3ef 8310 	mrs	r3, PRIMASK
 8002292:	623b      	str	r3, [r7, #32]
  return(result);
 8002294:	6a3b      	ldr	r3, [r7, #32]
 8002296:	2b00      	cmp	r3, #0
 8002298:	f040 808d 	bne.w	80023b6 <osThreadNew+0x146>
 800229c:	4b48      	ldr	r3, [pc, #288]	; (80023c0 <osThreadNew+0x150>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d106      	bne.n	80022b2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80022a4:	f3ef 8311 	mrs	r3, BASEPRI
 80022a8:	61fb      	str	r3, [r7, #28]
  return(result);
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f040 8082 	bne.w	80023b6 <osThreadNew+0x146>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d07e      	beq.n	80023b6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80022b8:	2380      	movs	r3, #128	; 0x80
 80022ba:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80022bc:	2318      	movs	r3, #24
 80022be:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80022c0:	2300      	movs	r3, #0
 80022c2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80022c4:	f107 031b 	add.w	r3, r7, #27
 80022c8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80022ca:	f04f 33ff 	mov.w	r3, #4294967295
 80022ce:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d045      	beq.n	8002362 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d002      	beq.n	80022e4 <osThreadNew+0x74>
        name = attr->name;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80022f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d008      	beq.n	800230a <osThreadNew+0x9a>
 80022f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fa:	2b38      	cmp	r3, #56	; 0x38
 80022fc:	d805      	bhi.n	800230a <osThreadNew+0x9a>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <osThreadNew+0x9e>
        return (NULL);
 800230a:	2300      	movs	r3, #0
 800230c:	e054      	b.n	80023b8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	089b      	lsrs	r3, r3, #2
 800231c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00e      	beq.n	8002344 <osThreadNew+0xd4>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	2bb7      	cmp	r3, #183	; 0xb7
 800232c:	d90a      	bls.n	8002344 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002332:	2b00      	cmp	r3, #0
 8002334:	d006      	beq.n	8002344 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d002      	beq.n	8002344 <osThreadNew+0xd4>
        mem = 1;
 800233e:	2301      	movs	r3, #1
 8002340:	62bb      	str	r3, [r7, #40]	; 0x28
 8002342:	e010      	b.n	8002366 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10c      	bne.n	8002366 <osThreadNew+0xf6>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d108      	bne.n	8002366 <osThreadNew+0xf6>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d104      	bne.n	8002366 <osThreadNew+0xf6>
          mem = 0;
 800235c:	2300      	movs	r3, #0
 800235e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002360:	e001      	b.n	8002366 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002362:	2300      	movs	r3, #0
 8002364:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002368:	2b01      	cmp	r3, #1
 800236a:	d110      	bne.n	800238e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002374:	9202      	str	r2, [sp, #8]
 8002376:	9301      	str	r3, [sp, #4]
 8002378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002380:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 fed6 	bl	8003134 <xTaskCreateStatic>
 8002388:	4603      	mov	r3, r0
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	e013      	b.n	80023b6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800238e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002390:	2b00      	cmp	r3, #0
 8002392:	d110      	bne.n	80023b6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002396:	b29a      	uxth	r2, r3
 8002398:	f107 0314 	add.w	r3, r7, #20
 800239c:	9301      	str	r3, [sp, #4]
 800239e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 ff20 	bl	80031ec <xTaskCreate>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d001      	beq.n	80023b6 <osThreadNew+0x146>
          hTask = NULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80023b6:	697b      	ldr	r3, [r7, #20]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3738      	adds	r7, #56	; 0x38
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20000260 	.word	0x20000260

080023c4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023cc:	f3ef 8305 	mrs	r3, IPSR
 80023d0:	613b      	str	r3, [r7, #16]
  return(result);
 80023d2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d10f      	bne.n	80023f8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023d8:	f3ef 8310 	mrs	r3, PRIMASK
 80023dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d109      	bne.n	80023f8 <osDelay+0x34>
 80023e4:	4b0d      	ldr	r3, [pc, #52]	; (800241c <osDelay+0x58>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d109      	bne.n	8002400 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80023ec:	f3ef 8311 	mrs	r3, BASEPRI
 80023f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <osDelay+0x3c>
    stat = osErrorISR;
 80023f8:	f06f 0305 	mvn.w	r3, #5
 80023fc:	617b      	str	r3, [r7, #20]
 80023fe:	e007      	b.n	8002410 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002400:	2300      	movs	r3, #0
 8002402:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d002      	beq.n	8002410 <osDelay+0x4c>
      vTaskDelay(ticks);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f001 f842 	bl	8003494 <vTaskDelay>
    }
  }

  return (stat);
 8002410:	697b      	ldr	r3, [r7, #20]
}
 8002412:	4618      	mov	r0, r3
 8002414:	3718      	adds	r7, #24
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20000260 	.word	0x20000260

08002420 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002420:	b580      	push	{r7, lr}
 8002422:	b08c      	sub	sp, #48	; 0x30
 8002424:	af02      	add	r7, sp, #8
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800242c:	2300      	movs	r3, #0
 800242e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002430:	f3ef 8305 	mrs	r3, IPSR
 8002434:	61bb      	str	r3, [r7, #24]
  return(result);
 8002436:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002438:	2b00      	cmp	r3, #0
 800243a:	d16f      	bne.n	800251c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800243c:	f3ef 8310 	mrs	r3, PRIMASK
 8002440:	617b      	str	r3, [r7, #20]
  return(result);
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d169      	bne.n	800251c <osMessageQueueNew+0xfc>
 8002448:	4b37      	ldr	r3, [pc, #220]	; (8002528 <osMessageQueueNew+0x108>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2b02      	cmp	r3, #2
 800244e:	d105      	bne.n	800245c <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002450:	f3ef 8311 	mrs	r3, BASEPRI
 8002454:	613b      	str	r3, [r7, #16]
  return(result);
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d15f      	bne.n	800251c <osMessageQueueNew+0xfc>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d05c      	beq.n	800251c <osMessageQueueNew+0xfc>
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d059      	beq.n	800251c <osMessageQueueNew+0xfc>
    mem = -1;
 8002468:	f04f 33ff 	mov.w	r3, #4294967295
 800246c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d029      	beq.n	80024c8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d012      	beq.n	80024a2 <osMessageQueueNew+0x82>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	2b4f      	cmp	r3, #79	; 0x4f
 8002482:	d90e      	bls.n	80024a2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00a      	beq.n	80024a2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	695a      	ldr	r2, [r3, #20]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	68b9      	ldr	r1, [r7, #8]
 8002494:	fb01 f303 	mul.w	r3, r1, r3
 8002498:	429a      	cmp	r2, r3
 800249a:	d302      	bcc.n	80024a2 <osMessageQueueNew+0x82>
        mem = 1;
 800249c:	2301      	movs	r3, #1
 800249e:	623b      	str	r3, [r7, #32]
 80024a0:	e014      	b.n	80024cc <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d110      	bne.n	80024cc <osMessageQueueNew+0xac>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10c      	bne.n	80024cc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d108      	bne.n	80024cc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d104      	bne.n	80024cc <osMessageQueueNew+0xac>
          mem = 0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	623b      	str	r3, [r7, #32]
 80024c6:	e001      	b.n	80024cc <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80024cc:	6a3b      	ldr	r3, [r7, #32]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d10b      	bne.n	80024ea <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691a      	ldr	r2, [r3, #16]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	2100      	movs	r1, #0
 80024dc:	9100      	str	r1, [sp, #0]
 80024de:	68b9      	ldr	r1, [r7, #8]
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	f000 f96d 	bl	80027c0 <xQueueGenericCreateStatic>
 80024e6:	6278      	str	r0, [r7, #36]	; 0x24
 80024e8:	e008      	b.n	80024fc <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80024ea:	6a3b      	ldr	r3, [r7, #32]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d105      	bne.n	80024fc <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80024f0:	2200      	movs	r2, #0
 80024f2:	68b9      	ldr	r1, [r7, #8]
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f000 f9da 	bl	80028ae <xQueueGenericCreate>
 80024fa:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d00c      	beq.n	800251c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <osMessageQueueNew+0xf0>
        name = attr->name;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	61fb      	str	r3, [r7, #28]
 800250e:	e001      	b.n	8002514 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8002510:	2300      	movs	r3, #0
 8002512:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8002514:	69f9      	ldr	r1, [r7, #28]
 8002516:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002518:	f000 fdb0 	bl	800307c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800251e:	4618      	mov	r0, r3
 8002520:	3728      	adds	r7, #40	; 0x28
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	20000260 	.word	0x20000260

0800252c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4a06      	ldr	r2, [pc, #24]	; (8002554 <vApplicationGetIdleTaskMemory+0x28>)
 800253c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	4a05      	ldr	r2, [pc, #20]	; (8002558 <vApplicationGetIdleTaskMemory+0x2c>)
 8002542:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2280      	movs	r2, #128	; 0x80
 8002548:	601a      	str	r2, [r3, #0]
}
 800254a:	bf00      	nop
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr
 8002554:	20000264 	.word	0x20000264
 8002558:	2000031c 	.word	0x2000031c

0800255c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4a07      	ldr	r2, [pc, #28]	; (8002588 <vApplicationGetTimerTaskMemory+0x2c>)
 800256c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	4a06      	ldr	r2, [pc, #24]	; (800258c <vApplicationGetTimerTaskMemory+0x30>)
 8002572:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f44f 7280 	mov.w	r2, #256	; 0x100
 800257a:	601a      	str	r2, [r3, #0]
}
 800257c:	bf00      	nop
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	2000051c 	.word	0x2000051c
 800258c:	200005d4 	.word	0x200005d4

08002590 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f103 0208 	add.w	r2, r3, #8
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f04f 32ff 	mov.w	r2, #4294967295
 80025a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f103 0208 	add.w	r2, r3, #8
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f103 0208 	add.w	r2, r3, #8
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr

080025ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr

080025e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025e6:	b480      	push	{r7}
 80025e8:	b085      	sub	sp, #20
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
 80025ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	1c5a      	adds	r2, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	601a      	str	r2, [r3, #0]
}
 8002622:	bf00      	nop
 8002624:	3714      	adds	r7, #20
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr

0800262c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002642:	d103      	bne.n	800264c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	e00c      	b.n	8002666 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3308      	adds	r3, #8
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	e002      	b.n	800265a <vListInsert+0x2e>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68ba      	ldr	r2, [r7, #8]
 8002662:	429a      	cmp	r2, r3
 8002664:	d2f6      	bcs.n	8002654 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	685a      	ldr	r2, [r3, #4]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	1c5a      	adds	r2, r3, #1
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	601a      	str	r2, [r3, #0]
}
 8002692:	bf00      	nop
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr

0800269c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6892      	ldr	r2, [r2, #8]
 80026b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6852      	ldr	r2, [r2, #4]
 80026bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d103      	bne.n	80026d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	1e5a      	subs	r2, r3, #1
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr
	...

080026f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10a      	bne.n	800271a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002708:	f383 8811 	msr	BASEPRI, r3
 800270c:	f3bf 8f6f 	isb	sy
 8002710:	f3bf 8f4f 	dsb	sy
 8002714:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002716:	bf00      	nop
 8002718:	e7fe      	b.n	8002718 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800271a:	f002 f837 	bl	800478c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002726:	68f9      	ldr	r1, [r7, #12]
 8002728:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800272a:	fb01 f303 	mul.w	r3, r1, r3
 800272e:	441a      	add	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274a:	3b01      	subs	r3, #1
 800274c:	68f9      	ldr	r1, [r7, #12]
 800274e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002750:	fb01 f303 	mul.w	r3, r1, r3
 8002754:	441a      	add	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	22ff      	movs	r2, #255	; 0xff
 800275e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	22ff      	movs	r2, #255	; 0xff
 8002766:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d114      	bne.n	800279a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d01a      	beq.n	80027ae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	3310      	adds	r3, #16
 800277c:	4618      	mov	r0, r3
 800277e:	f001 f959 	bl	8003a34 <xTaskRemoveFromEventList>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d012      	beq.n	80027ae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002788:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <xQueueGenericReset+0xcc>)
 800278a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	f3bf 8f4f 	dsb	sy
 8002794:	f3bf 8f6f 	isb	sy
 8002798:	e009      	b.n	80027ae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	3310      	adds	r3, #16
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff fef6 	bl	8002590 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	3324      	adds	r3, #36	; 0x24
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff fef1 	bl	8002590 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80027ae:	f002 f81d 	bl	80047ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80027b2:	2301      	movs	r3, #1
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	e000ed04 	.word	0xe000ed04

080027c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08e      	sub	sp, #56	; 0x38
 80027c4:	af02      	add	r7, sp, #8
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
 80027cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10a      	bne.n	80027ea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80027d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d8:	f383 8811 	msr	BASEPRI, r3
 80027dc:	f3bf 8f6f 	isb	sy
 80027e0:	f3bf 8f4f 	dsb	sy
 80027e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80027e6:	bf00      	nop
 80027e8:	e7fe      	b.n	80027e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10a      	bne.n	8002806 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80027f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f4:	f383 8811 	msr	BASEPRI, r3
 80027f8:	f3bf 8f6f 	isb	sy
 80027fc:	f3bf 8f4f 	dsb	sy
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002802:	bf00      	nop
 8002804:	e7fe      	b.n	8002804 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d002      	beq.n	8002812 <xQueueGenericCreateStatic+0x52>
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <xQueueGenericCreateStatic+0x56>
 8002812:	2301      	movs	r3, #1
 8002814:	e000      	b.n	8002818 <xQueueGenericCreateStatic+0x58>
 8002816:	2300      	movs	r3, #0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d10a      	bne.n	8002832 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800281c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002820:	f383 8811 	msr	BASEPRI, r3
 8002824:	f3bf 8f6f 	isb	sy
 8002828:	f3bf 8f4f 	dsb	sy
 800282c:	623b      	str	r3, [r7, #32]
}
 800282e:	bf00      	nop
 8002830:	e7fe      	b.n	8002830 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d102      	bne.n	800283e <xQueueGenericCreateStatic+0x7e>
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <xQueueGenericCreateStatic+0x82>
 800283e:	2301      	movs	r3, #1
 8002840:	e000      	b.n	8002844 <xQueueGenericCreateStatic+0x84>
 8002842:	2300      	movs	r3, #0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d10a      	bne.n	800285e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800284c:	f383 8811 	msr	BASEPRI, r3
 8002850:	f3bf 8f6f 	isb	sy
 8002854:	f3bf 8f4f 	dsb	sy
 8002858:	61fb      	str	r3, [r7, #28]
}
 800285a:	bf00      	nop
 800285c:	e7fe      	b.n	800285c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800285e:	2350      	movs	r3, #80	; 0x50
 8002860:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2b50      	cmp	r3, #80	; 0x50
 8002866:	d00a      	beq.n	800287e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800286c:	f383 8811 	msr	BASEPRI, r3
 8002870:	f3bf 8f6f 	isb	sy
 8002874:	f3bf 8f4f 	dsb	sy
 8002878:	61bb      	str	r3, [r7, #24]
}
 800287a:	bf00      	nop
 800287c:	e7fe      	b.n	800287c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00d      	beq.n	80028a4 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002890:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	4613      	mov	r3, r2
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	68b9      	ldr	r1, [r7, #8]
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f000 f843 	bl	800292a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80028a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3730      	adds	r7, #48	; 0x30
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b08a      	sub	sp, #40	; 0x28
 80028b2:	af02      	add	r7, sp, #8
 80028b4:	60f8      	str	r0, [r7, #12]
 80028b6:	60b9      	str	r1, [r7, #8]
 80028b8:	4613      	mov	r3, r2
 80028ba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10a      	bne.n	80028d8 <xQueueGenericCreate+0x2a>
	__asm volatile
 80028c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c6:	f383 8811 	msr	BASEPRI, r3
 80028ca:	f3bf 8f6f 	isb	sy
 80028ce:	f3bf 8f4f 	dsb	sy
 80028d2:	613b      	str	r3, [r7, #16]
}
 80028d4:	bf00      	nop
 80028d6:	e7fe      	b.n	80028d6 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d102      	bne.n	80028e4 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80028de:	2300      	movs	r3, #0
 80028e0:	61fb      	str	r3, [r7, #28]
 80028e2:	e004      	b.n	80028ee <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	fb02 f303 	mul.w	r3, r2, r3
 80028ec:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	3350      	adds	r3, #80	; 0x50
 80028f2:	4618      	mov	r0, r3
 80028f4:	f002 f84a 	bl	800498c <pvPortMalloc>
 80028f8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00f      	beq.n	8002920 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	3350      	adds	r3, #80	; 0x50
 8002904:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800290e:	79fa      	ldrb	r2, [r7, #7]
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	4613      	mov	r3, r2
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	68b9      	ldr	r1, [r7, #8]
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f000 f805 	bl	800292a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002920:	69bb      	ldr	r3, [r7, #24]
	}
 8002922:	4618      	mov	r0, r3
 8002924:	3720      	adds	r7, #32
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b084      	sub	sp, #16
 800292e:	af00      	add	r7, sp, #0
 8002930:	60f8      	str	r0, [r7, #12]
 8002932:	60b9      	str	r1, [r7, #8]
 8002934:	607a      	str	r2, [r7, #4]
 8002936:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d103      	bne.n	8002946 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	e002      	b.n	800294c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002958:	2101      	movs	r1, #1
 800295a:	69b8      	ldr	r0, [r7, #24]
 800295c:	f7ff fec8 	bl	80026f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	78fa      	ldrb	r2, [r7, #3]
 8002964:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002968:	bf00      	nop
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08e      	sub	sp, #56	; 0x38
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
 800297c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800297e:	2300      	movs	r3, #0
 8002980:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10a      	bne.n	80029a2 <xQueueGenericSend+0x32>
	__asm volatile
 800298c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002990:	f383 8811 	msr	BASEPRI, r3
 8002994:	f3bf 8f6f 	isb	sy
 8002998:	f3bf 8f4f 	dsb	sy
 800299c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800299e:	bf00      	nop
 80029a0:	e7fe      	b.n	80029a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d103      	bne.n	80029b0 <xQueueGenericSend+0x40>
 80029a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <xQueueGenericSend+0x44>
 80029b0:	2301      	movs	r3, #1
 80029b2:	e000      	b.n	80029b6 <xQueueGenericSend+0x46>
 80029b4:	2300      	movs	r3, #0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10a      	bne.n	80029d0 <xQueueGenericSend+0x60>
	__asm volatile
 80029ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029be:	f383 8811 	msr	BASEPRI, r3
 80029c2:	f3bf 8f6f 	isb	sy
 80029c6:	f3bf 8f4f 	dsb	sy
 80029ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80029cc:	bf00      	nop
 80029ce:	e7fe      	b.n	80029ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d103      	bne.n	80029de <xQueueGenericSend+0x6e>
 80029d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d101      	bne.n	80029e2 <xQueueGenericSend+0x72>
 80029de:	2301      	movs	r3, #1
 80029e0:	e000      	b.n	80029e4 <xQueueGenericSend+0x74>
 80029e2:	2300      	movs	r3, #0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d10a      	bne.n	80029fe <xQueueGenericSend+0x8e>
	__asm volatile
 80029e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ec:	f383 8811 	msr	BASEPRI, r3
 80029f0:	f3bf 8f6f 	isb	sy
 80029f4:	f3bf 8f4f 	dsb	sy
 80029f8:	623b      	str	r3, [r7, #32]
}
 80029fa:	bf00      	nop
 80029fc:	e7fe      	b.n	80029fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029fe:	f001 f9df 	bl	8003dc0 <xTaskGetSchedulerState>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d102      	bne.n	8002a0e <xQueueGenericSend+0x9e>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <xQueueGenericSend+0xa2>
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e000      	b.n	8002a14 <xQueueGenericSend+0xa4>
 8002a12:	2300      	movs	r3, #0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10a      	bne.n	8002a2e <xQueueGenericSend+0xbe>
	__asm volatile
 8002a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a1c:	f383 8811 	msr	BASEPRI, r3
 8002a20:	f3bf 8f6f 	isb	sy
 8002a24:	f3bf 8f4f 	dsb	sy
 8002a28:	61fb      	str	r3, [r7, #28]
}
 8002a2a:	bf00      	nop
 8002a2c:	e7fe      	b.n	8002a2c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a2e:	f001 fead 	bl	800478c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d302      	bcc.n	8002a44 <xQueueGenericSend+0xd4>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d129      	bne.n	8002a98 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	68b9      	ldr	r1, [r7, #8]
 8002a48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a4a:	f000 fa07 	bl	8002e5c <prvCopyDataToQueue>
 8002a4e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d010      	beq.n	8002a7a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5a:	3324      	adds	r3, #36	; 0x24
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f000 ffe9 	bl	8003a34 <xTaskRemoveFromEventList>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d013      	beq.n	8002a90 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002a68:	4b3f      	ldr	r3, [pc, #252]	; (8002b68 <xQueueGenericSend+0x1f8>)
 8002a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	f3bf 8f4f 	dsb	sy
 8002a74:	f3bf 8f6f 	isb	sy
 8002a78:	e00a      	b.n	8002a90 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d007      	beq.n	8002a90 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002a80:	4b39      	ldr	r3, [pc, #228]	; (8002b68 <xQueueGenericSend+0x1f8>)
 8002a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	f3bf 8f4f 	dsb	sy
 8002a8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002a90:	f001 feac 	bl	80047ec <vPortExitCritical>
				return pdPASS;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e063      	b.n	8002b60 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d103      	bne.n	8002aa6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a9e:	f001 fea5 	bl	80047ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	e05c      	b.n	8002b60 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d106      	bne.n	8002aba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002aac:	f107 0314 	add.w	r3, r7, #20
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f001 f823 	bl	8003afc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002aba:	f001 fe97 	bl	80047ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002abe:	f000 fd8d 	bl	80035dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ac2:	f001 fe63 	bl	800478c <vPortEnterCritical>
 8002ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002acc:	b25b      	sxtb	r3, r3
 8002ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad2:	d103      	bne.n	8002adc <xQueueGenericSend+0x16c>
 8002ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ade:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ae2:	b25b      	sxtb	r3, r3
 8002ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae8:	d103      	bne.n	8002af2 <xQueueGenericSend+0x182>
 8002aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002af2:	f001 fe7b 	bl	80047ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002af6:	1d3a      	adds	r2, r7, #4
 8002af8:	f107 0314 	add.w	r3, r7, #20
 8002afc:	4611      	mov	r1, r2
 8002afe:	4618      	mov	r0, r3
 8002b00:	f001 f812 	bl	8003b28 <xTaskCheckForTimeOut>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d124      	bne.n	8002b54 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002b0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b0c:	f000 fa9e 	bl	800304c <prvIsQueueFull>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d018      	beq.n	8002b48 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b18:	3310      	adds	r3, #16
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	4611      	mov	r1, r2
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 ff38 	bl	8003994 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002b24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b26:	f000 fa29 	bl	8002f7c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002b2a:	f000 fd65 	bl	80035f8 <xTaskResumeAll>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	f47f af7c 	bne.w	8002a2e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002b36:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <xQueueGenericSend+0x1f8>)
 8002b38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	f3bf 8f4f 	dsb	sy
 8002b42:	f3bf 8f6f 	isb	sy
 8002b46:	e772      	b.n	8002a2e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002b48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b4a:	f000 fa17 	bl	8002f7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b4e:	f000 fd53 	bl	80035f8 <xTaskResumeAll>
 8002b52:	e76c      	b.n	8002a2e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002b54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b56:	f000 fa11 	bl	8002f7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b5a:	f000 fd4d 	bl	80035f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002b5e:	2300      	movs	r3, #0
		}
	}
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3738      	adds	r7, #56	; 0x38
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	e000ed04 	.word	0xe000ed04

08002b6c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b08e      	sub	sp, #56	; 0x38
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
 8002b78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10a      	bne.n	8002b9a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b88:	f383 8811 	msr	BASEPRI, r3
 8002b8c:	f3bf 8f6f 	isb	sy
 8002b90:	f3bf 8f4f 	dsb	sy
 8002b94:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b96:	bf00      	nop
 8002b98:	e7fe      	b.n	8002b98 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d103      	bne.n	8002ba8 <xQueueGenericSendFromISR+0x3c>
 8002ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <xQueueGenericSendFromISR+0x40>
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e000      	b.n	8002bae <xQueueGenericSendFromISR+0x42>
 8002bac:	2300      	movs	r3, #0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10a      	bne.n	8002bc8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb6:	f383 8811 	msr	BASEPRI, r3
 8002bba:	f3bf 8f6f 	isb	sy
 8002bbe:	f3bf 8f4f 	dsb	sy
 8002bc2:	623b      	str	r3, [r7, #32]
}
 8002bc4:	bf00      	nop
 8002bc6:	e7fe      	b.n	8002bc6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d103      	bne.n	8002bd6 <xQueueGenericSendFromISR+0x6a>
 8002bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d101      	bne.n	8002bda <xQueueGenericSendFromISR+0x6e>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <xQueueGenericSendFromISR+0x70>
 8002bda:	2300      	movs	r3, #0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10a      	bne.n	8002bf6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be4:	f383 8811 	msr	BASEPRI, r3
 8002be8:	f3bf 8f6f 	isb	sy
 8002bec:	f3bf 8f4f 	dsb	sy
 8002bf0:	61fb      	str	r3, [r7, #28]
}
 8002bf2:	bf00      	nop
 8002bf4:	e7fe      	b.n	8002bf4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002bf6:	f001 fe8b 	bl	8004910 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002bfa:	f3ef 8211 	mrs	r2, BASEPRI
 8002bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c02:	f383 8811 	msr	BASEPRI, r3
 8002c06:	f3bf 8f6f 	isb	sy
 8002c0a:	f3bf 8f4f 	dsb	sy
 8002c0e:	61ba      	str	r2, [r7, #24]
 8002c10:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002c12:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c14:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d302      	bcc.n	8002c28 <xQueueGenericSendFromISR+0xbc>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d12c      	bne.n	8002c82 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	68b9      	ldr	r1, [r7, #8]
 8002c36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c38:	f000 f910 	bl	8002e5c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002c3c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c44:	d112      	bne.n	8002c6c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d016      	beq.n	8002c7c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c50:	3324      	adds	r3, #36	; 0x24
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 feee 	bl	8003a34 <xTaskRemoveFromEventList>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00e      	beq.n	8002c7c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00b      	beq.n	8002c7c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	e007      	b.n	8002c7c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002c6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002c70:	3301      	adds	r3, #1
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	b25a      	sxtb	r2, r3
 8002c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002c80:	e001      	b.n	8002c86 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	637b      	str	r3, [r7, #52]	; 0x34
 8002c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c88:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002c90:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3738      	adds	r7, #56	; 0x38
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b08c      	sub	sp, #48	; 0x30
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	60b9      	str	r1, [r7, #8]
 8002ca6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10a      	bne.n	8002ccc <xQueueReceive+0x30>
	__asm volatile
 8002cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cba:	f383 8811 	msr	BASEPRI, r3
 8002cbe:	f3bf 8f6f 	isb	sy
 8002cc2:	f3bf 8f4f 	dsb	sy
 8002cc6:	623b      	str	r3, [r7, #32]
}
 8002cc8:	bf00      	nop
 8002cca:	e7fe      	b.n	8002cca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d103      	bne.n	8002cda <xQueueReceive+0x3e>
 8002cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <xQueueReceive+0x42>
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e000      	b.n	8002ce0 <xQueueReceive+0x44>
 8002cde:	2300      	movs	r3, #0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10a      	bne.n	8002cfa <xQueueReceive+0x5e>
	__asm volatile
 8002ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce8:	f383 8811 	msr	BASEPRI, r3
 8002cec:	f3bf 8f6f 	isb	sy
 8002cf0:	f3bf 8f4f 	dsb	sy
 8002cf4:	61fb      	str	r3, [r7, #28]
}
 8002cf6:	bf00      	nop
 8002cf8:	e7fe      	b.n	8002cf8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002cfa:	f001 f861 	bl	8003dc0 <xTaskGetSchedulerState>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d102      	bne.n	8002d0a <xQueueReceive+0x6e>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <xQueueReceive+0x72>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <xQueueReceive+0x74>
 8002d0e:	2300      	movs	r3, #0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10a      	bne.n	8002d2a <xQueueReceive+0x8e>
	__asm volatile
 8002d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d18:	f383 8811 	msr	BASEPRI, r3
 8002d1c:	f3bf 8f6f 	isb	sy
 8002d20:	f3bf 8f4f 	dsb	sy
 8002d24:	61bb      	str	r3, [r7, #24]
}
 8002d26:	bf00      	nop
 8002d28:	e7fe      	b.n	8002d28 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d2a:	f001 fd2f 	bl	800478c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d01f      	beq.n	8002d7a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d3a:	68b9      	ldr	r1, [r7, #8]
 8002d3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d3e:	f000 f8f7 	bl	8002f30 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	1e5a      	subs	r2, r3, #1
 8002d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d48:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00f      	beq.n	8002d72 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d54:	3310      	adds	r3, #16
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 fe6c 	bl	8003a34 <xTaskRemoveFromEventList>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d007      	beq.n	8002d72 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002d62:	4b3d      	ldr	r3, [pc, #244]	; (8002e58 <xQueueReceive+0x1bc>)
 8002d64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	f3bf 8f4f 	dsb	sy
 8002d6e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002d72:	f001 fd3b 	bl	80047ec <vPortExitCritical>
				return pdPASS;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e069      	b.n	8002e4e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d103      	bne.n	8002d88 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d80:	f001 fd34 	bl	80047ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002d84:	2300      	movs	r3, #0
 8002d86:	e062      	b.n	8002e4e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d106      	bne.n	8002d9c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d8e:	f107 0310 	add.w	r3, r7, #16
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 feb2 	bl	8003afc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d9c:	f001 fd26 	bl	80047ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002da0:	f000 fc1c 	bl	80035dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002da4:	f001 fcf2 	bl	800478c <vPortEnterCritical>
 8002da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002daa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002dae:	b25b      	sxtb	r3, r3
 8002db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db4:	d103      	bne.n	8002dbe <xQueueReceive+0x122>
 8002db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dc4:	b25b      	sxtb	r3, r3
 8002dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dca:	d103      	bne.n	8002dd4 <xQueueReceive+0x138>
 8002dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002dd4:	f001 fd0a 	bl	80047ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002dd8:	1d3a      	adds	r2, r7, #4
 8002dda:	f107 0310 	add.w	r3, r7, #16
 8002dde:	4611      	mov	r1, r2
 8002de0:	4618      	mov	r0, r3
 8002de2:	f000 fea1 	bl	8003b28 <xTaskCheckForTimeOut>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d123      	bne.n	8002e34 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002dec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dee:	f000 f917 	bl	8003020 <prvIsQueueEmpty>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d017      	beq.n	8002e28 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfa:	3324      	adds	r3, #36	; 0x24
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	4611      	mov	r1, r2
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 fdc7 	bl	8003994 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002e06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e08:	f000 f8b8 	bl	8002f7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002e0c:	f000 fbf4 	bl	80035f8 <xTaskResumeAll>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d189      	bne.n	8002d2a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002e16:	4b10      	ldr	r3, [pc, #64]	; (8002e58 <xQueueReceive+0x1bc>)
 8002e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	f3bf 8f4f 	dsb	sy
 8002e22:	f3bf 8f6f 	isb	sy
 8002e26:	e780      	b.n	8002d2a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002e28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e2a:	f000 f8a7 	bl	8002f7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e2e:	f000 fbe3 	bl	80035f8 <xTaskResumeAll>
 8002e32:	e77a      	b.n	8002d2a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002e34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e36:	f000 f8a1 	bl	8002f7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e3a:	f000 fbdd 	bl	80035f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e40:	f000 f8ee 	bl	8003020 <prvIsQueueEmpty>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f43f af6f 	beq.w	8002d2a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002e4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3730      	adds	r7, #48	; 0x30
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	e000ed04 	.word	0xe000ed04

08002e5c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e70:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d10d      	bne.n	8002e96 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d14d      	bne.n	8002f1e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 ffb8 	bl	8003dfc <xTaskPriorityDisinherit>
 8002e8c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	605a      	str	r2, [r3, #4]
 8002e94:	e043      	b.n	8002f1e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d119      	bne.n	8002ed0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6898      	ldr	r0, [r3, #8]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	68b9      	ldr	r1, [r7, #8]
 8002ea8:	f001 ffcc 	bl	8004e44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb4:	441a      	add	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	689a      	ldr	r2, [r3, #8]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d32b      	bcc.n	8002f1e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	609a      	str	r2, [r3, #8]
 8002ece:	e026      	b.n	8002f1e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	68d8      	ldr	r0, [r3, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed8:	461a      	mov	r2, r3
 8002eda:	68b9      	ldr	r1, [r7, #8]
 8002edc:	f001 ffb2 	bl	8004e44 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee8:	425b      	negs	r3, r3
 8002eea:	441a      	add	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	68da      	ldr	r2, [r3, #12]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d207      	bcs.n	8002f0c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	425b      	negs	r3, r3
 8002f06:	441a      	add	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d105      	bne.n	8002f1e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d002      	beq.n	8002f1e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1c5a      	adds	r2, r3, #1
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002f26:	697b      	ldr	r3, [r7, #20]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d018      	beq.n	8002f74 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	441a      	add	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68da      	ldr	r2, [r3, #12]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d303      	bcc.n	8002f64 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68d9      	ldr	r1, [r3, #12]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	6838      	ldr	r0, [r7, #0]
 8002f70:	f001 ff68 	bl	8004e44 <memcpy>
	}
}
 8002f74:	bf00      	nop
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002f84:	f001 fc02 	bl	800478c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f8e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f90:	e011      	b.n	8002fb6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d012      	beq.n	8002fc0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	3324      	adds	r3, #36	; 0x24
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 fd48 	bl	8003a34 <xTaskRemoveFromEventList>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002faa:	f000 fe1f 	bl	8003bec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002fae:	7bfb      	ldrb	r3, [r7, #15]
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	dce9      	bgt.n	8002f92 <prvUnlockQueue+0x16>
 8002fbe:	e000      	b.n	8002fc2 <prvUnlockQueue+0x46>
					break;
 8002fc0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	22ff      	movs	r2, #255	; 0xff
 8002fc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002fca:	f001 fc0f 	bl	80047ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002fce:	f001 fbdd 	bl	800478c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fd8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002fda:	e011      	b.n	8003000 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d012      	beq.n	800300a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3310      	adds	r3, #16
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f000 fd23 	bl	8003a34 <xTaskRemoveFromEventList>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002ff4:	f000 fdfa 	bl	8003bec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002ff8:	7bbb      	ldrb	r3, [r7, #14]
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003000:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003004:	2b00      	cmp	r3, #0
 8003006:	dce9      	bgt.n	8002fdc <prvUnlockQueue+0x60>
 8003008:	e000      	b.n	800300c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800300a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	22ff      	movs	r2, #255	; 0xff
 8003010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003014:	f001 fbea 	bl	80047ec <vPortExitCritical>
}
 8003018:	bf00      	nop
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003028:	f001 fbb0 	bl	800478c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003030:	2b00      	cmp	r3, #0
 8003032:	d102      	bne.n	800303a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003034:	2301      	movs	r3, #1
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	e001      	b.n	800303e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800303a:	2300      	movs	r3, #0
 800303c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800303e:	f001 fbd5 	bl	80047ec <vPortExitCritical>

	return xReturn;
 8003042:	68fb      	ldr	r3, [r7, #12]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003054:	f001 fb9a 	bl	800478c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003060:	429a      	cmp	r2, r3
 8003062:	d102      	bne.n	800306a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003064:	2301      	movs	r3, #1
 8003066:	60fb      	str	r3, [r7, #12]
 8003068:	e001      	b.n	800306e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800306a:	2300      	movs	r3, #0
 800306c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800306e:	f001 fbbd 	bl	80047ec <vPortExitCritical>

	return xReturn;
 8003072:	68fb      	ldr	r3, [r7, #12]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003086:	2300      	movs	r3, #0
 8003088:	60fb      	str	r3, [r7, #12]
 800308a:	e014      	b.n	80030b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800308c:	4a0e      	ldr	r2, [pc, #56]	; (80030c8 <vQueueAddToRegistry+0x4c>)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d10b      	bne.n	80030b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003098:	490b      	ldr	r1, [pc, #44]	; (80030c8 <vQueueAddToRegistry+0x4c>)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80030a2:	4a09      	ldr	r2, [pc, #36]	; (80030c8 <vQueueAddToRegistry+0x4c>)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	4413      	add	r3, r2
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80030ae:	e006      	b.n	80030be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	3301      	adds	r3, #1
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2b07      	cmp	r3, #7
 80030ba:	d9e7      	bls.n	800308c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80030bc:	bf00      	nop
 80030be:	bf00      	nop
 80030c0:	3714      	adds	r7, #20
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr
 80030c8:	200009d4 	.word	0x200009d4

080030cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80030dc:	f001 fb56 	bl	800478c <vPortEnterCritical>
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030e6:	b25b      	sxtb	r3, r3
 80030e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ec:	d103      	bne.n	80030f6 <vQueueWaitForMessageRestricted+0x2a>
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030fc:	b25b      	sxtb	r3, r3
 80030fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003102:	d103      	bne.n	800310c <vQueueWaitForMessageRestricted+0x40>
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800310c:	f001 fb6e 	bl	80047ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003114:	2b00      	cmp	r3, #0
 8003116:	d106      	bne.n	8003126 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	3324      	adds	r3, #36	; 0x24
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	68b9      	ldr	r1, [r7, #8]
 8003120:	4618      	mov	r0, r3
 8003122:	f000 fc5b 	bl	80039dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003126:	6978      	ldr	r0, [r7, #20]
 8003128:	f7ff ff28 	bl	8002f7c <prvUnlockQueue>
	}
 800312c:	bf00      	nop
 800312e:	3718      	adds	r7, #24
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003134:	b580      	push	{r7, lr}
 8003136:	b08e      	sub	sp, #56	; 0x38
 8003138:	af04      	add	r7, sp, #16
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
 8003140:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10a      	bne.n	800315e <xTaskCreateStatic+0x2a>
	__asm volatile
 8003148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800314c:	f383 8811 	msr	BASEPRI, r3
 8003150:	f3bf 8f6f 	isb	sy
 8003154:	f3bf 8f4f 	dsb	sy
 8003158:	623b      	str	r3, [r7, #32]
}
 800315a:	bf00      	nop
 800315c:	e7fe      	b.n	800315c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800315e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10a      	bne.n	800317a <xTaskCreateStatic+0x46>
	__asm volatile
 8003164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003168:	f383 8811 	msr	BASEPRI, r3
 800316c:	f3bf 8f6f 	isb	sy
 8003170:	f3bf 8f4f 	dsb	sy
 8003174:	61fb      	str	r3, [r7, #28]
}
 8003176:	bf00      	nop
 8003178:	e7fe      	b.n	8003178 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800317a:	23b8      	movs	r3, #184	; 0xb8
 800317c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	2bb8      	cmp	r3, #184	; 0xb8
 8003182:	d00a      	beq.n	800319a <xTaskCreateStatic+0x66>
	__asm volatile
 8003184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003188:	f383 8811 	msr	BASEPRI, r3
 800318c:	f3bf 8f6f 	isb	sy
 8003190:	f3bf 8f4f 	dsb	sy
 8003194:	61bb      	str	r3, [r7, #24]
}
 8003196:	bf00      	nop
 8003198:	e7fe      	b.n	8003198 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800319a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800319c:	2b00      	cmp	r3, #0
 800319e:	d01e      	beq.n	80031de <xTaskCreateStatic+0xaa>
 80031a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d01b      	beq.n	80031de <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80031a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031ae:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	2202      	movs	r2, #2
 80031b4:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80031b8:	2300      	movs	r3, #0
 80031ba:	9303      	str	r3, [sp, #12]
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	9302      	str	r3, [sp, #8]
 80031c0:	f107 0314 	add.w	r3, r7, #20
 80031c4:	9301      	str	r3, [sp, #4]
 80031c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	68b9      	ldr	r1, [r7, #8]
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 f851 	bl	8003278 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80031d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031d8:	f000 f8ec 	bl	80033b4 <prvAddNewTaskToReadyList>
 80031dc:	e001      	b.n	80031e2 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80031de:	2300      	movs	r3, #0
 80031e0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80031e2:	697b      	ldr	r3, [r7, #20]
	}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3728      	adds	r7, #40	; 0x28
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b08c      	sub	sp, #48	; 0x30
 80031f0:	af04      	add	r7, sp, #16
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	603b      	str	r3, [r7, #0]
 80031f8:	4613      	mov	r3, r2
 80031fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031fc:	88fb      	ldrh	r3, [r7, #6]
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4618      	mov	r0, r3
 8003202:	f001 fbc3 	bl	800498c <pvPortMalloc>
 8003206:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00e      	beq.n	800322c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800320e:	20b8      	movs	r0, #184	; 0xb8
 8003210:	f001 fbbc 	bl	800498c <pvPortMalloc>
 8003214:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	631a      	str	r2, [r3, #48]	; 0x30
 8003222:	e005      	b.n	8003230 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003224:	6978      	ldr	r0, [r7, #20]
 8003226:	f001 fc75 	bl	8004b14 <vPortFree>
 800322a:	e001      	b.n	8003230 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800322c:	2300      	movs	r3, #0
 800322e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d017      	beq.n	8003266 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800323e:	88fa      	ldrh	r2, [r7, #6]
 8003240:	2300      	movs	r3, #0
 8003242:	9303      	str	r3, [sp, #12]
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	9302      	str	r3, [sp, #8]
 8003248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324a:	9301      	str	r3, [sp, #4]
 800324c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	68b9      	ldr	r1, [r7, #8]
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 f80f 	bl	8003278 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800325a:	69f8      	ldr	r0, [r7, #28]
 800325c:	f000 f8aa 	bl	80033b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003260:	2301      	movs	r3, #1
 8003262:	61bb      	str	r3, [r7, #24]
 8003264:	e002      	b.n	800326c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003266:	f04f 33ff 	mov.w	r3, #4294967295
 800326a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800326c:	69bb      	ldr	r3, [r7, #24]
	}
 800326e:	4618      	mov	r0, r3
 8003270:	3720      	adds	r7, #32
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
	...

08003278 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b088      	sub	sp, #32
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
 8003284:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003288:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	461a      	mov	r2, r3
 8003290:	21a5      	movs	r1, #165	; 0xa5
 8003292:	f001 fd53 	bl	8004d3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003298:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80032a0:	3b01      	subs	r3, #1
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	f023 0307 	bic.w	r3, r3, #7
 80032ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d00a      	beq.n	80032d0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80032ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032be:	f383 8811 	msr	BASEPRI, r3
 80032c2:	f3bf 8f6f 	isb	sy
 80032c6:	f3bf 8f4f 	dsb	sy
 80032ca:	617b      	str	r3, [r7, #20]
}
 80032cc:	bf00      	nop
 80032ce:	e7fe      	b.n	80032ce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032d0:	2300      	movs	r3, #0
 80032d2:	61fb      	str	r3, [r7, #28]
 80032d4:	e012      	b.n	80032fc <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	4413      	add	r3, r2
 80032dc:	7819      	ldrb	r1, [r3, #0]
 80032de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	4413      	add	r3, r2
 80032e4:	3334      	adds	r3, #52	; 0x34
 80032e6:	460a      	mov	r2, r1
 80032e8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80032ea:	68ba      	ldr	r2, [r7, #8]
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	4413      	add	r3, r2
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d006      	beq.n	8003304 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	3301      	adds	r3, #1
 80032fa:	61fb      	str	r3, [r7, #28]
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	2b1f      	cmp	r3, #31
 8003300:	d9e9      	bls.n	80032d6 <prvInitialiseNewTask+0x5e>
 8003302:	e000      	b.n	8003306 <prvInitialiseNewTask+0x8e>
		{
			break;
 8003304:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800330e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003310:	2b37      	cmp	r3, #55	; 0x37
 8003312:	d901      	bls.n	8003318 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003314:	2337      	movs	r3, #55	; 0x37
 8003316:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800331c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800331e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003320:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003322:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8003324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003326:	2200      	movs	r2, #0
 8003328:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800332a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332c:	3304      	adds	r3, #4
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff f94d 	bl	80025ce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003336:	3318      	adds	r3, #24
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff f948 	bl	80025ce <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800333e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003342:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003346:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800334a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800334e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003352:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003356:	2200      	movs	r2, #0
 8003358:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800335c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335e:	2200      	movs	r2, #0
 8003360:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003366:	3364      	adds	r3, #100	; 0x64
 8003368:	224c      	movs	r2, #76	; 0x4c
 800336a:	2100      	movs	r1, #0
 800336c:	4618      	mov	r0, r3
 800336e:	f001 fce5 	bl	8004d3c <memset>
 8003372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003374:	4a0c      	ldr	r2, [pc, #48]	; (80033a8 <prvInitialiseNewTask+0x130>)
 8003376:	669a      	str	r2, [r3, #104]	; 0x68
 8003378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337a:	4a0c      	ldr	r2, [pc, #48]	; (80033ac <prvInitialiseNewTask+0x134>)
 800337c:	66da      	str	r2, [r3, #108]	; 0x6c
 800337e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003380:	4a0b      	ldr	r2, [pc, #44]	; (80033b0 <prvInitialiseNewTask+0x138>)
 8003382:	671a      	str	r2, [r3, #112]	; 0x70
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	68f9      	ldr	r1, [r7, #12]
 8003388:	69b8      	ldr	r0, [r7, #24]
 800338a:	f001 f90b 	bl	80045a4 <pxPortInitialiseStack>
 800338e:	4602      	mov	r2, r0
 8003390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003392:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003396:	2b00      	cmp	r3, #0
 8003398:	d002      	beq.n	80033a0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800339a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800339c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800339e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80033a0:	bf00      	nop
 80033a2:	3720      	adds	r7, #32
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	20003060 	.word	0x20003060
 80033ac:	200030c8 	.word	0x200030c8
 80033b0:	20003130 	.word	0x20003130

080033b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80033bc:	f001 f9e6 	bl	800478c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80033c0:	4b2d      	ldr	r3, [pc, #180]	; (8003478 <prvAddNewTaskToReadyList+0xc4>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	3301      	adds	r3, #1
 80033c6:	4a2c      	ldr	r2, [pc, #176]	; (8003478 <prvAddNewTaskToReadyList+0xc4>)
 80033c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80033ca:	4b2c      	ldr	r3, [pc, #176]	; (800347c <prvAddNewTaskToReadyList+0xc8>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d109      	bne.n	80033e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80033d2:	4a2a      	ldr	r2, [pc, #168]	; (800347c <prvAddNewTaskToReadyList+0xc8>)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80033d8:	4b27      	ldr	r3, [pc, #156]	; (8003478 <prvAddNewTaskToReadyList+0xc4>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d110      	bne.n	8003402 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80033e0:	f000 fc28 	bl	8003c34 <prvInitialiseTaskLists>
 80033e4:	e00d      	b.n	8003402 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80033e6:	4b26      	ldr	r3, [pc, #152]	; (8003480 <prvAddNewTaskToReadyList+0xcc>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d109      	bne.n	8003402 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80033ee:	4b23      	ldr	r3, [pc, #140]	; (800347c <prvAddNewTaskToReadyList+0xc8>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d802      	bhi.n	8003402 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80033fc:	4a1f      	ldr	r2, [pc, #124]	; (800347c <prvAddNewTaskToReadyList+0xc8>)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003402:	4b20      	ldr	r3, [pc, #128]	; (8003484 <prvAddNewTaskToReadyList+0xd0>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	3301      	adds	r3, #1
 8003408:	4a1e      	ldr	r2, [pc, #120]	; (8003484 <prvAddNewTaskToReadyList+0xd0>)
 800340a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800340c:	4b1d      	ldr	r3, [pc, #116]	; (8003484 <prvAddNewTaskToReadyList+0xd0>)
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003418:	4b1b      	ldr	r3, [pc, #108]	; (8003488 <prvAddNewTaskToReadyList+0xd4>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	429a      	cmp	r2, r3
 800341e:	d903      	bls.n	8003428 <prvAddNewTaskToReadyList+0x74>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003424:	4a18      	ldr	r2, [pc, #96]	; (8003488 <prvAddNewTaskToReadyList+0xd4>)
 8003426:	6013      	str	r3, [r2, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800342c:	4613      	mov	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4a15      	ldr	r2, [pc, #84]	; (800348c <prvAddNewTaskToReadyList+0xd8>)
 8003436:	441a      	add	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3304      	adds	r3, #4
 800343c:	4619      	mov	r1, r3
 800343e:	4610      	mov	r0, r2
 8003440:	f7ff f8d1 	bl	80025e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003444:	f001 f9d2 	bl	80047ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003448:	4b0d      	ldr	r3, [pc, #52]	; (8003480 <prvAddNewTaskToReadyList+0xcc>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00e      	beq.n	800346e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003450:	4b0a      	ldr	r3, [pc, #40]	; (800347c <prvAddNewTaskToReadyList+0xc8>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345a:	429a      	cmp	r2, r3
 800345c:	d207      	bcs.n	800346e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800345e:	4b0c      	ldr	r3, [pc, #48]	; (8003490 <prvAddNewTaskToReadyList+0xdc>)
 8003460:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	f3bf 8f4f 	dsb	sy
 800346a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800346e:	bf00      	nop
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	20000ee8 	.word	0x20000ee8
 800347c:	20000a14 	.word	0x20000a14
 8003480:	20000ef4 	.word	0x20000ef4
 8003484:	20000f04 	.word	0x20000f04
 8003488:	20000ef0 	.word	0x20000ef0
 800348c:	20000a18 	.word	0x20000a18
 8003490:	e000ed04 	.word	0xe000ed04

08003494 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800349c:	2300      	movs	r3, #0
 800349e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d017      	beq.n	80034d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80034a6:	4b13      	ldr	r3, [pc, #76]	; (80034f4 <vTaskDelay+0x60>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00a      	beq.n	80034c4 <vTaskDelay+0x30>
	__asm volatile
 80034ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b2:	f383 8811 	msr	BASEPRI, r3
 80034b6:	f3bf 8f6f 	isb	sy
 80034ba:	f3bf 8f4f 	dsb	sy
 80034be:	60bb      	str	r3, [r7, #8]
}
 80034c0:	bf00      	nop
 80034c2:	e7fe      	b.n	80034c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80034c4:	f000 f88a 	bl	80035dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80034c8:	2100      	movs	r1, #0
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 fd04 	bl	8003ed8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80034d0:	f000 f892 	bl	80035f8 <xTaskResumeAll>
 80034d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d107      	bne.n	80034ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80034dc:	4b06      	ldr	r3, [pc, #24]	; (80034f8 <vTaskDelay+0x64>)
 80034de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	f3bf 8f4f 	dsb	sy
 80034e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80034ec:	bf00      	nop
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	20000f10 	.word	0x20000f10
 80034f8:	e000ed04 	.word	0xe000ed04

080034fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b08a      	sub	sp, #40	; 0x28
 8003500:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003502:	2300      	movs	r3, #0
 8003504:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003506:	2300      	movs	r3, #0
 8003508:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800350a:	463a      	mov	r2, r7
 800350c:	1d39      	adds	r1, r7, #4
 800350e:	f107 0308 	add.w	r3, r7, #8
 8003512:	4618      	mov	r0, r3
 8003514:	f7ff f80a 	bl	800252c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003518:	6839      	ldr	r1, [r7, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	9202      	str	r2, [sp, #8]
 8003520:	9301      	str	r3, [sp, #4]
 8003522:	2300      	movs	r3, #0
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	2300      	movs	r3, #0
 8003528:	460a      	mov	r2, r1
 800352a:	4924      	ldr	r1, [pc, #144]	; (80035bc <vTaskStartScheduler+0xc0>)
 800352c:	4824      	ldr	r0, [pc, #144]	; (80035c0 <vTaskStartScheduler+0xc4>)
 800352e:	f7ff fe01 	bl	8003134 <xTaskCreateStatic>
 8003532:	4603      	mov	r3, r0
 8003534:	4a23      	ldr	r2, [pc, #140]	; (80035c4 <vTaskStartScheduler+0xc8>)
 8003536:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003538:	4b22      	ldr	r3, [pc, #136]	; (80035c4 <vTaskStartScheduler+0xc8>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d002      	beq.n	8003546 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003540:	2301      	movs	r3, #1
 8003542:	617b      	str	r3, [r7, #20]
 8003544:	e001      	b.n	800354a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003546:	2300      	movs	r3, #0
 8003548:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d102      	bne.n	8003556 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003550:	f000 fd16 	bl	8003f80 <xTimerCreateTimerTask>
 8003554:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d11b      	bne.n	8003594 <vTaskStartScheduler+0x98>
	__asm volatile
 800355c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003560:	f383 8811 	msr	BASEPRI, r3
 8003564:	f3bf 8f6f 	isb	sy
 8003568:	f3bf 8f4f 	dsb	sy
 800356c:	613b      	str	r3, [r7, #16]
}
 800356e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003570:	4b15      	ldr	r3, [pc, #84]	; (80035c8 <vTaskStartScheduler+0xcc>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	3364      	adds	r3, #100	; 0x64
 8003576:	4a15      	ldr	r2, [pc, #84]	; (80035cc <vTaskStartScheduler+0xd0>)
 8003578:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800357a:	4b15      	ldr	r3, [pc, #84]	; (80035d0 <vTaskStartScheduler+0xd4>)
 800357c:	f04f 32ff 	mov.w	r2, #4294967295
 8003580:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003582:	4b14      	ldr	r3, [pc, #80]	; (80035d4 <vTaskStartScheduler+0xd8>)
 8003584:	2201      	movs	r2, #1
 8003586:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003588:	4b13      	ldr	r3, [pc, #76]	; (80035d8 <vTaskStartScheduler+0xdc>)
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800358e:	f001 f88b 	bl	80046a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003592:	e00e      	b.n	80035b2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359a:	d10a      	bne.n	80035b2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800359c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a0:	f383 8811 	msr	BASEPRI, r3
 80035a4:	f3bf 8f6f 	isb	sy
 80035a8:	f3bf 8f4f 	dsb	sy
 80035ac:	60fb      	str	r3, [r7, #12]
}
 80035ae:	bf00      	nop
 80035b0:	e7fe      	b.n	80035b0 <vTaskStartScheduler+0xb4>
}
 80035b2:	bf00      	nop
 80035b4:	3718      	adds	r7, #24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	08004fb8 	.word	0x08004fb8
 80035c0:	08003c05 	.word	0x08003c05
 80035c4:	20000f0c 	.word	0x20000f0c
 80035c8:	20000a14 	.word	0x20000a14
 80035cc:	2000005c 	.word	0x2000005c
 80035d0:	20000f08 	.word	0x20000f08
 80035d4:	20000ef4 	.word	0x20000ef4
 80035d8:	20000eec 	.word	0x20000eec

080035dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80035e0:	4b04      	ldr	r3, [pc, #16]	; (80035f4 <vTaskSuspendAll+0x18>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	3301      	adds	r3, #1
 80035e6:	4a03      	ldr	r2, [pc, #12]	; (80035f4 <vTaskSuspendAll+0x18>)
 80035e8:	6013      	str	r3, [r2, #0]
}
 80035ea:	bf00      	nop
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bc80      	pop	{r7}
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	20000f10 	.word	0x20000f10

080035f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80035fe:	2300      	movs	r3, #0
 8003600:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003602:	2300      	movs	r3, #0
 8003604:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003606:	4b42      	ldr	r3, [pc, #264]	; (8003710 <xTaskResumeAll+0x118>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10a      	bne.n	8003624 <xTaskResumeAll+0x2c>
	__asm volatile
 800360e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003612:	f383 8811 	msr	BASEPRI, r3
 8003616:	f3bf 8f6f 	isb	sy
 800361a:	f3bf 8f4f 	dsb	sy
 800361e:	603b      	str	r3, [r7, #0]
}
 8003620:	bf00      	nop
 8003622:	e7fe      	b.n	8003622 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003624:	f001 f8b2 	bl	800478c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003628:	4b39      	ldr	r3, [pc, #228]	; (8003710 <xTaskResumeAll+0x118>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	3b01      	subs	r3, #1
 800362e:	4a38      	ldr	r2, [pc, #224]	; (8003710 <xTaskResumeAll+0x118>)
 8003630:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003632:	4b37      	ldr	r3, [pc, #220]	; (8003710 <xTaskResumeAll+0x118>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d162      	bne.n	8003700 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800363a:	4b36      	ldr	r3, [pc, #216]	; (8003714 <xTaskResumeAll+0x11c>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d05e      	beq.n	8003700 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003642:	e02f      	b.n	80036a4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003644:	4b34      	ldr	r3, [pc, #208]	; (8003718 <xTaskResumeAll+0x120>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	3318      	adds	r3, #24
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff f823 	bl	800269c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	3304      	adds	r3, #4
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff f81e 	bl	800269c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003664:	4b2d      	ldr	r3, [pc, #180]	; (800371c <xTaskResumeAll+0x124>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	429a      	cmp	r2, r3
 800366a:	d903      	bls.n	8003674 <xTaskResumeAll+0x7c>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003670:	4a2a      	ldr	r2, [pc, #168]	; (800371c <xTaskResumeAll+0x124>)
 8003672:	6013      	str	r3, [r2, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003678:	4613      	mov	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4a27      	ldr	r2, [pc, #156]	; (8003720 <xTaskResumeAll+0x128>)
 8003682:	441a      	add	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	3304      	adds	r3, #4
 8003688:	4619      	mov	r1, r3
 800368a:	4610      	mov	r0, r2
 800368c:	f7fe ffab 	bl	80025e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003694:	4b23      	ldr	r3, [pc, #140]	; (8003724 <xTaskResumeAll+0x12c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369a:	429a      	cmp	r2, r3
 800369c:	d302      	bcc.n	80036a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800369e:	4b22      	ldr	r3, [pc, #136]	; (8003728 <xTaskResumeAll+0x130>)
 80036a0:	2201      	movs	r2, #1
 80036a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036a4:	4b1c      	ldr	r3, [pc, #112]	; (8003718 <xTaskResumeAll+0x120>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1cb      	bne.n	8003644 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80036b2:	f000 fb61 	bl	8003d78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80036b6:	4b1d      	ldr	r3, [pc, #116]	; (800372c <xTaskResumeAll+0x134>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d010      	beq.n	80036e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80036c2:	f000 f845 	bl	8003750 <xTaskIncrementTick>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d002      	beq.n	80036d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80036cc:	4b16      	ldr	r3, [pc, #88]	; (8003728 <xTaskResumeAll+0x130>)
 80036ce:	2201      	movs	r2, #1
 80036d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	3b01      	subs	r3, #1
 80036d6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1f1      	bne.n	80036c2 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80036de:	4b13      	ldr	r3, [pc, #76]	; (800372c <xTaskResumeAll+0x134>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80036e4:	4b10      	ldr	r3, [pc, #64]	; (8003728 <xTaskResumeAll+0x130>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d009      	beq.n	8003700 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80036ec:	2301      	movs	r3, #1
 80036ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80036f0:	4b0f      	ldr	r3, [pc, #60]	; (8003730 <xTaskResumeAll+0x138>)
 80036f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	f3bf 8f4f 	dsb	sy
 80036fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003700:	f001 f874 	bl	80047ec <vPortExitCritical>

	return xAlreadyYielded;
 8003704:	68bb      	ldr	r3, [r7, #8]
}
 8003706:	4618      	mov	r0, r3
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	20000f10 	.word	0x20000f10
 8003714:	20000ee8 	.word	0x20000ee8
 8003718:	20000ea8 	.word	0x20000ea8
 800371c:	20000ef0 	.word	0x20000ef0
 8003720:	20000a18 	.word	0x20000a18
 8003724:	20000a14 	.word	0x20000a14
 8003728:	20000efc 	.word	0x20000efc
 800372c:	20000ef8 	.word	0x20000ef8
 8003730:	e000ed04 	.word	0xe000ed04

08003734 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800373a:	4b04      	ldr	r3, [pc, #16]	; (800374c <xTaskGetTickCount+0x18>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003740:	687b      	ldr	r3, [r7, #4]
}
 8003742:	4618      	mov	r0, r3
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	bc80      	pop	{r7}
 800374a:	4770      	bx	lr
 800374c:	20000eec 	.word	0x20000eec

08003750 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003756:	2300      	movs	r3, #0
 8003758:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800375a:	4b51      	ldr	r3, [pc, #324]	; (80038a0 <xTaskIncrementTick+0x150>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	f040 808e 	bne.w	8003880 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003764:	4b4f      	ldr	r3, [pc, #316]	; (80038a4 <xTaskIncrementTick+0x154>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	3301      	adds	r3, #1
 800376a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800376c:	4a4d      	ldr	r2, [pc, #308]	; (80038a4 <xTaskIncrementTick+0x154>)
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d120      	bne.n	80037ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003778:	4b4b      	ldr	r3, [pc, #300]	; (80038a8 <xTaskIncrementTick+0x158>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00a      	beq.n	8003798 <xTaskIncrementTick+0x48>
	__asm volatile
 8003782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003786:	f383 8811 	msr	BASEPRI, r3
 800378a:	f3bf 8f6f 	isb	sy
 800378e:	f3bf 8f4f 	dsb	sy
 8003792:	603b      	str	r3, [r7, #0]
}
 8003794:	bf00      	nop
 8003796:	e7fe      	b.n	8003796 <xTaskIncrementTick+0x46>
 8003798:	4b43      	ldr	r3, [pc, #268]	; (80038a8 <xTaskIncrementTick+0x158>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	60fb      	str	r3, [r7, #12]
 800379e:	4b43      	ldr	r3, [pc, #268]	; (80038ac <xTaskIncrementTick+0x15c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a41      	ldr	r2, [pc, #260]	; (80038a8 <xTaskIncrementTick+0x158>)
 80037a4:	6013      	str	r3, [r2, #0]
 80037a6:	4a41      	ldr	r2, [pc, #260]	; (80038ac <xTaskIncrementTick+0x15c>)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6013      	str	r3, [r2, #0]
 80037ac:	4b40      	ldr	r3, [pc, #256]	; (80038b0 <xTaskIncrementTick+0x160>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	3301      	adds	r3, #1
 80037b2:	4a3f      	ldr	r2, [pc, #252]	; (80038b0 <xTaskIncrementTick+0x160>)
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	f000 fadf 	bl	8003d78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80037ba:	4b3e      	ldr	r3, [pc, #248]	; (80038b4 <xTaskIncrementTick+0x164>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d34e      	bcc.n	8003862 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037c4:	4b38      	ldr	r3, [pc, #224]	; (80038a8 <xTaskIncrementTick+0x158>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <xTaskIncrementTick+0x82>
 80037ce:	2301      	movs	r3, #1
 80037d0:	e000      	b.n	80037d4 <xTaskIncrementTick+0x84>
 80037d2:	2300      	movs	r3, #0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d004      	beq.n	80037e2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037d8:	4b36      	ldr	r3, [pc, #216]	; (80038b4 <xTaskIncrementTick+0x164>)
 80037da:	f04f 32ff 	mov.w	r2, #4294967295
 80037de:	601a      	str	r2, [r3, #0]
					break;
 80037e0:	e03f      	b.n	8003862 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80037e2:	4b31      	ldr	r3, [pc, #196]	; (80038a8 <xTaskIncrementTick+0x158>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d203      	bcs.n	8003802 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80037fa:	4a2e      	ldr	r2, [pc, #184]	; (80038b4 <xTaskIncrementTick+0x164>)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6013      	str	r3, [r2, #0]
						break;
 8003800:	e02f      	b.n	8003862 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	3304      	adds	r3, #4
 8003806:	4618      	mov	r0, r3
 8003808:	f7fe ff48 	bl	800269c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003810:	2b00      	cmp	r3, #0
 8003812:	d004      	beq.n	800381e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	3318      	adds	r3, #24
 8003818:	4618      	mov	r0, r3
 800381a:	f7fe ff3f 	bl	800269c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003822:	4b25      	ldr	r3, [pc, #148]	; (80038b8 <xTaskIncrementTick+0x168>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d903      	bls.n	8003832 <xTaskIncrementTick+0xe2>
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800382e:	4a22      	ldr	r2, [pc, #136]	; (80038b8 <xTaskIncrementTick+0x168>)
 8003830:	6013      	str	r3, [r2, #0]
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003836:	4613      	mov	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4413      	add	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	4a1f      	ldr	r2, [pc, #124]	; (80038bc <xTaskIncrementTick+0x16c>)
 8003840:	441a      	add	r2, r3
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	3304      	adds	r3, #4
 8003846:	4619      	mov	r1, r3
 8003848:	4610      	mov	r0, r2
 800384a:	f7fe fecc 	bl	80025e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003852:	4b1b      	ldr	r3, [pc, #108]	; (80038c0 <xTaskIncrementTick+0x170>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003858:	429a      	cmp	r2, r3
 800385a:	d3b3      	bcc.n	80037c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800385c:	2301      	movs	r3, #1
 800385e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003860:	e7b0      	b.n	80037c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003862:	4b17      	ldr	r3, [pc, #92]	; (80038c0 <xTaskIncrementTick+0x170>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003868:	4914      	ldr	r1, [pc, #80]	; (80038bc <xTaskIncrementTick+0x16c>)
 800386a:	4613      	mov	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4413      	add	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	440b      	add	r3, r1
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d907      	bls.n	800388a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800387a:	2301      	movs	r3, #1
 800387c:	617b      	str	r3, [r7, #20]
 800387e:	e004      	b.n	800388a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003880:	4b10      	ldr	r3, [pc, #64]	; (80038c4 <xTaskIncrementTick+0x174>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	3301      	adds	r3, #1
 8003886:	4a0f      	ldr	r2, [pc, #60]	; (80038c4 <xTaskIncrementTick+0x174>)
 8003888:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800388a:	4b0f      	ldr	r3, [pc, #60]	; (80038c8 <xTaskIncrementTick+0x178>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003892:	2301      	movs	r3, #1
 8003894:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003896:	697b      	ldr	r3, [r7, #20]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	20000f10 	.word	0x20000f10
 80038a4:	20000eec 	.word	0x20000eec
 80038a8:	20000ea0 	.word	0x20000ea0
 80038ac:	20000ea4 	.word	0x20000ea4
 80038b0:	20000f00 	.word	0x20000f00
 80038b4:	20000f08 	.word	0x20000f08
 80038b8:	20000ef0 	.word	0x20000ef0
 80038bc:	20000a18 	.word	0x20000a18
 80038c0:	20000a14 	.word	0x20000a14
 80038c4:	20000ef8 	.word	0x20000ef8
 80038c8:	20000efc 	.word	0x20000efc

080038cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80038d2:	4b2a      	ldr	r3, [pc, #168]	; (800397c <vTaskSwitchContext+0xb0>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80038da:	4b29      	ldr	r3, [pc, #164]	; (8003980 <vTaskSwitchContext+0xb4>)
 80038dc:	2201      	movs	r2, #1
 80038de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80038e0:	e046      	b.n	8003970 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80038e2:	4b27      	ldr	r3, [pc, #156]	; (8003980 <vTaskSwitchContext+0xb4>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80038e8:	4b26      	ldr	r3, [pc, #152]	; (8003984 <vTaskSwitchContext+0xb8>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	e010      	b.n	8003912 <vTaskSwitchContext+0x46>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10a      	bne.n	800390c <vTaskSwitchContext+0x40>
	__asm volatile
 80038f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fa:	f383 8811 	msr	BASEPRI, r3
 80038fe:	f3bf 8f6f 	isb	sy
 8003902:	f3bf 8f4f 	dsb	sy
 8003906:	607b      	str	r3, [r7, #4]
}
 8003908:	bf00      	nop
 800390a:	e7fe      	b.n	800390a <vTaskSwitchContext+0x3e>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	3b01      	subs	r3, #1
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	491d      	ldr	r1, [pc, #116]	; (8003988 <vTaskSwitchContext+0xbc>)
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	4613      	mov	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4413      	add	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	440b      	add	r3, r1
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0e4      	beq.n	80038f0 <vTaskSwitchContext+0x24>
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	4613      	mov	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4413      	add	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4a15      	ldr	r2, [pc, #84]	; (8003988 <vTaskSwitchContext+0xbc>)
 8003932:	4413      	add	r3, r2
 8003934:	60bb      	str	r3, [r7, #8]
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	605a      	str	r2, [r3, #4]
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	685a      	ldr	r2, [r3, #4]
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	3308      	adds	r3, #8
 8003948:	429a      	cmp	r2, r3
 800394a:	d104      	bne.n	8003956 <vTaskSwitchContext+0x8a>
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	605a      	str	r2, [r3, #4]
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	4a0b      	ldr	r2, [pc, #44]	; (800398c <vTaskSwitchContext+0xc0>)
 800395e:	6013      	str	r3, [r2, #0]
 8003960:	4a08      	ldr	r2, [pc, #32]	; (8003984 <vTaskSwitchContext+0xb8>)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003966:	4b09      	ldr	r3, [pc, #36]	; (800398c <vTaskSwitchContext+0xc0>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	3364      	adds	r3, #100	; 0x64
 800396c:	4a08      	ldr	r2, [pc, #32]	; (8003990 <vTaskSwitchContext+0xc4>)
 800396e:	6013      	str	r3, [r2, #0]
}
 8003970:	bf00      	nop
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	bc80      	pop	{r7}
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	20000f10 	.word	0x20000f10
 8003980:	20000efc 	.word	0x20000efc
 8003984:	20000ef0 	.word	0x20000ef0
 8003988:	20000a18 	.word	0x20000a18
 800398c:	20000a14 	.word	0x20000a14
 8003990:	2000005c 	.word	0x2000005c

08003994 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10a      	bne.n	80039ba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80039a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a8:	f383 8811 	msr	BASEPRI, r3
 80039ac:	f3bf 8f6f 	isb	sy
 80039b0:	f3bf 8f4f 	dsb	sy
 80039b4:	60fb      	str	r3, [r7, #12]
}
 80039b6:	bf00      	nop
 80039b8:	e7fe      	b.n	80039b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80039ba:	4b07      	ldr	r3, [pc, #28]	; (80039d8 <vTaskPlaceOnEventList+0x44>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	3318      	adds	r3, #24
 80039c0:	4619      	mov	r1, r3
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7fe fe32 	bl	800262c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80039c8:	2101      	movs	r1, #1
 80039ca:	6838      	ldr	r0, [r7, #0]
 80039cc:	f000 fa84 	bl	8003ed8 <prvAddCurrentTaskToDelayedList>
}
 80039d0:	bf00      	nop
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	20000a14 	.word	0x20000a14

080039dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10a      	bne.n	8003a04 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80039ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f2:	f383 8811 	msr	BASEPRI, r3
 80039f6:	f3bf 8f6f 	isb	sy
 80039fa:	f3bf 8f4f 	dsb	sy
 80039fe:	617b      	str	r3, [r7, #20]
}
 8003a00:	bf00      	nop
 8003a02:	e7fe      	b.n	8003a02 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a04:	4b0a      	ldr	r3, [pc, #40]	; (8003a30 <vTaskPlaceOnEventListRestricted+0x54>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	3318      	adds	r3, #24
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f7fe fdea 	bl	80025e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d002      	beq.n	8003a1e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003a18:	f04f 33ff 	mov.w	r3, #4294967295
 8003a1c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	68b8      	ldr	r0, [r7, #8]
 8003a22:	f000 fa59 	bl	8003ed8 <prvAddCurrentTaskToDelayedList>
	}
 8003a26:	bf00      	nop
 8003a28:	3718      	adds	r7, #24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	20000a14 	.word	0x20000a14

08003a34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10a      	bne.n	8003a60 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4e:	f383 8811 	msr	BASEPRI, r3
 8003a52:	f3bf 8f6f 	isb	sy
 8003a56:	f3bf 8f4f 	dsb	sy
 8003a5a:	60fb      	str	r3, [r7, #12]
}
 8003a5c:	bf00      	nop
 8003a5e:	e7fe      	b.n	8003a5e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	3318      	adds	r3, #24
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7fe fe19 	bl	800269c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a6a:	4b1e      	ldr	r3, [pc, #120]	; (8003ae4 <xTaskRemoveFromEventList+0xb0>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d11d      	bne.n	8003aae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	3304      	adds	r3, #4
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7fe fe10 	bl	800269c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a80:	4b19      	ldr	r3, [pc, #100]	; (8003ae8 <xTaskRemoveFromEventList+0xb4>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d903      	bls.n	8003a90 <xTaskRemoveFromEventList+0x5c>
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8c:	4a16      	ldr	r2, [pc, #88]	; (8003ae8 <xTaskRemoveFromEventList+0xb4>)
 8003a8e:	6013      	str	r3, [r2, #0]
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a94:	4613      	mov	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4a13      	ldr	r2, [pc, #76]	; (8003aec <xTaskRemoveFromEventList+0xb8>)
 8003a9e:	441a      	add	r2, r3
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	4610      	mov	r0, r2
 8003aa8:	f7fe fd9d 	bl	80025e6 <vListInsertEnd>
 8003aac:	e005      	b.n	8003aba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	3318      	adds	r3, #24
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	480e      	ldr	r0, [pc, #56]	; (8003af0 <xTaskRemoveFromEventList+0xbc>)
 8003ab6:	f7fe fd96 	bl	80025e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003abe:	4b0d      	ldr	r3, [pc, #52]	; (8003af4 <xTaskRemoveFromEventList+0xc0>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d905      	bls.n	8003ad4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003acc:	4b0a      	ldr	r3, [pc, #40]	; (8003af8 <xTaskRemoveFromEventList+0xc4>)
 8003ace:	2201      	movs	r2, #1
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	e001      	b.n	8003ad8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003ad8:	697b      	ldr	r3, [r7, #20]
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3718      	adds	r7, #24
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	20000f10 	.word	0x20000f10
 8003ae8:	20000ef0 	.word	0x20000ef0
 8003aec:	20000a18 	.word	0x20000a18
 8003af0:	20000ea8 	.word	0x20000ea8
 8003af4:	20000a14 	.word	0x20000a14
 8003af8:	20000efc 	.word	0x20000efc

08003afc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b04:	4b06      	ldr	r3, [pc, #24]	; (8003b20 <vTaskInternalSetTimeOutState+0x24>)
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003b0c:	4b05      	ldr	r3, [pc, #20]	; (8003b24 <vTaskInternalSetTimeOutState+0x28>)
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	605a      	str	r2, [r3, #4]
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bc80      	pop	{r7}
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	20000f00 	.word	0x20000f00
 8003b24:	20000eec 	.word	0x20000eec

08003b28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b088      	sub	sp, #32
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10a      	bne.n	8003b4e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b3c:	f383 8811 	msr	BASEPRI, r3
 8003b40:	f3bf 8f6f 	isb	sy
 8003b44:	f3bf 8f4f 	dsb	sy
 8003b48:	613b      	str	r3, [r7, #16]
}
 8003b4a:	bf00      	nop
 8003b4c:	e7fe      	b.n	8003b4c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10a      	bne.n	8003b6a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b58:	f383 8811 	msr	BASEPRI, r3
 8003b5c:	f3bf 8f6f 	isb	sy
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	60fb      	str	r3, [r7, #12]
}
 8003b66:	bf00      	nop
 8003b68:	e7fe      	b.n	8003b68 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003b6a:	f000 fe0f 	bl	800478c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003b6e:	4b1d      	ldr	r3, [pc, #116]	; (8003be4 <xTaskCheckForTimeOut+0xbc>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b86:	d102      	bne.n	8003b8e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	61fb      	str	r3, [r7, #28]
 8003b8c:	e023      	b.n	8003bd6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	4b15      	ldr	r3, [pc, #84]	; (8003be8 <xTaskCheckForTimeOut+0xc0>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d007      	beq.n	8003baa <xTaskCheckForTimeOut+0x82>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	69ba      	ldr	r2, [r7, #24]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d302      	bcc.n	8003baa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	61fb      	str	r3, [r7, #28]
 8003ba8:	e015      	b.n	8003bd6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d20b      	bcs.n	8003bcc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	1ad2      	subs	r2, r2, r3
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f7ff ff9b 	bl	8003afc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	61fb      	str	r3, [r7, #28]
 8003bca:	e004      	b.n	8003bd6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003bd6:	f000 fe09 	bl	80047ec <vPortExitCritical>

	return xReturn;
 8003bda:	69fb      	ldr	r3, [r7, #28]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3720      	adds	r7, #32
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	20000eec 	.word	0x20000eec
 8003be8:	20000f00 	.word	0x20000f00

08003bec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003bf0:	4b03      	ldr	r3, [pc, #12]	; (8003c00 <vTaskMissedYield+0x14>)
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	601a      	str	r2, [r3, #0]
}
 8003bf6:	bf00      	nop
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bc80      	pop	{r7}
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	20000efc 	.word	0x20000efc

08003c04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003c0c:	f000 f852 	bl	8003cb4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c10:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <prvIdleTask+0x28>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d9f9      	bls.n	8003c0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003c18:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <prvIdleTask+0x2c>)
 8003c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c1e:	601a      	str	r2, [r3, #0]
 8003c20:	f3bf 8f4f 	dsb	sy
 8003c24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003c28:	e7f0      	b.n	8003c0c <prvIdleTask+0x8>
 8003c2a:	bf00      	nop
 8003c2c:	20000a18 	.word	0x20000a18
 8003c30:	e000ed04 	.word	0xe000ed04

08003c34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	607b      	str	r3, [r7, #4]
 8003c3e:	e00c      	b.n	8003c5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	4613      	mov	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4a12      	ldr	r2, [pc, #72]	; (8003c94 <prvInitialiseTaskLists+0x60>)
 8003c4c:	4413      	add	r3, r2
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fe fc9e 	bl	8002590 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3301      	adds	r3, #1
 8003c58:	607b      	str	r3, [r7, #4]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b37      	cmp	r3, #55	; 0x37
 8003c5e:	d9ef      	bls.n	8003c40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003c60:	480d      	ldr	r0, [pc, #52]	; (8003c98 <prvInitialiseTaskLists+0x64>)
 8003c62:	f7fe fc95 	bl	8002590 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003c66:	480d      	ldr	r0, [pc, #52]	; (8003c9c <prvInitialiseTaskLists+0x68>)
 8003c68:	f7fe fc92 	bl	8002590 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003c6c:	480c      	ldr	r0, [pc, #48]	; (8003ca0 <prvInitialiseTaskLists+0x6c>)
 8003c6e:	f7fe fc8f 	bl	8002590 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003c72:	480c      	ldr	r0, [pc, #48]	; (8003ca4 <prvInitialiseTaskLists+0x70>)
 8003c74:	f7fe fc8c 	bl	8002590 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003c78:	480b      	ldr	r0, [pc, #44]	; (8003ca8 <prvInitialiseTaskLists+0x74>)
 8003c7a:	f7fe fc89 	bl	8002590 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003c7e:	4b0b      	ldr	r3, [pc, #44]	; (8003cac <prvInitialiseTaskLists+0x78>)
 8003c80:	4a05      	ldr	r2, [pc, #20]	; (8003c98 <prvInitialiseTaskLists+0x64>)
 8003c82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c84:	4b0a      	ldr	r3, [pc, #40]	; (8003cb0 <prvInitialiseTaskLists+0x7c>)
 8003c86:	4a05      	ldr	r2, [pc, #20]	; (8003c9c <prvInitialiseTaskLists+0x68>)
 8003c88:	601a      	str	r2, [r3, #0]
}
 8003c8a:	bf00      	nop
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	20000a18 	.word	0x20000a18
 8003c98:	20000e78 	.word	0x20000e78
 8003c9c:	20000e8c 	.word	0x20000e8c
 8003ca0:	20000ea8 	.word	0x20000ea8
 8003ca4:	20000ebc 	.word	0x20000ebc
 8003ca8:	20000ed4 	.word	0x20000ed4
 8003cac:	20000ea0 	.word	0x20000ea0
 8003cb0:	20000ea4 	.word	0x20000ea4

08003cb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003cba:	e019      	b.n	8003cf0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003cbc:	f000 fd66 	bl	800478c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003cc0:	4b10      	ldr	r3, [pc, #64]	; (8003d04 <prvCheckTasksWaitingTermination+0x50>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	3304      	adds	r3, #4
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7fe fce5 	bl	800269c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003cd2:	4b0d      	ldr	r3, [pc, #52]	; (8003d08 <prvCheckTasksWaitingTermination+0x54>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	4a0b      	ldr	r2, [pc, #44]	; (8003d08 <prvCheckTasksWaitingTermination+0x54>)
 8003cda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003cdc:	4b0b      	ldr	r3, [pc, #44]	; (8003d0c <prvCheckTasksWaitingTermination+0x58>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	4a0a      	ldr	r2, [pc, #40]	; (8003d0c <prvCheckTasksWaitingTermination+0x58>)
 8003ce4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003ce6:	f000 fd81 	bl	80047ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f810 	bl	8003d10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003cf0:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <prvCheckTasksWaitingTermination+0x58>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1e1      	bne.n	8003cbc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003cf8:	bf00      	nop
 8003cfa:	bf00      	nop
 8003cfc:	3708      	adds	r7, #8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	20000ebc 	.word	0x20000ebc
 8003d08:	20000ee8 	.word	0x20000ee8
 8003d0c:	20000ed0 	.word	0x20000ed0

08003d10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	3364      	adds	r3, #100	; 0x64
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f001 f815 	bl	8004d4c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d108      	bne.n	8003d3e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d30:	4618      	mov	r0, r3
 8003d32:	f000 feef 	bl	8004b14 <vPortFree>
				vPortFree( pxTCB );
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 feec 	bl	8004b14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003d3c:	e018      	b.n	8003d70 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d103      	bne.n	8003d50 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 fee3 	bl	8004b14 <vPortFree>
	}
 8003d4e:	e00f      	b.n	8003d70 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d00a      	beq.n	8003d70 <prvDeleteTCB+0x60>
	__asm volatile
 8003d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5e:	f383 8811 	msr	BASEPRI, r3
 8003d62:	f3bf 8f6f 	isb	sy
 8003d66:	f3bf 8f4f 	dsb	sy
 8003d6a:	60fb      	str	r3, [r7, #12]
}
 8003d6c:	bf00      	nop
 8003d6e:	e7fe      	b.n	8003d6e <prvDeleteTCB+0x5e>
	}
 8003d70:	bf00      	nop
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d7e:	4b0e      	ldr	r3, [pc, #56]	; (8003db8 <prvResetNextTaskUnblockTime+0x40>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d101      	bne.n	8003d8c <prvResetNextTaskUnblockTime+0x14>
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e000      	b.n	8003d8e <prvResetNextTaskUnblockTime+0x16>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d004      	beq.n	8003d9c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003d92:	4b0a      	ldr	r3, [pc, #40]	; (8003dbc <prvResetNextTaskUnblockTime+0x44>)
 8003d94:	f04f 32ff 	mov.w	r2, #4294967295
 8003d98:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003d9a:	e008      	b.n	8003dae <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d9c:	4b06      	ldr	r3, [pc, #24]	; (8003db8 <prvResetNextTaskUnblockTime+0x40>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	4a04      	ldr	r2, [pc, #16]	; (8003dbc <prvResetNextTaskUnblockTime+0x44>)
 8003dac:	6013      	str	r3, [r2, #0]
}
 8003dae:	bf00      	nop
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bc80      	pop	{r7}
 8003db6:	4770      	bx	lr
 8003db8:	20000ea0 	.word	0x20000ea0
 8003dbc:	20000f08 	.word	0x20000f08

08003dc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003dc6:	4b0b      	ldr	r3, [pc, #44]	; (8003df4 <xTaskGetSchedulerState+0x34>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d102      	bne.n	8003dd4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	607b      	str	r3, [r7, #4]
 8003dd2:	e008      	b.n	8003de6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dd4:	4b08      	ldr	r3, [pc, #32]	; (8003df8 <xTaskGetSchedulerState+0x38>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d102      	bne.n	8003de2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003ddc:	2302      	movs	r3, #2
 8003dde:	607b      	str	r3, [r7, #4]
 8003de0:	e001      	b.n	8003de6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003de2:	2300      	movs	r3, #0
 8003de4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003de6:	687b      	ldr	r3, [r7, #4]
	}
 8003de8:	4618      	mov	r0, r3
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bc80      	pop	{r7}
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	20000ef4 	.word	0x20000ef4
 8003df8:	20000f10 	.word	0x20000f10

08003dfc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d056      	beq.n	8003ec0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003e12:	4b2e      	ldr	r3, [pc, #184]	; (8003ecc <xTaskPriorityDisinherit+0xd0>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d00a      	beq.n	8003e32 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e20:	f383 8811 	msr	BASEPRI, r3
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	f3bf 8f4f 	dsb	sy
 8003e2c:	60fb      	str	r3, [r7, #12]
}
 8003e2e:	bf00      	nop
 8003e30:	e7fe      	b.n	8003e30 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10a      	bne.n	8003e50 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3e:	f383 8811 	msr	BASEPRI, r3
 8003e42:	f3bf 8f6f 	isb	sy
 8003e46:	f3bf 8f4f 	dsb	sy
 8003e4a:	60bb      	str	r3, [r7, #8]
}
 8003e4c:	bf00      	nop
 8003e4e:	e7fe      	b.n	8003e4e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e54:	1e5a      	subs	r2, r3, #1
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d02c      	beq.n	8003ec0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d128      	bne.n	8003ec0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	3304      	adds	r3, #4
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7fe fc12 	bl	800269c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e84:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e90:	4b0f      	ldr	r3, [pc, #60]	; (8003ed0 <xTaskPriorityDisinherit+0xd4>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d903      	bls.n	8003ea0 <xTaskPriorityDisinherit+0xa4>
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9c:	4a0c      	ldr	r2, [pc, #48]	; (8003ed0 <xTaskPriorityDisinherit+0xd4>)
 8003e9e:	6013      	str	r3, [r2, #0]
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4413      	add	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4a09      	ldr	r2, [pc, #36]	; (8003ed4 <xTaskPriorityDisinherit+0xd8>)
 8003eae:	441a      	add	r2, r3
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	3304      	adds	r3, #4
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4610      	mov	r0, r2
 8003eb8:	f7fe fb95 	bl	80025e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003ec0:	697b      	ldr	r3, [r7, #20]
	}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3718      	adds	r7, #24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	20000a14 	.word	0x20000a14
 8003ed0:	20000ef0 	.word	0x20000ef0
 8003ed4:	20000a18 	.word	0x20000a18

08003ed8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003ee2:	4b21      	ldr	r3, [pc, #132]	; (8003f68 <prvAddCurrentTaskToDelayedList+0x90>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ee8:	4b20      	ldr	r3, [pc, #128]	; (8003f6c <prvAddCurrentTaskToDelayedList+0x94>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	3304      	adds	r3, #4
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fe fbd4 	bl	800269c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003efa:	d10a      	bne.n	8003f12 <prvAddCurrentTaskToDelayedList+0x3a>
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d007      	beq.n	8003f12 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f02:	4b1a      	ldr	r3, [pc, #104]	; (8003f6c <prvAddCurrentTaskToDelayedList+0x94>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	3304      	adds	r3, #4
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4819      	ldr	r0, [pc, #100]	; (8003f70 <prvAddCurrentTaskToDelayedList+0x98>)
 8003f0c:	f7fe fb6b 	bl	80025e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003f10:	e026      	b.n	8003f60 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4413      	add	r3, r2
 8003f18:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f1a:	4b14      	ldr	r3, [pc, #80]	; (8003f6c <prvAddCurrentTaskToDelayedList+0x94>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003f22:	68ba      	ldr	r2, [r7, #8]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d209      	bcs.n	8003f3e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f2a:	4b12      	ldr	r3, [pc, #72]	; (8003f74 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	4b0f      	ldr	r3, [pc, #60]	; (8003f6c <prvAddCurrentTaskToDelayedList+0x94>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	3304      	adds	r3, #4
 8003f34:	4619      	mov	r1, r3
 8003f36:	4610      	mov	r0, r2
 8003f38:	f7fe fb78 	bl	800262c <vListInsert>
}
 8003f3c:	e010      	b.n	8003f60 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f3e:	4b0e      	ldr	r3, [pc, #56]	; (8003f78 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	4b0a      	ldr	r3, [pc, #40]	; (8003f6c <prvAddCurrentTaskToDelayedList+0x94>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	3304      	adds	r3, #4
 8003f48:	4619      	mov	r1, r3
 8003f4a:	4610      	mov	r0, r2
 8003f4c:	f7fe fb6e 	bl	800262c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003f50:	4b0a      	ldr	r3, [pc, #40]	; (8003f7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d202      	bcs.n	8003f60 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003f5a:	4a08      	ldr	r2, [pc, #32]	; (8003f7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	6013      	str	r3, [r2, #0]
}
 8003f60:	bf00      	nop
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	20000eec 	.word	0x20000eec
 8003f6c:	20000a14 	.word	0x20000a14
 8003f70:	20000ed4 	.word	0x20000ed4
 8003f74:	20000ea4 	.word	0x20000ea4
 8003f78:	20000ea0 	.word	0x20000ea0
 8003f7c:	20000f08 	.word	0x20000f08

08003f80 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08a      	sub	sp, #40	; 0x28
 8003f84:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003f86:	2300      	movs	r3, #0
 8003f88:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003f8a:	f000 facb 	bl	8004524 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003f8e:	4b1c      	ldr	r3, [pc, #112]	; (8004000 <xTimerCreateTimerTask+0x80>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d021      	beq.n	8003fda <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003f96:	2300      	movs	r3, #0
 8003f98:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003f9e:	1d3a      	adds	r2, r7, #4
 8003fa0:	f107 0108 	add.w	r1, r7, #8
 8003fa4:	f107 030c 	add.w	r3, r7, #12
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7fe fad7 	bl	800255c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003fae:	6879      	ldr	r1, [r7, #4]
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	9202      	str	r2, [sp, #8]
 8003fb6:	9301      	str	r3, [sp, #4]
 8003fb8:	2302      	movs	r3, #2
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	460a      	mov	r2, r1
 8003fc0:	4910      	ldr	r1, [pc, #64]	; (8004004 <xTimerCreateTimerTask+0x84>)
 8003fc2:	4811      	ldr	r0, [pc, #68]	; (8004008 <xTimerCreateTimerTask+0x88>)
 8003fc4:	f7ff f8b6 	bl	8003134 <xTaskCreateStatic>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	4a10      	ldr	r2, [pc, #64]	; (800400c <xTimerCreateTimerTask+0x8c>)
 8003fcc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003fce:	4b0f      	ldr	r3, [pc, #60]	; (800400c <xTimerCreateTimerTask+0x8c>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10a      	bne.n	8003ff6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe4:	f383 8811 	msr	BASEPRI, r3
 8003fe8:	f3bf 8f6f 	isb	sy
 8003fec:	f3bf 8f4f 	dsb	sy
 8003ff0:	613b      	str	r3, [r7, #16]
}
 8003ff2:	bf00      	nop
 8003ff4:	e7fe      	b.n	8003ff4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003ff6:	697b      	ldr	r3, [r7, #20]
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3718      	adds	r7, #24
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	20000f44 	.word	0x20000f44
 8004004:	08004fc0 	.word	0x08004fc0
 8004008:	0800412d 	.word	0x0800412d
 800400c:	20000f48 	.word	0x20000f48

08004010 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b08a      	sub	sp, #40	; 0x28
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
 800401c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800401e:	2300      	movs	r3, #0
 8004020:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10a      	bne.n	800403e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402c:	f383 8811 	msr	BASEPRI, r3
 8004030:	f3bf 8f6f 	isb	sy
 8004034:	f3bf 8f4f 	dsb	sy
 8004038:	623b      	str	r3, [r7, #32]
}
 800403a:	bf00      	nop
 800403c:	e7fe      	b.n	800403c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800403e:	4b1a      	ldr	r3, [pc, #104]	; (80040a8 <xTimerGenericCommand+0x98>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d02a      	beq.n	800409c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	2b05      	cmp	r3, #5
 8004056:	dc18      	bgt.n	800408a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004058:	f7ff feb2 	bl	8003dc0 <xTaskGetSchedulerState>
 800405c:	4603      	mov	r3, r0
 800405e:	2b02      	cmp	r3, #2
 8004060:	d109      	bne.n	8004076 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004062:	4b11      	ldr	r3, [pc, #68]	; (80040a8 <xTimerGenericCommand+0x98>)
 8004064:	6818      	ldr	r0, [r3, #0]
 8004066:	f107 0110 	add.w	r1, r7, #16
 800406a:	2300      	movs	r3, #0
 800406c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800406e:	f7fe fc7f 	bl	8002970 <xQueueGenericSend>
 8004072:	6278      	str	r0, [r7, #36]	; 0x24
 8004074:	e012      	b.n	800409c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004076:	4b0c      	ldr	r3, [pc, #48]	; (80040a8 <xTimerGenericCommand+0x98>)
 8004078:	6818      	ldr	r0, [r3, #0]
 800407a:	f107 0110 	add.w	r1, r7, #16
 800407e:	2300      	movs	r3, #0
 8004080:	2200      	movs	r2, #0
 8004082:	f7fe fc75 	bl	8002970 <xQueueGenericSend>
 8004086:	6278      	str	r0, [r7, #36]	; 0x24
 8004088:	e008      	b.n	800409c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800408a:	4b07      	ldr	r3, [pc, #28]	; (80040a8 <xTimerGenericCommand+0x98>)
 800408c:	6818      	ldr	r0, [r3, #0]
 800408e:	f107 0110 	add.w	r1, r7, #16
 8004092:	2300      	movs	r3, #0
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	f7fe fd69 	bl	8002b6c <xQueueGenericSendFromISR>
 800409a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3728      	adds	r7, #40	; 0x28
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	20000f44 	.word	0x20000f44

080040ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b088      	sub	sp, #32
 80040b0:	af02      	add	r7, sp, #8
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040b6:	4b1c      	ldr	r3, [pc, #112]	; (8004128 <prvProcessExpiredTimer+0x7c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	3304      	adds	r3, #4
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7fe fae9 	bl	800269c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d122      	bne.n	8004118 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	699a      	ldr	r2, [r3, #24]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	18d1      	adds	r1, r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	6978      	ldr	r0, [r7, #20]
 80040e0:	f000 f8c8 	bl	8004274 <prvInsertTimerInActiveList>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d016      	beq.n	8004118 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80040ea:	2300      	movs	r3, #0
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	2300      	movs	r3, #0
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	2100      	movs	r1, #0
 80040f4:	6978      	ldr	r0, [r7, #20]
 80040f6:	f7ff ff8b 	bl	8004010 <xTimerGenericCommand>
 80040fa:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d10a      	bne.n	8004118 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004106:	f383 8811 	msr	BASEPRI, r3
 800410a:	f3bf 8f6f 	isb	sy
 800410e:	f3bf 8f4f 	dsb	sy
 8004112:	60fb      	str	r3, [r7, #12]
}
 8004114:	bf00      	nop
 8004116:	e7fe      	b.n	8004116 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411c:	6978      	ldr	r0, [r7, #20]
 800411e:	4798      	blx	r3
}
 8004120:	bf00      	nop
 8004122:	3718      	adds	r7, #24
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	20000f3c 	.word	0x20000f3c

0800412c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004134:	f107 0308 	add.w	r3, r7, #8
 8004138:	4618      	mov	r0, r3
 800413a:	f000 f857 	bl	80041ec <prvGetNextExpireTime>
 800413e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	4619      	mov	r1, r3
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 f803 	bl	8004150 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800414a:	f000 f8d5 	bl	80042f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800414e:	e7f1      	b.n	8004134 <prvTimerTask+0x8>

08004150 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800415a:	f7ff fa3f 	bl	80035dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800415e:	f107 0308 	add.w	r3, r7, #8
 8004162:	4618      	mov	r0, r3
 8004164:	f000 f866 	bl	8004234 <prvSampleTimeNow>
 8004168:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d130      	bne.n	80041d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10a      	bne.n	800418c <prvProcessTimerOrBlockTask+0x3c>
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	429a      	cmp	r2, r3
 800417c:	d806      	bhi.n	800418c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800417e:	f7ff fa3b 	bl	80035f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004182:	68f9      	ldr	r1, [r7, #12]
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7ff ff91 	bl	80040ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800418a:	e024      	b.n	80041d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d008      	beq.n	80041a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004192:	4b13      	ldr	r3, [pc, #76]	; (80041e0 <prvProcessTimerOrBlockTask+0x90>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	bf0c      	ite	eq
 800419c:	2301      	moveq	r3, #1
 800419e:	2300      	movne	r3, #0
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80041a4:	4b0f      	ldr	r3, [pc, #60]	; (80041e4 <prvProcessTimerOrBlockTask+0x94>)
 80041a6:	6818      	ldr	r0, [r3, #0]
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	4619      	mov	r1, r3
 80041b2:	f7fe ff8b 	bl	80030cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80041b6:	f7ff fa1f 	bl	80035f8 <xTaskResumeAll>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10a      	bne.n	80041d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80041c0:	4b09      	ldr	r3, [pc, #36]	; (80041e8 <prvProcessTimerOrBlockTask+0x98>)
 80041c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041c6:	601a      	str	r2, [r3, #0]
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	f3bf 8f6f 	isb	sy
}
 80041d0:	e001      	b.n	80041d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80041d2:	f7ff fa11 	bl	80035f8 <xTaskResumeAll>
}
 80041d6:	bf00      	nop
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	20000f40 	.word	0x20000f40
 80041e4:	20000f44 	.word	0x20000f44
 80041e8:	e000ed04 	.word	0xe000ed04

080041ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80041f4:	4b0e      	ldr	r3, [pc, #56]	; (8004230 <prvGetNextExpireTime+0x44>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	bf0c      	ite	eq
 80041fe:	2301      	moveq	r3, #1
 8004200:	2300      	movne	r3, #0
 8004202:	b2db      	uxtb	r3, r3
 8004204:	461a      	mov	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d105      	bne.n	800421e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004212:	4b07      	ldr	r3, [pc, #28]	; (8004230 <prvGetNextExpireTime+0x44>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	e001      	b.n	8004222 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800421e:	2300      	movs	r3, #0
 8004220:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004222:	68fb      	ldr	r3, [r7, #12]
}
 8004224:	4618      	mov	r0, r3
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	bc80      	pop	{r7}
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	20000f3c 	.word	0x20000f3c

08004234 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800423c:	f7ff fa7a 	bl	8003734 <xTaskGetTickCount>
 8004240:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004242:	4b0b      	ldr	r3, [pc, #44]	; (8004270 <prvSampleTimeNow+0x3c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	429a      	cmp	r2, r3
 800424a:	d205      	bcs.n	8004258 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800424c:	f000 f908 	bl	8004460 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	601a      	str	r2, [r3, #0]
 8004256:	e002      	b.n	800425e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800425e:	4a04      	ldr	r2, [pc, #16]	; (8004270 <prvSampleTimeNow+0x3c>)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004264:	68fb      	ldr	r3, [r7, #12]
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	20000f4c 	.word	0x20000f4c

08004274 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
 8004280:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004282:	2300      	movs	r3, #0
 8004284:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	68ba      	ldr	r2, [r7, #8]
 800428a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004292:	68ba      	ldr	r2, [r7, #8]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	429a      	cmp	r2, r3
 8004298:	d812      	bhi.n	80042c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	1ad2      	subs	r2, r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d302      	bcc.n	80042ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80042a8:	2301      	movs	r3, #1
 80042aa:	617b      	str	r3, [r7, #20]
 80042ac:	e01b      	b.n	80042e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80042ae:	4b10      	ldr	r3, [pc, #64]	; (80042f0 <prvInsertTimerInActiveList+0x7c>)
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	3304      	adds	r3, #4
 80042b6:	4619      	mov	r1, r3
 80042b8:	4610      	mov	r0, r2
 80042ba:	f7fe f9b7 	bl	800262c <vListInsert>
 80042be:	e012      	b.n	80042e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d206      	bcs.n	80042d6 <prvInsertTimerInActiveList+0x62>
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d302      	bcc.n	80042d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80042d0:	2301      	movs	r3, #1
 80042d2:	617b      	str	r3, [r7, #20]
 80042d4:	e007      	b.n	80042e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80042d6:	4b07      	ldr	r3, [pc, #28]	; (80042f4 <prvInsertTimerInActiveList+0x80>)
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	3304      	adds	r3, #4
 80042de:	4619      	mov	r1, r3
 80042e0:	4610      	mov	r0, r2
 80042e2:	f7fe f9a3 	bl	800262c <vListInsert>
		}
	}

	return xProcessTimerNow;
 80042e6:	697b      	ldr	r3, [r7, #20]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3718      	adds	r7, #24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	20000f40 	.word	0x20000f40
 80042f4:	20000f3c 	.word	0x20000f3c

080042f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b08e      	sub	sp, #56	; 0x38
 80042fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80042fe:	e09d      	b.n	800443c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	da18      	bge.n	8004338 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004306:	1d3b      	adds	r3, r7, #4
 8004308:	3304      	adds	r3, #4
 800430a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800430c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10a      	bne.n	8004328 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004316:	f383 8811 	msr	BASEPRI, r3
 800431a:	f3bf 8f6f 	isb	sy
 800431e:	f3bf 8f4f 	dsb	sy
 8004322:	61fb      	str	r3, [r7, #28]
}
 8004324:	bf00      	nop
 8004326:	e7fe      	b.n	8004326 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800432e:	6850      	ldr	r0, [r2, #4]
 8004330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004332:	6892      	ldr	r2, [r2, #8]
 8004334:	4611      	mov	r1, r2
 8004336:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	db7e      	blt.n	800443c <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d004      	beq.n	8004354 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800434a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434c:	3304      	adds	r3, #4
 800434e:	4618      	mov	r0, r3
 8004350:	f7fe f9a4 	bl	800269c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004354:	463b      	mov	r3, r7
 8004356:	4618      	mov	r0, r3
 8004358:	f7ff ff6c 	bl	8004234 <prvSampleTimeNow>
 800435c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2b09      	cmp	r3, #9
 8004362:	d86a      	bhi.n	800443a <prvProcessReceivedCommands+0x142>
 8004364:	a201      	add	r2, pc, #4	; (adr r2, 800436c <prvProcessReceivedCommands+0x74>)
 8004366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436a:	bf00      	nop
 800436c:	08004395 	.word	0x08004395
 8004370:	08004395 	.word	0x08004395
 8004374:	08004395 	.word	0x08004395
 8004378:	0800443d 	.word	0x0800443d
 800437c:	080043f1 	.word	0x080043f1
 8004380:	08004429 	.word	0x08004429
 8004384:	08004395 	.word	0x08004395
 8004388:	08004395 	.word	0x08004395
 800438c:	0800443d 	.word	0x0800443d
 8004390:	080043f1 	.word	0x080043f1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	18d1      	adds	r1, r2, r3
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043a2:	f7ff ff67 	bl	8004274 <prvInsertTimerInActiveList>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d047      	beq.n	800443c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043b2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80043b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b6:	69db      	ldr	r3, [r3, #28]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d13f      	bne.n	800443c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	441a      	add	r2, r3
 80043c4:	2300      	movs	r3, #0
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	2300      	movs	r3, #0
 80043ca:	2100      	movs	r1, #0
 80043cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043ce:	f7ff fe1f 	bl	8004010 <xTimerGenericCommand>
 80043d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80043d4:	6a3b      	ldr	r3, [r7, #32]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d130      	bne.n	800443c <prvProcessReceivedCommands+0x144>
	__asm volatile
 80043da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043de:	f383 8811 	msr	BASEPRI, r3
 80043e2:	f3bf 8f6f 	isb	sy
 80043e6:	f3bf 8f4f 	dsb	sy
 80043ea:	61bb      	str	r3, [r7, #24]
}
 80043ec:	bf00      	nop
 80043ee:	e7fe      	b.n	80043ee <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80043f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10a      	bne.n	8004414 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80043fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004402:	f383 8811 	msr	BASEPRI, r3
 8004406:	f3bf 8f6f 	isb	sy
 800440a:	f3bf 8f4f 	dsb	sy
 800440e:	617b      	str	r3, [r7, #20]
}
 8004410:	bf00      	nop
 8004412:	e7fe      	b.n	8004412 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004416:	699a      	ldr	r2, [r3, #24]
 8004418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441a:	18d1      	adds	r1, r2, r3
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004420:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004422:	f7ff ff27 	bl	8004274 <prvInsertTimerInActiveList>
					break;
 8004426:	e009      	b.n	800443c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800442e:	2b00      	cmp	r3, #0
 8004430:	d104      	bne.n	800443c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8004432:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004434:	f000 fb6e 	bl	8004b14 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004438:	e000      	b.n	800443c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800443a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800443c:	4b07      	ldr	r3, [pc, #28]	; (800445c <prvProcessReceivedCommands+0x164>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	1d39      	adds	r1, r7, #4
 8004442:	2200      	movs	r2, #0
 8004444:	4618      	mov	r0, r3
 8004446:	f7fe fc29 	bl	8002c9c <xQueueReceive>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	f47f af57 	bne.w	8004300 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004452:	bf00      	nop
 8004454:	bf00      	nop
 8004456:	3730      	adds	r7, #48	; 0x30
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	20000f44 	.word	0x20000f44

08004460 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b088      	sub	sp, #32
 8004464:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004466:	e045      	b.n	80044f4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004468:	4b2c      	ldr	r3, [pc, #176]	; (800451c <prvSwitchTimerLists+0xbc>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004472:	4b2a      	ldr	r3, [pc, #168]	; (800451c <prvSwitchTimerLists+0xbc>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	3304      	adds	r3, #4
 8004480:	4618      	mov	r0, r3
 8004482:	f7fe f90b 	bl	800269c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d12e      	bne.n	80044f4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	4413      	add	r3, r2
 800449e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80044a0:	68ba      	ldr	r2, [r7, #8]
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d90e      	bls.n	80044c6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80044b4:	4b19      	ldr	r3, [pc, #100]	; (800451c <prvSwitchTimerLists+0xbc>)
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	3304      	adds	r3, #4
 80044bc:	4619      	mov	r1, r3
 80044be:	4610      	mov	r0, r2
 80044c0:	f7fe f8b4 	bl	800262c <vListInsert>
 80044c4:	e016      	b.n	80044f4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80044c6:	2300      	movs	r3, #0
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	2300      	movs	r3, #0
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	2100      	movs	r1, #0
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f7ff fd9d 	bl	8004010 <xTimerGenericCommand>
 80044d6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10a      	bne.n	80044f4 <prvSwitchTimerLists+0x94>
	__asm volatile
 80044de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e2:	f383 8811 	msr	BASEPRI, r3
 80044e6:	f3bf 8f6f 	isb	sy
 80044ea:	f3bf 8f4f 	dsb	sy
 80044ee:	603b      	str	r3, [r7, #0]
}
 80044f0:	bf00      	nop
 80044f2:	e7fe      	b.n	80044f2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80044f4:	4b09      	ldr	r3, [pc, #36]	; (800451c <prvSwitchTimerLists+0xbc>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1b4      	bne.n	8004468 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80044fe:	4b07      	ldr	r3, [pc, #28]	; (800451c <prvSwitchTimerLists+0xbc>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004504:	4b06      	ldr	r3, [pc, #24]	; (8004520 <prvSwitchTimerLists+0xc0>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a04      	ldr	r2, [pc, #16]	; (800451c <prvSwitchTimerLists+0xbc>)
 800450a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800450c:	4a04      	ldr	r2, [pc, #16]	; (8004520 <prvSwitchTimerLists+0xc0>)
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	6013      	str	r3, [r2, #0]
}
 8004512:	bf00      	nop
 8004514:	3718      	adds	r7, #24
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	20000f3c 	.word	0x20000f3c
 8004520:	20000f40 	.word	0x20000f40

08004524 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800452a:	f000 f92f 	bl	800478c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800452e:	4b15      	ldr	r3, [pc, #84]	; (8004584 <prvCheckForValidListAndQueue+0x60>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d120      	bne.n	8004578 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004536:	4814      	ldr	r0, [pc, #80]	; (8004588 <prvCheckForValidListAndQueue+0x64>)
 8004538:	f7fe f82a 	bl	8002590 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800453c:	4813      	ldr	r0, [pc, #76]	; (800458c <prvCheckForValidListAndQueue+0x68>)
 800453e:	f7fe f827 	bl	8002590 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004542:	4b13      	ldr	r3, [pc, #76]	; (8004590 <prvCheckForValidListAndQueue+0x6c>)
 8004544:	4a10      	ldr	r2, [pc, #64]	; (8004588 <prvCheckForValidListAndQueue+0x64>)
 8004546:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004548:	4b12      	ldr	r3, [pc, #72]	; (8004594 <prvCheckForValidListAndQueue+0x70>)
 800454a:	4a10      	ldr	r2, [pc, #64]	; (800458c <prvCheckForValidListAndQueue+0x68>)
 800454c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800454e:	2300      	movs	r3, #0
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	4b11      	ldr	r3, [pc, #68]	; (8004598 <prvCheckForValidListAndQueue+0x74>)
 8004554:	4a11      	ldr	r2, [pc, #68]	; (800459c <prvCheckForValidListAndQueue+0x78>)
 8004556:	2110      	movs	r1, #16
 8004558:	200a      	movs	r0, #10
 800455a:	f7fe f931 	bl	80027c0 <xQueueGenericCreateStatic>
 800455e:	4603      	mov	r3, r0
 8004560:	4a08      	ldr	r2, [pc, #32]	; (8004584 <prvCheckForValidListAndQueue+0x60>)
 8004562:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004564:	4b07      	ldr	r3, [pc, #28]	; (8004584 <prvCheckForValidListAndQueue+0x60>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d005      	beq.n	8004578 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800456c:	4b05      	ldr	r3, [pc, #20]	; (8004584 <prvCheckForValidListAndQueue+0x60>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	490b      	ldr	r1, [pc, #44]	; (80045a0 <prvCheckForValidListAndQueue+0x7c>)
 8004572:	4618      	mov	r0, r3
 8004574:	f7fe fd82 	bl	800307c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004578:	f000 f938 	bl	80047ec <vPortExitCritical>
}
 800457c:	bf00      	nop
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	20000f44 	.word	0x20000f44
 8004588:	20000f14 	.word	0x20000f14
 800458c:	20000f28 	.word	0x20000f28
 8004590:	20000f3c 	.word	0x20000f3c
 8004594:	20000f40 	.word	0x20000f40
 8004598:	20000ff0 	.word	0x20000ff0
 800459c:	20000f50 	.word	0x20000f50
 80045a0:	08004fc8 	.word	0x08004fc8

080045a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	3b04      	subs	r3, #4
 80045b4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	3b04      	subs	r3, #4
 80045c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	f023 0201 	bic.w	r2, r3, #1
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	3b04      	subs	r3, #4
 80045d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80045d4:	4a08      	ldr	r2, [pc, #32]	; (80045f8 <pxPortInitialiseStack+0x54>)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	3b14      	subs	r3, #20
 80045de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	3b20      	subs	r3, #32
 80045ea:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80045ec:	68fb      	ldr	r3, [r7, #12]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bc80      	pop	{r7}
 80045f6:	4770      	bx	lr
 80045f8:	080045fd 	.word	0x080045fd

080045fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004602:	2300      	movs	r3, #0
 8004604:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004606:	4b12      	ldr	r3, [pc, #72]	; (8004650 <prvTaskExitError+0x54>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800460e:	d00a      	beq.n	8004626 <prvTaskExitError+0x2a>
	__asm volatile
 8004610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004614:	f383 8811 	msr	BASEPRI, r3
 8004618:	f3bf 8f6f 	isb	sy
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	60fb      	str	r3, [r7, #12]
}
 8004622:	bf00      	nop
 8004624:	e7fe      	b.n	8004624 <prvTaskExitError+0x28>
	__asm volatile
 8004626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462a:	f383 8811 	msr	BASEPRI, r3
 800462e:	f3bf 8f6f 	isb	sy
 8004632:	f3bf 8f4f 	dsb	sy
 8004636:	60bb      	str	r3, [r7, #8]
}
 8004638:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800463a:	bf00      	nop
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d0fc      	beq.n	800463c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004642:	bf00      	nop
 8004644:	bf00      	nop
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	bc80      	pop	{r7}
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	2000000c 	.word	0x2000000c
	...

08004660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004660:	4b07      	ldr	r3, [pc, #28]	; (8004680 <pxCurrentTCBConst2>)
 8004662:	6819      	ldr	r1, [r3, #0]
 8004664:	6808      	ldr	r0, [r1, #0]
 8004666:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800466a:	f380 8809 	msr	PSP, r0
 800466e:	f3bf 8f6f 	isb	sy
 8004672:	f04f 0000 	mov.w	r0, #0
 8004676:	f380 8811 	msr	BASEPRI, r0
 800467a:	f04e 0e0d 	orr.w	lr, lr, #13
 800467e:	4770      	bx	lr

08004680 <pxCurrentTCBConst2>:
 8004680:	20000a14 	.word	0x20000a14
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004684:	bf00      	nop
 8004686:	bf00      	nop

08004688 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004688:	4806      	ldr	r0, [pc, #24]	; (80046a4 <prvPortStartFirstTask+0x1c>)
 800468a:	6800      	ldr	r0, [r0, #0]
 800468c:	6800      	ldr	r0, [r0, #0]
 800468e:	f380 8808 	msr	MSP, r0
 8004692:	b662      	cpsie	i
 8004694:	b661      	cpsie	f
 8004696:	f3bf 8f4f 	dsb	sy
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	df00      	svc	0
 80046a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80046a2:	bf00      	nop
 80046a4:	e000ed08 	.word	0xe000ed08

080046a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80046ae:	4b32      	ldr	r3, [pc, #200]	; (8004778 <xPortStartScheduler+0xd0>)
 80046b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	22ff      	movs	r2, #255	; 0xff
 80046be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80046c8:	78fb      	ldrb	r3, [r7, #3]
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80046d0:	b2da      	uxtb	r2, r3
 80046d2:	4b2a      	ldr	r3, [pc, #168]	; (800477c <xPortStartScheduler+0xd4>)
 80046d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80046d6:	4b2a      	ldr	r3, [pc, #168]	; (8004780 <xPortStartScheduler+0xd8>)
 80046d8:	2207      	movs	r2, #7
 80046da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046dc:	e009      	b.n	80046f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80046de:	4b28      	ldr	r3, [pc, #160]	; (8004780 <xPortStartScheduler+0xd8>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	3b01      	subs	r3, #1
 80046e4:	4a26      	ldr	r2, [pc, #152]	; (8004780 <xPortStartScheduler+0xd8>)
 80046e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80046e8:	78fb      	ldrb	r3, [r7, #3]
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046f2:	78fb      	ldrb	r3, [r7, #3]
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046fa:	2b80      	cmp	r3, #128	; 0x80
 80046fc:	d0ef      	beq.n	80046de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80046fe:	4b20      	ldr	r3, [pc, #128]	; (8004780 <xPortStartScheduler+0xd8>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f1c3 0307 	rsb	r3, r3, #7
 8004706:	2b04      	cmp	r3, #4
 8004708:	d00a      	beq.n	8004720 <xPortStartScheduler+0x78>
	__asm volatile
 800470a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470e:	f383 8811 	msr	BASEPRI, r3
 8004712:	f3bf 8f6f 	isb	sy
 8004716:	f3bf 8f4f 	dsb	sy
 800471a:	60bb      	str	r3, [r7, #8]
}
 800471c:	bf00      	nop
 800471e:	e7fe      	b.n	800471e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004720:	4b17      	ldr	r3, [pc, #92]	; (8004780 <xPortStartScheduler+0xd8>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	021b      	lsls	r3, r3, #8
 8004726:	4a16      	ldr	r2, [pc, #88]	; (8004780 <xPortStartScheduler+0xd8>)
 8004728:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800472a:	4b15      	ldr	r3, [pc, #84]	; (8004780 <xPortStartScheduler+0xd8>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004732:	4a13      	ldr	r2, [pc, #76]	; (8004780 <xPortStartScheduler+0xd8>)
 8004734:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	b2da      	uxtb	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800473e:	4b11      	ldr	r3, [pc, #68]	; (8004784 <xPortStartScheduler+0xdc>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a10      	ldr	r2, [pc, #64]	; (8004784 <xPortStartScheduler+0xdc>)
 8004744:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004748:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800474a:	4b0e      	ldr	r3, [pc, #56]	; (8004784 <xPortStartScheduler+0xdc>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a0d      	ldr	r2, [pc, #52]	; (8004784 <xPortStartScheduler+0xdc>)
 8004750:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004754:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004756:	f000 f8b9 	bl	80048cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800475a:	4b0b      	ldr	r3, [pc, #44]	; (8004788 <xPortStartScheduler+0xe0>)
 800475c:	2200      	movs	r2, #0
 800475e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004760:	f7ff ff92 	bl	8004688 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004764:	f7ff f8b2 	bl	80038cc <vTaskSwitchContext>
	prvTaskExitError();
 8004768:	f7ff ff48 	bl	80045fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	e000e400 	.word	0xe000e400
 800477c:	20001040 	.word	0x20001040
 8004780:	20001044 	.word	0x20001044
 8004784:	e000ed20 	.word	0xe000ed20
 8004788:	2000000c 	.word	0x2000000c

0800478c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
	__asm volatile
 8004792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004796:	f383 8811 	msr	BASEPRI, r3
 800479a:	f3bf 8f6f 	isb	sy
 800479e:	f3bf 8f4f 	dsb	sy
 80047a2:	607b      	str	r3, [r7, #4]
}
 80047a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80047a6:	4b0f      	ldr	r3, [pc, #60]	; (80047e4 <vPortEnterCritical+0x58>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	3301      	adds	r3, #1
 80047ac:	4a0d      	ldr	r2, [pc, #52]	; (80047e4 <vPortEnterCritical+0x58>)
 80047ae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80047b0:	4b0c      	ldr	r3, [pc, #48]	; (80047e4 <vPortEnterCritical+0x58>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d10f      	bne.n	80047d8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80047b8:	4b0b      	ldr	r3, [pc, #44]	; (80047e8 <vPortEnterCritical+0x5c>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00a      	beq.n	80047d8 <vPortEnterCritical+0x4c>
	__asm volatile
 80047c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c6:	f383 8811 	msr	BASEPRI, r3
 80047ca:	f3bf 8f6f 	isb	sy
 80047ce:	f3bf 8f4f 	dsb	sy
 80047d2:	603b      	str	r3, [r7, #0]
}
 80047d4:	bf00      	nop
 80047d6:	e7fe      	b.n	80047d6 <vPortEnterCritical+0x4a>
	}
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	bc80      	pop	{r7}
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	2000000c 	.word	0x2000000c
 80047e8:	e000ed04 	.word	0xe000ed04

080047ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80047f2:	4b11      	ldr	r3, [pc, #68]	; (8004838 <vPortExitCritical+0x4c>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10a      	bne.n	8004810 <vPortExitCritical+0x24>
	__asm volatile
 80047fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fe:	f383 8811 	msr	BASEPRI, r3
 8004802:	f3bf 8f6f 	isb	sy
 8004806:	f3bf 8f4f 	dsb	sy
 800480a:	607b      	str	r3, [r7, #4]
}
 800480c:	bf00      	nop
 800480e:	e7fe      	b.n	800480e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004810:	4b09      	ldr	r3, [pc, #36]	; (8004838 <vPortExitCritical+0x4c>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	3b01      	subs	r3, #1
 8004816:	4a08      	ldr	r2, [pc, #32]	; (8004838 <vPortExitCritical+0x4c>)
 8004818:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800481a:	4b07      	ldr	r3, [pc, #28]	; (8004838 <vPortExitCritical+0x4c>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d105      	bne.n	800482e <vPortExitCritical+0x42>
 8004822:	2300      	movs	r3, #0
 8004824:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	f383 8811 	msr	BASEPRI, r3
}
 800482c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800482e:	bf00      	nop
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	bc80      	pop	{r7}
 8004836:	4770      	bx	lr
 8004838:	2000000c 	.word	0x2000000c
 800483c:	00000000 	.word	0x00000000

08004840 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004840:	f3ef 8009 	mrs	r0, PSP
 8004844:	f3bf 8f6f 	isb	sy
 8004848:	4b0d      	ldr	r3, [pc, #52]	; (8004880 <pxCurrentTCBConst>)
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004850:	6010      	str	r0, [r2, #0]
 8004852:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004856:	f04f 0050 	mov.w	r0, #80	; 0x50
 800485a:	f380 8811 	msr	BASEPRI, r0
 800485e:	f7ff f835 	bl	80038cc <vTaskSwitchContext>
 8004862:	f04f 0000 	mov.w	r0, #0
 8004866:	f380 8811 	msr	BASEPRI, r0
 800486a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800486e:	6819      	ldr	r1, [r3, #0]
 8004870:	6808      	ldr	r0, [r1, #0]
 8004872:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004876:	f380 8809 	msr	PSP, r0
 800487a:	f3bf 8f6f 	isb	sy
 800487e:	4770      	bx	lr

08004880 <pxCurrentTCBConst>:
 8004880:	20000a14 	.word	0x20000a14
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004884:	bf00      	nop
 8004886:	bf00      	nop

08004888 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
	__asm volatile
 800488e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004892:	f383 8811 	msr	BASEPRI, r3
 8004896:	f3bf 8f6f 	isb	sy
 800489a:	f3bf 8f4f 	dsb	sy
 800489e:	607b      	str	r3, [r7, #4]
}
 80048a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80048a2:	f7fe ff55 	bl	8003750 <xTaskIncrementTick>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80048ac:	4b06      	ldr	r3, [pc, #24]	; (80048c8 <xPortSysTickHandler+0x40>)
 80048ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048b2:	601a      	str	r2, [r3, #0]
 80048b4:	2300      	movs	r3, #0
 80048b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	f383 8811 	msr	BASEPRI, r3
}
 80048be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80048c0:	bf00      	nop
 80048c2:	3708      	adds	r7, #8
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	e000ed04 	.word	0xe000ed04

080048cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80048d0:	4b0a      	ldr	r3, [pc, #40]	; (80048fc <vPortSetupTimerInterrupt+0x30>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80048d6:	4b0a      	ldr	r3, [pc, #40]	; (8004900 <vPortSetupTimerInterrupt+0x34>)
 80048d8:	2200      	movs	r2, #0
 80048da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80048dc:	4b09      	ldr	r3, [pc, #36]	; (8004904 <vPortSetupTimerInterrupt+0x38>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a09      	ldr	r2, [pc, #36]	; (8004908 <vPortSetupTimerInterrupt+0x3c>)
 80048e2:	fba2 2303 	umull	r2, r3, r2, r3
 80048e6:	099b      	lsrs	r3, r3, #6
 80048e8:	4a08      	ldr	r2, [pc, #32]	; (800490c <vPortSetupTimerInterrupt+0x40>)
 80048ea:	3b01      	subs	r3, #1
 80048ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80048ee:	4b03      	ldr	r3, [pc, #12]	; (80048fc <vPortSetupTimerInterrupt+0x30>)
 80048f0:	2207      	movs	r2, #7
 80048f2:	601a      	str	r2, [r3, #0]
}
 80048f4:	bf00      	nop
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bc80      	pop	{r7}
 80048fa:	4770      	bx	lr
 80048fc:	e000e010 	.word	0xe000e010
 8004900:	e000e018 	.word	0xe000e018
 8004904:	20000000 	.word	0x20000000
 8004908:	10624dd3 	.word	0x10624dd3
 800490c:	e000e014 	.word	0xe000e014

08004910 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004916:	f3ef 8305 	mrs	r3, IPSR
 800491a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2b0f      	cmp	r3, #15
 8004920:	d914      	bls.n	800494c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004922:	4a16      	ldr	r2, [pc, #88]	; (800497c <vPortValidateInterruptPriority+0x6c>)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4413      	add	r3, r2
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800492c:	4b14      	ldr	r3, [pc, #80]	; (8004980 <vPortValidateInterruptPriority+0x70>)
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	7afa      	ldrb	r2, [r7, #11]
 8004932:	429a      	cmp	r2, r3
 8004934:	d20a      	bcs.n	800494c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493a:	f383 8811 	msr	BASEPRI, r3
 800493e:	f3bf 8f6f 	isb	sy
 8004942:	f3bf 8f4f 	dsb	sy
 8004946:	607b      	str	r3, [r7, #4]
}
 8004948:	bf00      	nop
 800494a:	e7fe      	b.n	800494a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800494c:	4b0d      	ldr	r3, [pc, #52]	; (8004984 <vPortValidateInterruptPriority+0x74>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004954:	4b0c      	ldr	r3, [pc, #48]	; (8004988 <vPortValidateInterruptPriority+0x78>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	429a      	cmp	r2, r3
 800495a:	d90a      	bls.n	8004972 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800495c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004960:	f383 8811 	msr	BASEPRI, r3
 8004964:	f3bf 8f6f 	isb	sy
 8004968:	f3bf 8f4f 	dsb	sy
 800496c:	603b      	str	r3, [r7, #0]
}
 800496e:	bf00      	nop
 8004970:	e7fe      	b.n	8004970 <vPortValidateInterruptPriority+0x60>
	}
 8004972:	bf00      	nop
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	bc80      	pop	{r7}
 800497a:	4770      	bx	lr
 800497c:	e000e3f0 	.word	0xe000e3f0
 8004980:	20001040 	.word	0x20001040
 8004984:	e000ed0c 	.word	0xe000ed0c
 8004988:	20001044 	.word	0x20001044

0800498c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b08a      	sub	sp, #40	; 0x28
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004994:	2300      	movs	r3, #0
 8004996:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004998:	f7fe fe20 	bl	80035dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800499c:	4b58      	ldr	r3, [pc, #352]	; (8004b00 <pvPortMalloc+0x174>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d101      	bne.n	80049a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80049a4:	f000 f910 	bl	8004bc8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80049a8:	4b56      	ldr	r3, [pc, #344]	; (8004b04 <pvPortMalloc+0x178>)
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4013      	ands	r3, r2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f040 808e 	bne.w	8004ad2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d01d      	beq.n	80049f8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80049bc:	2208      	movs	r2, #8
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4413      	add	r3, r2
 80049c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f003 0307 	and.w	r3, r3, #7
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d014      	beq.n	80049f8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f023 0307 	bic.w	r3, r3, #7
 80049d4:	3308      	adds	r3, #8
 80049d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f003 0307 	and.w	r3, r3, #7
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00a      	beq.n	80049f8 <pvPortMalloc+0x6c>
	__asm volatile
 80049e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e6:	f383 8811 	msr	BASEPRI, r3
 80049ea:	f3bf 8f6f 	isb	sy
 80049ee:	f3bf 8f4f 	dsb	sy
 80049f2:	617b      	str	r3, [r7, #20]
}
 80049f4:	bf00      	nop
 80049f6:	e7fe      	b.n	80049f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d069      	beq.n	8004ad2 <pvPortMalloc+0x146>
 80049fe:	4b42      	ldr	r3, [pc, #264]	; (8004b08 <pvPortMalloc+0x17c>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d864      	bhi.n	8004ad2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004a08:	4b40      	ldr	r3, [pc, #256]	; (8004b0c <pvPortMalloc+0x180>)
 8004a0a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004a0c:	4b3f      	ldr	r3, [pc, #252]	; (8004b0c <pvPortMalloc+0x180>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a12:	e004      	b.n	8004a1e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a16:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d903      	bls.n	8004a30 <pvPortMalloc+0xa4>
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1f1      	bne.n	8004a14 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004a30:	4b33      	ldr	r3, [pc, #204]	; (8004b00 <pvPortMalloc+0x174>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d04b      	beq.n	8004ad2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2208      	movs	r2, #8
 8004a40:	4413      	add	r3, r2
 8004a42:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	6a3b      	ldr	r3, [r7, #32]
 8004a4a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	1ad2      	subs	r2, r2, r3
 8004a54:	2308      	movs	r3, #8
 8004a56:	005b      	lsls	r3, r3, #1
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d91f      	bls.n	8004a9c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4413      	add	r3, r2
 8004a62:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	f003 0307 	and.w	r3, r3, #7
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00a      	beq.n	8004a84 <pvPortMalloc+0xf8>
	__asm volatile
 8004a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a72:	f383 8811 	msr	BASEPRI, r3
 8004a76:	f3bf 8f6f 	isb	sy
 8004a7a:	f3bf 8f4f 	dsb	sy
 8004a7e:	613b      	str	r3, [r7, #16]
}
 8004a80:	bf00      	nop
 8004a82:	e7fe      	b.n	8004a82 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	1ad2      	subs	r2, r2, r3
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a96:	69b8      	ldr	r0, [r7, #24]
 8004a98:	f000 f8f8 	bl	8004c8c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a9c:	4b1a      	ldr	r3, [pc, #104]	; (8004b08 <pvPortMalloc+0x17c>)
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	4a18      	ldr	r2, [pc, #96]	; (8004b08 <pvPortMalloc+0x17c>)
 8004aa8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004aaa:	4b17      	ldr	r3, [pc, #92]	; (8004b08 <pvPortMalloc+0x17c>)
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	4b18      	ldr	r3, [pc, #96]	; (8004b10 <pvPortMalloc+0x184>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d203      	bcs.n	8004abe <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004ab6:	4b14      	ldr	r3, [pc, #80]	; (8004b08 <pvPortMalloc+0x17c>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a15      	ldr	r2, [pc, #84]	; (8004b10 <pvPortMalloc+0x184>)
 8004abc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	4b10      	ldr	r3, [pc, #64]	; (8004b04 <pvPortMalloc+0x178>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ace:	2200      	movs	r2, #0
 8004ad0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004ad2:	f7fe fd91 	bl	80035f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00a      	beq.n	8004af6 <pvPortMalloc+0x16a>
	__asm volatile
 8004ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae4:	f383 8811 	msr	BASEPRI, r3
 8004ae8:	f3bf 8f6f 	isb	sy
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	60fb      	str	r3, [r7, #12]
}
 8004af2:	bf00      	nop
 8004af4:	e7fe      	b.n	8004af4 <pvPortMalloc+0x168>
	return pvReturn;
 8004af6:	69fb      	ldr	r3, [r7, #28]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3728      	adds	r7, #40	; 0x28
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	20003050 	.word	0x20003050
 8004b04:	2000305c 	.word	0x2000305c
 8004b08:	20003054 	.word	0x20003054
 8004b0c:	20003048 	.word	0x20003048
 8004b10:	20003058 	.word	0x20003058

08004b14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d048      	beq.n	8004bb8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004b26:	2308      	movs	r3, #8
 8004b28:	425b      	negs	r3, r3
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	4b21      	ldr	r3, [pc, #132]	; (8004bc0 <vPortFree+0xac>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10a      	bne.n	8004b58 <vPortFree+0x44>
	__asm volatile
 8004b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b46:	f383 8811 	msr	BASEPRI, r3
 8004b4a:	f3bf 8f6f 	isb	sy
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	60fb      	str	r3, [r7, #12]
}
 8004b54:	bf00      	nop
 8004b56:	e7fe      	b.n	8004b56 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00a      	beq.n	8004b76 <vPortFree+0x62>
	__asm volatile
 8004b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b64:	f383 8811 	msr	BASEPRI, r3
 8004b68:	f3bf 8f6f 	isb	sy
 8004b6c:	f3bf 8f4f 	dsb	sy
 8004b70:	60bb      	str	r3, [r7, #8]
}
 8004b72:	bf00      	nop
 8004b74:	e7fe      	b.n	8004b74 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	4b11      	ldr	r3, [pc, #68]	; (8004bc0 <vPortFree+0xac>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4013      	ands	r3, r2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d019      	beq.n	8004bb8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d115      	bne.n	8004bb8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	685a      	ldr	r2, [r3, #4]
 8004b90:	4b0b      	ldr	r3, [pc, #44]	; (8004bc0 <vPortFree+0xac>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	43db      	mvns	r3, r3
 8004b96:	401a      	ands	r2, r3
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004b9c:	f7fe fd1e 	bl	80035dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	685a      	ldr	r2, [r3, #4]
 8004ba4:	4b07      	ldr	r3, [pc, #28]	; (8004bc4 <vPortFree+0xb0>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4413      	add	r3, r2
 8004baa:	4a06      	ldr	r2, [pc, #24]	; (8004bc4 <vPortFree+0xb0>)
 8004bac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004bae:	6938      	ldr	r0, [r7, #16]
 8004bb0:	f000 f86c 	bl	8004c8c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004bb4:	f7fe fd20 	bl	80035f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004bb8:	bf00      	nop
 8004bba:	3718      	adds	r7, #24
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	2000305c 	.word	0x2000305c
 8004bc4:	20003054 	.word	0x20003054

08004bc8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004bce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004bd2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004bd4:	4b27      	ldr	r3, [pc, #156]	; (8004c74 <prvHeapInit+0xac>)
 8004bd6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f003 0307 	and.w	r3, r3, #7
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00c      	beq.n	8004bfc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	3307      	adds	r3, #7
 8004be6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f023 0307 	bic.w	r3, r3, #7
 8004bee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004bf0:	68ba      	ldr	r2, [r7, #8]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	4a1f      	ldr	r2, [pc, #124]	; (8004c74 <prvHeapInit+0xac>)
 8004bf8:	4413      	add	r3, r2
 8004bfa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c00:	4a1d      	ldr	r2, [pc, #116]	; (8004c78 <prvHeapInit+0xb0>)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004c06:	4b1c      	ldr	r3, [pc, #112]	; (8004c78 <prvHeapInit+0xb0>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	68ba      	ldr	r2, [r7, #8]
 8004c10:	4413      	add	r3, r2
 8004c12:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004c14:	2208      	movs	r2, #8
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	1a9b      	subs	r3, r3, r2
 8004c1a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f023 0307 	bic.w	r3, r3, #7
 8004c22:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4a15      	ldr	r2, [pc, #84]	; (8004c7c <prvHeapInit+0xb4>)
 8004c28:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004c2a:	4b14      	ldr	r3, [pc, #80]	; (8004c7c <prvHeapInit+0xb4>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004c32:	4b12      	ldr	r3, [pc, #72]	; (8004c7c <prvHeapInit+0xb4>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2200      	movs	r2, #0
 8004c38:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	1ad2      	subs	r2, r2, r3
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c48:	4b0c      	ldr	r3, [pc, #48]	; (8004c7c <prvHeapInit+0xb4>)
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	4a0a      	ldr	r2, [pc, #40]	; (8004c80 <prvHeapInit+0xb8>)
 8004c56:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	4a09      	ldr	r2, [pc, #36]	; (8004c84 <prvHeapInit+0xbc>)
 8004c5e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004c60:	4b09      	ldr	r3, [pc, #36]	; (8004c88 <prvHeapInit+0xc0>)
 8004c62:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004c66:	601a      	str	r2, [r3, #0]
}
 8004c68:	bf00      	nop
 8004c6a:	3714      	adds	r7, #20
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bc80      	pop	{r7}
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	20001048 	.word	0x20001048
 8004c78:	20003048 	.word	0x20003048
 8004c7c:	20003050 	.word	0x20003050
 8004c80:	20003058 	.word	0x20003058
 8004c84:	20003054 	.word	0x20003054
 8004c88:	2000305c 	.word	0x2000305c

08004c8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c94:	4b27      	ldr	r3, [pc, #156]	; (8004d34 <prvInsertBlockIntoFreeList+0xa8>)
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	e002      	b.n	8004ca0 <prvInsertBlockIntoFreeList+0x14>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	60fb      	str	r3, [r7, #12]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d8f7      	bhi.n	8004c9a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	68ba      	ldr	r2, [r7, #8]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d108      	bne.n	8004cce <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	441a      	add	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	441a      	add	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d118      	bne.n	8004d14 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	4b14      	ldr	r3, [pc, #80]	; (8004d38 <prvInsertBlockIntoFreeList+0xac>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d00d      	beq.n	8004d0a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	441a      	add	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	601a      	str	r2, [r3, #0]
 8004d08:	e008      	b.n	8004d1c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004d0a:	4b0b      	ldr	r3, [pc, #44]	; (8004d38 <prvInsertBlockIntoFreeList+0xac>)
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	601a      	str	r2, [r3, #0]
 8004d12:	e003      	b.n	8004d1c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d002      	beq.n	8004d2a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d2a:	bf00      	nop
 8004d2c:	3714      	adds	r7, #20
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bc80      	pop	{r7}
 8004d32:	4770      	bx	lr
 8004d34:	20003048 	.word	0x20003048
 8004d38:	20003050 	.word	0x20003050

08004d3c <memset>:
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	4402      	add	r2, r0
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d100      	bne.n	8004d46 <memset+0xa>
 8004d44:	4770      	bx	lr
 8004d46:	f803 1b01 	strb.w	r1, [r3], #1
 8004d4a:	e7f9      	b.n	8004d40 <memset+0x4>

08004d4c <_reclaim_reent>:
 8004d4c:	4b29      	ldr	r3, [pc, #164]	; (8004df4 <_reclaim_reent+0xa8>)
 8004d4e:	b570      	push	{r4, r5, r6, lr}
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4604      	mov	r4, r0
 8004d54:	4283      	cmp	r3, r0
 8004d56:	d04b      	beq.n	8004df0 <_reclaim_reent+0xa4>
 8004d58:	69c3      	ldr	r3, [r0, #28]
 8004d5a:	b143      	cbz	r3, 8004d6e <_reclaim_reent+0x22>
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d144      	bne.n	8004dec <_reclaim_reent+0xa0>
 8004d62:	69e3      	ldr	r3, [r4, #28]
 8004d64:	6819      	ldr	r1, [r3, #0]
 8004d66:	b111      	cbz	r1, 8004d6e <_reclaim_reent+0x22>
 8004d68:	4620      	mov	r0, r4
 8004d6a:	f000 f879 	bl	8004e60 <_free_r>
 8004d6e:	6961      	ldr	r1, [r4, #20]
 8004d70:	b111      	cbz	r1, 8004d78 <_reclaim_reent+0x2c>
 8004d72:	4620      	mov	r0, r4
 8004d74:	f000 f874 	bl	8004e60 <_free_r>
 8004d78:	69e1      	ldr	r1, [r4, #28]
 8004d7a:	b111      	cbz	r1, 8004d82 <_reclaim_reent+0x36>
 8004d7c:	4620      	mov	r0, r4
 8004d7e:	f000 f86f 	bl	8004e60 <_free_r>
 8004d82:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004d84:	b111      	cbz	r1, 8004d8c <_reclaim_reent+0x40>
 8004d86:	4620      	mov	r0, r4
 8004d88:	f000 f86a 	bl	8004e60 <_free_r>
 8004d8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d8e:	b111      	cbz	r1, 8004d96 <_reclaim_reent+0x4a>
 8004d90:	4620      	mov	r0, r4
 8004d92:	f000 f865 	bl	8004e60 <_free_r>
 8004d96:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004d98:	b111      	cbz	r1, 8004da0 <_reclaim_reent+0x54>
 8004d9a:	4620      	mov	r0, r4
 8004d9c:	f000 f860 	bl	8004e60 <_free_r>
 8004da0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004da2:	b111      	cbz	r1, 8004daa <_reclaim_reent+0x5e>
 8004da4:	4620      	mov	r0, r4
 8004da6:	f000 f85b 	bl	8004e60 <_free_r>
 8004daa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004dac:	b111      	cbz	r1, 8004db4 <_reclaim_reent+0x68>
 8004dae:	4620      	mov	r0, r4
 8004db0:	f000 f856 	bl	8004e60 <_free_r>
 8004db4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004db6:	b111      	cbz	r1, 8004dbe <_reclaim_reent+0x72>
 8004db8:	4620      	mov	r0, r4
 8004dba:	f000 f851 	bl	8004e60 <_free_r>
 8004dbe:	6a23      	ldr	r3, [r4, #32]
 8004dc0:	b1b3      	cbz	r3, 8004df0 <_reclaim_reent+0xa4>
 8004dc2:	4620      	mov	r0, r4
 8004dc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004dc8:	4718      	bx	r3
 8004dca:	5949      	ldr	r1, [r1, r5]
 8004dcc:	b941      	cbnz	r1, 8004de0 <_reclaim_reent+0x94>
 8004dce:	3504      	adds	r5, #4
 8004dd0:	69e3      	ldr	r3, [r4, #28]
 8004dd2:	2d80      	cmp	r5, #128	; 0x80
 8004dd4:	68d9      	ldr	r1, [r3, #12]
 8004dd6:	d1f8      	bne.n	8004dca <_reclaim_reent+0x7e>
 8004dd8:	4620      	mov	r0, r4
 8004dda:	f000 f841 	bl	8004e60 <_free_r>
 8004dde:	e7c0      	b.n	8004d62 <_reclaim_reent+0x16>
 8004de0:	680e      	ldr	r6, [r1, #0]
 8004de2:	4620      	mov	r0, r4
 8004de4:	f000 f83c 	bl	8004e60 <_free_r>
 8004de8:	4631      	mov	r1, r6
 8004dea:	e7ef      	b.n	8004dcc <_reclaim_reent+0x80>
 8004dec:	2500      	movs	r5, #0
 8004dee:	e7ef      	b.n	8004dd0 <_reclaim_reent+0x84>
 8004df0:	bd70      	pop	{r4, r5, r6, pc}
 8004df2:	bf00      	nop
 8004df4:	2000005c 	.word	0x2000005c

08004df8 <__libc_init_array>:
 8004df8:	b570      	push	{r4, r5, r6, lr}
 8004dfa:	2600      	movs	r6, #0
 8004dfc:	4d0c      	ldr	r5, [pc, #48]	; (8004e30 <__libc_init_array+0x38>)
 8004dfe:	4c0d      	ldr	r4, [pc, #52]	; (8004e34 <__libc_init_array+0x3c>)
 8004e00:	1b64      	subs	r4, r4, r5
 8004e02:	10a4      	asrs	r4, r4, #2
 8004e04:	42a6      	cmp	r6, r4
 8004e06:	d109      	bne.n	8004e1c <__libc_init_array+0x24>
 8004e08:	f000 f87e 	bl	8004f08 <_init>
 8004e0c:	2600      	movs	r6, #0
 8004e0e:	4d0a      	ldr	r5, [pc, #40]	; (8004e38 <__libc_init_array+0x40>)
 8004e10:	4c0a      	ldr	r4, [pc, #40]	; (8004e3c <__libc_init_array+0x44>)
 8004e12:	1b64      	subs	r4, r4, r5
 8004e14:	10a4      	asrs	r4, r4, #2
 8004e16:	42a6      	cmp	r6, r4
 8004e18:	d105      	bne.n	8004e26 <__libc_init_array+0x2e>
 8004e1a:	bd70      	pop	{r4, r5, r6, pc}
 8004e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e20:	4798      	blx	r3
 8004e22:	3601      	adds	r6, #1
 8004e24:	e7ee      	b.n	8004e04 <__libc_init_array+0xc>
 8004e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e2a:	4798      	blx	r3
 8004e2c:	3601      	adds	r6, #1
 8004e2e:	e7f2      	b.n	8004e16 <__libc_init_array+0x1e>
 8004e30:	0800514c 	.word	0x0800514c
 8004e34:	0800514c 	.word	0x0800514c
 8004e38:	0800514c 	.word	0x0800514c
 8004e3c:	08005150 	.word	0x08005150

08004e40 <__retarget_lock_acquire_recursive>:
 8004e40:	4770      	bx	lr

08004e42 <__retarget_lock_release_recursive>:
 8004e42:	4770      	bx	lr

08004e44 <memcpy>:
 8004e44:	440a      	add	r2, r1
 8004e46:	4291      	cmp	r1, r2
 8004e48:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e4c:	d100      	bne.n	8004e50 <memcpy+0xc>
 8004e4e:	4770      	bx	lr
 8004e50:	b510      	push	{r4, lr}
 8004e52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e56:	4291      	cmp	r1, r2
 8004e58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e5c:	d1f9      	bne.n	8004e52 <memcpy+0xe>
 8004e5e:	bd10      	pop	{r4, pc}

08004e60 <_free_r>:
 8004e60:	b538      	push	{r3, r4, r5, lr}
 8004e62:	4605      	mov	r5, r0
 8004e64:	2900      	cmp	r1, #0
 8004e66:	d040      	beq.n	8004eea <_free_r+0x8a>
 8004e68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e6c:	1f0c      	subs	r4, r1, #4
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	bfb8      	it	lt
 8004e72:	18e4      	addlt	r4, r4, r3
 8004e74:	f000 f83c 	bl	8004ef0 <__malloc_lock>
 8004e78:	4a1c      	ldr	r2, [pc, #112]	; (8004eec <_free_r+0x8c>)
 8004e7a:	6813      	ldr	r3, [r2, #0]
 8004e7c:	b933      	cbnz	r3, 8004e8c <_free_r+0x2c>
 8004e7e:	6063      	str	r3, [r4, #4]
 8004e80:	6014      	str	r4, [r2, #0]
 8004e82:	4628      	mov	r0, r5
 8004e84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e88:	f000 b838 	b.w	8004efc <__malloc_unlock>
 8004e8c:	42a3      	cmp	r3, r4
 8004e8e:	d908      	bls.n	8004ea2 <_free_r+0x42>
 8004e90:	6820      	ldr	r0, [r4, #0]
 8004e92:	1821      	adds	r1, r4, r0
 8004e94:	428b      	cmp	r3, r1
 8004e96:	bf01      	itttt	eq
 8004e98:	6819      	ldreq	r1, [r3, #0]
 8004e9a:	685b      	ldreq	r3, [r3, #4]
 8004e9c:	1809      	addeq	r1, r1, r0
 8004e9e:	6021      	streq	r1, [r4, #0]
 8004ea0:	e7ed      	b.n	8004e7e <_free_r+0x1e>
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	b10b      	cbz	r3, 8004eac <_free_r+0x4c>
 8004ea8:	42a3      	cmp	r3, r4
 8004eaa:	d9fa      	bls.n	8004ea2 <_free_r+0x42>
 8004eac:	6811      	ldr	r1, [r2, #0]
 8004eae:	1850      	adds	r0, r2, r1
 8004eb0:	42a0      	cmp	r0, r4
 8004eb2:	d10b      	bne.n	8004ecc <_free_r+0x6c>
 8004eb4:	6820      	ldr	r0, [r4, #0]
 8004eb6:	4401      	add	r1, r0
 8004eb8:	1850      	adds	r0, r2, r1
 8004eba:	4283      	cmp	r3, r0
 8004ebc:	6011      	str	r1, [r2, #0]
 8004ebe:	d1e0      	bne.n	8004e82 <_free_r+0x22>
 8004ec0:	6818      	ldr	r0, [r3, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	4408      	add	r0, r1
 8004ec6:	6010      	str	r0, [r2, #0]
 8004ec8:	6053      	str	r3, [r2, #4]
 8004eca:	e7da      	b.n	8004e82 <_free_r+0x22>
 8004ecc:	d902      	bls.n	8004ed4 <_free_r+0x74>
 8004ece:	230c      	movs	r3, #12
 8004ed0:	602b      	str	r3, [r5, #0]
 8004ed2:	e7d6      	b.n	8004e82 <_free_r+0x22>
 8004ed4:	6820      	ldr	r0, [r4, #0]
 8004ed6:	1821      	adds	r1, r4, r0
 8004ed8:	428b      	cmp	r3, r1
 8004eda:	bf01      	itttt	eq
 8004edc:	6819      	ldreq	r1, [r3, #0]
 8004ede:	685b      	ldreq	r3, [r3, #4]
 8004ee0:	1809      	addeq	r1, r1, r0
 8004ee2:	6021      	streq	r1, [r4, #0]
 8004ee4:	6063      	str	r3, [r4, #4]
 8004ee6:	6054      	str	r4, [r2, #4]
 8004ee8:	e7cb      	b.n	8004e82 <_free_r+0x22>
 8004eea:	bd38      	pop	{r3, r4, r5, pc}
 8004eec:	2000319c 	.word	0x2000319c

08004ef0 <__malloc_lock>:
 8004ef0:	4801      	ldr	r0, [pc, #4]	; (8004ef8 <__malloc_lock+0x8>)
 8004ef2:	f7ff bfa5 	b.w	8004e40 <__retarget_lock_acquire_recursive>
 8004ef6:	bf00      	nop
 8004ef8:	20003198 	.word	0x20003198

08004efc <__malloc_unlock>:
 8004efc:	4801      	ldr	r0, [pc, #4]	; (8004f04 <__malloc_unlock+0x8>)
 8004efe:	f7ff bfa0 	b.w	8004e42 <__retarget_lock_release_recursive>
 8004f02:	bf00      	nop
 8004f04:	20003198 	.word	0x20003198

08004f08 <_init>:
 8004f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f0a:	bf00      	nop
 8004f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f0e:	bc08      	pop	{r3}
 8004f10:	469e      	mov	lr, r3
 8004f12:	4770      	bx	lr

08004f14 <_fini>:
 8004f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f16:	bf00      	nop
 8004f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f1a:	bc08      	pop	{r3}
 8004f1c:	469e      	mov	lr, r3
 8004f1e:	4770      	bx	lr
