
tel_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077b0  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  080079a0  080079a0  000179a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bf4  08007bf4  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08007bf4  08007bf4  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007bf4  08007bf4  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bf4  08007bf4  00017bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bf8  08007bf8  00017bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08007bfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003204  20000060  08007c5c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003264  08007c5c  00023264  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   000186f1  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a0c  00000000  00000000  000387bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001458  00000000  00000000  0003c1d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fc6  00000000  00000000  0003d628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bdce  00000000  00000000  0003e5ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019762  00000000  00000000  0005a3bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a0d8f  00000000  00000000  00073b1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005894  00000000  00000000  001148b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0011a144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000060 	.word	0x20000060
 800020c:	00000000 	.word	0x00000000
 8000210:	08007988 	.word	0x08007988

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000064 	.word	0x20000064
 800022c:	08007988 	.word	0x08007988

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__aeabi_d2iz>:
 80009cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009d4:	d215      	bcs.n	8000a02 <__aeabi_d2iz+0x36>
 80009d6:	d511      	bpl.n	80009fc <__aeabi_d2iz+0x30>
 80009d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009e0:	d912      	bls.n	8000a08 <__aeabi_d2iz+0x3c>
 80009e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009f2:	fa23 f002 	lsr.w	r0, r3, r2
 80009f6:	bf18      	it	ne
 80009f8:	4240      	negne	r0, r0
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a06:	d105      	bne.n	8000a14 <__aeabi_d2iz+0x48>
 8000a08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a0c:	bf08      	it	eq
 8000a0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a12:	4770      	bx	lr
 8000a14:	f04f 0000 	mov.w	r0, #0
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_frsub>:
 8000abc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ac0:	e002      	b.n	8000ac8 <__addsf3>
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_fsub>:
 8000ac4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ac8 <__addsf3>:
 8000ac8:	0042      	lsls	r2, r0, #1
 8000aca:	bf1f      	itttt	ne
 8000acc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ad0:	ea92 0f03 	teqne	r2, r3
 8000ad4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ad8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000adc:	d06a      	beq.n	8000bb4 <__addsf3+0xec>
 8000ade:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ae2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ae6:	bfc1      	itttt	gt
 8000ae8:	18d2      	addgt	r2, r2, r3
 8000aea:	4041      	eorgt	r1, r0
 8000aec:	4048      	eorgt	r0, r1
 8000aee:	4041      	eorgt	r1, r0
 8000af0:	bfb8      	it	lt
 8000af2:	425b      	neglt	r3, r3
 8000af4:	2b19      	cmp	r3, #25
 8000af6:	bf88      	it	hi
 8000af8:	4770      	bxhi	lr
 8000afa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000afe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b02:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b06:	bf18      	it	ne
 8000b08:	4240      	negne	r0, r0
 8000b0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b12:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b16:	bf18      	it	ne
 8000b18:	4249      	negne	r1, r1
 8000b1a:	ea92 0f03 	teq	r2, r3
 8000b1e:	d03f      	beq.n	8000ba0 <__addsf3+0xd8>
 8000b20:	f1a2 0201 	sub.w	r2, r2, #1
 8000b24:	fa41 fc03 	asr.w	ip, r1, r3
 8000b28:	eb10 000c 	adds.w	r0, r0, ip
 8000b2c:	f1c3 0320 	rsb	r3, r3, #32
 8000b30:	fa01 f103 	lsl.w	r1, r1, r3
 8000b34:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__addsf3+0x78>
 8000b3a:	4249      	negs	r1, r1
 8000b3c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b40:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b44:	d313      	bcc.n	8000b6e <__addsf3+0xa6>
 8000b46:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b4a:	d306      	bcc.n	8000b5a <__addsf3+0x92>
 8000b4c:	0840      	lsrs	r0, r0, #1
 8000b4e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b52:	f102 0201 	add.w	r2, r2, #1
 8000b56:	2afe      	cmp	r2, #254	; 0xfe
 8000b58:	d251      	bcs.n	8000bfe <__addsf3+0x136>
 8000b5a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b5e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b62:	bf08      	it	eq
 8000b64:	f020 0001 	biceq.w	r0, r0, #1
 8000b68:	ea40 0003 	orr.w	r0, r0, r3
 8000b6c:	4770      	bx	lr
 8000b6e:	0049      	lsls	r1, r1, #1
 8000b70:	eb40 0000 	adc.w	r0, r0, r0
 8000b74:	3a01      	subs	r2, #1
 8000b76:	bf28      	it	cs
 8000b78:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b7c:	d2ed      	bcs.n	8000b5a <__addsf3+0x92>
 8000b7e:	fab0 fc80 	clz	ip, r0
 8000b82:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b86:	ebb2 020c 	subs.w	r2, r2, ip
 8000b8a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b8e:	bfaa      	itet	ge
 8000b90:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b94:	4252      	neglt	r2, r2
 8000b96:	4318      	orrge	r0, r3
 8000b98:	bfbc      	itt	lt
 8000b9a:	40d0      	lsrlt	r0, r2
 8000b9c:	4318      	orrlt	r0, r3
 8000b9e:	4770      	bx	lr
 8000ba0:	f092 0f00 	teq	r2, #0
 8000ba4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ba8:	bf06      	itte	eq
 8000baa:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bae:	3201      	addeq	r2, #1
 8000bb0:	3b01      	subne	r3, #1
 8000bb2:	e7b5      	b.n	8000b20 <__addsf3+0x58>
 8000bb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bbc:	bf18      	it	ne
 8000bbe:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc2:	d021      	beq.n	8000c08 <__addsf3+0x140>
 8000bc4:	ea92 0f03 	teq	r2, r3
 8000bc8:	d004      	beq.n	8000bd4 <__addsf3+0x10c>
 8000bca:	f092 0f00 	teq	r2, #0
 8000bce:	bf08      	it	eq
 8000bd0:	4608      	moveq	r0, r1
 8000bd2:	4770      	bx	lr
 8000bd4:	ea90 0f01 	teq	r0, r1
 8000bd8:	bf1c      	itt	ne
 8000bda:	2000      	movne	r0, #0
 8000bdc:	4770      	bxne	lr
 8000bde:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000be2:	d104      	bne.n	8000bee <__addsf3+0x126>
 8000be4:	0040      	lsls	r0, r0, #1
 8000be6:	bf28      	it	cs
 8000be8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bec:	4770      	bx	lr
 8000bee:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bf2:	bf3c      	itt	cc
 8000bf4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bxcc	lr
 8000bfa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bfe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c02:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c06:	4770      	bx	lr
 8000c08:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c0c:	bf16      	itet	ne
 8000c0e:	4608      	movne	r0, r1
 8000c10:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c14:	4601      	movne	r1, r0
 8000c16:	0242      	lsls	r2, r0, #9
 8000c18:	bf06      	itte	eq
 8000c1a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c1e:	ea90 0f01 	teqeq	r0, r1
 8000c22:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_ui2f>:
 8000c28:	f04f 0300 	mov.w	r3, #0
 8000c2c:	e004      	b.n	8000c38 <__aeabi_i2f+0x8>
 8000c2e:	bf00      	nop

08000c30 <__aeabi_i2f>:
 8000c30:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c34:	bf48      	it	mi
 8000c36:	4240      	negmi	r0, r0
 8000c38:	ea5f 0c00 	movs.w	ip, r0
 8000c3c:	bf08      	it	eq
 8000c3e:	4770      	bxeq	lr
 8000c40:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c44:	4601      	mov	r1, r0
 8000c46:	f04f 0000 	mov.w	r0, #0
 8000c4a:	e01c      	b.n	8000c86 <__aeabi_l2f+0x2a>

08000c4c <__aeabi_ul2f>:
 8000c4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c50:	bf08      	it	eq
 8000c52:	4770      	bxeq	lr
 8000c54:	f04f 0300 	mov.w	r3, #0
 8000c58:	e00a      	b.n	8000c70 <__aeabi_l2f+0x14>
 8000c5a:	bf00      	nop

08000c5c <__aeabi_l2f>:
 8000c5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c60:	bf08      	it	eq
 8000c62:	4770      	bxeq	lr
 8000c64:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c68:	d502      	bpl.n	8000c70 <__aeabi_l2f+0x14>
 8000c6a:	4240      	negs	r0, r0
 8000c6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c70:	ea5f 0c01 	movs.w	ip, r1
 8000c74:	bf02      	ittt	eq
 8000c76:	4684      	moveq	ip, r0
 8000c78:	4601      	moveq	r1, r0
 8000c7a:	2000      	moveq	r0, #0
 8000c7c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c80:	bf08      	it	eq
 8000c82:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c86:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c8a:	fabc f28c 	clz	r2, ip
 8000c8e:	3a08      	subs	r2, #8
 8000c90:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c94:	db10      	blt.n	8000cb8 <__aeabi_l2f+0x5c>
 8000c96:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ca8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	f020 0001 	biceq.w	r0, r0, #1
 8000cb6:	4770      	bx	lr
 8000cb8:	f102 0220 	add.w	r2, r2, #32
 8000cbc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cc0:	f1c2 0220 	rsb	r2, r2, #32
 8000cc4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cc8:	fa21 f202 	lsr.w	r2, r1, r2
 8000ccc:	eb43 0002 	adc.w	r0, r3, r2
 8000cd0:	bf08      	it	eq
 8000cd2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cd6:	4770      	bx	lr

08000cd8 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000cdc:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <MX_CAN_Init+0x64>)
 8000cde:	4a18      	ldr	r2, [pc, #96]	; (8000d40 <MX_CAN_Init+0x68>)
 8000ce0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000ce2:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <MX_CAN_Init+0x64>)
 8000ce4:	2204      	movs	r2, #4
 8000ce6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000ce8:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <MX_CAN_Init+0x64>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000cee:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <MX_CAN_Init+0x64>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 8000cf4:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <MX_CAN_Init+0x64>)
 8000cf6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000cfa:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <MX_CAN_Init+0x64>)
 8000cfe:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8000d02:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000d04:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <MX_CAN_Init+0x64>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <MX_CAN_Init+0x64>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000d10:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <MX_CAN_Init+0x64>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000d16:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <MX_CAN_Init+0x64>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000d1c:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <MX_CAN_Init+0x64>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <MX_CAN_Init+0x64>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000d28:	4804      	ldr	r0, [pc, #16]	; (8000d3c <MX_CAN_Init+0x64>)
 8000d2a:	f000 fff3 	bl	8001d14 <HAL_CAN_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000d34:	f000 fda6 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000080 	.word	0x20000080
 8000d40:	40006400 	.word	0x40006400

08000d44 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a25      	ldr	r2, [pc, #148]	; (8000df4 <HAL_CAN_MspInit+0xb0>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d143      	bne.n	8000dec <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d64:	4b24      	ldr	r3, [pc, #144]	; (8000df8 <HAL_CAN_MspInit+0xb4>)
 8000d66:	69db      	ldr	r3, [r3, #28]
 8000d68:	4a23      	ldr	r2, [pc, #140]	; (8000df8 <HAL_CAN_MspInit+0xb4>)
 8000d6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d6e:	61d3      	str	r3, [r2, #28]
 8000d70:	4b21      	ldr	r3, [pc, #132]	; (8000df8 <HAL_CAN_MspInit+0xb4>)
 8000d72:	69db      	ldr	r3, [r3, #28]
 8000d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7c:	4b1e      	ldr	r3, [pc, #120]	; (8000df8 <HAL_CAN_MspInit+0xb4>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	4a1d      	ldr	r2, [pc, #116]	; (8000df8 <HAL_CAN_MspInit+0xb4>)
 8000d82:	f043 0308 	orr.w	r3, r3, #8
 8000d86:	6193      	str	r3, [r2, #24]
 8000d88:	4b1b      	ldr	r3, [pc, #108]	; (8000df8 <HAL_CAN_MspInit+0xb4>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	f003 0308 	and.w	r3, r3, #8
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4619      	mov	r1, r3
 8000da8:	4814      	ldr	r0, [pc, #80]	; (8000dfc <HAL_CAN_MspInit+0xb8>)
 8000daa:	f001 fc0d 	bl	80025c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000dae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db4:	2302      	movs	r3, #2
 8000db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000db8:	2303      	movs	r3, #3
 8000dba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	480e      	ldr	r0, [pc, #56]	; (8000dfc <HAL_CAN_MspInit+0xb8>)
 8000dc4:	f001 fc00 	bl	80025c8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000dc8:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <HAL_CAN_MspInit+0xbc>)
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8000dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd0:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8000dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8000dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24
 8000de6:	4a06      	ldr	r2, [pc, #24]	; (8000e00 <HAL_CAN_MspInit+0xbc>)
 8000de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dea:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000dec:	bf00      	nop
 8000dee:	3728      	adds	r7, #40	; 0x28
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40006400 	.word	0x40006400
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	40010c00 	.word	0x40010c00
 8000e00:	40010000 	.word	0x40010000

08000e04 <CanFilterSetup>:
}

/* USER CODE BEGIN 1 */

void CanFilterSetup(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* TODO: Review Filter Implementation */
  // Use mask and list mode to filter IDs from the CAN ID BOM

  // Filter for 0x500 and 0x600 IDs
  CAN_filter0.FilterIdHigh = (uint16_t) (0x501 << 5);
 8000e08:	4b23      	ldr	r3, [pc, #140]	; (8000e98 <CanFilterSetup+0x94>)
 8000e0a:	f24a 0220 	movw	r2, #40992	; 0xa020
 8000e0e:	601a      	str	r2, [r3, #0]
  CAN_filter0.FilterMaskIdHigh = (uint16_t) (0x7F5 << 5);
 8000e10:	4b21      	ldr	r3, [pc, #132]	; (8000e98 <CanFilterSetup+0x94>)
 8000e12:	f64f 62a0 	movw	r2, #65184	; 0xfea0
 8000e16:	609a      	str	r2, [r3, #8]

  CAN_filter0.FilterIdLow = (uint16_t) (0x620 << 5);
 8000e18:	4b1f      	ldr	r3, [pc, #124]	; (8000e98 <CanFilterSetup+0x94>)
 8000e1a:	f44f 4244 	mov.w	r2, #50176	; 0xc400
 8000e1e:	605a      	str	r2, [r3, #4]
  CAN_filter0.FilterMaskIdLow = (uint16_t) (0x7F8 << 5);
 8000e20:	4b1d      	ldr	r3, [pc, #116]	; (8000e98 <CanFilterSetup+0x94>)
 8000e22:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8000e26:	60da      	str	r2, [r3, #12]

  CAN_filter0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000e28:	4b1b      	ldr	r3, [pc, #108]	; (8000e98 <CanFilterSetup+0x94>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	611a      	str	r2, [r3, #16]
  CAN_filter0.FilterBank = (uint32_t) 0;
 8000e2e:	4b1a      	ldr	r3, [pc, #104]	; (8000e98 <CanFilterSetup+0x94>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	615a      	str	r2, [r3, #20]
  CAN_filter0.FilterMode = CAN_FILTERMODE_IDMASK;
 8000e34:	4b18      	ldr	r3, [pc, #96]	; (8000e98 <CanFilterSetup+0x94>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	619a      	str	r2, [r3, #24]
  CAN_filter0.FilterScale = CAN_FILTERSCALE_16BIT;
 8000e3a:	4b17      	ldr	r3, [pc, #92]	; (8000e98 <CanFilterSetup+0x94>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	61da      	str	r2, [r3, #28]
  CAN_filter0.FilterActivation = CAN_FILTER_ENABLE;
 8000e40:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <CanFilterSetup+0x94>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	621a      	str	r2, [r3, #32]

  // Remaining IDs filtered with list mode
  CAN_filter1.FilterIdHigh = (uint16_t) (0x502 << 5);
 8000e46:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <CanFilterSetup+0x98>)
 8000e48:	f24a 0240 	movw	r2, #41024	; 0xa040
 8000e4c:	601a      	str	r2, [r3, #0]
  CAN_filter1.FilterMaskIdHigh = (uint16_t) (0x401 << 5);
 8000e4e:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <CanFilterSetup+0x98>)
 8000e50:	f248 0220 	movw	r2, #32800	; 0x8020
 8000e54:	609a      	str	r2, [r3, #8]

  CAN_filter1.FilterIdLow = (uint16_t) (0x401 << 5);
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <CanFilterSetup+0x98>)
 8000e58:	f248 0220 	movw	r2, #32800	; 0x8020
 8000e5c:	605a      	str	r2, [r3, #4]
  CAN_filter1.FilterMaskIdLow = (uint16_t) (0x401 << 5);
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <CanFilterSetup+0x98>)
 8000e60:	f248 0220 	movw	r2, #32800	; 0x8020
 8000e64:	60da      	str	r2, [r3, #12]

  CAN_filter1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000e66:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <CanFilterSetup+0x98>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
  CAN_filter1.FilterBank = (uint32_t) 1;
 8000e6c:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <CanFilterSetup+0x98>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	615a      	str	r2, [r3, #20]
  CAN_filter1.FilterMode = CAN_FILTERMODE_IDLIST;
 8000e72:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <CanFilterSetup+0x98>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	619a      	str	r2, [r3, #24]
  CAN_filter1.FilterScale = CAN_FILTERSCALE_16BIT;
 8000e78:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <CanFilterSetup+0x98>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	61da      	str	r2, [r3, #28]
  CAN_filter1.FilterActivation = CAN_FILTER_ENABLE;
 8000e7e:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <CanFilterSetup+0x98>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	621a      	str	r2, [r3, #32]

  // Configure reception filters
  HAL_CAN_ConfigFilter(&hcan, &CAN_filter0);
 8000e84:	4904      	ldr	r1, [pc, #16]	; (8000e98 <CanFilterSetup+0x94>)
 8000e86:	4806      	ldr	r0, [pc, #24]	; (8000ea0 <CanFilterSetup+0x9c>)
 8000e88:	f001 f83f 	bl	8001f0a <HAL_CAN_ConfigFilter>
  HAL_CAN_ConfigFilter(&hcan, &CAN_filter1);
 8000e8c:	4903      	ldr	r1, [pc, #12]	; (8000e9c <CanFilterSetup+0x98>)
 8000e8e:	4804      	ldr	r0, [pc, #16]	; (8000ea0 <CanFilterSetup+0x9c>)
 8000e90:	f001 f83b 	bl	8001f0a <HAL_CAN_ConfigFilter>

}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	200001c4 	.word	0x200001c4
 8000e9c:	200001ec 	.word	0x200001ec
 8000ea0:	20000080 	.word	0x20000080

08000ea4 <Can_Init>:

/*
 * CAN set-up: Sets up the filters, Starts CAN with HAL, and Activates notifications for interrupts.
 */
void Can_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
  CanFilterSetup();
 8000eaa:	f7ff ffab 	bl	8000e04 <CanFilterSetup>
  can_start = HAL_CAN_Start(&hcan);
 8000eae:	4808      	ldr	r0, [pc, #32]	; (8000ed0 <Can_Init+0x2c>)
 8000eb0:	f001 f8f4 	bl	800209c <HAL_CAN_Start>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <Can_Init+0x30>)
 8000eba:	701a      	strb	r2, [r3, #0]
  assert_param(can_start == HAL_OK);

  HAL_StatusTypeDef can_notification_status = HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000ebc:	2102      	movs	r1, #2
 8000ebe:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <Can_Init+0x2c>)
 8000ec0:	f001 fa78 	bl	80023b4 <HAL_CAN_ActivateNotification>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	71fb      	strb	r3, [r7, #7]
  assert_param(can_notification_status == HAL_OK);

  /* To avoid warning of unused variable */
  (void) can_notification_status;
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000080 	.word	0x20000080
 8000ed4:	2000007c 	.word	0x2000007c

08000ed8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of canMessageQueue */
  canMessageQueueHandle = osMessageQueueNew (10, sizeof(uint16_t), &canMessageQueue_attributes);
 8000edc:	4a28      	ldr	r2, [pc, #160]	; (8000f80 <MX_FREERTOS_Init+0xa8>)
 8000ede:	2102      	movs	r1, #2
 8000ee0:	200a      	movs	r0, #10
 8000ee2:	f003 fe1b 	bl	8004b1c <osMessageQueueNew>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	4a26      	ldr	r2, [pc, #152]	; (8000f84 <MX_FREERTOS_Init+0xac>)
 8000eea:	6013      	str	r3, [r2, #0]

  /* creation of imuMessageQueue */
  imuMessageQueueHandle = osMessageQueueNew (10, sizeof(uint16_t), &imuMessageQueue_attributes);
 8000eec:	4a26      	ldr	r2, [pc, #152]	; (8000f88 <MX_FREERTOS_Init+0xb0>)
 8000eee:	2102      	movs	r1, #2
 8000ef0:	200a      	movs	r0, #10
 8000ef2:	f003 fe13 	bl	8004b1c <osMessageQueueNew>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	4a24      	ldr	r2, [pc, #144]	; (8000f8c <MX_FREERTOS_Init+0xb4>)
 8000efa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of StartDefaultTask */
  StartDefaultTaskHandle = osThreadNew(startDefaultTask, NULL, &StartDefaultTask_attributes);
 8000efc:	4a24      	ldr	r2, [pc, #144]	; (8000f90 <MX_FREERTOS_Init+0xb8>)
 8000efe:	2100      	movs	r1, #0
 8000f00:	4824      	ldr	r0, [pc, #144]	; (8000f94 <MX_FREERTOS_Init+0xbc>)
 8000f02:	f003 fc6d 	bl	80047e0 <osThreadNew>
 8000f06:	4603      	mov	r3, r0
 8000f08:	4a23      	ldr	r2, [pc, #140]	; (8000f98 <MX_FREERTOS_Init+0xc0>)
 8000f0a:	6013      	str	r3, [r2, #0]

  /* creation of readCANTask */
  readCANTaskHandle = osThreadNew(read_CAN_task, NULL, &readCANTask_attributes);
 8000f0c:	4a23      	ldr	r2, [pc, #140]	; (8000f9c <MX_FREERTOS_Init+0xc4>)
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4823      	ldr	r0, [pc, #140]	; (8000fa0 <MX_FREERTOS_Init+0xc8>)
 8000f12:	f003 fc65 	bl	80047e0 <osThreadNew>
 8000f16:	4603      	mov	r3, r0
 8000f18:	4a22      	ldr	r2, [pc, #136]	; (8000fa4 <MX_FREERTOS_Init+0xcc>)
 8000f1a:	6013      	str	r3, [r2, #0]

  /* creation of transmitCANTask */
  transmitCANTaskHandle = osThreadNew(transmit_CAN_task, NULL, &transmitCANTask_attributes);
 8000f1c:	4a22      	ldr	r2, [pc, #136]	; (8000fa8 <MX_FREERTOS_Init+0xd0>)
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4822      	ldr	r0, [pc, #136]	; (8000fac <MX_FREERTOS_Init+0xd4>)
 8000f22:	f003 fc5d 	bl	80047e0 <osThreadNew>
 8000f26:	4603      	mov	r3, r0
 8000f28:	4a21      	ldr	r2, [pc, #132]	; (8000fb0 <MX_FREERTOS_Init+0xd8>)
 8000f2a:	6013      	str	r3, [r2, #0]

  /* creation of readIMUTask */
  readIMUTaskHandle = osThreadNew(read_IMU_task, NULL, &readIMUTask_attributes);
 8000f2c:	4a21      	ldr	r2, [pc, #132]	; (8000fb4 <MX_FREERTOS_Init+0xdc>)
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4821      	ldr	r0, [pc, #132]	; (8000fb8 <MX_FREERTOS_Init+0xe0>)
 8000f32:	f003 fc55 	bl	80047e0 <osThreadNew>
 8000f36:	4603      	mov	r3, r0
 8000f38:	4a20      	ldr	r2, [pc, #128]	; (8000fbc <MX_FREERTOS_Init+0xe4>)
 8000f3a:	6013      	str	r3, [r2, #0]

  /* creation of transmitIMUTask */
  transmitIMUTaskHandle = osThreadNew(transmit_IMU_task, NULL, &transmitIMUTask_attributes);
 8000f3c:	4a20      	ldr	r2, [pc, #128]	; (8000fc0 <MX_FREERTOS_Init+0xe8>)
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4820      	ldr	r0, [pc, #128]	; (8000fc4 <MX_FREERTOS_Init+0xec>)
 8000f42:	f003 fc4d 	bl	80047e0 <osThreadNew>
 8000f46:	4603      	mov	r3, r0
 8000f48:	4a1f      	ldr	r2, [pc, #124]	; (8000fc8 <MX_FREERTOS_Init+0xf0>)
 8000f4a:	6013      	str	r3, [r2, #0]

  /* creation of readGPSTask */
  readGPSTaskHandle = osThreadNew(read_GPS_task, NULL, &readGPSTask_attributes);
 8000f4c:	4a1f      	ldr	r2, [pc, #124]	; (8000fcc <MX_FREERTOS_Init+0xf4>)
 8000f4e:	2100      	movs	r1, #0
 8000f50:	481f      	ldr	r0, [pc, #124]	; (8000fd0 <MX_FREERTOS_Init+0xf8>)
 8000f52:	f003 fc45 	bl	80047e0 <osThreadNew>
 8000f56:	4603      	mov	r3, r0
 8000f58:	4a1e      	ldr	r2, [pc, #120]	; (8000fd4 <MX_FREERTOS_Init+0xfc>)
 8000f5a:	6013      	str	r3, [r2, #0]

  /* creation of transmitGPSTask */
  transmitGPSTaskHandle = osThreadNew(transmit_GPS_task, NULL, &transmitGPSTask_attributes);
 8000f5c:	4a1e      	ldr	r2, [pc, #120]	; (8000fd8 <MX_FREERTOS_Init+0x100>)
 8000f5e:	2100      	movs	r1, #0
 8000f60:	481e      	ldr	r0, [pc, #120]	; (8000fdc <MX_FREERTOS_Init+0x104>)
 8000f62:	f003 fc3d 	bl	80047e0 <osThreadNew>
 8000f66:	4603      	mov	r3, r0
 8000f68:	4a1d      	ldr	r2, [pc, #116]	; (8000fe0 <MX_FREERTOS_Init+0x108>)
 8000f6a:	6013      	str	r3, [r2, #0]

  /* creation of kernelLEDTask */
  kernelLEDTaskHandle = osThreadNew(kernel_LED_task, NULL, &kernelLEDTask_attributes);
 8000f6c:	4a1d      	ldr	r2, [pc, #116]	; (8000fe4 <MX_FREERTOS_Init+0x10c>)
 8000f6e:	2100      	movs	r1, #0
 8000f70:	481d      	ldr	r0, [pc, #116]	; (8000fe8 <MX_FREERTOS_Init+0x110>)
 8000f72:	f003 fc35 	bl	80047e0 <osThreadNew>
 8000f76:	4603      	mov	r3, r0
 8000f78:	4a1c      	ldr	r2, [pc, #112]	; (8000fec <MX_FREERTOS_Init+0x114>)
 8000f7a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	08007b98 	.word	0x08007b98
 8000f84:	200000c8 	.word	0x200000c8
 8000f88:	08007bb0 	.word	0x08007bb0
 8000f8c:	200000cc 	.word	0x200000cc
 8000f90:	08007a78 	.word	0x08007a78
 8000f94:	08000ff1 	.word	0x08000ff1
 8000f98:	200000a8 	.word	0x200000a8
 8000f9c:	08007a9c 	.word	0x08007a9c
 8000fa0:	08001001 	.word	0x08001001
 8000fa4:	200000ac 	.word	0x200000ac
 8000fa8:	08007ac0 	.word	0x08007ac0
 8000fac:	080010a9 	.word	0x080010a9
 8000fb0:	200000b0 	.word	0x200000b0
 8000fb4:	08007ae4 	.word	0x08007ae4
 8000fb8:	080011a1 	.word	0x080011a1
 8000fbc:	200000b4 	.word	0x200000b4
 8000fc0:	08007b08 	.word	0x08007b08
 8000fc4:	0800123d 	.word	0x0800123d
 8000fc8:	200000b8 	.word	0x200000b8
 8000fcc:	08007b2c 	.word	0x08007b2c
 8000fd0:	0800124d 	.word	0x0800124d
 8000fd4:	200000bc 	.word	0x200000bc
 8000fd8:	08007b50 	.word	0x08007b50
 8000fdc:	0800125d 	.word	0x0800125d
 8000fe0:	200000c0 	.word	0x200000c0
 8000fe4:	08007b74 	.word	0x08007b74
 8000fe8:	0800126d 	.word	0x0800126d
 8000fec:	200000c4 	.word	0x200000c4

08000ff0 <startDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startDefaultTask */
void startDefaultTask(void *argument)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	f003 fd61 	bl	8004ac0 <osDelay>
 8000ffe:	e7fb      	b.n	8000ff8 <startDefaultTask+0x8>

08001000 <read_CAN_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_CAN_task */
void read_CAN_task(void *argument)
{
 8001000:	b5b0      	push	{r4, r5, r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  while (1) {

    /* Wait for thread flags to be set in the CAN Rx FIFO0 Interrupt Callback */
    osThreadFlagsWait(CAN_READY, osFlagsWaitAll, osWaitForever);
 8001008:	f04f 32ff 	mov.w	r2, #4294967295
 800100c:	2101      	movs	r1, #1
 800100e:	2001      	movs	r0, #1
 8001010:	f003 fcc2 	bl	8004998 <osThreadFlagsWait>

    /* If CAN Rx FIFO0 is not empty */
    if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) != 0) {
 8001014:	2100      	movs	r1, #0
 8001016:	481e      	ldr	r0, [pc, #120]	; (8001090 <read_CAN_task+0x90>)
 8001018:	f001 f9a5 	bl	8002366 <HAL_CAN_GetRxFifoFillLevel>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d031      	beq.n	8001086 <read_CAN_task+0x86>

      /* There are multiple CAN IDs being passed through the filter, pull out the current message */
      rx_status = HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &can_rx_header, current_can_data);
 8001022:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <read_CAN_task+0x94>)
 8001024:	4a1c      	ldr	r2, [pc, #112]	; (8001098 <read_CAN_task+0x98>)
 8001026:	2100      	movs	r1, #0
 8001028:	4819      	ldr	r0, [pc, #100]	; (8001090 <read_CAN_task+0x90>)
 800102a:	f001 f87b 	bl	8002124 <HAL_CAN_GetRxMessage>
 800102e:	4603      	mov	r3, r0
 8001030:	461a      	mov	r2, r3
 8001032:	4b1a      	ldr	r3, [pc, #104]	; (800109c <read_CAN_task+0x9c>)
 8001034:	701a      	strb	r2, [r3, #0]

      /* Check the rx status */
      if (rx_status != HAL_OK) {
 8001036:	4b19      	ldr	r3, [pc, #100]	; (800109c <read_CAN_task+0x9c>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <read_CAN_task+0x42>
	  Error_Handler();
 800103e:	f000 fc21 	bl	8001884 <Error_Handler>
      }

      /* Package into CAN_msg_t */
      current_can_message.header = can_rx_header;
 8001042:	4a17      	ldr	r2, [pc, #92]	; (80010a0 <read_CAN_task+0xa0>)
 8001044:	4b14      	ldr	r3, [pc, #80]	; (8001098 <read_CAN_task+0x98>)
 8001046:	4614      	mov	r4, r2
 8001048:	461d      	mov	r5, r3
 800104a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800104c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800104e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001052:	e884 0007 	stmia.w	r4, {r0, r1, r2}

      /* Copy all bytes of data */
      for (uint8_t i = 0; i < 8; i++) {
 8001056:	2300      	movs	r3, #0
 8001058:	73fb      	strb	r3, [r7, #15]
 800105a:	e00a      	b.n	8001072 <read_CAN_task+0x72>
	current_can_message.data[i] = current_can_data[i];
 800105c:	7bfa      	ldrb	r2, [r7, #15]
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	490c      	ldr	r1, [pc, #48]	; (8001094 <read_CAN_task+0x94>)
 8001062:	5c89      	ldrb	r1, [r1, r2]
 8001064:	4a0e      	ldr	r2, [pc, #56]	; (80010a0 <read_CAN_task+0xa0>)
 8001066:	4413      	add	r3, r2
 8001068:	460a      	mov	r2, r1
 800106a:	771a      	strb	r2, [r3, #28]
      for (uint8_t i = 0; i < 8; i++) {
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	3301      	adds	r3, #1
 8001070:	73fb      	strb	r3, [r7, #15]
 8001072:	7bfb      	ldrb	r3, [r7, #15]
 8001074:	2b07      	cmp	r3, #7
 8001076:	d9f1      	bls.n	800105c <read_CAN_task+0x5c>
      }

      /* Add CAN message onto canMessageQueue */
      osMessageQueuePut(canMessageQueueHandle, &current_can_message, 0U, 0U);
 8001078:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <read_CAN_task+0xa4>)
 800107a:	6818      	ldr	r0, [r3, #0]
 800107c:	2300      	movs	r3, #0
 800107e:	2200      	movs	r2, #0
 8001080:	4907      	ldr	r1, [pc, #28]	; (80010a0 <read_CAN_task+0xa0>)
 8001082:	f003 fdd1 	bl	8004c28 <osMessageQueuePut>
    }

    /* Enables Interrupts */
    HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001086:	2102      	movs	r1, #2
 8001088:	4801      	ldr	r0, [pc, #4]	; (8001090 <read_CAN_task+0x90>)
 800108a:	f001 f993 	bl	80023b4 <HAL_CAN_ActivateNotification>
    osThreadFlagsWait(CAN_READY, osFlagsWaitAll, osWaitForever);
 800108e:	e7bb      	b.n	8001008 <read_CAN_task+0x8>
 8001090:	20000080 	.word	0x20000080
 8001094:	20000230 	.word	0x20000230
 8001098:	20000214 	.word	0x20000214
 800109c:	200000d0 	.word	0x200000d0
 80010a0:	200000d4 	.word	0x200000d4
 80010a4:	200000c8 	.word	0x200000c8

080010a8 <transmit_CAN_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_transmit_CAN_task */
void transmit_CAN_task(void *argument)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08c      	sub	sp, #48	; 0x30
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  osStatus_t queue_status;	/* CAN Message Queue Status */

  /* Infinite loop */
  while (1) {
    /* Retrieve CAN message from queue */
    queue_status = osMessageQueueGet(canMessageQueueHandle, &can_message, NULL, osWaitForever);
 80010b0:	4b37      	ldr	r3, [pc, #220]	; (8001190 <transmit_CAN_task+0xe8>)
 80010b2:	6818      	ldr	r0, [r3, #0]
 80010b4:	f04f 33ff 	mov.w	r3, #4294967295
 80010b8:	2200      	movs	r2, #0
 80010ba:	4936      	ldr	r1, [pc, #216]	; (8001194 <transmit_CAN_task+0xec>)
 80010bc:	f003 fe28 	bl	8004d10 <osMessageQueueGet>
 80010c0:	62b8      	str	r0, [r7, #40]	; 0x28

    /* Yield if nothing on queue */
    if (queue_status != osOK){
 80010c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <transmit_CAN_task+0x24>
      osThreadYield();
 80010c8:	f003 fc34 	bl	8004934 <osThreadYield>
    }

    /* Initialize a CAN buffer */
    uint8_t can_buffer[CAN_BUFFER_LEN] = {0};
 80010cc:	2300      	movs	r3, #0
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	f107 0310 	add.w	r3, r7, #16
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	821a      	strh	r2, [r3, #16]

    /* TIMESTAMP: 8 ASCII characters */
    for (uint8_t i=0; i<CAN_BUFFER_LEN - 14; i++) {
 80010e0:	2300      	movs	r3, #0
 80010e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80010e6:	e00b      	b.n	8001100 <transmit_CAN_task+0x58>
      /* send 'D' as placeholder */
      can_buffer[i] = 'D';
 80010e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80010ec:	3330      	adds	r3, #48	; 0x30
 80010ee:	443b      	add	r3, r7
 80010f0:	2244      	movs	r2, #68	; 0x44
 80010f2:	f803 2c24 	strb.w	r2, [r3, #-36]
    for (uint8_t i=0; i<CAN_BUFFER_LEN - 14; i++) {
 80010f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80010fa:	3301      	adds	r3, #1
 80010fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001100:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001104:	2b07      	cmp	r3, #7
 8001106:	d9ef      	bls.n	80010e8 <transmit_CAN_task+0x40>
    }

    /* CAN MESSAGE IDENTIFIER */
    can_buffer[CAN_BUFFER_LEN - 14] = '#';
 8001108:	2323      	movs	r3, #35	; 0x23
 800110a:	753b      	strb	r3, [r7, #20]

    /* CAN ID: 4 ASCII characters */
    uint8_t id_h = 0xFFUL & (can_message.header.StdId >> 8);
 800110c:	4b21      	ldr	r3, [pc, #132]	; (8001194 <transmit_CAN_task+0xec>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t id_l = 0xFFUL & (can_message.header.StdId);
 8001116:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <transmit_CAN_task+0xec>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    can_buffer[CAN_BUFFER_LEN - 13] = id_h;
 800111e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001122:	757b      	strb	r3, [r7, #21]
    can_buffer[CAN_BUFFER_LEN - 12] = id_l;
 8001124:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001128:	75bb      	strb	r3, [r7, #22]


    /* CAN DATA: 16 ASCII characters */
    for (uint8_t i=0; i<8; i++) {
 800112a:	2300      	movs	r3, #0
 800112c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001130:	e010      	b.n	8001154 <transmit_CAN_task+0xac>
      /* Copy each byte */
      can_buffer[i + CAN_BUFFER_LEN - 11]= can_message.data[i];
 8001132:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8001136:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800113a:	330b      	adds	r3, #11
 800113c:	4915      	ldr	r1, [pc, #84]	; (8001194 <transmit_CAN_task+0xec>)
 800113e:	440a      	add	r2, r1
 8001140:	7f12      	ldrb	r2, [r2, #28]
 8001142:	3330      	adds	r3, #48	; 0x30
 8001144:	443b      	add	r3, r7
 8001146:	f803 2c24 	strb.w	r2, [r3, #-36]
    for (uint8_t i=0; i<8; i++) {
 800114a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800114e:	3301      	adds	r3, #1
 8001150:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001154:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001158:	2b07      	cmp	r3, #7
 800115a:	d9ea      	bls.n	8001132 <transmit_CAN_task+0x8a>
    }


    /* CAN DATA LENGTH: 1 ASCII character */
    uint8_t length = "0123456789ABCDEF"[ can_message.header.DLC & 0xFUL];
 800115c:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <transmit_CAN_task+0xec>)
 800115e:	691b      	ldr	r3, [r3, #16]
 8001160:	f003 030f 	and.w	r3, r3, #15
 8001164:	4a0c      	ldr	r2, [pc, #48]	; (8001198 <transmit_CAN_task+0xf0>)
 8001166:	5cd3      	ldrb	r3, [r2, r3]
 8001168:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    can_buffer[CAN_BUFFER_LEN - 3] = length;
 800116c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001170:	77fb      	strb	r3, [r7, #31]

    /* NEW LINE: 1 ASCII character */
    can_buffer[CAN_BUFFER_LEN - 2] = '\r';
 8001172:	230d      	movs	r3, #13
 8001174:	f887 3020 	strb.w	r3, [r7, #32]

    /* CARRIAGE RETURN: 1 ASCII character */
    can_buffer[CAN_BUFFER_LEN - 1] = '\n';
 8001178:	230a      	movs	r3, #10
 800117a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

    /* Transmit over Radio */
    HAL_UART_Transmit(&huart1, can_buffer, sizeof(can_buffer), 1000);
 800117e:	f107 010c 	add.w	r1, r7, #12
 8001182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001186:	2216      	movs	r2, #22
 8001188:	4804      	ldr	r0, [pc, #16]	; (800119c <transmit_CAN_task+0xf4>)
 800118a:	f003 f921 	bl	80043d0 <HAL_UART_Transmit>
  while (1) {
 800118e:	e78f      	b.n	80010b0 <transmit_CAN_task+0x8>
 8001190:	200000c8 	.word	0x200000c8
 8001194:	200000f8 	.word	0x200000f8
 8001198:	08007a38 	.word	0x08007a38
 800119c:	200002d8 	.word	0x200002d8

080011a0 <read_IMU_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_IMU_task */
void read_IMU_task(void *argument)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  while(1)
  {
    /* Get Data */
    gy_x.float_value = gyro(GYRO_X);
 80011a8:	2000      	movs	r0, #0
 80011aa:	f000 fa11 	bl	80015d0 <gyro>
 80011ae:	4603      	mov	r3, r0
 80011b0:	61fb      	str	r3, [r7, #28]
    gy_y.float_value = gyro(GYRO_Y);
 80011b2:	2001      	movs	r0, #1
 80011b4:	f000 fa0c 	bl	80015d0 <gyro>
 80011b8:	4603      	mov	r3, r0
 80011ba:	61bb      	str	r3, [r7, #24]
    gy_z.float_value = gyro(GYRO_Z);
 80011bc:	2002      	movs	r0, #2
 80011be:	f000 fa07 	bl	80015d0 <gyro>
 80011c2:	4603      	mov	r3, r0
 80011c4:	617b      	str	r3, [r7, #20]
    ax_x.float_value = accel(ACCEL_X);
 80011c6:	2000      	movs	r0, #0
 80011c8:	f000 fa6a 	bl	80016a0 <accel>
 80011cc:	4603      	mov	r3, r0
 80011ce:	613b      	str	r3, [r7, #16]
    ax_y.float_value = accel(ACCEL_Y);
 80011d0:	2001      	movs	r0, #1
 80011d2:	f000 fa65 	bl	80016a0 <accel>
 80011d6:	4603      	mov	r3, r0
 80011d8:	60fb      	str	r3, [r7, #12]
    ax_z.float_value = accel(ACCEL_Z);
 80011da:	2002      	movs	r0, #2
 80011dc:	f000 fa60 	bl	80016a0 <accel>
 80011e0:	4603      	mov	r3, r0
 80011e2:	60bb      	str	r3, [r7, #8]

    /* Add to IMU Queue */
    add_to_IMU_queue("G", "X", gy_x);
 80011e4:	69fa      	ldr	r2, [r7, #28]
 80011e6:	4910      	ldr	r1, [pc, #64]	; (8001228 <read_IMU_task+0x88>)
 80011e8:	4810      	ldr	r0, [pc, #64]	; (800122c <read_IMU_task+0x8c>)
 80011ea:	f000 f853 	bl	8001294 <add_to_IMU_queue>
    add_to_IMU_queue("G", "Y", gy_y);
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	490f      	ldr	r1, [pc, #60]	; (8001230 <read_IMU_task+0x90>)
 80011f2:	480e      	ldr	r0, [pc, #56]	; (800122c <read_IMU_task+0x8c>)
 80011f4:	f000 f84e 	bl	8001294 <add_to_IMU_queue>
    add_to_IMU_queue("G", "Z", gy_z);
 80011f8:	697a      	ldr	r2, [r7, #20]
 80011fa:	490e      	ldr	r1, [pc, #56]	; (8001234 <read_IMU_task+0x94>)
 80011fc:	480b      	ldr	r0, [pc, #44]	; (800122c <read_IMU_task+0x8c>)
 80011fe:	f000 f849 	bl	8001294 <add_to_IMU_queue>
    add_to_IMU_queue("A", "X", ax_x);
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4908      	ldr	r1, [pc, #32]	; (8001228 <read_IMU_task+0x88>)
 8001206:	480c      	ldr	r0, [pc, #48]	; (8001238 <read_IMU_task+0x98>)
 8001208:	f000 f844 	bl	8001294 <add_to_IMU_queue>
    add_to_IMU_queue("A", "Y", ax_y);
 800120c:	68fa      	ldr	r2, [r7, #12]
 800120e:	4908      	ldr	r1, [pc, #32]	; (8001230 <read_IMU_task+0x90>)
 8001210:	4809      	ldr	r0, [pc, #36]	; (8001238 <read_IMU_task+0x98>)
 8001212:	f000 f83f 	bl	8001294 <add_to_IMU_queue>
    add_to_IMU_queue("A", "Z", ax_z);
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	4906      	ldr	r1, [pc, #24]	; (8001234 <read_IMU_task+0x94>)
 800121a:	4807      	ldr	r0, [pc, #28]	; (8001238 <read_IMU_task+0x98>)
 800121c:	f000 f83a 	bl	8001294 <add_to_IMU_queue>

    /* Delay */
    osDelay(READ_IMU_DELAY);
 8001220:	2064      	movs	r0, #100	; 0x64
 8001222:	f003 fc4d 	bl	8004ac0 <osDelay>
    gy_x.float_value = gyro(GYRO_X);
 8001226:	e7bf      	b.n	80011a8 <read_IMU_task+0x8>
 8001228:	08007a4c 	.word	0x08007a4c
 800122c:	08007a50 	.word	0x08007a50
 8001230:	08007a54 	.word	0x08007a54
 8001234:	08007a58 	.word	0x08007a58
 8001238:	08007a5c 	.word	0x08007a5c

0800123c <transmit_IMU_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_transmit_IMU_task */
void transmit_IMU_task(void *argument)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN transmit_IMU_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001244:	2001      	movs	r0, #1
 8001246:	f003 fc3b 	bl	8004ac0 <osDelay>
 800124a:	e7fb      	b.n	8001244 <transmit_IMU_task+0x8>

0800124c <read_GPS_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_GPS_task */
void read_GPS_task(void *argument)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN read_GPS_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001254:	2001      	movs	r0, #1
 8001256:	f003 fc33 	bl	8004ac0 <osDelay>
 800125a:	e7fb      	b.n	8001254 <read_GPS_task+0x8>

0800125c <transmit_GPS_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_transmit_GPS_task */
void transmit_GPS_task(void *argument)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN transmit_GPS_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001264:	2001      	movs	r0, #1
 8001266:	f003 fc2b 	bl	8004ac0 <osDelay>
 800126a:	e7fb      	b.n	8001264 <transmit_GPS_task+0x8>

0800126c <kernel_LED_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_kernel_LED_task */
void kernel_LED_task(void *argument)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  while (1) {

    /* Get the kernel status */
    kernel_status = osKernelGetState();
 8001274:	f003 fa5e 	bl	8004734 <osKernelGetState>
 8001278:	60f8      	str	r0, [r7, #12]

    /* Check if the kernel status is "Running" */
    if (kernel_status == osKernelRunning) {
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2b02      	cmp	r3, #2
 800127e:	d103      	bne.n	8001288 <kernel_LED_task+0x1c>

      /* If running, toggle the LED */
      HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
 8001280:	2102      	movs	r1, #2
 8001282:	4803      	ldr	r0, [pc, #12]	; (8001290 <kernel_LED_task+0x24>)
 8001284:	f001 fb4c 	bl	8002920 <HAL_GPIO_TogglePin>
    }

    /* Delay */
    osDelay(KERNEL_LED_DELAY);
 8001288:	20c8      	movs	r0, #200	; 0xc8
 800128a:	f003 fc19 	bl	8004ac0 <osDelay>
    kernel_status = osKernelGetState();
 800128e:	e7f1      	b.n	8001274 <kernel_LED_task+0x8>
 8001290:	40010800 	.word	0x40010800

08001294 <add_to_IMU_queue>:


/*
 * Stores the data gathered from the IMU into the queue
 */
void add_to_IMU_queue(char* type, char* dimension, union FloatBytes data){
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
    IMU_msg_t imu_message;

    imu_message.imu_type = type[0];
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	753b      	strb	r3, [r7, #20]
    imu_message.dimension = dimension[0];
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	757b      	strb	r3, [r7, #21]
    for (int i = 0; i < 4; i++) {
 80012ac:	2300      	movs	r3, #0
 80012ae:	61fb      	str	r3, [r7, #28]
 80012b0:	e00c      	b.n	80012cc <add_to_IMU_queue+0x38>
        imu_message.data[i] = data.bytes[i];
 80012b2:	1d3a      	adds	r2, r7, #4
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	4413      	add	r3, r2
 80012b8:	7819      	ldrb	r1, [r3, #0]
 80012ba:	f107 0216 	add.w	r2, r7, #22
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	4413      	add	r3, r2
 80012c2:	460a      	mov	r2, r1
 80012c4:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3301      	adds	r3, #1
 80012ca:	61fb      	str	r3, [r7, #28]
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	2b03      	cmp	r3, #3
 80012d0:	ddef      	ble.n	80012b2 <add_to_IMU_queue+0x1e>
    }

    osMessageQueuePut(imuMessageQueueHandle, &imu_message, 0U, 0U);
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <add_to_IMU_queue+0x58>)
 80012d4:	6818      	ldr	r0, [r3, #0]
 80012d6:	f107 0114 	add.w	r1, r7, #20
 80012da:	2300      	movs	r3, #0
 80012dc:	2200      	movs	r2, #0
 80012de:	f003 fca3 	bl	8004c28 <osMessageQueuePut>
}
 80012e2:	bf00      	nop
 80012e4:	3720      	adds	r7, #32
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200000cc 	.word	0x200000cc

080012f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f6:	f107 0310 	add.w	r3, r7, #16
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001304:	4b49      	ldr	r3, [pc, #292]	; (800142c <MX_GPIO_Init+0x13c>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	4a48      	ldr	r2, [pc, #288]	; (800142c <MX_GPIO_Init+0x13c>)
 800130a:	f043 0320 	orr.w	r3, r3, #32
 800130e:	6193      	str	r3, [r2, #24]
 8001310:	4b46      	ldr	r3, [pc, #280]	; (800142c <MX_GPIO_Init+0x13c>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	f003 0320 	and.w	r3, r3, #32
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800131c:	4b43      	ldr	r3, [pc, #268]	; (800142c <MX_GPIO_Init+0x13c>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	4a42      	ldr	r2, [pc, #264]	; (800142c <MX_GPIO_Init+0x13c>)
 8001322:	f043 0310 	orr.w	r3, r3, #16
 8001326:	6193      	str	r3, [r2, #24]
 8001328:	4b40      	ldr	r3, [pc, #256]	; (800142c <MX_GPIO_Init+0x13c>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	f003 0310 	and.w	r3, r3, #16
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001334:	4b3d      	ldr	r3, [pc, #244]	; (800142c <MX_GPIO_Init+0x13c>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	4a3c      	ldr	r2, [pc, #240]	; (800142c <MX_GPIO_Init+0x13c>)
 800133a:	f043 0304 	orr.w	r3, r3, #4
 800133e:	6193      	str	r3, [r2, #24]
 8001340:	4b3a      	ldr	r3, [pc, #232]	; (800142c <MX_GPIO_Init+0x13c>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800134c:	4b37      	ldr	r3, [pc, #220]	; (800142c <MX_GPIO_Init+0x13c>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	4a36      	ldr	r2, [pc, #216]	; (800142c <MX_GPIO_Init+0x13c>)
 8001352:	f043 0308 	orr.w	r3, r3, #8
 8001356:	6193      	str	r3, [r2, #24]
 8001358:	4b34      	ldr	r3, [pc, #208]	; (800142c <MX_GPIO_Init+0x13c>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	f003 0308 	and.w	r3, r3, #8
 8001360:	603b      	str	r3, [r7, #0]
 8001362:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RADIO_GPIO_DIO7_Pin|RADIO_GPIO_DIO9_SLEEP_Pin|RADIO_GPIO_DIO11_Pin|RADIO_GPIO_DIO10_Pin, GPIO_PIN_RESET);
 8001364:	2200      	movs	r2, #0
 8001366:	2178      	movs	r1, #120	; 0x78
 8001368:	4831      	ldr	r0, [pc, #196]	; (8001430 <MX_GPIO_Init+0x140>)
 800136a:	f001 fac1 	bl	80028f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USER_LED_Pin|SDL_CS_Pin, GPIO_PIN_RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	2112      	movs	r1, #18
 8001372:	4830      	ldr	r0, [pc, #192]	; (8001434 <MX_GPIO_Init+0x144>)
 8001374:	f001 fabc 	bl	80028f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RADIO_GPIO_DIO4_Pin|RADIO_GPIO_DIO3_Pin|RADIO_GPIO_DIO2_Pin, GPIO_PIN_SET);
 8001378:	2201      	movs	r2, #1
 800137a:	f24a 0101 	movw	r1, #40961	; 0xa001
 800137e:	482e      	ldr	r0, [pc, #184]	; (8001438 <MX_GPIO_Init+0x148>)
 8001380:	f001 fab6 	bl	80028f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RADIO_GPIO_DIO12_Pin|RADIO_GPIO_DIO6_Pin|RADIO_DIO8_SLEEP_CONTROL_Pin, GPIO_PIN_RESET);
 8001384:	2200      	movs	r2, #0
 8001386:	f245 0102 	movw	r1, #20482	; 0x5002
 800138a:	482b      	ldr	r0, [pc, #172]	; (8001438 <MX_GPIO_Init+0x148>)
 800138c:	f001 fab0 	bl	80028f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RADIO_GPIO_DIO1_Pin|RADIO_GPIO_DIO0_Pin, GPIO_PIN_SET);
 8001390:	2201      	movs	r2, #1
 8001392:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8001396:	4826      	ldr	r0, [pc, #152]	; (8001430 <MX_GPIO_Init+0x140>)
 8001398:	f001 faaa 	bl	80028f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = RADIO_GPIO_DIO7_Pin|RADIO_GPIO_DIO9_SLEEP_Pin|RADIO_GPIO_DIO11_Pin|RADIO_GPIO_DIO10_Pin
 800139c:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80013a0:	613b      	str	r3, [r7, #16]
                          |RADIO_GPIO_DIO1_Pin|RADIO_GPIO_DIO0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a2:	2301      	movs	r3, #1
 80013a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	2302      	movs	r3, #2
 80013ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ae:	f107 0310 	add.w	r3, r7, #16
 80013b2:	4619      	mov	r1, r3
 80013b4:	481e      	ldr	r0, [pc, #120]	; (8001430 <MX_GPIO_Init+0x140>)
 80013b6:	f001 f907 	bl	80025c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USER_LED_Pin|SDL_CS_Pin;
 80013ba:	2312      	movs	r3, #18
 80013bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013be:	2301      	movs	r3, #1
 80013c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2302      	movs	r3, #2
 80013c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ca:	f107 0310 	add.w	r3, r7, #16
 80013ce:	4619      	mov	r1, r3
 80013d0:	4818      	ldr	r0, [pc, #96]	; (8001434 <MX_GPIO_Init+0x144>)
 80013d2:	f001 f8f9 	bl	80025c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RTC_SYNC_Pin|SDL_CD_Pin;
 80013d6:	230c      	movs	r3, #12
 80013d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e2:	f107 0310 	add.w	r3, r7, #16
 80013e6:	4619      	mov	r1, r3
 80013e8:	4812      	ldr	r0, [pc, #72]	; (8001434 <MX_GPIO_Init+0x144>)
 80013ea:	f001 f8ed 	bl	80025c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = RADIO_GPIO_DIO4_Pin|RADIO_GPIO_DIO12_Pin|RADIO_GPIO_DIO6_Pin|RADIO_GPIO_DIO3_Pin
 80013ee:	f24f 0303 	movw	r3, #61443	; 0xf003
 80013f2:	613b      	str	r3, [r7, #16]
                          |RADIO_DIO8_SLEEP_CONTROL_Pin|RADIO_GPIO_DIO2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f4:	2301      	movs	r3, #1
 80013f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fc:	2302      	movs	r3, #2
 80013fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001400:	f107 0310 	add.w	r3, r7, #16
 8001404:	4619      	mov	r1, r3
 8001406:	480c      	ldr	r0, [pc, #48]	; (8001438 <MX_GPIO_Init+0x148>)
 8001408:	f001 f8de 	bl	80025c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800140c:	2304      	movs	r3, #4
 800140e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001418:	f107 0310 	add.w	r3, r7, #16
 800141c:	4619      	mov	r1, r3
 800141e:	4806      	ldr	r0, [pc, #24]	; (8001438 <MX_GPIO_Init+0x148>)
 8001420:	f001 f8d2 	bl	80025c8 <HAL_GPIO_Init>

}
 8001424:	bf00      	nop
 8001426:	3720      	adds	r7, #32
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40021000 	.word	0x40021000
 8001430:	40011000 	.word	0x40011000
 8001434:	40010800 	.word	0x40010800
 8001438:	40010c00 	.word	0x40010c00

0800143c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001440:	4b12      	ldr	r3, [pc, #72]	; (800148c <MX_I2C1_Init+0x50>)
 8001442:	4a13      	ldr	r2, [pc, #76]	; (8001490 <MX_I2C1_Init+0x54>)
 8001444:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001446:	4b11      	ldr	r3, [pc, #68]	; (800148c <MX_I2C1_Init+0x50>)
 8001448:	4a12      	ldr	r2, [pc, #72]	; (8001494 <MX_I2C1_Init+0x58>)
 800144a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800144c:	4b0f      	ldr	r3, [pc, #60]	; (800148c <MX_I2C1_Init+0x50>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001452:	4b0e      	ldr	r3, [pc, #56]	; (800148c <MX_I2C1_Init+0x50>)
 8001454:	2200      	movs	r2, #0
 8001456:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <MX_I2C1_Init+0x50>)
 800145a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800145e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001460:	4b0a      	ldr	r3, [pc, #40]	; (800148c <MX_I2C1_Init+0x50>)
 8001462:	2200      	movs	r2, #0
 8001464:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <MX_I2C1_Init+0x50>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800146c:	4b07      	ldr	r3, [pc, #28]	; (800148c <MX_I2C1_Init+0x50>)
 800146e:	2200      	movs	r2, #0
 8001470:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001472:	4b06      	ldr	r3, [pc, #24]	; (800148c <MX_I2C1_Init+0x50>)
 8001474:	2200      	movs	r2, #0
 8001476:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001478:	4804      	ldr	r0, [pc, #16]	; (800148c <MX_I2C1_Init+0x50>)
 800147a:	f001 fa6b 	bl	8002954 <HAL_I2C_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001484:	f000 f9fe 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}
 800148c:	2000011c 	.word	0x2000011c
 8001490:	40005400 	.word	0x40005400
 8001494:	000186a0 	.word	0x000186a0

08001498 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800149c:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <MX_I2C2_Init+0x50>)
 800149e:	4a13      	ldr	r2, [pc, #76]	; (80014ec <MX_I2C2_Init+0x54>)
 80014a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80014a2:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <MX_I2C2_Init+0x50>)
 80014a4:	4a12      	ldr	r2, [pc, #72]	; (80014f0 <MX_I2C2_Init+0x58>)
 80014a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014a8:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <MX_I2C2_Init+0x50>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <MX_I2C2_Init+0x50>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <MX_I2C2_Init+0x50>)
 80014b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014bc:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <MX_I2C2_Init+0x50>)
 80014be:	2200      	movs	r2, #0
 80014c0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80014c2:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <MX_I2C2_Init+0x50>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014c8:	4b07      	ldr	r3, [pc, #28]	; (80014e8 <MX_I2C2_Init+0x50>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <MX_I2C2_Init+0x50>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014d4:	4804      	ldr	r0, [pc, #16]	; (80014e8 <MX_I2C2_Init+0x50>)
 80014d6:	f001 fa3d 	bl	8002954 <HAL_I2C_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80014e0:	f000 f9d0 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000170 	.word	0x20000170
 80014ec:	40005800 	.word	0x40005800
 80014f0:	000186a0 	.word	0x000186a0

080014f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	; 0x28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 0318 	add.w	r3, r7, #24
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a2b      	ldr	r2, [pc, #172]	; (80015bc <HAL_I2C_MspInit+0xc8>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d124      	bne.n	800155e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001514:	4b2a      	ldr	r3, [pc, #168]	; (80015c0 <HAL_I2C_MspInit+0xcc>)
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	4a29      	ldr	r2, [pc, #164]	; (80015c0 <HAL_I2C_MspInit+0xcc>)
 800151a:	f043 0308 	orr.w	r3, r3, #8
 800151e:	6193      	str	r3, [r2, #24]
 8001520:	4b27      	ldr	r3, [pc, #156]	; (80015c0 <HAL_I2C_MspInit+0xcc>)
 8001522:	699b      	ldr	r3, [r3, #24]
 8001524:	f003 0308 	and.w	r3, r3, #8
 8001528:	617b      	str	r3, [r7, #20]
 800152a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPS_SCL_Pin|GPS_SDA_Pin;
 800152c:	23c0      	movs	r3, #192	; 0xc0
 800152e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001530:	2312      	movs	r3, #18
 8001532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001534:	2303      	movs	r3, #3
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001538:	f107 0318 	add.w	r3, r7, #24
 800153c:	4619      	mov	r1, r3
 800153e:	4821      	ldr	r0, [pc, #132]	; (80015c4 <HAL_I2C_MspInit+0xd0>)
 8001540:	f001 f842 	bl	80025c8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001544:	4b1e      	ldr	r3, [pc, #120]	; (80015c0 <HAL_I2C_MspInit+0xcc>)
 8001546:	69db      	ldr	r3, [r3, #28]
 8001548:	4a1d      	ldr	r2, [pc, #116]	; (80015c0 <HAL_I2C_MspInit+0xcc>)
 800154a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800154e:	61d3      	str	r3, [r2, #28]
 8001550:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <HAL_I2C_MspInit+0xcc>)
 8001552:	69db      	ldr	r3, [r3, #28]
 8001554:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800155c:	e029      	b.n	80015b2 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a19      	ldr	r2, [pc, #100]	; (80015c8 <HAL_I2C_MspInit+0xd4>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d124      	bne.n	80015b2 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001568:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <HAL_I2C_MspInit+0xcc>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	4a14      	ldr	r2, [pc, #80]	; (80015c0 <HAL_I2C_MspInit+0xcc>)
 800156e:	f043 0308 	orr.w	r3, r3, #8
 8001572:	6193      	str	r3, [r2, #24]
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <HAL_I2C_MspInit+0xcc>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	f003 0308 	and.w	r3, r3, #8
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 8001580:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001586:	2312      	movs	r3, #18
 8001588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800158a:	2303      	movs	r3, #3
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158e:	f107 0318 	add.w	r3, r7, #24
 8001592:	4619      	mov	r1, r3
 8001594:	480b      	ldr	r0, [pc, #44]	; (80015c4 <HAL_I2C_MspInit+0xd0>)
 8001596:	f001 f817 	bl	80025c8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800159a:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <HAL_I2C_MspInit+0xcc>)
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	4a08      	ldr	r2, [pc, #32]	; (80015c0 <HAL_I2C_MspInit+0xcc>)
 80015a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015a4:	61d3      	str	r3, [r2, #28]
 80015a6:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <HAL_I2C_MspInit+0xcc>)
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
}
 80015b2:	bf00      	nop
 80015b4:	3728      	adds	r7, #40	; 0x28
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40005400 	.word	0x40005400
 80015c0:	40021000 	.word	0x40021000
 80015c4:	40010c00 	.word	0x40010c00
 80015c8:	40005800 	.word	0x40005800
 80015cc:	00000000 	.word	0x00000000

080015d0 <gyro>:

/* USER CODE BEGIN 1 */


float gyro(enum GyroType type)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af04      	add	r7, sp, #16
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
  int16_t gyro;
  uint8_t OUT_H_G, OUT_L_G;

  /* Goes sequential */
  uint16_t addL = 0x22 + (type * 2);
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	3311      	adds	r3, #17
 80015de:	b29b      	uxth	r3, r3
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	81fb      	strh	r3, [r7, #14]
  uint16_t addH = 0x23 + (type * 2);
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	3323      	adds	r3, #35	; 0x23
 80015ee:	81bb      	strh	r3, [r7, #12]

  /* Read */
  HAL_I2C_Mem_Read(&hi2c1, DEVICE_ADDRESS, addL, 1, &OUT_L_G, 1, 100);
 80015f0:	89fa      	ldrh	r2, [r7, #14]
 80015f2:	2364      	movs	r3, #100	; 0x64
 80015f4:	9302      	str	r3, [sp, #8]
 80015f6:	2301      	movs	r3, #1
 80015f8:	9301      	str	r3, [sp, #4]
 80015fa:	f107 0308 	add.w	r3, r7, #8
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	2301      	movs	r3, #1
 8001602:	21d4      	movs	r1, #212	; 0xd4
 8001604:	4824      	ldr	r0, [pc, #144]	; (8001698 <gyro+0xc8>)
 8001606:	f001 fbe3 	bl	8002dd0 <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Read(&hi2c1, DEVICE_ADDRESS, addH, 1, &OUT_H_G, 1, 100);
 800160a:	89ba      	ldrh	r2, [r7, #12]
 800160c:	2364      	movs	r3, #100	; 0x64
 800160e:	9302      	str	r3, [sp, #8]
 8001610:	2301      	movs	r3, #1
 8001612:	9301      	str	r3, [sp, #4]
 8001614:	f107 0309 	add.w	r3, r7, #9
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	2301      	movs	r3, #1
 800161c:	21d4      	movs	r1, #212	; 0xd4
 800161e:	481e      	ldr	r0, [pc, #120]	; (8001698 <gyro+0xc8>)
 8001620:	f001 fbd6 	bl	8002dd0 <HAL_I2C_Mem_Read>

  /* The value is expressed as a 16-bit word in two’s complement */
  gyro = (OUT_H_G << 8) | (OUT_L_G);
 8001624:	7a7b      	ldrb	r3, [r7, #9]
 8001626:	021b      	lsls	r3, r3, #8
 8001628:	b21a      	sxth	r2, r3
 800162a:	7a3b      	ldrb	r3, [r7, #8]
 800162c:	b21b      	sxth	r3, r3
 800162e:	4313      	orrs	r3, r2
 8001630:	817b      	strh	r3, [r7, #10]
  gyro = (float) gyro / 8.75; /* See data sheet pg10 */
 8001632:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fafa 	bl	8000c30 <__aeabi_i2f>
 800163c:	4603      	mov	r3, r0
 800163e:	4618      	mov	r0, r3
 8001640:	f7fe ff5a 	bl	80004f8 <__aeabi_f2d>
 8001644:	f04f 0200 	mov.w	r2, #0
 8001648:	4b14      	ldr	r3, [pc, #80]	; (800169c <gyro+0xcc>)
 800164a:	f7ff f8d7 	bl	80007fc <__aeabi_ddiv>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	4610      	mov	r0, r2
 8001654:	4619      	mov	r1, r3
 8001656:	f7ff f9b9 	bl	80009cc <__aeabi_d2iz>
 800165a:	4603      	mov	r3, r0
 800165c:	817b      	strh	r3, [r7, #10]

  return (float) gyro * 0.02;
 800165e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff fae4 	bl	8000c30 <__aeabi_i2f>
 8001668:	4603      	mov	r3, r0
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe ff44 	bl	80004f8 <__aeabi_f2d>
 8001670:	a307      	add	r3, pc, #28	; (adr r3, 8001690 <gyro+0xc0>)
 8001672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001676:	f7fe ff97 	bl	80005a8 <__aeabi_dmul>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4610      	mov	r0, r2
 8001680:	4619      	mov	r1, r3
 8001682:	f7ff f9cb 	bl	8000a1c <__aeabi_d2f>
 8001686:	4603      	mov	r3, r0
}
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	47ae147b 	.word	0x47ae147b
 8001694:	3f947ae1 	.word	0x3f947ae1
 8001698:	2000011c 	.word	0x2000011c
 800169c:	40218000 	.word	0x40218000

080016a0 <accel>:

float accel(enum AccelType type)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af04      	add	r7, sp, #16
 80016a6:	4603      	mov	r3, r0
 80016a8:	71fb      	strb	r3, [r7, #7]
  int16_t accel;
  uint8_t OUT_H_A, OUT_L_A;

  /* Goes sequential */
  uint16_t addL = 0x28 + (type * 2);
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	3314      	adds	r3, #20
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	81fb      	strh	r3, [r7, #14]
  uint16_t addH = 0x29 + (type * 2);
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	3329      	adds	r3, #41	; 0x29
 80016be:	81bb      	strh	r3, [r7, #12]

  /* Read */
  HAL_I2C_Mem_Read(&hi2c1, DEVICE_ADDRESS, addL, 1, &OUT_L_A, 1, 100);
 80016c0:	89fa      	ldrh	r2, [r7, #14]
 80016c2:	2364      	movs	r3, #100	; 0x64
 80016c4:	9302      	str	r3, [sp, #8]
 80016c6:	2301      	movs	r3, #1
 80016c8:	9301      	str	r3, [sp, #4]
 80016ca:	f107 0308 	add.w	r3, r7, #8
 80016ce:	9300      	str	r3, [sp, #0]
 80016d0:	2301      	movs	r3, #1
 80016d2:	21d4      	movs	r1, #212	; 0xd4
 80016d4:	481e      	ldr	r0, [pc, #120]	; (8001750 <accel+0xb0>)
 80016d6:	f001 fb7b 	bl	8002dd0 <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Read(&hi2c1, DEVICE_ADDRESS, addH, 1, &OUT_H_A, 1, 100);
 80016da:	89ba      	ldrh	r2, [r7, #12]
 80016dc:	2364      	movs	r3, #100	; 0x64
 80016de:	9302      	str	r3, [sp, #8]
 80016e0:	2301      	movs	r3, #1
 80016e2:	9301      	str	r3, [sp, #4]
 80016e4:	f107 0309 	add.w	r3, r7, #9
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	2301      	movs	r3, #1
 80016ec:	21d4      	movs	r1, #212	; 0xd4
 80016ee:	4818      	ldr	r0, [pc, #96]	; (8001750 <accel+0xb0>)
 80016f0:	f001 fb6e 	bl	8002dd0 <HAL_I2C_Mem_Read>

  /* The value is expressed as a 16-bit word in two’s complement */
  accel = (OUT_H_A << 8) | (OUT_L_A);
 80016f4:	7a7b      	ldrb	r3, [r7, #9]
 80016f6:	021b      	lsls	r3, r3, #8
 80016f8:	b21a      	sxth	r2, r3
 80016fa:	7a3b      	ldrb	r3, [r7, #8]
 80016fc:	b21b      	sxth	r3, r3
 80016fe:	4313      	orrs	r3, r2
 8001700:	817b      	strh	r3, [r7, #10]
  accel = (float) accel * 0.061; /* See data sheet pg10 */
 8001702:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fa92 	bl	8000c30 <__aeabi_i2f>
 800170c:	4603      	mov	r3, r0
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe fef2 	bl	80004f8 <__aeabi_f2d>
 8001714:	a30c      	add	r3, pc, #48	; (adr r3, 8001748 <accel+0xa8>)
 8001716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171a:	f7fe ff45 	bl	80005a8 <__aeabi_dmul>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4610      	mov	r0, r2
 8001724:	4619      	mov	r1, r3
 8001726:	f7ff f951 	bl	80009cc <__aeabi_d2iz>
 800172a:	4603      	mov	r3, r0
 800172c:	817b      	strh	r3, [r7, #10]

  return (float) accel;
 800172e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fa7c 	bl	8000c30 <__aeabi_i2f>
 8001738:	4603      	mov	r3, r0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	f3af 8000 	nop.w
 8001748:	5a1cac08 	.word	0x5a1cac08
 800174c:	3faf3b64 	.word	0x3faf3b64
 8001750:	2000011c 	.word	0x2000011c

08001754 <initIMU>:


void initIMU(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af04      	add	r7, sp, #16
  uint8_t data;

  data = 0x80; // 0b10000000
 800175a:	2380      	movs	r3, #128	; 0x80
 800175c:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(&hi2c1, DEVICE_ADDRESS, 0x10, 1, &data, 1, 100);
 800175e:	2364      	movs	r3, #100	; 0x64
 8001760:	9302      	str	r3, [sp, #8]
 8001762:	2301      	movs	r3, #1
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	1dfb      	adds	r3, r7, #7
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	2301      	movs	r3, #1
 800176c:	2210      	movs	r2, #16
 800176e:	21d4      	movs	r1, #212	; 0xd4
 8001770:	4811      	ldr	r0, [pc, #68]	; (80017b8 <initIMU+0x64>)
 8001772:	f001 fa33 	bl	8002bdc <HAL_I2C_Mem_Write>

  data = 0x80; // 0b10000000
 8001776:	2380      	movs	r3, #128	; 0x80
 8001778:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(&hi2c1, DEVICE_ADDRESS, 0x11, 1, &data, 1, 100);
 800177a:	2364      	movs	r3, #100	; 0x64
 800177c:	9302      	str	r3, [sp, #8]
 800177e:	2301      	movs	r3, #1
 8001780:	9301      	str	r3, [sp, #4]
 8001782:	1dfb      	adds	r3, r7, #7
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	2301      	movs	r3, #1
 8001788:	2211      	movs	r2, #17
 800178a:	21d4      	movs	r1, #212	; 0xd4
 800178c:	480a      	ldr	r0, [pc, #40]	; (80017b8 <initIMU+0x64>)
 800178e:	f001 fa25 	bl	8002bdc <HAL_I2C_Mem_Write>

  data = 0x04; // 0b00000100
 8001792:	2304      	movs	r3, #4
 8001794:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(&hi2c1, DEVICE_ADDRESS, 0x12, 1, &data, 1, 100);
 8001796:	2364      	movs	r3, #100	; 0x64
 8001798:	9302      	str	r3, [sp, #8]
 800179a:	2301      	movs	r3, #1
 800179c:	9301      	str	r3, [sp, #4]
 800179e:	1dfb      	adds	r3, r7, #7
 80017a0:	9300      	str	r3, [sp, #0]
 80017a2:	2301      	movs	r3, #1
 80017a4:	2212      	movs	r2, #18
 80017a6:	21d4      	movs	r1, #212	; 0xd4
 80017a8:	4803      	ldr	r0, [pc, #12]	; (80017b8 <initIMU+0x64>)
 80017aa:	f001 fa17 	bl	8002bdc <HAL_I2C_Mem_Write>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	2000011c 	.word	0x2000011c

080017bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017c0:	f000 fa46 	bl	8001c50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017c4:	f000 f819 	bl	80017fa <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017c8:	f7ff fd92 	bl	80012f0 <MX_GPIO_Init>
  MX_CAN_Init();
 80017cc:	f7ff fa84 	bl	8000cd8 <MX_CAN_Init>
  MX_SPI1_Init();
 80017d0:	f000 f85e 	bl	8001890 <MX_SPI1_Init>
  MX_UART5_Init();
 80017d4:	f000 f92c 	bl	8001a30 <MX_UART5_Init>
  MX_I2C1_Init();
 80017d8:	f7ff fe30 	bl	800143c <MX_I2C1_Init>
  MX_I2C2_Init();
 80017dc:	f7ff fe5c 	bl	8001498 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80017e0:	f000 f950 	bl	8001a84 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  Can_Init();
 80017e4:	f7ff fb5e 	bl	8000ea4 <Can_Init>
  initIMU();
 80017e8:	f7ff ffb4 	bl	8001754 <initIMU>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80017ec:	f002 ff70 	bl	80046d0 <osKernelInitialize>
  MX_FREERTOS_Init();
 80017f0:	f7ff fb72 	bl	8000ed8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80017f4:	f002 ffc0 	bl	8004778 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <main+0x3c>

080017fa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b090      	sub	sp, #64	; 0x40
 80017fe:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001800:	f107 0318 	add.w	r3, r7, #24
 8001804:	2228      	movs	r2, #40	; 0x28
 8001806:	2100      	movs	r1, #0
 8001808:	4618      	mov	r0, r3
 800180a:	f005 ffd7 	bl	80077bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800181c:	2301      	movs	r3, #1
 800181e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001820:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001824:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001826:	2300      	movs	r3, #0
 8001828:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800182a:	2301      	movs	r3, #1
 800182c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800182e:	2302      	movs	r3, #2
 8001830:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001832:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001836:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001838:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800183c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800183e:	f107 0318 	add.w	r3, r7, #24
 8001842:	4618      	mov	r0, r3
 8001844:	f002 f8e0 	bl	8003a08 <HAL_RCC_OscConfig>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800184e:	f000 f819 	bl	8001884 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001852:	230f      	movs	r3, #15
 8001854:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001856:	2302      	movs	r3, #2
 8001858:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800185e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001862:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	2102      	movs	r1, #2
 800186c:	4618      	mov	r0, r3
 800186e:	f002 fb4d 	bl	8003f0c <HAL_RCC_ClockConfig>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001878:	f000 f804 	bl	8001884 <Error_Handler>
  }
}
 800187c:	bf00      	nop
 800187e:	3740      	adds	r7, #64	; 0x40
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001888:	b672      	cpsid	i
}
 800188a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800188c:	e7fe      	b.n	800188c <Error_Handler+0x8>
	...

08001890 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001894:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <MX_SPI1_Init+0x64>)
 8001896:	4a18      	ldr	r2, [pc, #96]	; (80018f8 <MX_SPI1_Init+0x68>)
 8001898:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800189a:	4b16      	ldr	r3, [pc, #88]	; (80018f4 <MX_SPI1_Init+0x64>)
 800189c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018a2:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018ae:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018b4:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018ba:	4b0e      	ldr	r3, [pc, #56]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80018c2:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018c4:	2208      	movs	r2, #8
 80018c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018c8:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018d4:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018dc:	220a      	movs	r2, #10
 80018de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018e0:	4804      	ldr	r0, [pc, #16]	; (80018f4 <MX_SPI1_Init+0x64>)
 80018e2:	f002 fca1 	bl	8004228 <HAL_SPI_Init>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80018ec:	f7ff ffca 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000238 	.word	0x20000238
 80018f8:	40013000 	.word	0x40013000

080018fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b088      	sub	sp, #32
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 0310 	add.w	r3, r7, #16
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a1b      	ldr	r2, [pc, #108]	; (8001984 <HAL_SPI_MspInit+0x88>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d12f      	bne.n	800197c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800191c:	4b1a      	ldr	r3, [pc, #104]	; (8001988 <HAL_SPI_MspInit+0x8c>)
 800191e:	699b      	ldr	r3, [r3, #24]
 8001920:	4a19      	ldr	r2, [pc, #100]	; (8001988 <HAL_SPI_MspInit+0x8c>)
 8001922:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001926:	6193      	str	r3, [r2, #24]
 8001928:	4b17      	ldr	r3, [pc, #92]	; (8001988 <HAL_SPI_MspInit+0x8c>)
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001934:	4b14      	ldr	r3, [pc, #80]	; (8001988 <HAL_SPI_MspInit+0x8c>)
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	4a13      	ldr	r2, [pc, #76]	; (8001988 <HAL_SPI_MspInit+0x8c>)
 800193a:	f043 0304 	orr.w	r3, r3, #4
 800193e:	6193      	str	r3, [r2, #24]
 8001940:	4b11      	ldr	r3, [pc, #68]	; (8001988 <HAL_SPI_MspInit+0x8c>)
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SDL_CLK_Pin|SDL_MOSI_Pin;
 800194c:	23a0      	movs	r3, #160	; 0xa0
 800194e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001950:	2302      	movs	r3, #2
 8001952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001954:	2303      	movs	r3, #3
 8001956:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001958:	f107 0310 	add.w	r3, r7, #16
 800195c:	4619      	mov	r1, r3
 800195e:	480b      	ldr	r0, [pc, #44]	; (800198c <HAL_SPI_MspInit+0x90>)
 8001960:	f000 fe32 	bl	80025c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDL_MISO_Pin;
 8001964:	2340      	movs	r3, #64	; 0x40
 8001966:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SDL_MISO_GPIO_Port, &GPIO_InitStruct);
 8001970:	f107 0310 	add.w	r3, r7, #16
 8001974:	4619      	mov	r1, r3
 8001976:	4805      	ldr	r0, [pc, #20]	; (800198c <HAL_SPI_MspInit+0x90>)
 8001978:	f000 fe26 	bl	80025c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800197c:	bf00      	nop
 800197e:	3720      	adds	r7, #32
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40013000 	.word	0x40013000
 8001988:	40021000 	.word	0x40021000
 800198c:	40010800 	.word	0x40010800

08001990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001996:	4b11      	ldr	r3, [pc, #68]	; (80019dc <HAL_MspInit+0x4c>)
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	4a10      	ldr	r2, [pc, #64]	; (80019dc <HAL_MspInit+0x4c>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6193      	str	r3, [r2, #24]
 80019a2:	4b0e      	ldr	r3, [pc, #56]	; (80019dc <HAL_MspInit+0x4c>)
 80019a4:	699b      	ldr	r3, [r3, #24]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	607b      	str	r3, [r7, #4]
 80019ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ae:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <HAL_MspInit+0x4c>)
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	4a0a      	ldr	r2, [pc, #40]	; (80019dc <HAL_MspInit+0x4c>)
 80019b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b8:	61d3      	str	r3, [r2, #28]
 80019ba:	4b08      	ldr	r3, [pc, #32]	; (80019dc <HAL_MspInit+0x4c>)
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c2:	603b      	str	r3, [r7, #0]
 80019c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019c6:	2200      	movs	r2, #0
 80019c8:	210f      	movs	r1, #15
 80019ca:	f06f 0001 	mvn.w	r0, #1
 80019ce:	f000 fdd2 	bl	8002576 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40021000 	.word	0x40021000

080019e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019e4:	e7fe      	b.n	80019e4 <NMI_Handler+0x4>

080019e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ea:	e7fe      	b.n	80019ea <HardFault_Handler+0x4>

080019ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f0:	e7fe      	b.n	80019f0 <MemManage_Handler+0x4>

080019f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019f2:	b480      	push	{r7}
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019f6:	e7fe      	b.n	80019f6 <BusFault_Handler+0x4>

080019f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019fc:	e7fe      	b.n	80019fc <UsageFault_Handler+0x4>

080019fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr

08001a0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a0e:	f000 f965 	bl	8001cdc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001a12:	f004 feb9 	bl	8006788 <xTaskGetSchedulerState>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d001      	beq.n	8001a20 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001a1c:	f005 fc74 	bl	8007308 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr

08001a30 <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart1;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001a34:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <MX_UART5_Init+0x4c>)
 8001a36:	4a12      	ldr	r2, [pc, #72]	; (8001a80 <MX_UART5_Init+0x50>)
 8001a38:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001a3a:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <MX_UART5_Init+0x4c>)
 8001a3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a40:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001a42:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <MX_UART5_Init+0x4c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001a48:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <MX_UART5_Init+0x4c>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <MX_UART5_Init+0x4c>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001a54:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <MX_UART5_Init+0x4c>)
 8001a56:	220c      	movs	r2, #12
 8001a58:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a5a:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <MX_UART5_Init+0x4c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <MX_UART5_Init+0x4c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001a66:	4805      	ldr	r0, [pc, #20]	; (8001a7c <MX_UART5_Init+0x4c>)
 8001a68:	f002 fc62 	bl	8004330 <HAL_UART_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001a72:	f7ff ff07 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000290 	.word	0x20000290
 8001a80:	40005000 	.word	0x40005000

08001a84 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a88:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <MX_USART1_UART_Init+0x4c>)
 8001a8a:	4a12      	ldr	r2, [pc, #72]	; (8001ad4 <MX_USART1_UART_Init+0x50>)
 8001a8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a8e:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <MX_USART1_UART_Init+0x4c>)
 8001a90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a96:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <MX_USART1_UART_Init+0x4c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <MX_USART1_UART_Init+0x4c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001aa2:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <MX_USART1_UART_Init+0x4c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001aa8:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <MX_USART1_UART_Init+0x4c>)
 8001aaa:	220c      	movs	r2, #12
 8001aac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aae:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <MX_USART1_UART_Init+0x4c>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <MX_USART1_UART_Init+0x4c>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001aba:	4805      	ldr	r0, [pc, #20]	; (8001ad0 <MX_USART1_UART_Init+0x4c>)
 8001abc:	f002 fc38 	bl	8004330 <HAL_UART_Init>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ac6:	f7ff fedd 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	200002d8 	.word	0x200002d8
 8001ad4:	40013800 	.word	0x40013800

08001ad8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08c      	sub	sp, #48	; 0x30
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae0:	f107 0320 	add.w	r3, r7, #32
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	609a      	str	r2, [r3, #8]
 8001aec:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==UART5)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a3e      	ldr	r2, [pc, #248]	; (8001bec <HAL_UART_MspInit+0x114>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d13d      	bne.n	8001b74 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001af8:	4b3d      	ldr	r3, [pc, #244]	; (8001bf0 <HAL_UART_MspInit+0x118>)
 8001afa:	69db      	ldr	r3, [r3, #28]
 8001afc:	4a3c      	ldr	r2, [pc, #240]	; (8001bf0 <HAL_UART_MspInit+0x118>)
 8001afe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b02:	61d3      	str	r3, [r2, #28]
 8001b04:	4b3a      	ldr	r3, [pc, #232]	; (8001bf0 <HAL_UART_MspInit+0x118>)
 8001b06:	69db      	ldr	r3, [r3, #28]
 8001b08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b0c:	61fb      	str	r3, [r7, #28]
 8001b0e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b10:	4b37      	ldr	r3, [pc, #220]	; (8001bf0 <HAL_UART_MspInit+0x118>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	4a36      	ldr	r2, [pc, #216]	; (8001bf0 <HAL_UART_MspInit+0x118>)
 8001b16:	f043 0310 	orr.w	r3, r3, #16
 8001b1a:	6193      	str	r3, [r2, #24]
 8001b1c:	4b34      	ldr	r3, [pc, #208]	; (8001bf0 <HAL_UART_MspInit+0x118>)
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	f003 0310 	and.w	r3, r3, #16
 8001b24:	61bb      	str	r3, [r7, #24]
 8001b26:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b28:	4b31      	ldr	r3, [pc, #196]	; (8001bf0 <HAL_UART_MspInit+0x118>)
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	4a30      	ldr	r2, [pc, #192]	; (8001bf0 <HAL_UART_MspInit+0x118>)
 8001b2e:	f043 0320 	orr.w	r3, r3, #32
 8001b32:	6193      	str	r3, [r2, #24]
 8001b34:	4b2e      	ldr	r3, [pc, #184]	; (8001bf0 <HAL_UART_MspInit+0x118>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	f003 0320 	and.w	r3, r3, #32
 8001b3c:	617b      	str	r3, [r7, #20]
 8001b3e:	697b      	ldr	r3, [r7, #20]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b46:	2302      	movs	r3, #2
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b4e:	f107 0320 	add.w	r3, r7, #32
 8001b52:	4619      	mov	r1, r3
 8001b54:	4827      	ldr	r0, [pc, #156]	; (8001bf4 <HAL_UART_MspInit+0x11c>)
 8001b56:	f000 fd37 	bl	80025c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b5a:	2304      	movs	r3, #4
 8001b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b66:	f107 0320 	add.w	r3, r7, #32
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4822      	ldr	r0, [pc, #136]	; (8001bf8 <HAL_UART_MspInit+0x120>)
 8001b6e:	f000 fd2b 	bl	80025c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001b72:	e036      	b.n	8001be2 <HAL_UART_MspInit+0x10a>
  else if(uartHandle->Instance==USART1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a20      	ldr	r2, [pc, #128]	; (8001bfc <HAL_UART_MspInit+0x124>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d131      	bne.n	8001be2 <HAL_UART_MspInit+0x10a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b7e:	4b1c      	ldr	r3, [pc, #112]	; (8001bf0 <HAL_UART_MspInit+0x118>)
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	4a1b      	ldr	r2, [pc, #108]	; (8001bf0 <HAL_UART_MspInit+0x118>)
 8001b84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b88:	6193      	str	r3, [r2, #24]
 8001b8a:	4b19      	ldr	r3, [pc, #100]	; (8001bf0 <HAL_UART_MspInit+0x118>)
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b92:	613b      	str	r3, [r7, #16]
 8001b94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b96:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <HAL_UART_MspInit+0x118>)
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	4a15      	ldr	r2, [pc, #84]	; (8001bf0 <HAL_UART_MspInit+0x118>)
 8001b9c:	f043 0304 	orr.w	r3, r3, #4
 8001ba0:	6193      	str	r3, [r2, #24]
 8001ba2:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <HAL_UART_MspInit+0x118>)
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	f003 0304 	and.w	r3, r3, #4
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RADIO_TX_Pin;
 8001bae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RADIO_TX_GPIO_Port, &GPIO_InitStruct);
 8001bbc:	f107 0320 	add.w	r3, r7, #32
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	480f      	ldr	r0, [pc, #60]	; (8001c00 <HAL_UART_MspInit+0x128>)
 8001bc4:	f000 fd00 	bl	80025c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RADIO_RX_Pin;
 8001bc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(RADIO_RX_GPIO_Port, &GPIO_InitStruct);
 8001bd6:	f107 0320 	add.w	r3, r7, #32
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4808      	ldr	r0, [pc, #32]	; (8001c00 <HAL_UART_MspInit+0x128>)
 8001bde:	f000 fcf3 	bl	80025c8 <HAL_GPIO_Init>
}
 8001be2:	bf00      	nop
 8001be4:	3730      	adds	r7, #48	; 0x30
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40005000 	.word	0x40005000
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40011000 	.word	0x40011000
 8001bf8:	40011400 	.word	0x40011400
 8001bfc:	40013800 	.word	0x40013800
 8001c00:	40010800 	.word	0x40010800

08001c04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c04:	f7ff ff0e 	bl	8001a24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c08:	480b      	ldr	r0, [pc, #44]	; (8001c38 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c0a:	490c      	ldr	r1, [pc, #48]	; (8001c3c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c0c:	4a0c      	ldr	r2, [pc, #48]	; (8001c40 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c10:	e002      	b.n	8001c18 <LoopCopyDataInit>

08001c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c16:	3304      	adds	r3, #4

08001c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c1c:	d3f9      	bcc.n	8001c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c1e:	4a09      	ldr	r2, [pc, #36]	; (8001c44 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c20:	4c09      	ldr	r4, [pc, #36]	; (8001c48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c24:	e001      	b.n	8001c2a <LoopFillZerobss>

08001c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c28:	3204      	adds	r2, #4

08001c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c2c:	d3fb      	bcc.n	8001c26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c2e:	f005 fe23 	bl	8007878 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c32:	f7ff fdc3 	bl	80017bc <main>
  bx lr
 8001c36:	4770      	bx	lr
  ldr r0, =_sdata
 8001c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c3c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001c40:	08007bfc 	.word	0x08007bfc
  ldr r2, =_sbss
 8001c44:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001c48:	20003264 	.word	0x20003264

08001c4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c4c:	e7fe      	b.n	8001c4c <ADC1_2_IRQHandler>
	...

08001c50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c54:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <HAL_Init+0x28>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a07      	ldr	r2, [pc, #28]	; (8001c78 <HAL_Init+0x28>)
 8001c5a:	f043 0310 	orr.w	r3, r3, #16
 8001c5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c60:	2003      	movs	r0, #3
 8001c62:	f000 fc7d 	bl	8002560 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c66:	200f      	movs	r0, #15
 8001c68:	f000 f808 	bl	8001c7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c6c:	f7ff fe90 	bl	8001990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40022000 	.word	0x40022000

08001c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c84:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <HAL_InitTick+0x54>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <HAL_InitTick+0x58>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 fc87 	bl	80025ae <HAL_SYSTICK_Config>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e00e      	b.n	8001cc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b0f      	cmp	r3, #15
 8001cae:	d80a      	bhi.n	8001cc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb8:	f000 fc5d 	bl	8002576 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cbc:	4a06      	ldr	r2, [pc, #24]	; (8001cd8 <HAL_InitTick+0x5c>)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	e000      	b.n	8001cc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20000000 	.word	0x20000000
 8001cd4:	20000008 	.word	0x20000008
 8001cd8:	20000004 	.word	0x20000004

08001cdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ce0:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <HAL_IncTick+0x1c>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <HAL_IncTick+0x20>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4413      	add	r3, r2
 8001cec:	4a03      	ldr	r2, [pc, #12]	; (8001cfc <HAL_IncTick+0x20>)
 8001cee:	6013      	str	r3, [r2, #0]
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr
 8001cf8:	20000008 	.word	0x20000008
 8001cfc:	20000320 	.word	0x20000320

08001d00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return uwTick;
 8001d04:	4b02      	ldr	r3, [pc, #8]	; (8001d10 <HAL_GetTick+0x10>)
 8001d06:	681b      	ldr	r3, [r3, #0]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr
 8001d10:	20000320 	.word	0x20000320

08001d14 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e0ed      	b.n	8001f02 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d102      	bne.n	8001d38 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff f806 	bl	8000d44 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0201 	orr.w	r2, r2, #1
 8001d46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d48:	f7ff ffda 	bl	8001d00 <HAL_GetTick>
 8001d4c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d4e:	e012      	b.n	8001d76 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d50:	f7ff ffd6 	bl	8001d00 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b0a      	cmp	r3, #10
 8001d5c:	d90b      	bls.n	8001d76 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2205      	movs	r2, #5
 8001d6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e0c5      	b.n	8001f02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0e5      	beq.n	8001d50 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 0202 	bic.w	r2, r2, #2
 8001d92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d94:	f7ff ffb4 	bl	8001d00 <HAL_GetTick>
 8001d98:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d9a:	e012      	b.n	8001dc2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d9c:	f7ff ffb0 	bl	8001d00 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b0a      	cmp	r3, #10
 8001da8:	d90b      	bls.n	8001dc2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2205      	movs	r2, #5
 8001dba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e09f      	b.n	8001f02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1e5      	bne.n	8001d9c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	7e1b      	ldrb	r3, [r3, #24]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d108      	bne.n	8001dea <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	e007      	b.n	8001dfa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001df8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	7e5b      	ldrb	r3, [r3, #25]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d108      	bne.n	8001e14 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	e007      	b.n	8001e24 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e22:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	7e9b      	ldrb	r3, [r3, #26]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d108      	bne.n	8001e3e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0220 	orr.w	r2, r2, #32
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	e007      	b.n	8001e4e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 0220 	bic.w	r2, r2, #32
 8001e4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	7edb      	ldrb	r3, [r3, #27]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d108      	bne.n	8001e68 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 0210 	bic.w	r2, r2, #16
 8001e64:	601a      	str	r2, [r3, #0]
 8001e66:	e007      	b.n	8001e78 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0210 	orr.w	r2, r2, #16
 8001e76:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	7f1b      	ldrb	r3, [r3, #28]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d108      	bne.n	8001e92 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 0208 	orr.w	r2, r2, #8
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	e007      	b.n	8001ea2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0208 	bic.w	r2, r2, #8
 8001ea0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	7f5b      	ldrb	r3, [r3, #29]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d108      	bne.n	8001ebc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f042 0204 	orr.w	r2, r2, #4
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	e007      	b.n	8001ecc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0204 	bic.w	r2, r2, #4
 8001eca:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	ea42 0103 	orr.w	r1, r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	1e5a      	subs	r2, r3, #1
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b087      	sub	sp, #28
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
 8001f12:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f20:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001f22:	7cfb      	ldrb	r3, [r7, #19]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d003      	beq.n	8001f30 <HAL_CAN_ConfigFilter+0x26>
 8001f28:	7cfb      	ldrb	r3, [r7, #19]
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	f040 80aa 	bne.w	8002084 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f36:	f043 0201 	orr.w	r2, r3, #1
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	f003 031f 	and.w	r3, r3, #31
 8001f48:	2201      	movs	r2, #1
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d123      	bne.n	8001fb2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	43db      	mvns	r3, r3
 8001f74:	401a      	ands	r2, r3
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f8c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	3248      	adds	r2, #72	; 0x48
 8001f92:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fa6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fa8:	6979      	ldr	r1, [r7, #20]
 8001faa:	3348      	adds	r3, #72	; 0x48
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	440b      	add	r3, r1
 8001fb0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d122      	bne.n	8002000 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001fda:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	3248      	adds	r2, #72	; 0x48
 8001fe0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ff4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ff6:	6979      	ldr	r1, [r7, #20]
 8001ff8:	3348      	adds	r3, #72	; 0x48
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	440b      	add	r3, r1
 8001ffe:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d109      	bne.n	800201c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	43db      	mvns	r3, r3
 8002012:	401a      	ands	r2, r3
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800201a:	e007      	b.n	800202c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	431a      	orrs	r2, r3
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d109      	bne.n	8002048 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	43db      	mvns	r3, r3
 800203e:	401a      	ands	r2, r3
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002046:	e007      	b.n	8002058 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	431a      	orrs	r2, r3
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d107      	bne.n	8002070 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	431a      	orrs	r2, r3
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002076:	f023 0201 	bic.w	r2, r3, #1
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002080:	2300      	movs	r3, #0
 8002082:	e006      	b.n	8002092 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002088:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
  }
}
 8002092:	4618      	mov	r0, r3
 8002094:	371c      	adds	r7, #28
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr

0800209c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d12e      	bne.n	800210e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2202      	movs	r2, #2
 80020b4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f022 0201 	bic.w	r2, r2, #1
 80020c6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80020c8:	f7ff fe1a 	bl	8001d00 <HAL_GetTick>
 80020cc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80020ce:	e012      	b.n	80020f6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020d0:	f7ff fe16 	bl	8001d00 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b0a      	cmp	r3, #10
 80020dc:	d90b      	bls.n	80020f6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2205      	movs	r2, #5
 80020ee:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e012      	b.n	800211c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1e5      	bne.n	80020d0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800210a:	2300      	movs	r3, #0
 800210c:	e006      	b.n	800211c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
  }
}
 800211c:	4618      	mov	r0, r3
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002124:	b480      	push	{r7}
 8002126:	b087      	sub	sp, #28
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
 8002130:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002138:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800213a:	7dfb      	ldrb	r3, [r7, #23]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d003      	beq.n	8002148 <HAL_CAN_GetRxMessage+0x24>
 8002140:	7dfb      	ldrb	r3, [r7, #23]
 8002142:	2b02      	cmp	r3, #2
 8002144:	f040 8103 	bne.w	800234e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10e      	bne.n	800216c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	2b00      	cmp	r3, #0
 800215a:	d116      	bne.n	800218a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002160:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e0f7      	b.n	800235c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d107      	bne.n	800218a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e0e8      	b.n	800235c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	331b      	adds	r3, #27
 8002192:	011b      	lsls	r3, r3, #4
 8002194:	4413      	add	r3, r2
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0204 	and.w	r2, r3, #4
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10c      	bne.n	80021c2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	331b      	adds	r3, #27
 80021b0:	011b      	lsls	r3, r3, #4
 80021b2:	4413      	add	r3, r2
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	0d5b      	lsrs	r3, r3, #21
 80021b8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	e00b      	b.n	80021da <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	331b      	adds	r3, #27
 80021ca:	011b      	lsls	r3, r3, #4
 80021cc:	4413      	add	r3, r2
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	08db      	lsrs	r3, r3, #3
 80021d2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	331b      	adds	r3, #27
 80021e2:	011b      	lsls	r3, r3, #4
 80021e4:	4413      	add	r3, r2
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0202 	and.w	r2, r3, #2
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	331b      	adds	r3, #27
 80021f8:	011b      	lsls	r3, r3, #4
 80021fa:	4413      	add	r3, r2
 80021fc:	3304      	adds	r3, #4
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0308 	and.w	r3, r3, #8
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2208      	movs	r2, #8
 800220c:	611a      	str	r2, [r3, #16]
 800220e:	e00b      	b.n	8002228 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	331b      	adds	r3, #27
 8002218:	011b      	lsls	r3, r3, #4
 800221a:	4413      	add	r3, r2
 800221c:	3304      	adds	r3, #4
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 020f 	and.w	r2, r3, #15
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	331b      	adds	r3, #27
 8002230:	011b      	lsls	r3, r3, #4
 8002232:	4413      	add	r3, r2
 8002234:	3304      	adds	r3, #4
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	0a1b      	lsrs	r3, r3, #8
 800223a:	b2da      	uxtb	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	331b      	adds	r3, #27
 8002248:	011b      	lsls	r3, r3, #4
 800224a:	4413      	add	r3, r2
 800224c:	3304      	adds	r3, #4
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	0c1b      	lsrs	r3, r3, #16
 8002252:	b29a      	uxth	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	011b      	lsls	r3, r3, #4
 8002260:	4413      	add	r3, r2
 8002262:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	b2da      	uxtb	r2, r3
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	011b      	lsls	r3, r3, #4
 8002276:	4413      	add	r3, r2
 8002278:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	0a1a      	lsrs	r2, r3, #8
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	3301      	adds	r3, #1
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	011b      	lsls	r3, r3, #4
 8002290:	4413      	add	r3, r2
 8002292:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	0c1a      	lsrs	r2, r3, #16
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	3302      	adds	r3, #2
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	011b      	lsls	r3, r3, #4
 80022aa:	4413      	add	r3, r2
 80022ac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	0e1a      	lsrs	r2, r3, #24
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	3303      	adds	r3, #3
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	011b      	lsls	r3, r3, #4
 80022c4:	4413      	add	r3, r2
 80022c6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	3304      	adds	r3, #4
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	011b      	lsls	r3, r3, #4
 80022dc:	4413      	add	r3, r2
 80022de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	0a1a      	lsrs	r2, r3, #8
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	3305      	adds	r3, #5
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	011b      	lsls	r3, r3, #4
 80022f6:	4413      	add	r3, r2
 80022f8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	0c1a      	lsrs	r2, r3, #16
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	3306      	adds	r3, #6
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	4413      	add	r3, r2
 8002312:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	0e1a      	lsrs	r2, r3, #24
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	3307      	adds	r3, #7
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d108      	bne.n	800233a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 0220 	orr.w	r2, r2, #32
 8002336:	60da      	str	r2, [r3, #12]
 8002338:	e007      	b.n	800234a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	691a      	ldr	r2, [r3, #16]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f042 0220 	orr.w	r2, r2, #32
 8002348:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800234a:	2300      	movs	r3, #0
 800234c:	e006      	b.n	800235c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002352:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
  }
}
 800235c:	4618      	mov	r0, r3
 800235e:	371c      	adds	r7, #28
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr

08002366 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8002366:	b480      	push	{r7}
 8002368:	b085      	sub	sp, #20
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
 800236e:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002370:	2300      	movs	r3, #0
 8002372:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 3020 	ldrb.w	r3, [r3, #32]
 800237a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800237c:	7afb      	ldrb	r3, [r7, #11]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d002      	beq.n	8002388 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8002382:	7afb      	ldrb	r3, [r7, #11]
 8002384:	2b02      	cmp	r3, #2
 8002386:	d10f      	bne.n	80023a8 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d106      	bne.n	800239c <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	f003 0303 	and.w	r3, r3, #3
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	e005      	b.n	80023a8 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	f003 0303 	and.w	r3, r3, #3
 80023a6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80023a8:	68fb      	ldr	r3, [r7, #12]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr

080023b4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023c4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80023c6:	7bfb      	ldrb	r3, [r7, #15]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d002      	beq.n	80023d2 <HAL_CAN_ActivateNotification+0x1e>
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d109      	bne.n	80023e6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	6959      	ldr	r1, [r3, #20]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80023e2:	2300      	movs	r3, #0
 80023e4:	e006      	b.n	80023f4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
  }
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3714      	adds	r7, #20
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr
	...

08002400 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <__NVIC_SetPriorityGrouping+0x44>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800241c:	4013      	ands	r3, r2
 800241e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002428:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800242c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002430:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002432:	4a04      	ldr	r2, [pc, #16]	; (8002444 <__NVIC_SetPriorityGrouping+0x44>)
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	60d3      	str	r3, [r2, #12]
}
 8002438:	bf00      	nop
 800243a:	3714      	adds	r7, #20
 800243c:	46bd      	mov	sp, r7
 800243e:	bc80      	pop	{r7}
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	e000ed00 	.word	0xe000ed00

08002448 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800244c:	4b04      	ldr	r3, [pc, #16]	; (8002460 <__NVIC_GetPriorityGrouping+0x18>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	0a1b      	lsrs	r3, r3, #8
 8002452:	f003 0307 	and.w	r3, r3, #7
}
 8002456:	4618      	mov	r0, r3
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	e000ed00 	.word	0xe000ed00

08002464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	6039      	str	r1, [r7, #0]
 800246e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002474:	2b00      	cmp	r3, #0
 8002476:	db0a      	blt.n	800248e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	b2da      	uxtb	r2, r3
 800247c:	490c      	ldr	r1, [pc, #48]	; (80024b0 <__NVIC_SetPriority+0x4c>)
 800247e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002482:	0112      	lsls	r2, r2, #4
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	440b      	add	r3, r1
 8002488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800248c:	e00a      	b.n	80024a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	b2da      	uxtb	r2, r3
 8002492:	4908      	ldr	r1, [pc, #32]	; (80024b4 <__NVIC_SetPriority+0x50>)
 8002494:	79fb      	ldrb	r3, [r7, #7]
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	3b04      	subs	r3, #4
 800249c:	0112      	lsls	r2, r2, #4
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	440b      	add	r3, r1
 80024a2:	761a      	strb	r2, [r3, #24]
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bc80      	pop	{r7}
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	e000e100 	.word	0xe000e100
 80024b4:	e000ed00 	.word	0xe000ed00

080024b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b089      	sub	sp, #36	; 0x24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	f1c3 0307 	rsb	r3, r3, #7
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	bf28      	it	cs
 80024d6:	2304      	movcs	r3, #4
 80024d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	3304      	adds	r3, #4
 80024de:	2b06      	cmp	r3, #6
 80024e0:	d902      	bls.n	80024e8 <NVIC_EncodePriority+0x30>
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	3b03      	subs	r3, #3
 80024e6:	e000      	b.n	80024ea <NVIC_EncodePriority+0x32>
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ec:	f04f 32ff 	mov.w	r2, #4294967295
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43da      	mvns	r2, r3
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	401a      	ands	r2, r3
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002500:	f04f 31ff 	mov.w	r1, #4294967295
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	fa01 f303 	lsl.w	r3, r1, r3
 800250a:	43d9      	mvns	r1, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002510:	4313      	orrs	r3, r2
         );
}
 8002512:	4618      	mov	r0, r3
 8002514:	3724      	adds	r7, #36	; 0x24
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr

0800251c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3b01      	subs	r3, #1
 8002528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800252c:	d301      	bcc.n	8002532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800252e:	2301      	movs	r3, #1
 8002530:	e00f      	b.n	8002552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002532:	4a0a      	ldr	r2, [pc, #40]	; (800255c <SysTick_Config+0x40>)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3b01      	subs	r3, #1
 8002538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800253a:	210f      	movs	r1, #15
 800253c:	f04f 30ff 	mov.w	r0, #4294967295
 8002540:	f7ff ff90 	bl	8002464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002544:	4b05      	ldr	r3, [pc, #20]	; (800255c <SysTick_Config+0x40>)
 8002546:	2200      	movs	r2, #0
 8002548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800254a:	4b04      	ldr	r3, [pc, #16]	; (800255c <SysTick_Config+0x40>)
 800254c:	2207      	movs	r2, #7
 800254e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	e000e010 	.word	0xe000e010

08002560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7ff ff49 	bl	8002400 <__NVIC_SetPriorityGrouping>
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002576:	b580      	push	{r7, lr}
 8002578:	b086      	sub	sp, #24
 800257a:	af00      	add	r7, sp, #0
 800257c:	4603      	mov	r3, r0
 800257e:	60b9      	str	r1, [r7, #8]
 8002580:	607a      	str	r2, [r7, #4]
 8002582:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002588:	f7ff ff5e 	bl	8002448 <__NVIC_GetPriorityGrouping>
 800258c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	68b9      	ldr	r1, [r7, #8]
 8002592:	6978      	ldr	r0, [r7, #20]
 8002594:	f7ff ff90 	bl	80024b8 <NVIC_EncodePriority>
 8002598:	4602      	mov	r2, r0
 800259a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800259e:	4611      	mov	r1, r2
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff ff5f 	bl	8002464 <__NVIC_SetPriority>
}
 80025a6:	bf00      	nop
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b082      	sub	sp, #8
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f7ff ffb0 	bl	800251c <SysTick_Config>
 80025bc:	4603      	mov	r3, r0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
	...

080025c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b08b      	sub	sp, #44	; 0x2c
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025d2:	2300      	movs	r3, #0
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025d6:	2300      	movs	r3, #0
 80025d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025da:	e179      	b.n	80028d0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025dc:	2201      	movs	r2, #1
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	69fa      	ldr	r2, [r7, #28]
 80025ec:	4013      	ands	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	f040 8168 	bne.w	80028ca <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	4a96      	ldr	r2, [pc, #600]	; (8002858 <HAL_GPIO_Init+0x290>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d05e      	beq.n	80026c2 <HAL_GPIO_Init+0xfa>
 8002604:	4a94      	ldr	r2, [pc, #592]	; (8002858 <HAL_GPIO_Init+0x290>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d875      	bhi.n	80026f6 <HAL_GPIO_Init+0x12e>
 800260a:	4a94      	ldr	r2, [pc, #592]	; (800285c <HAL_GPIO_Init+0x294>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d058      	beq.n	80026c2 <HAL_GPIO_Init+0xfa>
 8002610:	4a92      	ldr	r2, [pc, #584]	; (800285c <HAL_GPIO_Init+0x294>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d86f      	bhi.n	80026f6 <HAL_GPIO_Init+0x12e>
 8002616:	4a92      	ldr	r2, [pc, #584]	; (8002860 <HAL_GPIO_Init+0x298>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d052      	beq.n	80026c2 <HAL_GPIO_Init+0xfa>
 800261c:	4a90      	ldr	r2, [pc, #576]	; (8002860 <HAL_GPIO_Init+0x298>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d869      	bhi.n	80026f6 <HAL_GPIO_Init+0x12e>
 8002622:	4a90      	ldr	r2, [pc, #576]	; (8002864 <HAL_GPIO_Init+0x29c>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d04c      	beq.n	80026c2 <HAL_GPIO_Init+0xfa>
 8002628:	4a8e      	ldr	r2, [pc, #568]	; (8002864 <HAL_GPIO_Init+0x29c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d863      	bhi.n	80026f6 <HAL_GPIO_Init+0x12e>
 800262e:	4a8e      	ldr	r2, [pc, #568]	; (8002868 <HAL_GPIO_Init+0x2a0>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d046      	beq.n	80026c2 <HAL_GPIO_Init+0xfa>
 8002634:	4a8c      	ldr	r2, [pc, #560]	; (8002868 <HAL_GPIO_Init+0x2a0>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d85d      	bhi.n	80026f6 <HAL_GPIO_Init+0x12e>
 800263a:	2b12      	cmp	r3, #18
 800263c:	d82a      	bhi.n	8002694 <HAL_GPIO_Init+0xcc>
 800263e:	2b12      	cmp	r3, #18
 8002640:	d859      	bhi.n	80026f6 <HAL_GPIO_Init+0x12e>
 8002642:	a201      	add	r2, pc, #4	; (adr r2, 8002648 <HAL_GPIO_Init+0x80>)
 8002644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002648:	080026c3 	.word	0x080026c3
 800264c:	0800269d 	.word	0x0800269d
 8002650:	080026af 	.word	0x080026af
 8002654:	080026f1 	.word	0x080026f1
 8002658:	080026f7 	.word	0x080026f7
 800265c:	080026f7 	.word	0x080026f7
 8002660:	080026f7 	.word	0x080026f7
 8002664:	080026f7 	.word	0x080026f7
 8002668:	080026f7 	.word	0x080026f7
 800266c:	080026f7 	.word	0x080026f7
 8002670:	080026f7 	.word	0x080026f7
 8002674:	080026f7 	.word	0x080026f7
 8002678:	080026f7 	.word	0x080026f7
 800267c:	080026f7 	.word	0x080026f7
 8002680:	080026f7 	.word	0x080026f7
 8002684:	080026f7 	.word	0x080026f7
 8002688:	080026f7 	.word	0x080026f7
 800268c:	080026a5 	.word	0x080026a5
 8002690:	080026b9 	.word	0x080026b9
 8002694:	4a75      	ldr	r2, [pc, #468]	; (800286c <HAL_GPIO_Init+0x2a4>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d013      	beq.n	80026c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800269a:	e02c      	b.n	80026f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	623b      	str	r3, [r7, #32]
          break;
 80026a2:	e029      	b.n	80026f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	3304      	adds	r3, #4
 80026aa:	623b      	str	r3, [r7, #32]
          break;
 80026ac:	e024      	b.n	80026f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	3308      	adds	r3, #8
 80026b4:	623b      	str	r3, [r7, #32]
          break;
 80026b6:	e01f      	b.n	80026f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	330c      	adds	r3, #12
 80026be:	623b      	str	r3, [r7, #32]
          break;
 80026c0:	e01a      	b.n	80026f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d102      	bne.n	80026d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026ca:	2304      	movs	r3, #4
 80026cc:	623b      	str	r3, [r7, #32]
          break;
 80026ce:	e013      	b.n	80026f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d105      	bne.n	80026e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026d8:	2308      	movs	r3, #8
 80026da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	69fa      	ldr	r2, [r7, #28]
 80026e0:	611a      	str	r2, [r3, #16]
          break;
 80026e2:	e009      	b.n	80026f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026e4:	2308      	movs	r3, #8
 80026e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69fa      	ldr	r2, [r7, #28]
 80026ec:	615a      	str	r2, [r3, #20]
          break;
 80026ee:	e003      	b.n	80026f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026f0:	2300      	movs	r3, #0
 80026f2:	623b      	str	r3, [r7, #32]
          break;
 80026f4:	e000      	b.n	80026f8 <HAL_GPIO_Init+0x130>
          break;
 80026f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	2bff      	cmp	r3, #255	; 0xff
 80026fc:	d801      	bhi.n	8002702 <HAL_GPIO_Init+0x13a>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	e001      	b.n	8002706 <HAL_GPIO_Init+0x13e>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	3304      	adds	r3, #4
 8002706:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	2bff      	cmp	r3, #255	; 0xff
 800270c:	d802      	bhi.n	8002714 <HAL_GPIO_Init+0x14c>
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	e002      	b.n	800271a <HAL_GPIO_Init+0x152>
 8002714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002716:	3b08      	subs	r3, #8
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	210f      	movs	r1, #15
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	fa01 f303 	lsl.w	r3, r1, r3
 8002728:	43db      	mvns	r3, r3
 800272a:	401a      	ands	r2, r3
 800272c:	6a39      	ldr	r1, [r7, #32]
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	fa01 f303 	lsl.w	r3, r1, r3
 8002734:	431a      	orrs	r2, r3
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 80c1 	beq.w	80028ca <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002748:	4b49      	ldr	r3, [pc, #292]	; (8002870 <HAL_GPIO_Init+0x2a8>)
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	4a48      	ldr	r2, [pc, #288]	; (8002870 <HAL_GPIO_Init+0x2a8>)
 800274e:	f043 0301 	orr.w	r3, r3, #1
 8002752:	6193      	str	r3, [r2, #24]
 8002754:	4b46      	ldr	r3, [pc, #280]	; (8002870 <HAL_GPIO_Init+0x2a8>)
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	f003 0301 	and.w	r3, r3, #1
 800275c:	60bb      	str	r3, [r7, #8]
 800275e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002760:	4a44      	ldr	r2, [pc, #272]	; (8002874 <HAL_GPIO_Init+0x2ac>)
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	089b      	lsrs	r3, r3, #2
 8002766:	3302      	adds	r3, #2
 8002768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800276c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	f003 0303 	and.w	r3, r3, #3
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	220f      	movs	r2, #15
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	4013      	ands	r3, r2
 8002782:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a3c      	ldr	r2, [pc, #240]	; (8002878 <HAL_GPIO_Init+0x2b0>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d01f      	beq.n	80027cc <HAL_GPIO_Init+0x204>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a3b      	ldr	r2, [pc, #236]	; (800287c <HAL_GPIO_Init+0x2b4>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d019      	beq.n	80027c8 <HAL_GPIO_Init+0x200>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a3a      	ldr	r2, [pc, #232]	; (8002880 <HAL_GPIO_Init+0x2b8>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d013      	beq.n	80027c4 <HAL_GPIO_Init+0x1fc>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a39      	ldr	r2, [pc, #228]	; (8002884 <HAL_GPIO_Init+0x2bc>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d00d      	beq.n	80027c0 <HAL_GPIO_Init+0x1f8>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a38      	ldr	r2, [pc, #224]	; (8002888 <HAL_GPIO_Init+0x2c0>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d007      	beq.n	80027bc <HAL_GPIO_Init+0x1f4>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a37      	ldr	r2, [pc, #220]	; (800288c <HAL_GPIO_Init+0x2c4>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d101      	bne.n	80027b8 <HAL_GPIO_Init+0x1f0>
 80027b4:	2305      	movs	r3, #5
 80027b6:	e00a      	b.n	80027ce <HAL_GPIO_Init+0x206>
 80027b8:	2306      	movs	r3, #6
 80027ba:	e008      	b.n	80027ce <HAL_GPIO_Init+0x206>
 80027bc:	2304      	movs	r3, #4
 80027be:	e006      	b.n	80027ce <HAL_GPIO_Init+0x206>
 80027c0:	2303      	movs	r3, #3
 80027c2:	e004      	b.n	80027ce <HAL_GPIO_Init+0x206>
 80027c4:	2302      	movs	r3, #2
 80027c6:	e002      	b.n	80027ce <HAL_GPIO_Init+0x206>
 80027c8:	2301      	movs	r3, #1
 80027ca:	e000      	b.n	80027ce <HAL_GPIO_Init+0x206>
 80027cc:	2300      	movs	r3, #0
 80027ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027d0:	f002 0203 	and.w	r2, r2, #3
 80027d4:	0092      	lsls	r2, r2, #2
 80027d6:	4093      	lsls	r3, r2
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	4313      	orrs	r3, r2
 80027dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027de:	4925      	ldr	r1, [pc, #148]	; (8002874 <HAL_GPIO_Init+0x2ac>)
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	089b      	lsrs	r3, r3, #2
 80027e4:	3302      	adds	r3, #2
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d006      	beq.n	8002806 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027f8:	4b25      	ldr	r3, [pc, #148]	; (8002890 <HAL_GPIO_Init+0x2c8>)
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	4924      	ldr	r1, [pc, #144]	; (8002890 <HAL_GPIO_Init+0x2c8>)
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	4313      	orrs	r3, r2
 8002802:	608b      	str	r3, [r1, #8]
 8002804:	e006      	b.n	8002814 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002806:	4b22      	ldr	r3, [pc, #136]	; (8002890 <HAL_GPIO_Init+0x2c8>)
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	43db      	mvns	r3, r3
 800280e:	4920      	ldr	r1, [pc, #128]	; (8002890 <HAL_GPIO_Init+0x2c8>)
 8002810:	4013      	ands	r3, r2
 8002812:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d006      	beq.n	800282e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002820:	4b1b      	ldr	r3, [pc, #108]	; (8002890 <HAL_GPIO_Init+0x2c8>)
 8002822:	68da      	ldr	r2, [r3, #12]
 8002824:	491a      	ldr	r1, [pc, #104]	; (8002890 <HAL_GPIO_Init+0x2c8>)
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	4313      	orrs	r3, r2
 800282a:	60cb      	str	r3, [r1, #12]
 800282c:	e006      	b.n	800283c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800282e:	4b18      	ldr	r3, [pc, #96]	; (8002890 <HAL_GPIO_Init+0x2c8>)
 8002830:	68da      	ldr	r2, [r3, #12]
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	43db      	mvns	r3, r3
 8002836:	4916      	ldr	r1, [pc, #88]	; (8002890 <HAL_GPIO_Init+0x2c8>)
 8002838:	4013      	ands	r3, r2
 800283a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d025      	beq.n	8002894 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002848:	4b11      	ldr	r3, [pc, #68]	; (8002890 <HAL_GPIO_Init+0x2c8>)
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	4910      	ldr	r1, [pc, #64]	; (8002890 <HAL_GPIO_Init+0x2c8>)
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	4313      	orrs	r3, r2
 8002852:	604b      	str	r3, [r1, #4]
 8002854:	e025      	b.n	80028a2 <HAL_GPIO_Init+0x2da>
 8002856:	bf00      	nop
 8002858:	10320000 	.word	0x10320000
 800285c:	10310000 	.word	0x10310000
 8002860:	10220000 	.word	0x10220000
 8002864:	10210000 	.word	0x10210000
 8002868:	10120000 	.word	0x10120000
 800286c:	10110000 	.word	0x10110000
 8002870:	40021000 	.word	0x40021000
 8002874:	40010000 	.word	0x40010000
 8002878:	40010800 	.word	0x40010800
 800287c:	40010c00 	.word	0x40010c00
 8002880:	40011000 	.word	0x40011000
 8002884:	40011400 	.word	0x40011400
 8002888:	40011800 	.word	0x40011800
 800288c:	40011c00 	.word	0x40011c00
 8002890:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002894:	4b15      	ldr	r3, [pc, #84]	; (80028ec <HAL_GPIO_Init+0x324>)
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	43db      	mvns	r3, r3
 800289c:	4913      	ldr	r1, [pc, #76]	; (80028ec <HAL_GPIO_Init+0x324>)
 800289e:	4013      	ands	r3, r2
 80028a0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d006      	beq.n	80028bc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028ae:	4b0f      	ldr	r3, [pc, #60]	; (80028ec <HAL_GPIO_Init+0x324>)
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	490e      	ldr	r1, [pc, #56]	; (80028ec <HAL_GPIO_Init+0x324>)
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	600b      	str	r3, [r1, #0]
 80028ba:	e006      	b.n	80028ca <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028bc:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <HAL_GPIO_Init+0x324>)
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	43db      	mvns	r3, r3
 80028c4:	4909      	ldr	r1, [pc, #36]	; (80028ec <HAL_GPIO_Init+0x324>)
 80028c6:	4013      	ands	r3, r2
 80028c8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	3301      	adds	r3, #1
 80028ce:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	fa22 f303 	lsr.w	r3, r2, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f47f ae7e 	bne.w	80025dc <HAL_GPIO_Init+0x14>
  }
}
 80028e0:	bf00      	nop
 80028e2:	bf00      	nop
 80028e4:	372c      	adds	r7, #44	; 0x2c
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr
 80028ec:	40010400 	.word	0x40010400

080028f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	460b      	mov	r3, r1
 80028fa:	807b      	strh	r3, [r7, #2]
 80028fc:	4613      	mov	r3, r2
 80028fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002900:	787b      	ldrb	r3, [r7, #1]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002906:	887a      	ldrh	r2, [r7, #2]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800290c:	e003      	b.n	8002916 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800290e:	887b      	ldrh	r3, [r7, #2]
 8002910:	041a      	lsls	r2, r3, #16
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	611a      	str	r2, [r3, #16]
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr

08002920 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002932:	887a      	ldrh	r2, [r7, #2]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	4013      	ands	r3, r2
 8002938:	041a      	lsls	r2, r3, #16
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	43d9      	mvns	r1, r3
 800293e:	887b      	ldrh	r3, [r7, #2]
 8002940:	400b      	ands	r3, r1
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	611a      	str	r2, [r3, #16]
}
 8002948:	bf00      	nop
 800294a:	3714      	adds	r7, #20
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr
	...

08002954 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e12b      	b.n	8002bbe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d106      	bne.n	8002980 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7fe fdba 	bl	80014f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2224      	movs	r2, #36	; 0x24
 8002984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0201 	bic.w	r2, r2, #1
 8002996:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029b8:	f001 fbf0 	bl	800419c <HAL_RCC_GetPCLK1Freq>
 80029bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	4a81      	ldr	r2, [pc, #516]	; (8002bc8 <HAL_I2C_Init+0x274>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d807      	bhi.n	80029d8 <HAL_I2C_Init+0x84>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	4a80      	ldr	r2, [pc, #512]	; (8002bcc <HAL_I2C_Init+0x278>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	bf94      	ite	ls
 80029d0:	2301      	movls	r3, #1
 80029d2:	2300      	movhi	r3, #0
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	e006      	b.n	80029e6 <HAL_I2C_Init+0x92>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	4a7d      	ldr	r2, [pc, #500]	; (8002bd0 <HAL_I2C_Init+0x27c>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	bf94      	ite	ls
 80029e0:	2301      	movls	r3, #1
 80029e2:	2300      	movhi	r3, #0
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e0e7      	b.n	8002bbe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	4a78      	ldr	r2, [pc, #480]	; (8002bd4 <HAL_I2C_Init+0x280>)
 80029f2:	fba2 2303 	umull	r2, r3, r2, r3
 80029f6:	0c9b      	lsrs	r3, r3, #18
 80029f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68ba      	ldr	r2, [r7, #8]
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	4a6a      	ldr	r2, [pc, #424]	; (8002bc8 <HAL_I2C_Init+0x274>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d802      	bhi.n	8002a28 <HAL_I2C_Init+0xd4>
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	3301      	adds	r3, #1
 8002a26:	e009      	b.n	8002a3c <HAL_I2C_Init+0xe8>
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a2e:	fb02 f303 	mul.w	r3, r2, r3
 8002a32:	4a69      	ldr	r2, [pc, #420]	; (8002bd8 <HAL_I2C_Init+0x284>)
 8002a34:	fba2 2303 	umull	r2, r3, r2, r3
 8002a38:	099b      	lsrs	r3, r3, #6
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6812      	ldr	r2, [r2, #0]
 8002a40:	430b      	orrs	r3, r1
 8002a42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	495c      	ldr	r1, [pc, #368]	; (8002bc8 <HAL_I2C_Init+0x274>)
 8002a58:	428b      	cmp	r3, r1
 8002a5a:	d819      	bhi.n	8002a90 <HAL_I2C_Init+0x13c>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	1e59      	subs	r1, r3, #1
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a6a:	1c59      	adds	r1, r3, #1
 8002a6c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a70:	400b      	ands	r3, r1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00a      	beq.n	8002a8c <HAL_I2C_Init+0x138>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	1e59      	subs	r1, r3, #1
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a84:	3301      	adds	r3, #1
 8002a86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a8a:	e051      	b.n	8002b30 <HAL_I2C_Init+0x1dc>
 8002a8c:	2304      	movs	r3, #4
 8002a8e:	e04f      	b.n	8002b30 <HAL_I2C_Init+0x1dc>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d111      	bne.n	8002abc <HAL_I2C_Init+0x168>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	1e58      	subs	r0, r3, #1
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6859      	ldr	r1, [r3, #4]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	440b      	add	r3, r1
 8002aa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aaa:	3301      	adds	r3, #1
 8002aac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	bf0c      	ite	eq
 8002ab4:	2301      	moveq	r3, #1
 8002ab6:	2300      	movne	r3, #0
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	e012      	b.n	8002ae2 <HAL_I2C_Init+0x18e>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	1e58      	subs	r0, r3, #1
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6859      	ldr	r1, [r3, #4]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	0099      	lsls	r1, r3, #2
 8002acc:	440b      	add	r3, r1
 8002ace:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	bf0c      	ite	eq
 8002adc:	2301      	moveq	r3, #1
 8002ade:	2300      	movne	r3, #0
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <HAL_I2C_Init+0x196>
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e022      	b.n	8002b30 <HAL_I2C_Init+0x1dc>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10e      	bne.n	8002b10 <HAL_I2C_Init+0x1bc>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	1e58      	subs	r0, r3, #1
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6859      	ldr	r1, [r3, #4]
 8002afa:	460b      	mov	r3, r1
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	440b      	add	r3, r1
 8002b00:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b04:	3301      	adds	r3, #1
 8002b06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b0e:	e00f      	b.n	8002b30 <HAL_I2C_Init+0x1dc>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	1e58      	subs	r0, r3, #1
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6859      	ldr	r1, [r3, #4]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	0099      	lsls	r1, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b26:	3301      	adds	r3, #1
 8002b28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	6809      	ldr	r1, [r1, #0]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	69da      	ldr	r2, [r3, #28]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	430a      	orrs	r2, r1
 8002b52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6911      	ldr	r1, [r2, #16]
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	68d2      	ldr	r2, [r2, #12]
 8002b6a:	4311      	orrs	r1, r2
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	6812      	ldr	r2, [r2, #0]
 8002b70:	430b      	orrs	r3, r1
 8002b72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	695a      	ldr	r2, [r3, #20]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 0201 	orr.w	r2, r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2220      	movs	r2, #32
 8002baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	000186a0 	.word	0x000186a0
 8002bcc:	001e847f 	.word	0x001e847f
 8002bd0:	003d08ff 	.word	0x003d08ff
 8002bd4:	431bde83 	.word	0x431bde83
 8002bd8:	10624dd3 	.word	0x10624dd3

08002bdc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b088      	sub	sp, #32
 8002be0:	af02      	add	r7, sp, #8
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	4608      	mov	r0, r1
 8002be6:	4611      	mov	r1, r2
 8002be8:	461a      	mov	r2, r3
 8002bea:	4603      	mov	r3, r0
 8002bec:	817b      	strh	r3, [r7, #10]
 8002bee:	460b      	mov	r3, r1
 8002bf0:	813b      	strh	r3, [r7, #8]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bf6:	f7ff f883 	bl	8001d00 <HAL_GetTick>
 8002bfa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b20      	cmp	r3, #32
 8002c06:	f040 80d9 	bne.w	8002dbc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	2319      	movs	r3, #25
 8002c10:	2201      	movs	r2, #1
 8002c12:	496d      	ldr	r1, [pc, #436]	; (8002dc8 <HAL_I2C_Mem_Write+0x1ec>)
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f000 fcc1 	bl	800359c <I2C_WaitOnFlagUntilTimeout>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002c20:	2302      	movs	r3, #2
 8002c22:	e0cc      	b.n	8002dbe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d101      	bne.n	8002c32 <HAL_I2C_Mem_Write+0x56>
 8002c2e:	2302      	movs	r3, #2
 8002c30:	e0c5      	b.n	8002dbe <HAL_I2C_Mem_Write+0x1e2>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d007      	beq.n	8002c58 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0201 	orr.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2221      	movs	r2, #33	; 0x21
 8002c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2240      	movs	r2, #64	; 0x40
 8002c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6a3a      	ldr	r2, [r7, #32]
 8002c82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	4a4d      	ldr	r2, [pc, #308]	; (8002dcc <HAL_I2C_Mem_Write+0x1f0>)
 8002c98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c9a:	88f8      	ldrh	r0, [r7, #6]
 8002c9c:	893a      	ldrh	r2, [r7, #8]
 8002c9e:	8979      	ldrh	r1, [r7, #10]
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	9301      	str	r3, [sp, #4]
 8002ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	4603      	mov	r3, r0
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 faf8 	bl	80032a0 <I2C_RequestMemoryWrite>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d052      	beq.n	8002d5c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e081      	b.n	8002dbe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 fd86 	bl	80037d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00d      	beq.n	8002ce6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d107      	bne.n	8002ce2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ce0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e06b      	b.n	8002dbe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	781a      	ldrb	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	1c5a      	adds	r2, r3, #1
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d00:	3b01      	subs	r3, #1
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b04      	cmp	r3, #4
 8002d22:	d11b      	bne.n	8002d5c <HAL_I2C_Mem_Write+0x180>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d017      	beq.n	8002d5c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	781a      	ldrb	r2, [r3, #0]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	1c5a      	adds	r2, r3, #1
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d46:	3b01      	subs	r3, #1
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	3b01      	subs	r3, #1
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1aa      	bne.n	8002cba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f000 fd79 	bl	8003860 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00d      	beq.n	8002d90 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	2b04      	cmp	r3, #4
 8002d7a:	d107      	bne.n	8002d8c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d8a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e016      	b.n	8002dbe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2220      	movs	r2, #32
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002db8:	2300      	movs	r3, #0
 8002dba:	e000      	b.n	8002dbe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002dbc:	2302      	movs	r3, #2
  }
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3718      	adds	r7, #24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	00100002 	.word	0x00100002
 8002dcc:	ffff0000 	.word	0xffff0000

08002dd0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b08c      	sub	sp, #48	; 0x30
 8002dd4:	af02      	add	r7, sp, #8
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	4608      	mov	r0, r1
 8002dda:	4611      	mov	r1, r2
 8002ddc:	461a      	mov	r2, r3
 8002dde:	4603      	mov	r3, r0
 8002de0:	817b      	strh	r3, [r7, #10]
 8002de2:	460b      	mov	r3, r1
 8002de4:	813b      	strh	r3, [r7, #8]
 8002de6:	4613      	mov	r3, r2
 8002de8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dee:	f7fe ff87 	bl	8001d00 <HAL_GetTick>
 8002df2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b20      	cmp	r3, #32
 8002dfe:	f040 8244 	bne.w	800328a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	2319      	movs	r3, #25
 8002e08:	2201      	movs	r2, #1
 8002e0a:	4982      	ldr	r1, [pc, #520]	; (8003014 <HAL_I2C_Mem_Read+0x244>)
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f000 fbc5 	bl	800359c <I2C_WaitOnFlagUntilTimeout>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002e18:	2302      	movs	r3, #2
 8002e1a:	e237      	b.n	800328c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d101      	bne.n	8002e2a <HAL_I2C_Mem_Read+0x5a>
 8002e26:	2302      	movs	r3, #2
 8002e28:	e230      	b.n	800328c <HAL_I2C_Mem_Read+0x4bc>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d007      	beq.n	8002e50 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f042 0201 	orr.w	r2, r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2222      	movs	r2, #34	; 0x22
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2240      	movs	r2, #64	; 0x40
 8002e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2200      	movs	r2, #0
 8002e74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002e80:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	4a62      	ldr	r2, [pc, #392]	; (8003018 <HAL_I2C_Mem_Read+0x248>)
 8002e90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e92:	88f8      	ldrh	r0, [r7, #6]
 8002e94:	893a      	ldrh	r2, [r7, #8]
 8002e96:	8979      	ldrh	r1, [r7, #10]
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	9301      	str	r3, [sp, #4]
 8002e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 fa92 	bl	80033cc <I2C_RequestMemoryRead>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e1ec      	b.n	800328c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d113      	bne.n	8002ee2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61fb      	str	r3, [r7, #28]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	61fb      	str	r3, [r7, #28]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	61fb      	str	r3, [r7, #28]
 8002ece:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	e1c0      	b.n	8003264 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d11e      	bne.n	8002f28 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ef8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002efa:	b672      	cpsid	i
}
 8002efc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002efe:	2300      	movs	r3, #0
 8002f00:	61bb      	str	r3, [r7, #24]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	61bb      	str	r3, [r7, #24]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	61bb      	str	r3, [r7, #24]
 8002f12:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f22:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002f24:	b662      	cpsie	i
}
 8002f26:	e035      	b.n	8002f94 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d11e      	bne.n	8002f6e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f3e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f40:	b672      	cpsid	i
}
 8002f42:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f44:	2300      	movs	r3, #0
 8002f46:	617b      	str	r3, [r7, #20]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	617b      	str	r3, [r7, #20]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	617b      	str	r3, [r7, #20]
 8002f58:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f68:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002f6a:	b662      	cpsie	i
}
 8002f6c:	e012      	b.n	8002f94 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f7c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f7e:	2300      	movs	r3, #0
 8002f80:	613b      	str	r3, [r7, #16]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	613b      	str	r3, [r7, #16]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	613b      	str	r3, [r7, #16]
 8002f92:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002f94:	e166      	b.n	8003264 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f9a:	2b03      	cmp	r3, #3
 8002f9c:	f200 811f 	bhi.w	80031de <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d123      	bne.n	8002ff0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002faa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f000 fc9f 	bl	80038f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e167      	b.n	800328c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	691a      	ldr	r2, [r3, #16]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fce:	1c5a      	adds	r2, r3, #1
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fee:	e139      	b.n	8003264 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d152      	bne.n	800309e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffe:	2200      	movs	r2, #0
 8003000:	4906      	ldr	r1, [pc, #24]	; (800301c <HAL_I2C_Mem_Read+0x24c>)
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f000 faca 	bl	800359c <I2C_WaitOnFlagUntilTimeout>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d008      	beq.n	8003020 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e13c      	b.n	800328c <HAL_I2C_Mem_Read+0x4bc>
 8003012:	bf00      	nop
 8003014:	00100002 	.word	0x00100002
 8003018:	ffff0000 	.word	0xffff0000
 800301c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003020:	b672      	cpsid	i
}
 8003022:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003032:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	691a      	ldr	r2, [r3, #16]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	1c5a      	adds	r2, r3, #1
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003050:	3b01      	subs	r3, #1
 8003052:	b29a      	uxth	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800305c:	b29b      	uxth	r3, r3
 800305e:	3b01      	subs	r3, #1
 8003060:	b29a      	uxth	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003066:	b662      	cpsie	i
}
 8003068:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	691a      	ldr	r2, [r3, #16]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	b2d2      	uxtb	r2, r2
 8003076:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	1c5a      	adds	r2, r3, #1
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003086:	3b01      	subs	r3, #1
 8003088:	b29a      	uxth	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003092:	b29b      	uxth	r3, r3
 8003094:	3b01      	subs	r3, #1
 8003096:	b29a      	uxth	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800309c:	e0e2      	b.n	8003264 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a4:	2200      	movs	r2, #0
 80030a6:	497b      	ldr	r1, [pc, #492]	; (8003294 <HAL_I2C_Mem_Read+0x4c4>)
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f000 fa77 	bl	800359c <I2C_WaitOnFlagUntilTimeout>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e0e9      	b.n	800328c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80030c8:	b672      	cpsid	i
}
 80030ca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	691a      	ldr	r2, [r3, #16]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	1c5a      	adds	r2, r3, #1
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e8:	3b01      	subs	r3, #1
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	3b01      	subs	r3, #1
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80030fe:	4b66      	ldr	r3, [pc, #408]	; (8003298 <HAL_I2C_Mem_Read+0x4c8>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	08db      	lsrs	r3, r3, #3
 8003104:	4a65      	ldr	r2, [pc, #404]	; (800329c <HAL_I2C_Mem_Read+0x4cc>)
 8003106:	fba2 2303 	umull	r2, r3, r2, r3
 800310a:	0a1a      	lsrs	r2, r3, #8
 800310c:	4613      	mov	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	4413      	add	r3, r2
 8003112:	00da      	lsls	r2, r3, #3
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003118:	6a3b      	ldr	r3, [r7, #32]
 800311a:	3b01      	subs	r3, #1
 800311c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d118      	bne.n	8003156 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2220      	movs	r2, #32
 800312e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	f043 0220 	orr.w	r2, r3, #32
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003146:	b662      	cpsie	i
}
 8003148:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e09a      	b.n	800328c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b04      	cmp	r3, #4
 8003162:	d1d9      	bne.n	8003118 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003172:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	691a      	ldr	r2, [r3, #16]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003190:	3b01      	subs	r3, #1
 8003192:	b29a      	uxth	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319c:	b29b      	uxth	r3, r3
 800319e:	3b01      	subs	r3, #1
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80031a6:	b662      	cpsie	i
}
 80031a8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	691a      	ldr	r2, [r3, #16]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	b2d2      	uxtb	r2, r2
 80031b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	1c5a      	adds	r2, r3, #1
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c6:	3b01      	subs	r3, #1
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031dc:	e042      	b.n	8003264 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 fb84 	bl	80038f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e04c      	b.n	800328c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	691a      	ldr	r2, [r3, #16]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fc:	b2d2      	uxtb	r2, r2
 80031fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	1c5a      	adds	r2, r3, #1
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800320e:	3b01      	subs	r3, #1
 8003210:	b29a      	uxth	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800321a:	b29b      	uxth	r3, r3
 800321c:	3b01      	subs	r3, #1
 800321e:	b29a      	uxth	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	f003 0304 	and.w	r3, r3, #4
 800322e:	2b04      	cmp	r3, #4
 8003230:	d118      	bne.n	8003264 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	b2d2      	uxtb	r2, r2
 800323e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324e:	3b01      	subs	r3, #1
 8003250:	b29a      	uxth	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325a:	b29b      	uxth	r3, r3
 800325c:	3b01      	subs	r3, #1
 800325e:	b29a      	uxth	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003268:	2b00      	cmp	r3, #0
 800326a:	f47f ae94 	bne.w	8002f96 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2220      	movs	r2, #32
 8003272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003286:	2300      	movs	r3, #0
 8003288:	e000      	b.n	800328c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800328a:	2302      	movs	r3, #2
  }
}
 800328c:	4618      	mov	r0, r3
 800328e:	3728      	adds	r7, #40	; 0x28
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	00010004 	.word	0x00010004
 8003298:	20000000 	.word	0x20000000
 800329c:	14f8b589 	.word	0x14f8b589

080032a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b088      	sub	sp, #32
 80032a4:	af02      	add	r7, sp, #8
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	4608      	mov	r0, r1
 80032aa:	4611      	mov	r1, r2
 80032ac:	461a      	mov	r2, r3
 80032ae:	4603      	mov	r3, r0
 80032b0:	817b      	strh	r3, [r7, #10]
 80032b2:	460b      	mov	r3, r1
 80032b4:	813b      	strh	r3, [r7, #8]
 80032b6:	4613      	mov	r3, r2
 80032b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	6a3b      	ldr	r3, [r7, #32]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 f960 	bl	800359c <I2C_WaitOnFlagUntilTimeout>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00d      	beq.n	80032fe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032f0:	d103      	bne.n	80032fa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e05f      	b.n	80033be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032fe:	897b      	ldrh	r3, [r7, #10]
 8003300:	b2db      	uxtb	r3, r3
 8003302:	461a      	mov	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800330c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	6a3a      	ldr	r2, [r7, #32]
 8003312:	492d      	ldr	r1, [pc, #180]	; (80033c8 <I2C_RequestMemoryWrite+0x128>)
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 f9bb 	bl	8003690 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e04c      	b.n	80033be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003324:	2300      	movs	r3, #0
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	617b      	str	r3, [r7, #20]
 8003338:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800333a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800333c:	6a39      	ldr	r1, [r7, #32]
 800333e:	68f8      	ldr	r0, [r7, #12]
 8003340:	f000 fa46 	bl	80037d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00d      	beq.n	8003366 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	2b04      	cmp	r3, #4
 8003350:	d107      	bne.n	8003362 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003360:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e02b      	b.n	80033be <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003366:	88fb      	ldrh	r3, [r7, #6]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d105      	bne.n	8003378 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800336c:	893b      	ldrh	r3, [r7, #8]
 800336e:	b2da      	uxtb	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	611a      	str	r2, [r3, #16]
 8003376:	e021      	b.n	80033bc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003378:	893b      	ldrh	r3, [r7, #8]
 800337a:	0a1b      	lsrs	r3, r3, #8
 800337c:	b29b      	uxth	r3, r3
 800337e:	b2da      	uxtb	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003388:	6a39      	ldr	r1, [r7, #32]
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 fa20 	bl	80037d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00d      	beq.n	80033b2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	2b04      	cmp	r3, #4
 800339c:	d107      	bne.n	80033ae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e005      	b.n	80033be <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033b2:	893b      	ldrh	r3, [r7, #8]
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3718      	adds	r7, #24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	00010002 	.word	0x00010002

080033cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b088      	sub	sp, #32
 80033d0:	af02      	add	r7, sp, #8
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	4608      	mov	r0, r1
 80033d6:	4611      	mov	r1, r2
 80033d8:	461a      	mov	r2, r3
 80033da:	4603      	mov	r3, r0
 80033dc:	817b      	strh	r3, [r7, #10]
 80033de:	460b      	mov	r3, r1
 80033e0:	813b      	strh	r3, [r7, #8]
 80033e2:	4613      	mov	r3, r2
 80033e4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033f4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003404:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	2200      	movs	r2, #0
 800340e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 f8c2 	bl	800359c <I2C_WaitOnFlagUntilTimeout>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00d      	beq.n	800343a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003428:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800342c:	d103      	bne.n	8003436 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003434:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e0aa      	b.n	8003590 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800343a:	897b      	ldrh	r3, [r7, #10]
 800343c:	b2db      	uxtb	r3, r3
 800343e:	461a      	mov	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003448:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800344a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344c:	6a3a      	ldr	r2, [r7, #32]
 800344e:	4952      	ldr	r1, [pc, #328]	; (8003598 <I2C_RequestMemoryRead+0x1cc>)
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 f91d 	bl	8003690 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e097      	b.n	8003590 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003460:	2300      	movs	r3, #0
 8003462:	617b      	str	r3, [r7, #20]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	617b      	str	r3, [r7, #20]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	617b      	str	r3, [r7, #20]
 8003474:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003478:	6a39      	ldr	r1, [r7, #32]
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f000 f9a8 	bl	80037d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00d      	beq.n	80034a2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	2b04      	cmp	r3, #4
 800348c:	d107      	bne.n	800349e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800349c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e076      	b.n	8003590 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034a2:	88fb      	ldrh	r3, [r7, #6]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d105      	bne.n	80034b4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034a8:	893b      	ldrh	r3, [r7, #8]
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	611a      	str	r2, [r3, #16]
 80034b2:	e021      	b.n	80034f8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034b4:	893b      	ldrh	r3, [r7, #8]
 80034b6:	0a1b      	lsrs	r3, r3, #8
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c4:	6a39      	ldr	r1, [r7, #32]
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f000 f982 	bl	80037d0 <I2C_WaitOnTXEFlagUntilTimeout>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00d      	beq.n	80034ee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d107      	bne.n	80034ea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e050      	b.n	8003590 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034ee:	893b      	ldrh	r3, [r7, #8]
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034fa:	6a39      	ldr	r1, [r7, #32]
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 f967 	bl	80037d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00d      	beq.n	8003524 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350c:	2b04      	cmp	r3, #4
 800350e:	d107      	bne.n	8003520 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800351e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e035      	b.n	8003590 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003532:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	6a3b      	ldr	r3, [r7, #32]
 800353a:	2200      	movs	r2, #0
 800353c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f000 f82b 	bl	800359c <I2C_WaitOnFlagUntilTimeout>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00d      	beq.n	8003568 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800355a:	d103      	bne.n	8003564 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003562:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e013      	b.n	8003590 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003568:	897b      	ldrh	r3, [r7, #10]
 800356a:	b2db      	uxtb	r3, r3
 800356c:	f043 0301 	orr.w	r3, r3, #1
 8003570:	b2da      	uxtb	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	6a3a      	ldr	r2, [r7, #32]
 800357c:	4906      	ldr	r1, [pc, #24]	; (8003598 <I2C_RequestMemoryRead+0x1cc>)
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 f886 	bl	8003690 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e000      	b.n	8003590 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3718      	adds	r7, #24
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	00010002 	.word	0x00010002

0800359c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	603b      	str	r3, [r7, #0]
 80035a8:	4613      	mov	r3, r2
 80035aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035ac:	e048      	b.n	8003640 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b4:	d044      	beq.n	8003640 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035b6:	f7fe fba3 	bl	8001d00 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	683a      	ldr	r2, [r7, #0]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d302      	bcc.n	80035cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d139      	bne.n	8003640 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	0c1b      	lsrs	r3, r3, #16
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d10d      	bne.n	80035f2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	43da      	mvns	r2, r3
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	4013      	ands	r3, r2
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	bf0c      	ite	eq
 80035e8:	2301      	moveq	r3, #1
 80035ea:	2300      	movne	r3, #0
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	461a      	mov	r2, r3
 80035f0:	e00c      	b.n	800360c <I2C_WaitOnFlagUntilTimeout+0x70>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	43da      	mvns	r2, r3
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	4013      	ands	r3, r2
 80035fe:	b29b      	uxth	r3, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	bf0c      	ite	eq
 8003604:	2301      	moveq	r3, #1
 8003606:	2300      	movne	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	461a      	mov	r2, r3
 800360c:	79fb      	ldrb	r3, [r7, #7]
 800360e:	429a      	cmp	r2, r3
 8003610:	d116      	bne.n	8003640 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2220      	movs	r2, #32
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362c:	f043 0220 	orr.w	r2, r3, #32
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e023      	b.n	8003688 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	0c1b      	lsrs	r3, r3, #16
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b01      	cmp	r3, #1
 8003648:	d10d      	bne.n	8003666 <I2C_WaitOnFlagUntilTimeout+0xca>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	43da      	mvns	r2, r3
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	4013      	ands	r3, r2
 8003656:	b29b      	uxth	r3, r3
 8003658:	2b00      	cmp	r3, #0
 800365a:	bf0c      	ite	eq
 800365c:	2301      	moveq	r3, #1
 800365e:	2300      	movne	r3, #0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	461a      	mov	r2, r3
 8003664:	e00c      	b.n	8003680 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	43da      	mvns	r2, r3
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	4013      	ands	r3, r2
 8003672:	b29b      	uxth	r3, r3
 8003674:	2b00      	cmp	r3, #0
 8003676:	bf0c      	ite	eq
 8003678:	2301      	moveq	r3, #1
 800367a:	2300      	movne	r3, #0
 800367c:	b2db      	uxtb	r3, r3
 800367e:	461a      	mov	r2, r3
 8003680:	79fb      	ldrb	r3, [r7, #7]
 8003682:	429a      	cmp	r2, r3
 8003684:	d093      	beq.n	80035ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
 800369c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800369e:	e071      	b.n	8003784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ae:	d123      	bne.n	80036f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036be:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2220      	movs	r2, #32
 80036d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e4:	f043 0204 	orr.w	r2, r3, #4
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e067      	b.n	80037c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fe:	d041      	beq.n	8003784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003700:	f7fe fafe 	bl	8001d00 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	429a      	cmp	r2, r3
 800370e:	d302      	bcc.n	8003716 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d136      	bne.n	8003784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	0c1b      	lsrs	r3, r3, #16
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b01      	cmp	r3, #1
 800371e:	d10c      	bne.n	800373a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	43da      	mvns	r2, r3
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	4013      	ands	r3, r2
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	bf14      	ite	ne
 8003732:	2301      	movne	r3, #1
 8003734:	2300      	moveq	r3, #0
 8003736:	b2db      	uxtb	r3, r3
 8003738:	e00b      	b.n	8003752 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	43da      	mvns	r2, r3
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	4013      	ands	r3, r2
 8003746:	b29b      	uxth	r3, r3
 8003748:	2b00      	cmp	r3, #0
 800374a:	bf14      	ite	ne
 800374c:	2301      	movne	r3, #1
 800374e:	2300      	moveq	r3, #0
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d016      	beq.n	8003784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2220      	movs	r2, #32
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003770:	f043 0220 	orr.w	r2, r3, #32
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e021      	b.n	80037c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	0c1b      	lsrs	r3, r3, #16
 8003788:	b2db      	uxtb	r3, r3
 800378a:	2b01      	cmp	r3, #1
 800378c:	d10c      	bne.n	80037a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	695b      	ldr	r3, [r3, #20]
 8003794:	43da      	mvns	r2, r3
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	4013      	ands	r3, r2
 800379a:	b29b      	uxth	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	bf14      	ite	ne
 80037a0:	2301      	movne	r3, #1
 80037a2:	2300      	moveq	r3, #0
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	e00b      	b.n	80037c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	43da      	mvns	r2, r3
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	4013      	ands	r3, r2
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	bf14      	ite	ne
 80037ba:	2301      	movne	r3, #1
 80037bc:	2300      	moveq	r3, #0
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f47f af6d 	bne.w	80036a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037dc:	e034      	b.n	8003848 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 f8e3 	bl	80039aa <I2C_IsAcknowledgeFailed>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e034      	b.n	8003858 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f4:	d028      	beq.n	8003848 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f6:	f7fe fa83 	bl	8001d00 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	429a      	cmp	r2, r3
 8003804:	d302      	bcc.n	800380c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d11d      	bne.n	8003848 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	695b      	ldr	r3, [r3, #20]
 8003812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003816:	2b80      	cmp	r3, #128	; 0x80
 8003818:	d016      	beq.n	8003848 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2220      	movs	r2, #32
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003834:	f043 0220 	orr.w	r2, r3, #32
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e007      	b.n	8003858 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003852:	2b80      	cmp	r3, #128	; 0x80
 8003854:	d1c3      	bne.n	80037de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800386c:	e034      	b.n	80038d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 f89b 	bl	80039aa <I2C_IsAcknowledgeFailed>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e034      	b.n	80038e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003884:	d028      	beq.n	80038d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003886:	f7fe fa3b 	bl	8001d00 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	429a      	cmp	r2, r3
 8003894:	d302      	bcc.n	800389c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d11d      	bne.n	80038d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	f003 0304 	and.w	r3, r3, #4
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	d016      	beq.n	80038d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2220      	movs	r2, #32
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c4:	f043 0220 	orr.w	r2, r3, #32
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e007      	b.n	80038e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	f003 0304 	and.w	r3, r3, #4
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d1c3      	bne.n	800386e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038fc:	e049      	b.n	8003992 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	f003 0310 	and.w	r3, r3, #16
 8003908:	2b10      	cmp	r3, #16
 800390a:	d119      	bne.n	8003940 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f06f 0210 	mvn.w	r2, #16
 8003914:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2220      	movs	r2, #32
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e030      	b.n	80039a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003940:	f7fe f9de 	bl	8001d00 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	429a      	cmp	r2, r3
 800394e:	d302      	bcc.n	8003956 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d11d      	bne.n	8003992 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003960:	2b40      	cmp	r3, #64	; 0x40
 8003962:	d016      	beq.n	8003992 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2220      	movs	r2, #32
 800396e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397e:	f043 0220 	orr.w	r2, r3, #32
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e007      	b.n	80039a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399c:	2b40      	cmp	r3, #64	; 0x40
 800399e:	d1ae      	bne.n	80038fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b083      	sub	sp, #12
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039c0:	d11b      	bne.n	80039fa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039ca:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2220      	movs	r2, #32
 80039d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e6:	f043 0204 	orr.w	r2, r3, #4
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e000      	b.n	80039fc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bc80      	pop	{r7}
 8003a04:	4770      	bx	lr
	...

08003a08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e272      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 8087 	beq.w	8003b36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a28:	4b92      	ldr	r3, [pc, #584]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f003 030c 	and.w	r3, r3, #12
 8003a30:	2b04      	cmp	r3, #4
 8003a32:	d00c      	beq.n	8003a4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a34:	4b8f      	ldr	r3, [pc, #572]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f003 030c 	and.w	r3, r3, #12
 8003a3c:	2b08      	cmp	r3, #8
 8003a3e:	d112      	bne.n	8003a66 <HAL_RCC_OscConfig+0x5e>
 8003a40:	4b8c      	ldr	r3, [pc, #560]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a4c:	d10b      	bne.n	8003a66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a4e:	4b89      	ldr	r3, [pc, #548]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d06c      	beq.n	8003b34 <HAL_RCC_OscConfig+0x12c>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d168      	bne.n	8003b34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e24c      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a6e:	d106      	bne.n	8003a7e <HAL_RCC_OscConfig+0x76>
 8003a70:	4b80      	ldr	r3, [pc, #512]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a7f      	ldr	r2, [pc, #508]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003a76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a7a:	6013      	str	r3, [r2, #0]
 8003a7c:	e02e      	b.n	8003adc <HAL_RCC_OscConfig+0xd4>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10c      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x98>
 8003a86:	4b7b      	ldr	r3, [pc, #492]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a7a      	ldr	r2, [pc, #488]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003a8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a90:	6013      	str	r3, [r2, #0]
 8003a92:	4b78      	ldr	r3, [pc, #480]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a77      	ldr	r2, [pc, #476]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003a98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a9c:	6013      	str	r3, [r2, #0]
 8003a9e:	e01d      	b.n	8003adc <HAL_RCC_OscConfig+0xd4>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003aa8:	d10c      	bne.n	8003ac4 <HAL_RCC_OscConfig+0xbc>
 8003aaa:	4b72      	ldr	r3, [pc, #456]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a71      	ldr	r2, [pc, #452]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	4b6f      	ldr	r3, [pc, #444]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a6e      	ldr	r2, [pc, #440]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac0:	6013      	str	r3, [r2, #0]
 8003ac2:	e00b      	b.n	8003adc <HAL_RCC_OscConfig+0xd4>
 8003ac4:	4b6b      	ldr	r3, [pc, #428]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a6a      	ldr	r2, [pc, #424]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ace:	6013      	str	r3, [r2, #0]
 8003ad0:	4b68      	ldr	r3, [pc, #416]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a67      	ldr	r2, [pc, #412]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003ad6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ada:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d013      	beq.n	8003b0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae4:	f7fe f90c 	bl	8001d00 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aec:	f7fe f908 	bl	8001d00 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b64      	cmp	r3, #100	; 0x64
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e200      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003afe:	4b5d      	ldr	r3, [pc, #372]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0f0      	beq.n	8003aec <HAL_RCC_OscConfig+0xe4>
 8003b0a:	e014      	b.n	8003b36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0c:	f7fe f8f8 	bl	8001d00 <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b14:	f7fe f8f4 	bl	8001d00 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b64      	cmp	r3, #100	; 0x64
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e1ec      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b26:	4b53      	ldr	r3, [pc, #332]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1f0      	bne.n	8003b14 <HAL_RCC_OscConfig+0x10c>
 8003b32:	e000      	b.n	8003b36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d063      	beq.n	8003c0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b42:	4b4c      	ldr	r3, [pc, #304]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f003 030c 	and.w	r3, r3, #12
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00b      	beq.n	8003b66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003b4e:	4b49      	ldr	r3, [pc, #292]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f003 030c 	and.w	r3, r3, #12
 8003b56:	2b08      	cmp	r3, #8
 8003b58:	d11c      	bne.n	8003b94 <HAL_RCC_OscConfig+0x18c>
 8003b5a:	4b46      	ldr	r3, [pc, #280]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d116      	bne.n	8003b94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b66:	4b43      	ldr	r3, [pc, #268]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d005      	beq.n	8003b7e <HAL_RCC_OscConfig+0x176>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	691b      	ldr	r3, [r3, #16]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d001      	beq.n	8003b7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e1c0      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b7e:	4b3d      	ldr	r3, [pc, #244]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	4939      	ldr	r1, [pc, #228]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b92:	e03a      	b.n	8003c0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d020      	beq.n	8003bde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b9c:	4b36      	ldr	r3, [pc, #216]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba2:	f7fe f8ad 	bl	8001d00 <HAL_GetTick>
 8003ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba8:	e008      	b.n	8003bbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003baa:	f7fe f8a9 	bl	8001d00 <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d901      	bls.n	8003bbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003bb8:	2303      	movs	r3, #3
 8003bba:	e1a1      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bbc:	4b2d      	ldr	r3, [pc, #180]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0f0      	beq.n	8003baa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc8:	4b2a      	ldr	r3, [pc, #168]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	4927      	ldr	r1, [pc, #156]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	600b      	str	r3, [r1, #0]
 8003bdc:	e015      	b.n	8003c0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bde:	4b26      	ldr	r3, [pc, #152]	; (8003c78 <HAL_RCC_OscConfig+0x270>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be4:	f7fe f88c 	bl	8001d00 <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bec:	f7fe f888 	bl	8001d00 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e180      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bfe:	4b1d      	ldr	r3, [pc, #116]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1f0      	bne.n	8003bec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d03a      	beq.n	8003c8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d019      	beq.n	8003c52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c1e:	4b17      	ldr	r3, [pc, #92]	; (8003c7c <HAL_RCC_OscConfig+0x274>)
 8003c20:	2201      	movs	r2, #1
 8003c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c24:	f7fe f86c 	bl	8001d00 <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c2c:	f7fe f868 	bl	8001d00 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e160      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c3e:	4b0d      	ldr	r3, [pc, #52]	; (8003c74 <HAL_RCC_OscConfig+0x26c>)
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0f0      	beq.n	8003c2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003c4a:	2001      	movs	r0, #1
 8003c4c:	f000 face 	bl	80041ec <RCC_Delay>
 8003c50:	e01c      	b.n	8003c8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c52:	4b0a      	ldr	r3, [pc, #40]	; (8003c7c <HAL_RCC_OscConfig+0x274>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c58:	f7fe f852 	bl	8001d00 <HAL_GetTick>
 8003c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c5e:	e00f      	b.n	8003c80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c60:	f7fe f84e 	bl	8001d00 <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d908      	bls.n	8003c80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e146      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
 8003c72:	bf00      	nop
 8003c74:	40021000 	.word	0x40021000
 8003c78:	42420000 	.word	0x42420000
 8003c7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c80:	4b92      	ldr	r3, [pc, #584]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c84:	f003 0302 	and.w	r3, r3, #2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1e9      	bne.n	8003c60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 80a6 	beq.w	8003de6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c9e:	4b8b      	ldr	r3, [pc, #556]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10d      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003caa:	4b88      	ldr	r3, [pc, #544]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	4a87      	ldr	r2, [pc, #540]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cb4:	61d3      	str	r3, [r2, #28]
 8003cb6:	4b85      	ldr	r3, [pc, #532]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cbe:	60bb      	str	r3, [r7, #8]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc6:	4b82      	ldr	r3, [pc, #520]	; (8003ed0 <HAL_RCC_OscConfig+0x4c8>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d118      	bne.n	8003d04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cd2:	4b7f      	ldr	r3, [pc, #508]	; (8003ed0 <HAL_RCC_OscConfig+0x4c8>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a7e      	ldr	r2, [pc, #504]	; (8003ed0 <HAL_RCC_OscConfig+0x4c8>)
 8003cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cde:	f7fe f80f 	bl	8001d00 <HAL_GetTick>
 8003ce2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ce4:	e008      	b.n	8003cf8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce6:	f7fe f80b 	bl	8001d00 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b64      	cmp	r3, #100	; 0x64
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e103      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cf8:	4b75      	ldr	r3, [pc, #468]	; (8003ed0 <HAL_RCC_OscConfig+0x4c8>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d0f0      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d106      	bne.n	8003d1a <HAL_RCC_OscConfig+0x312>
 8003d0c:	4b6f      	ldr	r3, [pc, #444]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	4a6e      	ldr	r2, [pc, #440]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d12:	f043 0301 	orr.w	r3, r3, #1
 8003d16:	6213      	str	r3, [r2, #32]
 8003d18:	e02d      	b.n	8003d76 <HAL_RCC_OscConfig+0x36e>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10c      	bne.n	8003d3c <HAL_RCC_OscConfig+0x334>
 8003d22:	4b6a      	ldr	r3, [pc, #424]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	4a69      	ldr	r2, [pc, #420]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d28:	f023 0301 	bic.w	r3, r3, #1
 8003d2c:	6213      	str	r3, [r2, #32]
 8003d2e:	4b67      	ldr	r3, [pc, #412]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	4a66      	ldr	r2, [pc, #408]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d34:	f023 0304 	bic.w	r3, r3, #4
 8003d38:	6213      	str	r3, [r2, #32]
 8003d3a:	e01c      	b.n	8003d76 <HAL_RCC_OscConfig+0x36e>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	2b05      	cmp	r3, #5
 8003d42:	d10c      	bne.n	8003d5e <HAL_RCC_OscConfig+0x356>
 8003d44:	4b61      	ldr	r3, [pc, #388]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	4a60      	ldr	r2, [pc, #384]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d4a:	f043 0304 	orr.w	r3, r3, #4
 8003d4e:	6213      	str	r3, [r2, #32]
 8003d50:	4b5e      	ldr	r3, [pc, #376]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	4a5d      	ldr	r2, [pc, #372]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d56:	f043 0301 	orr.w	r3, r3, #1
 8003d5a:	6213      	str	r3, [r2, #32]
 8003d5c:	e00b      	b.n	8003d76 <HAL_RCC_OscConfig+0x36e>
 8003d5e:	4b5b      	ldr	r3, [pc, #364]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	4a5a      	ldr	r2, [pc, #360]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d64:	f023 0301 	bic.w	r3, r3, #1
 8003d68:	6213      	str	r3, [r2, #32]
 8003d6a:	4b58      	ldr	r3, [pc, #352]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	4a57      	ldr	r2, [pc, #348]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d70:	f023 0304 	bic.w	r3, r3, #4
 8003d74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d015      	beq.n	8003daa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d7e:	f7fd ffbf 	bl	8001d00 <HAL_GetTick>
 8003d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d84:	e00a      	b.n	8003d9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d86:	f7fd ffbb 	bl	8001d00 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e0b1      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d9c:	4b4b      	ldr	r3, [pc, #300]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d0ee      	beq.n	8003d86 <HAL_RCC_OscConfig+0x37e>
 8003da8:	e014      	b.n	8003dd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003daa:	f7fd ffa9 	bl	8001d00 <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003db0:	e00a      	b.n	8003dc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003db2:	f7fd ffa5 	bl	8001d00 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e09b      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dc8:	4b40      	ldr	r3, [pc, #256]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1ee      	bne.n	8003db2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003dd4:	7dfb      	ldrb	r3, [r7, #23]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d105      	bne.n	8003de6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dda:	4b3c      	ldr	r3, [pc, #240]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	4a3b      	ldr	r2, [pc, #236]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003de0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003de4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 8087 	beq.w	8003efe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003df0:	4b36      	ldr	r3, [pc, #216]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f003 030c 	and.w	r3, r3, #12
 8003df8:	2b08      	cmp	r3, #8
 8003dfa:	d061      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	69db      	ldr	r3, [r3, #28]
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d146      	bne.n	8003e92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e04:	4b33      	ldr	r3, [pc, #204]	; (8003ed4 <HAL_RCC_OscConfig+0x4cc>)
 8003e06:	2200      	movs	r2, #0
 8003e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e0a:	f7fd ff79 	bl	8001d00 <HAL_GetTick>
 8003e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e10:	e008      	b.n	8003e24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e12:	f7fd ff75 	bl	8001d00 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d901      	bls.n	8003e24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e06d      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e24:	4b29      	ldr	r3, [pc, #164]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1f0      	bne.n	8003e12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e38:	d108      	bne.n	8003e4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003e3a:	4b24      	ldr	r3, [pc, #144]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	4921      	ldr	r1, [pc, #132]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e4c:	4b1f      	ldr	r3, [pc, #124]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a19      	ldr	r1, [r3, #32]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5c:	430b      	orrs	r3, r1
 8003e5e:	491b      	ldr	r1, [pc, #108]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e64:	4b1b      	ldr	r3, [pc, #108]	; (8003ed4 <HAL_RCC_OscConfig+0x4cc>)
 8003e66:	2201      	movs	r2, #1
 8003e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e6a:	f7fd ff49 	bl	8001d00 <HAL_GetTick>
 8003e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e70:	e008      	b.n	8003e84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e72:	f7fd ff45 	bl	8001d00 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d901      	bls.n	8003e84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e03d      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e84:	4b11      	ldr	r3, [pc, #68]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0f0      	beq.n	8003e72 <HAL_RCC_OscConfig+0x46a>
 8003e90:	e035      	b.n	8003efe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e92:	4b10      	ldr	r3, [pc, #64]	; (8003ed4 <HAL_RCC_OscConfig+0x4cc>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e98:	f7fd ff32 	bl	8001d00 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea0:	f7fd ff2e 	bl	8001d00 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e026      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eb2:	4b06      	ldr	r3, [pc, #24]	; (8003ecc <HAL_RCC_OscConfig+0x4c4>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1f0      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x498>
 8003ebe:	e01e      	b.n	8003efe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	69db      	ldr	r3, [r3, #28]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d107      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e019      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	40007000 	.word	0x40007000
 8003ed4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ed8:	4b0b      	ldr	r3, [pc, #44]	; (8003f08 <HAL_RCC_OscConfig+0x500>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d106      	bne.n	8003efa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d001      	beq.n	8003efe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e000      	b.n	8003f00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3718      	adds	r7, #24
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40021000 	.word	0x40021000

08003f0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e0d0      	b.n	80040c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f20:	4b6a      	ldr	r3, [pc, #424]	; (80040cc <HAL_RCC_ClockConfig+0x1c0>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0307 	and.w	r3, r3, #7
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d910      	bls.n	8003f50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f2e:	4b67      	ldr	r3, [pc, #412]	; (80040cc <HAL_RCC_ClockConfig+0x1c0>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f023 0207 	bic.w	r2, r3, #7
 8003f36:	4965      	ldr	r1, [pc, #404]	; (80040cc <HAL_RCC_ClockConfig+0x1c0>)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f3e:	4b63      	ldr	r3, [pc, #396]	; (80040cc <HAL_RCC_ClockConfig+0x1c0>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0307 	and.w	r3, r3, #7
 8003f46:	683a      	ldr	r2, [r7, #0]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d001      	beq.n	8003f50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e0b8      	b.n	80040c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d020      	beq.n	8003f9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d005      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f68:	4b59      	ldr	r3, [pc, #356]	; (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	4a58      	ldr	r2, [pc, #352]	; (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0308 	and.w	r3, r3, #8
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d005      	beq.n	8003f8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f80:	4b53      	ldr	r3, [pc, #332]	; (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	4a52      	ldr	r2, [pc, #328]	; (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003f8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f8c:	4b50      	ldr	r3, [pc, #320]	; (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	494d      	ldr	r1, [pc, #308]	; (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d040      	beq.n	800402c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d107      	bne.n	8003fc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fb2:	4b47      	ldr	r3, [pc, #284]	; (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d115      	bne.n	8003fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e07f      	b.n	80040c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d107      	bne.n	8003fda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fca:	4b41      	ldr	r3, [pc, #260]	; (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d109      	bne.n	8003fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e073      	b.n	80040c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fda:	4b3d      	ldr	r3, [pc, #244]	; (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e06b      	b.n	80040c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fea:	4b39      	ldr	r3, [pc, #228]	; (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f023 0203 	bic.w	r2, r3, #3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	4936      	ldr	r1, [pc, #216]	; (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ffc:	f7fd fe80 	bl	8001d00 <HAL_GetTick>
 8004000:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004002:	e00a      	b.n	800401a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004004:	f7fd fe7c 	bl	8001d00 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004012:	4293      	cmp	r3, r2
 8004014:	d901      	bls.n	800401a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e053      	b.n	80040c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800401a:	4b2d      	ldr	r3, [pc, #180]	; (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f003 020c 	and.w	r2, r3, #12
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	429a      	cmp	r2, r3
 800402a:	d1eb      	bne.n	8004004 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800402c:	4b27      	ldr	r3, [pc, #156]	; (80040cc <HAL_RCC_ClockConfig+0x1c0>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	429a      	cmp	r2, r3
 8004038:	d210      	bcs.n	800405c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800403a:	4b24      	ldr	r3, [pc, #144]	; (80040cc <HAL_RCC_ClockConfig+0x1c0>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f023 0207 	bic.w	r2, r3, #7
 8004042:	4922      	ldr	r1, [pc, #136]	; (80040cc <HAL_RCC_ClockConfig+0x1c0>)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	4313      	orrs	r3, r2
 8004048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800404a:	4b20      	ldr	r3, [pc, #128]	; (80040cc <HAL_RCC_ClockConfig+0x1c0>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0307 	and.w	r3, r3, #7
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	429a      	cmp	r2, r3
 8004056:	d001      	beq.n	800405c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e032      	b.n	80040c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	2b00      	cmp	r3, #0
 8004066:	d008      	beq.n	800407a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004068:	4b19      	ldr	r3, [pc, #100]	; (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	4916      	ldr	r1, [pc, #88]	; (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004076:	4313      	orrs	r3, r2
 8004078:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0308 	and.w	r3, r3, #8
 8004082:	2b00      	cmp	r3, #0
 8004084:	d009      	beq.n	800409a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004086:	4b12      	ldr	r3, [pc, #72]	; (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	490e      	ldr	r1, [pc, #56]	; (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004096:	4313      	orrs	r3, r2
 8004098:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800409a:	f000 f821 	bl	80040e0 <HAL_RCC_GetSysClockFreq>
 800409e:	4602      	mov	r2, r0
 80040a0:	4b0b      	ldr	r3, [pc, #44]	; (80040d0 <HAL_RCC_ClockConfig+0x1c4>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	091b      	lsrs	r3, r3, #4
 80040a6:	f003 030f 	and.w	r3, r3, #15
 80040aa:	490a      	ldr	r1, [pc, #40]	; (80040d4 <HAL_RCC_ClockConfig+0x1c8>)
 80040ac:	5ccb      	ldrb	r3, [r1, r3]
 80040ae:	fa22 f303 	lsr.w	r3, r2, r3
 80040b2:	4a09      	ldr	r2, [pc, #36]	; (80040d8 <HAL_RCC_ClockConfig+0x1cc>)
 80040b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80040b6:	4b09      	ldr	r3, [pc, #36]	; (80040dc <HAL_RCC_ClockConfig+0x1d0>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7fd fdde 	bl	8001c7c <HAL_InitTick>

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	40022000 	.word	0x40022000
 80040d0:	40021000 	.word	0x40021000
 80040d4:	08007bc8 	.word	0x08007bc8
 80040d8:	20000000 	.word	0x20000000
 80040dc:	20000004 	.word	0x20000004

080040e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b087      	sub	sp, #28
 80040e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	60fb      	str	r3, [r7, #12]
 80040ea:	2300      	movs	r3, #0
 80040ec:	60bb      	str	r3, [r7, #8]
 80040ee:	2300      	movs	r3, #0
 80040f0:	617b      	str	r3, [r7, #20]
 80040f2:	2300      	movs	r3, #0
 80040f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80040f6:	2300      	movs	r3, #0
 80040f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80040fa:	4b1e      	ldr	r3, [pc, #120]	; (8004174 <HAL_RCC_GetSysClockFreq+0x94>)
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f003 030c 	and.w	r3, r3, #12
 8004106:	2b04      	cmp	r3, #4
 8004108:	d002      	beq.n	8004110 <HAL_RCC_GetSysClockFreq+0x30>
 800410a:	2b08      	cmp	r3, #8
 800410c:	d003      	beq.n	8004116 <HAL_RCC_GetSysClockFreq+0x36>
 800410e:	e027      	b.n	8004160 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004110:	4b19      	ldr	r3, [pc, #100]	; (8004178 <HAL_RCC_GetSysClockFreq+0x98>)
 8004112:	613b      	str	r3, [r7, #16]
      break;
 8004114:	e027      	b.n	8004166 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	0c9b      	lsrs	r3, r3, #18
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	4a17      	ldr	r2, [pc, #92]	; (800417c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004120:	5cd3      	ldrb	r3, [r2, r3]
 8004122:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d010      	beq.n	8004150 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800412e:	4b11      	ldr	r3, [pc, #68]	; (8004174 <HAL_RCC_GetSysClockFreq+0x94>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	0c5b      	lsrs	r3, r3, #17
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	4a11      	ldr	r2, [pc, #68]	; (8004180 <HAL_RCC_GetSysClockFreq+0xa0>)
 800413a:	5cd3      	ldrb	r3, [r2, r3]
 800413c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a0d      	ldr	r2, [pc, #52]	; (8004178 <HAL_RCC_GetSysClockFreq+0x98>)
 8004142:	fb03 f202 	mul.w	r2, r3, r2
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	fbb2 f3f3 	udiv	r3, r2, r3
 800414c:	617b      	str	r3, [r7, #20]
 800414e:	e004      	b.n	800415a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a0c      	ldr	r2, [pc, #48]	; (8004184 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004154:	fb02 f303 	mul.w	r3, r2, r3
 8004158:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	613b      	str	r3, [r7, #16]
      break;
 800415e:	e002      	b.n	8004166 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004160:	4b05      	ldr	r3, [pc, #20]	; (8004178 <HAL_RCC_GetSysClockFreq+0x98>)
 8004162:	613b      	str	r3, [r7, #16]
      break;
 8004164:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004166:	693b      	ldr	r3, [r7, #16]
}
 8004168:	4618      	mov	r0, r3
 800416a:	371c      	adds	r7, #28
 800416c:	46bd      	mov	sp, r7
 800416e:	bc80      	pop	{r7}
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	40021000 	.word	0x40021000
 8004178:	007a1200 	.word	0x007a1200
 800417c:	08007be0 	.word	0x08007be0
 8004180:	08007bf0 	.word	0x08007bf0
 8004184:	003d0900 	.word	0x003d0900

08004188 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004188:	b480      	push	{r7}
 800418a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800418c:	4b02      	ldr	r3, [pc, #8]	; (8004198 <HAL_RCC_GetHCLKFreq+0x10>)
 800418e:	681b      	ldr	r3, [r3, #0]
}
 8004190:	4618      	mov	r0, r3
 8004192:	46bd      	mov	sp, r7
 8004194:	bc80      	pop	{r7}
 8004196:	4770      	bx	lr
 8004198:	20000000 	.word	0x20000000

0800419c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041a0:	f7ff fff2 	bl	8004188 <HAL_RCC_GetHCLKFreq>
 80041a4:	4602      	mov	r2, r0
 80041a6:	4b05      	ldr	r3, [pc, #20]	; (80041bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	0a1b      	lsrs	r3, r3, #8
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	4903      	ldr	r1, [pc, #12]	; (80041c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041b2:	5ccb      	ldrb	r3, [r1, r3]
 80041b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	40021000 	.word	0x40021000
 80041c0:	08007bd8 	.word	0x08007bd8

080041c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80041c8:	f7ff ffde 	bl	8004188 <HAL_RCC_GetHCLKFreq>
 80041cc:	4602      	mov	r2, r0
 80041ce:	4b05      	ldr	r3, [pc, #20]	; (80041e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	0adb      	lsrs	r3, r3, #11
 80041d4:	f003 0307 	and.w	r3, r3, #7
 80041d8:	4903      	ldr	r1, [pc, #12]	; (80041e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041da:	5ccb      	ldrb	r3, [r1, r3]
 80041dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	40021000 	.word	0x40021000
 80041e8:	08007bd8 	.word	0x08007bd8

080041ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80041f4:	4b0a      	ldr	r3, [pc, #40]	; (8004220 <RCC_Delay+0x34>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a0a      	ldr	r2, [pc, #40]	; (8004224 <RCC_Delay+0x38>)
 80041fa:	fba2 2303 	umull	r2, r3, r2, r3
 80041fe:	0a5b      	lsrs	r3, r3, #9
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	fb02 f303 	mul.w	r3, r2, r3
 8004206:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004208:	bf00      	nop
  }
  while (Delay --);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	1e5a      	subs	r2, r3, #1
 800420e:	60fa      	str	r2, [r7, #12]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1f9      	bne.n	8004208 <RCC_Delay+0x1c>
}
 8004214:	bf00      	nop
 8004216:	bf00      	nop
 8004218:	3714      	adds	r7, #20
 800421a:	46bd      	mov	sp, r7
 800421c:	bc80      	pop	{r7}
 800421e:	4770      	bx	lr
 8004220:	20000000 	.word	0x20000000
 8004224:	10624dd3 	.word	0x10624dd3

08004228 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e076      	b.n	8004328 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423e:	2b00      	cmp	r3, #0
 8004240:	d108      	bne.n	8004254 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800424a:	d009      	beq.n	8004260 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	61da      	str	r2, [r3, #28]
 8004252:	e005      	b.n	8004260 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d106      	bne.n	8004280 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7fd fb3e 	bl	80018fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2202      	movs	r2, #2
 8004284:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004296:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80042a8:	431a      	orrs	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042b2:	431a      	orrs	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	431a      	orrs	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042d0:	431a      	orrs	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80042da:	431a      	orrs	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a1b      	ldr	r3, [r3, #32]
 80042e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e4:	ea42 0103 	orr.w	r1, r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	430a      	orrs	r2, r1
 80042f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	0c1a      	lsrs	r2, r3, #16
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f002 0204 	and.w	r2, r2, #4
 8004306:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	69da      	ldr	r2, [r3, #28]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004316:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3708      	adds	r7, #8
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e042      	b.n	80043c8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d106      	bne.n	800435c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7fd fbbe 	bl	8001ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2224      	movs	r2, #36	; 0x24
 8004360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68da      	ldr	r2, [r3, #12]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004372:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 f91d 	bl	80045b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	691a      	ldr	r2, [r3, #16]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004388:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	695a      	ldr	r2, [r3, #20]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004398:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68da      	ldr	r2, [r3, #12]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3708      	adds	r7, #8
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b08a      	sub	sp, #40	; 0x28
 80043d4:	af02      	add	r7, sp, #8
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	603b      	str	r3, [r7, #0]
 80043dc:	4613      	mov	r3, r2
 80043de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80043e0:	2300      	movs	r3, #0
 80043e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b20      	cmp	r3, #32
 80043ee:	d16d      	bne.n	80044cc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d002      	beq.n	80043fc <HAL_UART_Transmit+0x2c>
 80043f6:	88fb      	ldrh	r3, [r7, #6]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e066      	b.n	80044ce <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2221      	movs	r2, #33	; 0x21
 800440a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800440e:	f7fd fc77 	bl	8001d00 <HAL_GetTick>
 8004412:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	88fa      	ldrh	r2, [r7, #6]
 8004418:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	88fa      	ldrh	r2, [r7, #6]
 800441e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004428:	d108      	bne.n	800443c <HAL_UART_Transmit+0x6c>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d104      	bne.n	800443c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004432:	2300      	movs	r3, #0
 8004434:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	61bb      	str	r3, [r7, #24]
 800443a:	e003      	b.n	8004444 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004440:	2300      	movs	r3, #0
 8004442:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004444:	e02a      	b.n	800449c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	2200      	movs	r2, #0
 800444e:	2180      	movs	r1, #128	; 0x80
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f000 f840 	bl	80044d6 <UART_WaitOnFlagUntilTimeout>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e036      	b.n	80044ce <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10b      	bne.n	800447e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	881b      	ldrh	r3, [r3, #0]
 800446a:	461a      	mov	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004474:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	3302      	adds	r3, #2
 800447a:	61bb      	str	r3, [r7, #24]
 800447c:	e007      	b.n	800448e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	781a      	ldrb	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	3301      	adds	r3, #1
 800448c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004492:	b29b      	uxth	r3, r3
 8004494:	3b01      	subs	r3, #1
 8004496:	b29a      	uxth	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1cf      	bne.n	8004446 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	2200      	movs	r2, #0
 80044ae:	2140      	movs	r1, #64	; 0x40
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f000 f810 	bl	80044d6 <UART_WaitOnFlagUntilTimeout>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e006      	b.n	80044ce <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80044c8:	2300      	movs	r3, #0
 80044ca:	e000      	b.n	80044ce <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80044cc:	2302      	movs	r3, #2
  }
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3720      	adds	r7, #32
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b090      	sub	sp, #64	; 0x40
 80044da:	af00      	add	r7, sp, #0
 80044dc:	60f8      	str	r0, [r7, #12]
 80044de:	60b9      	str	r1, [r7, #8]
 80044e0:	603b      	str	r3, [r7, #0]
 80044e2:	4613      	mov	r3, r2
 80044e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044e6:	e050      	b.n	800458a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ee:	d04c      	beq.n	800458a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80044f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d007      	beq.n	8004506 <UART_WaitOnFlagUntilTimeout+0x30>
 80044f6:	f7fd fc03 	bl	8001d00 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004502:	429a      	cmp	r2, r3
 8004504:	d241      	bcs.n	800458a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	330c      	adds	r3, #12
 800450c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004510:	e853 3f00 	ldrex	r3, [r3]
 8004514:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004518:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800451c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	330c      	adds	r3, #12
 8004524:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004526:	637a      	str	r2, [r7, #52]	; 0x34
 8004528:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800452c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800452e:	e841 2300 	strex	r3, r2, [r1]
 8004532:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1e5      	bne.n	8004506 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	3314      	adds	r3, #20
 8004540:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	e853 3f00 	ldrex	r3, [r3]
 8004548:	613b      	str	r3, [r7, #16]
   return(result);
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	f023 0301 	bic.w	r3, r3, #1
 8004550:	63bb      	str	r3, [r7, #56]	; 0x38
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	3314      	adds	r3, #20
 8004558:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800455a:	623a      	str	r2, [r7, #32]
 800455c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455e:	69f9      	ldr	r1, [r7, #28]
 8004560:	6a3a      	ldr	r2, [r7, #32]
 8004562:	e841 2300 	strex	r3, r2, [r1]
 8004566:	61bb      	str	r3, [r7, #24]
   return(result);
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1e5      	bne.n	800453a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2220      	movs	r2, #32
 8004572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2220      	movs	r2, #32
 800457a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e00f      	b.n	80045aa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	4013      	ands	r3, r2
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	429a      	cmp	r2, r3
 8004598:	bf0c      	ite	eq
 800459a:	2301      	moveq	r3, #1
 800459c:	2300      	movne	r3, #0
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	461a      	mov	r2, r3
 80045a2:	79fb      	ldrb	r3, [r7, #7]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d09f      	beq.n	80044e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3740      	adds	r7, #64	; 0x40
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
	...

080045b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68da      	ldr	r2, [r3, #12]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	689a      	ldr	r2, [r3, #8]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80045ee:	f023 030c 	bic.w	r3, r3, #12
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	6812      	ldr	r2, [r2, #0]
 80045f6:	68b9      	ldr	r1, [r7, #8]
 80045f8:	430b      	orrs	r3, r1
 80045fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	699a      	ldr	r2, [r3, #24]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	430a      	orrs	r2, r1
 8004610:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a2c      	ldr	r2, [pc, #176]	; (80046c8 <UART_SetConfig+0x114>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d103      	bne.n	8004624 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800461c:	f7ff fdd2 	bl	80041c4 <HAL_RCC_GetPCLK2Freq>
 8004620:	60f8      	str	r0, [r7, #12]
 8004622:	e002      	b.n	800462a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004624:	f7ff fdba 	bl	800419c <HAL_RCC_GetPCLK1Freq>
 8004628:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	4613      	mov	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	009a      	lsls	r2, r3, #2
 8004634:	441a      	add	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004640:	4a22      	ldr	r2, [pc, #136]	; (80046cc <UART_SetConfig+0x118>)
 8004642:	fba2 2303 	umull	r2, r3, r2, r3
 8004646:	095b      	lsrs	r3, r3, #5
 8004648:	0119      	lsls	r1, r3, #4
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	4613      	mov	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	009a      	lsls	r2, r3, #2
 8004654:	441a      	add	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004660:	4b1a      	ldr	r3, [pc, #104]	; (80046cc <UART_SetConfig+0x118>)
 8004662:	fba3 0302 	umull	r0, r3, r3, r2
 8004666:	095b      	lsrs	r3, r3, #5
 8004668:	2064      	movs	r0, #100	; 0x64
 800466a:	fb00 f303 	mul.w	r3, r0, r3
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	011b      	lsls	r3, r3, #4
 8004672:	3332      	adds	r3, #50	; 0x32
 8004674:	4a15      	ldr	r2, [pc, #84]	; (80046cc <UART_SetConfig+0x118>)
 8004676:	fba2 2303 	umull	r2, r3, r2, r3
 800467a:	095b      	lsrs	r3, r3, #5
 800467c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004680:	4419      	add	r1, r3
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	4613      	mov	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4413      	add	r3, r2
 800468a:	009a      	lsls	r2, r3, #2
 800468c:	441a      	add	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	fbb2 f2f3 	udiv	r2, r2, r3
 8004698:	4b0c      	ldr	r3, [pc, #48]	; (80046cc <UART_SetConfig+0x118>)
 800469a:	fba3 0302 	umull	r0, r3, r3, r2
 800469e:	095b      	lsrs	r3, r3, #5
 80046a0:	2064      	movs	r0, #100	; 0x64
 80046a2:	fb00 f303 	mul.w	r3, r0, r3
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	011b      	lsls	r3, r3, #4
 80046aa:	3332      	adds	r3, #50	; 0x32
 80046ac:	4a07      	ldr	r2, [pc, #28]	; (80046cc <UART_SetConfig+0x118>)
 80046ae:	fba2 2303 	umull	r2, r3, r2, r3
 80046b2:	095b      	lsrs	r3, r3, #5
 80046b4:	f003 020f 	and.w	r2, r3, #15
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	440a      	add	r2, r1
 80046be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80046c0:	bf00      	nop
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	40013800 	.word	0x40013800
 80046cc:	51eb851f 	.word	0x51eb851f

080046d0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80046d0:	b480      	push	{r7}
 80046d2:	b085      	sub	sp, #20
 80046d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046d6:	f3ef 8305 	mrs	r3, IPSR
 80046da:	60bb      	str	r3, [r7, #8]
  return(result);
 80046dc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10f      	bne.n	8004702 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046e2:	f3ef 8310 	mrs	r3, PRIMASK
 80046e6:	607b      	str	r3, [r7, #4]
  return(result);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d109      	bne.n	8004702 <osKernelInitialize+0x32>
 80046ee:	4b10      	ldr	r3, [pc, #64]	; (8004730 <osKernelInitialize+0x60>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d109      	bne.n	800470a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046f6:	f3ef 8311 	mrs	r3, BASEPRI
 80046fa:	603b      	str	r3, [r7, #0]
  return(result);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004702:	f06f 0305 	mvn.w	r3, #5
 8004706:	60fb      	str	r3, [r7, #12]
 8004708:	e00c      	b.n	8004724 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800470a:	4b09      	ldr	r3, [pc, #36]	; (8004730 <osKernelInitialize+0x60>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d105      	bne.n	800471e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004712:	4b07      	ldr	r3, [pc, #28]	; (8004730 <osKernelInitialize+0x60>)
 8004714:	2201      	movs	r2, #1
 8004716:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004718:	2300      	movs	r3, #0
 800471a:	60fb      	str	r3, [r7, #12]
 800471c:	e002      	b.n	8004724 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800471e:	f04f 33ff 	mov.w	r3, #4294967295
 8004722:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004724:	68fb      	ldr	r3, [r7, #12]
}
 8004726:	4618      	mov	r0, r3
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	bc80      	pop	{r7}
 800472e:	4770      	bx	lr
 8004730:	20000324 	.word	0x20000324

08004734 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800473a:	f002 f825 	bl	8006788 <xTaskGetSchedulerState>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d004      	beq.n	800474e <osKernelGetState+0x1a>
 8004744:	2b02      	cmp	r3, #2
 8004746:	d105      	bne.n	8004754 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8004748:	2302      	movs	r3, #2
 800474a:	607b      	str	r3, [r7, #4]
      break;
 800474c:	e00c      	b.n	8004768 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800474e:	2303      	movs	r3, #3
 8004750:	607b      	str	r3, [r7, #4]
      break;
 8004752:	e009      	b.n	8004768 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8004754:	4b07      	ldr	r3, [pc, #28]	; (8004774 <osKernelGetState+0x40>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d102      	bne.n	8004762 <osKernelGetState+0x2e>
        state = osKernelReady;
 800475c:	2301      	movs	r3, #1
 800475e:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8004760:	e001      	b.n	8004766 <osKernelGetState+0x32>
        state = osKernelInactive;
 8004762:	2300      	movs	r3, #0
 8004764:	607b      	str	r3, [r7, #4]
      break;
 8004766:	bf00      	nop
  }

  return (state);
 8004768:	687b      	ldr	r3, [r7, #4]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3708      	adds	r7, #8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	20000324 	.word	0x20000324

08004778 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800477e:	f3ef 8305 	mrs	r3, IPSR
 8004782:	60bb      	str	r3, [r7, #8]
  return(result);
 8004784:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10f      	bne.n	80047aa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800478a:	f3ef 8310 	mrs	r3, PRIMASK
 800478e:	607b      	str	r3, [r7, #4]
  return(result);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d109      	bne.n	80047aa <osKernelStart+0x32>
 8004796:	4b11      	ldr	r3, [pc, #68]	; (80047dc <osKernelStart+0x64>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2b02      	cmp	r3, #2
 800479c:	d109      	bne.n	80047b2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800479e:	f3ef 8311 	mrs	r3, BASEPRI
 80047a2:	603b      	str	r3, [r7, #0]
  return(result);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80047aa:	f06f 0305 	mvn.w	r3, #5
 80047ae:	60fb      	str	r3, [r7, #12]
 80047b0:	e00e      	b.n	80047d0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80047b2:	4b0a      	ldr	r3, [pc, #40]	; (80047dc <osKernelStart+0x64>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d107      	bne.n	80047ca <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80047ba:	4b08      	ldr	r3, [pc, #32]	; (80047dc <osKernelStart+0x64>)
 80047bc:	2202      	movs	r2, #2
 80047be:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80047c0:	f001 fb80 	bl	8005ec4 <vTaskStartScheduler>
      stat = osOK;
 80047c4:	2300      	movs	r3, #0
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	e002      	b.n	80047d0 <osKernelStart+0x58>
    } else {
      stat = osError;
 80047ca:	f04f 33ff 	mov.w	r3, #4294967295
 80047ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80047d0:	68fb      	ldr	r3, [r7, #12]
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	20000324 	.word	0x20000324

080047e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b092      	sub	sp, #72	; 0x48
 80047e4:	af04      	add	r7, sp, #16
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80047ec:	2300      	movs	r3, #0
 80047ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047f0:	f3ef 8305 	mrs	r3, IPSR
 80047f4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80047f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f040 8094 	bne.w	8004926 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047fe:	f3ef 8310 	mrs	r3, PRIMASK
 8004802:	623b      	str	r3, [r7, #32]
  return(result);
 8004804:	6a3b      	ldr	r3, [r7, #32]
 8004806:	2b00      	cmp	r3, #0
 8004808:	f040 808d 	bne.w	8004926 <osThreadNew+0x146>
 800480c:	4b48      	ldr	r3, [pc, #288]	; (8004930 <osThreadNew+0x150>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2b02      	cmp	r3, #2
 8004812:	d106      	bne.n	8004822 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004814:	f3ef 8311 	mrs	r3, BASEPRI
 8004818:	61fb      	str	r3, [r7, #28]
  return(result);
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	2b00      	cmp	r3, #0
 800481e:	f040 8082 	bne.w	8004926 <osThreadNew+0x146>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d07e      	beq.n	8004926 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8004828:	2380      	movs	r3, #128	; 0x80
 800482a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800482c:	2318      	movs	r3, #24
 800482e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004830:	2300      	movs	r3, #0
 8004832:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004834:	f107 031b 	add.w	r3, r7, #27
 8004838:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800483a:	f04f 33ff 	mov.w	r3, #4294967295
 800483e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d045      	beq.n	80048d2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d002      	beq.n	8004854 <osThreadNew+0x74>
        name = attr->name;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d002      	beq.n	8004862 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004864:	2b00      	cmp	r3, #0
 8004866:	d008      	beq.n	800487a <osThreadNew+0x9a>
 8004868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486a:	2b38      	cmp	r3, #56	; 0x38
 800486c:	d805      	bhi.n	800487a <osThreadNew+0x9a>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <osThreadNew+0x9e>
        return (NULL);
 800487a:	2300      	movs	r3, #0
 800487c:	e054      	b.n	8004928 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	089b      	lsrs	r3, r3, #2
 800488c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00e      	beq.n	80048b4 <osThreadNew+0xd4>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	2bb7      	cmp	r3, #183	; 0xb7
 800489c:	d90a      	bls.n	80048b4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d006      	beq.n	80048b4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d002      	beq.n	80048b4 <osThreadNew+0xd4>
        mem = 1;
 80048ae:	2301      	movs	r3, #1
 80048b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80048b2:	e010      	b.n	80048d6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10c      	bne.n	80048d6 <osThreadNew+0xf6>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d108      	bne.n	80048d6 <osThreadNew+0xf6>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d104      	bne.n	80048d6 <osThreadNew+0xf6>
          mem = 0;
 80048cc:	2300      	movs	r3, #0
 80048ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80048d0:	e001      	b.n	80048d6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80048d2:	2300      	movs	r3, #0
 80048d4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80048d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d110      	bne.n	80048fe <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80048e4:	9202      	str	r2, [sp, #8]
 80048e6:	9301      	str	r3, [sp, #4]
 80048e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ea:	9300      	str	r3, [sp, #0]
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80048f2:	68f8      	ldr	r0, [r7, #12]
 80048f4:	f001 f902 	bl	8005afc <xTaskCreateStatic>
 80048f8:	4603      	mov	r3, r0
 80048fa:	617b      	str	r3, [r7, #20]
 80048fc:	e013      	b.n	8004926 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80048fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004900:	2b00      	cmp	r3, #0
 8004902:	d110      	bne.n	8004926 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004906:	b29a      	uxth	r2, r3
 8004908:	f107 0314 	add.w	r3, r7, #20
 800490c:	9301      	str	r3, [sp, #4]
 800490e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f001 f94c 	bl	8005bb4 <xTaskCreate>
 800491c:	4603      	mov	r3, r0
 800491e:	2b01      	cmp	r3, #1
 8004920:	d001      	beq.n	8004926 <osThreadNew+0x146>
          hTask = NULL;
 8004922:	2300      	movs	r3, #0
 8004924:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004926:	697b      	ldr	r3, [r7, #20]
}
 8004928:	4618      	mov	r0, r3
 800492a:	3738      	adds	r7, #56	; 0x38
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	20000324 	.word	0x20000324

08004934 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800493a:	f3ef 8305 	mrs	r3, IPSR
 800493e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004940:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10f      	bne.n	8004966 <osThreadYield+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004946:	f3ef 8310 	mrs	r3, PRIMASK
 800494a:	607b      	str	r3, [r7, #4]
  return(result);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d109      	bne.n	8004966 <osThreadYield+0x32>
 8004952:	4b0f      	ldr	r3, [pc, #60]	; (8004990 <osThreadYield+0x5c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2b02      	cmp	r3, #2
 8004958:	d109      	bne.n	800496e <osThreadYield+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800495a:	f3ef 8311 	mrs	r3, BASEPRI
 800495e:	603b      	str	r3, [r7, #0]
  return(result);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <osThreadYield+0x3a>
    stat = osErrorISR;
 8004966:	f06f 0305 	mvn.w	r3, #5
 800496a:	60fb      	str	r3, [r7, #12]
 800496c:	e009      	b.n	8004982 <osThreadYield+0x4e>
  } else {
    stat = osOK;
 800496e:	2300      	movs	r3, #0
 8004970:	60fb      	str	r3, [r7, #12]
    taskYIELD();
 8004972:	4b08      	ldr	r3, [pc, #32]	; (8004994 <osThreadYield+0x60>)
 8004974:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	f3bf 8f4f 	dsb	sy
 800497e:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8004982:	68fb      	ldr	r3, [r7, #12]
}
 8004984:	4618      	mov	r0, r3
 8004986:	3714      	adds	r7, #20
 8004988:	46bd      	mov	sp, r7
 800498a:	bc80      	pop	{r7}
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	20000324 	.word	0x20000324
 8004994:	e000ed04 	.word	0xe000ed04

08004998 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8004998:	b580      	push	{r7, lr}
 800499a:	b08e      	sub	sp, #56	; 0x38
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049a4:	f3ef 8305 	mrs	r3, IPSR
 80049a8:	61fb      	str	r3, [r7, #28]
  return(result);
 80049aa:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10f      	bne.n	80049d0 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049b0:	f3ef 8310 	mrs	r3, PRIMASK
 80049b4:	61bb      	str	r3, [r7, #24]
  return(result);
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d109      	bne.n	80049d0 <osThreadFlagsWait+0x38>
 80049bc:	4b3f      	ldr	r3, [pc, #252]	; (8004abc <osThreadFlagsWait+0x124>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d109      	bne.n	80049d8 <osThreadFlagsWait+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80049c4:	f3ef 8311 	mrs	r3, BASEPRI
 80049c8:	617b      	str	r3, [r7, #20]
  return(result);
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d003      	beq.n	80049d8 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 80049d0:	f06f 0305 	mvn.w	r3, #5
 80049d4:	637b      	str	r3, [r7, #52]	; 0x34
 80049d6:	e06b      	b.n	8004ab0 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	da03      	bge.n	80049e6 <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 80049de:	f06f 0303 	mvn.w	r3, #3
 80049e2:	637b      	str	r3, [r7, #52]	; 0x34
 80049e4:	e064      	b.n	8004ab0 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d002      	beq.n	80049f6 <osThreadFlagsWait+0x5e>
      clear = 0U;
 80049f0:	2300      	movs	r3, #0
 80049f2:	633b      	str	r3, [r7, #48]	; 0x30
 80049f4:	e001      	b.n	80049fa <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 80049fa:	2300      	movs	r3, #0
 80049fc:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 8004a02:	f001 fb7b 	bl	80060fc <xTaskGetTickCount>
 8004a06:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8004a08:	f107 0210 	add.w	r2, r7, #16
 8004a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a10:	2000      	movs	r0, #0
 8004a12:	f001 ff45 	bl	80068a0 <xTaskNotifyWait>
 8004a16:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 8004a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d137      	bne.n	8004a8e <osThreadFlagsWait+0xf6>
        rflags &= flags;
 8004a1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4013      	ands	r3, r2
 8004a24:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	f003 0301 	and.w	r3, r3, #1
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00c      	beq.n	8004a52 <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d032      	beq.n	8004aaa <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10f      	bne.n	8004a6a <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 8004a4a:	f06f 0302 	mvn.w	r3, #2
 8004a4e:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8004a50:	e02e      	b.n	8004ab0 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a56:	4013      	ands	r3, r2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d128      	bne.n	8004aae <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d103      	bne.n	8004a6a <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 8004a62:	f06f 0302 	mvn.w	r3, #2
 8004a66:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8004a68:	e022      	b.n	8004ab0 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8004a6a:	f001 fb47 	bl	80060fc <xTaskGetTickCount>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 8004a76:	6a3a      	ldr	r2, [r7, #32]
 8004a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d902      	bls.n	8004a84 <osThreadFlagsWait+0xec>
          tout  = 0;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a82:	e00e      	b.n	8004aa2 <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 8004a84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a86:	6a3b      	ldr	r3, [r7, #32]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a8c:	e009      	b.n	8004aa2 <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d103      	bne.n	8004a9c <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 8004a94:	f06f 0302 	mvn.w	r3, #2
 8004a98:	637b      	str	r3, [r7, #52]	; 0x34
 8004a9a:	e002      	b.n	8004aa2 <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8004a9c:	f06f 0301 	mvn.w	r3, #1
 8004aa0:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1af      	bne.n	8004a08 <osThreadFlagsWait+0x70>
 8004aa8:	e002      	b.n	8004ab0 <osThreadFlagsWait+0x118>
            break;
 8004aaa:	bf00      	nop
 8004aac:	e000      	b.n	8004ab0 <osThreadFlagsWait+0x118>
            break;
 8004aae:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8004ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3738      	adds	r7, #56	; 0x38
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	20000324 	.word	0x20000324

08004ac0 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ac8:	f3ef 8305 	mrs	r3, IPSR
 8004acc:	613b      	str	r3, [r7, #16]
  return(result);
 8004ace:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10f      	bne.n	8004af4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ad4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ad8:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d109      	bne.n	8004af4 <osDelay+0x34>
 8004ae0:	4b0d      	ldr	r3, [pc, #52]	; (8004b18 <osDelay+0x58>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d109      	bne.n	8004afc <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ae8:	f3ef 8311 	mrs	r3, BASEPRI
 8004aec:	60bb      	str	r3, [r7, #8]
  return(result);
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d003      	beq.n	8004afc <osDelay+0x3c>
    stat = osErrorISR;
 8004af4:	f06f 0305 	mvn.w	r3, #5
 8004af8:	617b      	str	r3, [r7, #20]
 8004afa:	e007      	b.n	8004b0c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004afc:	2300      	movs	r3, #0
 8004afe:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d002      	beq.n	8004b0c <osDelay+0x4c>
      vTaskDelay(ticks);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f001 f9a8 	bl	8005e5c <vTaskDelay>
    }
  }

  return (stat);
 8004b0c:	697b      	ldr	r3, [r7, #20]
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3718      	adds	r7, #24
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	20000324 	.word	0x20000324

08004b1c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b08c      	sub	sp, #48	; 0x30
 8004b20:	af02      	add	r7, sp, #8
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b2c:	f3ef 8305 	mrs	r3, IPSR
 8004b30:	61bb      	str	r3, [r7, #24]
  return(result);
 8004b32:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d16f      	bne.n	8004c18 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b38:	f3ef 8310 	mrs	r3, PRIMASK
 8004b3c:	617b      	str	r3, [r7, #20]
  return(result);
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d169      	bne.n	8004c18 <osMessageQueueNew+0xfc>
 8004b44:	4b37      	ldr	r3, [pc, #220]	; (8004c24 <osMessageQueueNew+0x108>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d105      	bne.n	8004b58 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004b4c:	f3ef 8311 	mrs	r3, BASEPRI
 8004b50:	613b      	str	r3, [r7, #16]
  return(result);
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d15f      	bne.n	8004c18 <osMessageQueueNew+0xfc>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d05c      	beq.n	8004c18 <osMessageQueueNew+0xfc>
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d059      	beq.n	8004c18 <osMessageQueueNew+0xfc>
    mem = -1;
 8004b64:	f04f 33ff 	mov.w	r3, #4294967295
 8004b68:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d029      	beq.n	8004bc4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d012      	beq.n	8004b9e <osMessageQueueNew+0x82>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	2b4f      	cmp	r3, #79	; 0x4f
 8004b7e:	d90e      	bls.n	8004b9e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00a      	beq.n	8004b9e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	695a      	ldr	r2, [r3, #20]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	68b9      	ldr	r1, [r7, #8]
 8004b90:	fb01 f303 	mul.w	r3, r1, r3
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d302      	bcc.n	8004b9e <osMessageQueueNew+0x82>
        mem = 1;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	623b      	str	r3, [r7, #32]
 8004b9c:	e014      	b.n	8004bc8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d110      	bne.n	8004bc8 <osMessageQueueNew+0xac>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10c      	bne.n	8004bc8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d108      	bne.n	8004bc8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d104      	bne.n	8004bc8 <osMessageQueueNew+0xac>
          mem = 0;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	623b      	str	r3, [r7, #32]
 8004bc2:	e001      	b.n	8004bc8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004bc8:	6a3b      	ldr	r3, [r7, #32]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d10b      	bne.n	8004be6 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	691a      	ldr	r2, [r3, #16]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	9100      	str	r1, [sp, #0]
 8004bda:	68b9      	ldr	r1, [r7, #8]
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f000 fa53 	bl	8005088 <xQueueGenericCreateStatic>
 8004be2:	6278      	str	r0, [r7, #36]	; 0x24
 8004be4:	e008      	b.n	8004bf8 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8004be6:	6a3b      	ldr	r3, [r7, #32]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d105      	bne.n	8004bf8 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8004bec:	2200      	movs	r2, #0
 8004bee:	68b9      	ldr	r1, [r7, #8]
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 fac0 	bl	8005176 <xQueueGenericCreate>
 8004bf6:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00c      	beq.n	8004c18 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d003      	beq.n	8004c0c <osMessageQueueNew+0xf0>
        name = attr->name;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	61fb      	str	r3, [r7, #28]
 8004c0a:	e001      	b.n	8004c10 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8004c10:	69f9      	ldr	r1, [r7, #28]
 8004c12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c14:	f000 ff16 	bl	8005a44 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3728      	adds	r7, #40	; 0x28
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	20000324 	.word	0x20000324

08004c28 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b08a      	sub	sp, #40	; 0x28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	603b      	str	r3, [r7, #0]
 8004c34:	4613      	mov	r3, r2
 8004c36:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c40:	f3ef 8305 	mrs	r3, IPSR
 8004c44:	61fb      	str	r3, [r7, #28]
  return(result);
 8004c46:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10f      	bne.n	8004c6c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c4c:	f3ef 8310 	mrs	r3, PRIMASK
 8004c50:	61bb      	str	r3, [r7, #24]
  return(result);
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d109      	bne.n	8004c6c <osMessageQueuePut+0x44>
 8004c58:	4b2b      	ldr	r3, [pc, #172]	; (8004d08 <osMessageQueuePut+0xe0>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d12e      	bne.n	8004cbe <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004c60:	f3ef 8311 	mrs	r3, BASEPRI
 8004c64:	617b      	str	r3, [r7, #20]
  return(result);
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d028      	beq.n	8004cbe <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004c6c:	6a3b      	ldr	r3, [r7, #32]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d005      	beq.n	8004c7e <osMessageQueuePut+0x56>
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d002      	beq.n	8004c7e <osMessageQueuePut+0x56>
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8004c7e:	f06f 0303 	mvn.w	r3, #3
 8004c82:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004c84:	e039      	b.n	8004cfa <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8004c86:	2300      	movs	r3, #0
 8004c88:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004c8a:	f107 0210 	add.w	r2, r7, #16
 8004c8e:	2300      	movs	r3, #0
 8004c90:	68b9      	ldr	r1, [r7, #8]
 8004c92:	6a38      	ldr	r0, [r7, #32]
 8004c94:	f000 fbce 	bl	8005434 <xQueueGenericSendFromISR>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d003      	beq.n	8004ca6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8004c9e:	f06f 0302 	mvn.w	r3, #2
 8004ca2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004ca4:	e029      	b.n	8004cfa <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d026      	beq.n	8004cfa <osMessageQueuePut+0xd2>
 8004cac:	4b17      	ldr	r3, [pc, #92]	; (8004d0c <osMessageQueuePut+0xe4>)
 8004cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	f3bf 8f4f 	dsb	sy
 8004cb8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004cbc:	e01d      	b.n	8004cfa <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004cbe:	6a3b      	ldr	r3, [r7, #32]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d002      	beq.n	8004cca <osMessageQueuePut+0xa2>
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d103      	bne.n	8004cd2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8004cca:	f06f 0303 	mvn.w	r3, #3
 8004cce:	627b      	str	r3, [r7, #36]	; 0x24
 8004cd0:	e014      	b.n	8004cfc <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	683a      	ldr	r2, [r7, #0]
 8004cd6:	68b9      	ldr	r1, [r7, #8]
 8004cd8:	6a38      	ldr	r0, [r7, #32]
 8004cda:	f000 faad 	bl	8005238 <xQueueGenericSend>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d00b      	beq.n	8004cfc <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d003      	beq.n	8004cf2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8004cea:	f06f 0301 	mvn.w	r3, #1
 8004cee:	627b      	str	r3, [r7, #36]	; 0x24
 8004cf0:	e004      	b.n	8004cfc <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8004cf2:	f06f 0302 	mvn.w	r3, #2
 8004cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8004cf8:	e000      	b.n	8004cfc <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004cfa:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3728      	adds	r7, #40	; 0x28
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	20000324 	.word	0x20000324
 8004d0c:	e000ed04 	.word	0xe000ed04

08004d10 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b08a      	sub	sp, #40	; 0x28
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
 8004d1c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004d22:	2300      	movs	r3, #0
 8004d24:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d26:	f3ef 8305 	mrs	r3, IPSR
 8004d2a:	61fb      	str	r3, [r7, #28]
  return(result);
 8004d2c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10f      	bne.n	8004d52 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d32:	f3ef 8310 	mrs	r3, PRIMASK
 8004d36:	61bb      	str	r3, [r7, #24]
  return(result);
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d109      	bne.n	8004d52 <osMessageQueueGet+0x42>
 8004d3e:	4b2b      	ldr	r3, [pc, #172]	; (8004dec <osMessageQueueGet+0xdc>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d12e      	bne.n	8004da4 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004d46:	f3ef 8311 	mrs	r3, BASEPRI
 8004d4a:	617b      	str	r3, [r7, #20]
  return(result);
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d028      	beq.n	8004da4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004d52:	6a3b      	ldr	r3, [r7, #32]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d005      	beq.n	8004d64 <osMessageQueueGet+0x54>
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d002      	beq.n	8004d64 <osMessageQueueGet+0x54>
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d003      	beq.n	8004d6c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8004d64:	f06f 0303 	mvn.w	r3, #3
 8004d68:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004d6a:	e038      	b.n	8004dde <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004d70:	f107 0310 	add.w	r3, r7, #16
 8004d74:	461a      	mov	r2, r3
 8004d76:	68b9      	ldr	r1, [r7, #8]
 8004d78:	6a38      	ldr	r0, [r7, #32]
 8004d7a:	f000 fcd3 	bl	8005724 <xQueueReceiveFromISR>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d003      	beq.n	8004d8c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8004d84:	f06f 0302 	mvn.w	r3, #2
 8004d88:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004d8a:	e028      	b.n	8004dde <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d025      	beq.n	8004dde <osMessageQueueGet+0xce>
 8004d92:	4b17      	ldr	r3, [pc, #92]	; (8004df0 <osMessageQueueGet+0xe0>)
 8004d94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d98:	601a      	str	r2, [r3, #0]
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004da2:	e01c      	b.n	8004dde <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d002      	beq.n	8004db0 <osMessageQueueGet+0xa0>
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d103      	bne.n	8004db8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8004db0:	f06f 0303 	mvn.w	r3, #3
 8004db4:	627b      	str	r3, [r7, #36]	; 0x24
 8004db6:	e013      	b.n	8004de0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	68b9      	ldr	r1, [r7, #8]
 8004dbc:	6a38      	ldr	r0, [r7, #32]
 8004dbe:	f000 fbd1 	bl	8005564 <xQueueReceive>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d00b      	beq.n	8004de0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8004dce:	f06f 0301 	mvn.w	r3, #1
 8004dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8004dd4:	e004      	b.n	8004de0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8004dd6:	f06f 0302 	mvn.w	r3, #2
 8004dda:	627b      	str	r3, [r7, #36]	; 0x24
 8004ddc:	e000      	b.n	8004de0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004dde:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3728      	adds	r7, #40	; 0x28
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	20000324 	.word	0x20000324
 8004df0:	e000ed04 	.word	0xe000ed04

08004df4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	4a06      	ldr	r2, [pc, #24]	; (8004e1c <vApplicationGetIdleTaskMemory+0x28>)
 8004e04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	4a05      	ldr	r2, [pc, #20]	; (8004e20 <vApplicationGetIdleTaskMemory+0x2c>)
 8004e0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2280      	movs	r2, #128	; 0x80
 8004e10:	601a      	str	r2, [r3, #0]
}
 8004e12:	bf00      	nop
 8004e14:	3714      	adds	r7, #20
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bc80      	pop	{r7}
 8004e1a:	4770      	bx	lr
 8004e1c:	20000328 	.word	0x20000328
 8004e20:	200003e0 	.word	0x200003e0

08004e24 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4a07      	ldr	r2, [pc, #28]	; (8004e50 <vApplicationGetTimerTaskMemory+0x2c>)
 8004e34:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	4a06      	ldr	r2, [pc, #24]	; (8004e54 <vApplicationGetTimerTaskMemory+0x30>)
 8004e3a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e42:	601a      	str	r2, [r3, #0]
}
 8004e44:	bf00      	nop
 8004e46:	3714      	adds	r7, #20
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bc80      	pop	{r7}
 8004e4c:	4770      	bx	lr
 8004e4e:	bf00      	nop
 8004e50:	200005e0 	.word	0x200005e0
 8004e54:	20000698 	.word	0x20000698

08004e58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f103 0208 	add.w	r2, r3, #8
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f103 0208 	add.w	r2, r3, #8
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f103 0208 	add.w	r2, r3, #8
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004e8c:	bf00      	nop
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bc80      	pop	{r7}
 8004e94:	4770      	bx	lr

08004e96 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004e96:	b480      	push	{r7}
 8004e98:	b083      	sub	sp, #12
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bc80      	pop	{r7}
 8004eac:	4770      	bx	lr

08004eae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004eae:	b480      	push	{r7}
 8004eb0:	b085      	sub	sp, #20
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
 8004eb6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	683a      	ldr	r2, [r7, #0]
 8004ed2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	1c5a      	adds	r2, r3, #1
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	601a      	str	r2, [r3, #0]
}
 8004eea:	bf00      	nop
 8004eec:	3714      	adds	r7, #20
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bc80      	pop	{r7}
 8004ef2:	4770      	bx	lr

08004ef4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b085      	sub	sp, #20
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0a:	d103      	bne.n	8004f14 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	60fb      	str	r3, [r7, #12]
 8004f12:	e00c      	b.n	8004f2e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	3308      	adds	r3, #8
 8004f18:	60fb      	str	r3, [r7, #12]
 8004f1a:	e002      	b.n	8004f22 <vListInsert+0x2e>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	60fb      	str	r3, [r7, #12]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d2f6      	bcs.n	8004f1c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	683a      	ldr	r2, [r7, #0]
 8004f3c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	683a      	ldr	r2, [r7, #0]
 8004f48:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	1c5a      	adds	r2, r3, #1
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	601a      	str	r2, [r3, #0]
}
 8004f5a:	bf00      	nop
 8004f5c:	3714      	adds	r7, #20
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bc80      	pop	{r7}
 8004f62:	4770      	bx	lr

08004f64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	6892      	ldr	r2, [r2, #8]
 8004f7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	6852      	ldr	r2, [r2, #4]
 8004f84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d103      	bne.n	8004f98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689a      	ldr	r2, [r3, #8]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	1e5a      	subs	r2, r3, #1
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bc80      	pop	{r7}
 8004fb4:	4770      	bx	lr
	...

08004fb8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10a      	bne.n	8004fe2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd0:	f383 8811 	msr	BASEPRI, r3
 8004fd4:	f3bf 8f6f 	isb	sy
 8004fd8:	f3bf 8f4f 	dsb	sy
 8004fdc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004fde:	bf00      	nop
 8004fe0:	e7fe      	b.n	8004fe0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004fe2:	f002 f913 	bl	800720c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fee:	68f9      	ldr	r1, [r7, #12]
 8004ff0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ff2:	fb01 f303 	mul.w	r3, r1, r3
 8004ff6:	441a      	add	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005012:	3b01      	subs	r3, #1
 8005014:	68f9      	ldr	r1, [r7, #12]
 8005016:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005018:	fb01 f303 	mul.w	r3, r1, r3
 800501c:	441a      	add	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	22ff      	movs	r2, #255	; 0xff
 8005026:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	22ff      	movs	r2, #255	; 0xff
 800502e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d114      	bne.n	8005062 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d01a      	beq.n	8005076 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	3310      	adds	r3, #16
 8005044:	4618      	mov	r0, r3
 8005046:	f001 f9d9 	bl	80063fc <xTaskRemoveFromEventList>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d012      	beq.n	8005076 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005050:	4b0c      	ldr	r3, [pc, #48]	; (8005084 <xQueueGenericReset+0xcc>)
 8005052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	f3bf 8f4f 	dsb	sy
 800505c:	f3bf 8f6f 	isb	sy
 8005060:	e009      	b.n	8005076 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	3310      	adds	r3, #16
 8005066:	4618      	mov	r0, r3
 8005068:	f7ff fef6 	bl	8004e58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	3324      	adds	r3, #36	; 0x24
 8005070:	4618      	mov	r0, r3
 8005072:	f7ff fef1 	bl	8004e58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005076:	f002 f8f9 	bl	800726c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800507a:	2301      	movs	r3, #1
}
 800507c:	4618      	mov	r0, r3
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	e000ed04 	.word	0xe000ed04

08005088 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005088:	b580      	push	{r7, lr}
 800508a:	b08e      	sub	sp, #56	; 0x38
 800508c:	af02      	add	r7, sp, #8
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
 8005094:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d10a      	bne.n	80050b2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800509c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a0:	f383 8811 	msr	BASEPRI, r3
 80050a4:	f3bf 8f6f 	isb	sy
 80050a8:	f3bf 8f4f 	dsb	sy
 80050ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80050ae:	bf00      	nop
 80050b0:	e7fe      	b.n	80050b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10a      	bne.n	80050ce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80050b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050bc:	f383 8811 	msr	BASEPRI, r3
 80050c0:	f3bf 8f6f 	isb	sy
 80050c4:	f3bf 8f4f 	dsb	sy
 80050c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80050ca:	bf00      	nop
 80050cc:	e7fe      	b.n	80050cc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d002      	beq.n	80050da <xQueueGenericCreateStatic+0x52>
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d001      	beq.n	80050de <xQueueGenericCreateStatic+0x56>
 80050da:	2301      	movs	r3, #1
 80050dc:	e000      	b.n	80050e0 <xQueueGenericCreateStatic+0x58>
 80050de:	2300      	movs	r3, #0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d10a      	bne.n	80050fa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80050e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e8:	f383 8811 	msr	BASEPRI, r3
 80050ec:	f3bf 8f6f 	isb	sy
 80050f0:	f3bf 8f4f 	dsb	sy
 80050f4:	623b      	str	r3, [r7, #32]
}
 80050f6:	bf00      	nop
 80050f8:	e7fe      	b.n	80050f8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d102      	bne.n	8005106 <xQueueGenericCreateStatic+0x7e>
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d101      	bne.n	800510a <xQueueGenericCreateStatic+0x82>
 8005106:	2301      	movs	r3, #1
 8005108:	e000      	b.n	800510c <xQueueGenericCreateStatic+0x84>
 800510a:	2300      	movs	r3, #0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10a      	bne.n	8005126 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005114:	f383 8811 	msr	BASEPRI, r3
 8005118:	f3bf 8f6f 	isb	sy
 800511c:	f3bf 8f4f 	dsb	sy
 8005120:	61fb      	str	r3, [r7, #28]
}
 8005122:	bf00      	nop
 8005124:	e7fe      	b.n	8005124 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005126:	2350      	movs	r3, #80	; 0x50
 8005128:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	2b50      	cmp	r3, #80	; 0x50
 800512e:	d00a      	beq.n	8005146 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005134:	f383 8811 	msr	BASEPRI, r3
 8005138:	f3bf 8f6f 	isb	sy
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	61bb      	str	r3, [r7, #24]
}
 8005142:	bf00      	nop
 8005144:	e7fe      	b.n	8005144 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800514a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00d      	beq.n	800516c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005158:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800515c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	4613      	mov	r3, r2
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	68b9      	ldr	r1, [r7, #8]
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f000 f843 	bl	80051f2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800516c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800516e:	4618      	mov	r0, r3
 8005170:	3730      	adds	r7, #48	; 0x30
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005176:	b580      	push	{r7, lr}
 8005178:	b08a      	sub	sp, #40	; 0x28
 800517a:	af02      	add	r7, sp, #8
 800517c:	60f8      	str	r0, [r7, #12]
 800517e:	60b9      	str	r1, [r7, #8]
 8005180:	4613      	mov	r3, r2
 8005182:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10a      	bne.n	80051a0 <xQueueGenericCreate+0x2a>
	__asm volatile
 800518a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518e:	f383 8811 	msr	BASEPRI, r3
 8005192:	f3bf 8f6f 	isb	sy
 8005196:	f3bf 8f4f 	dsb	sy
 800519a:	613b      	str	r3, [r7, #16]
}
 800519c:	bf00      	nop
 800519e:	e7fe      	b.n	800519e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d102      	bne.n	80051ac <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80051a6:	2300      	movs	r3, #0
 80051a8:	61fb      	str	r3, [r7, #28]
 80051aa:	e004      	b.n	80051b6 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	68ba      	ldr	r2, [r7, #8]
 80051b0:	fb02 f303 	mul.w	r3, r2, r3
 80051b4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	3350      	adds	r3, #80	; 0x50
 80051ba:	4618      	mov	r0, r3
 80051bc:	f002 f926 	bl	800740c <pvPortMalloc>
 80051c0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00f      	beq.n	80051e8 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	3350      	adds	r3, #80	; 0x50
 80051cc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80051d6:	79fa      	ldrb	r2, [r7, #7]
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	4613      	mov	r3, r2
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	68b9      	ldr	r1, [r7, #8]
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f000 f805 	bl	80051f2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80051e8:	69bb      	ldr	r3, [r7, #24]
	}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3720      	adds	r7, #32
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b084      	sub	sp, #16
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	60f8      	str	r0, [r7, #12]
 80051fa:	60b9      	str	r1, [r7, #8]
 80051fc:	607a      	str	r2, [r7, #4]
 80051fe:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d103      	bne.n	800520e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	601a      	str	r2, [r3, #0]
 800520c:	e002      	b.n	8005214 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005220:	2101      	movs	r1, #1
 8005222:	69b8      	ldr	r0, [r7, #24]
 8005224:	f7ff fec8 	bl	8004fb8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	78fa      	ldrb	r2, [r7, #3]
 800522c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005230:	bf00      	nop
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b08e      	sub	sp, #56	; 0x38
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
 8005244:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005246:	2300      	movs	r3, #0
 8005248:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800524e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005250:	2b00      	cmp	r3, #0
 8005252:	d10a      	bne.n	800526a <xQueueGenericSend+0x32>
	__asm volatile
 8005254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005258:	f383 8811 	msr	BASEPRI, r3
 800525c:	f3bf 8f6f 	isb	sy
 8005260:	f3bf 8f4f 	dsb	sy
 8005264:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005266:	bf00      	nop
 8005268:	e7fe      	b.n	8005268 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d103      	bne.n	8005278 <xQueueGenericSend+0x40>
 8005270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005274:	2b00      	cmp	r3, #0
 8005276:	d101      	bne.n	800527c <xQueueGenericSend+0x44>
 8005278:	2301      	movs	r3, #1
 800527a:	e000      	b.n	800527e <xQueueGenericSend+0x46>
 800527c:	2300      	movs	r3, #0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10a      	bne.n	8005298 <xQueueGenericSend+0x60>
	__asm volatile
 8005282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005286:	f383 8811 	msr	BASEPRI, r3
 800528a:	f3bf 8f6f 	isb	sy
 800528e:	f3bf 8f4f 	dsb	sy
 8005292:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005294:	bf00      	nop
 8005296:	e7fe      	b.n	8005296 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	2b02      	cmp	r3, #2
 800529c:	d103      	bne.n	80052a6 <xQueueGenericSend+0x6e>
 800529e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d101      	bne.n	80052aa <xQueueGenericSend+0x72>
 80052a6:	2301      	movs	r3, #1
 80052a8:	e000      	b.n	80052ac <xQueueGenericSend+0x74>
 80052aa:	2300      	movs	r3, #0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10a      	bne.n	80052c6 <xQueueGenericSend+0x8e>
	__asm volatile
 80052b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b4:	f383 8811 	msr	BASEPRI, r3
 80052b8:	f3bf 8f6f 	isb	sy
 80052bc:	f3bf 8f4f 	dsb	sy
 80052c0:	623b      	str	r3, [r7, #32]
}
 80052c2:	bf00      	nop
 80052c4:	e7fe      	b.n	80052c4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052c6:	f001 fa5f 	bl	8006788 <xTaskGetSchedulerState>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d102      	bne.n	80052d6 <xQueueGenericSend+0x9e>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <xQueueGenericSend+0xa2>
 80052d6:	2301      	movs	r3, #1
 80052d8:	e000      	b.n	80052dc <xQueueGenericSend+0xa4>
 80052da:	2300      	movs	r3, #0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d10a      	bne.n	80052f6 <xQueueGenericSend+0xbe>
	__asm volatile
 80052e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e4:	f383 8811 	msr	BASEPRI, r3
 80052e8:	f3bf 8f6f 	isb	sy
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	61fb      	str	r3, [r7, #28]
}
 80052f2:	bf00      	nop
 80052f4:	e7fe      	b.n	80052f4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80052f6:	f001 ff89 	bl	800720c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005302:	429a      	cmp	r2, r3
 8005304:	d302      	bcc.n	800530c <xQueueGenericSend+0xd4>
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b02      	cmp	r3, #2
 800530a:	d129      	bne.n	8005360 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800530c:	683a      	ldr	r2, [r7, #0]
 800530e:	68b9      	ldr	r1, [r7, #8]
 8005310:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005312:	f000 fa87 	bl	8005824 <prvCopyDataToQueue>
 8005316:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531c:	2b00      	cmp	r3, #0
 800531e:	d010      	beq.n	8005342 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005322:	3324      	adds	r3, #36	; 0x24
 8005324:	4618      	mov	r0, r3
 8005326:	f001 f869 	bl	80063fc <xTaskRemoveFromEventList>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d013      	beq.n	8005358 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005330:	4b3f      	ldr	r3, [pc, #252]	; (8005430 <xQueueGenericSend+0x1f8>)
 8005332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005336:	601a      	str	r2, [r3, #0]
 8005338:	f3bf 8f4f 	dsb	sy
 800533c:	f3bf 8f6f 	isb	sy
 8005340:	e00a      	b.n	8005358 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005344:	2b00      	cmp	r3, #0
 8005346:	d007      	beq.n	8005358 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005348:	4b39      	ldr	r3, [pc, #228]	; (8005430 <xQueueGenericSend+0x1f8>)
 800534a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800534e:	601a      	str	r2, [r3, #0]
 8005350:	f3bf 8f4f 	dsb	sy
 8005354:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005358:	f001 ff88 	bl	800726c <vPortExitCritical>
				return pdPASS;
 800535c:	2301      	movs	r3, #1
 800535e:	e063      	b.n	8005428 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d103      	bne.n	800536e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005366:	f001 ff81 	bl	800726c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800536a:	2300      	movs	r3, #0
 800536c:	e05c      	b.n	8005428 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800536e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005370:	2b00      	cmp	r3, #0
 8005372:	d106      	bne.n	8005382 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005374:	f107 0314 	add.w	r3, r7, #20
 8005378:	4618      	mov	r0, r3
 800537a:	f001 f8a3 	bl	80064c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800537e:	2301      	movs	r3, #1
 8005380:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005382:	f001 ff73 	bl	800726c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005386:	f000 fe0d 	bl	8005fa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800538a:	f001 ff3f 	bl	800720c <vPortEnterCritical>
 800538e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005390:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005394:	b25b      	sxtb	r3, r3
 8005396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800539a:	d103      	bne.n	80053a4 <xQueueGenericSend+0x16c>
 800539c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053aa:	b25b      	sxtb	r3, r3
 80053ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b0:	d103      	bne.n	80053ba <xQueueGenericSend+0x182>
 80053b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053ba:	f001 ff57 	bl	800726c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053be:	1d3a      	adds	r2, r7, #4
 80053c0:	f107 0314 	add.w	r3, r7, #20
 80053c4:	4611      	mov	r1, r2
 80053c6:	4618      	mov	r0, r3
 80053c8:	f001 f892 	bl	80064f0 <xTaskCheckForTimeOut>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d124      	bne.n	800541c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80053d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053d4:	f000 fb1e 	bl	8005a14 <prvIsQueueFull>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d018      	beq.n	8005410 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80053de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e0:	3310      	adds	r3, #16
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	4611      	mov	r1, r2
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 ffb8 	bl	800635c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80053ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053ee:	f000 faa9 	bl	8005944 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80053f2:	f000 fde5 	bl	8005fc0 <xTaskResumeAll>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f47f af7c 	bne.w	80052f6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80053fe:	4b0c      	ldr	r3, [pc, #48]	; (8005430 <xQueueGenericSend+0x1f8>)
 8005400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005404:	601a      	str	r2, [r3, #0]
 8005406:	f3bf 8f4f 	dsb	sy
 800540a:	f3bf 8f6f 	isb	sy
 800540e:	e772      	b.n	80052f6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005410:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005412:	f000 fa97 	bl	8005944 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005416:	f000 fdd3 	bl	8005fc0 <xTaskResumeAll>
 800541a:	e76c      	b.n	80052f6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800541c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800541e:	f000 fa91 	bl	8005944 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005422:	f000 fdcd 	bl	8005fc0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005426:	2300      	movs	r3, #0
		}
	}
}
 8005428:	4618      	mov	r0, r3
 800542a:	3738      	adds	r7, #56	; 0x38
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	e000ed04 	.word	0xe000ed04

08005434 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b08e      	sub	sp, #56	; 0x38
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
 8005440:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005448:	2b00      	cmp	r3, #0
 800544a:	d10a      	bne.n	8005462 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800544c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005450:	f383 8811 	msr	BASEPRI, r3
 8005454:	f3bf 8f6f 	isb	sy
 8005458:	f3bf 8f4f 	dsb	sy
 800545c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800545e:	bf00      	nop
 8005460:	e7fe      	b.n	8005460 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d103      	bne.n	8005470 <xQueueGenericSendFromISR+0x3c>
 8005468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546c:	2b00      	cmp	r3, #0
 800546e:	d101      	bne.n	8005474 <xQueueGenericSendFromISR+0x40>
 8005470:	2301      	movs	r3, #1
 8005472:	e000      	b.n	8005476 <xQueueGenericSendFromISR+0x42>
 8005474:	2300      	movs	r3, #0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10a      	bne.n	8005490 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800547a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547e:	f383 8811 	msr	BASEPRI, r3
 8005482:	f3bf 8f6f 	isb	sy
 8005486:	f3bf 8f4f 	dsb	sy
 800548a:	623b      	str	r3, [r7, #32]
}
 800548c:	bf00      	nop
 800548e:	e7fe      	b.n	800548e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	2b02      	cmp	r3, #2
 8005494:	d103      	bne.n	800549e <xQueueGenericSendFromISR+0x6a>
 8005496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800549a:	2b01      	cmp	r3, #1
 800549c:	d101      	bne.n	80054a2 <xQueueGenericSendFromISR+0x6e>
 800549e:	2301      	movs	r3, #1
 80054a0:	e000      	b.n	80054a4 <xQueueGenericSendFromISR+0x70>
 80054a2:	2300      	movs	r3, #0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10a      	bne.n	80054be <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80054a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ac:	f383 8811 	msr	BASEPRI, r3
 80054b0:	f3bf 8f6f 	isb	sy
 80054b4:	f3bf 8f4f 	dsb	sy
 80054b8:	61fb      	str	r3, [r7, #28]
}
 80054ba:	bf00      	nop
 80054bc:	e7fe      	b.n	80054bc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80054be:	f001 ff67 	bl	8007390 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80054c2:	f3ef 8211 	mrs	r2, BASEPRI
 80054c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ca:	f383 8811 	msr	BASEPRI, r3
 80054ce:	f3bf 8f6f 	isb	sy
 80054d2:	f3bf 8f4f 	dsb	sy
 80054d6:	61ba      	str	r2, [r7, #24]
 80054d8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80054da:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80054dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80054de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d302      	bcc.n	80054f0 <xQueueGenericSendFromISR+0xbc>
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d12c      	bne.n	800554a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80054f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80054fa:	683a      	ldr	r2, [r7, #0]
 80054fc:	68b9      	ldr	r1, [r7, #8]
 80054fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005500:	f000 f990 	bl	8005824 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005504:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800550c:	d112      	bne.n	8005534 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800550e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005512:	2b00      	cmp	r3, #0
 8005514:	d016      	beq.n	8005544 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005518:	3324      	adds	r3, #36	; 0x24
 800551a:	4618      	mov	r0, r3
 800551c:	f000 ff6e 	bl	80063fc <xTaskRemoveFromEventList>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00e      	beq.n	8005544 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00b      	beq.n	8005544 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	601a      	str	r2, [r3, #0]
 8005532:	e007      	b.n	8005544 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005534:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005538:	3301      	adds	r3, #1
 800553a:	b2db      	uxtb	r3, r3
 800553c:	b25a      	sxtb	r2, r3
 800553e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005544:	2301      	movs	r3, #1
 8005546:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005548:	e001      	b.n	800554e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800554a:	2300      	movs	r3, #0
 800554c:	637b      	str	r3, [r7, #52]	; 0x34
 800554e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005550:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005558:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800555a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800555c:	4618      	mov	r0, r3
 800555e:	3738      	adds	r7, #56	; 0x38
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b08c      	sub	sp, #48	; 0x30
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005570:	2300      	movs	r3, #0
 8005572:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557a:	2b00      	cmp	r3, #0
 800557c:	d10a      	bne.n	8005594 <xQueueReceive+0x30>
	__asm volatile
 800557e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005582:	f383 8811 	msr	BASEPRI, r3
 8005586:	f3bf 8f6f 	isb	sy
 800558a:	f3bf 8f4f 	dsb	sy
 800558e:	623b      	str	r3, [r7, #32]
}
 8005590:	bf00      	nop
 8005592:	e7fe      	b.n	8005592 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d103      	bne.n	80055a2 <xQueueReceive+0x3e>
 800559a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <xQueueReceive+0x42>
 80055a2:	2301      	movs	r3, #1
 80055a4:	e000      	b.n	80055a8 <xQueueReceive+0x44>
 80055a6:	2300      	movs	r3, #0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10a      	bne.n	80055c2 <xQueueReceive+0x5e>
	__asm volatile
 80055ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	61fb      	str	r3, [r7, #28]
}
 80055be:	bf00      	nop
 80055c0:	e7fe      	b.n	80055c0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055c2:	f001 f8e1 	bl	8006788 <xTaskGetSchedulerState>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d102      	bne.n	80055d2 <xQueueReceive+0x6e>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d101      	bne.n	80055d6 <xQueueReceive+0x72>
 80055d2:	2301      	movs	r3, #1
 80055d4:	e000      	b.n	80055d8 <xQueueReceive+0x74>
 80055d6:	2300      	movs	r3, #0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10a      	bne.n	80055f2 <xQueueReceive+0x8e>
	__asm volatile
 80055dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	61bb      	str	r3, [r7, #24]
}
 80055ee:	bf00      	nop
 80055f0:	e7fe      	b.n	80055f0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80055f2:	f001 fe0b 	bl	800720c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d01f      	beq.n	8005642 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005602:	68b9      	ldr	r1, [r7, #8]
 8005604:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005606:	f000 f977 	bl	80058f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	1e5a      	subs	r2, r3, #1
 800560e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005610:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00f      	beq.n	800563a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800561a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561c:	3310      	adds	r3, #16
 800561e:	4618      	mov	r0, r3
 8005620:	f000 feec 	bl	80063fc <xTaskRemoveFromEventList>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d007      	beq.n	800563a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800562a:	4b3d      	ldr	r3, [pc, #244]	; (8005720 <xQueueReceive+0x1bc>)
 800562c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005630:	601a      	str	r2, [r3, #0]
 8005632:	f3bf 8f4f 	dsb	sy
 8005636:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800563a:	f001 fe17 	bl	800726c <vPortExitCritical>
				return pdPASS;
 800563e:	2301      	movs	r3, #1
 8005640:	e069      	b.n	8005716 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d103      	bne.n	8005650 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005648:	f001 fe10 	bl	800726c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800564c:	2300      	movs	r3, #0
 800564e:	e062      	b.n	8005716 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005652:	2b00      	cmp	r3, #0
 8005654:	d106      	bne.n	8005664 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005656:	f107 0310 	add.w	r3, r7, #16
 800565a:	4618      	mov	r0, r3
 800565c:	f000 ff32 	bl	80064c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005660:	2301      	movs	r3, #1
 8005662:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005664:	f001 fe02 	bl	800726c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005668:	f000 fc9c 	bl	8005fa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800566c:	f001 fdce 	bl	800720c <vPortEnterCritical>
 8005670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005672:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005676:	b25b      	sxtb	r3, r3
 8005678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567c:	d103      	bne.n	8005686 <xQueueReceive+0x122>
 800567e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005680:	2200      	movs	r2, #0
 8005682:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005688:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800568c:	b25b      	sxtb	r3, r3
 800568e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005692:	d103      	bne.n	800569c <xQueueReceive+0x138>
 8005694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005696:	2200      	movs	r2, #0
 8005698:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800569c:	f001 fde6 	bl	800726c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056a0:	1d3a      	adds	r2, r7, #4
 80056a2:	f107 0310 	add.w	r3, r7, #16
 80056a6:	4611      	mov	r1, r2
 80056a8:	4618      	mov	r0, r3
 80056aa:	f000 ff21 	bl	80064f0 <xTaskCheckForTimeOut>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d123      	bne.n	80056fc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056b6:	f000 f997 	bl	80059e8 <prvIsQueueEmpty>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d017      	beq.n	80056f0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80056c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c2:	3324      	adds	r3, #36	; 0x24
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	4611      	mov	r1, r2
 80056c8:	4618      	mov	r0, r3
 80056ca:	f000 fe47 	bl	800635c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80056ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056d0:	f000 f938 	bl	8005944 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80056d4:	f000 fc74 	bl	8005fc0 <xTaskResumeAll>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d189      	bne.n	80055f2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80056de:	4b10      	ldr	r3, [pc, #64]	; (8005720 <xQueueReceive+0x1bc>)
 80056e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056e4:	601a      	str	r2, [r3, #0]
 80056e6:	f3bf 8f4f 	dsb	sy
 80056ea:	f3bf 8f6f 	isb	sy
 80056ee:	e780      	b.n	80055f2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80056f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056f2:	f000 f927 	bl	8005944 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80056f6:	f000 fc63 	bl	8005fc0 <xTaskResumeAll>
 80056fa:	e77a      	b.n	80055f2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80056fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056fe:	f000 f921 	bl	8005944 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005702:	f000 fc5d 	bl	8005fc0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005706:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005708:	f000 f96e 	bl	80059e8 <prvIsQueueEmpty>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	f43f af6f 	beq.w	80055f2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005714:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005716:	4618      	mov	r0, r3
 8005718:	3730      	adds	r7, #48	; 0x30
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	e000ed04 	.word	0xe000ed04

08005724 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b08e      	sub	sp, #56	; 0x38
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005736:	2b00      	cmp	r3, #0
 8005738:	d10a      	bne.n	8005750 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800573a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573e:	f383 8811 	msr	BASEPRI, r3
 8005742:	f3bf 8f6f 	isb	sy
 8005746:	f3bf 8f4f 	dsb	sy
 800574a:	623b      	str	r3, [r7, #32]
}
 800574c:	bf00      	nop
 800574e:	e7fe      	b.n	800574e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d103      	bne.n	800575e <xQueueReceiveFromISR+0x3a>
 8005756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <xQueueReceiveFromISR+0x3e>
 800575e:	2301      	movs	r3, #1
 8005760:	e000      	b.n	8005764 <xQueueReceiveFromISR+0x40>
 8005762:	2300      	movs	r3, #0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10a      	bne.n	800577e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576c:	f383 8811 	msr	BASEPRI, r3
 8005770:	f3bf 8f6f 	isb	sy
 8005774:	f3bf 8f4f 	dsb	sy
 8005778:	61fb      	str	r3, [r7, #28]
}
 800577a:	bf00      	nop
 800577c:	e7fe      	b.n	800577c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800577e:	f001 fe07 	bl	8007390 <vPortValidateInterruptPriority>
	__asm volatile
 8005782:	f3ef 8211 	mrs	r2, BASEPRI
 8005786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578a:	f383 8811 	msr	BASEPRI, r3
 800578e:	f3bf 8f6f 	isb	sy
 8005792:	f3bf 8f4f 	dsb	sy
 8005796:	61ba      	str	r2, [r7, #24]
 8005798:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800579a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800579c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800579e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80057a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d02f      	beq.n	800580a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80057aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80057b4:	68b9      	ldr	r1, [r7, #8]
 80057b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057b8:	f000 f89e 	bl	80058f8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80057bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057be:	1e5a      	subs	r2, r3, #1
 80057c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80057c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80057c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057cc:	d112      	bne.n	80057f4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d016      	beq.n	8005804 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d8:	3310      	adds	r3, #16
 80057da:	4618      	mov	r0, r3
 80057dc:	f000 fe0e 	bl	80063fc <xTaskRemoveFromEventList>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00e      	beq.n	8005804 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00b      	beq.n	8005804 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	601a      	str	r2, [r3, #0]
 80057f2:	e007      	b.n	8005804 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80057f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80057f8:	3301      	adds	r3, #1
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	b25a      	sxtb	r2, r3
 80057fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005804:	2301      	movs	r3, #1
 8005806:	637b      	str	r3, [r7, #52]	; 0x34
 8005808:	e001      	b.n	800580e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800580a:	2300      	movs	r3, #0
 800580c:	637b      	str	r3, [r7, #52]	; 0x34
 800580e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005810:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	f383 8811 	msr	BASEPRI, r3
}
 8005818:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800581a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800581c:	4618      	mov	r0, r3
 800581e:	3738      	adds	r7, #56	; 0x38
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005830:	2300      	movs	r3, #0
 8005832:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005838:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583e:	2b00      	cmp	r3, #0
 8005840:	d10d      	bne.n	800585e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d14d      	bne.n	80058e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	4618      	mov	r0, r3
 8005850:	f000 ffb8 	bl	80067c4 <xTaskPriorityDisinherit>
 8005854:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	605a      	str	r2, [r3, #4]
 800585c:	e043      	b.n	80058e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d119      	bne.n	8005898 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6898      	ldr	r0, [r3, #8]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586c:	461a      	mov	r2, r3
 800586e:	68b9      	ldr	r1, [r7, #8]
 8005870:	f002 f828 	bl	80078c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	689a      	ldr	r2, [r3, #8]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587c:	441a      	add	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	689a      	ldr	r2, [r3, #8]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	429a      	cmp	r2, r3
 800588c:	d32b      	bcc.n	80058e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	609a      	str	r2, [r3, #8]
 8005896:	e026      	b.n	80058e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	68d8      	ldr	r0, [r3, #12]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a0:	461a      	mov	r2, r3
 80058a2:	68b9      	ldr	r1, [r7, #8]
 80058a4:	f002 f80e 	bl	80078c4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	68da      	ldr	r2, [r3, #12]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b0:	425b      	negs	r3, r3
 80058b2:	441a      	add	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	68da      	ldr	r2, [r3, #12]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d207      	bcs.n	80058d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	685a      	ldr	r2, [r3, #4]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058cc:	425b      	negs	r3, r3
 80058ce:	441a      	add	r2, r3
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d105      	bne.n	80058e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d002      	beq.n	80058e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	3b01      	subs	r3, #1
 80058e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	1c5a      	adds	r2, r3, #1
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80058ee:	697b      	ldr	r3, [r7, #20]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3718      	adds	r7, #24
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005906:	2b00      	cmp	r3, #0
 8005908:	d018      	beq.n	800593c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68da      	ldr	r2, [r3, #12]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005912:	441a      	add	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	68da      	ldr	r2, [r3, #12]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	429a      	cmp	r2, r3
 8005922:	d303      	bcc.n	800592c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	68d9      	ldr	r1, [r3, #12]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005934:	461a      	mov	r2, r3
 8005936:	6838      	ldr	r0, [r7, #0]
 8005938:	f001 ffc4 	bl	80078c4 <memcpy>
	}
}
 800593c:	bf00      	nop
 800593e:	3708      	adds	r7, #8
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800594c:	f001 fc5e 	bl	800720c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005956:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005958:	e011      	b.n	800597e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595e:	2b00      	cmp	r3, #0
 8005960:	d012      	beq.n	8005988 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	3324      	adds	r3, #36	; 0x24
 8005966:	4618      	mov	r0, r3
 8005968:	f000 fd48 	bl	80063fc <xTaskRemoveFromEventList>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d001      	beq.n	8005976 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005972:	f000 fe1f 	bl	80065b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005976:	7bfb      	ldrb	r3, [r7, #15]
 8005978:	3b01      	subs	r3, #1
 800597a:	b2db      	uxtb	r3, r3
 800597c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800597e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005982:	2b00      	cmp	r3, #0
 8005984:	dce9      	bgt.n	800595a <prvUnlockQueue+0x16>
 8005986:	e000      	b.n	800598a <prvUnlockQueue+0x46>
					break;
 8005988:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	22ff      	movs	r2, #255	; 0xff
 800598e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005992:	f001 fc6b 	bl	800726c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005996:	f001 fc39 	bl	800720c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80059a2:	e011      	b.n	80059c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d012      	beq.n	80059d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	3310      	adds	r3, #16
 80059b0:	4618      	mov	r0, r3
 80059b2:	f000 fd23 	bl	80063fc <xTaskRemoveFromEventList>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d001      	beq.n	80059c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80059bc:	f000 fdfa 	bl	80065b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80059c0:	7bbb      	ldrb	r3, [r7, #14]
 80059c2:	3b01      	subs	r3, #1
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80059c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	dce9      	bgt.n	80059a4 <prvUnlockQueue+0x60>
 80059d0:	e000      	b.n	80059d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80059d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	22ff      	movs	r2, #255	; 0xff
 80059d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80059dc:	f001 fc46 	bl	800726c <vPortExitCritical>
}
 80059e0:	bf00      	nop
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80059f0:	f001 fc0c 	bl	800720c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d102      	bne.n	8005a02 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80059fc:	2301      	movs	r3, #1
 80059fe:	60fb      	str	r3, [r7, #12]
 8005a00:	e001      	b.n	8005a06 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005a02:	2300      	movs	r3, #0
 8005a04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a06:	f001 fc31 	bl	800726c <vPortExitCritical>

	return xReturn;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3710      	adds	r7, #16
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a1c:	f001 fbf6 	bl	800720c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d102      	bne.n	8005a32 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	60fb      	str	r3, [r7, #12]
 8005a30:	e001      	b.n	8005a36 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005a32:	2300      	movs	r3, #0
 8005a34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a36:	f001 fc19 	bl	800726c <vPortExitCritical>

	return xReturn;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a4e:	2300      	movs	r3, #0
 8005a50:	60fb      	str	r3, [r7, #12]
 8005a52:	e014      	b.n	8005a7e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005a54:	4a0e      	ldr	r2, [pc, #56]	; (8005a90 <vQueueAddToRegistry+0x4c>)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d10b      	bne.n	8005a78 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005a60:	490b      	ldr	r1, [pc, #44]	; (8005a90 <vQueueAddToRegistry+0x4c>)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005a6a:	4a09      	ldr	r2, [pc, #36]	; (8005a90 <vQueueAddToRegistry+0x4c>)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	00db      	lsls	r3, r3, #3
 8005a70:	4413      	add	r3, r2
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005a76:	e006      	b.n	8005a86 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	60fb      	str	r3, [r7, #12]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2b07      	cmp	r3, #7
 8005a82:	d9e7      	bls.n	8005a54 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005a84:	bf00      	nop
 8005a86:	bf00      	nop
 8005a88:	3714      	adds	r7, #20
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bc80      	pop	{r7}
 8005a8e:	4770      	bx	lr
 8005a90:	20000a98 	.word	0x20000a98

08005a94 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b086      	sub	sp, #24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005aa4:	f001 fbb2 	bl	800720c <vPortEnterCritical>
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005aae:	b25b      	sxtb	r3, r3
 8005ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab4:	d103      	bne.n	8005abe <vQueueWaitForMessageRestricted+0x2a>
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ac4:	b25b      	sxtb	r3, r3
 8005ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aca:	d103      	bne.n	8005ad4 <vQueueWaitForMessageRestricted+0x40>
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ad4:	f001 fbca 	bl	800726c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d106      	bne.n	8005aee <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	3324      	adds	r3, #36	; 0x24
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	68b9      	ldr	r1, [r7, #8]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f000 fc5b 	bl	80063a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005aee:	6978      	ldr	r0, [r7, #20]
 8005af0:	f7ff ff28 	bl	8005944 <prvUnlockQueue>
	}
 8005af4:	bf00      	nop
 8005af6:	3718      	adds	r7, #24
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b08e      	sub	sp, #56	; 0x38
 8005b00:	af04      	add	r7, sp, #16
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
 8005b08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10a      	bne.n	8005b26 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b14:	f383 8811 	msr	BASEPRI, r3
 8005b18:	f3bf 8f6f 	isb	sy
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	623b      	str	r3, [r7, #32]
}
 8005b22:	bf00      	nop
 8005b24:	e7fe      	b.n	8005b24 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10a      	bne.n	8005b42 <xTaskCreateStatic+0x46>
	__asm volatile
 8005b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b30:	f383 8811 	msr	BASEPRI, r3
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	61fb      	str	r3, [r7, #28]
}
 8005b3e:	bf00      	nop
 8005b40:	e7fe      	b.n	8005b40 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005b42:	23b8      	movs	r3, #184	; 0xb8
 8005b44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	2bb8      	cmp	r3, #184	; 0xb8
 8005b4a:	d00a      	beq.n	8005b62 <xTaskCreateStatic+0x66>
	__asm volatile
 8005b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b50:	f383 8811 	msr	BASEPRI, r3
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	61bb      	str	r3, [r7, #24]
}
 8005b5e:	bf00      	nop
 8005b60:	e7fe      	b.n	8005b60 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d01e      	beq.n	8005ba6 <xTaskCreateStatic+0xaa>
 8005b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d01b      	beq.n	8005ba6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b70:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b76:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7a:	2202      	movs	r2, #2
 8005b7c:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005b80:	2300      	movs	r3, #0
 8005b82:	9303      	str	r3, [sp, #12]
 8005b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b86:	9302      	str	r3, [sp, #8]
 8005b88:	f107 0314 	add.w	r3, r7, #20
 8005b8c:	9301      	str	r3, [sp, #4]
 8005b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b90:	9300      	str	r3, [sp, #0]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	68b9      	ldr	r1, [r7, #8]
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f000 f851 	bl	8005c40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005ba0:	f000 f8ec 	bl	8005d7c <prvAddNewTaskToReadyList>
 8005ba4:	e001      	b.n	8005baa <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005baa:	697b      	ldr	r3, [r7, #20]
	}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3728      	adds	r7, #40	; 0x28
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b08c      	sub	sp, #48	; 0x30
 8005bb8:	af04      	add	r7, sp, #16
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	603b      	str	r3, [r7, #0]
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bc4:	88fb      	ldrh	r3, [r7, #6]
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f001 fc1f 	bl	800740c <pvPortMalloc>
 8005bce:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00e      	beq.n	8005bf4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005bd6:	20b8      	movs	r0, #184	; 0xb8
 8005bd8:	f001 fc18 	bl	800740c <pvPortMalloc>
 8005bdc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d003      	beq.n	8005bec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005be4:	69fb      	ldr	r3, [r7, #28]
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	631a      	str	r2, [r3, #48]	; 0x30
 8005bea:	e005      	b.n	8005bf8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005bec:	6978      	ldr	r0, [r7, #20]
 8005bee:	f001 fcd1 	bl	8007594 <vPortFree>
 8005bf2:	e001      	b.n	8005bf8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d017      	beq.n	8005c2e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c06:	88fa      	ldrh	r2, [r7, #6]
 8005c08:	2300      	movs	r3, #0
 8005c0a:	9303      	str	r3, [sp, #12]
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	9302      	str	r3, [sp, #8]
 8005c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c12:	9301      	str	r3, [sp, #4]
 8005c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c16:	9300      	str	r3, [sp, #0]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	68b9      	ldr	r1, [r7, #8]
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f000 f80f 	bl	8005c40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c22:	69f8      	ldr	r0, [r7, #28]
 8005c24:	f000 f8aa 	bl	8005d7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	61bb      	str	r3, [r7, #24]
 8005c2c:	e002      	b.n	8005c34 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c32:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005c34:	69bb      	ldr	r3, [r7, #24]
	}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3720      	adds	r7, #32
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
	...

08005c40 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b088      	sub	sp, #32
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	607a      	str	r2, [r7, #4]
 8005c4c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c50:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	461a      	mov	r2, r3
 8005c58:	21a5      	movs	r1, #165	; 0xa5
 8005c5a:	f001 fdaf 	bl	80077bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	4413      	add	r3, r2
 8005c6e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	f023 0307 	bic.w	r3, r3, #7
 8005c76:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	f003 0307 	and.w	r3, r3, #7
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00a      	beq.n	8005c98 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c86:	f383 8811 	msr	BASEPRI, r3
 8005c8a:	f3bf 8f6f 	isb	sy
 8005c8e:	f3bf 8f4f 	dsb	sy
 8005c92:	617b      	str	r3, [r7, #20]
}
 8005c94:	bf00      	nop
 8005c96:	e7fe      	b.n	8005c96 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c98:	2300      	movs	r3, #0
 8005c9a:	61fb      	str	r3, [r7, #28]
 8005c9c:	e012      	b.n	8005cc4 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c9e:	68ba      	ldr	r2, [r7, #8]
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	7819      	ldrb	r1, [r3, #0]
 8005ca6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	4413      	add	r3, r2
 8005cac:	3334      	adds	r3, #52	; 0x34
 8005cae:	460a      	mov	r2, r1
 8005cb0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d006      	beq.n	8005ccc <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	61fb      	str	r3, [r7, #28]
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	2b1f      	cmp	r3, #31
 8005cc8:	d9e9      	bls.n	8005c9e <prvInitialiseNewTask+0x5e>
 8005cca:	e000      	b.n	8005cce <prvInitialiseNewTask+0x8e>
		{
			break;
 8005ccc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cd8:	2b37      	cmp	r3, #55	; 0x37
 8005cda:	d901      	bls.n	8005ce0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005cdc:	2337      	movs	r3, #55	; 0x37
 8005cde:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ce4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cea:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8005cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cee:	2200      	movs	r2, #0
 8005cf0:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf4:	3304      	adds	r3, #4
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7ff f8cd 	bl	8004e96 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfe:	3318      	adds	r3, #24
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7ff f8c8 	bl	8004e96 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d1a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d2e:	3364      	adds	r3, #100	; 0x64
 8005d30:	224c      	movs	r2, #76	; 0x4c
 8005d32:	2100      	movs	r1, #0
 8005d34:	4618      	mov	r0, r3
 8005d36:	f001 fd41 	bl	80077bc <memset>
 8005d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3c:	4a0c      	ldr	r2, [pc, #48]	; (8005d70 <prvInitialiseNewTask+0x130>)
 8005d3e:	669a      	str	r2, [r3, #104]	; 0x68
 8005d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d42:	4a0c      	ldr	r2, [pc, #48]	; (8005d74 <prvInitialiseNewTask+0x134>)
 8005d44:	66da      	str	r2, [r3, #108]	; 0x6c
 8005d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d48:	4a0b      	ldr	r2, [pc, #44]	; (8005d78 <prvInitialiseNewTask+0x138>)
 8005d4a:	671a      	str	r2, [r3, #112]	; 0x70
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005d4c:	683a      	ldr	r2, [r7, #0]
 8005d4e:	68f9      	ldr	r1, [r7, #12]
 8005d50:	69b8      	ldr	r0, [r7, #24]
 8005d52:	f001 f96b 	bl	800702c <pxPortInitialiseStack>
 8005d56:	4602      	mov	r2, r0
 8005d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d002      	beq.n	8005d68 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d66:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d68:	bf00      	nop
 8005d6a:	3720      	adds	r7, #32
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	20003124 	.word	0x20003124
 8005d74:	2000318c 	.word	0x2000318c
 8005d78:	200031f4 	.word	0x200031f4

08005d7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005d84:	f001 fa42 	bl	800720c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005d88:	4b2d      	ldr	r3, [pc, #180]	; (8005e40 <prvAddNewTaskToReadyList+0xc4>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	4a2c      	ldr	r2, [pc, #176]	; (8005e40 <prvAddNewTaskToReadyList+0xc4>)
 8005d90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005d92:	4b2c      	ldr	r3, [pc, #176]	; (8005e44 <prvAddNewTaskToReadyList+0xc8>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d109      	bne.n	8005dae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005d9a:	4a2a      	ldr	r2, [pc, #168]	; (8005e44 <prvAddNewTaskToReadyList+0xc8>)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005da0:	4b27      	ldr	r3, [pc, #156]	; (8005e40 <prvAddNewTaskToReadyList+0xc4>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d110      	bne.n	8005dca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005da8:	f000 fc28 	bl	80065fc <prvInitialiseTaskLists>
 8005dac:	e00d      	b.n	8005dca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005dae:	4b26      	ldr	r3, [pc, #152]	; (8005e48 <prvAddNewTaskToReadyList+0xcc>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d109      	bne.n	8005dca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005db6:	4b23      	ldr	r3, [pc, #140]	; (8005e44 <prvAddNewTaskToReadyList+0xc8>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d802      	bhi.n	8005dca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005dc4:	4a1f      	ldr	r2, [pc, #124]	; (8005e44 <prvAddNewTaskToReadyList+0xc8>)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005dca:	4b20      	ldr	r3, [pc, #128]	; (8005e4c <prvAddNewTaskToReadyList+0xd0>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	3301      	adds	r3, #1
 8005dd0:	4a1e      	ldr	r2, [pc, #120]	; (8005e4c <prvAddNewTaskToReadyList+0xd0>)
 8005dd2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005dd4:	4b1d      	ldr	r3, [pc, #116]	; (8005e4c <prvAddNewTaskToReadyList+0xd0>)
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005de0:	4b1b      	ldr	r3, [pc, #108]	; (8005e50 <prvAddNewTaskToReadyList+0xd4>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d903      	bls.n	8005df0 <prvAddNewTaskToReadyList+0x74>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dec:	4a18      	ldr	r2, [pc, #96]	; (8005e50 <prvAddNewTaskToReadyList+0xd4>)
 8005dee:	6013      	str	r3, [r2, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df4:	4613      	mov	r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4a15      	ldr	r2, [pc, #84]	; (8005e54 <prvAddNewTaskToReadyList+0xd8>)
 8005dfe:	441a      	add	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	3304      	adds	r3, #4
 8005e04:	4619      	mov	r1, r3
 8005e06:	4610      	mov	r0, r2
 8005e08:	f7ff f851 	bl	8004eae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005e0c:	f001 fa2e 	bl	800726c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005e10:	4b0d      	ldr	r3, [pc, #52]	; (8005e48 <prvAddNewTaskToReadyList+0xcc>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d00e      	beq.n	8005e36 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e18:	4b0a      	ldr	r3, [pc, #40]	; (8005e44 <prvAddNewTaskToReadyList+0xc8>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d207      	bcs.n	8005e36 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e26:	4b0c      	ldr	r3, [pc, #48]	; (8005e58 <prvAddNewTaskToReadyList+0xdc>)
 8005e28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e2c:	601a      	str	r2, [r3, #0]
 8005e2e:	f3bf 8f4f 	dsb	sy
 8005e32:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e36:	bf00      	nop
 8005e38:	3708      	adds	r7, #8
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	20000fac 	.word	0x20000fac
 8005e44:	20000ad8 	.word	0x20000ad8
 8005e48:	20000fb8 	.word	0x20000fb8
 8005e4c:	20000fc8 	.word	0x20000fc8
 8005e50:	20000fb4 	.word	0x20000fb4
 8005e54:	20000adc 	.word	0x20000adc
 8005e58:	e000ed04 	.word	0xe000ed04

08005e5c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005e64:	2300      	movs	r3, #0
 8005e66:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d017      	beq.n	8005e9e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005e6e:	4b13      	ldr	r3, [pc, #76]	; (8005ebc <vTaskDelay+0x60>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00a      	beq.n	8005e8c <vTaskDelay+0x30>
	__asm volatile
 8005e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7a:	f383 8811 	msr	BASEPRI, r3
 8005e7e:	f3bf 8f6f 	isb	sy
 8005e82:	f3bf 8f4f 	dsb	sy
 8005e86:	60bb      	str	r3, [r7, #8]
}
 8005e88:	bf00      	nop
 8005e8a:	e7fe      	b.n	8005e8a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005e8c:	f000 f88a 	bl	8005fa4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005e90:	2100      	movs	r1, #0
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 fd64 	bl	8006960 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005e98:	f000 f892 	bl	8005fc0 <xTaskResumeAll>
 8005e9c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d107      	bne.n	8005eb4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005ea4:	4b06      	ldr	r3, [pc, #24]	; (8005ec0 <vTaskDelay+0x64>)
 8005ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eaa:	601a      	str	r2, [r3, #0]
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005eb4:	bf00      	nop
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	20000fd4 	.word	0x20000fd4
 8005ec0:	e000ed04 	.word	0xe000ed04

08005ec4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b08a      	sub	sp, #40	; 0x28
 8005ec8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005ed2:	463a      	mov	r2, r7
 8005ed4:	1d39      	adds	r1, r7, #4
 8005ed6:	f107 0308 	add.w	r3, r7, #8
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7fe ff8a 	bl	8004df4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005ee0:	6839      	ldr	r1, [r7, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	9202      	str	r2, [sp, #8]
 8005ee8:	9301      	str	r3, [sp, #4]
 8005eea:	2300      	movs	r3, #0
 8005eec:	9300      	str	r3, [sp, #0]
 8005eee:	2300      	movs	r3, #0
 8005ef0:	460a      	mov	r2, r1
 8005ef2:	4924      	ldr	r1, [pc, #144]	; (8005f84 <vTaskStartScheduler+0xc0>)
 8005ef4:	4824      	ldr	r0, [pc, #144]	; (8005f88 <vTaskStartScheduler+0xc4>)
 8005ef6:	f7ff fe01 	bl	8005afc <xTaskCreateStatic>
 8005efa:	4603      	mov	r3, r0
 8005efc:	4a23      	ldr	r2, [pc, #140]	; (8005f8c <vTaskStartScheduler+0xc8>)
 8005efe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005f00:	4b22      	ldr	r3, [pc, #136]	; (8005f8c <vTaskStartScheduler+0xc8>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d002      	beq.n	8005f0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	617b      	str	r3, [r7, #20]
 8005f0c:	e001      	b.n	8005f12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d102      	bne.n	8005f1e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005f18:	f000 fd76 	bl	8006a08 <xTimerCreateTimerTask>
 8005f1c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d11b      	bne.n	8005f5c <vTaskStartScheduler+0x98>
	__asm volatile
 8005f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f28:	f383 8811 	msr	BASEPRI, r3
 8005f2c:	f3bf 8f6f 	isb	sy
 8005f30:	f3bf 8f4f 	dsb	sy
 8005f34:	613b      	str	r3, [r7, #16]
}
 8005f36:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005f38:	4b15      	ldr	r3, [pc, #84]	; (8005f90 <vTaskStartScheduler+0xcc>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	3364      	adds	r3, #100	; 0x64
 8005f3e:	4a15      	ldr	r2, [pc, #84]	; (8005f94 <vTaskStartScheduler+0xd0>)
 8005f40:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005f42:	4b15      	ldr	r3, [pc, #84]	; (8005f98 <vTaskStartScheduler+0xd4>)
 8005f44:	f04f 32ff 	mov.w	r2, #4294967295
 8005f48:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005f4a:	4b14      	ldr	r3, [pc, #80]	; (8005f9c <vTaskStartScheduler+0xd8>)
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005f50:	4b13      	ldr	r3, [pc, #76]	; (8005fa0 <vTaskStartScheduler+0xdc>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005f56:	f001 f8e7 	bl	8007128 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005f5a:	e00e      	b.n	8005f7a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f62:	d10a      	bne.n	8005f7a <vTaskStartScheduler+0xb6>
	__asm volatile
 8005f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f68:	f383 8811 	msr	BASEPRI, r3
 8005f6c:	f3bf 8f6f 	isb	sy
 8005f70:	f3bf 8f4f 	dsb	sy
 8005f74:	60fb      	str	r3, [r7, #12]
}
 8005f76:	bf00      	nop
 8005f78:	e7fe      	b.n	8005f78 <vTaskStartScheduler+0xb4>
}
 8005f7a:	bf00      	nop
 8005f7c:	3718      	adds	r7, #24
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	08007a60 	.word	0x08007a60
 8005f88:	080065cd 	.word	0x080065cd
 8005f8c:	20000fd0 	.word	0x20000fd0
 8005f90:	20000ad8 	.word	0x20000ad8
 8005f94:	2000005c 	.word	0x2000005c
 8005f98:	20000fcc 	.word	0x20000fcc
 8005f9c:	20000fb8 	.word	0x20000fb8
 8005fa0:	20000fb0 	.word	0x20000fb0

08005fa4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005fa8:	4b04      	ldr	r3, [pc, #16]	; (8005fbc <vTaskSuspendAll+0x18>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	3301      	adds	r3, #1
 8005fae:	4a03      	ldr	r2, [pc, #12]	; (8005fbc <vTaskSuspendAll+0x18>)
 8005fb0:	6013      	str	r3, [r2, #0]
}
 8005fb2:	bf00      	nop
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bc80      	pop	{r7}
 8005fb8:	4770      	bx	lr
 8005fba:	bf00      	nop
 8005fbc:	20000fd4 	.word	0x20000fd4

08005fc0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005fce:	4b42      	ldr	r3, [pc, #264]	; (80060d8 <xTaskResumeAll+0x118>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10a      	bne.n	8005fec <xTaskResumeAll+0x2c>
	__asm volatile
 8005fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fda:	f383 8811 	msr	BASEPRI, r3
 8005fde:	f3bf 8f6f 	isb	sy
 8005fe2:	f3bf 8f4f 	dsb	sy
 8005fe6:	603b      	str	r3, [r7, #0]
}
 8005fe8:	bf00      	nop
 8005fea:	e7fe      	b.n	8005fea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005fec:	f001 f90e 	bl	800720c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005ff0:	4b39      	ldr	r3, [pc, #228]	; (80060d8 <xTaskResumeAll+0x118>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	3b01      	subs	r3, #1
 8005ff6:	4a38      	ldr	r2, [pc, #224]	; (80060d8 <xTaskResumeAll+0x118>)
 8005ff8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ffa:	4b37      	ldr	r3, [pc, #220]	; (80060d8 <xTaskResumeAll+0x118>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d162      	bne.n	80060c8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006002:	4b36      	ldr	r3, [pc, #216]	; (80060dc <xTaskResumeAll+0x11c>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d05e      	beq.n	80060c8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800600a:	e02f      	b.n	800606c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800600c:	4b34      	ldr	r3, [pc, #208]	; (80060e0 <xTaskResumeAll+0x120>)
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	3318      	adds	r3, #24
 8006018:	4618      	mov	r0, r3
 800601a:	f7fe ffa3 	bl	8004f64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	3304      	adds	r3, #4
 8006022:	4618      	mov	r0, r3
 8006024:	f7fe ff9e 	bl	8004f64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800602c:	4b2d      	ldr	r3, [pc, #180]	; (80060e4 <xTaskResumeAll+0x124>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	429a      	cmp	r2, r3
 8006032:	d903      	bls.n	800603c <xTaskResumeAll+0x7c>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006038:	4a2a      	ldr	r2, [pc, #168]	; (80060e4 <xTaskResumeAll+0x124>)
 800603a:	6013      	str	r3, [r2, #0]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006040:	4613      	mov	r3, r2
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	4413      	add	r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4a27      	ldr	r2, [pc, #156]	; (80060e8 <xTaskResumeAll+0x128>)
 800604a:	441a      	add	r2, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	3304      	adds	r3, #4
 8006050:	4619      	mov	r1, r3
 8006052:	4610      	mov	r0, r2
 8006054:	f7fe ff2b 	bl	8004eae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800605c:	4b23      	ldr	r3, [pc, #140]	; (80060ec <xTaskResumeAll+0x12c>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006062:	429a      	cmp	r2, r3
 8006064:	d302      	bcc.n	800606c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006066:	4b22      	ldr	r3, [pc, #136]	; (80060f0 <xTaskResumeAll+0x130>)
 8006068:	2201      	movs	r2, #1
 800606a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800606c:	4b1c      	ldr	r3, [pc, #112]	; (80060e0 <xTaskResumeAll+0x120>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d1cb      	bne.n	800600c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d001      	beq.n	800607e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800607a:	f000 fb61 	bl	8006740 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800607e:	4b1d      	ldr	r3, [pc, #116]	; (80060f4 <xTaskResumeAll+0x134>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d010      	beq.n	80060ac <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800608a:	f000 f845 	bl	8006118 <xTaskIncrementTick>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d002      	beq.n	800609a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006094:	4b16      	ldr	r3, [pc, #88]	; (80060f0 <xTaskResumeAll+0x130>)
 8006096:	2201      	movs	r2, #1
 8006098:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	3b01      	subs	r3, #1
 800609e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1f1      	bne.n	800608a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80060a6:	4b13      	ldr	r3, [pc, #76]	; (80060f4 <xTaskResumeAll+0x134>)
 80060a8:	2200      	movs	r2, #0
 80060aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80060ac:	4b10      	ldr	r3, [pc, #64]	; (80060f0 <xTaskResumeAll+0x130>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d009      	beq.n	80060c8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80060b4:	2301      	movs	r3, #1
 80060b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80060b8:	4b0f      	ldr	r3, [pc, #60]	; (80060f8 <xTaskResumeAll+0x138>)
 80060ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060be:	601a      	str	r2, [r3, #0]
 80060c0:	f3bf 8f4f 	dsb	sy
 80060c4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80060c8:	f001 f8d0 	bl	800726c <vPortExitCritical>

	return xAlreadyYielded;
 80060cc:	68bb      	ldr	r3, [r7, #8]
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	20000fd4 	.word	0x20000fd4
 80060dc:	20000fac 	.word	0x20000fac
 80060e0:	20000f6c 	.word	0x20000f6c
 80060e4:	20000fb4 	.word	0x20000fb4
 80060e8:	20000adc 	.word	0x20000adc
 80060ec:	20000ad8 	.word	0x20000ad8
 80060f0:	20000fc0 	.word	0x20000fc0
 80060f4:	20000fbc 	.word	0x20000fbc
 80060f8:	e000ed04 	.word	0xe000ed04

080060fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006102:	4b04      	ldr	r3, [pc, #16]	; (8006114 <xTaskGetTickCount+0x18>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006108:	687b      	ldr	r3, [r7, #4]
}
 800610a:	4618      	mov	r0, r3
 800610c:	370c      	adds	r7, #12
 800610e:	46bd      	mov	sp, r7
 8006110:	bc80      	pop	{r7}
 8006112:	4770      	bx	lr
 8006114:	20000fb0 	.word	0x20000fb0

08006118 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b086      	sub	sp, #24
 800611c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800611e:	2300      	movs	r3, #0
 8006120:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006122:	4b51      	ldr	r3, [pc, #324]	; (8006268 <xTaskIncrementTick+0x150>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	f040 808e 	bne.w	8006248 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800612c:	4b4f      	ldr	r3, [pc, #316]	; (800626c <xTaskIncrementTick+0x154>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	3301      	adds	r3, #1
 8006132:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006134:	4a4d      	ldr	r2, [pc, #308]	; (800626c <xTaskIncrementTick+0x154>)
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d120      	bne.n	8006182 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006140:	4b4b      	ldr	r3, [pc, #300]	; (8006270 <xTaskIncrementTick+0x158>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00a      	beq.n	8006160 <xTaskIncrementTick+0x48>
	__asm volatile
 800614a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614e:	f383 8811 	msr	BASEPRI, r3
 8006152:	f3bf 8f6f 	isb	sy
 8006156:	f3bf 8f4f 	dsb	sy
 800615a:	603b      	str	r3, [r7, #0]
}
 800615c:	bf00      	nop
 800615e:	e7fe      	b.n	800615e <xTaskIncrementTick+0x46>
 8006160:	4b43      	ldr	r3, [pc, #268]	; (8006270 <xTaskIncrementTick+0x158>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	60fb      	str	r3, [r7, #12]
 8006166:	4b43      	ldr	r3, [pc, #268]	; (8006274 <xTaskIncrementTick+0x15c>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a41      	ldr	r2, [pc, #260]	; (8006270 <xTaskIncrementTick+0x158>)
 800616c:	6013      	str	r3, [r2, #0]
 800616e:	4a41      	ldr	r2, [pc, #260]	; (8006274 <xTaskIncrementTick+0x15c>)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6013      	str	r3, [r2, #0]
 8006174:	4b40      	ldr	r3, [pc, #256]	; (8006278 <xTaskIncrementTick+0x160>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	3301      	adds	r3, #1
 800617a:	4a3f      	ldr	r2, [pc, #252]	; (8006278 <xTaskIncrementTick+0x160>)
 800617c:	6013      	str	r3, [r2, #0]
 800617e:	f000 fadf 	bl	8006740 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006182:	4b3e      	ldr	r3, [pc, #248]	; (800627c <xTaskIncrementTick+0x164>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	429a      	cmp	r2, r3
 800618a:	d34e      	bcc.n	800622a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800618c:	4b38      	ldr	r3, [pc, #224]	; (8006270 <xTaskIncrementTick+0x158>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d101      	bne.n	800619a <xTaskIncrementTick+0x82>
 8006196:	2301      	movs	r3, #1
 8006198:	e000      	b.n	800619c <xTaskIncrementTick+0x84>
 800619a:	2300      	movs	r3, #0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d004      	beq.n	80061aa <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061a0:	4b36      	ldr	r3, [pc, #216]	; (800627c <xTaskIncrementTick+0x164>)
 80061a2:	f04f 32ff 	mov.w	r2, #4294967295
 80061a6:	601a      	str	r2, [r3, #0]
					break;
 80061a8:	e03f      	b.n	800622a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80061aa:	4b31      	ldr	r3, [pc, #196]	; (8006270 <xTaskIncrementTick+0x158>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d203      	bcs.n	80061ca <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80061c2:	4a2e      	ldr	r2, [pc, #184]	; (800627c <xTaskIncrementTick+0x164>)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6013      	str	r3, [r2, #0]
						break;
 80061c8:	e02f      	b.n	800622a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	3304      	adds	r3, #4
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7fe fec8 	bl	8004f64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d004      	beq.n	80061e6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	3318      	adds	r3, #24
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7fe febf 	bl	8004f64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ea:	4b25      	ldr	r3, [pc, #148]	; (8006280 <xTaskIncrementTick+0x168>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d903      	bls.n	80061fa <xTaskIncrementTick+0xe2>
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f6:	4a22      	ldr	r2, [pc, #136]	; (8006280 <xTaskIncrementTick+0x168>)
 80061f8:	6013      	str	r3, [r2, #0]
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061fe:	4613      	mov	r3, r2
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	4413      	add	r3, r2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	4a1f      	ldr	r2, [pc, #124]	; (8006284 <xTaskIncrementTick+0x16c>)
 8006208:	441a      	add	r2, r3
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	3304      	adds	r3, #4
 800620e:	4619      	mov	r1, r3
 8006210:	4610      	mov	r0, r2
 8006212:	f7fe fe4c 	bl	8004eae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800621a:	4b1b      	ldr	r3, [pc, #108]	; (8006288 <xTaskIncrementTick+0x170>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006220:	429a      	cmp	r2, r3
 8006222:	d3b3      	bcc.n	800618c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006224:	2301      	movs	r3, #1
 8006226:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006228:	e7b0      	b.n	800618c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800622a:	4b17      	ldr	r3, [pc, #92]	; (8006288 <xTaskIncrementTick+0x170>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006230:	4914      	ldr	r1, [pc, #80]	; (8006284 <xTaskIncrementTick+0x16c>)
 8006232:	4613      	mov	r3, r2
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	4413      	add	r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	440b      	add	r3, r1
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2b01      	cmp	r3, #1
 8006240:	d907      	bls.n	8006252 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006242:	2301      	movs	r3, #1
 8006244:	617b      	str	r3, [r7, #20]
 8006246:	e004      	b.n	8006252 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006248:	4b10      	ldr	r3, [pc, #64]	; (800628c <xTaskIncrementTick+0x174>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	3301      	adds	r3, #1
 800624e:	4a0f      	ldr	r2, [pc, #60]	; (800628c <xTaskIncrementTick+0x174>)
 8006250:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006252:	4b0f      	ldr	r3, [pc, #60]	; (8006290 <xTaskIncrementTick+0x178>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d001      	beq.n	800625e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800625a:	2301      	movs	r3, #1
 800625c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800625e:	697b      	ldr	r3, [r7, #20]
}
 8006260:	4618      	mov	r0, r3
 8006262:	3718      	adds	r7, #24
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	20000fd4 	.word	0x20000fd4
 800626c:	20000fb0 	.word	0x20000fb0
 8006270:	20000f64 	.word	0x20000f64
 8006274:	20000f68 	.word	0x20000f68
 8006278:	20000fc4 	.word	0x20000fc4
 800627c:	20000fcc 	.word	0x20000fcc
 8006280:	20000fb4 	.word	0x20000fb4
 8006284:	20000adc 	.word	0x20000adc
 8006288:	20000ad8 	.word	0x20000ad8
 800628c:	20000fbc 	.word	0x20000fbc
 8006290:	20000fc0 	.word	0x20000fc0

08006294 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800629a:	4b2a      	ldr	r3, [pc, #168]	; (8006344 <vTaskSwitchContext+0xb0>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d003      	beq.n	80062aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80062a2:	4b29      	ldr	r3, [pc, #164]	; (8006348 <vTaskSwitchContext+0xb4>)
 80062a4:	2201      	movs	r2, #1
 80062a6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80062a8:	e046      	b.n	8006338 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80062aa:	4b27      	ldr	r3, [pc, #156]	; (8006348 <vTaskSwitchContext+0xb4>)
 80062ac:	2200      	movs	r2, #0
 80062ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80062b0:	4b26      	ldr	r3, [pc, #152]	; (800634c <vTaskSwitchContext+0xb8>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	60fb      	str	r3, [r7, #12]
 80062b6:	e010      	b.n	80062da <vTaskSwitchContext+0x46>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d10a      	bne.n	80062d4 <vTaskSwitchContext+0x40>
	__asm volatile
 80062be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c2:	f383 8811 	msr	BASEPRI, r3
 80062c6:	f3bf 8f6f 	isb	sy
 80062ca:	f3bf 8f4f 	dsb	sy
 80062ce:	607b      	str	r3, [r7, #4]
}
 80062d0:	bf00      	nop
 80062d2:	e7fe      	b.n	80062d2 <vTaskSwitchContext+0x3e>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	3b01      	subs	r3, #1
 80062d8:	60fb      	str	r3, [r7, #12]
 80062da:	491d      	ldr	r1, [pc, #116]	; (8006350 <vTaskSwitchContext+0xbc>)
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	4613      	mov	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	440b      	add	r3, r1
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d0e4      	beq.n	80062b8 <vTaskSwitchContext+0x24>
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	4613      	mov	r3, r2
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	4413      	add	r3, r2
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	4a15      	ldr	r2, [pc, #84]	; (8006350 <vTaskSwitchContext+0xbc>)
 80062fa:	4413      	add	r3, r2
 80062fc:	60bb      	str	r3, [r7, #8]
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	685a      	ldr	r2, [r3, #4]
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	605a      	str	r2, [r3, #4]
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	3308      	adds	r3, #8
 8006310:	429a      	cmp	r2, r3
 8006312:	d104      	bne.n	800631e <vTaskSwitchContext+0x8a>
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	685a      	ldr	r2, [r3, #4]
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	605a      	str	r2, [r3, #4]
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	4a0b      	ldr	r2, [pc, #44]	; (8006354 <vTaskSwitchContext+0xc0>)
 8006326:	6013      	str	r3, [r2, #0]
 8006328:	4a08      	ldr	r2, [pc, #32]	; (800634c <vTaskSwitchContext+0xb8>)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800632e:	4b09      	ldr	r3, [pc, #36]	; (8006354 <vTaskSwitchContext+0xc0>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	3364      	adds	r3, #100	; 0x64
 8006334:	4a08      	ldr	r2, [pc, #32]	; (8006358 <vTaskSwitchContext+0xc4>)
 8006336:	6013      	str	r3, [r2, #0]
}
 8006338:	bf00      	nop
 800633a:	3714      	adds	r7, #20
 800633c:	46bd      	mov	sp, r7
 800633e:	bc80      	pop	{r7}
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	20000fd4 	.word	0x20000fd4
 8006348:	20000fc0 	.word	0x20000fc0
 800634c:	20000fb4 	.word	0x20000fb4
 8006350:	20000adc 	.word	0x20000adc
 8006354:	20000ad8 	.word	0x20000ad8
 8006358:	2000005c 	.word	0x2000005c

0800635c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d10a      	bne.n	8006382 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800636c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006370:	f383 8811 	msr	BASEPRI, r3
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	f3bf 8f4f 	dsb	sy
 800637c:	60fb      	str	r3, [r7, #12]
}
 800637e:	bf00      	nop
 8006380:	e7fe      	b.n	8006380 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006382:	4b07      	ldr	r3, [pc, #28]	; (80063a0 <vTaskPlaceOnEventList+0x44>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	3318      	adds	r3, #24
 8006388:	4619      	mov	r1, r3
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f7fe fdb2 	bl	8004ef4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006390:	2101      	movs	r1, #1
 8006392:	6838      	ldr	r0, [r7, #0]
 8006394:	f000 fae4 	bl	8006960 <prvAddCurrentTaskToDelayedList>
}
 8006398:	bf00      	nop
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	20000ad8 	.word	0x20000ad8

080063a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b086      	sub	sp, #24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d10a      	bne.n	80063cc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80063b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ba:	f383 8811 	msr	BASEPRI, r3
 80063be:	f3bf 8f6f 	isb	sy
 80063c2:	f3bf 8f4f 	dsb	sy
 80063c6:	617b      	str	r3, [r7, #20]
}
 80063c8:	bf00      	nop
 80063ca:	e7fe      	b.n	80063ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80063cc:	4b0a      	ldr	r3, [pc, #40]	; (80063f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	3318      	adds	r3, #24
 80063d2:	4619      	mov	r1, r3
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f7fe fd6a 	bl	8004eae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d002      	beq.n	80063e6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80063e0:	f04f 33ff 	mov.w	r3, #4294967295
 80063e4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80063e6:	6879      	ldr	r1, [r7, #4]
 80063e8:	68b8      	ldr	r0, [r7, #8]
 80063ea:	f000 fab9 	bl	8006960 <prvAddCurrentTaskToDelayedList>
	}
 80063ee:	bf00      	nop
 80063f0:	3718      	adds	r7, #24
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	20000ad8 	.word	0x20000ad8

080063fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10a      	bne.n	8006428 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006416:	f383 8811 	msr	BASEPRI, r3
 800641a:	f3bf 8f6f 	isb	sy
 800641e:	f3bf 8f4f 	dsb	sy
 8006422:	60fb      	str	r3, [r7, #12]
}
 8006424:	bf00      	nop
 8006426:	e7fe      	b.n	8006426 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	3318      	adds	r3, #24
 800642c:	4618      	mov	r0, r3
 800642e:	f7fe fd99 	bl	8004f64 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006432:	4b1e      	ldr	r3, [pc, #120]	; (80064ac <xTaskRemoveFromEventList+0xb0>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d11d      	bne.n	8006476 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	3304      	adds	r3, #4
 800643e:	4618      	mov	r0, r3
 8006440:	f7fe fd90 	bl	8004f64 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006448:	4b19      	ldr	r3, [pc, #100]	; (80064b0 <xTaskRemoveFromEventList+0xb4>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	429a      	cmp	r2, r3
 800644e:	d903      	bls.n	8006458 <xTaskRemoveFromEventList+0x5c>
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006454:	4a16      	ldr	r2, [pc, #88]	; (80064b0 <xTaskRemoveFromEventList+0xb4>)
 8006456:	6013      	str	r3, [r2, #0]
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800645c:	4613      	mov	r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4413      	add	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4a13      	ldr	r2, [pc, #76]	; (80064b4 <xTaskRemoveFromEventList+0xb8>)
 8006466:	441a      	add	r2, r3
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	3304      	adds	r3, #4
 800646c:	4619      	mov	r1, r3
 800646e:	4610      	mov	r0, r2
 8006470:	f7fe fd1d 	bl	8004eae <vListInsertEnd>
 8006474:	e005      	b.n	8006482 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	3318      	adds	r3, #24
 800647a:	4619      	mov	r1, r3
 800647c:	480e      	ldr	r0, [pc, #56]	; (80064b8 <xTaskRemoveFromEventList+0xbc>)
 800647e:	f7fe fd16 	bl	8004eae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006486:	4b0d      	ldr	r3, [pc, #52]	; (80064bc <xTaskRemoveFromEventList+0xc0>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648c:	429a      	cmp	r2, r3
 800648e:	d905      	bls.n	800649c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006490:	2301      	movs	r3, #1
 8006492:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006494:	4b0a      	ldr	r3, [pc, #40]	; (80064c0 <xTaskRemoveFromEventList+0xc4>)
 8006496:	2201      	movs	r2, #1
 8006498:	601a      	str	r2, [r3, #0]
 800649a:	e001      	b.n	80064a0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800649c:	2300      	movs	r3, #0
 800649e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80064a0:	697b      	ldr	r3, [r7, #20]
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3718      	adds	r7, #24
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	20000fd4 	.word	0x20000fd4
 80064b0:	20000fb4 	.word	0x20000fb4
 80064b4:	20000adc 	.word	0x20000adc
 80064b8:	20000f6c 	.word	0x20000f6c
 80064bc:	20000ad8 	.word	0x20000ad8
 80064c0:	20000fc0 	.word	0x20000fc0

080064c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80064cc:	4b06      	ldr	r3, [pc, #24]	; (80064e8 <vTaskInternalSetTimeOutState+0x24>)
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80064d4:	4b05      	ldr	r3, [pc, #20]	; (80064ec <vTaskInternalSetTimeOutState+0x28>)
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	605a      	str	r2, [r3, #4]
}
 80064dc:	bf00      	nop
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bc80      	pop	{r7}
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	20000fc4 	.word	0x20000fc4
 80064ec:	20000fb0 	.word	0x20000fb0

080064f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b088      	sub	sp, #32
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d10a      	bne.n	8006516 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006504:	f383 8811 	msr	BASEPRI, r3
 8006508:	f3bf 8f6f 	isb	sy
 800650c:	f3bf 8f4f 	dsb	sy
 8006510:	613b      	str	r3, [r7, #16]
}
 8006512:	bf00      	nop
 8006514:	e7fe      	b.n	8006514 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10a      	bne.n	8006532 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800651c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006520:	f383 8811 	msr	BASEPRI, r3
 8006524:	f3bf 8f6f 	isb	sy
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	60fb      	str	r3, [r7, #12]
}
 800652e:	bf00      	nop
 8006530:	e7fe      	b.n	8006530 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006532:	f000 fe6b 	bl	800720c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006536:	4b1d      	ldr	r3, [pc, #116]	; (80065ac <xTaskCheckForTimeOut+0xbc>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	69ba      	ldr	r2, [r7, #24]
 8006542:	1ad3      	subs	r3, r2, r3
 8006544:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800654e:	d102      	bne.n	8006556 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006550:	2300      	movs	r3, #0
 8006552:	61fb      	str	r3, [r7, #28]
 8006554:	e023      	b.n	800659e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	4b15      	ldr	r3, [pc, #84]	; (80065b0 <xTaskCheckForTimeOut+0xc0>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	429a      	cmp	r2, r3
 8006560:	d007      	beq.n	8006572 <xTaskCheckForTimeOut+0x82>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	69ba      	ldr	r2, [r7, #24]
 8006568:	429a      	cmp	r2, r3
 800656a:	d302      	bcc.n	8006572 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800656c:	2301      	movs	r3, #1
 800656e:	61fb      	str	r3, [r7, #28]
 8006570:	e015      	b.n	800659e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	429a      	cmp	r2, r3
 800657a:	d20b      	bcs.n	8006594 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	1ad2      	subs	r2, r2, r3
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f7ff ff9b 	bl	80064c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800658e:	2300      	movs	r3, #0
 8006590:	61fb      	str	r3, [r7, #28]
 8006592:	e004      	b.n	800659e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	2200      	movs	r2, #0
 8006598:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800659a:	2301      	movs	r3, #1
 800659c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800659e:	f000 fe65 	bl	800726c <vPortExitCritical>

	return xReturn;
 80065a2:	69fb      	ldr	r3, [r7, #28]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3720      	adds	r7, #32
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	20000fb0 	.word	0x20000fb0
 80065b0:	20000fc4 	.word	0x20000fc4

080065b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80065b4:	b480      	push	{r7}
 80065b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80065b8:	4b03      	ldr	r3, [pc, #12]	; (80065c8 <vTaskMissedYield+0x14>)
 80065ba:	2201      	movs	r2, #1
 80065bc:	601a      	str	r2, [r3, #0]
}
 80065be:	bf00      	nop
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bc80      	pop	{r7}
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	20000fc0 	.word	0x20000fc0

080065cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80065d4:	f000 f852 	bl	800667c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80065d8:	4b06      	ldr	r3, [pc, #24]	; (80065f4 <prvIdleTask+0x28>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d9f9      	bls.n	80065d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80065e0:	4b05      	ldr	r3, [pc, #20]	; (80065f8 <prvIdleTask+0x2c>)
 80065e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065e6:	601a      	str	r2, [r3, #0]
 80065e8:	f3bf 8f4f 	dsb	sy
 80065ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80065f0:	e7f0      	b.n	80065d4 <prvIdleTask+0x8>
 80065f2:	bf00      	nop
 80065f4:	20000adc 	.word	0x20000adc
 80065f8:	e000ed04 	.word	0xe000ed04

080065fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006602:	2300      	movs	r3, #0
 8006604:	607b      	str	r3, [r7, #4]
 8006606:	e00c      	b.n	8006622 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	4613      	mov	r3, r2
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	4413      	add	r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	4a12      	ldr	r2, [pc, #72]	; (800665c <prvInitialiseTaskLists+0x60>)
 8006614:	4413      	add	r3, r2
 8006616:	4618      	mov	r0, r3
 8006618:	f7fe fc1e 	bl	8004e58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	3301      	adds	r3, #1
 8006620:	607b      	str	r3, [r7, #4]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2b37      	cmp	r3, #55	; 0x37
 8006626:	d9ef      	bls.n	8006608 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006628:	480d      	ldr	r0, [pc, #52]	; (8006660 <prvInitialiseTaskLists+0x64>)
 800662a:	f7fe fc15 	bl	8004e58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800662e:	480d      	ldr	r0, [pc, #52]	; (8006664 <prvInitialiseTaskLists+0x68>)
 8006630:	f7fe fc12 	bl	8004e58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006634:	480c      	ldr	r0, [pc, #48]	; (8006668 <prvInitialiseTaskLists+0x6c>)
 8006636:	f7fe fc0f 	bl	8004e58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800663a:	480c      	ldr	r0, [pc, #48]	; (800666c <prvInitialiseTaskLists+0x70>)
 800663c:	f7fe fc0c 	bl	8004e58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006640:	480b      	ldr	r0, [pc, #44]	; (8006670 <prvInitialiseTaskLists+0x74>)
 8006642:	f7fe fc09 	bl	8004e58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006646:	4b0b      	ldr	r3, [pc, #44]	; (8006674 <prvInitialiseTaskLists+0x78>)
 8006648:	4a05      	ldr	r2, [pc, #20]	; (8006660 <prvInitialiseTaskLists+0x64>)
 800664a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800664c:	4b0a      	ldr	r3, [pc, #40]	; (8006678 <prvInitialiseTaskLists+0x7c>)
 800664e:	4a05      	ldr	r2, [pc, #20]	; (8006664 <prvInitialiseTaskLists+0x68>)
 8006650:	601a      	str	r2, [r3, #0]
}
 8006652:	bf00      	nop
 8006654:	3708      	adds	r7, #8
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	20000adc 	.word	0x20000adc
 8006660:	20000f3c 	.word	0x20000f3c
 8006664:	20000f50 	.word	0x20000f50
 8006668:	20000f6c 	.word	0x20000f6c
 800666c:	20000f80 	.word	0x20000f80
 8006670:	20000f98 	.word	0x20000f98
 8006674:	20000f64 	.word	0x20000f64
 8006678:	20000f68 	.word	0x20000f68

0800667c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006682:	e019      	b.n	80066b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006684:	f000 fdc2 	bl	800720c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006688:	4b10      	ldr	r3, [pc, #64]	; (80066cc <prvCheckTasksWaitingTermination+0x50>)
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	3304      	adds	r3, #4
 8006694:	4618      	mov	r0, r3
 8006696:	f7fe fc65 	bl	8004f64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800669a:	4b0d      	ldr	r3, [pc, #52]	; (80066d0 <prvCheckTasksWaitingTermination+0x54>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	3b01      	subs	r3, #1
 80066a0:	4a0b      	ldr	r2, [pc, #44]	; (80066d0 <prvCheckTasksWaitingTermination+0x54>)
 80066a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80066a4:	4b0b      	ldr	r3, [pc, #44]	; (80066d4 <prvCheckTasksWaitingTermination+0x58>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	3b01      	subs	r3, #1
 80066aa:	4a0a      	ldr	r2, [pc, #40]	; (80066d4 <prvCheckTasksWaitingTermination+0x58>)
 80066ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80066ae:	f000 fddd 	bl	800726c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f810 	bl	80066d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80066b8:	4b06      	ldr	r3, [pc, #24]	; (80066d4 <prvCheckTasksWaitingTermination+0x58>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1e1      	bne.n	8006684 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80066c0:	bf00      	nop
 80066c2:	bf00      	nop
 80066c4:	3708      	adds	r7, #8
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	20000f80 	.word	0x20000f80
 80066d0:	20000fac 	.word	0x20000fac
 80066d4:	20000f94 	.word	0x20000f94

080066d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	3364      	adds	r3, #100	; 0x64
 80066e4:	4618      	mov	r0, r3
 80066e6:	f001 f871 	bl	80077cc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d108      	bne.n	8006706 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f8:	4618      	mov	r0, r3
 80066fa:	f000 ff4b 	bl	8007594 <vPortFree>
				vPortFree( pxTCB );
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 ff48 	bl	8007594 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006704:	e018      	b.n	8006738 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800670c:	2b01      	cmp	r3, #1
 800670e:	d103      	bne.n	8006718 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 ff3f 	bl	8007594 <vPortFree>
	}
 8006716:	e00f      	b.n	8006738 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 800671e:	2b02      	cmp	r3, #2
 8006720:	d00a      	beq.n	8006738 <prvDeleteTCB+0x60>
	__asm volatile
 8006722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006726:	f383 8811 	msr	BASEPRI, r3
 800672a:	f3bf 8f6f 	isb	sy
 800672e:	f3bf 8f4f 	dsb	sy
 8006732:	60fb      	str	r3, [r7, #12]
}
 8006734:	bf00      	nop
 8006736:	e7fe      	b.n	8006736 <prvDeleteTCB+0x5e>
	}
 8006738:	bf00      	nop
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006746:	4b0e      	ldr	r3, [pc, #56]	; (8006780 <prvResetNextTaskUnblockTime+0x40>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d101      	bne.n	8006754 <prvResetNextTaskUnblockTime+0x14>
 8006750:	2301      	movs	r3, #1
 8006752:	e000      	b.n	8006756 <prvResetNextTaskUnblockTime+0x16>
 8006754:	2300      	movs	r3, #0
 8006756:	2b00      	cmp	r3, #0
 8006758:	d004      	beq.n	8006764 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800675a:	4b0a      	ldr	r3, [pc, #40]	; (8006784 <prvResetNextTaskUnblockTime+0x44>)
 800675c:	f04f 32ff 	mov.w	r2, #4294967295
 8006760:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006762:	e008      	b.n	8006776 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006764:	4b06      	ldr	r3, [pc, #24]	; (8006780 <prvResetNextTaskUnblockTime+0x40>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	4a04      	ldr	r2, [pc, #16]	; (8006784 <prvResetNextTaskUnblockTime+0x44>)
 8006774:	6013      	str	r3, [r2, #0]
}
 8006776:	bf00      	nop
 8006778:	370c      	adds	r7, #12
 800677a:	46bd      	mov	sp, r7
 800677c:	bc80      	pop	{r7}
 800677e:	4770      	bx	lr
 8006780:	20000f64 	.word	0x20000f64
 8006784:	20000fcc 	.word	0x20000fcc

08006788 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800678e:	4b0b      	ldr	r3, [pc, #44]	; (80067bc <xTaskGetSchedulerState+0x34>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d102      	bne.n	800679c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006796:	2301      	movs	r3, #1
 8006798:	607b      	str	r3, [r7, #4]
 800679a:	e008      	b.n	80067ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800679c:	4b08      	ldr	r3, [pc, #32]	; (80067c0 <xTaskGetSchedulerState+0x38>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d102      	bne.n	80067aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80067a4:	2302      	movs	r3, #2
 80067a6:	607b      	str	r3, [r7, #4]
 80067a8:	e001      	b.n	80067ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80067aa:	2300      	movs	r3, #0
 80067ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80067ae:	687b      	ldr	r3, [r7, #4]
	}
 80067b0:	4618      	mov	r0, r3
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bc80      	pop	{r7}
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	20000fb8 	.word	0x20000fb8
 80067c0:	20000fd4 	.word	0x20000fd4

080067c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b086      	sub	sp, #24
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80067d0:	2300      	movs	r3, #0
 80067d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d056      	beq.n	8006888 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80067da:	4b2e      	ldr	r3, [pc, #184]	; (8006894 <xTaskPriorityDisinherit+0xd0>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	693a      	ldr	r2, [r7, #16]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d00a      	beq.n	80067fa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80067e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e8:	f383 8811 	msr	BASEPRI, r3
 80067ec:	f3bf 8f6f 	isb	sy
 80067f0:	f3bf 8f4f 	dsb	sy
 80067f4:	60fb      	str	r3, [r7, #12]
}
 80067f6:	bf00      	nop
 80067f8:	e7fe      	b.n	80067f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10a      	bne.n	8006818 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006806:	f383 8811 	msr	BASEPRI, r3
 800680a:	f3bf 8f6f 	isb	sy
 800680e:	f3bf 8f4f 	dsb	sy
 8006812:	60bb      	str	r3, [r7, #8]
}
 8006814:	bf00      	nop
 8006816:	e7fe      	b.n	8006816 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800681c:	1e5a      	subs	r2, r3, #1
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800682a:	429a      	cmp	r2, r3
 800682c:	d02c      	beq.n	8006888 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006832:	2b00      	cmp	r3, #0
 8006834:	d128      	bne.n	8006888 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	3304      	adds	r3, #4
 800683a:	4618      	mov	r0, r3
 800683c:	f7fe fb92 	bl	8004f64 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006858:	4b0f      	ldr	r3, [pc, #60]	; (8006898 <xTaskPriorityDisinherit+0xd4>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	429a      	cmp	r2, r3
 800685e:	d903      	bls.n	8006868 <xTaskPriorityDisinherit+0xa4>
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006864:	4a0c      	ldr	r2, [pc, #48]	; (8006898 <xTaskPriorityDisinherit+0xd4>)
 8006866:	6013      	str	r3, [r2, #0]
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800686c:	4613      	mov	r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	4413      	add	r3, r2
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	4a09      	ldr	r2, [pc, #36]	; (800689c <xTaskPriorityDisinherit+0xd8>)
 8006876:	441a      	add	r2, r3
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	3304      	adds	r3, #4
 800687c:	4619      	mov	r1, r3
 800687e:	4610      	mov	r0, r2
 8006880:	f7fe fb15 	bl	8004eae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006884:	2301      	movs	r3, #1
 8006886:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006888:	697b      	ldr	r3, [r7, #20]
	}
 800688a:	4618      	mov	r0, r3
 800688c:	3718      	adds	r7, #24
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	20000ad8 	.word	0x20000ad8
 8006898:	20000fb4 	.word	0x20000fb4
 800689c:	20000adc 	.word	0x20000adc

080068a0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b086      	sub	sp, #24
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	607a      	str	r2, [r7, #4]
 80068ac:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80068ae:	f000 fcad 	bl	800720c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80068b2:	4b29      	ldr	r3, [pc, #164]	; (8006958 <xTaskNotifyWait+0xb8>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	2b02      	cmp	r3, #2
 80068be:	d01c      	beq.n	80068fa <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80068c0:	4b25      	ldr	r3, [pc, #148]	; (8006958 <xTaskNotifyWait+0xb8>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	43d2      	mvns	r2, r2
 80068cc:	400a      	ands	r2, r1
 80068ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80068d2:	4b21      	ldr	r3, [pc, #132]	; (8006958 <xTaskNotifyWait+0xb8>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

				if( xTicksToWait > ( TickType_t ) 0 )
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00b      	beq.n	80068fa <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80068e2:	2101      	movs	r1, #1
 80068e4:	6838      	ldr	r0, [r7, #0]
 80068e6:	f000 f83b 	bl	8006960 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80068ea:	4b1c      	ldr	r3, [pc, #112]	; (800695c <xTaskNotifyWait+0xbc>)
 80068ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068f0:	601a      	str	r2, [r3, #0]
 80068f2:	f3bf 8f4f 	dsb	sy
 80068f6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80068fa:	f000 fcb7 	bl	800726c <vPortExitCritical>

		taskENTER_CRITICAL();
 80068fe:	f000 fc85 	bl	800720c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d005      	beq.n	8006914 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8006908:	4b13      	ldr	r3, [pc, #76]	; (8006958 <xTaskNotifyWait+0xb8>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006914:	4b10      	ldr	r3, [pc, #64]	; (8006958 <xTaskNotifyWait+0xb8>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800691c:	b2db      	uxtb	r3, r3
 800691e:	2b02      	cmp	r3, #2
 8006920:	d002      	beq.n	8006928 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8006922:	2300      	movs	r3, #0
 8006924:	617b      	str	r3, [r7, #20]
 8006926:	e00a      	b.n	800693e <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8006928:	4b0b      	ldr	r3, [pc, #44]	; (8006958 <xTaskNotifyWait+0xb8>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8006930:	68ba      	ldr	r2, [r7, #8]
 8006932:	43d2      	mvns	r2, r2
 8006934:	400a      	ands	r2, r1
 8006936:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
				xReturn = pdTRUE;
 800693a:	2301      	movs	r3, #1
 800693c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800693e:	4b06      	ldr	r3, [pc, #24]	; (8006958 <xTaskNotifyWait+0xb8>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
		}
		taskEXIT_CRITICAL();
 8006948:	f000 fc90 	bl	800726c <vPortExitCritical>

		return xReturn;
 800694c:	697b      	ldr	r3, [r7, #20]
	}
 800694e:	4618      	mov	r0, r3
 8006950:	3718      	adds	r7, #24
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	20000ad8 	.word	0x20000ad8
 800695c:	e000ed04 	.word	0xe000ed04

08006960 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800696a:	4b21      	ldr	r3, [pc, #132]	; (80069f0 <prvAddCurrentTaskToDelayedList+0x90>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006970:	4b20      	ldr	r3, [pc, #128]	; (80069f4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	3304      	adds	r3, #4
 8006976:	4618      	mov	r0, r3
 8006978:	f7fe faf4 	bl	8004f64 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006982:	d10a      	bne.n	800699a <prvAddCurrentTaskToDelayedList+0x3a>
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d007      	beq.n	800699a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800698a:	4b1a      	ldr	r3, [pc, #104]	; (80069f4 <prvAddCurrentTaskToDelayedList+0x94>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	3304      	adds	r3, #4
 8006990:	4619      	mov	r1, r3
 8006992:	4819      	ldr	r0, [pc, #100]	; (80069f8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006994:	f7fe fa8b 	bl	8004eae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006998:	e026      	b.n	80069e8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4413      	add	r3, r2
 80069a0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80069a2:	4b14      	ldr	r3, [pc, #80]	; (80069f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68ba      	ldr	r2, [r7, #8]
 80069a8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d209      	bcs.n	80069c6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069b2:	4b12      	ldr	r3, [pc, #72]	; (80069fc <prvAddCurrentTaskToDelayedList+0x9c>)
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	4b0f      	ldr	r3, [pc, #60]	; (80069f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	3304      	adds	r3, #4
 80069bc:	4619      	mov	r1, r3
 80069be:	4610      	mov	r0, r2
 80069c0:	f7fe fa98 	bl	8004ef4 <vListInsert>
}
 80069c4:	e010      	b.n	80069e8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069c6:	4b0e      	ldr	r3, [pc, #56]	; (8006a00 <prvAddCurrentTaskToDelayedList+0xa0>)
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	4b0a      	ldr	r3, [pc, #40]	; (80069f4 <prvAddCurrentTaskToDelayedList+0x94>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	3304      	adds	r3, #4
 80069d0:	4619      	mov	r1, r3
 80069d2:	4610      	mov	r0, r2
 80069d4:	f7fe fa8e 	bl	8004ef4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80069d8:	4b0a      	ldr	r3, [pc, #40]	; (8006a04 <prvAddCurrentTaskToDelayedList+0xa4>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d202      	bcs.n	80069e8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80069e2:	4a08      	ldr	r2, [pc, #32]	; (8006a04 <prvAddCurrentTaskToDelayedList+0xa4>)
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	6013      	str	r3, [r2, #0]
}
 80069e8:	bf00      	nop
 80069ea:	3710      	adds	r7, #16
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	20000fb0 	.word	0x20000fb0
 80069f4:	20000ad8 	.word	0x20000ad8
 80069f8:	20000f98 	.word	0x20000f98
 80069fc:	20000f68 	.word	0x20000f68
 8006a00:	20000f64 	.word	0x20000f64
 8006a04:	20000fcc 	.word	0x20000fcc

08006a08 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b08a      	sub	sp, #40	; 0x28
 8006a0c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006a12:	f000 facb 	bl	8006fac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006a16:	4b1c      	ldr	r3, [pc, #112]	; (8006a88 <xTimerCreateTimerTask+0x80>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d021      	beq.n	8006a62 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006a22:	2300      	movs	r3, #0
 8006a24:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006a26:	1d3a      	adds	r2, r7, #4
 8006a28:	f107 0108 	add.w	r1, r7, #8
 8006a2c:	f107 030c 	add.w	r3, r7, #12
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7fe f9f7 	bl	8004e24 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006a36:	6879      	ldr	r1, [r7, #4]
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	9202      	str	r2, [sp, #8]
 8006a3e:	9301      	str	r3, [sp, #4]
 8006a40:	2302      	movs	r3, #2
 8006a42:	9300      	str	r3, [sp, #0]
 8006a44:	2300      	movs	r3, #0
 8006a46:	460a      	mov	r2, r1
 8006a48:	4910      	ldr	r1, [pc, #64]	; (8006a8c <xTimerCreateTimerTask+0x84>)
 8006a4a:	4811      	ldr	r0, [pc, #68]	; (8006a90 <xTimerCreateTimerTask+0x88>)
 8006a4c:	f7ff f856 	bl	8005afc <xTaskCreateStatic>
 8006a50:	4603      	mov	r3, r0
 8006a52:	4a10      	ldr	r2, [pc, #64]	; (8006a94 <xTimerCreateTimerTask+0x8c>)
 8006a54:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006a56:	4b0f      	ldr	r3, [pc, #60]	; (8006a94 <xTimerCreateTimerTask+0x8c>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d001      	beq.n	8006a62 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10a      	bne.n	8006a7e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6c:	f383 8811 	msr	BASEPRI, r3
 8006a70:	f3bf 8f6f 	isb	sy
 8006a74:	f3bf 8f4f 	dsb	sy
 8006a78:	613b      	str	r3, [r7, #16]
}
 8006a7a:	bf00      	nop
 8006a7c:	e7fe      	b.n	8006a7c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006a7e:	697b      	ldr	r3, [r7, #20]
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3718      	adds	r7, #24
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	20001008 	.word	0x20001008
 8006a8c:	08007a68 	.word	0x08007a68
 8006a90:	08006bb5 	.word	0x08006bb5
 8006a94:	2000100c 	.word	0x2000100c

08006a98 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b08a      	sub	sp, #40	; 0x28
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
 8006aa4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d10a      	bne.n	8006ac6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab4:	f383 8811 	msr	BASEPRI, r3
 8006ab8:	f3bf 8f6f 	isb	sy
 8006abc:	f3bf 8f4f 	dsb	sy
 8006ac0:	623b      	str	r3, [r7, #32]
}
 8006ac2:	bf00      	nop
 8006ac4:	e7fe      	b.n	8006ac4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006ac6:	4b1a      	ldr	r3, [pc, #104]	; (8006b30 <xTimerGenericCommand+0x98>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d02a      	beq.n	8006b24 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	2b05      	cmp	r3, #5
 8006ade:	dc18      	bgt.n	8006b12 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006ae0:	f7ff fe52 	bl	8006788 <xTaskGetSchedulerState>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d109      	bne.n	8006afe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006aea:	4b11      	ldr	r3, [pc, #68]	; (8006b30 <xTimerGenericCommand+0x98>)
 8006aec:	6818      	ldr	r0, [r3, #0]
 8006aee:	f107 0110 	add.w	r1, r7, #16
 8006af2:	2300      	movs	r3, #0
 8006af4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006af6:	f7fe fb9f 	bl	8005238 <xQueueGenericSend>
 8006afa:	6278      	str	r0, [r7, #36]	; 0x24
 8006afc:	e012      	b.n	8006b24 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006afe:	4b0c      	ldr	r3, [pc, #48]	; (8006b30 <xTimerGenericCommand+0x98>)
 8006b00:	6818      	ldr	r0, [r3, #0]
 8006b02:	f107 0110 	add.w	r1, r7, #16
 8006b06:	2300      	movs	r3, #0
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f7fe fb95 	bl	8005238 <xQueueGenericSend>
 8006b0e:	6278      	str	r0, [r7, #36]	; 0x24
 8006b10:	e008      	b.n	8006b24 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006b12:	4b07      	ldr	r3, [pc, #28]	; (8006b30 <xTimerGenericCommand+0x98>)
 8006b14:	6818      	ldr	r0, [r3, #0]
 8006b16:	f107 0110 	add.w	r1, r7, #16
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	683a      	ldr	r2, [r7, #0]
 8006b1e:	f7fe fc89 	bl	8005434 <xQueueGenericSendFromISR>
 8006b22:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3728      	adds	r7, #40	; 0x28
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	20001008 	.word	0x20001008

08006b34 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b088      	sub	sp, #32
 8006b38:	af02      	add	r7, sp, #8
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b3e:	4b1c      	ldr	r3, [pc, #112]	; (8006bb0 <prvProcessExpiredTimer+0x7c>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	3304      	adds	r3, #4
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f7fe fa09 	bl	8004f64 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	69db      	ldr	r3, [r3, #28]
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d122      	bne.n	8006ba0 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	699a      	ldr	r2, [r3, #24]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	18d1      	adds	r1, r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	683a      	ldr	r2, [r7, #0]
 8006b66:	6978      	ldr	r0, [r7, #20]
 8006b68:	f000 f8c8 	bl	8006cfc <prvInsertTimerInActiveList>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d016      	beq.n	8006ba0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b72:	2300      	movs	r3, #0
 8006b74:	9300      	str	r3, [sp, #0]
 8006b76:	2300      	movs	r3, #0
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	2100      	movs	r1, #0
 8006b7c:	6978      	ldr	r0, [r7, #20]
 8006b7e:	f7ff ff8b 	bl	8006a98 <xTimerGenericCommand>
 8006b82:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d10a      	bne.n	8006ba0 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8006b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8e:	f383 8811 	msr	BASEPRI, r3
 8006b92:	f3bf 8f6f 	isb	sy
 8006b96:	f3bf 8f4f 	dsb	sy
 8006b9a:	60fb      	str	r3, [r7, #12]
}
 8006b9c:	bf00      	nop
 8006b9e:	e7fe      	b.n	8006b9e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba4:	6978      	ldr	r0, [r7, #20]
 8006ba6:	4798      	blx	r3
}
 8006ba8:	bf00      	nop
 8006baa:	3718      	adds	r7, #24
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	20001000 	.word	0x20001000

08006bb4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006bbc:	f107 0308 	add.w	r3, r7, #8
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f000 f857 	bl	8006c74 <prvGetNextExpireTime>
 8006bc6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	4619      	mov	r1, r3
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f000 f803 	bl	8006bd8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006bd2:	f000 f8d5 	bl	8006d80 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006bd6:	e7f1      	b.n	8006bbc <prvTimerTask+0x8>

08006bd8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006be2:	f7ff f9df 	bl	8005fa4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006be6:	f107 0308 	add.w	r3, r7, #8
 8006bea:	4618      	mov	r0, r3
 8006bec:	f000 f866 	bl	8006cbc <prvSampleTimeNow>
 8006bf0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d130      	bne.n	8006c5a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d10a      	bne.n	8006c14 <prvProcessTimerOrBlockTask+0x3c>
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d806      	bhi.n	8006c14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006c06:	f7ff f9db 	bl	8005fc0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006c0a:	68f9      	ldr	r1, [r7, #12]
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f7ff ff91 	bl	8006b34 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006c12:	e024      	b.n	8006c5e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d008      	beq.n	8006c2c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006c1a:	4b13      	ldr	r3, [pc, #76]	; (8006c68 <prvProcessTimerOrBlockTask+0x90>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	bf0c      	ite	eq
 8006c24:	2301      	moveq	r3, #1
 8006c26:	2300      	movne	r3, #0
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006c2c:	4b0f      	ldr	r3, [pc, #60]	; (8006c6c <prvProcessTimerOrBlockTask+0x94>)
 8006c2e:	6818      	ldr	r0, [r3, #0]
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	683a      	ldr	r2, [r7, #0]
 8006c38:	4619      	mov	r1, r3
 8006c3a:	f7fe ff2b 	bl	8005a94 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006c3e:	f7ff f9bf 	bl	8005fc0 <xTaskResumeAll>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d10a      	bne.n	8006c5e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006c48:	4b09      	ldr	r3, [pc, #36]	; (8006c70 <prvProcessTimerOrBlockTask+0x98>)
 8006c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c4e:	601a      	str	r2, [r3, #0]
 8006c50:	f3bf 8f4f 	dsb	sy
 8006c54:	f3bf 8f6f 	isb	sy
}
 8006c58:	e001      	b.n	8006c5e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006c5a:	f7ff f9b1 	bl	8005fc0 <xTaskResumeAll>
}
 8006c5e:	bf00      	nop
 8006c60:	3710      	adds	r7, #16
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	20001004 	.word	0x20001004
 8006c6c:	20001008 	.word	0x20001008
 8006c70:	e000ed04 	.word	0xe000ed04

08006c74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006c74:	b480      	push	{r7}
 8006c76:	b085      	sub	sp, #20
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006c7c:	4b0e      	ldr	r3, [pc, #56]	; (8006cb8 <prvGetNextExpireTime+0x44>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	bf0c      	ite	eq
 8006c86:	2301      	moveq	r3, #1
 8006c88:	2300      	movne	r3, #0
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d105      	bne.n	8006ca6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c9a:	4b07      	ldr	r3, [pc, #28]	; (8006cb8 <prvGetNextExpireTime+0x44>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	60fb      	str	r3, [r7, #12]
 8006ca4:	e001      	b.n	8006caa <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006caa:	68fb      	ldr	r3, [r7, #12]
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3714      	adds	r7, #20
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bc80      	pop	{r7}
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	20001000 	.word	0x20001000

08006cbc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006cc4:	f7ff fa1a 	bl	80060fc <xTaskGetTickCount>
 8006cc8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006cca:	4b0b      	ldr	r3, [pc, #44]	; (8006cf8 <prvSampleTimeNow+0x3c>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d205      	bcs.n	8006ce0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006cd4:	f000 f908 	bl	8006ee8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	601a      	str	r2, [r3, #0]
 8006cde:	e002      	b.n	8006ce6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006ce6:	4a04      	ldr	r2, [pc, #16]	; (8006cf8 <prvSampleTimeNow+0x3c>)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006cec:	68fb      	ldr	r3, [r7, #12]
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3710      	adds	r7, #16
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	20001010 	.word	0x20001010

08006cfc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b086      	sub	sp, #24
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]
 8006d08:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	68ba      	ldr	r2, [r7, #8]
 8006d12:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d812      	bhi.n	8006d48 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	1ad2      	subs	r2, r2, r3
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	699b      	ldr	r3, [r3, #24]
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d302      	bcc.n	8006d36 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006d30:	2301      	movs	r3, #1
 8006d32:	617b      	str	r3, [r7, #20]
 8006d34:	e01b      	b.n	8006d6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006d36:	4b10      	ldr	r3, [pc, #64]	; (8006d78 <prvInsertTimerInActiveList+0x7c>)
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	3304      	adds	r3, #4
 8006d3e:	4619      	mov	r1, r3
 8006d40:	4610      	mov	r0, r2
 8006d42:	f7fe f8d7 	bl	8004ef4 <vListInsert>
 8006d46:	e012      	b.n	8006d6e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d206      	bcs.n	8006d5e <prvInsertTimerInActiveList+0x62>
 8006d50:	68ba      	ldr	r2, [r7, #8]
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d302      	bcc.n	8006d5e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	617b      	str	r3, [r7, #20]
 8006d5c:	e007      	b.n	8006d6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d5e:	4b07      	ldr	r3, [pc, #28]	; (8006d7c <prvInsertTimerInActiveList+0x80>)
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	3304      	adds	r3, #4
 8006d66:	4619      	mov	r1, r3
 8006d68:	4610      	mov	r0, r2
 8006d6a:	f7fe f8c3 	bl	8004ef4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006d6e:	697b      	ldr	r3, [r7, #20]
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3718      	adds	r7, #24
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	20001004 	.word	0x20001004
 8006d7c:	20001000 	.word	0x20001000

08006d80 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b08e      	sub	sp, #56	; 0x38
 8006d84:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d86:	e09d      	b.n	8006ec4 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	da18      	bge.n	8006dc0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006d8e:	1d3b      	adds	r3, r7, #4
 8006d90:	3304      	adds	r3, #4
 8006d92:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d10a      	bne.n	8006db0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9e:	f383 8811 	msr	BASEPRI, r3
 8006da2:	f3bf 8f6f 	isb	sy
 8006da6:	f3bf 8f4f 	dsb	sy
 8006daa:	61fb      	str	r3, [r7, #28]
}
 8006dac:	bf00      	nop
 8006dae:	e7fe      	b.n	8006dae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006db6:	6850      	ldr	r0, [r2, #4]
 8006db8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dba:	6892      	ldr	r2, [r2, #8]
 8006dbc:	4611      	mov	r1, r2
 8006dbe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	db7e      	blt.n	8006ec4 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dcc:	695b      	ldr	r3, [r3, #20]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d004      	beq.n	8006ddc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd4:	3304      	adds	r3, #4
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7fe f8c4 	bl	8004f64 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ddc:	463b      	mov	r3, r7
 8006dde:	4618      	mov	r0, r3
 8006de0:	f7ff ff6c 	bl	8006cbc <prvSampleTimeNow>
 8006de4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2b09      	cmp	r3, #9
 8006dea:	d86a      	bhi.n	8006ec2 <prvProcessReceivedCommands+0x142>
 8006dec:	a201      	add	r2, pc, #4	; (adr r2, 8006df4 <prvProcessReceivedCommands+0x74>)
 8006dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df2:	bf00      	nop
 8006df4:	08006e1d 	.word	0x08006e1d
 8006df8:	08006e1d 	.word	0x08006e1d
 8006dfc:	08006e1d 	.word	0x08006e1d
 8006e00:	08006ec5 	.word	0x08006ec5
 8006e04:	08006e79 	.word	0x08006e79
 8006e08:	08006eb1 	.word	0x08006eb1
 8006e0c:	08006e1d 	.word	0x08006e1d
 8006e10:	08006e1d 	.word	0x08006e1d
 8006e14:	08006ec5 	.word	0x08006ec5
 8006e18:	08006e79 	.word	0x08006e79
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006e1c:	68ba      	ldr	r2, [r7, #8]
 8006e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	18d1      	adds	r1, r2, r3
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e2a:	f7ff ff67 	bl	8006cfc <prvInsertTimerInActiveList>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d047      	beq.n	8006ec4 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e3a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3e:	69db      	ldr	r3, [r3, #28]
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d13f      	bne.n	8006ec4 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006e44:	68ba      	ldr	r2, [r7, #8]
 8006e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e48:	699b      	ldr	r3, [r3, #24]
 8006e4a:	441a      	add	r2, r3
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	2300      	movs	r3, #0
 8006e52:	2100      	movs	r1, #0
 8006e54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e56:	f7ff fe1f 	bl	8006a98 <xTimerGenericCommand>
 8006e5a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006e5c:	6a3b      	ldr	r3, [r7, #32]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d130      	bne.n	8006ec4 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8006e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e66:	f383 8811 	msr	BASEPRI, r3
 8006e6a:	f3bf 8f6f 	isb	sy
 8006e6e:	f3bf 8f4f 	dsb	sy
 8006e72:	61bb      	str	r3, [r7, #24]
}
 8006e74:	bf00      	nop
 8006e76:	e7fe      	b.n	8006e76 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006e78:	68ba      	ldr	r2, [r7, #8]
 8006e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e80:	699b      	ldr	r3, [r3, #24]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d10a      	bne.n	8006e9c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8006e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8a:	f383 8811 	msr	BASEPRI, r3
 8006e8e:	f3bf 8f6f 	isb	sy
 8006e92:	f3bf 8f4f 	dsb	sy
 8006e96:	617b      	str	r3, [r7, #20]
}
 8006e98:	bf00      	nop
 8006e9a:	e7fe      	b.n	8006e9a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9e:	699a      	ldr	r2, [r3, #24]
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea2:	18d1      	adds	r1, r2, r3
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ea8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eaa:	f7ff ff27 	bl	8006cfc <prvInsertTimerInActiveList>
					break;
 8006eae:	e009      	b.n	8006ec4 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d104      	bne.n	8006ec4 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8006eba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ebc:	f000 fb6a 	bl	8007594 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006ec0:	e000      	b.n	8006ec4 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8006ec2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ec4:	4b07      	ldr	r3, [pc, #28]	; (8006ee4 <prvProcessReceivedCommands+0x164>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	1d39      	adds	r1, r7, #4
 8006eca:	2200      	movs	r2, #0
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7fe fb49 	bl	8005564 <xQueueReceive>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f47f af57 	bne.w	8006d88 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006eda:	bf00      	nop
 8006edc:	bf00      	nop
 8006ede:	3730      	adds	r7, #48	; 0x30
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	20001008 	.word	0x20001008

08006ee8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b088      	sub	sp, #32
 8006eec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006eee:	e045      	b.n	8006f7c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ef0:	4b2c      	ldr	r3, [pc, #176]	; (8006fa4 <prvSwitchTimerLists+0xbc>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006efa:	4b2a      	ldr	r3, [pc, #168]	; (8006fa4 <prvSwitchTimerLists+0xbc>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	3304      	adds	r3, #4
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7fe f82b 	bl	8004f64 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	69db      	ldr	r3, [r3, #28]
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d12e      	bne.n	8006f7c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	699b      	ldr	r3, [r3, #24]
 8006f22:	693a      	ldr	r2, [r7, #16]
 8006f24:	4413      	add	r3, r2
 8006f26:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006f28:	68ba      	ldr	r2, [r7, #8]
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d90e      	bls.n	8006f4e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	68ba      	ldr	r2, [r7, #8]
 8006f34:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f3c:	4b19      	ldr	r3, [pc, #100]	; (8006fa4 <prvSwitchTimerLists+0xbc>)
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	3304      	adds	r3, #4
 8006f44:	4619      	mov	r1, r3
 8006f46:	4610      	mov	r0, r2
 8006f48:	f7fd ffd4 	bl	8004ef4 <vListInsert>
 8006f4c:	e016      	b.n	8006f7c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006f4e:	2300      	movs	r3, #0
 8006f50:	9300      	str	r3, [sp, #0]
 8006f52:	2300      	movs	r3, #0
 8006f54:	693a      	ldr	r2, [r7, #16]
 8006f56:	2100      	movs	r1, #0
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f7ff fd9d 	bl	8006a98 <xTimerGenericCommand>
 8006f5e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10a      	bne.n	8006f7c <prvSwitchTimerLists+0x94>
	__asm volatile
 8006f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6a:	f383 8811 	msr	BASEPRI, r3
 8006f6e:	f3bf 8f6f 	isb	sy
 8006f72:	f3bf 8f4f 	dsb	sy
 8006f76:	603b      	str	r3, [r7, #0]
}
 8006f78:	bf00      	nop
 8006f7a:	e7fe      	b.n	8006f7a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f7c:	4b09      	ldr	r3, [pc, #36]	; (8006fa4 <prvSwitchTimerLists+0xbc>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1b4      	bne.n	8006ef0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006f86:	4b07      	ldr	r3, [pc, #28]	; (8006fa4 <prvSwitchTimerLists+0xbc>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006f8c:	4b06      	ldr	r3, [pc, #24]	; (8006fa8 <prvSwitchTimerLists+0xc0>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a04      	ldr	r2, [pc, #16]	; (8006fa4 <prvSwitchTimerLists+0xbc>)
 8006f92:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006f94:	4a04      	ldr	r2, [pc, #16]	; (8006fa8 <prvSwitchTimerLists+0xc0>)
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	6013      	str	r3, [r2, #0]
}
 8006f9a:	bf00      	nop
 8006f9c:	3718      	adds	r7, #24
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
 8006fa2:	bf00      	nop
 8006fa4:	20001000 	.word	0x20001000
 8006fa8:	20001004 	.word	0x20001004

08006fac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006fb2:	f000 f92b 	bl	800720c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006fb6:	4b15      	ldr	r3, [pc, #84]	; (800700c <prvCheckForValidListAndQueue+0x60>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d120      	bne.n	8007000 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006fbe:	4814      	ldr	r0, [pc, #80]	; (8007010 <prvCheckForValidListAndQueue+0x64>)
 8006fc0:	f7fd ff4a 	bl	8004e58 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006fc4:	4813      	ldr	r0, [pc, #76]	; (8007014 <prvCheckForValidListAndQueue+0x68>)
 8006fc6:	f7fd ff47 	bl	8004e58 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006fca:	4b13      	ldr	r3, [pc, #76]	; (8007018 <prvCheckForValidListAndQueue+0x6c>)
 8006fcc:	4a10      	ldr	r2, [pc, #64]	; (8007010 <prvCheckForValidListAndQueue+0x64>)
 8006fce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006fd0:	4b12      	ldr	r3, [pc, #72]	; (800701c <prvCheckForValidListAndQueue+0x70>)
 8006fd2:	4a10      	ldr	r2, [pc, #64]	; (8007014 <prvCheckForValidListAndQueue+0x68>)
 8006fd4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	9300      	str	r3, [sp, #0]
 8006fda:	4b11      	ldr	r3, [pc, #68]	; (8007020 <prvCheckForValidListAndQueue+0x74>)
 8006fdc:	4a11      	ldr	r2, [pc, #68]	; (8007024 <prvCheckForValidListAndQueue+0x78>)
 8006fde:	2110      	movs	r1, #16
 8006fe0:	200a      	movs	r0, #10
 8006fe2:	f7fe f851 	bl	8005088 <xQueueGenericCreateStatic>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	4a08      	ldr	r2, [pc, #32]	; (800700c <prvCheckForValidListAndQueue+0x60>)
 8006fea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006fec:	4b07      	ldr	r3, [pc, #28]	; (800700c <prvCheckForValidListAndQueue+0x60>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d005      	beq.n	8007000 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006ff4:	4b05      	ldr	r3, [pc, #20]	; (800700c <prvCheckForValidListAndQueue+0x60>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	490b      	ldr	r1, [pc, #44]	; (8007028 <prvCheckForValidListAndQueue+0x7c>)
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f7fe fd22 	bl	8005a44 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007000:	f000 f934 	bl	800726c <vPortExitCritical>
}
 8007004:	bf00      	nop
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	20001008 	.word	0x20001008
 8007010:	20000fd8 	.word	0x20000fd8
 8007014:	20000fec 	.word	0x20000fec
 8007018:	20001000 	.word	0x20001000
 800701c:	20001004 	.word	0x20001004
 8007020:	200010b4 	.word	0x200010b4
 8007024:	20001014 	.word	0x20001014
 8007028:	08007a70 	.word	0x08007a70

0800702c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	3b04      	subs	r3, #4
 800703c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007044:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	3b04      	subs	r3, #4
 800704a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	f023 0201 	bic.w	r2, r3, #1
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	3b04      	subs	r3, #4
 800705a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800705c:	4a08      	ldr	r2, [pc, #32]	; (8007080 <pxPortInitialiseStack+0x54>)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	3b14      	subs	r3, #20
 8007066:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	3b20      	subs	r3, #32
 8007072:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007074:	68fb      	ldr	r3, [r7, #12]
}
 8007076:	4618      	mov	r0, r3
 8007078:	3714      	adds	r7, #20
 800707a:	46bd      	mov	sp, r7
 800707c:	bc80      	pop	{r7}
 800707e:	4770      	bx	lr
 8007080:	08007085 	.word	0x08007085

08007084 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007084:	b480      	push	{r7}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800708a:	2300      	movs	r3, #0
 800708c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800708e:	4b12      	ldr	r3, [pc, #72]	; (80070d8 <prvTaskExitError+0x54>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007096:	d00a      	beq.n	80070ae <prvTaskExitError+0x2a>
	__asm volatile
 8007098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800709c:	f383 8811 	msr	BASEPRI, r3
 80070a0:	f3bf 8f6f 	isb	sy
 80070a4:	f3bf 8f4f 	dsb	sy
 80070a8:	60fb      	str	r3, [r7, #12]
}
 80070aa:	bf00      	nop
 80070ac:	e7fe      	b.n	80070ac <prvTaskExitError+0x28>
	__asm volatile
 80070ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b2:	f383 8811 	msr	BASEPRI, r3
 80070b6:	f3bf 8f6f 	isb	sy
 80070ba:	f3bf 8f4f 	dsb	sy
 80070be:	60bb      	str	r3, [r7, #8]
}
 80070c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80070c2:	bf00      	nop
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d0fc      	beq.n	80070c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80070ca:	bf00      	nop
 80070cc:	bf00      	nop
 80070ce:	3714      	adds	r7, #20
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bc80      	pop	{r7}
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	2000000c 	.word	0x2000000c
 80070dc:	00000000 	.word	0x00000000

080070e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80070e0:	4b07      	ldr	r3, [pc, #28]	; (8007100 <pxCurrentTCBConst2>)
 80070e2:	6819      	ldr	r1, [r3, #0]
 80070e4:	6808      	ldr	r0, [r1, #0]
 80070e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80070ea:	f380 8809 	msr	PSP, r0
 80070ee:	f3bf 8f6f 	isb	sy
 80070f2:	f04f 0000 	mov.w	r0, #0
 80070f6:	f380 8811 	msr	BASEPRI, r0
 80070fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80070fe:	4770      	bx	lr

08007100 <pxCurrentTCBConst2>:
 8007100:	20000ad8 	.word	0x20000ad8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007104:	bf00      	nop
 8007106:	bf00      	nop

08007108 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007108:	4806      	ldr	r0, [pc, #24]	; (8007124 <prvPortStartFirstTask+0x1c>)
 800710a:	6800      	ldr	r0, [r0, #0]
 800710c:	6800      	ldr	r0, [r0, #0]
 800710e:	f380 8808 	msr	MSP, r0
 8007112:	b662      	cpsie	i
 8007114:	b661      	cpsie	f
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	f3bf 8f6f 	isb	sy
 800711e:	df00      	svc	0
 8007120:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007122:	bf00      	nop
 8007124:	e000ed08 	.word	0xe000ed08

08007128 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800712e:	4b32      	ldr	r3, [pc, #200]	; (80071f8 <xPortStartScheduler+0xd0>)
 8007130:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	b2db      	uxtb	r3, r3
 8007138:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	22ff      	movs	r2, #255	; 0xff
 800713e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	b2db      	uxtb	r3, r3
 8007146:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007148:	78fb      	ldrb	r3, [r7, #3]
 800714a:	b2db      	uxtb	r3, r3
 800714c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007150:	b2da      	uxtb	r2, r3
 8007152:	4b2a      	ldr	r3, [pc, #168]	; (80071fc <xPortStartScheduler+0xd4>)
 8007154:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007156:	4b2a      	ldr	r3, [pc, #168]	; (8007200 <xPortStartScheduler+0xd8>)
 8007158:	2207      	movs	r2, #7
 800715a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800715c:	e009      	b.n	8007172 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800715e:	4b28      	ldr	r3, [pc, #160]	; (8007200 <xPortStartScheduler+0xd8>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	3b01      	subs	r3, #1
 8007164:	4a26      	ldr	r2, [pc, #152]	; (8007200 <xPortStartScheduler+0xd8>)
 8007166:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007168:	78fb      	ldrb	r3, [r7, #3]
 800716a:	b2db      	uxtb	r3, r3
 800716c:	005b      	lsls	r3, r3, #1
 800716e:	b2db      	uxtb	r3, r3
 8007170:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007172:	78fb      	ldrb	r3, [r7, #3]
 8007174:	b2db      	uxtb	r3, r3
 8007176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800717a:	2b80      	cmp	r3, #128	; 0x80
 800717c:	d0ef      	beq.n	800715e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800717e:	4b20      	ldr	r3, [pc, #128]	; (8007200 <xPortStartScheduler+0xd8>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f1c3 0307 	rsb	r3, r3, #7
 8007186:	2b04      	cmp	r3, #4
 8007188:	d00a      	beq.n	80071a0 <xPortStartScheduler+0x78>
	__asm volatile
 800718a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718e:	f383 8811 	msr	BASEPRI, r3
 8007192:	f3bf 8f6f 	isb	sy
 8007196:	f3bf 8f4f 	dsb	sy
 800719a:	60bb      	str	r3, [r7, #8]
}
 800719c:	bf00      	nop
 800719e:	e7fe      	b.n	800719e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80071a0:	4b17      	ldr	r3, [pc, #92]	; (8007200 <xPortStartScheduler+0xd8>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	021b      	lsls	r3, r3, #8
 80071a6:	4a16      	ldr	r2, [pc, #88]	; (8007200 <xPortStartScheduler+0xd8>)
 80071a8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80071aa:	4b15      	ldr	r3, [pc, #84]	; (8007200 <xPortStartScheduler+0xd8>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80071b2:	4a13      	ldr	r2, [pc, #76]	; (8007200 <xPortStartScheduler+0xd8>)
 80071b4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	b2da      	uxtb	r2, r3
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80071be:	4b11      	ldr	r3, [pc, #68]	; (8007204 <xPortStartScheduler+0xdc>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a10      	ldr	r2, [pc, #64]	; (8007204 <xPortStartScheduler+0xdc>)
 80071c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80071c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80071ca:	4b0e      	ldr	r3, [pc, #56]	; (8007204 <xPortStartScheduler+0xdc>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a0d      	ldr	r2, [pc, #52]	; (8007204 <xPortStartScheduler+0xdc>)
 80071d0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80071d4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80071d6:	f000 f8b9 	bl	800734c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80071da:	4b0b      	ldr	r3, [pc, #44]	; (8007208 <xPortStartScheduler+0xe0>)
 80071dc:	2200      	movs	r2, #0
 80071de:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80071e0:	f7ff ff92 	bl	8007108 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80071e4:	f7ff f856 	bl	8006294 <vTaskSwitchContext>
	prvTaskExitError();
 80071e8:	f7ff ff4c 	bl	8007084 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3710      	adds	r7, #16
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	e000e400 	.word	0xe000e400
 80071fc:	20001104 	.word	0x20001104
 8007200:	20001108 	.word	0x20001108
 8007204:	e000ed20 	.word	0xe000ed20
 8007208:	2000000c 	.word	0x2000000c

0800720c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
	__asm volatile
 8007212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007216:	f383 8811 	msr	BASEPRI, r3
 800721a:	f3bf 8f6f 	isb	sy
 800721e:	f3bf 8f4f 	dsb	sy
 8007222:	607b      	str	r3, [r7, #4]
}
 8007224:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007226:	4b0f      	ldr	r3, [pc, #60]	; (8007264 <vPortEnterCritical+0x58>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	3301      	adds	r3, #1
 800722c:	4a0d      	ldr	r2, [pc, #52]	; (8007264 <vPortEnterCritical+0x58>)
 800722e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007230:	4b0c      	ldr	r3, [pc, #48]	; (8007264 <vPortEnterCritical+0x58>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	2b01      	cmp	r3, #1
 8007236:	d10f      	bne.n	8007258 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007238:	4b0b      	ldr	r3, [pc, #44]	; (8007268 <vPortEnterCritical+0x5c>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b00      	cmp	r3, #0
 8007240:	d00a      	beq.n	8007258 <vPortEnterCritical+0x4c>
	__asm volatile
 8007242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007246:	f383 8811 	msr	BASEPRI, r3
 800724a:	f3bf 8f6f 	isb	sy
 800724e:	f3bf 8f4f 	dsb	sy
 8007252:	603b      	str	r3, [r7, #0]
}
 8007254:	bf00      	nop
 8007256:	e7fe      	b.n	8007256 <vPortEnterCritical+0x4a>
	}
}
 8007258:	bf00      	nop
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	bc80      	pop	{r7}
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	2000000c 	.word	0x2000000c
 8007268:	e000ed04 	.word	0xe000ed04

0800726c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007272:	4b11      	ldr	r3, [pc, #68]	; (80072b8 <vPortExitCritical+0x4c>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d10a      	bne.n	8007290 <vPortExitCritical+0x24>
	__asm volatile
 800727a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727e:	f383 8811 	msr	BASEPRI, r3
 8007282:	f3bf 8f6f 	isb	sy
 8007286:	f3bf 8f4f 	dsb	sy
 800728a:	607b      	str	r3, [r7, #4]
}
 800728c:	bf00      	nop
 800728e:	e7fe      	b.n	800728e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007290:	4b09      	ldr	r3, [pc, #36]	; (80072b8 <vPortExitCritical+0x4c>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	3b01      	subs	r3, #1
 8007296:	4a08      	ldr	r2, [pc, #32]	; (80072b8 <vPortExitCritical+0x4c>)
 8007298:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800729a:	4b07      	ldr	r3, [pc, #28]	; (80072b8 <vPortExitCritical+0x4c>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d105      	bne.n	80072ae <vPortExitCritical+0x42>
 80072a2:	2300      	movs	r3, #0
 80072a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	f383 8811 	msr	BASEPRI, r3
}
 80072ac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80072ae:	bf00      	nop
 80072b0:	370c      	adds	r7, #12
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bc80      	pop	{r7}
 80072b6:	4770      	bx	lr
 80072b8:	2000000c 	.word	0x2000000c
 80072bc:	00000000 	.word	0x00000000

080072c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80072c0:	f3ef 8009 	mrs	r0, PSP
 80072c4:	f3bf 8f6f 	isb	sy
 80072c8:	4b0d      	ldr	r3, [pc, #52]	; (8007300 <pxCurrentTCBConst>)
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80072d0:	6010      	str	r0, [r2, #0]
 80072d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80072d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80072da:	f380 8811 	msr	BASEPRI, r0
 80072de:	f7fe ffd9 	bl	8006294 <vTaskSwitchContext>
 80072e2:	f04f 0000 	mov.w	r0, #0
 80072e6:	f380 8811 	msr	BASEPRI, r0
 80072ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80072ee:	6819      	ldr	r1, [r3, #0]
 80072f0:	6808      	ldr	r0, [r1, #0]
 80072f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80072f6:	f380 8809 	msr	PSP, r0
 80072fa:	f3bf 8f6f 	isb	sy
 80072fe:	4770      	bx	lr

08007300 <pxCurrentTCBConst>:
 8007300:	20000ad8 	.word	0x20000ad8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007304:	bf00      	nop
 8007306:	bf00      	nop

08007308 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
	__asm volatile
 800730e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007312:	f383 8811 	msr	BASEPRI, r3
 8007316:	f3bf 8f6f 	isb	sy
 800731a:	f3bf 8f4f 	dsb	sy
 800731e:	607b      	str	r3, [r7, #4]
}
 8007320:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007322:	f7fe fef9 	bl	8006118 <xTaskIncrementTick>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d003      	beq.n	8007334 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800732c:	4b06      	ldr	r3, [pc, #24]	; (8007348 <xPortSysTickHandler+0x40>)
 800732e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007332:	601a      	str	r2, [r3, #0]
 8007334:	2300      	movs	r3, #0
 8007336:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	f383 8811 	msr	BASEPRI, r3
}
 800733e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007340:	bf00      	nop
 8007342:	3708      	adds	r7, #8
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}
 8007348:	e000ed04 	.word	0xe000ed04

0800734c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800734c:	b480      	push	{r7}
 800734e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007350:	4b0a      	ldr	r3, [pc, #40]	; (800737c <vPortSetupTimerInterrupt+0x30>)
 8007352:	2200      	movs	r2, #0
 8007354:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007356:	4b0a      	ldr	r3, [pc, #40]	; (8007380 <vPortSetupTimerInterrupt+0x34>)
 8007358:	2200      	movs	r2, #0
 800735a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800735c:	4b09      	ldr	r3, [pc, #36]	; (8007384 <vPortSetupTimerInterrupt+0x38>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a09      	ldr	r2, [pc, #36]	; (8007388 <vPortSetupTimerInterrupt+0x3c>)
 8007362:	fba2 2303 	umull	r2, r3, r2, r3
 8007366:	099b      	lsrs	r3, r3, #6
 8007368:	4a08      	ldr	r2, [pc, #32]	; (800738c <vPortSetupTimerInterrupt+0x40>)
 800736a:	3b01      	subs	r3, #1
 800736c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800736e:	4b03      	ldr	r3, [pc, #12]	; (800737c <vPortSetupTimerInterrupt+0x30>)
 8007370:	2207      	movs	r2, #7
 8007372:	601a      	str	r2, [r3, #0]
}
 8007374:	bf00      	nop
 8007376:	46bd      	mov	sp, r7
 8007378:	bc80      	pop	{r7}
 800737a:	4770      	bx	lr
 800737c:	e000e010 	.word	0xe000e010
 8007380:	e000e018 	.word	0xe000e018
 8007384:	20000000 	.word	0x20000000
 8007388:	10624dd3 	.word	0x10624dd3
 800738c:	e000e014 	.word	0xe000e014

08007390 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007390:	b480      	push	{r7}
 8007392:	b085      	sub	sp, #20
 8007394:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007396:	f3ef 8305 	mrs	r3, IPSR
 800739a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2b0f      	cmp	r3, #15
 80073a0:	d914      	bls.n	80073cc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80073a2:	4a16      	ldr	r2, [pc, #88]	; (80073fc <vPortValidateInterruptPriority+0x6c>)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	4413      	add	r3, r2
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80073ac:	4b14      	ldr	r3, [pc, #80]	; (8007400 <vPortValidateInterruptPriority+0x70>)
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	7afa      	ldrb	r2, [r7, #11]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d20a      	bcs.n	80073cc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80073b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ba:	f383 8811 	msr	BASEPRI, r3
 80073be:	f3bf 8f6f 	isb	sy
 80073c2:	f3bf 8f4f 	dsb	sy
 80073c6:	607b      	str	r3, [r7, #4]
}
 80073c8:	bf00      	nop
 80073ca:	e7fe      	b.n	80073ca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80073cc:	4b0d      	ldr	r3, [pc, #52]	; (8007404 <vPortValidateInterruptPriority+0x74>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80073d4:	4b0c      	ldr	r3, [pc, #48]	; (8007408 <vPortValidateInterruptPriority+0x78>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d90a      	bls.n	80073f2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80073dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e0:	f383 8811 	msr	BASEPRI, r3
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	603b      	str	r3, [r7, #0]
}
 80073ee:	bf00      	nop
 80073f0:	e7fe      	b.n	80073f0 <vPortValidateInterruptPriority+0x60>
	}
 80073f2:	bf00      	nop
 80073f4:	3714      	adds	r7, #20
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bc80      	pop	{r7}
 80073fa:	4770      	bx	lr
 80073fc:	e000e3f0 	.word	0xe000e3f0
 8007400:	20001104 	.word	0x20001104
 8007404:	e000ed0c 	.word	0xe000ed0c
 8007408:	20001108 	.word	0x20001108

0800740c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b08a      	sub	sp, #40	; 0x28
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007414:	2300      	movs	r3, #0
 8007416:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007418:	f7fe fdc4 	bl	8005fa4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800741c:	4b58      	ldr	r3, [pc, #352]	; (8007580 <pvPortMalloc+0x174>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d101      	bne.n	8007428 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007424:	f000 f910 	bl	8007648 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007428:	4b56      	ldr	r3, [pc, #344]	; (8007584 <pvPortMalloc+0x178>)
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4013      	ands	r3, r2
 8007430:	2b00      	cmp	r3, #0
 8007432:	f040 808e 	bne.w	8007552 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d01d      	beq.n	8007478 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800743c:	2208      	movs	r2, #8
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4413      	add	r3, r2
 8007442:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f003 0307 	and.w	r3, r3, #7
 800744a:	2b00      	cmp	r3, #0
 800744c:	d014      	beq.n	8007478 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f023 0307 	bic.w	r3, r3, #7
 8007454:	3308      	adds	r3, #8
 8007456:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f003 0307 	and.w	r3, r3, #7
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00a      	beq.n	8007478 <pvPortMalloc+0x6c>
	__asm volatile
 8007462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007466:	f383 8811 	msr	BASEPRI, r3
 800746a:	f3bf 8f6f 	isb	sy
 800746e:	f3bf 8f4f 	dsb	sy
 8007472:	617b      	str	r3, [r7, #20]
}
 8007474:	bf00      	nop
 8007476:	e7fe      	b.n	8007476 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d069      	beq.n	8007552 <pvPortMalloc+0x146>
 800747e:	4b42      	ldr	r3, [pc, #264]	; (8007588 <pvPortMalloc+0x17c>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	429a      	cmp	r2, r3
 8007486:	d864      	bhi.n	8007552 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007488:	4b40      	ldr	r3, [pc, #256]	; (800758c <pvPortMalloc+0x180>)
 800748a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800748c:	4b3f      	ldr	r3, [pc, #252]	; (800758c <pvPortMalloc+0x180>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007492:	e004      	b.n	800749e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007496:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800749e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d903      	bls.n	80074b0 <pvPortMalloc+0xa4>
 80074a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d1f1      	bne.n	8007494 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80074b0:	4b33      	ldr	r3, [pc, #204]	; (8007580 <pvPortMalloc+0x174>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d04b      	beq.n	8007552 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80074ba:	6a3b      	ldr	r3, [r7, #32]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2208      	movs	r2, #8
 80074c0:	4413      	add	r3, r2
 80074c2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80074c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	6a3b      	ldr	r3, [r7, #32]
 80074ca:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80074cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ce:	685a      	ldr	r2, [r3, #4]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	1ad2      	subs	r2, r2, r3
 80074d4:	2308      	movs	r3, #8
 80074d6:	005b      	lsls	r3, r3, #1
 80074d8:	429a      	cmp	r2, r3
 80074da:	d91f      	bls.n	800751c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80074dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4413      	add	r3, r2
 80074e2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074e4:	69bb      	ldr	r3, [r7, #24]
 80074e6:	f003 0307 	and.w	r3, r3, #7
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00a      	beq.n	8007504 <pvPortMalloc+0xf8>
	__asm volatile
 80074ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f2:	f383 8811 	msr	BASEPRI, r3
 80074f6:	f3bf 8f6f 	isb	sy
 80074fa:	f3bf 8f4f 	dsb	sy
 80074fe:	613b      	str	r3, [r7, #16]
}
 8007500:	bf00      	nop
 8007502:	e7fe      	b.n	8007502 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007506:	685a      	ldr	r2, [r3, #4]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	1ad2      	subs	r2, r2, r3
 800750c:	69bb      	ldr	r3, [r7, #24]
 800750e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007516:	69b8      	ldr	r0, [r7, #24]
 8007518:	f000 f8f8 	bl	800770c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800751c:	4b1a      	ldr	r3, [pc, #104]	; (8007588 <pvPortMalloc+0x17c>)
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	4a18      	ldr	r2, [pc, #96]	; (8007588 <pvPortMalloc+0x17c>)
 8007528:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800752a:	4b17      	ldr	r3, [pc, #92]	; (8007588 <pvPortMalloc+0x17c>)
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	4b18      	ldr	r3, [pc, #96]	; (8007590 <pvPortMalloc+0x184>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	429a      	cmp	r2, r3
 8007534:	d203      	bcs.n	800753e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007536:	4b14      	ldr	r3, [pc, #80]	; (8007588 <pvPortMalloc+0x17c>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a15      	ldr	r2, [pc, #84]	; (8007590 <pvPortMalloc+0x184>)
 800753c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800753e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007540:	685a      	ldr	r2, [r3, #4]
 8007542:	4b10      	ldr	r3, [pc, #64]	; (8007584 <pvPortMalloc+0x178>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	431a      	orrs	r2, r3
 8007548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800754c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754e:	2200      	movs	r2, #0
 8007550:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007552:	f7fe fd35 	bl	8005fc0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	f003 0307 	and.w	r3, r3, #7
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00a      	beq.n	8007576 <pvPortMalloc+0x16a>
	__asm volatile
 8007560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007564:	f383 8811 	msr	BASEPRI, r3
 8007568:	f3bf 8f6f 	isb	sy
 800756c:	f3bf 8f4f 	dsb	sy
 8007570:	60fb      	str	r3, [r7, #12]
}
 8007572:	bf00      	nop
 8007574:	e7fe      	b.n	8007574 <pvPortMalloc+0x168>
	return pvReturn;
 8007576:	69fb      	ldr	r3, [r7, #28]
}
 8007578:	4618      	mov	r0, r3
 800757a:	3728      	adds	r7, #40	; 0x28
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}
 8007580:	20003114 	.word	0x20003114
 8007584:	20003120 	.word	0x20003120
 8007588:	20003118 	.word	0x20003118
 800758c:	2000310c 	.word	0x2000310c
 8007590:	2000311c 	.word	0x2000311c

08007594 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b086      	sub	sp, #24
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d048      	beq.n	8007638 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80075a6:	2308      	movs	r3, #8
 80075a8:	425b      	negs	r3, r3
 80075aa:	697a      	ldr	r2, [r7, #20]
 80075ac:	4413      	add	r3, r2
 80075ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	685a      	ldr	r2, [r3, #4]
 80075b8:	4b21      	ldr	r3, [pc, #132]	; (8007640 <vPortFree+0xac>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4013      	ands	r3, r2
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d10a      	bne.n	80075d8 <vPortFree+0x44>
	__asm volatile
 80075c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c6:	f383 8811 	msr	BASEPRI, r3
 80075ca:	f3bf 8f6f 	isb	sy
 80075ce:	f3bf 8f4f 	dsb	sy
 80075d2:	60fb      	str	r3, [r7, #12]
}
 80075d4:	bf00      	nop
 80075d6:	e7fe      	b.n	80075d6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00a      	beq.n	80075f6 <vPortFree+0x62>
	__asm volatile
 80075e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e4:	f383 8811 	msr	BASEPRI, r3
 80075e8:	f3bf 8f6f 	isb	sy
 80075ec:	f3bf 8f4f 	dsb	sy
 80075f0:	60bb      	str	r3, [r7, #8]
}
 80075f2:	bf00      	nop
 80075f4:	e7fe      	b.n	80075f4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	685a      	ldr	r2, [r3, #4]
 80075fa:	4b11      	ldr	r3, [pc, #68]	; (8007640 <vPortFree+0xac>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4013      	ands	r3, r2
 8007600:	2b00      	cmp	r3, #0
 8007602:	d019      	beq.n	8007638 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d115      	bne.n	8007638 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	685a      	ldr	r2, [r3, #4]
 8007610:	4b0b      	ldr	r3, [pc, #44]	; (8007640 <vPortFree+0xac>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	43db      	mvns	r3, r3
 8007616:	401a      	ands	r2, r3
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800761c:	f7fe fcc2 	bl	8005fa4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	685a      	ldr	r2, [r3, #4]
 8007624:	4b07      	ldr	r3, [pc, #28]	; (8007644 <vPortFree+0xb0>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4413      	add	r3, r2
 800762a:	4a06      	ldr	r2, [pc, #24]	; (8007644 <vPortFree+0xb0>)
 800762c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800762e:	6938      	ldr	r0, [r7, #16]
 8007630:	f000 f86c 	bl	800770c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007634:	f7fe fcc4 	bl	8005fc0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007638:	bf00      	nop
 800763a:	3718      	adds	r7, #24
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	20003120 	.word	0x20003120
 8007644:	20003118 	.word	0x20003118

08007648 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007648:	b480      	push	{r7}
 800764a:	b085      	sub	sp, #20
 800764c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800764e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007652:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007654:	4b27      	ldr	r3, [pc, #156]	; (80076f4 <prvHeapInit+0xac>)
 8007656:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f003 0307 	and.w	r3, r3, #7
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00c      	beq.n	800767c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	3307      	adds	r3, #7
 8007666:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f023 0307 	bic.w	r3, r3, #7
 800766e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007670:	68ba      	ldr	r2, [r7, #8]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	4a1f      	ldr	r2, [pc, #124]	; (80076f4 <prvHeapInit+0xac>)
 8007678:	4413      	add	r3, r2
 800767a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007680:	4a1d      	ldr	r2, [pc, #116]	; (80076f8 <prvHeapInit+0xb0>)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007686:	4b1c      	ldr	r3, [pc, #112]	; (80076f8 <prvHeapInit+0xb0>)
 8007688:	2200      	movs	r2, #0
 800768a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	68ba      	ldr	r2, [r7, #8]
 8007690:	4413      	add	r3, r2
 8007692:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007694:	2208      	movs	r2, #8
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	1a9b      	subs	r3, r3, r2
 800769a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f023 0307 	bic.w	r3, r3, #7
 80076a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	4a15      	ldr	r2, [pc, #84]	; (80076fc <prvHeapInit+0xb4>)
 80076a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80076aa:	4b14      	ldr	r3, [pc, #80]	; (80076fc <prvHeapInit+0xb4>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2200      	movs	r2, #0
 80076b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80076b2:	4b12      	ldr	r3, [pc, #72]	; (80076fc <prvHeapInit+0xb4>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2200      	movs	r2, #0
 80076b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	1ad2      	subs	r2, r2, r3
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80076c8:	4b0c      	ldr	r3, [pc, #48]	; (80076fc <prvHeapInit+0xb4>)
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	4a0a      	ldr	r2, [pc, #40]	; (8007700 <prvHeapInit+0xb8>)
 80076d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	4a09      	ldr	r2, [pc, #36]	; (8007704 <prvHeapInit+0xbc>)
 80076de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80076e0:	4b09      	ldr	r3, [pc, #36]	; (8007708 <prvHeapInit+0xc0>)
 80076e2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80076e6:	601a      	str	r2, [r3, #0]
}
 80076e8:	bf00      	nop
 80076ea:	3714      	adds	r7, #20
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bc80      	pop	{r7}
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	2000110c 	.word	0x2000110c
 80076f8:	2000310c 	.word	0x2000310c
 80076fc:	20003114 	.word	0x20003114
 8007700:	2000311c 	.word	0x2000311c
 8007704:	20003118 	.word	0x20003118
 8007708:	20003120 	.word	0x20003120

0800770c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800770c:	b480      	push	{r7}
 800770e:	b085      	sub	sp, #20
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007714:	4b27      	ldr	r3, [pc, #156]	; (80077b4 <prvInsertBlockIntoFreeList+0xa8>)
 8007716:	60fb      	str	r3, [r7, #12]
 8007718:	e002      	b.n	8007720 <prvInsertBlockIntoFreeList+0x14>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	60fb      	str	r3, [r7, #12]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	429a      	cmp	r2, r3
 8007728:	d8f7      	bhi.n	800771a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	4413      	add	r3, r2
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	429a      	cmp	r2, r3
 800773a:	d108      	bne.n	800774e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	685a      	ldr	r2, [r3, #4]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	685b      	ldr	r3, [r3, #4]
 8007744:	441a      	add	r2, r3
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	68ba      	ldr	r2, [r7, #8]
 8007758:	441a      	add	r2, r3
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	429a      	cmp	r2, r3
 8007760:	d118      	bne.n	8007794 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	4b14      	ldr	r3, [pc, #80]	; (80077b8 <prvInsertBlockIntoFreeList+0xac>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	429a      	cmp	r2, r3
 800776c:	d00d      	beq.n	800778a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	685a      	ldr	r2, [r3, #4]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	441a      	add	r2, r3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	601a      	str	r2, [r3, #0]
 8007788:	e008      	b.n	800779c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800778a:	4b0b      	ldr	r3, [pc, #44]	; (80077b8 <prvInsertBlockIntoFreeList+0xac>)
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	601a      	str	r2, [r3, #0]
 8007792:	e003      	b.n	800779c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d002      	beq.n	80077aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077aa:	bf00      	nop
 80077ac:	3714      	adds	r7, #20
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bc80      	pop	{r7}
 80077b2:	4770      	bx	lr
 80077b4:	2000310c 	.word	0x2000310c
 80077b8:	20003114 	.word	0x20003114

080077bc <memset>:
 80077bc:	4603      	mov	r3, r0
 80077be:	4402      	add	r2, r0
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d100      	bne.n	80077c6 <memset+0xa>
 80077c4:	4770      	bx	lr
 80077c6:	f803 1b01 	strb.w	r1, [r3], #1
 80077ca:	e7f9      	b.n	80077c0 <memset+0x4>

080077cc <_reclaim_reent>:
 80077cc:	4b29      	ldr	r3, [pc, #164]	; (8007874 <_reclaim_reent+0xa8>)
 80077ce:	b570      	push	{r4, r5, r6, lr}
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4604      	mov	r4, r0
 80077d4:	4283      	cmp	r3, r0
 80077d6:	d04b      	beq.n	8007870 <_reclaim_reent+0xa4>
 80077d8:	69c3      	ldr	r3, [r0, #28]
 80077da:	b143      	cbz	r3, 80077ee <_reclaim_reent+0x22>
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d144      	bne.n	800786c <_reclaim_reent+0xa0>
 80077e2:	69e3      	ldr	r3, [r4, #28]
 80077e4:	6819      	ldr	r1, [r3, #0]
 80077e6:	b111      	cbz	r1, 80077ee <_reclaim_reent+0x22>
 80077e8:	4620      	mov	r0, r4
 80077ea:	f000 f879 	bl	80078e0 <_free_r>
 80077ee:	6961      	ldr	r1, [r4, #20]
 80077f0:	b111      	cbz	r1, 80077f8 <_reclaim_reent+0x2c>
 80077f2:	4620      	mov	r0, r4
 80077f4:	f000 f874 	bl	80078e0 <_free_r>
 80077f8:	69e1      	ldr	r1, [r4, #28]
 80077fa:	b111      	cbz	r1, 8007802 <_reclaim_reent+0x36>
 80077fc:	4620      	mov	r0, r4
 80077fe:	f000 f86f 	bl	80078e0 <_free_r>
 8007802:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007804:	b111      	cbz	r1, 800780c <_reclaim_reent+0x40>
 8007806:	4620      	mov	r0, r4
 8007808:	f000 f86a 	bl	80078e0 <_free_r>
 800780c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800780e:	b111      	cbz	r1, 8007816 <_reclaim_reent+0x4a>
 8007810:	4620      	mov	r0, r4
 8007812:	f000 f865 	bl	80078e0 <_free_r>
 8007816:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007818:	b111      	cbz	r1, 8007820 <_reclaim_reent+0x54>
 800781a:	4620      	mov	r0, r4
 800781c:	f000 f860 	bl	80078e0 <_free_r>
 8007820:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007822:	b111      	cbz	r1, 800782a <_reclaim_reent+0x5e>
 8007824:	4620      	mov	r0, r4
 8007826:	f000 f85b 	bl	80078e0 <_free_r>
 800782a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800782c:	b111      	cbz	r1, 8007834 <_reclaim_reent+0x68>
 800782e:	4620      	mov	r0, r4
 8007830:	f000 f856 	bl	80078e0 <_free_r>
 8007834:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007836:	b111      	cbz	r1, 800783e <_reclaim_reent+0x72>
 8007838:	4620      	mov	r0, r4
 800783a:	f000 f851 	bl	80078e0 <_free_r>
 800783e:	6a23      	ldr	r3, [r4, #32]
 8007840:	b1b3      	cbz	r3, 8007870 <_reclaim_reent+0xa4>
 8007842:	4620      	mov	r0, r4
 8007844:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007848:	4718      	bx	r3
 800784a:	5949      	ldr	r1, [r1, r5]
 800784c:	b941      	cbnz	r1, 8007860 <_reclaim_reent+0x94>
 800784e:	3504      	adds	r5, #4
 8007850:	69e3      	ldr	r3, [r4, #28]
 8007852:	2d80      	cmp	r5, #128	; 0x80
 8007854:	68d9      	ldr	r1, [r3, #12]
 8007856:	d1f8      	bne.n	800784a <_reclaim_reent+0x7e>
 8007858:	4620      	mov	r0, r4
 800785a:	f000 f841 	bl	80078e0 <_free_r>
 800785e:	e7c0      	b.n	80077e2 <_reclaim_reent+0x16>
 8007860:	680e      	ldr	r6, [r1, #0]
 8007862:	4620      	mov	r0, r4
 8007864:	f000 f83c 	bl	80078e0 <_free_r>
 8007868:	4631      	mov	r1, r6
 800786a:	e7ef      	b.n	800784c <_reclaim_reent+0x80>
 800786c:	2500      	movs	r5, #0
 800786e:	e7ef      	b.n	8007850 <_reclaim_reent+0x84>
 8007870:	bd70      	pop	{r4, r5, r6, pc}
 8007872:	bf00      	nop
 8007874:	2000005c 	.word	0x2000005c

08007878 <__libc_init_array>:
 8007878:	b570      	push	{r4, r5, r6, lr}
 800787a:	2600      	movs	r6, #0
 800787c:	4d0c      	ldr	r5, [pc, #48]	; (80078b0 <__libc_init_array+0x38>)
 800787e:	4c0d      	ldr	r4, [pc, #52]	; (80078b4 <__libc_init_array+0x3c>)
 8007880:	1b64      	subs	r4, r4, r5
 8007882:	10a4      	asrs	r4, r4, #2
 8007884:	42a6      	cmp	r6, r4
 8007886:	d109      	bne.n	800789c <__libc_init_array+0x24>
 8007888:	f000 f87e 	bl	8007988 <_init>
 800788c:	2600      	movs	r6, #0
 800788e:	4d0a      	ldr	r5, [pc, #40]	; (80078b8 <__libc_init_array+0x40>)
 8007890:	4c0a      	ldr	r4, [pc, #40]	; (80078bc <__libc_init_array+0x44>)
 8007892:	1b64      	subs	r4, r4, r5
 8007894:	10a4      	asrs	r4, r4, #2
 8007896:	42a6      	cmp	r6, r4
 8007898:	d105      	bne.n	80078a6 <__libc_init_array+0x2e>
 800789a:	bd70      	pop	{r4, r5, r6, pc}
 800789c:	f855 3b04 	ldr.w	r3, [r5], #4
 80078a0:	4798      	blx	r3
 80078a2:	3601      	adds	r6, #1
 80078a4:	e7ee      	b.n	8007884 <__libc_init_array+0xc>
 80078a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80078aa:	4798      	blx	r3
 80078ac:	3601      	adds	r6, #1
 80078ae:	e7f2      	b.n	8007896 <__libc_init_array+0x1e>
 80078b0:	08007bf4 	.word	0x08007bf4
 80078b4:	08007bf4 	.word	0x08007bf4
 80078b8:	08007bf4 	.word	0x08007bf4
 80078bc:	08007bf8 	.word	0x08007bf8

080078c0 <__retarget_lock_acquire_recursive>:
 80078c0:	4770      	bx	lr

080078c2 <__retarget_lock_release_recursive>:
 80078c2:	4770      	bx	lr

080078c4 <memcpy>:
 80078c4:	440a      	add	r2, r1
 80078c6:	4291      	cmp	r1, r2
 80078c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80078cc:	d100      	bne.n	80078d0 <memcpy+0xc>
 80078ce:	4770      	bx	lr
 80078d0:	b510      	push	{r4, lr}
 80078d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078d6:	4291      	cmp	r1, r2
 80078d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078dc:	d1f9      	bne.n	80078d2 <memcpy+0xe>
 80078de:	bd10      	pop	{r4, pc}

080078e0 <_free_r>:
 80078e0:	b538      	push	{r3, r4, r5, lr}
 80078e2:	4605      	mov	r5, r0
 80078e4:	2900      	cmp	r1, #0
 80078e6:	d040      	beq.n	800796a <_free_r+0x8a>
 80078e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078ec:	1f0c      	subs	r4, r1, #4
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	bfb8      	it	lt
 80078f2:	18e4      	addlt	r4, r4, r3
 80078f4:	f000 f83c 	bl	8007970 <__malloc_lock>
 80078f8:	4a1c      	ldr	r2, [pc, #112]	; (800796c <_free_r+0x8c>)
 80078fa:	6813      	ldr	r3, [r2, #0]
 80078fc:	b933      	cbnz	r3, 800790c <_free_r+0x2c>
 80078fe:	6063      	str	r3, [r4, #4]
 8007900:	6014      	str	r4, [r2, #0]
 8007902:	4628      	mov	r0, r5
 8007904:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007908:	f000 b838 	b.w	800797c <__malloc_unlock>
 800790c:	42a3      	cmp	r3, r4
 800790e:	d908      	bls.n	8007922 <_free_r+0x42>
 8007910:	6820      	ldr	r0, [r4, #0]
 8007912:	1821      	adds	r1, r4, r0
 8007914:	428b      	cmp	r3, r1
 8007916:	bf01      	itttt	eq
 8007918:	6819      	ldreq	r1, [r3, #0]
 800791a:	685b      	ldreq	r3, [r3, #4]
 800791c:	1809      	addeq	r1, r1, r0
 800791e:	6021      	streq	r1, [r4, #0]
 8007920:	e7ed      	b.n	80078fe <_free_r+0x1e>
 8007922:	461a      	mov	r2, r3
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	b10b      	cbz	r3, 800792c <_free_r+0x4c>
 8007928:	42a3      	cmp	r3, r4
 800792a:	d9fa      	bls.n	8007922 <_free_r+0x42>
 800792c:	6811      	ldr	r1, [r2, #0]
 800792e:	1850      	adds	r0, r2, r1
 8007930:	42a0      	cmp	r0, r4
 8007932:	d10b      	bne.n	800794c <_free_r+0x6c>
 8007934:	6820      	ldr	r0, [r4, #0]
 8007936:	4401      	add	r1, r0
 8007938:	1850      	adds	r0, r2, r1
 800793a:	4283      	cmp	r3, r0
 800793c:	6011      	str	r1, [r2, #0]
 800793e:	d1e0      	bne.n	8007902 <_free_r+0x22>
 8007940:	6818      	ldr	r0, [r3, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	4408      	add	r0, r1
 8007946:	6010      	str	r0, [r2, #0]
 8007948:	6053      	str	r3, [r2, #4]
 800794a:	e7da      	b.n	8007902 <_free_r+0x22>
 800794c:	d902      	bls.n	8007954 <_free_r+0x74>
 800794e:	230c      	movs	r3, #12
 8007950:	602b      	str	r3, [r5, #0]
 8007952:	e7d6      	b.n	8007902 <_free_r+0x22>
 8007954:	6820      	ldr	r0, [r4, #0]
 8007956:	1821      	adds	r1, r4, r0
 8007958:	428b      	cmp	r3, r1
 800795a:	bf01      	itttt	eq
 800795c:	6819      	ldreq	r1, [r3, #0]
 800795e:	685b      	ldreq	r3, [r3, #4]
 8007960:	1809      	addeq	r1, r1, r0
 8007962:	6021      	streq	r1, [r4, #0]
 8007964:	6063      	str	r3, [r4, #4]
 8007966:	6054      	str	r4, [r2, #4]
 8007968:	e7cb      	b.n	8007902 <_free_r+0x22>
 800796a:	bd38      	pop	{r3, r4, r5, pc}
 800796c:	20003260 	.word	0x20003260

08007970 <__malloc_lock>:
 8007970:	4801      	ldr	r0, [pc, #4]	; (8007978 <__malloc_lock+0x8>)
 8007972:	f7ff bfa5 	b.w	80078c0 <__retarget_lock_acquire_recursive>
 8007976:	bf00      	nop
 8007978:	2000325c 	.word	0x2000325c

0800797c <__malloc_unlock>:
 800797c:	4801      	ldr	r0, [pc, #4]	; (8007984 <__malloc_unlock+0x8>)
 800797e:	f7ff bfa0 	b.w	80078c2 <__retarget_lock_release_recursive>
 8007982:	bf00      	nop
 8007984:	2000325c 	.word	0x2000325c

08007988 <_init>:
 8007988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800798a:	bf00      	nop
 800798c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800798e:	bc08      	pop	{r3}
 8007990:	469e      	mov	lr, r3
 8007992:	4770      	bx	lr

08007994 <_fini>:
 8007994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007996:	bf00      	nop
 8007998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800799a:	bc08      	pop	{r3}
 800799c:	469e      	mov	lr, r3
 800799e:	4770      	bx	lr
