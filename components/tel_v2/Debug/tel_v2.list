
tel_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000101ac  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000091c  080103a0  080103a0  000203a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010cbc  08010cbc  00030240  2**0
                  CONTENTS
  4 .ARM          00000000  08010cbc  08010cbc  00030240  2**0
                  CONTENTS
  5 .preinit_array 00000000  08010cbc  08010cbc  00030240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010cbc  08010cbc  00020cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010cc0  08010cc0  00020cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000240  20000000  08010cc4  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003290  20000240  08010f04  00030240  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200034d0  08010f04  000334d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030269  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bdef  00000000  00000000  000302ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004762  00000000  00000000  0004c09b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017a0  00000000  00000000  00050800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001236  00000000  00000000  00051fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e5db  00000000  00000000  000531d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e9e3  00000000  00000000  000717b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a5f73  00000000  00000000  00090194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007c6c  00000000  00000000  00136108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0013dd74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000240 	.word	0x20000240
 800020c:	00000000 	.word	0x00000000
 8000210:	08010384 	.word	0x08010384

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000244 	.word	0x20000244
 800022c:	08010384 	.word	0x08010384

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr

08000244 <strlen>:
 8000244:	4603      	mov	r3, r0
 8000246:	f813 2b01 	ldrb.w	r2, [r3], #1
 800024a:	2a00      	cmp	r2, #0
 800024c:	d1fb      	bne.n	8000246 <strlen+0x2>
 800024e:	1a18      	subs	r0, r3, r0
 8000250:	3801      	subs	r0, #1
 8000252:	4770      	bx	lr

08000254 <__aeabi_drsub>:
 8000254:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000258:	e002      	b.n	8000260 <__adddf3>
 800025a:	bf00      	nop

0800025c <__aeabi_dsub>:
 800025c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000260 <__adddf3>:
 8000260:	b530      	push	{r4, r5, lr}
 8000262:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000266:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800026a:	ea94 0f05 	teq	r4, r5
 800026e:	bf08      	it	eq
 8000270:	ea90 0f02 	teqeq	r0, r2
 8000274:	bf1f      	itttt	ne
 8000276:	ea54 0c00 	orrsne.w	ip, r4, r0
 800027a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000282:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000286:	f000 80e2 	beq.w	800044e <__adddf3+0x1ee>
 800028a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000292:	bfb8      	it	lt
 8000294:	426d      	neglt	r5, r5
 8000296:	dd0c      	ble.n	80002b2 <__adddf3+0x52>
 8000298:	442c      	add	r4, r5
 800029a:	ea80 0202 	eor.w	r2, r0, r2
 800029e:	ea81 0303 	eor.w	r3, r1, r3
 80002a2:	ea82 0000 	eor.w	r0, r2, r0
 80002a6:	ea83 0101 	eor.w	r1, r3, r1
 80002aa:	ea80 0202 	eor.w	r2, r0, r2
 80002ae:	ea81 0303 	eor.w	r3, r1, r3
 80002b2:	2d36      	cmp	r5, #54	; 0x36
 80002b4:	bf88      	it	hi
 80002b6:	bd30      	pophi	{r4, r5, pc}
 80002b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x70>
 80002ca:	4240      	negs	r0, r0
 80002cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002dc:	d002      	beq.n	80002e4 <__adddf3+0x84>
 80002de:	4252      	negs	r2, r2
 80002e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e4:	ea94 0f05 	teq	r4, r5
 80002e8:	f000 80a7 	beq.w	800043a <__adddf3+0x1da>
 80002ec:	f1a4 0401 	sub.w	r4, r4, #1
 80002f0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f4:	db0d      	blt.n	8000312 <__adddf3+0xb2>
 80002f6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002fa:	fa22 f205 	lsr.w	r2, r2, r5
 80002fe:	1880      	adds	r0, r0, r2
 8000300:	f141 0100 	adc.w	r1, r1, #0
 8000304:	fa03 f20e 	lsl.w	r2, r3, lr
 8000308:	1880      	adds	r0, r0, r2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	4159      	adcs	r1, r3
 8000310:	e00e      	b.n	8000330 <__adddf3+0xd0>
 8000312:	f1a5 0520 	sub.w	r5, r5, #32
 8000316:	f10e 0e20 	add.w	lr, lr, #32
 800031a:	2a01      	cmp	r2, #1
 800031c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000320:	bf28      	it	cs
 8000322:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	18c0      	adds	r0, r0, r3
 800032c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000330:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000334:	d507      	bpl.n	8000346 <__adddf3+0xe6>
 8000336:	f04f 0e00 	mov.w	lr, #0
 800033a:	f1dc 0c00 	rsbs	ip, ip, #0
 800033e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000342:	eb6e 0101 	sbc.w	r1, lr, r1
 8000346:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800034a:	d31b      	bcc.n	8000384 <__adddf3+0x124>
 800034c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000350:	d30c      	bcc.n	800036c <__adddf3+0x10c>
 8000352:	0849      	lsrs	r1, r1, #1
 8000354:	ea5f 0030 	movs.w	r0, r0, rrx
 8000358:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800035c:	f104 0401 	add.w	r4, r4, #1
 8000360:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000364:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000368:	f080 809a 	bcs.w	80004a0 <__adddf3+0x240>
 800036c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000370:	bf08      	it	eq
 8000372:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000376:	f150 0000 	adcs.w	r0, r0, #0
 800037a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037e:	ea41 0105 	orr.w	r1, r1, r5
 8000382:	bd30      	pop	{r4, r5, pc}
 8000384:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000388:	4140      	adcs	r0, r0
 800038a:	eb41 0101 	adc.w	r1, r1, r1
 800038e:	3c01      	subs	r4, #1
 8000390:	bf28      	it	cs
 8000392:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000396:	d2e9      	bcs.n	800036c <__adddf3+0x10c>
 8000398:	f091 0f00 	teq	r1, #0
 800039c:	bf04      	itt	eq
 800039e:	4601      	moveq	r1, r0
 80003a0:	2000      	moveq	r0, #0
 80003a2:	fab1 f381 	clz	r3, r1
 80003a6:	bf08      	it	eq
 80003a8:	3320      	addeq	r3, #32
 80003aa:	f1a3 030b 	sub.w	r3, r3, #11
 80003ae:	f1b3 0220 	subs.w	r2, r3, #32
 80003b2:	da0c      	bge.n	80003ce <__adddf3+0x16e>
 80003b4:	320c      	adds	r2, #12
 80003b6:	dd08      	ble.n	80003ca <__adddf3+0x16a>
 80003b8:	f102 0c14 	add.w	ip, r2, #20
 80003bc:	f1c2 020c 	rsb	r2, r2, #12
 80003c0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c4:	fa21 f102 	lsr.w	r1, r1, r2
 80003c8:	e00c      	b.n	80003e4 <__adddf3+0x184>
 80003ca:	f102 0214 	add.w	r2, r2, #20
 80003ce:	bfd8      	it	le
 80003d0:	f1c2 0c20 	rsble	ip, r2, #32
 80003d4:	fa01 f102 	lsl.w	r1, r1, r2
 80003d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003dc:	bfdc      	itt	le
 80003de:	ea41 010c 	orrle.w	r1, r1, ip
 80003e2:	4090      	lslle	r0, r2
 80003e4:	1ae4      	subs	r4, r4, r3
 80003e6:	bfa2      	ittt	ge
 80003e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003ec:	4329      	orrge	r1, r5
 80003ee:	bd30      	popge	{r4, r5, pc}
 80003f0:	ea6f 0404 	mvn.w	r4, r4
 80003f4:	3c1f      	subs	r4, #31
 80003f6:	da1c      	bge.n	8000432 <__adddf3+0x1d2>
 80003f8:	340c      	adds	r4, #12
 80003fa:	dc0e      	bgt.n	800041a <__adddf3+0x1ba>
 80003fc:	f104 0414 	add.w	r4, r4, #20
 8000400:	f1c4 0220 	rsb	r2, r4, #32
 8000404:	fa20 f004 	lsr.w	r0, r0, r4
 8000408:	fa01 f302 	lsl.w	r3, r1, r2
 800040c:	ea40 0003 	orr.w	r0, r0, r3
 8000410:	fa21 f304 	lsr.w	r3, r1, r4
 8000414:	ea45 0103 	orr.w	r1, r5, r3
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	f1c4 040c 	rsb	r4, r4, #12
 800041e:	f1c4 0220 	rsb	r2, r4, #32
 8000422:	fa20 f002 	lsr.w	r0, r0, r2
 8000426:	fa01 f304 	lsl.w	r3, r1, r4
 800042a:	ea40 0003 	orr.w	r0, r0, r3
 800042e:	4629      	mov	r1, r5
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	fa21 f004 	lsr.w	r0, r1, r4
 8000436:	4629      	mov	r1, r5
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	f094 0f00 	teq	r4, #0
 800043e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000442:	bf06      	itte	eq
 8000444:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000448:	3401      	addeq	r4, #1
 800044a:	3d01      	subne	r5, #1
 800044c:	e74e      	b.n	80002ec <__adddf3+0x8c>
 800044e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000452:	bf18      	it	ne
 8000454:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000458:	d029      	beq.n	80004ae <__adddf3+0x24e>
 800045a:	ea94 0f05 	teq	r4, r5
 800045e:	bf08      	it	eq
 8000460:	ea90 0f02 	teqeq	r0, r2
 8000464:	d005      	beq.n	8000472 <__adddf3+0x212>
 8000466:	ea54 0c00 	orrs.w	ip, r4, r0
 800046a:	bf04      	itt	eq
 800046c:	4619      	moveq	r1, r3
 800046e:	4610      	moveq	r0, r2
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea91 0f03 	teq	r1, r3
 8000476:	bf1e      	ittt	ne
 8000478:	2100      	movne	r1, #0
 800047a:	2000      	movne	r0, #0
 800047c:	bd30      	popne	{r4, r5, pc}
 800047e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000482:	d105      	bne.n	8000490 <__adddf3+0x230>
 8000484:	0040      	lsls	r0, r0, #1
 8000486:	4149      	adcs	r1, r1
 8000488:	bf28      	it	cs
 800048a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048e:	bd30      	pop	{r4, r5, pc}
 8000490:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000494:	bf3c      	itt	cc
 8000496:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800049a:	bd30      	popcc	{r4, r5, pc}
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a8:	f04f 0000 	mov.w	r0, #0
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf1a      	itte	ne
 80004b4:	4619      	movne	r1, r3
 80004b6:	4610      	movne	r0, r2
 80004b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004bc:	bf1c      	itt	ne
 80004be:	460b      	movne	r3, r1
 80004c0:	4602      	movne	r2, r0
 80004c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c6:	bf06      	itte	eq
 80004c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004cc:	ea91 0f03 	teqeq	r1, r3
 80004d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	bf00      	nop

080004d8 <__aeabi_ui2d>:
 80004d8:	f090 0f00 	teq	r0, #0
 80004dc:	bf04      	itt	eq
 80004de:	2100      	moveq	r1, #0
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ec:	f04f 0500 	mov.w	r5, #0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e750      	b.n	8000398 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_i2d>:
 80004f8:	f090 0f00 	teq	r0, #0
 80004fc:	bf04      	itt	eq
 80004fe:	2100      	moveq	r1, #0
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000508:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000510:	bf48      	it	mi
 8000512:	4240      	negmi	r0, r0
 8000514:	f04f 0100 	mov.w	r1, #0
 8000518:	e73e      	b.n	8000398 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_f2d>:
 800051c:	0042      	lsls	r2, r0, #1
 800051e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000522:	ea4f 0131 	mov.w	r1, r1, rrx
 8000526:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800052a:	bf1f      	itttt	ne
 800052c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000530:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000534:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000538:	4770      	bxne	lr
 800053a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053e:	bf08      	it	eq
 8000540:	4770      	bxeq	lr
 8000542:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000546:	bf04      	itt	eq
 8000548:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000554:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000558:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800055c:	e71c      	b.n	8000398 <__adddf3+0x138>
 800055e:	bf00      	nop

08000560 <__aeabi_ul2d>:
 8000560:	ea50 0201 	orrs.w	r2, r0, r1
 8000564:	bf08      	it	eq
 8000566:	4770      	bxeq	lr
 8000568:	b530      	push	{r4, r5, lr}
 800056a:	f04f 0500 	mov.w	r5, #0
 800056e:	e00a      	b.n	8000586 <__aeabi_l2d+0x16>

08000570 <__aeabi_l2d>:
 8000570:	ea50 0201 	orrs.w	r2, r0, r1
 8000574:	bf08      	it	eq
 8000576:	4770      	bxeq	lr
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057e:	d502      	bpl.n	8000586 <__aeabi_l2d+0x16>
 8000580:	4240      	negs	r0, r0
 8000582:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000586:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800058a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000592:	f43f aed8 	beq.w	8000346 <__adddf3+0xe6>
 8000596:	f04f 0203 	mov.w	r2, #3
 800059a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059e:	bf18      	it	ne
 80005a0:	3203      	addne	r2, #3
 80005a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a6:	bf18      	it	ne
 80005a8:	3203      	addne	r2, #3
 80005aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ae:	f1c2 0320 	rsb	r3, r2, #32
 80005b2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ba:	fa01 fe03 	lsl.w	lr, r1, r3
 80005be:	ea40 000e 	orr.w	r0, r0, lr
 80005c2:	fa21 f102 	lsr.w	r1, r1, r2
 80005c6:	4414      	add	r4, r2
 80005c8:	e6bd      	b.n	8000346 <__adddf3+0xe6>
 80005ca:	bf00      	nop

080005cc <__aeabi_dmul>:
 80005cc:	b570      	push	{r4, r5, r6, lr}
 80005ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005da:	bf1d      	ittte	ne
 80005dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005e0:	ea94 0f0c 	teqne	r4, ip
 80005e4:	ea95 0f0c 	teqne	r5, ip
 80005e8:	f000 f8de 	bleq	80007a8 <__aeabi_dmul+0x1dc>
 80005ec:	442c      	add	r4, r5
 80005ee:	ea81 0603 	eor.w	r6, r1, r3
 80005f2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005fa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fe:	bf18      	it	ne
 8000600:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000604:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000608:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800060c:	d038      	beq.n	8000680 <__aeabi_dmul+0xb4>
 800060e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000612:	f04f 0500 	mov.w	r5, #0
 8000616:	fbe1 e502 	umlal	lr, r5, r1, r2
 800061a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000622:	f04f 0600 	mov.w	r6, #0
 8000626:	fbe1 5603 	umlal	r5, r6, r1, r3
 800062a:	f09c 0f00 	teq	ip, #0
 800062e:	bf18      	it	ne
 8000630:	f04e 0e01 	orrne.w	lr, lr, #1
 8000634:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000638:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800063c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000640:	d204      	bcs.n	800064c <__aeabi_dmul+0x80>
 8000642:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000646:	416d      	adcs	r5, r5
 8000648:	eb46 0606 	adc.w	r6, r6, r6
 800064c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000650:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000654:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000658:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800065c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000660:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000664:	bf88      	it	hi
 8000666:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800066a:	d81e      	bhi.n	80006aa <__aeabi_dmul+0xde>
 800066c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000670:	bf08      	it	eq
 8000672:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000676:	f150 0000 	adcs.w	r0, r0, #0
 800067a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000684:	ea46 0101 	orr.w	r1, r6, r1
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	ea81 0103 	eor.w	r1, r1, r3
 8000690:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000694:	bfc2      	ittt	gt
 8000696:	ebd4 050c 	rsbsgt	r5, r4, ip
 800069a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069e:	bd70      	popgt	{r4, r5, r6, pc}
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f04f 0e00 	mov.w	lr, #0
 80006a8:	3c01      	subs	r4, #1
 80006aa:	f300 80ab 	bgt.w	8000804 <__aeabi_dmul+0x238>
 80006ae:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006b2:	bfde      	ittt	le
 80006b4:	2000      	movle	r0, #0
 80006b6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ba:	bd70      	pople	{r4, r5, r6, pc}
 80006bc:	f1c4 0400 	rsb	r4, r4, #0
 80006c0:	3c20      	subs	r4, #32
 80006c2:	da35      	bge.n	8000730 <__aeabi_dmul+0x164>
 80006c4:	340c      	adds	r4, #12
 80006c6:	dc1b      	bgt.n	8000700 <__aeabi_dmul+0x134>
 80006c8:	f104 0414 	add.w	r4, r4, #20
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f305 	lsl.w	r3, r0, r5
 80006d4:	fa20 f004 	lsr.w	r0, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	fa21 f604 	lsr.w	r6, r1, r4
 80006f0:	eb42 0106 	adc.w	r1, r2, r6
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f1c4 040c 	rsb	r4, r4, #12
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f304 	lsl.w	r3, r0, r4
 800070c:	fa20 f005 	lsr.w	r0, r0, r5
 8000710:	fa01 f204 	lsl.w	r2, r1, r4
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	f141 0100 	adc.w	r1, r1, #0
 8000724:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000728:	bf08      	it	eq
 800072a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072e:	bd70      	pop	{r4, r5, r6, pc}
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f205 	lsl.w	r2, r0, r5
 8000738:	ea4e 0e02 	orr.w	lr, lr, r2
 800073c:	fa20 f304 	lsr.w	r3, r0, r4
 8000740:	fa01 f205 	lsl.w	r2, r1, r5
 8000744:	ea43 0302 	orr.w	r3, r3, r2
 8000748:	fa21 f004 	lsr.w	r0, r1, r4
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	fa21 f204 	lsr.w	r2, r1, r4
 8000754:	ea20 0002 	bic.w	r0, r0, r2
 8000758:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800075c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000760:	bf08      	it	eq
 8000762:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000766:	bd70      	pop	{r4, r5, r6, pc}
 8000768:	f094 0f00 	teq	r4, #0
 800076c:	d10f      	bne.n	800078e <__aeabi_dmul+0x1c2>
 800076e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000772:	0040      	lsls	r0, r0, #1
 8000774:	eb41 0101 	adc.w	r1, r1, r1
 8000778:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800077c:	bf08      	it	eq
 800077e:	3c01      	subeq	r4, #1
 8000780:	d0f7      	beq.n	8000772 <__aeabi_dmul+0x1a6>
 8000782:	ea41 0106 	orr.w	r1, r1, r6
 8000786:	f095 0f00 	teq	r5, #0
 800078a:	bf18      	it	ne
 800078c:	4770      	bxne	lr
 800078e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000792:	0052      	lsls	r2, r2, #1
 8000794:	eb43 0303 	adc.w	r3, r3, r3
 8000798:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800079c:	bf08      	it	eq
 800079e:	3d01      	subeq	r5, #1
 80007a0:	d0f7      	beq.n	8000792 <__aeabi_dmul+0x1c6>
 80007a2:	ea43 0306 	orr.w	r3, r3, r6
 80007a6:	4770      	bx	lr
 80007a8:	ea94 0f0c 	teq	r4, ip
 80007ac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007b0:	bf18      	it	ne
 80007b2:	ea95 0f0c 	teqne	r5, ip
 80007b6:	d00c      	beq.n	80007d2 <__aeabi_dmul+0x206>
 80007b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007bc:	bf18      	it	ne
 80007be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c2:	d1d1      	bne.n	8000768 <__aeabi_dmul+0x19c>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d6:	bf06      	itte	eq
 80007d8:	4610      	moveq	r0, r2
 80007da:	4619      	moveq	r1, r3
 80007dc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e0:	d019      	beq.n	8000816 <__aeabi_dmul+0x24a>
 80007e2:	ea94 0f0c 	teq	r4, ip
 80007e6:	d102      	bne.n	80007ee <__aeabi_dmul+0x222>
 80007e8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007ec:	d113      	bne.n	8000816 <__aeabi_dmul+0x24a>
 80007ee:	ea95 0f0c 	teq	r5, ip
 80007f2:	d105      	bne.n	8000800 <__aeabi_dmul+0x234>
 80007f4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f8:	bf1c      	itt	ne
 80007fa:	4610      	movne	r0, r2
 80007fc:	4619      	movne	r1, r3
 80007fe:	d10a      	bne.n	8000816 <__aeabi_dmul+0x24a>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800080c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800081a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081e:	bd70      	pop	{r4, r5, r6, pc}

08000820 <__aeabi_ddiv>:
 8000820:	b570      	push	{r4, r5, r6, lr}
 8000822:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000826:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800082a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082e:	bf1d      	ittte	ne
 8000830:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000834:	ea94 0f0c 	teqne	r4, ip
 8000838:	ea95 0f0c 	teqne	r5, ip
 800083c:	f000 f8a7 	bleq	800098e <__aeabi_ddiv+0x16e>
 8000840:	eba4 0405 	sub.w	r4, r4, r5
 8000844:	ea81 0e03 	eor.w	lr, r1, r3
 8000848:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800084c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000850:	f000 8088 	beq.w	8000964 <__aeabi_ddiv+0x144>
 8000854:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000858:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800085c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000860:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000864:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000868:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800086c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000870:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000874:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000878:	429d      	cmp	r5, r3
 800087a:	bf08      	it	eq
 800087c:	4296      	cmpeq	r6, r2
 800087e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000882:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000886:	d202      	bcs.n	800088e <__aeabi_ddiv+0x6e>
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	1ab6      	subs	r6, r6, r2
 8000890:	eb65 0503 	sbc.w	r5, r5, r3
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008aa:	bf22      	ittt	cs
 80008ac:	1ab6      	subcs	r6, r6, r2
 80008ae:	4675      	movcs	r5, lr
 80008b0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80008be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c2:	bf22      	ittt	cs
 80008c4:	1ab6      	subcs	r6, r6, r2
 80008c6:	4675      	movcs	r5, lr
 80008c8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008da:	bf22      	ittt	cs
 80008dc:	1ab6      	subcs	r6, r6, r2
 80008de:	4675      	movcs	r5, lr
 80008e0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f2:	bf22      	ittt	cs
 80008f4:	1ab6      	subcs	r6, r6, r2
 80008f6:	4675      	movcs	r5, lr
 80008f8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008fc:	ea55 0e06 	orrs.w	lr, r5, r6
 8000900:	d018      	beq.n	8000934 <__aeabi_ddiv+0x114>
 8000902:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000906:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800090a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000912:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000916:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800091a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091e:	d1c0      	bne.n	80008a2 <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000924:	d10b      	bne.n	800093e <__aeabi_ddiv+0x11e>
 8000926:	ea41 0100 	orr.w	r1, r1, r0
 800092a:	f04f 0000 	mov.w	r0, #0
 800092e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000932:	e7b6      	b.n	80008a2 <__aeabi_ddiv+0x82>
 8000934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000938:	bf04      	itt	eq
 800093a:	4301      	orreq	r1, r0
 800093c:	2000      	moveq	r0, #0
 800093e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000942:	bf88      	it	hi
 8000944:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000948:	f63f aeaf 	bhi.w	80006aa <__aeabi_dmul+0xde>
 800094c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000950:	bf04      	itt	eq
 8000952:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000956:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800095a:	f150 0000 	adcs.w	r0, r0, #0
 800095e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000962:	bd70      	pop	{r4, r5, r6, pc}
 8000964:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000968:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800096c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000970:	bfc2      	ittt	gt
 8000972:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000976:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800097a:	bd70      	popgt	{r4, r5, r6, pc}
 800097c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000980:	f04f 0e00 	mov.w	lr, #0
 8000984:	3c01      	subs	r4, #1
 8000986:	e690      	b.n	80006aa <__aeabi_dmul+0xde>
 8000988:	ea45 0e06 	orr.w	lr, r5, r6
 800098c:	e68d      	b.n	80006aa <__aeabi_dmul+0xde>
 800098e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000992:	ea94 0f0c 	teq	r4, ip
 8000996:	bf08      	it	eq
 8000998:	ea95 0f0c 	teqeq	r5, ip
 800099c:	f43f af3b 	beq.w	8000816 <__aeabi_dmul+0x24a>
 80009a0:	ea94 0f0c 	teq	r4, ip
 80009a4:	d10a      	bne.n	80009bc <__aeabi_ddiv+0x19c>
 80009a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009aa:	f47f af34 	bne.w	8000816 <__aeabi_dmul+0x24a>
 80009ae:	ea95 0f0c 	teq	r5, ip
 80009b2:	f47f af25 	bne.w	8000800 <__aeabi_dmul+0x234>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e72c      	b.n	8000816 <__aeabi_dmul+0x24a>
 80009bc:	ea95 0f0c 	teq	r5, ip
 80009c0:	d106      	bne.n	80009d0 <__aeabi_ddiv+0x1b0>
 80009c2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c6:	f43f aefd 	beq.w	80007c4 <__aeabi_dmul+0x1f8>
 80009ca:	4610      	mov	r0, r2
 80009cc:	4619      	mov	r1, r3
 80009ce:	e722      	b.n	8000816 <__aeabi_dmul+0x24a>
 80009d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d4:	bf18      	it	ne
 80009d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009da:	f47f aec5 	bne.w	8000768 <__aeabi_dmul+0x19c>
 80009de:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009e2:	f47f af0d 	bne.w	8000800 <__aeabi_dmul+0x234>
 80009e6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ea:	f47f aeeb 	bne.w	80007c4 <__aeabi_dmul+0x1f8>
 80009ee:	e712      	b.n	8000816 <__aeabi_dmul+0x24a>

080009f0 <__gedf2>:
 80009f0:	f04f 3cff 	mov.w	ip, #4294967295
 80009f4:	e006      	b.n	8000a04 <__cmpdf2+0x4>
 80009f6:	bf00      	nop

080009f8 <__ledf2>:
 80009f8:	f04f 0c01 	mov.w	ip, #1
 80009fc:	e002      	b.n	8000a04 <__cmpdf2+0x4>
 80009fe:	bf00      	nop

08000a00 <__cmpdf2>:
 8000a00:	f04f 0c01 	mov.w	ip, #1
 8000a04:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a1a:	d01b      	beq.n	8000a54 <__cmpdf2+0x54>
 8000a1c:	b001      	add	sp, #4
 8000a1e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a22:	bf0c      	ite	eq
 8000a24:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a28:	ea91 0f03 	teqne	r1, r3
 8000a2c:	bf02      	ittt	eq
 8000a2e:	ea90 0f02 	teqeq	r0, r2
 8000a32:	2000      	moveq	r0, #0
 8000a34:	4770      	bxeq	lr
 8000a36:	f110 0f00 	cmn.w	r0, #0
 8000a3a:	ea91 0f03 	teq	r1, r3
 8000a3e:	bf58      	it	pl
 8000a40:	4299      	cmppl	r1, r3
 8000a42:	bf08      	it	eq
 8000a44:	4290      	cmpeq	r0, r2
 8000a46:	bf2c      	ite	cs
 8000a48:	17d8      	asrcs	r0, r3, #31
 8000a4a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4e:	f040 0001 	orr.w	r0, r0, #1
 8000a52:	4770      	bx	lr
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	d102      	bne.n	8000a64 <__cmpdf2+0x64>
 8000a5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a62:	d107      	bne.n	8000a74 <__cmpdf2+0x74>
 8000a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	d1d6      	bne.n	8000a1c <__cmpdf2+0x1c>
 8000a6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a72:	d0d3      	beq.n	8000a1c <__cmpdf2+0x1c>
 8000a74:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop

08000a7c <__aeabi_cdrcmple>:
 8000a7c:	4684      	mov	ip, r0
 8000a7e:	4610      	mov	r0, r2
 8000a80:	4662      	mov	r2, ip
 8000a82:	468c      	mov	ip, r1
 8000a84:	4619      	mov	r1, r3
 8000a86:	4663      	mov	r3, ip
 8000a88:	e000      	b.n	8000a8c <__aeabi_cdcmpeq>
 8000a8a:	bf00      	nop

08000a8c <__aeabi_cdcmpeq>:
 8000a8c:	b501      	push	{r0, lr}
 8000a8e:	f7ff ffb7 	bl	8000a00 <__cmpdf2>
 8000a92:	2800      	cmp	r0, #0
 8000a94:	bf48      	it	mi
 8000a96:	f110 0f00 	cmnmi.w	r0, #0
 8000a9a:	bd01      	pop	{r0, pc}

08000a9c <__aeabi_dcmpeq>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff fff4 	bl	8000a8c <__aeabi_cdcmpeq>
 8000aa4:	bf0c      	ite	eq
 8000aa6:	2001      	moveq	r0, #1
 8000aa8:	2000      	movne	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmplt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffea 	bl	8000a8c <__aeabi_cdcmpeq>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmple>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffe0 	bl	8000a8c <__aeabi_cdcmpeq>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpge>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffce 	bl	8000a7c <__aeabi_cdrcmple>
 8000ae0:	bf94      	ite	ls
 8000ae2:	2001      	movls	r0, #1
 8000ae4:	2000      	movhi	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpgt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffc4 	bl	8000a7c <__aeabi_cdrcmple>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmpun>:
 8000b00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d102      	bne.n	8000b10 <__aeabi_dcmpun+0x10>
 8000b0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0e:	d10a      	bne.n	8000b26 <__aeabi_dcmpun+0x26>
 8000b10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__aeabi_dcmpun+0x20>
 8000b1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1e:	d102      	bne.n	8000b26 <__aeabi_dcmpun+0x26>
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	f04f 0001 	mov.w	r0, #1
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_frsub>:
 8000c5c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c60:	e002      	b.n	8000c68 <__addsf3>
 8000c62:	bf00      	nop

08000c64 <__aeabi_fsub>:
 8000c64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c68 <__addsf3>:
 8000c68:	0042      	lsls	r2, r0, #1
 8000c6a:	bf1f      	itttt	ne
 8000c6c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c70:	ea92 0f03 	teqne	r2, r3
 8000c74:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c78:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c7c:	d06a      	beq.n	8000d54 <__addsf3+0xec>
 8000c7e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c82:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c86:	bfc1      	itttt	gt
 8000c88:	18d2      	addgt	r2, r2, r3
 8000c8a:	4041      	eorgt	r1, r0
 8000c8c:	4048      	eorgt	r0, r1
 8000c8e:	4041      	eorgt	r1, r0
 8000c90:	bfb8      	it	lt
 8000c92:	425b      	neglt	r3, r3
 8000c94:	2b19      	cmp	r3, #25
 8000c96:	bf88      	it	hi
 8000c98:	4770      	bxhi	lr
 8000c9a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ca6:	bf18      	it	ne
 8000ca8:	4240      	negne	r0, r0
 8000caa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cb2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cb6:	bf18      	it	ne
 8000cb8:	4249      	negne	r1, r1
 8000cba:	ea92 0f03 	teq	r2, r3
 8000cbe:	d03f      	beq.n	8000d40 <__addsf3+0xd8>
 8000cc0:	f1a2 0201 	sub.w	r2, r2, #1
 8000cc4:	fa41 fc03 	asr.w	ip, r1, r3
 8000cc8:	eb10 000c 	adds.w	r0, r0, ip
 8000ccc:	f1c3 0320 	rsb	r3, r3, #32
 8000cd0:	fa01 f103 	lsl.w	r1, r1, r3
 8000cd4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd8:	d502      	bpl.n	8000ce0 <__addsf3+0x78>
 8000cda:	4249      	negs	r1, r1
 8000cdc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ce0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ce4:	d313      	bcc.n	8000d0e <__addsf3+0xa6>
 8000ce6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cea:	d306      	bcc.n	8000cfa <__addsf3+0x92>
 8000cec:	0840      	lsrs	r0, r0, #1
 8000cee:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cf2:	f102 0201 	add.w	r2, r2, #1
 8000cf6:	2afe      	cmp	r2, #254	; 0xfe
 8000cf8:	d251      	bcs.n	8000d9e <__addsf3+0x136>
 8000cfa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	ea40 0003 	orr.w	r0, r0, r3
 8000d0c:	4770      	bx	lr
 8000d0e:	0049      	lsls	r1, r1, #1
 8000d10:	eb40 0000 	adc.w	r0, r0, r0
 8000d14:	3a01      	subs	r2, #1
 8000d16:	bf28      	it	cs
 8000d18:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d1c:	d2ed      	bcs.n	8000cfa <__addsf3+0x92>
 8000d1e:	fab0 fc80 	clz	ip, r0
 8000d22:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d26:	ebb2 020c 	subs.w	r2, r2, ip
 8000d2a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d2e:	bfaa      	itet	ge
 8000d30:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d34:	4252      	neglt	r2, r2
 8000d36:	4318      	orrge	r0, r3
 8000d38:	bfbc      	itt	lt
 8000d3a:	40d0      	lsrlt	r0, r2
 8000d3c:	4318      	orrlt	r0, r3
 8000d3e:	4770      	bx	lr
 8000d40:	f092 0f00 	teq	r2, #0
 8000d44:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d48:	bf06      	itte	eq
 8000d4a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d4e:	3201      	addeq	r2, #1
 8000d50:	3b01      	subne	r3, #1
 8000d52:	e7b5      	b.n	8000cc0 <__addsf3+0x58>
 8000d54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d5c:	bf18      	it	ne
 8000d5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d62:	d021      	beq.n	8000da8 <__addsf3+0x140>
 8000d64:	ea92 0f03 	teq	r2, r3
 8000d68:	d004      	beq.n	8000d74 <__addsf3+0x10c>
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	bf08      	it	eq
 8000d70:	4608      	moveq	r0, r1
 8000d72:	4770      	bx	lr
 8000d74:	ea90 0f01 	teq	r0, r1
 8000d78:	bf1c      	itt	ne
 8000d7a:	2000      	movne	r0, #0
 8000d7c:	4770      	bxne	lr
 8000d7e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d82:	d104      	bne.n	8000d8e <__addsf3+0x126>
 8000d84:	0040      	lsls	r0, r0, #1
 8000d86:	bf28      	it	cs
 8000d88:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d8c:	4770      	bx	lr
 8000d8e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d92:	bf3c      	itt	cc
 8000d94:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d98:	4770      	bxcc	lr
 8000d9a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d9e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000da2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da6:	4770      	bx	lr
 8000da8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000dac:	bf16      	itet	ne
 8000dae:	4608      	movne	r0, r1
 8000db0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000db4:	4601      	movne	r1, r0
 8000db6:	0242      	lsls	r2, r0, #9
 8000db8:	bf06      	itte	eq
 8000dba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dbe:	ea90 0f01 	teqeq	r0, r1
 8000dc2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dc6:	4770      	bx	lr

08000dc8 <__aeabi_ui2f>:
 8000dc8:	f04f 0300 	mov.w	r3, #0
 8000dcc:	e004      	b.n	8000dd8 <__aeabi_i2f+0x8>
 8000dce:	bf00      	nop

08000dd0 <__aeabi_i2f>:
 8000dd0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000dd4:	bf48      	it	mi
 8000dd6:	4240      	negmi	r0, r0
 8000dd8:	ea5f 0c00 	movs.w	ip, r0
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000de4:	4601      	mov	r1, r0
 8000de6:	f04f 0000 	mov.w	r0, #0
 8000dea:	e01c      	b.n	8000e26 <__aeabi_l2f+0x2a>

08000dec <__aeabi_ul2f>:
 8000dec:	ea50 0201 	orrs.w	r2, r0, r1
 8000df0:	bf08      	it	eq
 8000df2:	4770      	bxeq	lr
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e00a      	b.n	8000e10 <__aeabi_l2f+0x14>
 8000dfa:	bf00      	nop

08000dfc <__aeabi_l2f>:
 8000dfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000e00:	bf08      	it	eq
 8000e02:	4770      	bxeq	lr
 8000e04:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e08:	d502      	bpl.n	8000e10 <__aeabi_l2f+0x14>
 8000e0a:	4240      	negs	r0, r0
 8000e0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e10:	ea5f 0c01 	movs.w	ip, r1
 8000e14:	bf02      	ittt	eq
 8000e16:	4684      	moveq	ip, r0
 8000e18:	4601      	moveq	r1, r0
 8000e1a:	2000      	moveq	r0, #0
 8000e1c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e20:	bf08      	it	eq
 8000e22:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e26:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e2a:	fabc f28c 	clz	r2, ip
 8000e2e:	3a08      	subs	r2, #8
 8000e30:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e34:	db10      	blt.n	8000e58 <__aeabi_l2f+0x5c>
 8000e36:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e40:	f1c2 0220 	rsb	r2, r2, #32
 8000e44:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e48:	fa20 f202 	lsr.w	r2, r0, r2
 8000e4c:	eb43 0002 	adc.w	r0, r3, r2
 8000e50:	bf08      	it	eq
 8000e52:	f020 0001 	biceq.w	r0, r0, #1
 8000e56:	4770      	bx	lr
 8000e58:	f102 0220 	add.w	r2, r2, #32
 8000e5c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e60:	f1c2 0220 	rsb	r2, r2, #32
 8000e64:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e68:	fa21 f202 	lsr.w	r2, r1, r2
 8000e6c:	eb43 0002 	adc.w	r0, r3, r2
 8000e70:	bf08      	it	eq
 8000e72:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e76:	4770      	bx	lr

08000e78 <__aeabi_fmul>:
 8000e78:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e7c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e80:	bf1e      	ittt	ne
 8000e82:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e86:	ea92 0f0c 	teqne	r2, ip
 8000e8a:	ea93 0f0c 	teqne	r3, ip
 8000e8e:	d06f      	beq.n	8000f70 <__aeabi_fmul+0xf8>
 8000e90:	441a      	add	r2, r3
 8000e92:	ea80 0c01 	eor.w	ip, r0, r1
 8000e96:	0240      	lsls	r0, r0, #9
 8000e98:	bf18      	it	ne
 8000e9a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e9e:	d01e      	beq.n	8000ede <__aeabi_fmul+0x66>
 8000ea0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ea4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000ea8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000eac:	fba0 3101 	umull	r3, r1, r0, r1
 8000eb0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000eb4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000eb8:	bf3e      	ittt	cc
 8000eba:	0049      	lslcc	r1, r1, #1
 8000ebc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ec0:	005b      	lslcc	r3, r3, #1
 8000ec2:	ea40 0001 	orr.w	r0, r0, r1
 8000ec6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eca:	2afd      	cmp	r2, #253	; 0xfd
 8000ecc:	d81d      	bhi.n	8000f0a <__aeabi_fmul+0x92>
 8000ece:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000ed2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ed6:	bf08      	it	eq
 8000ed8:	f020 0001 	biceq.w	r0, r0, #1
 8000edc:	4770      	bx	lr
 8000ede:	f090 0f00 	teq	r0, #0
 8000ee2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee6:	bf08      	it	eq
 8000ee8:	0249      	lsleq	r1, r1, #9
 8000eea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ef2:	3a7f      	subs	r2, #127	; 0x7f
 8000ef4:	bfc2      	ittt	gt
 8000ef6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000efa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000efe:	4770      	bxgt	lr
 8000f00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f04:	f04f 0300 	mov.w	r3, #0
 8000f08:	3a01      	subs	r2, #1
 8000f0a:	dc5d      	bgt.n	8000fc8 <__aeabi_fmul+0x150>
 8000f0c:	f112 0f19 	cmn.w	r2, #25
 8000f10:	bfdc      	itt	le
 8000f12:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000f16:	4770      	bxle	lr
 8000f18:	f1c2 0200 	rsb	r2, r2, #0
 8000f1c:	0041      	lsls	r1, r0, #1
 8000f1e:	fa21 f102 	lsr.w	r1, r1, r2
 8000f22:	f1c2 0220 	rsb	r2, r2, #32
 8000f26:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f2a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f2e:	f140 0000 	adc.w	r0, r0, #0
 8000f32:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f36:	bf08      	it	eq
 8000f38:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f3c:	4770      	bx	lr
 8000f3e:	f092 0f00 	teq	r2, #0
 8000f42:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f46:	bf02      	ittt	eq
 8000f48:	0040      	lsleq	r0, r0, #1
 8000f4a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f4e:	3a01      	subeq	r2, #1
 8000f50:	d0f9      	beq.n	8000f46 <__aeabi_fmul+0xce>
 8000f52:	ea40 000c 	orr.w	r0, r0, ip
 8000f56:	f093 0f00 	teq	r3, #0
 8000f5a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0049      	lsleq	r1, r1, #1
 8000f62:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f66:	3b01      	subeq	r3, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fmul+0xe6>
 8000f6a:	ea41 010c 	orr.w	r1, r1, ip
 8000f6e:	e78f      	b.n	8000e90 <__aeabi_fmul+0x18>
 8000f70:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f74:	ea92 0f0c 	teq	r2, ip
 8000f78:	bf18      	it	ne
 8000f7a:	ea93 0f0c 	teqne	r3, ip
 8000f7e:	d00a      	beq.n	8000f96 <__aeabi_fmul+0x11e>
 8000f80:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f84:	bf18      	it	ne
 8000f86:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f8a:	d1d8      	bne.n	8000f3e <__aeabi_fmul+0xc6>
 8000f8c:	ea80 0001 	eor.w	r0, r0, r1
 8000f90:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f94:	4770      	bx	lr
 8000f96:	f090 0f00 	teq	r0, #0
 8000f9a:	bf17      	itett	ne
 8000f9c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000fa0:	4608      	moveq	r0, r1
 8000fa2:	f091 0f00 	teqne	r1, #0
 8000fa6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000faa:	d014      	beq.n	8000fd6 <__aeabi_fmul+0x15e>
 8000fac:	ea92 0f0c 	teq	r2, ip
 8000fb0:	d101      	bne.n	8000fb6 <__aeabi_fmul+0x13e>
 8000fb2:	0242      	lsls	r2, r0, #9
 8000fb4:	d10f      	bne.n	8000fd6 <__aeabi_fmul+0x15e>
 8000fb6:	ea93 0f0c 	teq	r3, ip
 8000fba:	d103      	bne.n	8000fc4 <__aeabi_fmul+0x14c>
 8000fbc:	024b      	lsls	r3, r1, #9
 8000fbe:	bf18      	it	ne
 8000fc0:	4608      	movne	r0, r1
 8000fc2:	d108      	bne.n	8000fd6 <__aeabi_fmul+0x15e>
 8000fc4:	ea80 0001 	eor.w	r0, r0, r1
 8000fc8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fcc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fd4:	4770      	bx	lr
 8000fd6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fda:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fde:	4770      	bx	lr

08000fe0 <__aeabi_fdiv>:
 8000fe0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fe4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fe8:	bf1e      	ittt	ne
 8000fea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fee:	ea92 0f0c 	teqne	r2, ip
 8000ff2:	ea93 0f0c 	teqne	r3, ip
 8000ff6:	d069      	beq.n	80010cc <__aeabi_fdiv+0xec>
 8000ff8:	eba2 0203 	sub.w	r2, r2, r3
 8000ffc:	ea80 0c01 	eor.w	ip, r0, r1
 8001000:	0249      	lsls	r1, r1, #9
 8001002:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8001006:	d037      	beq.n	8001078 <__aeabi_fdiv+0x98>
 8001008:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800100c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8001010:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8001014:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8001018:	428b      	cmp	r3, r1
 800101a:	bf38      	it	cc
 800101c:	005b      	lslcc	r3, r3, #1
 800101e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001022:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8001026:	428b      	cmp	r3, r1
 8001028:	bf24      	itt	cs
 800102a:	1a5b      	subcs	r3, r3, r1
 800102c:	ea40 000c 	orrcs.w	r0, r0, ip
 8001030:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001034:	bf24      	itt	cs
 8001036:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800103a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800103e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001042:	bf24      	itt	cs
 8001044:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001048:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800104c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001050:	bf24      	itt	cs
 8001052:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001056:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800105a:	011b      	lsls	r3, r3, #4
 800105c:	bf18      	it	ne
 800105e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001062:	d1e0      	bne.n	8001026 <__aeabi_fdiv+0x46>
 8001064:	2afd      	cmp	r2, #253	; 0xfd
 8001066:	f63f af50 	bhi.w	8000f0a <__aeabi_fmul+0x92>
 800106a:	428b      	cmp	r3, r1
 800106c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001070:	bf08      	it	eq
 8001072:	f020 0001 	biceq.w	r0, r0, #1
 8001076:	4770      	bx	lr
 8001078:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800107c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001080:	327f      	adds	r2, #127	; 0x7f
 8001082:	bfc2      	ittt	gt
 8001084:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001088:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800108c:	4770      	bxgt	lr
 800108e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001092:	f04f 0300 	mov.w	r3, #0
 8001096:	3a01      	subs	r2, #1
 8001098:	e737      	b.n	8000f0a <__aeabi_fmul+0x92>
 800109a:	f092 0f00 	teq	r2, #0
 800109e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80010a2:	bf02      	ittt	eq
 80010a4:	0040      	lsleq	r0, r0, #1
 80010a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80010aa:	3a01      	subeq	r2, #1
 80010ac:	d0f9      	beq.n	80010a2 <__aeabi_fdiv+0xc2>
 80010ae:	ea40 000c 	orr.w	r0, r0, ip
 80010b2:	f093 0f00 	teq	r3, #0
 80010b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80010ba:	bf02      	ittt	eq
 80010bc:	0049      	lsleq	r1, r1, #1
 80010be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010c2:	3b01      	subeq	r3, #1
 80010c4:	d0f9      	beq.n	80010ba <__aeabi_fdiv+0xda>
 80010c6:	ea41 010c 	orr.w	r1, r1, ip
 80010ca:	e795      	b.n	8000ff8 <__aeabi_fdiv+0x18>
 80010cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010d0:	ea92 0f0c 	teq	r2, ip
 80010d4:	d108      	bne.n	80010e8 <__aeabi_fdiv+0x108>
 80010d6:	0242      	lsls	r2, r0, #9
 80010d8:	f47f af7d 	bne.w	8000fd6 <__aeabi_fmul+0x15e>
 80010dc:	ea93 0f0c 	teq	r3, ip
 80010e0:	f47f af70 	bne.w	8000fc4 <__aeabi_fmul+0x14c>
 80010e4:	4608      	mov	r0, r1
 80010e6:	e776      	b.n	8000fd6 <__aeabi_fmul+0x15e>
 80010e8:	ea93 0f0c 	teq	r3, ip
 80010ec:	d104      	bne.n	80010f8 <__aeabi_fdiv+0x118>
 80010ee:	024b      	lsls	r3, r1, #9
 80010f0:	f43f af4c 	beq.w	8000f8c <__aeabi_fmul+0x114>
 80010f4:	4608      	mov	r0, r1
 80010f6:	e76e      	b.n	8000fd6 <__aeabi_fmul+0x15e>
 80010f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010fc:	bf18      	it	ne
 80010fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001102:	d1ca      	bne.n	800109a <__aeabi_fdiv+0xba>
 8001104:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001108:	f47f af5c 	bne.w	8000fc4 <__aeabi_fmul+0x14c>
 800110c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001110:	f47f af3c 	bne.w	8000f8c <__aeabi_fmul+0x114>
 8001114:	e75f      	b.n	8000fd6 <__aeabi_fmul+0x15e>
 8001116:	bf00      	nop

08001118 <__gesf2>:
 8001118:	f04f 3cff 	mov.w	ip, #4294967295
 800111c:	e006      	b.n	800112c <__cmpsf2+0x4>
 800111e:	bf00      	nop

08001120 <__lesf2>:
 8001120:	f04f 0c01 	mov.w	ip, #1
 8001124:	e002      	b.n	800112c <__cmpsf2+0x4>
 8001126:	bf00      	nop

08001128 <__cmpsf2>:
 8001128:	f04f 0c01 	mov.w	ip, #1
 800112c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001130:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001134:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001138:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800113c:	bf18      	it	ne
 800113e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001142:	d011      	beq.n	8001168 <__cmpsf2+0x40>
 8001144:	b001      	add	sp, #4
 8001146:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800114a:	bf18      	it	ne
 800114c:	ea90 0f01 	teqne	r0, r1
 8001150:	bf58      	it	pl
 8001152:	ebb2 0003 	subspl.w	r0, r2, r3
 8001156:	bf88      	it	hi
 8001158:	17c8      	asrhi	r0, r1, #31
 800115a:	bf38      	it	cc
 800115c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001160:	bf18      	it	ne
 8001162:	f040 0001 	orrne.w	r0, r0, #1
 8001166:	4770      	bx	lr
 8001168:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800116c:	d102      	bne.n	8001174 <__cmpsf2+0x4c>
 800116e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001172:	d105      	bne.n	8001180 <__cmpsf2+0x58>
 8001174:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001178:	d1e4      	bne.n	8001144 <__cmpsf2+0x1c>
 800117a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800117e:	d0e1      	beq.n	8001144 <__cmpsf2+0x1c>
 8001180:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop

08001188 <__aeabi_cfrcmple>:
 8001188:	4684      	mov	ip, r0
 800118a:	4608      	mov	r0, r1
 800118c:	4661      	mov	r1, ip
 800118e:	e7ff      	b.n	8001190 <__aeabi_cfcmpeq>

08001190 <__aeabi_cfcmpeq>:
 8001190:	b50f      	push	{r0, r1, r2, r3, lr}
 8001192:	f7ff ffc9 	bl	8001128 <__cmpsf2>
 8001196:	2800      	cmp	r0, #0
 8001198:	bf48      	it	mi
 800119a:	f110 0f00 	cmnmi.w	r0, #0
 800119e:	bd0f      	pop	{r0, r1, r2, r3, pc}

080011a0 <__aeabi_fcmpeq>:
 80011a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011a4:	f7ff fff4 	bl	8001190 <__aeabi_cfcmpeq>
 80011a8:	bf0c      	ite	eq
 80011aa:	2001      	moveq	r0, #1
 80011ac:	2000      	movne	r0, #0
 80011ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80011b2:	bf00      	nop

080011b4 <__aeabi_fcmplt>:
 80011b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b8:	f7ff ffea 	bl	8001190 <__aeabi_cfcmpeq>
 80011bc:	bf34      	ite	cc
 80011be:	2001      	movcc	r0, #1
 80011c0:	2000      	movcs	r0, #0
 80011c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011c6:	bf00      	nop

080011c8 <__aeabi_fcmple>:
 80011c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011cc:	f7ff ffe0 	bl	8001190 <__aeabi_cfcmpeq>
 80011d0:	bf94      	ite	ls
 80011d2:	2001      	movls	r0, #1
 80011d4:	2000      	movhi	r0, #0
 80011d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011da:	bf00      	nop

080011dc <__aeabi_fcmpge>:
 80011dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011e0:	f7ff ffd2 	bl	8001188 <__aeabi_cfrcmple>
 80011e4:	bf94      	ite	ls
 80011e6:	2001      	movls	r0, #1
 80011e8:	2000      	movhi	r0, #0
 80011ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80011ee:	bf00      	nop

080011f0 <__aeabi_fcmpgt>:
 80011f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011f4:	f7ff ffc8 	bl	8001188 <__aeabi_cfrcmple>
 80011f8:	bf34      	ite	cc
 80011fa:	2001      	movcc	r0, #1
 80011fc:	2000      	movcs	r0, #0
 80011fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8001202:	bf00      	nop

08001204 <__aeabi_fcmpun>:
 8001204:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001208:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800120c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001210:	d102      	bne.n	8001218 <__aeabi_fcmpun+0x14>
 8001212:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001216:	d108      	bne.n	800122a <__aeabi_fcmpun+0x26>
 8001218:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800121c:	d102      	bne.n	8001224 <__aeabi_fcmpun+0x20>
 800121e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001222:	d102      	bne.n	800122a <__aeabi_fcmpun+0x26>
 8001224:	f04f 0000 	mov.w	r0, #0
 8001228:	4770      	bx	lr
 800122a:	f04f 0001 	mov.w	r0, #1
 800122e:	4770      	bx	lr

08001230 <__aeabi_d2lz>:
 8001230:	b538      	push	{r3, r4, r5, lr}
 8001232:	4605      	mov	r5, r0
 8001234:	460c      	mov	r4, r1
 8001236:	2200      	movs	r2, #0
 8001238:	2300      	movs	r3, #0
 800123a:	4628      	mov	r0, r5
 800123c:	4621      	mov	r1, r4
 800123e:	f7ff fc37 	bl	8000ab0 <__aeabi_dcmplt>
 8001242:	b928      	cbnz	r0, 8001250 <__aeabi_d2lz+0x20>
 8001244:	4628      	mov	r0, r5
 8001246:	4621      	mov	r1, r4
 8001248:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800124c:	f000 b80a 	b.w	8001264 <__aeabi_d2ulz>
 8001250:	4628      	mov	r0, r5
 8001252:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001256:	f000 f805 	bl	8001264 <__aeabi_d2ulz>
 800125a:	4240      	negs	r0, r0
 800125c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001260:	bd38      	pop	{r3, r4, r5, pc}
 8001262:	bf00      	nop

08001264 <__aeabi_d2ulz>:
 8001264:	b5d0      	push	{r4, r6, r7, lr}
 8001266:	2200      	movs	r2, #0
 8001268:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <__aeabi_d2ulz+0x34>)
 800126a:	4606      	mov	r6, r0
 800126c:	460f      	mov	r7, r1
 800126e:	f7ff f9ad 	bl	80005cc <__aeabi_dmul>
 8001272:	f7ff fc83 	bl	8000b7c <__aeabi_d2uiz>
 8001276:	4604      	mov	r4, r0
 8001278:	f7ff f92e 	bl	80004d8 <__aeabi_ui2d>
 800127c:	2200      	movs	r2, #0
 800127e:	4b07      	ldr	r3, [pc, #28]	; (800129c <__aeabi_d2ulz+0x38>)
 8001280:	f7ff f9a4 	bl	80005cc <__aeabi_dmul>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4630      	mov	r0, r6
 800128a:	4639      	mov	r1, r7
 800128c:	f7fe ffe6 	bl	800025c <__aeabi_dsub>
 8001290:	f7ff fc74 	bl	8000b7c <__aeabi_d2uiz>
 8001294:	4621      	mov	r1, r4
 8001296:	bdd0      	pop	{r4, r6, r7, pc}
 8001298:	3df00000 	.word	0x3df00000
 800129c:	41f00000 	.word	0x41f00000

080012a0 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80012a4:	4b17      	ldr	r3, [pc, #92]	; (8001304 <MX_CAN_Init+0x64>)
 80012a6:	4a18      	ldr	r2, [pc, #96]	; (8001308 <MX_CAN_Init+0x68>)
 80012a8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80012aa:	4b16      	ldr	r3, [pc, #88]	; (8001304 <MX_CAN_Init+0x64>)
 80012ac:	2204      	movs	r2, #4
 80012ae:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80012b0:	4b14      	ldr	r3, [pc, #80]	; (8001304 <MX_CAN_Init+0x64>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80012b6:	4b13      	ldr	r3, [pc, #76]	; (8001304 <MX_CAN_Init+0x64>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_9TQ;
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <MX_CAN_Init+0x64>)
 80012be:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80012c2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 80012c4:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <MX_CAN_Init+0x64>)
 80012c6:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 80012ca:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80012cc:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <MX_CAN_Init+0x64>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80012d2:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <MX_CAN_Init+0x64>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80012d8:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <MX_CAN_Init+0x64>)
 80012da:	2200      	movs	r2, #0
 80012dc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <MX_CAN_Init+0x64>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80012e4:	4b07      	ldr	r3, [pc, #28]	; (8001304 <MX_CAN_Init+0x64>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <MX_CAN_Init+0x64>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80012f0:	4804      	ldr	r0, [pc, #16]	; (8001304 <MX_CAN_Init+0x64>)
 80012f2:	f002 f9ed 	bl	80036d0 <HAL_CAN_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80012fc:	f000 ff6e 	bl	80021dc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000260 	.word	0x20000260
 8001308:	40006400 	.word	0x40006400

0800130c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08a      	sub	sp, #40	; 0x28
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a25      	ldr	r2, [pc, #148]	; (80013bc <HAL_CAN_MspInit+0xb0>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d143      	bne.n	80013b4 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800132c:	4b24      	ldr	r3, [pc, #144]	; (80013c0 <HAL_CAN_MspInit+0xb4>)
 800132e:	69db      	ldr	r3, [r3, #28]
 8001330:	4a23      	ldr	r2, [pc, #140]	; (80013c0 <HAL_CAN_MspInit+0xb4>)
 8001332:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001336:	61d3      	str	r3, [r2, #28]
 8001338:	4b21      	ldr	r3, [pc, #132]	; (80013c0 <HAL_CAN_MspInit+0xb4>)
 800133a:	69db      	ldr	r3, [r3, #28]
 800133c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001344:	4b1e      	ldr	r3, [pc, #120]	; (80013c0 <HAL_CAN_MspInit+0xb4>)
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	4a1d      	ldr	r2, [pc, #116]	; (80013c0 <HAL_CAN_MspInit+0xb4>)
 800134a:	f043 0308 	orr.w	r3, r3, #8
 800134e:	6193      	str	r3, [r2, #24]
 8001350:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <HAL_CAN_MspInit+0xb4>)
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	f003 0308 	and.w	r3, r3, #8
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800135c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001360:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001362:	2300      	movs	r3, #0
 8001364:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	4619      	mov	r1, r3
 8001370:	4814      	ldr	r0, [pc, #80]	; (80013c4 <HAL_CAN_MspInit+0xb8>)
 8001372:	f002 fe07 	bl	8003f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001376:	f44f 7300 	mov.w	r3, #512	; 0x200
 800137a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137c:	2302      	movs	r3, #2
 800137e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001380:	2303      	movs	r3, #3
 8001382:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	4619      	mov	r1, r3
 800138a:	480e      	ldr	r0, [pc, #56]	; (80013c4 <HAL_CAN_MspInit+0xb8>)
 800138c:	f002 fdfa 	bl	8003f84 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001390:	4b0d      	ldr	r3, [pc, #52]	; (80013c8 <HAL_CAN_MspInit+0xbc>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
 8001396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001398:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
 80013a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
 80013ae:	4a06      	ldr	r2, [pc, #24]	; (80013c8 <HAL_CAN_MspInit+0xbc>)
 80013b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b2:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80013b4:	bf00      	nop
 80013b6:	3728      	adds	r7, #40	; 0x28
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40006400 	.word	0x40006400
 80013c0:	40021000 	.word	0x40021000
 80013c4:	40010c00 	.word	0x40010c00
 80013c8:	40010000 	.word	0x40010000

080013cc <CanFilterSetup>:
}

/* USER CODE BEGIN 1 */

void CanFilterSetup(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* TODO: Review Filter Implementation */
  // Use mask and list mode to filter IDs from the CAN ID BOM

  // Filter for 0x500 and 0x600 IDs
  CAN_filter0.FilterIdHigh = (uint16_t) (0x501 << 5);
 80013d0:	4b23      	ldr	r3, [pc, #140]	; (8001460 <CanFilterSetup+0x94>)
 80013d2:	f24a 0220 	movw	r2, #40992	; 0xa020
 80013d6:	601a      	str	r2, [r3, #0]
  CAN_filter0.FilterMaskIdHigh = (uint16_t) (0x7F5 << 5);
 80013d8:	4b21      	ldr	r3, [pc, #132]	; (8001460 <CanFilterSetup+0x94>)
 80013da:	f64f 62a0 	movw	r2, #65184	; 0xfea0
 80013de:	609a      	str	r2, [r3, #8]

  CAN_filter0.FilterIdLow = (uint16_t) (0x620 << 5);
 80013e0:	4b1f      	ldr	r3, [pc, #124]	; (8001460 <CanFilterSetup+0x94>)
 80013e2:	f44f 4244 	mov.w	r2, #50176	; 0xc400
 80013e6:	605a      	str	r2, [r3, #4]
  CAN_filter0.FilterMaskIdLow = (uint16_t) (0x7F8 << 5);
 80013e8:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <CanFilterSetup+0x94>)
 80013ea:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 80013ee:	60da      	str	r2, [r3, #12]

  CAN_filter0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80013f0:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <CanFilterSetup+0x94>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	611a      	str	r2, [r3, #16]
  CAN_filter0.FilterBank = (uint32_t) 0;
 80013f6:	4b1a      	ldr	r3, [pc, #104]	; (8001460 <CanFilterSetup+0x94>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	615a      	str	r2, [r3, #20]
  CAN_filter0.FilterMode = CAN_FILTERMODE_IDMASK;
 80013fc:	4b18      	ldr	r3, [pc, #96]	; (8001460 <CanFilterSetup+0x94>)
 80013fe:	2200      	movs	r2, #0
 8001400:	619a      	str	r2, [r3, #24]
  CAN_filter0.FilterScale = CAN_FILTERSCALE_16BIT;
 8001402:	4b17      	ldr	r3, [pc, #92]	; (8001460 <CanFilterSetup+0x94>)
 8001404:	2200      	movs	r2, #0
 8001406:	61da      	str	r2, [r3, #28]
  CAN_filter0.FilterActivation = CAN_FILTER_ENABLE;
 8001408:	4b15      	ldr	r3, [pc, #84]	; (8001460 <CanFilterSetup+0x94>)
 800140a:	2201      	movs	r2, #1
 800140c:	621a      	str	r2, [r3, #32]

  // Remaining IDs filtered with list mode
  CAN_filter1.FilterIdHigh = (uint16_t) (0x502 << 5);
 800140e:	4b15      	ldr	r3, [pc, #84]	; (8001464 <CanFilterSetup+0x98>)
 8001410:	f24a 0240 	movw	r2, #41024	; 0xa040
 8001414:	601a      	str	r2, [r3, #0]
  CAN_filter1.FilterMaskIdHigh = (uint16_t) (0x401 << 5);
 8001416:	4b13      	ldr	r3, [pc, #76]	; (8001464 <CanFilterSetup+0x98>)
 8001418:	f248 0220 	movw	r2, #32800	; 0x8020
 800141c:	609a      	str	r2, [r3, #8]

  CAN_filter1.FilterIdLow = (uint16_t) (0x401 << 5);
 800141e:	4b11      	ldr	r3, [pc, #68]	; (8001464 <CanFilterSetup+0x98>)
 8001420:	f248 0220 	movw	r2, #32800	; 0x8020
 8001424:	605a      	str	r2, [r3, #4]
  CAN_filter1.FilterMaskIdLow = (uint16_t) (0x401 << 5);
 8001426:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <CanFilterSetup+0x98>)
 8001428:	f248 0220 	movw	r2, #32800	; 0x8020
 800142c:	60da      	str	r2, [r3, #12]

  CAN_filter1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800142e:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <CanFilterSetup+0x98>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  CAN_filter1.FilterBank = (uint32_t) 1;
 8001434:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <CanFilterSetup+0x98>)
 8001436:	2201      	movs	r2, #1
 8001438:	615a      	str	r2, [r3, #20]
  CAN_filter1.FilterMode = CAN_FILTERMODE_IDLIST;
 800143a:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <CanFilterSetup+0x98>)
 800143c:	2201      	movs	r2, #1
 800143e:	619a      	str	r2, [r3, #24]
  CAN_filter1.FilterScale = CAN_FILTERSCALE_16BIT;
 8001440:	4b08      	ldr	r3, [pc, #32]	; (8001464 <CanFilterSetup+0x98>)
 8001442:	2200      	movs	r2, #0
 8001444:	61da      	str	r2, [r3, #28]
  CAN_filter1.FilterActivation = CAN_FILTER_ENABLE;
 8001446:	4b07      	ldr	r3, [pc, #28]	; (8001464 <CanFilterSetup+0x98>)
 8001448:	2201      	movs	r2, #1
 800144a:	621a      	str	r2, [r3, #32]

  // Configure reception filters
  HAL_CAN_ConfigFilter(&hcan, &CAN_filter0);
 800144c:	4904      	ldr	r1, [pc, #16]	; (8001460 <CanFilterSetup+0x94>)
 800144e:	4806      	ldr	r0, [pc, #24]	; (8001468 <CanFilterSetup+0x9c>)
 8001450:	f002 fa39 	bl	80038c6 <HAL_CAN_ConfigFilter>
  HAL_CAN_ConfigFilter(&hcan, &CAN_filter1);
 8001454:	4903      	ldr	r1, [pc, #12]	; (8001464 <CanFilterSetup+0x98>)
 8001456:	4804      	ldr	r0, [pc, #16]	; (8001468 <CanFilterSetup+0x9c>)
 8001458:	f002 fa35 	bl	80038c6 <HAL_CAN_ConfigFilter>

}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}
 8001460:	200003a8 	.word	0x200003a8
 8001464:	200003d0 	.word	0x200003d0
 8001468:	20000260 	.word	0x20000260

0800146c <Can_Init>:

/*
 * CAN set-up: Sets up the filters, Starts CAN with HAL, and Activates notifications for interrupts.
 */
void Can_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
  CanFilterSetup();
 8001472:	f7ff ffab 	bl	80013cc <CanFilterSetup>
  can_start = HAL_CAN_Start(&hcan);
 8001476:	4808      	ldr	r0, [pc, #32]	; (8001498 <Can_Init+0x2c>)
 8001478:	f002 faee 	bl	8003a58 <HAL_CAN_Start>
 800147c:	4603      	mov	r3, r0
 800147e:	461a      	mov	r2, r3
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <Can_Init+0x30>)
 8001482:	701a      	strb	r2, [r3, #0]
  assert_param(can_start == HAL_OK);

  HAL_StatusTypeDef can_notification_status = HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001484:	2102      	movs	r1, #2
 8001486:	4804      	ldr	r0, [pc, #16]	; (8001498 <Can_Init+0x2c>)
 8001488:	f002 fc72 	bl	8003d70 <HAL_CAN_ActivateNotification>
 800148c:	4603      	mov	r3, r0
 800148e:	71fb      	strb	r3, [r7, #7]
  assert_param(can_notification_status == HAL_OK);

  /* To avoid warning of unused variable */
  (void) can_notification_status;
}
 8001490:	bf00      	nop
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000260 	.word	0x20000260
 800149c:	2000025c 	.word	0x2000025c

080014a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of canMessageQueue */
  canMessageQueueHandle = osMessageQueueNew (10, sizeof(uint16_t), &canMessageQueue_attributes);
 80014a4:	4a2c      	ldr	r2, [pc, #176]	; (8001558 <MX_FREERTOS_Init+0xb8>)
 80014a6:	2102      	movs	r1, #2
 80014a8:	200a      	movs	r0, #10
 80014aa:	f006 fbbf 	bl	8007c2c <osMessageQueueNew>
 80014ae:	4603      	mov	r3, r0
 80014b0:	4a2a      	ldr	r2, [pc, #168]	; (800155c <MX_FREERTOS_Init+0xbc>)
 80014b2:	6013      	str	r3, [r2, #0]

  /* creation of imuMessageQueue */
  imuMessageQueueHandle = osMessageQueueNew (10, sizeof(uint16_t), &imuMessageQueue_attributes);
 80014b4:	4a2a      	ldr	r2, [pc, #168]	; (8001560 <MX_FREERTOS_Init+0xc0>)
 80014b6:	2102      	movs	r1, #2
 80014b8:	200a      	movs	r0, #10
 80014ba:	f006 fbb7 	bl	8007c2c <osMessageQueueNew>
 80014be:	4603      	mov	r3, r0
 80014c0:	4a28      	ldr	r2, [pc, #160]	; (8001564 <MX_FREERTOS_Init+0xc4>)
 80014c2:	6013      	str	r3, [r2, #0]

  /* creation of gpsMessageQueue */
  gpsMessageQueueHandle = osMessageQueueNew (10, sizeof(uint16_t), &gpsMessageQueue_attributes);
 80014c4:	4a28      	ldr	r2, [pc, #160]	; (8001568 <MX_FREERTOS_Init+0xc8>)
 80014c6:	2102      	movs	r1, #2
 80014c8:	200a      	movs	r0, #10
 80014ca:	f006 fbaf 	bl	8007c2c <osMessageQueueNew>
 80014ce:	4603      	mov	r3, r0
 80014d0:	4a26      	ldr	r2, [pc, #152]	; (800156c <MX_FREERTOS_Init+0xcc>)
 80014d2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of StartDefaultTask */
  StartDefaultTaskHandle = osThreadNew(startDefaultTask, NULL, &StartDefaultTask_attributes);
 80014d4:	4a26      	ldr	r2, [pc, #152]	; (8001570 <MX_FREERTOS_Init+0xd0>)
 80014d6:	2100      	movs	r1, #0
 80014d8:	4826      	ldr	r0, [pc, #152]	; (8001574 <MX_FREERTOS_Init+0xd4>)
 80014da:	f006 fa09 	bl	80078f0 <osThreadNew>
 80014de:	4603      	mov	r3, r0
 80014e0:	4a25      	ldr	r2, [pc, #148]	; (8001578 <MX_FREERTOS_Init+0xd8>)
 80014e2:	6013      	str	r3, [r2, #0]

  /* creation of readCANTask */
  readCANTaskHandle = osThreadNew(read_CAN_task, NULL, &readCANTask_attributes);
 80014e4:	4a25      	ldr	r2, [pc, #148]	; (800157c <MX_FREERTOS_Init+0xdc>)
 80014e6:	2100      	movs	r1, #0
 80014e8:	4825      	ldr	r0, [pc, #148]	; (8001580 <MX_FREERTOS_Init+0xe0>)
 80014ea:	f006 fa01 	bl	80078f0 <osThreadNew>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4a24      	ldr	r2, [pc, #144]	; (8001584 <MX_FREERTOS_Init+0xe4>)
 80014f2:	6013      	str	r3, [r2, #0]

  /* creation of transmitCANTask */
  transmitCANTaskHandle = osThreadNew(transmit_CAN_task, NULL, &transmitCANTask_attributes);
 80014f4:	4a24      	ldr	r2, [pc, #144]	; (8001588 <MX_FREERTOS_Init+0xe8>)
 80014f6:	2100      	movs	r1, #0
 80014f8:	4824      	ldr	r0, [pc, #144]	; (800158c <MX_FREERTOS_Init+0xec>)
 80014fa:	f006 f9f9 	bl	80078f0 <osThreadNew>
 80014fe:	4603      	mov	r3, r0
 8001500:	4a23      	ldr	r2, [pc, #140]	; (8001590 <MX_FREERTOS_Init+0xf0>)
 8001502:	6013      	str	r3, [r2, #0]

  /* creation of readIMUTask */
  readIMUTaskHandle = osThreadNew(read_IMU_task, NULL, &readIMUTask_attributes);
 8001504:	4a23      	ldr	r2, [pc, #140]	; (8001594 <MX_FREERTOS_Init+0xf4>)
 8001506:	2100      	movs	r1, #0
 8001508:	4823      	ldr	r0, [pc, #140]	; (8001598 <MX_FREERTOS_Init+0xf8>)
 800150a:	f006 f9f1 	bl	80078f0 <osThreadNew>
 800150e:	4603      	mov	r3, r0
 8001510:	4a22      	ldr	r2, [pc, #136]	; (800159c <MX_FREERTOS_Init+0xfc>)
 8001512:	6013      	str	r3, [r2, #0]

  /* creation of transmitIMUTask */
  transmitIMUTaskHandle = osThreadNew(transmit_IMU_task, NULL, &transmitIMUTask_attributes);
 8001514:	4a22      	ldr	r2, [pc, #136]	; (80015a0 <MX_FREERTOS_Init+0x100>)
 8001516:	2100      	movs	r1, #0
 8001518:	4822      	ldr	r0, [pc, #136]	; (80015a4 <MX_FREERTOS_Init+0x104>)
 800151a:	f006 f9e9 	bl	80078f0 <osThreadNew>
 800151e:	4603      	mov	r3, r0
 8001520:	4a21      	ldr	r2, [pc, #132]	; (80015a8 <MX_FREERTOS_Init+0x108>)
 8001522:	6013      	str	r3, [r2, #0]

  /* creation of readGPSTask */
  readGPSTaskHandle = osThreadNew(read_GPS_task, NULL, &readGPSTask_attributes);
 8001524:	4a21      	ldr	r2, [pc, #132]	; (80015ac <MX_FREERTOS_Init+0x10c>)
 8001526:	2100      	movs	r1, #0
 8001528:	4821      	ldr	r0, [pc, #132]	; (80015b0 <MX_FREERTOS_Init+0x110>)
 800152a:	f006 f9e1 	bl	80078f0 <osThreadNew>
 800152e:	4603      	mov	r3, r0
 8001530:	4a20      	ldr	r2, [pc, #128]	; (80015b4 <MX_FREERTOS_Init+0x114>)
 8001532:	6013      	str	r3, [r2, #0]

  /* creation of transmitGPSTask */
  transmitGPSTaskHandle = osThreadNew(transmit_GPS_task, NULL, &transmitGPSTask_attributes);
 8001534:	4a20      	ldr	r2, [pc, #128]	; (80015b8 <MX_FREERTOS_Init+0x118>)
 8001536:	2100      	movs	r1, #0
 8001538:	4820      	ldr	r0, [pc, #128]	; (80015bc <MX_FREERTOS_Init+0x11c>)
 800153a:	f006 f9d9 	bl	80078f0 <osThreadNew>
 800153e:	4603      	mov	r3, r0
 8001540:	4a1f      	ldr	r2, [pc, #124]	; (80015c0 <MX_FREERTOS_Init+0x120>)
 8001542:	6013      	str	r3, [r2, #0]

  /* creation of kernelLEDTask */
  kernelLEDTaskHandle = osThreadNew(kernel_LED_task, NULL, &kernelLEDTask_attributes);
 8001544:	4a1f      	ldr	r2, [pc, #124]	; (80015c4 <MX_FREERTOS_Init+0x124>)
 8001546:	2100      	movs	r1, #0
 8001548:	481f      	ldr	r0, [pc, #124]	; (80015c8 <MX_FREERTOS_Init+0x128>)
 800154a:	f006 f9d1 	bl	80078f0 <osThreadNew>
 800154e:	4603      	mov	r3, r0
 8001550:	4a1e      	ldr	r2, [pc, #120]	; (80015cc <MX_FREERTOS_Init+0x12c>)
 8001552:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}
 8001558:	0801068c 	.word	0x0801068c
 800155c:	200002a8 	.word	0x200002a8
 8001560:	080106a4 	.word	0x080106a4
 8001564:	200002ac 	.word	0x200002ac
 8001568:	080106bc 	.word	0x080106bc
 800156c:	200002b0 	.word	0x200002b0
 8001570:	0801056c 	.word	0x0801056c
 8001574:	080015d1 	.word	0x080015d1
 8001578:	20000288 	.word	0x20000288
 800157c:	08010590 	.word	0x08010590
 8001580:	080015e1 	.word	0x080015e1
 8001584:	2000028c 	.word	0x2000028c
 8001588:	080105b4 	.word	0x080105b4
 800158c:	08001689 	.word	0x08001689
 8001590:	20000290 	.word	0x20000290
 8001594:	080105d8 	.word	0x080105d8
 8001598:	080017c9 	.word	0x080017c9
 800159c:	20000294 	.word	0x20000294
 80015a0:	080105fc 	.word	0x080105fc
 80015a4:	08001865 	.word	0x08001865
 80015a8:	20000298 	.word	0x20000298
 80015ac:	08010620 	.word	0x08010620
 80015b0:	08001965 	.word	0x08001965
 80015b4:	2000029c 	.word	0x2000029c
 80015b8:	08010644 	.word	0x08010644
 80015bc:	080019a9 	.word	0x080019a9
 80015c0:	200002a0 	.word	0x200002a0
 80015c4:	08010668 	.word	0x08010668
 80015c8:	08001aad 	.word	0x08001aad
 80015cc:	200002a4 	.word	0x200002a4

080015d0 <startDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_startDefaultTask */
void startDefaultTask(void *argument)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80015d8:	2001      	movs	r0, #1
 80015da:	f006 faf9 	bl	8007bd0 <osDelay>
 80015de:	e7fb      	b.n	80015d8 <startDefaultTask+0x8>

080015e0 <read_CAN_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_CAN_task */
void read_CAN_task(void *argument)
{
 80015e0:	b5b0      	push	{r4, r5, r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  while (1) {

    /* Wait for thread flags to be set in the CAN Rx FIFO0 Interrupt Callback */
    osThreadFlagsWait(CAN_READY, osFlagsWaitAll, osWaitForever);
 80015e8:	f04f 32ff 	mov.w	r2, #4294967295
 80015ec:	2101      	movs	r1, #1
 80015ee:	2001      	movs	r0, #1
 80015f0:	f006 fa5a 	bl	8007aa8 <osThreadFlagsWait>

    /* If CAN Rx FIFO0 is not empty */
    if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) != 0) {
 80015f4:	2100      	movs	r1, #0
 80015f6:	481e      	ldr	r0, [pc, #120]	; (8001670 <read_CAN_task+0x90>)
 80015f8:	f002 fb93 	bl	8003d22 <HAL_CAN_GetRxFifoFillLevel>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d031      	beq.n	8001666 <read_CAN_task+0x86>

      /* There are multiple CAN IDs being passed through the filter, pull out the current message */
      rx_status = HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &can_rx_header, current_can_data);
 8001602:	4b1c      	ldr	r3, [pc, #112]	; (8001674 <read_CAN_task+0x94>)
 8001604:	4a1c      	ldr	r2, [pc, #112]	; (8001678 <read_CAN_task+0x98>)
 8001606:	2100      	movs	r1, #0
 8001608:	4819      	ldr	r0, [pc, #100]	; (8001670 <read_CAN_task+0x90>)
 800160a:	f002 fa69 	bl	8003ae0 <HAL_CAN_GetRxMessage>
 800160e:	4603      	mov	r3, r0
 8001610:	461a      	mov	r2, r3
 8001612:	4b1a      	ldr	r3, [pc, #104]	; (800167c <read_CAN_task+0x9c>)
 8001614:	701a      	strb	r2, [r3, #0]

      /* Check the rx status */
      if (rx_status != HAL_OK) {
 8001616:	4b19      	ldr	r3, [pc, #100]	; (800167c <read_CAN_task+0x9c>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <read_CAN_task+0x42>
	  Error_Handler();
 800161e:	f000 fddd 	bl	80021dc <Error_Handler>
      }

      /* Package into CAN_msg_t */
      current_can_message.header = can_rx_header;
 8001622:	4a17      	ldr	r2, [pc, #92]	; (8001680 <read_CAN_task+0xa0>)
 8001624:	4b14      	ldr	r3, [pc, #80]	; (8001678 <read_CAN_task+0x98>)
 8001626:	4614      	mov	r4, r2
 8001628:	461d      	mov	r5, r3
 800162a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800162c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800162e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001632:	e884 0007 	stmia.w	r4, {r0, r1, r2}

      /* Copy all bytes of data */
      for (uint8_t i = 0; i < 8; i++) {
 8001636:	2300      	movs	r3, #0
 8001638:	73fb      	strb	r3, [r7, #15]
 800163a:	e00a      	b.n	8001652 <read_CAN_task+0x72>
	current_can_message.data[i] = current_can_data[i];
 800163c:	7bfa      	ldrb	r2, [r7, #15]
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	490c      	ldr	r1, [pc, #48]	; (8001674 <read_CAN_task+0x94>)
 8001642:	5c89      	ldrb	r1, [r1, r2]
 8001644:	4a0e      	ldr	r2, [pc, #56]	; (8001680 <read_CAN_task+0xa0>)
 8001646:	4413      	add	r3, r2
 8001648:	460a      	mov	r2, r1
 800164a:	771a      	strb	r2, [r3, #28]
      for (uint8_t i = 0; i < 8; i++) {
 800164c:	7bfb      	ldrb	r3, [r7, #15]
 800164e:	3301      	adds	r3, #1
 8001650:	73fb      	strb	r3, [r7, #15]
 8001652:	7bfb      	ldrb	r3, [r7, #15]
 8001654:	2b07      	cmp	r3, #7
 8001656:	d9f1      	bls.n	800163c <read_CAN_task+0x5c>
      }

      /* Add CAN message onto canMessageQueue */
      osMessageQueuePut(canMessageQueueHandle, &current_can_message, 0U, 0U);
 8001658:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <read_CAN_task+0xa4>)
 800165a:	6818      	ldr	r0, [r3, #0]
 800165c:	2300      	movs	r3, #0
 800165e:	2200      	movs	r2, #0
 8001660:	4907      	ldr	r1, [pc, #28]	; (8001680 <read_CAN_task+0xa0>)
 8001662:	f006 fb69 	bl	8007d38 <osMessageQueuePut>
    }

    /* Enables Interrupts */
    HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001666:	2102      	movs	r1, #2
 8001668:	4801      	ldr	r0, [pc, #4]	; (8001670 <read_CAN_task+0x90>)
 800166a:	f002 fb81 	bl	8003d70 <HAL_CAN_ActivateNotification>
    osThreadFlagsWait(CAN_READY, osFlagsWaitAll, osWaitForever);
 800166e:	e7bb      	b.n	80015e8 <read_CAN_task+0x8>
 8001670:	20000260 	.word	0x20000260
 8001674:	20000414 	.word	0x20000414
 8001678:	200003f8 	.word	0x200003f8
 800167c:	200002b4 	.word	0x200002b4
 8001680:	200002b8 	.word	0x200002b8
 8001684:	200002a8 	.word	0x200002a8

08001688 <transmit_CAN_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_transmit_CAN_task */
void transmit_CAN_task(void *argument)
{
 8001688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800168a:	b08f      	sub	sp, #60	; 0x3c
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  while (1) {

    /* Check if there are messages in the queue */
    if (osMessageQueueGetCount(canMessageQueueHandle) == 0) {
 8001690:	4b49      	ldr	r3, [pc, #292]	; (80017b8 <transmit_CAN_task+0x130>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f006 fc35 	bl	8007f04 <osMessageQueueGetCount>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d101      	bne.n	80016a4 <transmit_CAN_task+0x1c>
      osThreadYield();
 80016a0:	f006 f9d0 	bl	8007a44 <osThreadYield>
    }

    /* Retrieve CAN message from queue */
    queue_status = osMessageQueueGet(canMessageQueueHandle, &can_message, NULL, osWaitForever);
 80016a4:	4b44      	ldr	r3, [pc, #272]	; (80017b8 <transmit_CAN_task+0x130>)
 80016a6:	6818      	ldr	r0, [r3, #0]
 80016a8:	f04f 33ff 	mov.w	r3, #4294967295
 80016ac:	2200      	movs	r2, #0
 80016ae:	4943      	ldr	r1, [pc, #268]	; (80017bc <transmit_CAN_task+0x134>)
 80016b0:	f006 fbb6 	bl	8007e20 <osMessageQueueGet>
 80016b4:	6338      	str	r0, [r7, #48]	; 0x30

    /* Yield if nothing on queue */
    if (queue_status != osOK){
 80016b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <transmit_CAN_task+0x38>
      osThreadYield();
 80016bc:	f006 f9c2 	bl	8007a44 <osThreadYield>
    }

    /* Initialize a CAN buffer */
    uint8_t can_buffer[CAN_BUFFER_LEN] = {0};
 80016c0:	2300      	movs	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	f107 0310 	add.w	r3, r7, #16
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	821a      	strh	r2, [r3, #16]

    /* Get current epoch Time Stamp */
    time_t current_timestamp = get_current_timestamp();
 80016d4:	f001 fc38 	bl	8002f48 <get_current_timestamp>
 80016d8:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28

    /* TIMESTAMP: 8 Bytes */
    for (uint8_t i=0; i<CAN_BUFFER_LEN - 14; i++) {
 80016dc:	2300      	movs	r3, #0
 80016de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80016e2:	e020      	b.n	8001726 <transmit_CAN_task+0x9e>
      /* Put each byte in position 'i' */
      can_buffer[i] = TIMESTAMP_BYTE(i, current_timestamp);
 80016e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80016e8:	00d9      	lsls	r1, r3, #3
 80016ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80016ee:	f1c1 0620 	rsb	r6, r1, #32
 80016f2:	f1b1 0020 	subs.w	r0, r1, #32
 80016f6:	fa22 f401 	lsr.w	r4, r2, r1
 80016fa:	fa03 f606 	lsl.w	r6, r3, r6
 80016fe:	ea44 0406 	orr.w	r4, r4, r6
 8001702:	d402      	bmi.n	800170a <transmit_CAN_task+0x82>
 8001704:	fa43 f000 	asr.w	r0, r3, r0
 8001708:	4304      	orrs	r4, r0
 800170a:	fa43 f501 	asr.w	r5, r3, r1
 800170e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001712:	b2e2      	uxtb	r2, r4
 8001714:	3338      	adds	r3, #56	; 0x38
 8001716:	443b      	add	r3, r7
 8001718:	f803 2c2c 	strb.w	r2, [r3, #-44]
    for (uint8_t i=0; i<CAN_BUFFER_LEN - 14; i++) {
 800171c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001720:	3301      	adds	r3, #1
 8001722:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001726:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800172a:	2b07      	cmp	r3, #7
 800172c:	d9da      	bls.n	80016e4 <transmit_CAN_task+0x5c>
    }

    /* CAN MESSAGE IDENTIFIER */
    can_buffer[CAN_BUFFER_LEN - 14] = '#';
 800172e:	2323      	movs	r3, #35	; 0x23
 8001730:	753b      	strb	r3, [r7, #20]

    /* CAN ID: 4 ASCII characters */
    uint8_t id_h = 0xFFUL & (can_message.header.StdId >> 8);
 8001732:	4b22      	ldr	r3, [pc, #136]	; (80017bc <transmit_CAN_task+0x134>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	0a1b      	lsrs	r3, r3, #8
 8001738:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t id_l = 0xFFUL & (can_message.header.StdId);
 800173c:	4b1f      	ldr	r3, [pc, #124]	; (80017bc <transmit_CAN_task+0x134>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    can_buffer[CAN_BUFFER_LEN - 13] = id_h;
 8001744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001748:	757b      	strb	r3, [r7, #21]
    can_buffer[CAN_BUFFER_LEN - 12] = id_l;
 800174a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800174e:	75bb      	strb	r3, [r7, #22]


    /* CAN DATA: 16 ASCII characters */
    for (uint8_t i=0; i<8; i++) {
 8001750:	2300      	movs	r3, #0
 8001752:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001756:	e010      	b.n	800177a <transmit_CAN_task+0xf2>
      /* Copy each byte */
      can_buffer[i + CAN_BUFFER_LEN - 11]= can_message.data[i];
 8001758:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800175c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001760:	330b      	adds	r3, #11
 8001762:	4916      	ldr	r1, [pc, #88]	; (80017bc <transmit_CAN_task+0x134>)
 8001764:	440a      	add	r2, r1
 8001766:	7f12      	ldrb	r2, [r2, #28]
 8001768:	3338      	adds	r3, #56	; 0x38
 800176a:	443b      	add	r3, r7
 800176c:	f803 2c2c 	strb.w	r2, [r3, #-44]
    for (uint8_t i=0; i<8; i++) {
 8001770:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001774:	3301      	adds	r3, #1
 8001776:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800177a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800177e:	2b07      	cmp	r3, #7
 8001780:	d9ea      	bls.n	8001758 <transmit_CAN_task+0xd0>
    }


    /* CAN DATA LENGTH: 1 ASCII character */
    uint8_t length = "0123456789ABCDEF"[ can_message.header.DLC & 0xFUL];
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <transmit_CAN_task+0x134>)
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	4a0d      	ldr	r2, [pc, #52]	; (80017c0 <transmit_CAN_task+0x138>)
 800178c:	5cd3      	ldrb	r3, [r2, r3]
 800178e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    can_buffer[CAN_BUFFER_LEN - 3] = length;
 8001792:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001796:	77fb      	strb	r3, [r7, #31]

    /* NEW LINE: 1 ASCII character */
    can_buffer[CAN_BUFFER_LEN - 2] = '\r';
 8001798:	230d      	movs	r3, #13
 800179a:	f887 3020 	strb.w	r3, [r7, #32]

    /* CARRIAGE RETURN: 1 ASCII character */
    can_buffer[CAN_BUFFER_LEN - 1] = '\n';
 800179e:	230a      	movs	r3, #10
 80017a0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

    /* Transmit over Radio */
    HAL_UART_Transmit(&huart1, can_buffer, sizeof(can_buffer), 1000);
 80017a4:	f107 010c 	add.w	r1, r7, #12
 80017a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ac:	2216      	movs	r2, #22
 80017ae:	4805      	ldr	r0, [pc, #20]	; (80017c4 <transmit_CAN_task+0x13c>)
 80017b0:	f005 fe96 	bl	80074e0 <HAL_UART_Transmit>
  while (1) {
 80017b4:	e76c      	b.n	8001690 <transmit_CAN_task+0x8>
 80017b6:	bf00      	nop
 80017b8:	200002a8 	.word	0x200002a8
 80017bc:	200002dc 	.word	0x200002dc
 80017c0:	08010448 	.word	0x08010448
 80017c4:	20000514 	.word	0x20000514

080017c8 <read_IMU_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_IMU_task */
void read_IMU_task(void *argument)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  while(1)
  {
    /* Get Data */
    gy_x.float_value = gyro(GYRO_X);
 80017d0:	2000      	movs	r0, #0
 80017d2:	f000 fb6d 	bl	8001eb0 <gyro>
 80017d6:	4603      	mov	r3, r0
 80017d8:	61fb      	str	r3, [r7, #28]
    gy_y.float_value = gyro(GYRO_Y);
 80017da:	2001      	movs	r0, #1
 80017dc:	f000 fb68 	bl	8001eb0 <gyro>
 80017e0:	4603      	mov	r3, r0
 80017e2:	61bb      	str	r3, [r7, #24]
    gy_z.float_value = gyro(GYRO_Z);
 80017e4:	2002      	movs	r0, #2
 80017e6:	f000 fb63 	bl	8001eb0 <gyro>
 80017ea:	4603      	mov	r3, r0
 80017ec:	617b      	str	r3, [r7, #20]
    ax_x.float_value = accel(ACCEL_X);
 80017ee:	2000      	movs	r0, #0
 80017f0:	f000 fbc6 	bl	8001f80 <accel>
 80017f4:	4603      	mov	r3, r0
 80017f6:	613b      	str	r3, [r7, #16]
    ax_y.float_value = accel(ACCEL_Y);
 80017f8:	2001      	movs	r0, #1
 80017fa:	f000 fbc1 	bl	8001f80 <accel>
 80017fe:	4603      	mov	r3, r0
 8001800:	60fb      	str	r3, [r7, #12]
    ax_z.float_value = accel(ACCEL_Z);
 8001802:	2002      	movs	r0, #2
 8001804:	f000 fbbc 	bl	8001f80 <accel>
 8001808:	4603      	mov	r3, r0
 800180a:	60bb      	str	r3, [r7, #8]

    /* Add to IMU Queue */
    add_to_IMU_queue("G", "X", gy_x);
 800180c:	69fa      	ldr	r2, [r7, #28]
 800180e:	4910      	ldr	r1, [pc, #64]	; (8001850 <read_IMU_task+0x88>)
 8001810:	4810      	ldr	r0, [pc, #64]	; (8001854 <read_IMU_task+0x8c>)
 8001812:	f000 f95f 	bl	8001ad4 <add_to_IMU_queue>
    add_to_IMU_queue("G", "Y", gy_y);
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	490f      	ldr	r1, [pc, #60]	; (8001858 <read_IMU_task+0x90>)
 800181a:	480e      	ldr	r0, [pc, #56]	; (8001854 <read_IMU_task+0x8c>)
 800181c:	f000 f95a 	bl	8001ad4 <add_to_IMU_queue>
    add_to_IMU_queue("G", "Z", gy_z);
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	490e      	ldr	r1, [pc, #56]	; (800185c <read_IMU_task+0x94>)
 8001824:	480b      	ldr	r0, [pc, #44]	; (8001854 <read_IMU_task+0x8c>)
 8001826:	f000 f955 	bl	8001ad4 <add_to_IMU_queue>
    add_to_IMU_queue("A", "X", ax_x);
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4908      	ldr	r1, [pc, #32]	; (8001850 <read_IMU_task+0x88>)
 800182e:	480c      	ldr	r0, [pc, #48]	; (8001860 <read_IMU_task+0x98>)
 8001830:	f000 f950 	bl	8001ad4 <add_to_IMU_queue>
    add_to_IMU_queue("A", "Y", ax_y);
 8001834:	68fa      	ldr	r2, [r7, #12]
 8001836:	4908      	ldr	r1, [pc, #32]	; (8001858 <read_IMU_task+0x90>)
 8001838:	4809      	ldr	r0, [pc, #36]	; (8001860 <read_IMU_task+0x98>)
 800183a:	f000 f94b 	bl	8001ad4 <add_to_IMU_queue>
    add_to_IMU_queue("A", "Z", ax_z);
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	4906      	ldr	r1, [pc, #24]	; (800185c <read_IMU_task+0x94>)
 8001842:	4807      	ldr	r0, [pc, #28]	; (8001860 <read_IMU_task+0x98>)
 8001844:	f000 f946 	bl	8001ad4 <add_to_IMU_queue>

    /* Delay */
    osDelay(READ_IMU_DELAY);
 8001848:	2064      	movs	r0, #100	; 0x64
 800184a:	f006 f9c1 	bl	8007bd0 <osDelay>
    gy_x.float_value = gyro(GYRO_X);
 800184e:	e7bf      	b.n	80017d0 <read_IMU_task+0x8>
 8001850:	0801045c 	.word	0x0801045c
 8001854:	08010460 	.word	0x08010460
 8001858:	08010464 	.word	0x08010464
 800185c:	08010468 	.word	0x08010468
 8001860:	0801046c 	.word	0x0801046c

08001864 <transmit_IMU_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_transmit_IMU_task */
void transmit_IMU_task(void *argument)
{
 8001864:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001866:	b091      	sub	sp, #68	; 0x44
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  while(1)
  {
    /* Check if there are messages in the queue */
    if (osMessageQueueGetCount(imuMessageQueueHandle) == 0) {
 800186c:	4b3b      	ldr	r3, [pc, #236]	; (800195c <transmit_IMU_task+0xf8>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f006 fb47 	bl	8007f04 <osMessageQueueGetCount>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d101      	bne.n	8001880 <transmit_IMU_task+0x1c>
	osThreadYield();
 800187c:	f006 f8e2 	bl	8007a44 <osThreadYield>
    }

    /* Get IMU Message from Queue */
    imu_queue_status = osMessageQueueGet(imuMessageQueueHandle, &imu_message, NULL, osWaitForever);
 8001880:	4b36      	ldr	r3, [pc, #216]	; (800195c <transmit_IMU_task+0xf8>)
 8001882:	6818      	ldr	r0, [r3, #0]
 8001884:	f107 0120 	add.w	r1, r7, #32
 8001888:	f04f 33ff 	mov.w	r3, #4294967295
 800188c:	2200      	movs	r2, #0
 800188e:	f006 fac7 	bl	8007e20 <osMessageQueueGet>
 8001892:	6378      	str	r0, [r7, #52]	; 0x34

    /* Yield thread if status not ok */
    if (imu_queue_status != osOK){
 8001894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <transmit_IMU_task+0x3a>
      osThreadYield();
 800189a:	f006 f8d3 	bl	8007a44 <osThreadYield>
    }

    /* Initialize a IMU buffer */
    uint8_t imu_buffer[IMU_MESSAGE_LEN] = {0};
 800189e:	2300      	movs	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	f107 0310 	add.w	r3, r7, #16
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	731a      	strb	r2, [r3, #12]

    /* Get current epoch Time Stamp */
    time_t current_timestamp = get_current_timestamp();
 80018b0:	f001 fb4a 	bl	8002f48 <get_current_timestamp>
 80018b4:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28

    /* TIMESTAMP: 8 Bytes */
    for (uint8_t i=0; i<IMU_MESSAGE_LEN - 9; i++) {
 80018b8:	2300      	movs	r3, #0
 80018ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80018be:	e020      	b.n	8001902 <transmit_IMU_task+0x9e>
      /* Put each byte in position 'i' */
      imu_buffer[i] = TIMESTAMP_BYTE(i, current_timestamp);
 80018c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018c4:	00d9      	lsls	r1, r3, #3
 80018c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80018ca:	f1c1 0620 	rsb	r6, r1, #32
 80018ce:	f1b1 0020 	subs.w	r0, r1, #32
 80018d2:	fa22 f401 	lsr.w	r4, r2, r1
 80018d6:	fa03 f606 	lsl.w	r6, r3, r6
 80018da:	ea44 0406 	orr.w	r4, r4, r6
 80018de:	d402      	bmi.n	80018e6 <transmit_IMU_task+0x82>
 80018e0:	fa43 f000 	asr.w	r0, r3, r0
 80018e4:	4304      	orrs	r4, r0
 80018e6:	fa43 f501 	asr.w	r5, r3, r1
 80018ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018ee:	b2e2      	uxtb	r2, r4
 80018f0:	3340      	adds	r3, #64	; 0x40
 80018f2:	443b      	add	r3, r7
 80018f4:	f803 2c34 	strb.w	r2, [r3, #-52]
    for (uint8_t i=0; i<IMU_MESSAGE_LEN - 9; i++) {
 80018f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018fc:	3301      	adds	r3, #1
 80018fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001902:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001906:	2b07      	cmp	r3, #7
 8001908:	d9da      	bls.n	80018c0 <transmit_IMU_task+0x5c>
    }

    /* IMU ID */
    imu_buffer[IMU_MESSAGE_LEN - 9] = '@';
 800190a:	2340      	movs	r3, #64	; 0x40
 800190c:	753b      	strb	r3, [r7, #20]

    /* IMU Data from queue */
    imu_buffer[IMU_MESSAGE_LEN - 8] = imu_message.imu_type;
 800190e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001912:	757b      	strb	r3, [r7, #21]
    imu_buffer[IMU_MESSAGE_LEN - 7] = imu_message.dimension;
 8001914:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001918:	75bb      	strb	r3, [r7, #22]

    /* Copy data */
    for (int i = 0; i < 4; i++) {
 800191a:	2300      	movs	r3, #0
 800191c:	63bb      	str	r3, [r7, #56]	; 0x38
 800191e:	e00d      	b.n	800193c <transmit_IMU_task+0xd8>
	imu_buffer[i + IMU_MESSAGE_LEN - 6] = imu_message.data[i];
 8001920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001922:	330b      	adds	r3, #11
 8001924:	f107 0122 	add.w	r1, r7, #34	; 0x22
 8001928:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800192a:	440a      	add	r2, r1
 800192c:	7812      	ldrb	r2, [r2, #0]
 800192e:	3340      	adds	r3, #64	; 0x40
 8001930:	443b      	add	r3, r7
 8001932:	f803 2c34 	strb.w	r2, [r3, #-52]
    for (int i = 0; i < 4; i++) {
 8001936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001938:	3301      	adds	r3, #1
 800193a:	63bb      	str	r3, [r7, #56]	; 0x38
 800193c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800193e:	2b03      	cmp	r3, #3
 8001940:	ddee      	ble.n	8001920 <transmit_IMU_task+0xbc>
    }

    /* NEW LINE */
    imu_buffer[IMU_MESSAGE_LEN - 2] = '\r';
 8001942:	230d      	movs	r3, #13
 8001944:	76fb      	strb	r3, [r7, #27]

    /* CARRIAGE RETURN */
    imu_buffer[IMU_MESSAGE_LEN - 1] = '\n';
 8001946:	230a      	movs	r3, #10
 8001948:	773b      	strb	r3, [r7, #28]

    /* Transmit over Radio */
    HAL_UART_Transmit(&huart1, imu_buffer, sizeof(imu_buffer), 1000);
 800194a:	f107 010c 	add.w	r1, r7, #12
 800194e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001952:	2211      	movs	r2, #17
 8001954:	4802      	ldr	r0, [pc, #8]	; (8001960 <transmit_IMU_task+0xfc>)
 8001956:	f005 fdc3 	bl	80074e0 <HAL_UART_Transmit>
  {
 800195a:	e787      	b.n	800186c <transmit_IMU_task+0x8>
 800195c:	200002ac 	.word	0x200002ac
 8001960:	20000514 	.word	0x20000514

08001964 <read_GPS_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_read_GPS_task */
void read_GPS_task(void *argument)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 800196a:	af00      	add	r7, sp, #0
 800196c:	f507 7312 	add.w	r3, r7, #584	; 0x248
 8001970:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 8001974:	6018      	str	r0, [r3, #0]

    /* Initialize a GPS data struct */
    GPS parsed_GPS_data;

    /* Read in an NMEA message into the buffer */
    readNMEA(&receive_buffer);
 8001976:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800197a:	4618      	mov	r0, r3
 800197c:	f000 fb8e 	bl	800209c <readNMEA>

    /* Parse the buffer data --> gets stored in parsed_GPS_data */
    nmea_parse(&parsed_GPS_data, &receive_buffer);
 8001980:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001984:	f107 0308 	add.w	r3, r7, #8
 8001988:	4611      	mov	r1, r2
 800198a:	4618      	mov	r0, r3
 800198c:	f001 f8ba 	bl	8002b04 <nmea_parse>

    /* Add to the GPS Queue */
    add_to_GPS_queue(&parsed_GPS_data);
 8001990:	f107 0308 	add.w	r3, r7, #8
 8001994:	4618      	mov	r0, r3
 8001996:	f000 f8cb 	bl	8001b30 <add_to_GPS_queue>

    /* Delay */
    osDelay(READ_GPS_DELAY);
 800199a:	4802      	ldr	r0, [pc, #8]	; (80019a4 <read_GPS_task+0x40>)
 800199c:	f006 f918 	bl	8007bd0 <osDelay>
  while(1) {
 80019a0:	e7e9      	b.n	8001976 <read_GPS_task+0x12>
 80019a2:	bf00      	nop
 80019a4:	000493e0 	.word	0x000493e0

080019a8 <transmit_GPS_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_transmit_GPS_task */
void transmit_GPS_task(void *argument)
{
 80019a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019aa:	b0df      	sub	sp, #380	; 0x17c
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80019b2:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80019b6:	6018      	str	r0, [r3, #0]

  /* Infinite loop */
  while(1) {

    /* Check if there are messages in the queue */
    if (osMessageQueueGetCount(gpsMessageQueueHandle) == 0) {
 80019b8:	4b3a      	ldr	r3, [pc, #232]	; (8001aa4 <transmit_GPS_task+0xfc>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f006 faa1 	bl	8007f04 <osMessageQueueGetCount>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <transmit_GPS_task+0x24>
      osThreadYield(); // Yield to other tasks if the queue is empty
 80019c8:	f006 f83c 	bl	8007a44 <osThreadYield>
    }

    /* Get a message from the queue */
    nmea_queue_status = osMessageQueueGet(gpsMessageQueueHandle, &gps_message, NULL, osWaitForever);
 80019cc:	4b35      	ldr	r3, [pc, #212]	; (8001aa4 <transmit_GPS_task+0xfc>)
 80019ce:	6818      	ldr	r0, [r3, #0]
 80019d0:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 80019d4:	f04f 33ff 	mov.w	r3, #4294967295
 80019d8:	2200      	movs	r2, #0
 80019da:	f006 fa21 	bl	8007e20 <osMessageQueueGet>
 80019de:	f8c7 0170 	str.w	r0, [r7, #368]	; 0x170

    /* Check if the queue status is OK */
    if (nmea_queue_status != osOK){
 80019e2:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d002      	beq.n	80019f0 <transmit_GPS_task+0x48>
      /* If message retrieval failed, yield and continue the loop */
      osThreadYield();
 80019ea:	f006 f82b 	bl	8007a44 <osThreadYield>
 80019ee:	e7e3      	b.n	80019b8 <transmit_GPS_task+0x10>
      continue; // Skip the rest of this loop iteration
    }

    /* Initialize an NMEA buffer */
    uint8_t gps_buffer[GPS_MESSAGE_LEN] = {0};
 80019f0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80019f4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	3304      	adds	r3, #4
 80019fe:	22c4      	movs	r2, #196	; 0xc4
 8001a00:	2100      	movs	r1, #0
 8001a02:	4618      	mov	r0, r3
 8001a04:	f00a fd0b 	bl	800c41e <memset>

    /* Get current epoch Time Stamp */
    time_t current_timestamp = get_current_timestamp();
 8001a08:	f001 fa9e 	bl	8002f48 <get_current_timestamp>
 8001a0c:	e9c7 015a 	strd	r0, r1, [r7, #360]	; 0x168

    /* TIMESTAMP: 8 Bytes */
    for (uint8_t i=0; i<8; i++) {
 8001a10:	2300      	movs	r3, #0
 8001a12:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 8001a16:	e021      	b.n	8001a5c <transmit_GPS_task+0xb4>
      /* Put each byte in position 'i' */
      gps_buffer[i] = TIMESTAMP_BYTE(i, current_timestamp);
 8001a18:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8001a1c:	00d9      	lsls	r1, r3, #3
 8001a1e:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8001a22:	f1c1 0620 	rsb	r6, r1, #32
 8001a26:	f1b1 0020 	subs.w	r0, r1, #32
 8001a2a:	fa22 f401 	lsr.w	r4, r2, r1
 8001a2e:	fa03 f606 	lsl.w	r6, r3, r6
 8001a32:	ea44 0406 	orr.w	r4, r4, r6
 8001a36:	d402      	bmi.n	8001a3e <transmit_GPS_task+0x96>
 8001a38:	fa43 f000 	asr.w	r0, r3, r0
 8001a3c:	4304      	orrs	r4, r0
 8001a3e:	fa43 f501 	asr.w	r5, r3, r1
 8001a42:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8001a46:	b2e1      	uxtb	r1, r4
 8001a48:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 8001a4c:	f5a2 72b8 	sub.w	r2, r2, #368	; 0x170
 8001a50:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i=0; i<8; i++) {
 8001a52:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8001a56:	3301      	adds	r3, #1
 8001a58:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 8001a5c:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 8001a60:	2b07      	cmp	r3, #7
 8001a62:	d9d9      	bls.n	8001a18 <transmit_GPS_task+0x70>

    /*
     * Copy the NMEA data into the buffer, ensuring not to exceed the buffer size
     * Adds 8 to the start to skip the time stamp
     */
    strncpy(gps_buffer + 8, gps_message.data, 150); // Save space for CR+LF
 8001a64:	f107 0308 	add.w	r3, r7, #8
 8001a68:	3308      	adds	r3, #8
 8001a6a:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8001a6e:	2296      	movs	r2, #150	; 0x96
 8001a70:	4618      	mov	r0, r3
 8001a72:	f00a fcfb 	bl	800c46c <strncpy>

    /* NEW LINE */
    gps_buffer[GPS_MESSAGE_LEN - 2] = '\r'; // Carriage return
 8001a76:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001a7a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a7e:	220d      	movs	r2, #13
 8001a80:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6

    /* CARRIAGE RETURN */
    gps_buffer[GPS_MESSAGE_LEN - 1] = '\n'; // Line feed
 8001a84:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001a88:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a8c:	220a      	movs	r2, #10
 8001a8e:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7

    /* Transmit the NMEA message over UART to radio */
    HAL_UART_Transmit(&huart1, gps_buffer, sizeof(gps_buffer), 1000);
 8001a92:	f107 0108 	add.w	r1, r7, #8
 8001a96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a9a:	22c8      	movs	r2, #200	; 0xc8
 8001a9c:	4802      	ldr	r0, [pc, #8]	; (8001aa8 <transmit_GPS_task+0x100>)
 8001a9e:	f005 fd1f 	bl	80074e0 <HAL_UART_Transmit>
  while(1) {
 8001aa2:	e789      	b.n	80019b8 <transmit_GPS_task+0x10>
 8001aa4:	200002b0 	.word	0x200002b0
 8001aa8:	20000514 	.word	0x20000514

08001aac <kernel_LED_task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_kernel_LED_task */
void kernel_LED_task(void *argument)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  while (1) {

    /* Get the kernel status */
    kernel_status = osKernelGetState();
 8001ab4:	f005 fec6 	bl	8007844 <osKernelGetState>
 8001ab8:	60f8      	str	r0, [r7, #12]

    /* Check if the kernel status is "Running" */
    if (kernel_status == osKernelRunning) {
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d103      	bne.n	8001ac8 <kernel_LED_task+0x1c>

      /* If running, toggle the LED */
      HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
 8001ac0:	2102      	movs	r1, #2
 8001ac2:	4803      	ldr	r0, [pc, #12]	; (8001ad0 <kernel_LED_task+0x24>)
 8001ac4:	f002 fc0a 	bl	80042dc <HAL_GPIO_TogglePin>
    }

    /* Delay */
    osDelay(KERNEL_LED_DELAY);
 8001ac8:	20c8      	movs	r0, #200	; 0xc8
 8001aca:	f006 f881 	bl	8007bd0 <osDelay>
    kernel_status = osKernelGetState();
 8001ace:	e7f1      	b.n	8001ab4 <kernel_LED_task+0x8>
 8001ad0:	40010800 	.word	0x40010800

08001ad4 <add_to_IMU_queue>:


/*
 * Stores the data gathered from the IMU into the queue
 */
void add_to_IMU_queue(char* type, char* dimension, union FloatBytes data){
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
    IMU_msg_t imu_message;

    imu_message.imu_type = type[0];
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	753b      	strb	r3, [r7, #20]
    imu_message.dimension = dimension[0];
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	757b      	strb	r3, [r7, #21]
    for (int i = 0; i < 4; i++) {
 8001aec:	2300      	movs	r3, #0
 8001aee:	61fb      	str	r3, [r7, #28]
 8001af0:	e00c      	b.n	8001b0c <add_to_IMU_queue+0x38>
        imu_message.data[i] = data.bytes[i];
 8001af2:	1d3a      	adds	r2, r7, #4
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	4413      	add	r3, r2
 8001af8:	7819      	ldrb	r1, [r3, #0]
 8001afa:	f107 0216 	add.w	r2, r7, #22
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	4413      	add	r3, r2
 8001b02:	460a      	mov	r2, r1
 8001b04:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	61fb      	str	r3, [r7, #28]
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	2b03      	cmp	r3, #3
 8001b10:	ddef      	ble.n	8001af2 <add_to_IMU_queue+0x1e>
    }

    osMessageQueuePut(imuMessageQueueHandle, &imu_message, 0U, 0U);
 8001b12:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <add_to_IMU_queue+0x58>)
 8001b14:	6818      	ldr	r0, [r3, #0]
 8001b16:	f107 0114 	add.w	r1, r7, #20
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f006 f90b 	bl	8007d38 <osMessageQueuePut>
}
 8001b22:	bf00      	nop
 8001b24:	3720      	adds	r7, #32
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	200002ac 	.word	0x200002ac

08001b30 <add_to_GPS_queue>:

/*
 * Stores the data gathered from the GPS into the queue
 */
void add_to_GPS_queue(GPS *gps_data) {
 8001b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b34:	b0b9      	sub	sp, #228	; 0xe4
 8001b36:	af0e      	add	r7, sp, #56	; 0x38
 8001b38:	60f8      	str	r0, [r7, #12]

  /* If there is a fix... */
  if(gps_data->fix == 1){
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d13d      	bne.n	8001bbe <add_to_GPS_queue+0x8e>

    /* Create an nmea_msg */
    GPS_msg_t nmea_msg;

    /* Create string */
    sprintf(nmea_msg.data,
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	e9d3 8900 	ldrd	r8, r9, [r3]
	    "Latitude: %.6f %c, Longitude: %.6f %c, Altitude: %.2f meters, HDOP: %.2f, Satellites: %d, Fix: %d, Time: %s",
	    gps_data->latitude, gps_data->latSide,
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	7a1b      	ldrb	r3, [r3, #8]
    sprintf(nmea_msg.data,
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
	    gps_data->longitude, gps_data->lonSide,
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	7e1b      	ldrb	r3, [r3, #24]
    sprintf(nmea_msg.data,
 8001b58:	607b      	str	r3, [r7, #4]
	    gps_data->altitude, gps_data->hdop,
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	69db      	ldr	r3, [r3, #28]
    sprintf(nmea_msg.data,
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7fe fcdc 	bl	800051c <__aeabi_f2d>
 8001b64:	4682      	mov	sl, r0
 8001b66:	468b      	mov	fp, r1
	    gps_data->altitude, gps_data->hdop,
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
    sprintf(nmea_msg.data,
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7fe fcd5 	bl	800051c <__aeabi_f2d>
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	    gps_data->satelliteCount, gps_data->fix,
	    gps_data->lastMeasure);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	332c      	adds	r3, #44	; 0x2c
    sprintf(nmea_msg.data,
 8001b7e:	f107 0c10 	add.w	ip, r7, #16
 8001b82:	930c      	str	r3, [sp, #48]	; 0x30
 8001b84:	960b      	str	r6, [sp, #44]	; 0x2c
 8001b86:	920a      	str	r2, [sp, #40]	; 0x28
 8001b88:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8001b8c:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	9204      	str	r2, [sp, #16]
 8001b94:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	4642      	mov	r2, r8
 8001b9e:	464b      	mov	r3, r9
 8001ba0:	4909      	ldr	r1, [pc, #36]	; (8001bc8 <add_to_GPS_queue+0x98>)
 8001ba2:	4660      	mov	r0, ip
 8001ba4:	f00a fbd6 	bl	800c354 <siprintf>

    /* Null Terminate */
    nmea_msg.data[sizeof(nmea_msg.data) - 1] = '\0';
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f887 30a5 	strb.w	r3, [r7, #165]	; 0xa5

    /* Add the message to the queue */
    osMessageQueuePut(gpsMessageQueueHandle, &nmea_msg, 0U, 0U);
 8001bae:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <add_to_GPS_queue+0x9c>)
 8001bb0:	6818      	ldr	r0, [r3, #0]
 8001bb2:	f107 0110 	add.w	r1, r7, #16
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f006 f8bd 	bl	8007d38 <osMessageQueuePut>
  }
}
 8001bbe:	bf00      	nop
 8001bc0:	37ac      	adds	r7, #172	; 0xac
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001bc8:	08010470 	.word	0x08010470
 8001bcc:	200002b0 	.word	0x200002b0

08001bd0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b088      	sub	sp, #32
 8001bd4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd6:	f107 0310 	add.w	r3, r7, #16
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	605a      	str	r2, [r3, #4]
 8001be0:	609a      	str	r2, [r3, #8]
 8001be2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be4:	4b49      	ldr	r3, [pc, #292]	; (8001d0c <MX_GPIO_Init+0x13c>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	4a48      	ldr	r2, [pc, #288]	; (8001d0c <MX_GPIO_Init+0x13c>)
 8001bea:	f043 0310 	orr.w	r3, r3, #16
 8001bee:	6193      	str	r3, [r2, #24]
 8001bf0:	4b46      	ldr	r3, [pc, #280]	; (8001d0c <MX_GPIO_Init+0x13c>)
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	f003 0310 	and.w	r3, r3, #16
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bfc:	4b43      	ldr	r3, [pc, #268]	; (8001d0c <MX_GPIO_Init+0x13c>)
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	4a42      	ldr	r2, [pc, #264]	; (8001d0c <MX_GPIO_Init+0x13c>)
 8001c02:	f043 0320 	orr.w	r3, r3, #32
 8001c06:	6193      	str	r3, [r2, #24]
 8001c08:	4b40      	ldr	r3, [pc, #256]	; (8001d0c <MX_GPIO_Init+0x13c>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	f003 0320 	and.w	r3, r3, #32
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c14:	4b3d      	ldr	r3, [pc, #244]	; (8001d0c <MX_GPIO_Init+0x13c>)
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	4a3c      	ldr	r2, [pc, #240]	; (8001d0c <MX_GPIO_Init+0x13c>)
 8001c1a:	f043 0304 	orr.w	r3, r3, #4
 8001c1e:	6193      	str	r3, [r2, #24]
 8001c20:	4b3a      	ldr	r3, [pc, #232]	; (8001d0c <MX_GPIO_Init+0x13c>)
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2c:	4b37      	ldr	r3, [pc, #220]	; (8001d0c <MX_GPIO_Init+0x13c>)
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	4a36      	ldr	r2, [pc, #216]	; (8001d0c <MX_GPIO_Init+0x13c>)
 8001c32:	f043 0308 	orr.w	r3, r3, #8
 8001c36:	6193      	str	r3, [r2, #24]
 8001c38:	4b34      	ldr	r3, [pc, #208]	; (8001d0c <MX_GPIO_Init+0x13c>)
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	f003 0308 	and.w	r3, r3, #8
 8001c40:	603b      	str	r3, [r7, #0]
 8001c42:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RADIO_GPIO_DIO7_Pin|RADIO_GPIO_DIO9_SLEEP_Pin|RADIO_GPIO_DIO11_Pin|RADIO_GPIO_DIO10_Pin, GPIO_PIN_RESET);
 8001c44:	2200      	movs	r2, #0
 8001c46:	2178      	movs	r1, #120	; 0x78
 8001c48:	4831      	ldr	r0, [pc, #196]	; (8001d10 <MX_GPIO_Init+0x140>)
 8001c4a:	f002 fb2f 	bl	80042ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USER_LED_Pin|SDL_CS_Pin, GPIO_PIN_RESET);
 8001c4e:	2200      	movs	r2, #0
 8001c50:	2112      	movs	r1, #18
 8001c52:	4830      	ldr	r0, [pc, #192]	; (8001d14 <MX_GPIO_Init+0x144>)
 8001c54:	f002 fb2a 	bl	80042ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RADIO_GPIO_DIO4_Pin|RADIO_GPIO_DIO3_Pin|RADIO_GPIO_DIO2_Pin, GPIO_PIN_SET);
 8001c58:	2201      	movs	r2, #1
 8001c5a:	f24a 0101 	movw	r1, #40961	; 0xa001
 8001c5e:	482e      	ldr	r0, [pc, #184]	; (8001d18 <MX_GPIO_Init+0x148>)
 8001c60:	f002 fb24 	bl	80042ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RADIO_GPIO_DIO12_Pin|RADIO_GPIO_DIO6_Pin|RADIO_DIO8_SLEEP_CONTROL_Pin, GPIO_PIN_RESET);
 8001c64:	2200      	movs	r2, #0
 8001c66:	f245 0102 	movw	r1, #20482	; 0x5002
 8001c6a:	482b      	ldr	r0, [pc, #172]	; (8001d18 <MX_GPIO_Init+0x148>)
 8001c6c:	f002 fb1e 	bl	80042ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RADIO_GPIO_DIO1_Pin|RADIO_GPIO_DIO0_Pin, GPIO_PIN_SET);
 8001c70:	2201      	movs	r2, #1
 8001c72:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8001c76:	4826      	ldr	r0, [pc, #152]	; (8001d10 <MX_GPIO_Init+0x140>)
 8001c78:	f002 fb18 	bl	80042ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = RADIO_GPIO_DIO7_Pin|RADIO_GPIO_DIO9_SLEEP_Pin|RADIO_GPIO_DIO11_Pin|RADIO_GPIO_DIO10_Pin
 8001c7c:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8001c80:	613b      	str	r3, [r7, #16]
                          |RADIO_GPIO_DIO1_Pin|RADIO_GPIO_DIO0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c82:	2301      	movs	r3, #1
 8001c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c8e:	f107 0310 	add.w	r3, r7, #16
 8001c92:	4619      	mov	r1, r3
 8001c94:	481e      	ldr	r0, [pc, #120]	; (8001d10 <MX_GPIO_Init+0x140>)
 8001c96:	f002 f975 	bl	8003f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USER_LED_Pin|SDL_CS_Pin;
 8001c9a:	2312      	movs	r3, #18
 8001c9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001caa:	f107 0310 	add.w	r3, r7, #16
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4818      	ldr	r0, [pc, #96]	; (8001d14 <MX_GPIO_Init+0x144>)
 8001cb2:	f002 f967 	bl	8003f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RTC_SYNC_Pin|SDL_CD_Pin;
 8001cb6:	230c      	movs	r3, #12
 8001cb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc2:	f107 0310 	add.w	r3, r7, #16
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4812      	ldr	r0, [pc, #72]	; (8001d14 <MX_GPIO_Init+0x144>)
 8001cca:	f002 f95b 	bl	8003f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = RADIO_GPIO_DIO4_Pin|RADIO_GPIO_DIO12_Pin|RADIO_GPIO_DIO6_Pin|RADIO_GPIO_DIO3_Pin
 8001cce:	f24f 0303 	movw	r3, #61443	; 0xf003
 8001cd2:	613b      	str	r3, [r7, #16]
                          |RADIO_DIO8_SLEEP_CONTROL_Pin|RADIO_GPIO_DIO2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce0:	f107 0310 	add.w	r3, r7, #16
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	480c      	ldr	r0, [pc, #48]	; (8001d18 <MX_GPIO_Init+0x148>)
 8001ce8:	f002 f94c 	bl	8003f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001cec:	2304      	movs	r3, #4
 8001cee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001cf8:	f107 0310 	add.w	r3, r7, #16
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4806      	ldr	r0, [pc, #24]	; (8001d18 <MX_GPIO_Init+0x148>)
 8001d00:	f002 f940 	bl	8003f84 <HAL_GPIO_Init>

}
 8001d04:	bf00      	nop
 8001d06:	3720      	adds	r7, #32
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40011000 	.word	0x40011000
 8001d14:	40010800 	.word	0x40010800
 8001d18:	40010c00 	.word	0x40010c00

08001d1c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d20:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <MX_I2C1_Init+0x50>)
 8001d22:	4a13      	ldr	r2, [pc, #76]	; (8001d70 <MX_I2C1_Init+0x54>)
 8001d24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d26:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <MX_I2C1_Init+0x50>)
 8001d28:	4a12      	ldr	r2, [pc, #72]	; (8001d74 <MX_I2C1_Init+0x58>)
 8001d2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d2c:	4b0f      	ldr	r3, [pc, #60]	; (8001d6c <MX_I2C1_Init+0x50>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d32:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <MX_I2C1_Init+0x50>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d38:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <MX_I2C1_Init+0x50>)
 8001d3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d40:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <MX_I2C1_Init+0x50>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d46:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <MX_I2C1_Init+0x50>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d4c:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <MX_I2C1_Init+0x50>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <MX_I2C1_Init+0x50>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d58:	4804      	ldr	r0, [pc, #16]	; (8001d6c <MX_I2C1_Init+0x50>)
 8001d5a:	f002 fad9 	bl	8004310 <HAL_I2C_Init>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d64:	f000 fa3a 	bl	80021dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d68:	bf00      	nop
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20000300 	.word	0x20000300
 8001d70:	40005400 	.word	0x40005400
 8001d74:	000186a0 	.word	0x000186a0

08001d78 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d7c:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <MX_I2C2_Init+0x50>)
 8001d7e:	4a13      	ldr	r2, [pc, #76]	; (8001dcc <MX_I2C2_Init+0x54>)
 8001d80:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001d82:	4b11      	ldr	r3, [pc, #68]	; (8001dc8 <MX_I2C2_Init+0x50>)
 8001d84:	4a12      	ldr	r2, [pc, #72]	; (8001dd0 <MX_I2C2_Init+0x58>)
 8001d86:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d88:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <MX_I2C2_Init+0x50>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <MX_I2C2_Init+0x50>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d94:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <MX_I2C2_Init+0x50>)
 8001d96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d9a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d9c:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <MX_I2C2_Init+0x50>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001da2:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <MX_I2C2_Init+0x50>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001da8:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <MX_I2C2_Init+0x50>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <MX_I2C2_Init+0x50>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001db4:	4804      	ldr	r0, [pc, #16]	; (8001dc8 <MX_I2C2_Init+0x50>)
 8001db6:	f002 faab 	bl	8004310 <HAL_I2C_Init>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001dc0:	f000 fa0c 	bl	80021dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001dc4:	bf00      	nop
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	20000354 	.word	0x20000354
 8001dcc:	40005800 	.word	0x40005800
 8001dd0:	000186a0 	.word	0x000186a0

08001dd4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08a      	sub	sp, #40	; 0x28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	f107 0318 	add.w	r3, r7, #24
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a2b      	ldr	r2, [pc, #172]	; (8001e9c <HAL_I2C_MspInit+0xc8>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d124      	bne.n	8001e3e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001df4:	4b2a      	ldr	r3, [pc, #168]	; (8001ea0 <HAL_I2C_MspInit+0xcc>)
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	4a29      	ldr	r2, [pc, #164]	; (8001ea0 <HAL_I2C_MspInit+0xcc>)
 8001dfa:	f043 0308 	orr.w	r3, r3, #8
 8001dfe:	6193      	str	r3, [r2, #24]
 8001e00:	4b27      	ldr	r3, [pc, #156]	; (8001ea0 <HAL_I2C_MspInit+0xcc>)
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	f003 0308 	and.w	r3, r3, #8
 8001e08:	617b      	str	r3, [r7, #20]
 8001e0a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPS_SCL_Pin|GPS_SDA_Pin;
 8001e0c:	23c0      	movs	r3, #192	; 0xc0
 8001e0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e10:	2312      	movs	r3, #18
 8001e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e14:	2303      	movs	r3, #3
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e18:	f107 0318 	add.w	r3, r7, #24
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4821      	ldr	r0, [pc, #132]	; (8001ea4 <HAL_I2C_MspInit+0xd0>)
 8001e20:	f002 f8b0 	bl	8003f84 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e24:	4b1e      	ldr	r3, [pc, #120]	; (8001ea0 <HAL_I2C_MspInit+0xcc>)
 8001e26:	69db      	ldr	r3, [r3, #28]
 8001e28:	4a1d      	ldr	r2, [pc, #116]	; (8001ea0 <HAL_I2C_MspInit+0xcc>)
 8001e2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e2e:	61d3      	str	r3, [r2, #28]
 8001e30:	4b1b      	ldr	r3, [pc, #108]	; (8001ea0 <HAL_I2C_MspInit+0xcc>)
 8001e32:	69db      	ldr	r3, [r3, #28]
 8001e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e38:	613b      	str	r3, [r7, #16]
 8001e3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001e3c:	e029      	b.n	8001e92 <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a19      	ldr	r2, [pc, #100]	; (8001ea8 <HAL_I2C_MspInit+0xd4>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d124      	bne.n	8001e92 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e48:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <HAL_I2C_MspInit+0xcc>)
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	4a14      	ldr	r2, [pc, #80]	; (8001ea0 <HAL_I2C_MspInit+0xcc>)
 8001e4e:	f043 0308 	orr.w	r3, r3, #8
 8001e52:	6193      	str	r3, [r2, #24]
 8001e54:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <HAL_I2C_MspInit+0xcc>)
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	f003 0308 	and.w	r3, r3, #8
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IMU_SCL_Pin|IMU_SDA_Pin;
 8001e60:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e66:	2312      	movs	r3, #18
 8001e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6e:	f107 0318 	add.w	r3, r7, #24
 8001e72:	4619      	mov	r1, r3
 8001e74:	480b      	ldr	r0, [pc, #44]	; (8001ea4 <HAL_I2C_MspInit+0xd0>)
 8001e76:	f002 f885 	bl	8003f84 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <HAL_I2C_MspInit+0xcc>)
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	4a08      	ldr	r2, [pc, #32]	; (8001ea0 <HAL_I2C_MspInit+0xcc>)
 8001e80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e84:	61d3      	str	r3, [r2, #28]
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_I2C_MspInit+0xcc>)
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e8e:	60bb      	str	r3, [r7, #8]
 8001e90:	68bb      	ldr	r3, [r7, #8]
}
 8001e92:	bf00      	nop
 8001e94:	3728      	adds	r7, #40	; 0x28
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40005400 	.word	0x40005400
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40010c00 	.word	0x40010c00
 8001ea8:	40005800 	.word	0x40005800
 8001eac:	00000000 	.word	0x00000000

08001eb0 <gyro>:


/* IMU -----------------------------------------------------------------------*/

float gyro(enum GyroType type)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af04      	add	r7, sp, #16
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	71fb      	strb	r3, [r7, #7]
  int16_t gyro;
  uint8_t OUT_H_G, OUT_L_G;

  /* Goes sequential */
  uint16_t addL = 0x22 + (type * 2);
 8001eba:	79fb      	ldrb	r3, [r7, #7]
 8001ebc:	3311      	adds	r3, #17
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	81fb      	strh	r3, [r7, #14]
  uint16_t addH = 0x23 + (type * 2);
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	3323      	adds	r3, #35	; 0x23
 8001ece:	81bb      	strh	r3, [r7, #12]

  /* Read */
  HAL_I2C_Mem_Read(&hi2c1, IMU_DEVICE_ADDRESS, addL, 1, &OUT_L_G, 1, 100);
 8001ed0:	89fa      	ldrh	r2, [r7, #14]
 8001ed2:	2364      	movs	r3, #100	; 0x64
 8001ed4:	9302      	str	r3, [sp, #8]
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	9301      	str	r3, [sp, #4]
 8001eda:	f107 0308 	add.w	r3, r7, #8
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	21d4      	movs	r1, #212	; 0xd4
 8001ee4:	4824      	ldr	r0, [pc, #144]	; (8001f78 <gyro+0xc8>)
 8001ee6:	f002 febd 	bl	8004c64 <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Read(&hi2c1, IMU_DEVICE_ADDRESS, addH, 1, &OUT_H_G, 1, 100);
 8001eea:	89ba      	ldrh	r2, [r7, #12]
 8001eec:	2364      	movs	r3, #100	; 0x64
 8001eee:	9302      	str	r3, [sp, #8]
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	9301      	str	r3, [sp, #4]
 8001ef4:	f107 0309 	add.w	r3, r7, #9
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	2301      	movs	r3, #1
 8001efc:	21d4      	movs	r1, #212	; 0xd4
 8001efe:	481e      	ldr	r0, [pc, #120]	; (8001f78 <gyro+0xc8>)
 8001f00:	f002 feb0 	bl	8004c64 <HAL_I2C_Mem_Read>

  /* The value is expressed as a 16-bit word in two’s complement */
  gyro = (OUT_H_G << 8) | (OUT_L_G);
 8001f04:	7a7b      	ldrb	r3, [r7, #9]
 8001f06:	021b      	lsls	r3, r3, #8
 8001f08:	b21a      	sxth	r2, r3
 8001f0a:	7a3b      	ldrb	r3, [r7, #8]
 8001f0c:	b21b      	sxth	r3, r3
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	817b      	strh	r3, [r7, #10]
  gyro = (float) gyro / 8.75; /* See data sheet pg10 */
 8001f12:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe ff5a 	bl	8000dd0 <__aeabi_i2f>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe fafc 	bl	800051c <__aeabi_f2d>
 8001f24:	f04f 0200 	mov.w	r2, #0
 8001f28:	4b14      	ldr	r3, [pc, #80]	; (8001f7c <gyro+0xcc>)
 8001f2a:	f7fe fc79 	bl	8000820 <__aeabi_ddiv>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	4610      	mov	r0, r2
 8001f34:	4619      	mov	r1, r3
 8001f36:	f7fe fdf9 	bl	8000b2c <__aeabi_d2iz>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	817b      	strh	r3, [r7, #10]

  return (float) gyro * 0.02;
 8001f3e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7fe ff44 	bl	8000dd0 <__aeabi_i2f>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe fae6 	bl	800051c <__aeabi_f2d>
 8001f50:	a307      	add	r3, pc, #28	; (adr r3, 8001f70 <gyro+0xc0>)
 8001f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f56:	f7fe fb39 	bl	80005cc <__aeabi_dmul>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4610      	mov	r0, r2
 8001f60:	4619      	mov	r1, r3
 8001f62:	f7fe fe2b 	bl	8000bbc <__aeabi_d2f>
 8001f66:	4603      	mov	r3, r0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	47ae147b 	.word	0x47ae147b
 8001f74:	3f947ae1 	.word	0x3f947ae1
 8001f78:	20000300 	.word	0x20000300
 8001f7c:	40218000 	.word	0x40218000

08001f80 <accel>:

float accel(enum AccelType type)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b088      	sub	sp, #32
 8001f84:	af04      	add	r7, sp, #16
 8001f86:	4603      	mov	r3, r0
 8001f88:	71fb      	strb	r3, [r7, #7]
  int16_t accel;
  uint8_t OUT_H_A, OUT_L_A;

  /* Goes sequential */
  uint16_t addL = 0x28 + (type * 2);
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	3314      	adds	r3, #20
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	81fb      	strh	r3, [r7, #14]
  uint16_t addH = 0x29 + (type * 2);
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	3329      	adds	r3, #41	; 0x29
 8001f9e:	81bb      	strh	r3, [r7, #12]

  /* Read */
  HAL_I2C_Mem_Read(&hi2c1, IMU_DEVICE_ADDRESS, addL, 1, &OUT_L_A, 1, 100);
 8001fa0:	89fa      	ldrh	r2, [r7, #14]
 8001fa2:	2364      	movs	r3, #100	; 0x64
 8001fa4:	9302      	str	r3, [sp, #8]
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	9301      	str	r3, [sp, #4]
 8001faa:	f107 0308 	add.w	r3, r7, #8
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	21d4      	movs	r1, #212	; 0xd4
 8001fb4:	481e      	ldr	r0, [pc, #120]	; (8002030 <accel+0xb0>)
 8001fb6:	f002 fe55 	bl	8004c64 <HAL_I2C_Mem_Read>
  HAL_I2C_Mem_Read(&hi2c1, IMU_DEVICE_ADDRESS, addH, 1, &OUT_H_A, 1, 100);
 8001fba:	89ba      	ldrh	r2, [r7, #12]
 8001fbc:	2364      	movs	r3, #100	; 0x64
 8001fbe:	9302      	str	r3, [sp, #8]
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	9301      	str	r3, [sp, #4]
 8001fc4:	f107 0309 	add.w	r3, r7, #9
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	2301      	movs	r3, #1
 8001fcc:	21d4      	movs	r1, #212	; 0xd4
 8001fce:	4818      	ldr	r0, [pc, #96]	; (8002030 <accel+0xb0>)
 8001fd0:	f002 fe48 	bl	8004c64 <HAL_I2C_Mem_Read>

  /* The value is expressed as a 16-bit word in two’s complement */
  accel = (OUT_H_A << 8) | (OUT_L_A);
 8001fd4:	7a7b      	ldrb	r3, [r7, #9]
 8001fd6:	021b      	lsls	r3, r3, #8
 8001fd8:	b21a      	sxth	r2, r3
 8001fda:	7a3b      	ldrb	r3, [r7, #8]
 8001fdc:	b21b      	sxth	r3, r3
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	817b      	strh	r3, [r7, #10]
  accel = (float) accel * 0.061; /* See data sheet pg10 */
 8001fe2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe fef2 	bl	8000dd0 <__aeabi_i2f>
 8001fec:	4603      	mov	r3, r0
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7fe fa94 	bl	800051c <__aeabi_f2d>
 8001ff4:	a30c      	add	r3, pc, #48	; (adr r3, 8002028 <accel+0xa8>)
 8001ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffa:	f7fe fae7 	bl	80005cc <__aeabi_dmul>
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	4610      	mov	r0, r2
 8002004:	4619      	mov	r1, r3
 8002006:	f7fe fd91 	bl	8000b2c <__aeabi_d2iz>
 800200a:	4603      	mov	r3, r0
 800200c:	817b      	strh	r3, [r7, #10]

  return (float) accel;
 800200e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe fedc 	bl	8000dd0 <__aeabi_i2f>
 8002018:	4603      	mov	r3, r0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	f3af 8000 	nop.w
 8002028:	5a1cac08 	.word	0x5a1cac08
 800202c:	3faf3b64 	.word	0x3faf3b64
 8002030:	20000300 	.word	0x20000300

08002034 <initIMU>:


void initIMU(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af04      	add	r7, sp, #16
  uint8_t data;

  data = 0x80; // 0b10000000
 800203a:	2380      	movs	r3, #128	; 0x80
 800203c:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(&hi2c1, IMU_DEVICE_ADDRESS, 0x10, 1, &data, 1, 100);
 800203e:	2364      	movs	r3, #100	; 0x64
 8002040:	9302      	str	r3, [sp, #8]
 8002042:	2301      	movs	r3, #1
 8002044:	9301      	str	r3, [sp, #4]
 8002046:	1dfb      	adds	r3, r7, #7
 8002048:	9300      	str	r3, [sp, #0]
 800204a:	2301      	movs	r3, #1
 800204c:	2210      	movs	r2, #16
 800204e:	21d4      	movs	r1, #212	; 0xd4
 8002050:	4811      	ldr	r0, [pc, #68]	; (8002098 <initIMU+0x64>)
 8002052:	f002 fd0d 	bl	8004a70 <HAL_I2C_Mem_Write>

  data = 0x80; // 0b10000000
 8002056:	2380      	movs	r3, #128	; 0x80
 8002058:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(&hi2c1, IMU_DEVICE_ADDRESS, 0x11, 1, &data, 1, 100);
 800205a:	2364      	movs	r3, #100	; 0x64
 800205c:	9302      	str	r3, [sp, #8]
 800205e:	2301      	movs	r3, #1
 8002060:	9301      	str	r3, [sp, #4]
 8002062:	1dfb      	adds	r3, r7, #7
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	2301      	movs	r3, #1
 8002068:	2211      	movs	r2, #17
 800206a:	21d4      	movs	r1, #212	; 0xd4
 800206c:	480a      	ldr	r0, [pc, #40]	; (8002098 <initIMU+0x64>)
 800206e:	f002 fcff 	bl	8004a70 <HAL_I2C_Mem_Write>

  data = 0x04; // 0b00000100
 8002072:	2304      	movs	r3, #4
 8002074:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(&hi2c1, IMU_DEVICE_ADDRESS, 0x12, 1, &data, 1, 100);
 8002076:	2364      	movs	r3, #100	; 0x64
 8002078:	9302      	str	r3, [sp, #8]
 800207a:	2301      	movs	r3, #1
 800207c:	9301      	str	r3, [sp, #4]
 800207e:	1dfb      	adds	r3, r7, #7
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	2301      	movs	r3, #1
 8002084:	2212      	movs	r2, #18
 8002086:	21d4      	movs	r1, #212	; 0xd4
 8002088:	4803      	ldr	r0, [pc, #12]	; (8002098 <initIMU+0x64>)
 800208a:	f002 fcf1 	bl	8004a70 <HAL_I2C_Mem_Write>
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000300 	.word	0x20000300

0800209c <readNMEA>:
//  printf("Altitude: %f\r\n", myData.altitude);
//  printf("Sat Count: %d\r\n", myData.satelliteCount);
//
//}

void readNMEA(uint8_t *buffer){
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af02      	add	r7, sp, #8
 80020a2:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_IsDeviceReady(&hi2c1, GPS_DEVICE_ADDRESS, 1, HAL_MAX_DELAY) == HAL_OK) {
 80020a4:	f04f 33ff 	mov.w	r3, #4294967295
 80020a8:	2201      	movs	r2, #1
 80020aa:	2184      	movs	r1, #132	; 0x84
 80020ac:	4809      	ldr	r0, [pc, #36]	; (80020d4 <readNMEA+0x38>)
 80020ae:	f003 f841 	bl	8005134 <HAL_I2C_IsDeviceReady>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d108      	bne.n	80020ca <readNMEA+0x2e>
      HAL_I2C_Master_Receive(&hi2c1, GPS_DEVICE_ADDRESS, buffer, sizeof(buffer), HAL_MAX_DELAY);
 80020b8:	f04f 33ff 	mov.w	r3, #4294967295
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	2304      	movs	r3, #4
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	2184      	movs	r1, #132	; 0x84
 80020c4:	4803      	ldr	r0, [pc, #12]	; (80020d4 <readNMEA+0x38>)
 80020c6:	f002 fa67 	bl	8004598 <HAL_I2C_Master_Receive>
  }
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000300 	.word	0x20000300

080020d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020dc:	f001 fa96 	bl	800360c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020e0:	f000 f81d 	bl	800211e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020e4:	f7ff fd74 	bl	8001bd0 <MX_GPIO_Init>
  MX_CAN_Init();
 80020e8:	f7ff f8da 	bl	80012a0 <MX_CAN_Init>
  MX_SPI1_Init();
 80020ec:	f000 ffde 	bl	80030ac <MX_SPI1_Init>
  MX_UART5_Init();
 80020f0:	f001 f97c 	bl	80033ec <MX_UART5_Init>
  MX_I2C1_Init();
 80020f4:	f7ff fe12 	bl	8001d1c <MX_I2C1_Init>
  MX_I2C2_Init();
 80020f8:	f7ff fe3e 	bl	8001d78 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80020fc:	f001 f9a0 	bl	8003440 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8002100:	f000 fdd6 	bl	8002cb0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* Sync the RTC with GPS */
  Sync_RTC_With_GPS();
 8002104:	f000 fe42 	bl	8002d8c <Sync_RTC_With_GPS>

  Can_Init();
 8002108:	f7ff f9b0 	bl	800146c <Can_Init>
  initIMU();
 800210c:	f7ff ff92 	bl	8002034 <initIMU>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002110:	f005 fb66 	bl	80077e0 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002114:	f7ff f9c4 	bl	80014a0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002118:	f005 fbb6 	bl	8007888 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800211c:	e7fe      	b.n	800211c <main+0x44>

0800211e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b096      	sub	sp, #88	; 0x58
 8002122:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002124:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002128:	2228      	movs	r2, #40	; 0x28
 800212a:	2100      	movs	r1, #0
 800212c:	4618      	mov	r0, r3
 800212e:	f00a f976 	bl	800c41e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002132:	f107 031c 	add.w	r3, r7, #28
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	605a      	str	r2, [r3, #4]
 800213c:	609a      	str	r2, [r3, #8]
 800213e:	60da      	str	r2, [r3, #12]
 8002140:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002142:	1d3b      	adds	r3, r7, #4
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
 800214a:	609a      	str	r2, [r3, #8]
 800214c:	60da      	str	r2, [r3, #12]
 800214e:	611a      	str	r2, [r3, #16]
 8002150:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002152:	2309      	movs	r3, #9
 8002154:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002156:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800215a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800215c:	2300      	movs	r3, #0
 800215e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002160:	2301      	movs	r3, #1
 8002162:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002164:	2301      	movs	r3, #1
 8002166:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002168:	2302      	movs	r3, #2
 800216a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800216c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002170:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002172:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002176:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002178:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800217c:	4618      	mov	r0, r3
 800217e:	f003 fd95 	bl	8005cac <HAL_RCC_OscConfig>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002188:	f000 f828 	bl	80021dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800218c:	230f      	movs	r3, #15
 800218e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002190:	2302      	movs	r3, #2
 8002192:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002194:	2300      	movs	r3, #0
 8002196:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002198:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800219c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800219e:	2300      	movs	r3, #0
 80021a0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021a2:	f107 031c 	add.w	r3, r7, #28
 80021a6:	2102      	movs	r1, #2
 80021a8:	4618      	mov	r0, r3
 80021aa:	f004 f801 	bl	80061b0 <HAL_RCC_ClockConfig>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80021b4:	f000 f812 	bl	80021dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80021b8:	2301      	movs	r3, #1
 80021ba:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80021bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021c0:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021c2:	1d3b      	adds	r3, r7, #4
 80021c4:	4618      	mov	r0, r3
 80021c6:	f004 f981 	bl	80064cc <HAL_RCCEx_PeriphCLKConfig>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80021d0:	f000 f804 	bl	80021dc <Error_Handler>
  }
}
 80021d4:	bf00      	nop
 80021d6:	3758      	adds	r7, #88	; 0x58
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021e0:	b672      	cpsid	i
}
 80021e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021e4:	e7fe      	b.n	80021e4 <Error_Handler+0x8>
	...

080021e8 <nmea_GPGGA>:
    else{
        return 0;
    }
}

int nmea_GPGGA(GPS *gps_data, char*inputString){
 80021e8:	b590      	push	{r4, r7, lr}
 80021ea:	b0b7      	sub	sp, #220	; 0xdc
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 80021f8:	f107 0320 	add.w	r3, r7, #32
 80021fc:	2264      	movs	r2, #100	; 0x64
 80021fe:	2100      	movs	r1, #0
 8002200:	4618      	mov	r0, r3
 8002202:	f00a f90c 	bl	800c41e <memset>
    char *marker = strtok(inputString, ",");
 8002206:	49c5      	ldr	r1, [pc, #788]	; (800251c <nmea_GPGGA+0x334>)
 8002208:	6838      	ldr	r0, [r7, #0]
 800220a:	f00a f943 	bl	800c494 <strtok>
 800220e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8002212:	e027      	b.n	8002264 <nmea_GPGGA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 8002214:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8002218:	f7fe f814 	bl	8000244 <strlen>
 800221c:	4603      	mov	r3, r0
 800221e:	1c5a      	adds	r2, r3, #1
 8002220:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 8002224:	1c63      	adds	r3, r4, #1
 8002226:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800222a:	4610      	mov	r0, r2
 800222c:	f008 fbbe 	bl	800a9ac <malloc>
 8002230:	4603      	mov	r3, r0
 8002232:	461a      	mov	r2, r3
 8002234:	00a3      	lsls	r3, r4, #2
 8002236:	33d8      	adds	r3, #216	; 0xd8
 8002238:	443b      	add	r3, r7
 800223a:	f843 2cb8 	str.w	r2, [r3, #-184]
        strcpy(values[counter - 1], marker);
 800223e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002242:	3b01      	subs	r3, #1
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	33d8      	adds	r3, #216	; 0xd8
 8002248:	443b      	add	r3, r7
 800224a:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 800224e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002252:	4618      	mov	r0, r3
 8002254:	f00a ffbb 	bl	800d1ce <strcpy>
        marker = strtok(NULL, ",");
 8002258:	49b0      	ldr	r1, [pc, #704]	; (800251c <nmea_GPGGA+0x334>)
 800225a:	2000      	movs	r0, #0
 800225c:	f00a f91a 	bl	800c494 <strtok>
 8002260:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8002264:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1d3      	bne.n	8002214 <nmea_GPGGA+0x2c>
    }
    char lonSide = values[5][0];
 800226c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    char latSide = values[3][0];
 8002274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
    strcpy(gps_data->lastMeasure, values[1]);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	332c      	adds	r3, #44	; 0x2c
 8002280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002282:	4611      	mov	r1, r2
 8002284:	4618      	mov	r0, r3
 8002286:	f00a ffa2 	bl	800d1ce <strcpy>
    if(latSide == 'S' || latSide == 'N'){
 800228a:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 800228e:	2b53      	cmp	r3, #83	; 0x53
 8002290:	d004      	beq.n	800229c <nmea_GPGGA+0xb4>
 8002292:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 8002296:	2b4e      	cmp	r3, #78	; 0x4e
 8002298:	f040 815f 	bne.w	800255a <nmea_GPGGA+0x372>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[2][z];
 800229c:	2300      	movs	r3, #0
 800229e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80022a2:	e010      	b.n	80022c6 <nmea_GPGGA+0xde>
 80022a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80022aa:	4413      	add	r3, r2
 80022ac:	7819      	ldrb	r1, [r3, #0]
 80022ae:	f107 021c 	add.w	r2, r7, #28
 80022b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80022b6:	4413      	add	r3, r2
 80022b8:	460a      	mov	r2, r1
 80022ba:	701a      	strb	r2, [r3, #0]
 80022bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80022c0:	3301      	adds	r3, #1
 80022c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80022c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	ddea      	ble.n	80022a4 <nmea_GPGGA+0xbc>
        for (int z = 0; z < 6; z++) lat_m[z] = values[2][z + 2];
 80022ce:	2300      	movs	r3, #0
 80022d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80022d4:	e011      	b.n	80022fa <nmea_GPGGA+0x112>
 80022d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80022dc:	3302      	adds	r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	7819      	ldrb	r1, [r3, #0]
 80022e2:	f107 0214 	add.w	r2, r7, #20
 80022e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80022ea:	4413      	add	r3, r2
 80022ec:	460a      	mov	r2, r1
 80022ee:	701a      	strb	r2, [r3, #0]
 80022f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80022f4:	3301      	adds	r3, #1
 80022f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80022fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80022fe:	2b05      	cmp	r3, #5
 8002300:	dde9      	ble.n	80022d6 <nmea_GPGGA+0xee>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 8002302:	f107 031c 	add.w	r3, r7, #28
 8002306:	220a      	movs	r2, #10
 8002308:	2100      	movs	r1, #0
 800230a:	4618      	mov	r0, r3
 800230c:	f009 faf8 	bl	800b900 <strtol>
 8002310:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 8002314:	f107 0314 	add.w	r3, r7, #20
 8002318:	2100      	movs	r1, #0
 800231a:	4618      	mov	r0, r3
 800231c:	f009 fa18 	bl	800b750 <strtof>
 8002320:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 8002324:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8002328:	f7fe fd52 	bl	8000dd0 <__aeabi_i2f>
 800232c:	4604      	mov	r4, r0
 800232e:	497c      	ldr	r1, [pc, #496]	; (8002520 <nmea_GPGGA+0x338>)
 8002330:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8002334:	f7fe fe54 	bl	8000fe0 <__aeabi_fdiv>
 8002338:	4603      	mov	r3, r0
 800233a:	4619      	mov	r1, r3
 800233c:	4620      	mov	r0, r4
 800233e:	f7fe fc93 	bl	8000c68 <__addsf3>
 8002342:	4603      	mov	r3, r0
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe f8e9 	bl	800051c <__aeabi_f2d>
 800234a:	4602      	mov	r2, r0
 800234c:	460b      	mov	r3, r1
 800234e:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];

        for (int z = 0; z < 3; z++) lon_d[z] = values[4][z];
 8002352:	2300      	movs	r3, #0
 8002354:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002358:	e010      	b.n	800237c <nmea_GPGGA+0x194>
 800235a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800235c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002360:	4413      	add	r3, r2
 8002362:	7819      	ldrb	r1, [r3, #0]
 8002364:	f107 0210 	add.w	r2, r7, #16
 8002368:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800236c:	4413      	add	r3, r2
 800236e:	460a      	mov	r2, r1
 8002370:	701a      	strb	r2, [r3, #0]
 8002372:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002376:	3301      	adds	r3, #1
 8002378:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800237c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002380:	2b02      	cmp	r3, #2
 8002382:	ddea      	ble.n	800235a <nmea_GPGGA+0x172>
        for (int z = 0; z < 6; z++) lon_m[z] = values[4][z + 3];
 8002384:	2300      	movs	r3, #0
 8002386:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800238a:	e011      	b.n	80023b0 <nmea_GPGGA+0x1c8>
 800238c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800238e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002392:	3303      	adds	r3, #3
 8002394:	4413      	add	r3, r2
 8002396:	7819      	ldrb	r1, [r3, #0]
 8002398:	f107 0208 	add.w	r2, r7, #8
 800239c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023a0:	4413      	add	r3, r2
 80023a2:	460a      	mov	r2, r1
 80023a4:	701a      	strb	r2, [r3, #0]
 80023a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023aa:	3301      	adds	r3, #1
 80023ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80023b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023b4:	2b05      	cmp	r3, #5
 80023b6:	dde9      	ble.n	800238c <nmea_GPGGA+0x1a4>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 80023b8:	f107 0310 	add.w	r3, r7, #16
 80023bc:	220a      	movs	r2, #10
 80023be:	2100      	movs	r1, #0
 80023c0:	4618      	mov	r0, r3
 80023c2:	f009 fa9d 	bl	800b900 <strtol>
 80023c6:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        float lon_min_strtof = strtof(lon_m, NULL);
 80023ca:	f107 0308 	add.w	r3, r7, #8
 80023ce:	2100      	movs	r1, #0
 80023d0:	4618      	mov	r0, r3
 80023d2:	f009 f9bd 	bl	800b750 <strtof>
 80023d6:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 80023da:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80023de:	f7fe fcf7 	bl	8000dd0 <__aeabi_i2f>
 80023e2:	4604      	mov	r4, r0
 80023e4:	494e      	ldr	r1, [pc, #312]	; (8002520 <nmea_GPGGA+0x338>)
 80023e6:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80023ea:	f7fe fdf9 	bl	8000fe0 <__aeabi_fdiv>
 80023ee:	4603      	mov	r3, r0
 80023f0:	4619      	mov	r1, r3
 80023f2:	4620      	mov	r0, r4
 80023f4:	f7fe fc38 	bl	8000c68 <__addsf3>
 80023f8:	4603      	mov	r3, r0
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fe f88e 	bl	800051c <__aeabi_f2d>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8002408:	f04f 0200 	mov.w	r2, #0
 800240c:	f04f 0300 	mov.w	r3, #0
 8002410:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8002414:	f7fe fb42 	bl	8000a9c <__aeabi_dcmpeq>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d17a      	bne.n	8002514 <nmea_GPGGA+0x32c>
 800241e:	f04f 0200 	mov.w	r2, #0
 8002422:	f04f 0300 	mov.w	r3, #0
 8002426:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800242a:	f7fe fb37 	bl	8000a9c <__aeabi_dcmpeq>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d16f      	bne.n	8002514 <nmea_GPGGA+0x32c>
 8002434:	f04f 0200 	mov.w	r2, #0
 8002438:	4b3a      	ldr	r3, [pc, #232]	; (8002524 <nmea_GPGGA+0x33c>)
 800243a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 800243e:	f7fe fb37 	bl	8000ab0 <__aeabi_dcmplt>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d065      	beq.n	8002514 <nmea_GPGGA+0x32c>
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	4b36      	ldr	r3, [pc, #216]	; (8002528 <nmea_GPGGA+0x340>)
 800244e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8002452:	f7fe fb2d 	bl	8000ab0 <__aeabi_dcmplt>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d05b      	beq.n	8002514 <nmea_GPGGA+0x32c>
            gps_data->latitude = lat_deg;
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8002462:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->latSide = latSide;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f897 20b6 	ldrb.w	r2, [r7, #182]	; 0xb6
 800246c:	721a      	strb	r2, [r3, #8]
            gps_data->longitude = lon_deg;
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8002474:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->lonSide = lonSide;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 800247e:	761a      	strb	r2, [r3, #24]
            float altitude = strtof(values[9], NULL);
 8002480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002482:	2100      	movs	r1, #0
 8002484:	4618      	mov	r0, r3
 8002486:	f009 f963 	bl	800b750 <strtof>
 800248a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            gps_data->altitude = altitude!=0 ? altitude : gps_data->altitude;
 800248e:	f04f 0100 	mov.w	r1, #0
 8002492:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8002496:	f7fe fe83 	bl	80011a0 <__aeabi_fcmpeq>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d002      	beq.n	80024a6 <nmea_GPGGA+0x2be>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	69db      	ldr	r3, [r3, #28]
 80024a4:	e001      	b.n	80024aa <nmea_GPGGA+0x2c2>
 80024a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	61d3      	str	r3, [r2, #28]
            gps_data->satelliteCount = strtol(values[7], NULL, 10);
 80024ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024b0:	220a      	movs	r2, #10
 80024b2:	2100      	movs	r1, #0
 80024b4:	4618      	mov	r0, r3
 80024b6:	f009 fa23 	bl	800b900 <strtol>
 80024ba:	4602      	mov	r2, r0
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	625a      	str	r2, [r3, #36]	; 0x24

            int fixQuality = strtol(values[6], NULL, 10);
 80024c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c2:	220a      	movs	r2, #10
 80024c4:	2100      	movs	r1, #0
 80024c6:	4618      	mov	r0, r3
 80024c8:	f009 fa1a 	bl	800b900 <strtol>
 80024cc:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            gps_data->fix = fixQuality > 0 ? 1 : 0;
 80024d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	bfcc      	ite	gt
 80024d8:	2301      	movgt	r3, #1
 80024da:	2300      	movle	r3, #0
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	461a      	mov	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	629a      	str	r2, [r3, #40]	; 0x28

            float hdop = strtof(values[8], NULL);
 80024e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024e6:	2100      	movs	r1, #0
 80024e8:	4618      	mov	r0, r3
 80024ea:	f009 f931 	bl	800b750 <strtof>
 80024ee:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
            gps_data->hdop = hdop!=0 ? hdop : gps_data->hdop;
 80024f2:	f04f 0100 	mov.w	r1, #0
 80024f6:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80024fa:	f7fe fe51 	bl	80011a0 <__aeabi_fcmpeq>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d002      	beq.n	800250a <nmea_GPGGA+0x322>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	e001      	b.n	800250e <nmea_GPGGA+0x326>
 800250a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	6213      	str	r3, [r2, #32]
        if(lat_deg!=0 && lon_deg!=0 && lat_deg<90 && lon_deg<180){
 8002512:	e022      	b.n	800255a <nmea_GPGGA+0x372>
        }
        else {
            for(int i=0; i<counter; i++) free(values[i]);
 8002514:	2300      	movs	r3, #0
 8002516:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800251a:	e016      	b.n	800254a <nmea_GPGGA+0x362>
 800251c:	080104dc 	.word	0x080104dc
 8002520:	42700000 	.word	0x42700000
 8002524:	40568000 	.word	0x40568000
 8002528:	40668000 	.word	0x40668000
 800252c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	33d8      	adds	r3, #216	; 0xd8
 8002534:	443b      	add	r3, r7
 8002536:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 800253a:	4618      	mov	r0, r3
 800253c:	f008 fa3e 	bl	800a9bc <free>
 8002540:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002544:	3301      	adds	r3, #1
 8002546:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800254a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800254e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002552:	429a      	cmp	r2, r3
 8002554:	dbea      	blt.n	800252c <nmea_GPGGA+0x344>
            return 0;
 8002556:	2300      	movs	r3, #0
 8002558:	e019      	b.n	800258e <nmea_GPGGA+0x3a6>
        }

    }

    for(int i=0; i<counter; i++) free(values[i]);
 800255a:	2300      	movs	r3, #0
 800255c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002560:	e00e      	b.n	8002580 <nmea_GPGGA+0x398>
 8002562:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	33d8      	adds	r3, #216	; 0xd8
 800256a:	443b      	add	r3, r7
 800256c:	f853 3cb8 	ldr.w	r3, [r3, #-184]
 8002570:	4618      	mov	r0, r3
 8002572:	f008 fa23 	bl	800a9bc <free>
 8002576:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800257a:	3301      	adds	r3, #1
 800257c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002580:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002584:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002588:	429a      	cmp	r2, r3
 800258a:	dbea      	blt.n	8002562 <nmea_GPGGA+0x37a>
    return 1;
 800258c:	2301      	movs	r3, #1
}
 800258e:	4618      	mov	r0, r3
 8002590:	37dc      	adds	r7, #220	; 0xdc
 8002592:	46bd      	mov	sp, r7
 8002594:	bd90      	pop	{r4, r7, pc}
 8002596:	bf00      	nop

08002598 <nmea_GPGSA>:


int nmea_GPGSA(GPS *gps_data, char*inputString){
 8002598:	b590      	push	{r4, r7, lr}
 800259a:	b0a3      	sub	sp, #140	; 0x8c
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
    char *values[25];
    int counter = 0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    memset(values, 0, sizeof(values));
 80025a8:	f107 030c 	add.w	r3, r7, #12
 80025ac:	2264      	movs	r2, #100	; 0x64
 80025ae:	2100      	movs	r1, #0
 80025b0:	4618      	mov	r0, r3
 80025b2:	f009 ff34 	bl	800c41e <memset>
    char *marker = strtok(inputString, ",");
 80025b6:	493b      	ldr	r1, [pc, #236]	; (80026a4 <nmea_GPGSA+0x10c>)
 80025b8:	6838      	ldr	r0, [r7, #0]
 80025ba:	f009 ff6b 	bl	800c494 <strtok>
 80025be:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 80025c2:	e027      	b.n	8002614 <nmea_GPGSA+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 80025c4:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80025c8:	f7fd fe3c 	bl	8000244 <strlen>
 80025cc:	4603      	mov	r3, r0
 80025ce:	1c5a      	adds	r2, r3, #1
 80025d0:	f8d7 4084 	ldr.w	r4, [r7, #132]	; 0x84
 80025d4:	1c63      	adds	r3, r4, #1
 80025d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80025da:	4610      	mov	r0, r2
 80025dc:	f008 f9e6 	bl	800a9ac <malloc>
 80025e0:	4603      	mov	r3, r0
 80025e2:	461a      	mov	r2, r3
 80025e4:	00a3      	lsls	r3, r4, #2
 80025e6:	3388      	adds	r3, #136	; 0x88
 80025e8:	443b      	add	r3, r7
 80025ea:	f843 2c7c 	str.w	r2, [r3, #-124]
        strcpy(values[counter - 1], marker);
 80025ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025f2:	3b01      	subs	r3, #1
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	3388      	adds	r3, #136	; 0x88
 80025f8:	443b      	add	r3, r7
 80025fa:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 80025fe:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8002602:	4618      	mov	r0, r3
 8002604:	f00a fde3 	bl	800d1ce <strcpy>
        marker = strtok(NULL, ",");
 8002608:	4926      	ldr	r1, [pc, #152]	; (80026a4 <nmea_GPGSA+0x10c>)
 800260a:	2000      	movs	r0, #0
 800260c:	f009 ff42 	bl	800c494 <strtok>
 8002610:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    while (marker != NULL) {
 8002614:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1d3      	bne.n	80025c4 <nmea_GPGSA+0x2c>
    }
    int fix = strtol(values[2], NULL, 10);
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	220a      	movs	r2, #10
 8002620:	2100      	movs	r1, #0
 8002622:	4618      	mov	r0, r3
 8002624:	f009 f96c 	bl	800b900 <strtol>
 8002628:	6738      	str	r0, [r7, #112]	; 0x70
    gps_data->fix = fix > 1 ? 1 : 0;
 800262a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800262c:	2b01      	cmp	r3, #1
 800262e:	bfcc      	ite	gt
 8002630:	2301      	movgt	r3, #1
 8002632:	2300      	movle	r3, #0
 8002634:	b2db      	uxtb	r3, r3
 8002636:	461a      	mov	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	629a      	str	r2, [r3, #40]	; 0x28
    int satelliteCount = 0;
 800263c:	2300      	movs	r3, #0
 800263e:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 8002640:	2303      	movs	r3, #3
 8002642:	67bb      	str	r3, [r7, #120]	; 0x78
 8002644:	e00e      	b.n	8002664 <nmea_GPGSA+0xcc>
        if(values[i][0] != '\0'){
 8002646:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	3388      	adds	r3, #136	; 0x88
 800264c:	443b      	add	r3, r7
 800264e:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d002      	beq.n	800265e <nmea_GPGSA+0xc6>
            satelliteCount++;
 8002658:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800265a:	3301      	adds	r3, #1
 800265c:	67fb      	str	r3, [r7, #124]	; 0x7c
    for(int i=3; i<15; i++){
 800265e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002660:	3301      	adds	r3, #1
 8002662:	67bb      	str	r3, [r7, #120]	; 0x78
 8002664:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002666:	2b0e      	cmp	r3, #14
 8002668:	dded      	ble.n	8002646 <nmea_GPGSA+0xae>
        }
    }
    gps_data->satelliteCount = satelliteCount;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800266e:	625a      	str	r2, [r3, #36]	; 0x24
    for(int i=0; i<counter; i++) free(values[i]);
 8002670:	2300      	movs	r3, #0
 8002672:	677b      	str	r3, [r7, #116]	; 0x74
 8002674:	e00b      	b.n	800268e <nmea_GPGSA+0xf6>
 8002676:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	3388      	adds	r3, #136	; 0x88
 800267c:	443b      	add	r3, r7
 800267e:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8002682:	4618      	mov	r0, r3
 8002684:	f008 f99a 	bl	800a9bc <free>
 8002688:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800268a:	3301      	adds	r3, #1
 800268c:	677b      	str	r3, [r7, #116]	; 0x74
 800268e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002690:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002694:	429a      	cmp	r2, r3
 8002696:	dbee      	blt.n	8002676 <nmea_GPGSA+0xde>
    return 1;
 8002698:	2301      	movs	r3, #1
}
 800269a:	4618      	mov	r0, r3
 800269c:	378c      	adds	r7, #140	; 0x8c
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd90      	pop	{r4, r7, pc}
 80026a2:	bf00      	nop
 80026a4:	080104dc 	.word	0x080104dc

080026a8 <nmea_GPGLL>:



int nmea_GPGLL(GPS *gps_data, char*inputString) {
 80026a8:	b590      	push	{r4, r7, lr}
 80026aa:	b0b7      	sub	sp, #220	; 0xdc
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]

    char *values[25];
    int counter = 0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    memset(values, 0, sizeof(values));
 80026b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026bc:	2264      	movs	r2, #100	; 0x64
 80026be:	2100      	movs	r1, #0
 80026c0:	4618      	mov	r0, r3
 80026c2:	f009 feac 	bl	800c41e <memset>
    char *marker = strtok(inputString, ",");
 80026c6:	49b0      	ldr	r1, [pc, #704]	; (8002988 <nmea_GPGLL+0x2e0>)
 80026c8:	6838      	ldr	r0, [r7, #0]
 80026ca:	f009 fee3 	bl	800c494 <strtok>
 80026ce:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 80026d2:	e027      	b.n	8002724 <nmea_GPGLL+0x7c>
        values[counter++] = malloc(strlen(marker) + 1); //free later!!!!!!
 80026d4:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80026d8:	f7fd fdb4 	bl	8000244 <strlen>
 80026dc:	4603      	mov	r3, r0
 80026de:	1c5a      	adds	r2, r3, #1
 80026e0:	f8d7 40d4 	ldr.w	r4, [r7, #212]	; 0xd4
 80026e4:	1c63      	adds	r3, r4, #1
 80026e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80026ea:	4610      	mov	r0, r2
 80026ec:	f008 f95e 	bl	800a9ac <malloc>
 80026f0:	4603      	mov	r3, r0
 80026f2:	461a      	mov	r2, r3
 80026f4:	00a3      	lsls	r3, r4, #2
 80026f6:	33d8      	adds	r3, #216	; 0xd8
 80026f8:	443b      	add	r3, r7
 80026fa:	f843 2cb4 	str.w	r2, [r3, #-180]
        strcpy(values[counter - 1], marker);
 80026fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002702:	3b01      	subs	r3, #1
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	33d8      	adds	r3, #216	; 0xd8
 8002708:	443b      	add	r3, r7
 800270a:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 800270e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002712:	4618      	mov	r0, r3
 8002714:	f00a fd5b 	bl	800d1ce <strcpy>
        marker = strtok(NULL, ",");
 8002718:	499b      	ldr	r1, [pc, #620]	; (8002988 <nmea_GPGLL+0x2e0>)
 800271a:	2000      	movs	r0, #0
 800271c:	f009 feba 	bl	800c494 <strtok>
 8002720:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    while (marker != NULL) {
 8002724:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1d3      	bne.n	80026d4 <nmea_GPGLL+0x2c>
    }
    char latSide = values[2][0];
 800272c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
    if (latSide == 'S' || latSide == 'N') { //check if data is sorta intact
 8002734:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8002738:	2b53      	cmp	r3, #83	; 0x53
 800273a:	d004      	beq.n	8002746 <nmea_GPGLL+0x9e>
 800273c:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8002740:	2b4e      	cmp	r3, #78	; 0x4e
 8002742:	f040 811c 	bne.w	800297e <nmea_GPGLL+0x2d6>
        char lat_d[2];
        char lat_m[7];
        for (int z = 0; z < 2; z++) lat_d[z] = values[1][z];
 8002746:	2300      	movs	r3, #0
 8002748:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800274c:	e010      	b.n	8002770 <nmea_GPGLL+0xc8>
 800274e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002750:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002754:	4413      	add	r3, r2
 8002756:	7819      	ldrb	r1, [r3, #0]
 8002758:	f107 0220 	add.w	r2, r7, #32
 800275c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002760:	4413      	add	r3, r2
 8002762:	460a      	mov	r2, r1
 8002764:	701a      	strb	r2, [r3, #0]
 8002766:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800276a:	3301      	adds	r3, #1
 800276c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002770:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002774:	2b01      	cmp	r3, #1
 8002776:	ddea      	ble.n	800274e <nmea_GPGLL+0xa6>
        for (int z = 0; z < 6; z++) lat_m[z] = values[1][z + 2];
 8002778:	2300      	movs	r3, #0
 800277a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800277e:	e011      	b.n	80027a4 <nmea_GPGLL+0xfc>
 8002780:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002782:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002786:	3302      	adds	r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	7819      	ldrb	r1, [r3, #0]
 800278c:	f107 0218 	add.w	r2, r7, #24
 8002790:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002794:	4413      	add	r3, r2
 8002796:	460a      	mov	r2, r1
 8002798:	701a      	strb	r2, [r3, #0]
 800279a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800279e:	3301      	adds	r3, #1
 80027a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80027a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80027a8:	2b05      	cmp	r3, #5
 80027aa:	dde9      	ble.n	8002780 <nmea_GPGLL+0xd8>

        int lat_deg_strtol = strtol(lat_d, NULL, 10);
 80027ac:	f107 0320 	add.w	r3, r7, #32
 80027b0:	220a      	movs	r2, #10
 80027b2:	2100      	movs	r1, #0
 80027b4:	4618      	mov	r0, r3
 80027b6:	f009 f8a3 	bl	800b900 <strtol>
 80027ba:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
        float lat_min_strtof = strtof(lat_m, NULL);
 80027be:	f107 0318 	add.w	r3, r7, #24
 80027c2:	2100      	movs	r1, #0
 80027c4:	4618      	mov	r0, r3
 80027c6:	f008 ffc3 	bl	800b750 <strtof>
 80027ca:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
        double lat_deg = lat_deg_strtol + lat_min_strtof / 60;
 80027ce:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 80027d2:	f7fe fafd 	bl	8000dd0 <__aeabi_i2f>
 80027d6:	4604      	mov	r4, r0
 80027d8:	496c      	ldr	r1, [pc, #432]	; (800298c <nmea_GPGLL+0x2e4>)
 80027da:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80027de:	f7fe fbff 	bl	8000fe0 <__aeabi_fdiv>
 80027e2:	4603      	mov	r3, r0
 80027e4:	4619      	mov	r1, r3
 80027e6:	4620      	mov	r0, r4
 80027e8:	f7fe fa3e 	bl	8000c68 <__addsf3>
 80027ec:	4603      	mov	r3, r0
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7fd fe94 	bl	800051c <__aeabi_f2d>
 80027f4:	4602      	mov	r2, r0
 80027f6:	460b      	mov	r3, r1
 80027f8:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0

        char lon_d[3];
        char lon_m[7];
        char lonSide = values[4][0];
 80027fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
        for (int z = 0; z < 3; z++) lon_d[z] = values[3][z];
 8002804:	2300      	movs	r3, #0
 8002806:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800280a:	e010      	b.n	800282e <nmea_GPGLL+0x186>
 800280c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800280e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002812:	4413      	add	r3, r2
 8002814:	7819      	ldrb	r1, [r3, #0]
 8002816:	f107 0214 	add.w	r2, r7, #20
 800281a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800281e:	4413      	add	r3, r2
 8002820:	460a      	mov	r2, r1
 8002822:	701a      	strb	r2, [r3, #0]
 8002824:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002828:	3301      	adds	r3, #1
 800282a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800282e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002832:	2b02      	cmp	r3, #2
 8002834:	ddea      	ble.n	800280c <nmea_GPGLL+0x164>
        for (int z = 0; z < 6; z++) lon_m[z] = values[3][z + 3];
 8002836:	2300      	movs	r3, #0
 8002838:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800283c:	e011      	b.n	8002862 <nmea_GPGLL+0x1ba>
 800283e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002840:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002844:	3303      	adds	r3, #3
 8002846:	4413      	add	r3, r2
 8002848:	7819      	ldrb	r1, [r3, #0]
 800284a:	f107 020c 	add.w	r2, r7, #12
 800284e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002852:	4413      	add	r3, r2
 8002854:	460a      	mov	r2, r1
 8002856:	701a      	strb	r2, [r3, #0]
 8002858:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800285c:	3301      	adds	r3, #1
 800285e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002862:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002866:	2b05      	cmp	r3, #5
 8002868:	dde9      	ble.n	800283e <nmea_GPGLL+0x196>

        int lon_deg_strtol = strtol(lon_d, NULL, 10);
 800286a:	f107 0314 	add.w	r3, r7, #20
 800286e:	220a      	movs	r2, #10
 8002870:	2100      	movs	r1, #0
 8002872:	4618      	mov	r0, r3
 8002874:	f009 f844 	bl	800b900 <strtol>
 8002878:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
        float lon_min_strtof = strtof(lon_m, NULL);
 800287c:	f107 030c 	add.w	r3, r7, #12
 8002880:	2100      	movs	r1, #0
 8002882:	4618      	mov	r0, r3
 8002884:	f008 ff64 	bl	800b750 <strtof>
 8002888:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
        double lon_deg = lon_deg_strtol + lon_min_strtof / 60;
 800288c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8002890:	f7fe fa9e 	bl	8000dd0 <__aeabi_i2f>
 8002894:	4604      	mov	r4, r0
 8002896:	493d      	ldr	r1, [pc, #244]	; (800298c <nmea_GPGLL+0x2e4>)
 8002898:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800289c:	f7fe fba0 	bl	8000fe0 <__aeabi_fdiv>
 80028a0:	4603      	mov	r3, r0
 80028a2:	4619      	mov	r1, r3
 80028a4:	4620      	mov	r0, r4
 80028a6:	f7fe f9df 	bl	8000c68 <__addsf3>
 80028aa:	4603      	mov	r3, r0
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7fd fe35 	bl	800051c <__aeabi_f2d>
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
        //confirm that we aren't on null island
        if(lon_deg_strtol == 0 || lon_min_strtof == 0 || lat_deg_strtol == 0 || lat_min_strtof == 0) {
 80028ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d015      	beq.n	80028ee <nmea_GPGLL+0x246>
 80028c2:	f04f 0100 	mov.w	r1, #0
 80028c6:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80028ca:	f7fe fc69 	bl	80011a0 <__aeabi_fcmpeq>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d10c      	bne.n	80028ee <nmea_GPGLL+0x246>
 80028d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d008      	beq.n	80028ee <nmea_GPGLL+0x246>
 80028dc:	f04f 0100 	mov.w	r1, #0
 80028e0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80028e4:	f7fe fc5c 	bl	80011a0 <__aeabi_fcmpeq>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d01a      	beq.n	8002924 <nmea_GPGLL+0x27c>
            for(int i = 0; i<counter; i++) free(values[i]);
 80028ee:	2300      	movs	r3, #0
 80028f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80028f4:	e00e      	b.n	8002914 <nmea_GPGLL+0x26c>
 80028f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	33d8      	adds	r3, #216	; 0xd8
 80028fe:	443b      	add	r3, r7
 8002900:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 8002904:	4618      	mov	r0, r3
 8002906:	f008 f859 	bl	800a9bc <free>
 800290a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800290e:	3301      	adds	r3, #1
 8002910:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002914:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002918:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800291c:	429a      	cmp	r2, r3
 800291e:	dbea      	blt.n	80028f6 <nmea_GPGLL+0x24e>
            return 0;
 8002920:	2300      	movs	r3, #0
 8002922:	e02d      	b.n	8002980 <nmea_GPGLL+0x2d8>
        }
        else{
            gps_data->latitude = lat_deg;
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800292a:	e9c1 2300 	strd	r2, r3, [r1]
            gps_data->longitude = lon_deg;
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002934:	e9c1 2304 	strd	r2, r3, [r1, #16]
            gps_data->latSide = latSide;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f897 20b7 	ldrb.w	r2, [r7, #183]	; 0xb7
 800293e:	721a      	strb	r2, [r3, #8]
            gps_data->lonSide = lonSide;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8002946:	761a      	strb	r2, [r3, #24]
            for(int i = 0; i<counter; i++) free(values[i]);
 8002948:	2300      	movs	r3, #0
 800294a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800294e:	e00e      	b.n	800296e <nmea_GPGLL+0x2c6>
 8002950:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	33d8      	adds	r3, #216	; 0xd8
 8002958:	443b      	add	r3, r7
 800295a:	f853 3cb4 	ldr.w	r3, [r3, #-180]
 800295e:	4618      	mov	r0, r3
 8002960:	f008 f82c 	bl	800a9bc <free>
 8002964:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002968:	3301      	adds	r3, #1
 800296a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800296e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002972:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002976:	429a      	cmp	r2, r3
 8002978:	dbea      	blt.n	8002950 <nmea_GPGLL+0x2a8>
            return 1;
 800297a:	2301      	movs	r3, #1
 800297c:	e000      	b.n	8002980 <nmea_GPGLL+0x2d8>
        }
    }
    else return 0;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	37dc      	adds	r7, #220	; 0xdc
 8002984:	46bd      	mov	sp, r7
 8002986:	bd90      	pop	{r4, r7, pc}
 8002988:	080104dc 	.word	0x080104dc
 800298c:	42700000 	.word	0x42700000

08002990 <nmea_GPRMC>:


int nmea_GPRMC(GPS *gps_data, char* inputString) {
 8002990:	b580      	push	{r7, lr}
 8002992:	b0a0      	sub	sp, #128	; 0x80
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]

    char *values[25];
    int counter = 0;
 800299a:	2300      	movs	r3, #0
 800299c:	67fb      	str	r3, [r7, #124]	; 0x7c
    memset(values, 0, sizeof(values));
 800299e:	f107 0308 	add.w	r3, r7, #8
 80029a2:	2264      	movs	r2, #100	; 0x64
 80029a4:	2100      	movs	r1, #0
 80029a6:	4618      	mov	r0, r3
 80029a8:	f009 fd39 	bl	800c41e <memset>
    char *start = inputString;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	67bb      	str	r3, [r7, #120]	; 0x78
    char *end;

    // Loop until the end of the string is reached.
    while (start != NULL && *start != '\0') {
 80029b0:	e058      	b.n	8002a64 <nmea_GPRMC+0xd4>
        end = strchr(start, ',');
 80029b2:	212c      	movs	r1, #44	; 0x2c
 80029b4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80029b6:	f009 fd3a 	bl	800c42e <strchr>
 80029ba:	6778      	str	r0, [r7, #116]	; 0x74
        if (end == NULL) {
 80029bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d106      	bne.n	80029d0 <nmea_GPRMC+0x40>
            // Last token reached.
            end = start + strlen(start);
 80029c2:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80029c4:	f7fd fc3e 	bl	8000244 <strlen>
 80029c8:	4602      	mov	r2, r0
 80029ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029cc:	4413      	add	r3, r2
 80029ce:	677b      	str	r3, [r7, #116]	; 0x74
        }

        if (end == start) {
 80029d0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80029d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d113      	bne.n	8002a00 <nmea_GPRMC+0x70>
            // Empty field found.
            values[counter] = malloc(1); // Allocate space for a single character
 80029d8:	2001      	movs	r0, #1
 80029da:	f007 ffe7 	bl	800a9ac <malloc>
 80029de:	4603      	mov	r3, r0
 80029e0:	461a      	mov	r2, r3
 80029e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	3380      	adds	r3, #128	; 0x80
 80029e8:	443b      	add	r3, r7
 80029ea:	f843 2c78 	str.w	r2, [r3, #-120]
            values[counter][0] = '\0';   // Set it to the empty string
 80029ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	3380      	adds	r3, #128	; 0x80
 80029f4:	443b      	add	r3, r7
 80029f6:	f853 3c78 	ldr.w	r3, [r3, #-120]
 80029fa:	2200      	movs	r2, #0
 80029fc:	701a      	strb	r2, [r3, #0]
 80029fe:	e027      	b.n	8002a50 <nmea_GPRMC+0xc0>
        } else {
            // Non-empty field found.
            values[counter] = malloc(end - start + 1); // Allocate space for the token
 8002a00:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002a02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	3301      	adds	r3, #1
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f007 ffcf 	bl	800a9ac <malloc>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	461a      	mov	r2, r3
 8002a12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	3380      	adds	r3, #128	; 0x80
 8002a18:	443b      	add	r3, r7
 8002a1a:	f843 2c78 	str.w	r2, [r3, #-120]
            strncpy(values[counter], start, end - start); // Copy the token
 8002a1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	3380      	adds	r3, #128	; 0x80
 8002a24:	443b      	add	r3, r7
 8002a26:	f853 0c78 	ldr.w	r0, [r3, #-120]
 8002a2a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002a2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	461a      	mov	r2, r3
 8002a32:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002a34:	f009 fd1a 	bl	800c46c <strncpy>
            values[counter][end - start] = '\0'; // Null-terminate it
 8002a38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	3380      	adds	r3, #128	; 0x80
 8002a3e:	443b      	add	r3, r7
 8002a40:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8002a44:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002a46:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002a48:	1a8a      	subs	r2, r1, r2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	701a      	strb	r2, [r3, #0]
        }

        counter++;
 8002a50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a52:	3301      	adds	r3, #1
 8002a54:	67fb      	str	r3, [r7, #124]	; 0x7c
        if (*end == '\0') {
 8002a56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00a      	beq.n	8002a74 <nmea_GPRMC+0xe4>
            // End of the string reached.
            break;
        }
        start = end + 1; // Move to the start of the next token.
 8002a5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a60:	3301      	adds	r3, #1
 8002a62:	67bb      	str	r3, [r7, #120]	; 0x78
    while (start != NULL && *start != '\0') {
 8002a64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d005      	beq.n	8002a76 <nmea_GPRMC+0xe6>
 8002a6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d19f      	bne.n	80029b2 <nmea_GPRMC+0x22>
 8002a72:	e000      	b.n	8002a76 <nmea_GPRMC+0xe6>
            break;
 8002a74:	bf00      	nop
    }

    // ... (Rest of your code for checking and handling the date and freeing memory)

    // Make sure to check if the date was successfully extracted
    if (counter > 9 && strlen(values[9]) == 6) {
 8002a76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a78:	2b09      	cmp	r3, #9
 8002a7a:	dd2a      	ble.n	8002ad2 <nmea_GPRMC+0x142>
 8002a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fd fbe0 	bl	8000244 <strlen>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b06      	cmp	r3, #6
 8002a88:	d123      	bne.n	8002ad2 <nmea_GPRMC+0x142>
        strncpy(gps_data->date, values[9], 6);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	3336      	adds	r3, #54	; 0x36
 8002a8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a90:	2206      	movs	r2, #6
 8002a92:	4618      	mov	r0, r3
 8002a94:	f009 fcea 	bl	800c46c <strncpy>
        gps_data->date[6] = '\0';
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        // Free allocated memory
        for (int i = 0; i < counter; i++) free(values[i]);
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	673b      	str	r3, [r7, #112]	; 0x70
 8002aa4:	e00b      	b.n	8002abe <nmea_GPRMC+0x12e>
 8002aa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	3380      	adds	r3, #128	; 0x80
 8002aac:	443b      	add	r3, r7
 8002aae:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f007 ff82 	bl	800a9bc <free>
 8002ab8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002aba:	3301      	adds	r3, #1
 8002abc:	673b      	str	r3, [r7, #112]	; 0x70
 8002abe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002ac0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	dbef      	blt.n	8002aa6 <nmea_GPRMC+0x116>
        gps_data->RMC_Flag = 1;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        return 1; // Success
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e013      	b.n	8002afa <nmea_GPRMC+0x16a>
    } else {
        // Free allocated memory before returning
        for (int i = 0; i < counter; i++) free(values[i]);
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ad6:	e00b      	b.n	8002af0 <nmea_GPRMC+0x160>
 8002ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	3380      	adds	r3, #128	; 0x80
 8002ade:	443b      	add	r3, r7
 8002ae0:	f853 3c78 	ldr.w	r3, [r3, #-120]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f007 ff69 	bl	800a9bc <free>
 8002aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aec:	3301      	adds	r3, #1
 8002aee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002af0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002af2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002af4:	429a      	cmp	r2, r3
 8002af6:	dbef      	blt.n	8002ad8 <nmea_GPRMC+0x148>
        return 0; // Failure
 8002af8:	2300      	movs	r3, #0
    }
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3780      	adds	r7, #128	; 0x80
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
	...

08002b04 <nmea_parse>:



void nmea_parse(GPS *gps_data, uint8_t *buffer){
 8002b04:	b590      	push	{r4, r7, lr}
 8002b06:	b087      	sub	sp, #28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
    memset(data, 0, sizeof(data));
 8002b0e:	223c      	movs	r2, #60	; 0x3c
 8002b10:	2100      	movs	r1, #0
 8002b12:	485e      	ldr	r0, [pc, #376]	; (8002c8c <nmea_parse+0x188>)
 8002b14:	f009 fc83 	bl	800c41e <memset>
    char * token = strtok(buffer, "$"); // TODO: Check if buffer can be casted to a char * for strtok argument
 8002b18:	495d      	ldr	r1, [pc, #372]	; (8002c90 <nmea_parse+0x18c>)
 8002b1a:	6838      	ldr	r0, [r7, #0]
 8002b1c:	f009 fcba 	bl	800c494 <strtok>
 8002b20:	6178      	str	r0, [r7, #20]
    int cnt = 0;
 8002b22:	2300      	movs	r3, #0
 8002b24:	613b      	str	r3, [r7, #16]
    while(token !=NULL){
 8002b26:	e01d      	b.n	8002b64 <nmea_parse+0x60>
        data[cnt++] = malloc(strlen(token)+1); //free later!!!!!
 8002b28:	6978      	ldr	r0, [r7, #20]
 8002b2a:	f7fd fb8b 	bl	8000244 <strlen>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	1c5a      	adds	r2, r3, #1
 8002b32:	693c      	ldr	r4, [r7, #16]
 8002b34:	1c63      	adds	r3, r4, #1
 8002b36:	613b      	str	r3, [r7, #16]
 8002b38:	4610      	mov	r0, r2
 8002b3a:	f007 ff37 	bl	800a9ac <malloc>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	461a      	mov	r2, r3
 8002b42:	4b52      	ldr	r3, [pc, #328]	; (8002c8c <nmea_parse+0x188>)
 8002b44:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
        strcpy(data[cnt-1], token);
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	4a4f      	ldr	r2, [pc, #316]	; (8002c8c <nmea_parse+0x188>)
 8002b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b52:	6979      	ldr	r1, [r7, #20]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f00a fb3a 	bl	800d1ce <strcpy>
        token = strtok(NULL, "$");
 8002b5a:	494d      	ldr	r1, [pc, #308]	; (8002c90 <nmea_parse+0x18c>)
 8002b5c:	2000      	movs	r0, #0
 8002b5e:	f009 fc99 	bl	800c494 <strtok>
 8002b62:	6178      	str	r0, [r7, #20]
    while(token !=NULL){
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1de      	bne.n	8002b28 <nmea_parse+0x24>
    }
    for(int i = 0; i<cnt; i++){
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	e072      	b.n	8002c56 <nmea_parse+0x152>
       if(strstr(data[i], "\r\n")!=NULL){
 8002b70:	4a46      	ldr	r2, [pc, #280]	; (8002c8c <nmea_parse+0x188>)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b78:	4946      	ldr	r1, [pc, #280]	; (8002c94 <nmea_parse+0x190>)
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f009 fce6 	bl	800c54c <strstr>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d064      	beq.n	8002c50 <nmea_parse+0x14c>
           if(strstr(data[i], "GPGLL")!=NULL){
 8002b86:	4a41      	ldr	r2, [pc, #260]	; (8002c8c <nmea_parse+0x188>)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b8e:	4942      	ldr	r1, [pc, #264]	; (8002c98 <nmea_parse+0x194>)
 8002b90:	4618      	mov	r0, r3
 8002b92:	f009 fcdb 	bl	800c54c <strstr>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d008      	beq.n	8002bae <nmea_parse+0xaa>
               nmea_GPGLL(gps_data, data[i]);
 8002b9c:	4a3b      	ldr	r2, [pc, #236]	; (8002c8c <nmea_parse+0x188>)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7ff fd7e 	bl	80026a8 <nmea_GPGLL>
 8002bac:	e050      	b.n	8002c50 <nmea_parse+0x14c>
           }
           else if(strstr(data[i], "GPGSA")!=NULL){
 8002bae:	4a37      	ldr	r2, [pc, #220]	; (8002c8c <nmea_parse+0x188>)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb6:	4939      	ldr	r1, [pc, #228]	; (8002c9c <nmea_parse+0x198>)
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f009 fcc7 	bl	800c54c <strstr>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d008      	beq.n	8002bd6 <nmea_parse+0xd2>
               nmea_GPGSA(gps_data, data[i]);
 8002bc4:	4a31      	ldr	r2, [pc, #196]	; (8002c8c <nmea_parse+0x188>)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bcc:	4619      	mov	r1, r3
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7ff fce2 	bl	8002598 <nmea_GPGSA>
 8002bd4:	e03c      	b.n	8002c50 <nmea_parse+0x14c>
           }
           else if(strstr(data[i], "GNGGA") != NULL || (strstr(data[i], "GPGGA"))!=NULL){
 8002bd6:	4a2d      	ldr	r2, [pc, #180]	; (8002c8c <nmea_parse+0x188>)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bde:	4930      	ldr	r1, [pc, #192]	; (8002ca0 <nmea_parse+0x19c>)
 8002be0:	4618      	mov	r0, r3
 8002be2:	f009 fcb3 	bl	800c54c <strstr>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10a      	bne.n	8002c02 <nmea_parse+0xfe>
 8002bec:	4a27      	ldr	r2, [pc, #156]	; (8002c8c <nmea_parse+0x188>)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf4:	492b      	ldr	r1, [pc, #172]	; (8002ca4 <nmea_parse+0x1a0>)
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f009 fca8 	bl	800c54c <strstr>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d008      	beq.n	8002c14 <nmea_parse+0x110>
               nmea_GPGGA(gps_data, data[i]);
 8002c02:	4a22      	ldr	r2, [pc, #136]	; (8002c8c <nmea_parse+0x188>)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f7ff faeb 	bl	80021e8 <nmea_GPGGA>
 8002c12:	e01d      	b.n	8002c50 <nmea_parse+0x14c>
           }
           else if(strstr(data[i], "GNRMC") != NULL || (strstr(data[i], "GPRMC"))!=NULL){
 8002c14:	4a1d      	ldr	r2, [pc, #116]	; (8002c8c <nmea_parse+0x188>)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c1c:	4922      	ldr	r1, [pc, #136]	; (8002ca8 <nmea_parse+0x1a4>)
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f009 fc94 	bl	800c54c <strstr>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d10a      	bne.n	8002c40 <nmea_parse+0x13c>
 8002c2a:	4a18      	ldr	r2, [pc, #96]	; (8002c8c <nmea_parse+0x188>)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c32:	491e      	ldr	r1, [pc, #120]	; (8002cac <nmea_parse+0x1a8>)
 8002c34:	4618      	mov	r0, r3
 8002c36:	f009 fc89 	bl	800c54c <strstr>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d007      	beq.n	8002c50 <nmea_parse+0x14c>
	       nmea_GPRMC(gps_data, data[i]);
 8002c40:	4a12      	ldr	r2, [pc, #72]	; (8002c8c <nmea_parse+0x188>)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c48:	4619      	mov	r1, r3
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7ff fea0 	bl	8002990 <nmea_GPRMC>
    for(int i = 0; i<cnt; i++){
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	3301      	adds	r3, #1
 8002c54:	60fb      	str	r3, [r7, #12]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	db88      	blt.n	8002b70 <nmea_parse+0x6c>
	   }
       }

    }
    for(int i = 0; i<cnt; i++) free(data[i]);
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60bb      	str	r3, [r7, #8]
 8002c62:	e009      	b.n	8002c78 <nmea_parse+0x174>
 8002c64:	4a09      	ldr	r2, [pc, #36]	; (8002c8c <nmea_parse+0x188>)
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f007 fea5 	bl	800a9bc <free>
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	3301      	adds	r3, #1
 8002c76:	60bb      	str	r3, [r7, #8]
 8002c78:	68ba      	ldr	r2, [r7, #8]
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	dbf1      	blt.n	8002c64 <nmea_parse+0x160>


}
 8002c80:	bf00      	nop
 8002c82:	bf00      	nop
 8002c84:	371c      	adds	r7, #28
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd90      	pop	{r4, r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	2000041c 	.word	0x2000041c
 8002c90:	080104e0 	.word	0x080104e0
 8002c94:	080104e4 	.word	0x080104e4
 8002c98:	080104e8 	.word	0x080104e8
 8002c9c:	080104f0 	.word	0x080104f0
 8002ca0:	080104f8 	.word	0x080104f8
 8002ca4:	08010500 	.word	0x08010500
 8002ca8:	08010508 	.word	0x08010508
 8002cac:	08010510 	.word	0x08010510

08002cb0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002cb6:	1d3b      	adds	r3, r7, #4
 8002cb8:	2100      	movs	r1, #0
 8002cba:	460a      	mov	r2, r1
 8002cbc:	801a      	strh	r2, [r3, #0]
 8002cbe:	460a      	mov	r2, r1
 8002cc0:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002cc6:	4b1d      	ldr	r3, [pc, #116]	; (8002d3c <MX_RTC_Init+0x8c>)
 8002cc8:	4a1d      	ldr	r2, [pc, #116]	; (8002d40 <MX_RTC_Init+0x90>)
 8002cca:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8002ccc:	4b1b      	ldr	r3, [pc, #108]	; (8002d3c <MX_RTC_Init+0x8c>)
 8002cce:	f04f 32ff 	mov.w	r2, #4294967295
 8002cd2:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8002cd4:	4b19      	ldr	r3, [pc, #100]	; (8002d3c <MX_RTC_Init+0x8c>)
 8002cd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cda:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002cdc:	4817      	ldr	r0, [pc, #92]	; (8002d3c <MX_RTC_Init+0x8c>)
 8002cde:	f003 fd83 	bl	80067e8 <HAL_RTC_Init>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8002ce8:	f7ff fa78 	bl	80021dc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002cec:	2300      	movs	r3, #0
 8002cee:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002cf8:	1d3b      	adds	r3, r7, #4
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	480f      	ldr	r0, [pc, #60]	; (8002d3c <MX_RTC_Init+0x8c>)
 8002d00:	f003 fdfe 	bl	8006900 <HAL_RTC_SetTime>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8002d0a:	f7ff fa67 	bl	80021dc <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002d12:	2301      	movs	r3, #1
 8002d14:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8002d16:	2301      	movs	r3, #1
 8002d18:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8002d1e:	463b      	mov	r3, r7
 8002d20:	2201      	movs	r2, #1
 8002d22:	4619      	mov	r1, r3
 8002d24:	4805      	ldr	r0, [pc, #20]	; (8002d3c <MX_RTC_Init+0x8c>)
 8002d26:	f003 ff5b 	bl	8006be0 <HAL_RTC_SetDate>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8002d30:	f7ff fa54 	bl	80021dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002d34:	bf00      	nop
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	20000458 	.word	0x20000458
 8002d40:	40002800 	.word	0x40002800

08002d44 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a0b      	ldr	r2, [pc, #44]	; (8002d80 <HAL_RTC_MspInit+0x3c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d110      	bne.n	8002d78 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8002d56:	f002 ff9d 	bl	8005c94 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8002d5a:	4b0a      	ldr	r3, [pc, #40]	; (8002d84 <HAL_RTC_MspInit+0x40>)
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	4a09      	ldr	r2, [pc, #36]	; (8002d84 <HAL_RTC_MspInit+0x40>)
 8002d60:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002d64:	61d3      	str	r3, [r2, #28]
 8002d66:	4b07      	ldr	r3, [pc, #28]	; (8002d84 <HAL_RTC_MspInit+0x40>)
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d6e:	60fb      	str	r3, [r7, #12]
 8002d70:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002d72:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <HAL_RTC_MspInit+0x44>)
 8002d74:	2201      	movs	r2, #1
 8002d76:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002d78:	bf00      	nop
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40002800 	.word	0x40002800
 8002d84:	40021000 	.word	0x40021000
 8002d88:	4242043c 	.word	0x4242043c

08002d8c <Sync_RTC_With_GPS>:

/* USER CODE BEGIN 1 */


void Sync_RTC_With_GPS()
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8002d92:	af00      	add	r7, sp, #0
  /* Buffers for the GPSTime and GPSDate */
  char GPSTime[256];
  char GPSDate[256];

  /* Flag to track if the sync is complete */
  uint8_t RTC_Sync_Flag = 0;
 8002d94:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8002d98:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	701a      	strb	r2, [r3, #0]

  while(RTC_Sync_Flag == 0) {
 8002da0:	e00d      	b.n	8002dbe <Sync_RTC_With_GPS+0x32>
    /* Read in an NMEA message into the buffer */
    readNMEA(&receive_buffer);
 8002da2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff f978 	bl	800209c <readNMEA>

    /*
     * Get the date and time and Sync the RTC
     * The function will set RTC_Sync_Flag = 1 when the RTC is sync'd
     */
    getGPSDateTime(receive_buffer, GPSTime, GPSDate, &RTC_Sync_Flag);
 8002dac:	1dfb      	adds	r3, r7, #7
 8002dae:	f107 0208 	add.w	r2, r7, #8
 8002db2:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8002db6:	f507 7002 	add.w	r0, r7, #520	; 0x208
 8002dba:	f000 f80d 	bl	8002dd8 <getGPSDateTime>
  while(RTC_Sync_Flag == 0) {
 8002dbe:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8002dc2:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0ea      	beq.n	8002da2 <Sync_RTC_With_GPS+0x16>
  }

  /* Can turn on the TEL board LED here to indicate that the RTC is SYNC'd  */
}
 8002dcc:	bf00      	nop
 8002dce:	bf00      	nop
 8002dd0:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <getGPSDateTime>:


void getGPSDateTime(uint8_t *buffer, char *GPSTime, char *GPSDate, uint8_t *RTC_Sync_Flag)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b096      	sub	sp, #88	; 0x58
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
 8002de4:	603b      	str	r3, [r7, #0]
  GPS myData;
  nmea_parse(&myData, buffer);
 8002de6:	f107 0318 	add.w	r3, r7, #24
 8002dea:	68f9      	ldr	r1, [r7, #12]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff fe89 	bl	8002b04 <nmea_parse>

  /*
   * lastMeasure is a null-terminated string and has the format hhmmss.sss
   * Make sure there's a valid fix and that there is an RMC message
   */
  if(myData.fix == 1 && myData.RMC_Flag == 1) {
 8002df2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	f040 80a1 	bne.w	8002f3c <getGPSDateTime+0x164>
 8002dfa:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	f040 809c 	bne.w	8002f3c <getGPSDateTime+0x164>

    /* Copy the GPS time to GPSTime */
    strncpy(GPSTime, myData.lastMeasure, 10);
 8002e04:	f107 0318 	add.w	r3, r7, #24
 8002e08:	332c      	adds	r3, #44	; 0x2c
 8002e0a:	220a      	movs	r2, #10
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	68b8      	ldr	r0, [r7, #8]
 8002e10:	f009 fb2c 	bl	800c46c <strncpy>
    GPSTime[10] = '\0'; // Ensure null termination
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	330a      	adds	r3, #10
 8002e18:	2200      	movs	r2, #0
 8002e1a:	701a      	strb	r2, [r3, #0]

    /* Copy the GPS date to GPSDate */
    strncpy(GPSDate, myData.date, 6);
 8002e1c:	f107 0318 	add.w	r3, r7, #24
 8002e20:	3336      	adds	r3, #54	; 0x36
 8002e22:	2206      	movs	r2, #6
 8002e24:	4619      	mov	r1, r3
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f009 fb20 	bl	800c46c <strncpy>
    GPSDate[6] = '\0'; // Ensure null termination
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3306      	adds	r3, #6
 8002e30:	2200      	movs	r2, #0
 8002e32:	701a      	strb	r2, [r3, #0]

    /* Initialize Time and Date Objects */
    RTC_TimeTypeDef sTime = {0};
 8002e34:	f107 0314 	add.w	r3, r7, #20
 8002e38:	2100      	movs	r1, #0
 8002e3a:	460a      	mov	r2, r1
 8002e3c:	801a      	strh	r2, [r3, #0]
 8002e3e:	460a      	mov	r2, r1
 8002e40:	709a      	strb	r2, [r3, #2]
    RTC_DateTypeDef sDate = {0};
 8002e42:	2300      	movs	r3, #0
 8002e44:	613b      	str	r3, [r7, #16]

    /* Manually parsing the hours, minutes, and seconds */
    sTime.Hours   = (GPSTime[0] - '0') * 10 + (GPSTime[1] - '0');
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	3b30      	subs	r3, #48	; 0x30
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	461a      	mov	r2, r3
 8002e50:	0092      	lsls	r2, r2, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	4413      	add	r3, r2
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	3b30      	subs	r3, #48	; 0x30
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	753b      	strb	r3, [r7, #20]
    sTime.Minutes = (GPSTime[2] - '0') * 10 + (GPSTime[3] - '0');
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	3302      	adds	r3, #2
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	3b30      	subs	r3, #48	; 0x30
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	461a      	mov	r2, r3
 8002e74:	0092      	lsls	r2, r2, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	3303      	adds	r3, #3
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	4413      	add	r3, r2
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	3b30      	subs	r3, #48	; 0x30
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	757b      	strb	r3, [r7, #21]
    sTime.Seconds = (GPSTime[4] - '0') * 10 + (GPSTime[5] - '0');
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	3304      	adds	r3, #4
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	3b30      	subs	r3, #48	; 0x30
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	461a      	mov	r2, r3
 8002e98:	0092      	lsls	r2, r2, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	3305      	adds	r3, #5
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	3b30      	subs	r3, #48	; 0x30
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	75bb      	strb	r3, [r7, #22]

    /* Set the RTC time with these settings */
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002eb0:	f107 0314 	add.w	r3, r7, #20
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4822      	ldr	r0, [pc, #136]	; (8002f44 <getGPSDateTime+0x16c>)
 8002eba:	f003 fd21 	bl	8006900 <HAL_RTC_SetTime>

    /* Manually parsing the date, month, and year */
    sDate.Date  = (GPSDate[0] - '0') * 10 + (GPSDate[1] - '0');
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	3b30      	subs	r3, #48	; 0x30
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	0092      	lsls	r2, r2, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	3b30      	subs	r3, #48	; 0x30
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	74bb      	strb	r3, [r7, #18]
    sDate.Month = (GPSDate[2] - '0') * 10 + (GPSDate[3] - '0');
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3302      	adds	r3, #2
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	3b30      	subs	r3, #48	; 0x30
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	461a      	mov	r2, r3
 8002eec:	0092      	lsls	r2, r2, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3303      	adds	r3, #3
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	4413      	add	r3, r2
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	3b30      	subs	r3, #48	; 0x30
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	747b      	strb	r3, [r7, #17]
    sDate.Year  = (GPSDate[4] - '0') * 10 + (GPSDate[5] - '0');
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3304      	adds	r3, #4
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	3b30      	subs	r3, #48	; 0x30
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	461a      	mov	r2, r3
 8002f10:	0092      	lsls	r2, r2, #2
 8002f12:	4413      	add	r3, r2
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	b2da      	uxtb	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3305      	adds	r3, #5
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	4413      	add	r3, r2
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	3b30      	subs	r3, #48	; 0x30
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	74fb      	strb	r3, [r7, #19]

    /* Set the RTC Date with these settings */
    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002f28:	f107 0310 	add.w	r3, r7, #16
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4804      	ldr	r0, [pc, #16]	; (8002f44 <getGPSDateTime+0x16c>)
 8002f32:	f003 fe55 	bl	8006be0 <HAL_RTC_SetDate>

    /* Set the flag to 1 indicating that the RTC has been sync'd */
    *RTC_Sync_Flag = 1;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	701a      	strb	r2, [r3, #0]
  }
}
 8002f3c:	bf00      	nop
 8002f3e:	3758      	adds	r7, #88	; 0x58
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	20000458 	.word	0x20000458

08002f48 <get_current_timestamp>:

time_t get_current_timestamp()
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
  /* Initialize Time and Date objects */
  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef sDate;

  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002f4e:	1d3b      	adds	r3, r7, #4
 8002f50:	2200      	movs	r2, #0
 8002f52:	4619      	mov	r1, r3
 8002f54:	480b      	ldr	r0, [pc, #44]	; (8002f84 <get_current_timestamp+0x3c>)
 8002f56:	f003 fd6b 	bl	8006a30 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002f5a:	463b      	mov	r3, r7
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	4619      	mov	r1, r3
 8002f60:	4808      	ldr	r0, [pc, #32]	; (8002f84 <get_current_timestamp+0x3c>)
 8002f62:	f003 fef3 	bl	8006d4c <HAL_RTC_GetDate>

  /* Convert to Epoch Time */
  time_t epochTime = convertToEpochTime(&sTime, &sDate);
 8002f66:	463a      	mov	r2, r7
 8002f68:	1d3b      	adds	r3, r7, #4
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f000 f80b 	bl	8002f88 <convertToEpochTime>
 8002f72:	e9c7 0102 	strd	r0, r1, [r7, #8]

  /* Return the resulting epoch time */
  return epochTime;
 8002f76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8002f7a:	4610      	mov	r0, r2
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	20000458 	.word	0x20000458

08002f88 <convertToEpochTime>:

/* Used to get current time stamp */
time_t convertToEpochTime(RTC_TimeTypeDef *sTime, RTC_DateTypeDef *sDate)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b08c      	sub	sp, #48	; 0x30
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
    /* Initialize tm struct - from time.h library */
    struct tm t;

    /* Populate the tm structure fields from the RTC time and date */
    t.tm_year = sDate->Year + 100;  // Year since 1900, so add 100 to the year from the RTC (which starts at 2000).
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	78db      	ldrb	r3, [r3, #3]
 8002f96:	3364      	adds	r3, #100	; 0x64
 8002f98:	623b      	str	r3, [r7, #32]
    t.tm_mon = sDate->Month - 1;    // tm_mon is 0-11, so subtract 1 from the RTC month (which starts at 1).
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	785b      	ldrb	r3, [r3, #1]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	61fb      	str	r3, [r7, #28]
    t.tm_mday = sDate->Date;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	789b      	ldrb	r3, [r3, #2]
 8002fa6:	61bb      	str	r3, [r7, #24]
    t.tm_hour = sTime->Hours;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	617b      	str	r3, [r7, #20]
    t.tm_min = sTime->Minutes;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	785b      	ldrb	r3, [r3, #1]
 8002fb2:	613b      	str	r3, [r7, #16]
    t.tm_sec = sTime->Seconds;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	789b      	ldrb	r3, [r3, #2]
 8002fb8:	60fb      	str	r3, [r7, #12]
    t.tm_isdst = -1;                // Disable daylight saving time adjustments.
 8002fba:	f04f 33ff 	mov.w	r3, #4294967295
 8002fbe:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Subtract 8 hours with roll-back feature */
    t.tm_hour -= 8;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	3b08      	subs	r3, #8
 8002fc4:	617b      	str	r3, [r7, #20]
    if (t.tm_hour < 0) {
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	da1d      	bge.n	8003008 <convertToEpochTime+0x80>
        t.tm_hour += 24;  // Adjust the hour to ensure it's not less than 0.
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	3318      	adds	r3, #24
 8002fd0:	617b      	str	r3, [r7, #20]
        t.tm_mday--;      // Decrement the day to reflect the day change.
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	61bb      	str	r3, [r7, #24]

        /* Adjust the month and year if needed when day rolls below 1 */
        if (t.tm_mday < 1) {
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	dc14      	bgt.n	8003008 <convertToEpochTime+0x80>
            t.tm_mon--;  // Decrement the month.
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	61fb      	str	r3, [r7, #28]
            if (t.tm_mon < 0) { // If month rolls below January
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	da04      	bge.n	8002ff4 <convertToEpochTime+0x6c>
                t.tm_mon = 11; // Set month to December
 8002fea:	230b      	movs	r3, #11
 8002fec:	61fb      	str	r3, [r7, #28]
                t.tm_year--;   // Decrement the year
 8002fee:	6a3b      	ldr	r3, [r7, #32]
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	623b      	str	r3, [r7, #32]
            }
            /* Set day to last day of the new month */
            t.tm_mday = lastDayOfMonth(t.tm_mon, t.tm_year + 1900);
 8002ff4:	69fa      	ldr	r2, [r7, #28]
 8002ff6:	6a3b      	ldr	r3, [r7, #32]
 8002ff8:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4610      	mov	r0, r2
 8003000:	f000 f80e 	bl	8003020 <lastDayOfMonth>
 8003004:	4603      	mov	r3, r0
 8003006:	61bb      	str	r3, [r7, #24]
        }
    }

    /* Convert to epoch time - Function from time.h library */
    return mktime(&t);
 8003008:	f107 030c 	add.w	r3, r7, #12
 800300c:	4618      	mov	r0, r3
 800300e:	f009 fb89 	bl	800c724 <mktime>
 8003012:	4602      	mov	r2, r0
 8003014:	460b      	mov	r3, r1
}
 8003016:	4610      	mov	r0, r2
 8003018:	4619      	mov	r1, r3
 800301a:	3730      	adds	r7, #48	; 0x30
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <lastDayOfMonth>:

/* Function to return the last day of a month */
int lastDayOfMonth(int month, int year)
{
 8003020:	b4b0      	push	{r4, r5, r7}
 8003022:	b08f      	sub	sp, #60	; 0x3c
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  /* Array to hold the number of days in each month */
  int daysInMonth[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 800302a:	4b1e      	ldr	r3, [pc, #120]	; (80030a4 <lastDayOfMonth+0x84>)
 800302c:	f107 0408 	add.w	r4, r7, #8
 8003030:	461d      	mov	r5, r3
 8003032:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003034:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003036:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003038:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800303a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800303e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  /* Check for leap year in February */
  if (month == 1) { // February case
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d121      	bne.n	800308c <lastDayOfMonth+0x6c>
    if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) {
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10c      	bne.n	800306c <lastDayOfMonth+0x4c>
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	4b14      	ldr	r3, [pc, #80]	; (80030a8 <lastDayOfMonth+0x88>)
 8003056:	fb83 1302 	smull	r1, r3, r3, r2
 800305a:	1159      	asrs	r1, r3, #5
 800305c:	17d3      	asrs	r3, r2, #31
 800305e:	1acb      	subs	r3, r1, r3
 8003060:	2164      	movs	r1, #100	; 0x64
 8003062:	fb01 f303 	mul.w	r3, r1, r3
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10d      	bne.n	8003088 <lastDayOfMonth+0x68>
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	4b0e      	ldr	r3, [pc, #56]	; (80030a8 <lastDayOfMonth+0x88>)
 8003070:	fb83 1302 	smull	r1, r3, r3, r2
 8003074:	11d9      	asrs	r1, r3, #7
 8003076:	17d3      	asrs	r3, r2, #31
 8003078:	1acb      	subs	r3, r1, r3
 800307a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800307e:	fb01 f303 	mul.w	r3, r1, r3
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <lastDayOfMonth+0x6c>
      return 29;
 8003088:	231d      	movs	r3, #29
 800308a:	e005      	b.n	8003098 <lastDayOfMonth+0x78>
    }
  }
  return daysInMonth[month];
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	3338      	adds	r3, #56	; 0x38
 8003092:	443b      	add	r3, r7
 8003094:	f853 3c30 	ldr.w	r3, [r3, #-48]
}
 8003098:	4618      	mov	r0, r3
 800309a:	373c      	adds	r7, #60	; 0x3c
 800309c:	46bd      	mov	sp, r7
 800309e:	bcb0      	pop	{r4, r5, r7}
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	08010518 	.word	0x08010518
 80030a8:	51eb851f 	.word	0x51eb851f

080030ac <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80030b0:	4b17      	ldr	r3, [pc, #92]	; (8003110 <MX_SPI1_Init+0x64>)
 80030b2:	4a18      	ldr	r2, [pc, #96]	; (8003114 <MX_SPI1_Init+0x68>)
 80030b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80030b6:	4b16      	ldr	r3, [pc, #88]	; (8003110 <MX_SPI1_Init+0x64>)
 80030b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80030bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80030be:	4b14      	ldr	r3, [pc, #80]	; (8003110 <MX_SPI1_Init+0x64>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80030c4:	4b12      	ldr	r3, [pc, #72]	; (8003110 <MX_SPI1_Init+0x64>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80030ca:	4b11      	ldr	r3, [pc, #68]	; (8003110 <MX_SPI1_Init+0x64>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030d0:	4b0f      	ldr	r3, [pc, #60]	; (8003110 <MX_SPI1_Init+0x64>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80030d6:	4b0e      	ldr	r3, [pc, #56]	; (8003110 <MX_SPI1_Init+0x64>)
 80030d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80030de:	4b0c      	ldr	r3, [pc, #48]	; (8003110 <MX_SPI1_Init+0x64>)
 80030e0:	2208      	movs	r2, #8
 80030e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030e4:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <MX_SPI1_Init+0x64>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80030ea:	4b09      	ldr	r3, [pc, #36]	; (8003110 <MX_SPI1_Init+0x64>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030f0:	4b07      	ldr	r3, [pc, #28]	; (8003110 <MX_SPI1_Init+0x64>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80030f6:	4b06      	ldr	r3, [pc, #24]	; (8003110 <MX_SPI1_Init+0x64>)
 80030f8:	220a      	movs	r2, #10
 80030fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80030fc:	4804      	ldr	r0, [pc, #16]	; (8003110 <MX_SPI1_Init+0x64>)
 80030fe:	f004 f91b 	bl	8007338 <HAL_SPI_Init>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003108:	f7ff f868 	bl	80021dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800310c:	bf00      	nop
 800310e:	bd80      	pop	{r7, pc}
 8003110:	2000046c 	.word	0x2000046c
 8003114:	40013000 	.word	0x40013000

08003118 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b088      	sub	sp, #32
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003120:	f107 0310 	add.w	r3, r7, #16
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	605a      	str	r2, [r3, #4]
 800312a:	609a      	str	r2, [r3, #8]
 800312c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a1b      	ldr	r2, [pc, #108]	; (80031a0 <HAL_SPI_MspInit+0x88>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d12f      	bne.n	8003198 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003138:	4b1a      	ldr	r3, [pc, #104]	; (80031a4 <HAL_SPI_MspInit+0x8c>)
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	4a19      	ldr	r2, [pc, #100]	; (80031a4 <HAL_SPI_MspInit+0x8c>)
 800313e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003142:	6193      	str	r3, [r2, #24]
 8003144:	4b17      	ldr	r3, [pc, #92]	; (80031a4 <HAL_SPI_MspInit+0x8c>)
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003150:	4b14      	ldr	r3, [pc, #80]	; (80031a4 <HAL_SPI_MspInit+0x8c>)
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	4a13      	ldr	r2, [pc, #76]	; (80031a4 <HAL_SPI_MspInit+0x8c>)
 8003156:	f043 0304 	orr.w	r3, r3, #4
 800315a:	6193      	str	r3, [r2, #24]
 800315c:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <HAL_SPI_MspInit+0x8c>)
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	60bb      	str	r3, [r7, #8]
 8003166:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SDL_CLK_Pin|SDL_MOSI_Pin;
 8003168:	23a0      	movs	r3, #160	; 0xa0
 800316a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316c:	2302      	movs	r3, #2
 800316e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003170:	2303      	movs	r3, #3
 8003172:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003174:	f107 0310 	add.w	r3, r7, #16
 8003178:	4619      	mov	r1, r3
 800317a:	480b      	ldr	r0, [pc, #44]	; (80031a8 <HAL_SPI_MspInit+0x90>)
 800317c:	f000 ff02 	bl	8003f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDL_MISO_Pin;
 8003180:	2340      	movs	r3, #64	; 0x40
 8003182:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003184:	2300      	movs	r3, #0
 8003186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003188:	2300      	movs	r3, #0
 800318a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(SDL_MISO_GPIO_Port, &GPIO_InitStruct);
 800318c:	f107 0310 	add.w	r3, r7, #16
 8003190:	4619      	mov	r1, r3
 8003192:	4805      	ldr	r0, [pc, #20]	; (80031a8 <HAL_SPI_MspInit+0x90>)
 8003194:	f000 fef6 	bl	8003f84 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003198:	bf00      	nop
 800319a:	3720      	adds	r7, #32
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40013000 	.word	0x40013000
 80031a4:	40021000 	.word	0x40021000
 80031a8:	40010800 	.word	0x40010800

080031ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80031b2:	4b18      	ldr	r3, [pc, #96]	; (8003214 <HAL_MspInit+0x68>)
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	4a17      	ldr	r2, [pc, #92]	; (8003214 <HAL_MspInit+0x68>)
 80031b8:	f043 0301 	orr.w	r3, r3, #1
 80031bc:	6193      	str	r3, [r2, #24]
 80031be:	4b15      	ldr	r3, [pc, #84]	; (8003214 <HAL_MspInit+0x68>)
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	60bb      	str	r3, [r7, #8]
 80031c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031ca:	4b12      	ldr	r3, [pc, #72]	; (8003214 <HAL_MspInit+0x68>)
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	4a11      	ldr	r2, [pc, #68]	; (8003214 <HAL_MspInit+0x68>)
 80031d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031d4:	61d3      	str	r3, [r2, #28]
 80031d6:	4b0f      	ldr	r3, [pc, #60]	; (8003214 <HAL_MspInit+0x68>)
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031de:	607b      	str	r3, [r7, #4]
 80031e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80031e2:	2200      	movs	r2, #0
 80031e4:	210f      	movs	r1, #15
 80031e6:	f06f 0001 	mvn.w	r0, #1
 80031ea:	f000 fea2 	bl	8003f32 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80031ee:	4b0a      	ldr	r3, [pc, #40]	; (8003218 <HAL_MspInit+0x6c>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003202:	60fb      	str	r3, [r7, #12]
 8003204:	4a04      	ldr	r2, [pc, #16]	; (8003218 <HAL_MspInit+0x6c>)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800320a:	bf00      	nop
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40021000 	.word	0x40021000
 8003218:	40010000 	.word	0x40010000

0800321c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003220:	e7fe      	b.n	8003220 <NMI_Handler+0x4>

08003222 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003222:	b480      	push	{r7}
 8003224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003226:	e7fe      	b.n	8003226 <HardFault_Handler+0x4>

08003228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800322c:	e7fe      	b.n	800322c <MemManage_Handler+0x4>

0800322e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800322e:	b480      	push	{r7}
 8003230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003232:	e7fe      	b.n	8003232 <BusFault_Handler+0x4>

08003234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003238:	e7fe      	b.n	8003238 <UsageFault_Handler+0x4>

0800323a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800323a:	b480      	push	{r7}
 800323c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800323e:	bf00      	nop
 8003240:	46bd      	mov	sp, r7
 8003242:	bc80      	pop	{r7}
 8003244:	4770      	bx	lr

08003246 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003246:	b580      	push	{r7, lr}
 8003248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800324a:	f000 fa25 	bl	8003698 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800324e:	f006 fb8f 	bl	8009970 <xTaskGetSchedulerState>
 8003252:	4603      	mov	r3, r0
 8003254:	2b01      	cmp	r3, #1
 8003256:	d001      	beq.n	800325c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003258:	f007 f94e 	bl	800a4f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800325c:	bf00      	nop
 800325e:	bd80      	pop	{r7, pc}

08003260 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  return 1;
 8003264:	2301      	movs	r3, #1
}
 8003266:	4618      	mov	r0, r3
 8003268:	46bd      	mov	sp, r7
 800326a:	bc80      	pop	{r7}
 800326c:	4770      	bx	lr

0800326e <_kill>:

int _kill(int pid, int sig)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b082      	sub	sp, #8
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
 8003276:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003278:	f009 ff7a 	bl	800d170 <__errno>
 800327c:	4603      	mov	r3, r0
 800327e:	2216      	movs	r2, #22
 8003280:	601a      	str	r2, [r3, #0]
  return -1;
 8003282:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003286:	4618      	mov	r0, r3
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <_exit>:

void _exit (int status)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b082      	sub	sp, #8
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003296:	f04f 31ff 	mov.w	r1, #4294967295
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7ff ffe7 	bl	800326e <_kill>
  while (1) {}    /* Make sure we hang here */
 80032a0:	e7fe      	b.n	80032a0 <_exit+0x12>

080032a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b086      	sub	sp, #24
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	60f8      	str	r0, [r7, #12]
 80032aa:	60b9      	str	r1, [r7, #8]
 80032ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032ae:	2300      	movs	r3, #0
 80032b0:	617b      	str	r3, [r7, #20]
 80032b2:	e00a      	b.n	80032ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80032b4:	f3af 8000 	nop.w
 80032b8:	4601      	mov	r1, r0
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	1c5a      	adds	r2, r3, #1
 80032be:	60ba      	str	r2, [r7, #8]
 80032c0:	b2ca      	uxtb	r2, r1
 80032c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	3301      	adds	r3, #1
 80032c8:	617b      	str	r3, [r7, #20]
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	dbf0      	blt.n	80032b4 <_read+0x12>
  }

  return len;
 80032d2:	687b      	ldr	r3, [r7, #4]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032e8:	2300      	movs	r3, #0
 80032ea:	617b      	str	r3, [r7, #20]
 80032ec:	e009      	b.n	8003302 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	1c5a      	adds	r2, r3, #1
 80032f2:	60ba      	str	r2, [r7, #8]
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	3301      	adds	r3, #1
 8003300:	617b      	str	r3, [r7, #20]
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	429a      	cmp	r2, r3
 8003308:	dbf1      	blt.n	80032ee <_write+0x12>
  }
  return len;
 800330a:	687b      	ldr	r3, [r7, #4]
}
 800330c:	4618      	mov	r0, r3
 800330e:	3718      	adds	r7, #24
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <_close>:

int _close(int file)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800331c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003320:	4618      	mov	r0, r3
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	bc80      	pop	{r7}
 8003328:	4770      	bx	lr

0800332a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800332a:	b480      	push	{r7}
 800332c:	b083      	sub	sp, #12
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
 8003332:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800333a:	605a      	str	r2, [r3, #4]
  return 0;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr

08003348 <_isatty>:

int _isatty(int file)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003350:	2301      	movs	r3, #1
}
 8003352:	4618      	mov	r0, r3
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	bc80      	pop	{r7}
 800335a:	4770      	bx	lr

0800335c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr

08003374 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800337c:	4a14      	ldr	r2, [pc, #80]	; (80033d0 <_sbrk+0x5c>)
 800337e:	4b15      	ldr	r3, [pc, #84]	; (80033d4 <_sbrk+0x60>)
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003388:	4b13      	ldr	r3, [pc, #76]	; (80033d8 <_sbrk+0x64>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d102      	bne.n	8003396 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003390:	4b11      	ldr	r3, [pc, #68]	; (80033d8 <_sbrk+0x64>)
 8003392:	4a12      	ldr	r2, [pc, #72]	; (80033dc <_sbrk+0x68>)
 8003394:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003396:	4b10      	ldr	r3, [pc, #64]	; (80033d8 <_sbrk+0x64>)
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4413      	add	r3, r2
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d207      	bcs.n	80033b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033a4:	f009 fee4 	bl	800d170 <__errno>
 80033a8:	4603      	mov	r3, r0
 80033aa:	220c      	movs	r2, #12
 80033ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033ae:	f04f 33ff 	mov.w	r3, #4294967295
 80033b2:	e009      	b.n	80033c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033b4:	4b08      	ldr	r3, [pc, #32]	; (80033d8 <_sbrk+0x64>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033ba:	4b07      	ldr	r3, [pc, #28]	; (80033d8 <_sbrk+0x64>)
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4413      	add	r3, r2
 80033c2:	4a05      	ldr	r2, [pc, #20]	; (80033d8 <_sbrk+0x64>)
 80033c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033c6:	68fb      	ldr	r3, [r7, #12]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	2000c000 	.word	0x2000c000
 80033d4:	00000400 	.word	0x00000400
 80033d8:	200004c8 	.word	0x200004c8
 80033dc:	200034d0 	.word	0x200034d0

080033e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033e4:	bf00      	nop
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bc80      	pop	{r7}
 80033ea:	4770      	bx	lr

080033ec <MX_UART5_Init>:
UART_HandleTypeDef huart5;
UART_HandleTypeDef huart1;

/* UART5 init function */
void MX_UART5_Init(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80033f0:	4b11      	ldr	r3, [pc, #68]	; (8003438 <MX_UART5_Init+0x4c>)
 80033f2:	4a12      	ldr	r2, [pc, #72]	; (800343c <MX_UART5_Init+0x50>)
 80033f4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80033f6:	4b10      	ldr	r3, [pc, #64]	; (8003438 <MX_UART5_Init+0x4c>)
 80033f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80033fc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80033fe:	4b0e      	ldr	r3, [pc, #56]	; (8003438 <MX_UART5_Init+0x4c>)
 8003400:	2200      	movs	r2, #0
 8003402:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003404:	4b0c      	ldr	r3, [pc, #48]	; (8003438 <MX_UART5_Init+0x4c>)
 8003406:	2200      	movs	r2, #0
 8003408:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800340a:	4b0b      	ldr	r3, [pc, #44]	; (8003438 <MX_UART5_Init+0x4c>)
 800340c:	2200      	movs	r2, #0
 800340e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003410:	4b09      	ldr	r3, [pc, #36]	; (8003438 <MX_UART5_Init+0x4c>)
 8003412:	220c      	movs	r2, #12
 8003414:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003416:	4b08      	ldr	r3, [pc, #32]	; (8003438 <MX_UART5_Init+0x4c>)
 8003418:	2200      	movs	r2, #0
 800341a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800341c:	4b06      	ldr	r3, [pc, #24]	; (8003438 <MX_UART5_Init+0x4c>)
 800341e:	2200      	movs	r2, #0
 8003420:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003422:	4805      	ldr	r0, [pc, #20]	; (8003438 <MX_UART5_Init+0x4c>)
 8003424:	f004 f80c 	bl	8007440 <HAL_UART_Init>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800342e:	f7fe fed5 	bl	80021dc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003432:	bf00      	nop
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	200004cc 	.word	0x200004cc
 800343c:	40005000 	.word	0x40005000

08003440 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003444:	4b11      	ldr	r3, [pc, #68]	; (800348c <MX_USART1_UART_Init+0x4c>)
 8003446:	4a12      	ldr	r2, [pc, #72]	; (8003490 <MX_USART1_UART_Init+0x50>)
 8003448:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800344a:	4b10      	ldr	r3, [pc, #64]	; (800348c <MX_USART1_UART_Init+0x4c>)
 800344c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003450:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003452:	4b0e      	ldr	r3, [pc, #56]	; (800348c <MX_USART1_UART_Init+0x4c>)
 8003454:	2200      	movs	r2, #0
 8003456:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003458:	4b0c      	ldr	r3, [pc, #48]	; (800348c <MX_USART1_UART_Init+0x4c>)
 800345a:	2200      	movs	r2, #0
 800345c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800345e:	4b0b      	ldr	r3, [pc, #44]	; (800348c <MX_USART1_UART_Init+0x4c>)
 8003460:	2200      	movs	r2, #0
 8003462:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003464:	4b09      	ldr	r3, [pc, #36]	; (800348c <MX_USART1_UART_Init+0x4c>)
 8003466:	220c      	movs	r2, #12
 8003468:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800346a:	4b08      	ldr	r3, [pc, #32]	; (800348c <MX_USART1_UART_Init+0x4c>)
 800346c:	2200      	movs	r2, #0
 800346e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003470:	4b06      	ldr	r3, [pc, #24]	; (800348c <MX_USART1_UART_Init+0x4c>)
 8003472:	2200      	movs	r2, #0
 8003474:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003476:	4805      	ldr	r0, [pc, #20]	; (800348c <MX_USART1_UART_Init+0x4c>)
 8003478:	f003 ffe2 	bl	8007440 <HAL_UART_Init>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003482:	f7fe feab 	bl	80021dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003486:	bf00      	nop
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	20000514 	.word	0x20000514
 8003490:	40013800 	.word	0x40013800

08003494 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b08c      	sub	sp, #48	; 0x30
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800349c:	f107 0320 	add.w	r3, r7, #32
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	605a      	str	r2, [r3, #4]
 80034a6:	609a      	str	r2, [r3, #8]
 80034a8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==UART5)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a3e      	ldr	r2, [pc, #248]	; (80035a8 <HAL_UART_MspInit+0x114>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d13d      	bne.n	8003530 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80034b4:	4b3d      	ldr	r3, [pc, #244]	; (80035ac <HAL_UART_MspInit+0x118>)
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	4a3c      	ldr	r2, [pc, #240]	; (80035ac <HAL_UART_MspInit+0x118>)
 80034ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034be:	61d3      	str	r3, [r2, #28]
 80034c0:	4b3a      	ldr	r3, [pc, #232]	; (80035ac <HAL_UART_MspInit+0x118>)
 80034c2:	69db      	ldr	r3, [r3, #28]
 80034c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034c8:	61fb      	str	r3, [r7, #28]
 80034ca:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034cc:	4b37      	ldr	r3, [pc, #220]	; (80035ac <HAL_UART_MspInit+0x118>)
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	4a36      	ldr	r2, [pc, #216]	; (80035ac <HAL_UART_MspInit+0x118>)
 80034d2:	f043 0310 	orr.w	r3, r3, #16
 80034d6:	6193      	str	r3, [r2, #24]
 80034d8:	4b34      	ldr	r3, [pc, #208]	; (80035ac <HAL_UART_MspInit+0x118>)
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	f003 0310 	and.w	r3, r3, #16
 80034e0:	61bb      	str	r3, [r7, #24]
 80034e2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034e4:	4b31      	ldr	r3, [pc, #196]	; (80035ac <HAL_UART_MspInit+0x118>)
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	4a30      	ldr	r2, [pc, #192]	; (80035ac <HAL_UART_MspInit+0x118>)
 80034ea:	f043 0320 	orr.w	r3, r3, #32
 80034ee:	6193      	str	r3, [r2, #24]
 80034f0:	4b2e      	ldr	r3, [pc, #184]	; (80035ac <HAL_UART_MspInit+0x118>)
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	f003 0320 	and.w	r3, r3, #32
 80034f8:	617b      	str	r3, [r7, #20]
 80034fa:	697b      	ldr	r3, [r7, #20]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80034fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003502:	2302      	movs	r3, #2
 8003504:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003506:	2303      	movs	r3, #3
 8003508:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800350a:	f107 0320 	add.w	r3, r7, #32
 800350e:	4619      	mov	r1, r3
 8003510:	4827      	ldr	r0, [pc, #156]	; (80035b0 <HAL_UART_MspInit+0x11c>)
 8003512:	f000 fd37 	bl	8003f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003516:	2304      	movs	r3, #4
 8003518:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800351a:	2300      	movs	r3, #0
 800351c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351e:	2300      	movs	r3, #0
 8003520:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003522:	f107 0320 	add.w	r3, r7, #32
 8003526:	4619      	mov	r1, r3
 8003528:	4822      	ldr	r0, [pc, #136]	; (80035b4 <HAL_UART_MspInit+0x120>)
 800352a:	f000 fd2b 	bl	8003f84 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800352e:	e036      	b.n	800359e <HAL_UART_MspInit+0x10a>
  else if(uartHandle->Instance==USART1)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a20      	ldr	r2, [pc, #128]	; (80035b8 <HAL_UART_MspInit+0x124>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d131      	bne.n	800359e <HAL_UART_MspInit+0x10a>
    __HAL_RCC_USART1_CLK_ENABLE();
 800353a:	4b1c      	ldr	r3, [pc, #112]	; (80035ac <HAL_UART_MspInit+0x118>)
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	4a1b      	ldr	r2, [pc, #108]	; (80035ac <HAL_UART_MspInit+0x118>)
 8003540:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003544:	6193      	str	r3, [r2, #24]
 8003546:	4b19      	ldr	r3, [pc, #100]	; (80035ac <HAL_UART_MspInit+0x118>)
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800354e:	613b      	str	r3, [r7, #16]
 8003550:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003552:	4b16      	ldr	r3, [pc, #88]	; (80035ac <HAL_UART_MspInit+0x118>)
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	4a15      	ldr	r2, [pc, #84]	; (80035ac <HAL_UART_MspInit+0x118>)
 8003558:	f043 0304 	orr.w	r3, r3, #4
 800355c:	6193      	str	r3, [r2, #24]
 800355e:	4b13      	ldr	r3, [pc, #76]	; (80035ac <HAL_UART_MspInit+0x118>)
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	f003 0304 	and.w	r3, r3, #4
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RADIO_TX_Pin;
 800356a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800356e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003570:	2302      	movs	r3, #2
 8003572:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003574:	2303      	movs	r3, #3
 8003576:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RADIO_TX_GPIO_Port, &GPIO_InitStruct);
 8003578:	f107 0320 	add.w	r3, r7, #32
 800357c:	4619      	mov	r1, r3
 800357e:	480f      	ldr	r0, [pc, #60]	; (80035bc <HAL_UART_MspInit+0x128>)
 8003580:	f000 fd00 	bl	8003f84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RADIO_RX_Pin;
 8003584:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800358a:	2300      	movs	r3, #0
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358e:	2300      	movs	r3, #0
 8003590:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(RADIO_RX_GPIO_Port, &GPIO_InitStruct);
 8003592:	f107 0320 	add.w	r3, r7, #32
 8003596:	4619      	mov	r1, r3
 8003598:	4808      	ldr	r0, [pc, #32]	; (80035bc <HAL_UART_MspInit+0x128>)
 800359a:	f000 fcf3 	bl	8003f84 <HAL_GPIO_Init>
}
 800359e:	bf00      	nop
 80035a0:	3730      	adds	r7, #48	; 0x30
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	40005000 	.word	0x40005000
 80035ac:	40021000 	.word	0x40021000
 80035b0:	40011000 	.word	0x40011000
 80035b4:	40011400 	.word	0x40011400
 80035b8:	40013800 	.word	0x40013800
 80035bc:	40010800 	.word	0x40010800

080035c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80035c0:	f7ff ff0e 	bl	80033e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035c4:	480b      	ldr	r0, [pc, #44]	; (80035f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80035c6:	490c      	ldr	r1, [pc, #48]	; (80035f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80035c8:	4a0c      	ldr	r2, [pc, #48]	; (80035fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80035ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035cc:	e002      	b.n	80035d4 <LoopCopyDataInit>

080035ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035d2:	3304      	adds	r3, #4

080035d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035d8:	d3f9      	bcc.n	80035ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035da:	4a09      	ldr	r2, [pc, #36]	; (8003600 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80035dc:	4c09      	ldr	r4, [pc, #36]	; (8003604 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80035de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80035e0:	e001      	b.n	80035e6 <LoopFillZerobss>

080035e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80035e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80035e4:	3204      	adds	r2, #4

080035e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80035e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80035e8:	d3fb      	bcc.n	80035e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80035ea:	f009 fdc7 	bl	800d17c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80035ee:	f7fe fd73 	bl	80020d8 <main>
  bx lr
 80035f2:	4770      	bx	lr
  ldr r0, =_sdata
 80035f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80035f8:	20000240 	.word	0x20000240
  ldr r2, =_sidata
 80035fc:	08010cc4 	.word	0x08010cc4
  ldr r2, =_sbss
 8003600:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8003604:	200034d0 	.word	0x200034d0

08003608 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003608:	e7fe      	b.n	8003608 <ADC1_2_IRQHandler>
	...

0800360c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003610:	4b08      	ldr	r3, [pc, #32]	; (8003634 <HAL_Init+0x28>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a07      	ldr	r2, [pc, #28]	; (8003634 <HAL_Init+0x28>)
 8003616:	f043 0310 	orr.w	r3, r3, #16
 800361a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800361c:	2003      	movs	r0, #3
 800361e:	f000 fc7d 	bl	8003f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003622:	200f      	movs	r0, #15
 8003624:	f000 f808 	bl	8003638 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003628:	f7ff fdc0 	bl	80031ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	40022000 	.word	0x40022000

08003638 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003640:	4b12      	ldr	r3, [pc, #72]	; (800368c <HAL_InitTick+0x54>)
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	4b12      	ldr	r3, [pc, #72]	; (8003690 <HAL_InitTick+0x58>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	4619      	mov	r1, r3
 800364a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800364e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003652:	fbb2 f3f3 	udiv	r3, r2, r3
 8003656:	4618      	mov	r0, r3
 8003658:	f000 fc87 	bl	8003f6a <HAL_SYSTICK_Config>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e00e      	b.n	8003684 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b0f      	cmp	r3, #15
 800366a:	d80a      	bhi.n	8003682 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800366c:	2200      	movs	r2, #0
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	f04f 30ff 	mov.w	r0, #4294967295
 8003674:	f000 fc5d 	bl	8003f32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003678:	4a06      	ldr	r2, [pc, #24]	; (8003694 <HAL_InitTick+0x5c>)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	e000      	b.n	8003684 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
}
 8003684:	4618      	mov	r0, r3
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	20000004 	.word	0x20000004
 8003690:	2000000c 	.word	0x2000000c
 8003694:	20000008 	.word	0x20000008

08003698 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800369c:	4b05      	ldr	r3, [pc, #20]	; (80036b4 <HAL_IncTick+0x1c>)
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	461a      	mov	r2, r3
 80036a2:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <HAL_IncTick+0x20>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4413      	add	r3, r2
 80036a8:	4a03      	ldr	r2, [pc, #12]	; (80036b8 <HAL_IncTick+0x20>)
 80036aa:	6013      	str	r3, [r2, #0]
}
 80036ac:	bf00      	nop
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr
 80036b4:	2000000c 	.word	0x2000000c
 80036b8:	2000055c 	.word	0x2000055c

080036bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  return uwTick;
 80036c0:	4b02      	ldr	r3, [pc, #8]	; (80036cc <HAL_GetTick+0x10>)
 80036c2:	681b      	ldr	r3, [r3, #0]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bc80      	pop	{r7}
 80036ca:	4770      	bx	lr
 80036cc:	2000055c 	.word	0x2000055c

080036d0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e0ed      	b.n	80038be <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d102      	bne.n	80036f4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7fd fe0c 	bl	800130c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0201 	orr.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003704:	f7ff ffda 	bl	80036bc <HAL_GetTick>
 8003708:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800370a:	e012      	b.n	8003732 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800370c:	f7ff ffd6 	bl	80036bc <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b0a      	cmp	r3, #10
 8003718:	d90b      	bls.n	8003732 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2205      	movs	r2, #5
 800372a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e0c5      	b.n	80038be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0e5      	beq.n	800370c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0202 	bic.w	r2, r2, #2
 800374e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003750:	f7ff ffb4 	bl	80036bc <HAL_GetTick>
 8003754:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003756:	e012      	b.n	800377e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003758:	f7ff ffb0 	bl	80036bc <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b0a      	cmp	r3, #10
 8003764:	d90b      	bls.n	800377e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2205      	movs	r2, #5
 8003776:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e09f      	b.n	80038be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1e5      	bne.n	8003758 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	7e1b      	ldrb	r3, [r3, #24]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d108      	bne.n	80037a6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	e007      	b.n	80037b6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	7e5b      	ldrb	r3, [r3, #25]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d108      	bne.n	80037d0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037cc:	601a      	str	r2, [r3, #0]
 80037ce:	e007      	b.n	80037e0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037de:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	7e9b      	ldrb	r3, [r3, #26]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d108      	bne.n	80037fa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0220 	orr.w	r2, r2, #32
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	e007      	b.n	800380a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 0220 	bic.w	r2, r2, #32
 8003808:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	7edb      	ldrb	r3, [r3, #27]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d108      	bne.n	8003824 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0210 	bic.w	r2, r2, #16
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	e007      	b.n	8003834 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0210 	orr.w	r2, r2, #16
 8003832:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	7f1b      	ldrb	r3, [r3, #28]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d108      	bne.n	800384e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f042 0208 	orr.w	r2, r2, #8
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	e007      	b.n	800385e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0208 	bic.w	r2, r2, #8
 800385c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	7f5b      	ldrb	r3, [r3, #29]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d108      	bne.n	8003878 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f042 0204 	orr.w	r2, r2, #4
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	e007      	b.n	8003888 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 0204 	bic.w	r2, r2, #4
 8003886:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	431a      	orrs	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	431a      	orrs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	ea42 0103 	orr.w	r1, r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	1e5a      	subs	r2, r3, #1
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	430a      	orrs	r2, r1
 80038ac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b087      	sub	sp, #28
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
 80038ce:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038dc:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80038de:	7cfb      	ldrb	r3, [r7, #19]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d003      	beq.n	80038ec <HAL_CAN_ConfigFilter+0x26>
 80038e4:	7cfb      	ldrb	r3, [r7, #19]
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	f040 80aa 	bne.w	8003a40 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80038f2:	f043 0201 	orr.w	r2, r3, #1
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	f003 031f 	and.w	r3, r3, #31
 8003904:	2201      	movs	r2, #1
 8003906:	fa02 f303 	lsl.w	r3, r2, r3
 800390a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	43db      	mvns	r3, r3
 8003916:	401a      	ands	r2, r3
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d123      	bne.n	800396e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	43db      	mvns	r3, r3
 8003930:	401a      	ands	r2, r3
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003948:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	3248      	adds	r2, #72	; 0x48
 800394e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003962:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003964:	6979      	ldr	r1, [r7, #20]
 8003966:	3348      	adds	r3, #72	; 0x48
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	440b      	add	r3, r1
 800396c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d122      	bne.n	80039bc <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	431a      	orrs	r2, r3
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003996:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	3248      	adds	r2, #72	; 0x48
 800399c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80039b0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80039b2:	6979      	ldr	r1, [r7, #20]
 80039b4:	3348      	adds	r3, #72	; 0x48
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	440b      	add	r3, r1
 80039ba:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d109      	bne.n	80039d8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	43db      	mvns	r3, r3
 80039ce:	401a      	ands	r2, r3
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80039d6:	e007      	b.n	80039e8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	431a      	orrs	r2, r3
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d109      	bne.n	8003a04 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	43db      	mvns	r3, r3
 80039fa:	401a      	ands	r2, r3
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003a02:	e007      	b.n	8003a14 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d107      	bne.n	8003a2c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	431a      	orrs	r2, r3
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003a32:	f023 0201 	bic.w	r2, r3, #1
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	e006      	b.n	8003a4e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a44:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
  }
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	371c      	adds	r7, #28
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bc80      	pop	{r7}
 8003a56:	4770      	bx	lr

08003a58 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d12e      	bne.n	8003aca <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 0201 	bic.w	r2, r2, #1
 8003a82:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003a84:	f7ff fe1a 	bl	80036bc <HAL_GetTick>
 8003a88:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003a8a:	e012      	b.n	8003ab2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a8c:	f7ff fe16 	bl	80036bc <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b0a      	cmp	r3, #10
 8003a98:	d90b      	bls.n	8003ab2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2205      	movs	r2, #5
 8003aaa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e012      	b.n	8003ad8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1e5      	bne.n	8003a8c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	e006      	b.n	8003ad8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ace:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
  }
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b087      	sub	sp, #28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
 8003aec:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003af4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003af6:	7dfb      	ldrb	r3, [r7, #23]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d003      	beq.n	8003b04 <HAL_CAN_GetRxMessage+0x24>
 8003afc:	7dfb      	ldrb	r3, [r7, #23]
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	f040 8103 	bne.w	8003d0a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10e      	bne.n	8003b28 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	f003 0303 	and.w	r3, r3, #3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d116      	bne.n	8003b46 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e0f7      	b.n	8003d18 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	f003 0303 	and.w	r3, r3, #3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d107      	bne.n	8003b46 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e0e8      	b.n	8003d18 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	331b      	adds	r3, #27
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	4413      	add	r3, r2
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0204 	and.w	r2, r3, #4
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d10c      	bne.n	8003b7e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	331b      	adds	r3, #27
 8003b6c:	011b      	lsls	r3, r3, #4
 8003b6e:	4413      	add	r3, r2
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	0d5b      	lsrs	r3, r3, #21
 8003b74:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	e00b      	b.n	8003b96 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	331b      	adds	r3, #27
 8003b86:	011b      	lsls	r3, r3, #4
 8003b88:	4413      	add	r3, r2
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	08db      	lsrs	r3, r3, #3
 8003b8e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	331b      	adds	r3, #27
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	4413      	add	r3, r2
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0202 	and.w	r2, r3, #2
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	331b      	adds	r3, #27
 8003bb4:	011b      	lsls	r3, r3, #4
 8003bb6:	4413      	add	r3, r2
 8003bb8:	3304      	adds	r3, #4
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0308 	and.w	r3, r3, #8
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2208      	movs	r2, #8
 8003bc8:	611a      	str	r2, [r3, #16]
 8003bca:	e00b      	b.n	8003be4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	331b      	adds	r3, #27
 8003bd4:	011b      	lsls	r3, r3, #4
 8003bd6:	4413      	add	r3, r2
 8003bd8:	3304      	adds	r3, #4
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 020f 	and.w	r2, r3, #15
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	331b      	adds	r3, #27
 8003bec:	011b      	lsls	r3, r3, #4
 8003bee:	4413      	add	r3, r2
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	0a1b      	lsrs	r3, r3, #8
 8003bf6:	b2da      	uxtb	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	331b      	adds	r3, #27
 8003c04:	011b      	lsls	r3, r3, #4
 8003c06:	4413      	add	r3, r2
 8003c08:	3304      	adds	r3, #4
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	0c1b      	lsrs	r3, r3, #16
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	4413      	add	r3, r2
 8003c1e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	011b      	lsls	r3, r3, #4
 8003c32:	4413      	add	r3, r2
 8003c34:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	0a1a      	lsrs	r2, r3, #8
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	b2d2      	uxtb	r2, r2
 8003c42:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	011b      	lsls	r3, r3, #4
 8003c4c:	4413      	add	r3, r2
 8003c4e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	0c1a      	lsrs	r2, r3, #16
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	3302      	adds	r3, #2
 8003c5a:	b2d2      	uxtb	r2, r2
 8003c5c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	011b      	lsls	r3, r3, #4
 8003c66:	4413      	add	r3, r2
 8003c68:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	0e1a      	lsrs	r2, r3, #24
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	3303      	adds	r3, #3
 8003c74:	b2d2      	uxtb	r2, r2
 8003c76:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	011b      	lsls	r3, r3, #4
 8003c80:	4413      	add	r3, r2
 8003c82:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	3304      	adds	r3, #4
 8003c8c:	b2d2      	uxtb	r2, r2
 8003c8e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	011b      	lsls	r3, r3, #4
 8003c98:	4413      	add	r3, r2
 8003c9a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	0a1a      	lsrs	r2, r3, #8
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	3305      	adds	r3, #5
 8003ca6:	b2d2      	uxtb	r2, r2
 8003ca8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	011b      	lsls	r3, r3, #4
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	0c1a      	lsrs	r2, r3, #16
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	3306      	adds	r3, #6
 8003cc0:	b2d2      	uxtb	r2, r2
 8003cc2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	011b      	lsls	r3, r3, #4
 8003ccc:	4413      	add	r3, r2
 8003cce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	0e1a      	lsrs	r2, r3, #24
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	3307      	adds	r3, #7
 8003cda:	b2d2      	uxtb	r2, r2
 8003cdc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d108      	bne.n	8003cf6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68da      	ldr	r2, [r3, #12]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 0220 	orr.w	r2, r2, #32
 8003cf2:	60da      	str	r2, [r3, #12]
 8003cf4:	e007      	b.n	8003d06 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	691a      	ldr	r2, [r3, #16]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f042 0220 	orr.w	r2, r2, #32
 8003d04:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003d06:	2300      	movs	r3, #0
 8003d08:	e006      	b.n	8003d18 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
  }
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	371c      	adds	r7, #28
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bc80      	pop	{r7}
 8003d20:	4770      	bx	lr

08003d22 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8003d22:	b480      	push	{r7}
 8003d24:	b085      	sub	sp, #20
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
 8003d2a:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d36:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003d38:	7afb      	ldrb	r3, [r7, #11]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d002      	beq.n	8003d44 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8003d3e:	7afb      	ldrb	r3, [r7, #11]
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d10f      	bne.n	8003d64 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d106      	bne.n	8003d58 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f003 0303 	and.w	r3, r3, #3
 8003d54:	60fb      	str	r3, [r7, #12]
 8003d56:	e005      	b.n	8003d64 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8003d64:	68fb      	ldr	r3, [r7, #12]
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3714      	adds	r7, #20
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bc80      	pop	{r7}
 8003d6e:	4770      	bx	lr

08003d70 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d80:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003d82:	7bfb      	ldrb	r3, [r7, #15]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d002      	beq.n	8003d8e <HAL_CAN_ActivateNotification+0x1e>
 8003d88:	7bfb      	ldrb	r3, [r7, #15]
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d109      	bne.n	8003da2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6959      	ldr	r1, [r3, #20]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	e006      	b.n	8003db0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
  }
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3714      	adds	r7, #20
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bc80      	pop	{r7}
 8003db8:	4770      	bx	lr
	...

08003dbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f003 0307 	and.w	r3, r3, #7
 8003dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dcc:	4b0c      	ldr	r3, [pc, #48]	; (8003e00 <__NVIC_SetPriorityGrouping+0x44>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003dd8:	4013      	ands	r3, r2
 8003dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003de4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dee:	4a04      	ldr	r2, [pc, #16]	; (8003e00 <__NVIC_SetPriorityGrouping+0x44>)
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	60d3      	str	r3, [r2, #12]
}
 8003df4:	bf00      	nop
 8003df6:	3714      	adds	r7, #20
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bc80      	pop	{r7}
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	e000ed00 	.word	0xe000ed00

08003e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e08:	4b04      	ldr	r3, [pc, #16]	; (8003e1c <__NVIC_GetPriorityGrouping+0x18>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	0a1b      	lsrs	r3, r3, #8
 8003e0e:	f003 0307 	and.w	r3, r3, #7
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bc80      	pop	{r7}
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	e000ed00 	.word	0xe000ed00

08003e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	4603      	mov	r3, r0
 8003e28:	6039      	str	r1, [r7, #0]
 8003e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	db0a      	blt.n	8003e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	b2da      	uxtb	r2, r3
 8003e38:	490c      	ldr	r1, [pc, #48]	; (8003e6c <__NVIC_SetPriority+0x4c>)
 8003e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e3e:	0112      	lsls	r2, r2, #4
 8003e40:	b2d2      	uxtb	r2, r2
 8003e42:	440b      	add	r3, r1
 8003e44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e48:	e00a      	b.n	8003e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	4908      	ldr	r1, [pc, #32]	; (8003e70 <__NVIC_SetPriority+0x50>)
 8003e50:	79fb      	ldrb	r3, [r7, #7]
 8003e52:	f003 030f 	and.w	r3, r3, #15
 8003e56:	3b04      	subs	r3, #4
 8003e58:	0112      	lsls	r2, r2, #4
 8003e5a:	b2d2      	uxtb	r2, r2
 8003e5c:	440b      	add	r3, r1
 8003e5e:	761a      	strb	r2, [r3, #24]
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bc80      	pop	{r7}
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	e000e100 	.word	0xe000e100
 8003e70:	e000ed00 	.word	0xe000ed00

08003e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b089      	sub	sp, #36	; 0x24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f003 0307 	and.w	r3, r3, #7
 8003e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	f1c3 0307 	rsb	r3, r3, #7
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	bf28      	it	cs
 8003e92:	2304      	movcs	r3, #4
 8003e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	3304      	adds	r3, #4
 8003e9a:	2b06      	cmp	r3, #6
 8003e9c:	d902      	bls.n	8003ea4 <NVIC_EncodePriority+0x30>
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	3b03      	subs	r3, #3
 8003ea2:	e000      	b.n	8003ea6 <NVIC_EncodePriority+0x32>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	43da      	mvns	r2, r3
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	401a      	ands	r2, r3
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec6:	43d9      	mvns	r1, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ecc:	4313      	orrs	r3, r2
         );
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3724      	adds	r7, #36	; 0x24
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bc80      	pop	{r7}
 8003ed6:	4770      	bx	lr

08003ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ee8:	d301      	bcc.n	8003eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003eea:	2301      	movs	r3, #1
 8003eec:	e00f      	b.n	8003f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eee:	4a0a      	ldr	r2, [pc, #40]	; (8003f18 <SysTick_Config+0x40>)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ef6:	210f      	movs	r1, #15
 8003ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8003efc:	f7ff ff90 	bl	8003e20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f00:	4b05      	ldr	r3, [pc, #20]	; (8003f18 <SysTick_Config+0x40>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f06:	4b04      	ldr	r3, [pc, #16]	; (8003f18 <SysTick_Config+0x40>)
 8003f08:	2207      	movs	r2, #7
 8003f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	e000e010 	.word	0xe000e010

08003f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f7ff ff49 	bl	8003dbc <__NVIC_SetPriorityGrouping>
}
 8003f2a:	bf00      	nop
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b086      	sub	sp, #24
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	4603      	mov	r3, r0
 8003f3a:	60b9      	str	r1, [r7, #8]
 8003f3c:	607a      	str	r2, [r7, #4]
 8003f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f40:	2300      	movs	r3, #0
 8003f42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f44:	f7ff ff5e 	bl	8003e04 <__NVIC_GetPriorityGrouping>
 8003f48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	68b9      	ldr	r1, [r7, #8]
 8003f4e:	6978      	ldr	r0, [r7, #20]
 8003f50:	f7ff ff90 	bl	8003e74 <NVIC_EncodePriority>
 8003f54:	4602      	mov	r2, r0
 8003f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f5a:	4611      	mov	r1, r2
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff ff5f 	bl	8003e20 <__NVIC_SetPriority>
}
 8003f62:	bf00      	nop
 8003f64:	3718      	adds	r7, #24
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b082      	sub	sp, #8
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7ff ffb0 	bl	8003ed8 <SysTick_Config>
 8003f78:	4603      	mov	r3, r0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
	...

08003f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b08b      	sub	sp, #44	; 0x2c
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003f92:	2300      	movs	r3, #0
 8003f94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f96:	e179      	b.n	800428c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003f98:	2201      	movs	r2, #1
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	69fa      	ldr	r2, [r7, #28]
 8003fa8:	4013      	ands	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	f040 8168 	bne.w	8004286 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	4a96      	ldr	r2, [pc, #600]	; (8004214 <HAL_GPIO_Init+0x290>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d05e      	beq.n	800407e <HAL_GPIO_Init+0xfa>
 8003fc0:	4a94      	ldr	r2, [pc, #592]	; (8004214 <HAL_GPIO_Init+0x290>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d875      	bhi.n	80040b2 <HAL_GPIO_Init+0x12e>
 8003fc6:	4a94      	ldr	r2, [pc, #592]	; (8004218 <HAL_GPIO_Init+0x294>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d058      	beq.n	800407e <HAL_GPIO_Init+0xfa>
 8003fcc:	4a92      	ldr	r2, [pc, #584]	; (8004218 <HAL_GPIO_Init+0x294>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d86f      	bhi.n	80040b2 <HAL_GPIO_Init+0x12e>
 8003fd2:	4a92      	ldr	r2, [pc, #584]	; (800421c <HAL_GPIO_Init+0x298>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d052      	beq.n	800407e <HAL_GPIO_Init+0xfa>
 8003fd8:	4a90      	ldr	r2, [pc, #576]	; (800421c <HAL_GPIO_Init+0x298>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d869      	bhi.n	80040b2 <HAL_GPIO_Init+0x12e>
 8003fde:	4a90      	ldr	r2, [pc, #576]	; (8004220 <HAL_GPIO_Init+0x29c>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d04c      	beq.n	800407e <HAL_GPIO_Init+0xfa>
 8003fe4:	4a8e      	ldr	r2, [pc, #568]	; (8004220 <HAL_GPIO_Init+0x29c>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d863      	bhi.n	80040b2 <HAL_GPIO_Init+0x12e>
 8003fea:	4a8e      	ldr	r2, [pc, #568]	; (8004224 <HAL_GPIO_Init+0x2a0>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d046      	beq.n	800407e <HAL_GPIO_Init+0xfa>
 8003ff0:	4a8c      	ldr	r2, [pc, #560]	; (8004224 <HAL_GPIO_Init+0x2a0>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d85d      	bhi.n	80040b2 <HAL_GPIO_Init+0x12e>
 8003ff6:	2b12      	cmp	r3, #18
 8003ff8:	d82a      	bhi.n	8004050 <HAL_GPIO_Init+0xcc>
 8003ffa:	2b12      	cmp	r3, #18
 8003ffc:	d859      	bhi.n	80040b2 <HAL_GPIO_Init+0x12e>
 8003ffe:	a201      	add	r2, pc, #4	; (adr r2, 8004004 <HAL_GPIO_Init+0x80>)
 8004000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004004:	0800407f 	.word	0x0800407f
 8004008:	08004059 	.word	0x08004059
 800400c:	0800406b 	.word	0x0800406b
 8004010:	080040ad 	.word	0x080040ad
 8004014:	080040b3 	.word	0x080040b3
 8004018:	080040b3 	.word	0x080040b3
 800401c:	080040b3 	.word	0x080040b3
 8004020:	080040b3 	.word	0x080040b3
 8004024:	080040b3 	.word	0x080040b3
 8004028:	080040b3 	.word	0x080040b3
 800402c:	080040b3 	.word	0x080040b3
 8004030:	080040b3 	.word	0x080040b3
 8004034:	080040b3 	.word	0x080040b3
 8004038:	080040b3 	.word	0x080040b3
 800403c:	080040b3 	.word	0x080040b3
 8004040:	080040b3 	.word	0x080040b3
 8004044:	080040b3 	.word	0x080040b3
 8004048:	08004061 	.word	0x08004061
 800404c:	08004075 	.word	0x08004075
 8004050:	4a75      	ldr	r2, [pc, #468]	; (8004228 <HAL_GPIO_Init+0x2a4>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d013      	beq.n	800407e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004056:	e02c      	b.n	80040b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	623b      	str	r3, [r7, #32]
          break;
 800405e:	e029      	b.n	80040b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	3304      	adds	r3, #4
 8004066:	623b      	str	r3, [r7, #32]
          break;
 8004068:	e024      	b.n	80040b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	3308      	adds	r3, #8
 8004070:	623b      	str	r3, [r7, #32]
          break;
 8004072:	e01f      	b.n	80040b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	330c      	adds	r3, #12
 800407a:	623b      	str	r3, [r7, #32]
          break;
 800407c:	e01a      	b.n	80040b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d102      	bne.n	800408c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004086:	2304      	movs	r3, #4
 8004088:	623b      	str	r3, [r7, #32]
          break;
 800408a:	e013      	b.n	80040b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d105      	bne.n	80040a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004094:	2308      	movs	r3, #8
 8004096:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	69fa      	ldr	r2, [r7, #28]
 800409c:	611a      	str	r2, [r3, #16]
          break;
 800409e:	e009      	b.n	80040b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80040a0:	2308      	movs	r3, #8
 80040a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	69fa      	ldr	r2, [r7, #28]
 80040a8:	615a      	str	r2, [r3, #20]
          break;
 80040aa:	e003      	b.n	80040b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80040ac:	2300      	movs	r3, #0
 80040ae:	623b      	str	r3, [r7, #32]
          break;
 80040b0:	e000      	b.n	80040b4 <HAL_GPIO_Init+0x130>
          break;
 80040b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	2bff      	cmp	r3, #255	; 0xff
 80040b8:	d801      	bhi.n	80040be <HAL_GPIO_Init+0x13a>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	e001      	b.n	80040c2 <HAL_GPIO_Init+0x13e>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	3304      	adds	r3, #4
 80040c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	2bff      	cmp	r3, #255	; 0xff
 80040c8:	d802      	bhi.n	80040d0 <HAL_GPIO_Init+0x14c>
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	e002      	b.n	80040d6 <HAL_GPIO_Init+0x152>
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	3b08      	subs	r3, #8
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	210f      	movs	r1, #15
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	fa01 f303 	lsl.w	r3, r1, r3
 80040e4:	43db      	mvns	r3, r3
 80040e6:	401a      	ands	r2, r3
 80040e8:	6a39      	ldr	r1, [r7, #32]
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	fa01 f303 	lsl.w	r3, r1, r3
 80040f0:	431a      	orrs	r2, r3
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f000 80c1 	beq.w	8004286 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004104:	4b49      	ldr	r3, [pc, #292]	; (800422c <HAL_GPIO_Init+0x2a8>)
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	4a48      	ldr	r2, [pc, #288]	; (800422c <HAL_GPIO_Init+0x2a8>)
 800410a:	f043 0301 	orr.w	r3, r3, #1
 800410e:	6193      	str	r3, [r2, #24]
 8004110:	4b46      	ldr	r3, [pc, #280]	; (800422c <HAL_GPIO_Init+0x2a8>)
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	60bb      	str	r3, [r7, #8]
 800411a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800411c:	4a44      	ldr	r2, [pc, #272]	; (8004230 <HAL_GPIO_Init+0x2ac>)
 800411e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004120:	089b      	lsrs	r3, r3, #2
 8004122:	3302      	adds	r3, #2
 8004124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004128:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	f003 0303 	and.w	r3, r3, #3
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	220f      	movs	r2, #15
 8004134:	fa02 f303 	lsl.w	r3, r2, r3
 8004138:	43db      	mvns	r3, r3
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	4013      	ands	r3, r2
 800413e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a3c      	ldr	r2, [pc, #240]	; (8004234 <HAL_GPIO_Init+0x2b0>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d01f      	beq.n	8004188 <HAL_GPIO_Init+0x204>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a3b      	ldr	r2, [pc, #236]	; (8004238 <HAL_GPIO_Init+0x2b4>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d019      	beq.n	8004184 <HAL_GPIO_Init+0x200>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a3a      	ldr	r2, [pc, #232]	; (800423c <HAL_GPIO_Init+0x2b8>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d013      	beq.n	8004180 <HAL_GPIO_Init+0x1fc>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a39      	ldr	r2, [pc, #228]	; (8004240 <HAL_GPIO_Init+0x2bc>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d00d      	beq.n	800417c <HAL_GPIO_Init+0x1f8>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a38      	ldr	r2, [pc, #224]	; (8004244 <HAL_GPIO_Init+0x2c0>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d007      	beq.n	8004178 <HAL_GPIO_Init+0x1f4>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	4a37      	ldr	r2, [pc, #220]	; (8004248 <HAL_GPIO_Init+0x2c4>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d101      	bne.n	8004174 <HAL_GPIO_Init+0x1f0>
 8004170:	2305      	movs	r3, #5
 8004172:	e00a      	b.n	800418a <HAL_GPIO_Init+0x206>
 8004174:	2306      	movs	r3, #6
 8004176:	e008      	b.n	800418a <HAL_GPIO_Init+0x206>
 8004178:	2304      	movs	r3, #4
 800417a:	e006      	b.n	800418a <HAL_GPIO_Init+0x206>
 800417c:	2303      	movs	r3, #3
 800417e:	e004      	b.n	800418a <HAL_GPIO_Init+0x206>
 8004180:	2302      	movs	r3, #2
 8004182:	e002      	b.n	800418a <HAL_GPIO_Init+0x206>
 8004184:	2301      	movs	r3, #1
 8004186:	e000      	b.n	800418a <HAL_GPIO_Init+0x206>
 8004188:	2300      	movs	r3, #0
 800418a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800418c:	f002 0203 	and.w	r2, r2, #3
 8004190:	0092      	lsls	r2, r2, #2
 8004192:	4093      	lsls	r3, r2
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	4313      	orrs	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800419a:	4925      	ldr	r1, [pc, #148]	; (8004230 <HAL_GPIO_Init+0x2ac>)
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	089b      	lsrs	r3, r3, #2
 80041a0:	3302      	adds	r3, #2
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d006      	beq.n	80041c2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80041b4:	4b25      	ldr	r3, [pc, #148]	; (800424c <HAL_GPIO_Init+0x2c8>)
 80041b6:	689a      	ldr	r2, [r3, #8]
 80041b8:	4924      	ldr	r1, [pc, #144]	; (800424c <HAL_GPIO_Init+0x2c8>)
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	4313      	orrs	r3, r2
 80041be:	608b      	str	r3, [r1, #8]
 80041c0:	e006      	b.n	80041d0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80041c2:	4b22      	ldr	r3, [pc, #136]	; (800424c <HAL_GPIO_Init+0x2c8>)
 80041c4:	689a      	ldr	r2, [r3, #8]
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	43db      	mvns	r3, r3
 80041ca:	4920      	ldr	r1, [pc, #128]	; (800424c <HAL_GPIO_Init+0x2c8>)
 80041cc:	4013      	ands	r3, r2
 80041ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d006      	beq.n	80041ea <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80041dc:	4b1b      	ldr	r3, [pc, #108]	; (800424c <HAL_GPIO_Init+0x2c8>)
 80041de:	68da      	ldr	r2, [r3, #12]
 80041e0:	491a      	ldr	r1, [pc, #104]	; (800424c <HAL_GPIO_Init+0x2c8>)
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	60cb      	str	r3, [r1, #12]
 80041e8:	e006      	b.n	80041f8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80041ea:	4b18      	ldr	r3, [pc, #96]	; (800424c <HAL_GPIO_Init+0x2c8>)
 80041ec:	68da      	ldr	r2, [r3, #12]
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	43db      	mvns	r3, r3
 80041f2:	4916      	ldr	r1, [pc, #88]	; (800424c <HAL_GPIO_Init+0x2c8>)
 80041f4:	4013      	ands	r3, r2
 80041f6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d025      	beq.n	8004250 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004204:	4b11      	ldr	r3, [pc, #68]	; (800424c <HAL_GPIO_Init+0x2c8>)
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	4910      	ldr	r1, [pc, #64]	; (800424c <HAL_GPIO_Init+0x2c8>)
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	4313      	orrs	r3, r2
 800420e:	604b      	str	r3, [r1, #4]
 8004210:	e025      	b.n	800425e <HAL_GPIO_Init+0x2da>
 8004212:	bf00      	nop
 8004214:	10320000 	.word	0x10320000
 8004218:	10310000 	.word	0x10310000
 800421c:	10220000 	.word	0x10220000
 8004220:	10210000 	.word	0x10210000
 8004224:	10120000 	.word	0x10120000
 8004228:	10110000 	.word	0x10110000
 800422c:	40021000 	.word	0x40021000
 8004230:	40010000 	.word	0x40010000
 8004234:	40010800 	.word	0x40010800
 8004238:	40010c00 	.word	0x40010c00
 800423c:	40011000 	.word	0x40011000
 8004240:	40011400 	.word	0x40011400
 8004244:	40011800 	.word	0x40011800
 8004248:	40011c00 	.word	0x40011c00
 800424c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004250:	4b15      	ldr	r3, [pc, #84]	; (80042a8 <HAL_GPIO_Init+0x324>)
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	43db      	mvns	r3, r3
 8004258:	4913      	ldr	r1, [pc, #76]	; (80042a8 <HAL_GPIO_Init+0x324>)
 800425a:	4013      	ands	r3, r2
 800425c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d006      	beq.n	8004278 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800426a:	4b0f      	ldr	r3, [pc, #60]	; (80042a8 <HAL_GPIO_Init+0x324>)
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	490e      	ldr	r1, [pc, #56]	; (80042a8 <HAL_GPIO_Init+0x324>)
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	4313      	orrs	r3, r2
 8004274:	600b      	str	r3, [r1, #0]
 8004276:	e006      	b.n	8004286 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004278:	4b0b      	ldr	r3, [pc, #44]	; (80042a8 <HAL_GPIO_Init+0x324>)
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	43db      	mvns	r3, r3
 8004280:	4909      	ldr	r1, [pc, #36]	; (80042a8 <HAL_GPIO_Init+0x324>)
 8004282:	4013      	ands	r3, r2
 8004284:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004288:	3301      	adds	r3, #1
 800428a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	fa22 f303 	lsr.w	r3, r2, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	f47f ae7e 	bne.w	8003f98 <HAL_GPIO_Init+0x14>
  }
}
 800429c:	bf00      	nop
 800429e:	bf00      	nop
 80042a0:	372c      	adds	r7, #44	; 0x2c
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bc80      	pop	{r7}
 80042a6:	4770      	bx	lr
 80042a8:	40010400 	.word	0x40010400

080042ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	460b      	mov	r3, r1
 80042b6:	807b      	strh	r3, [r7, #2]
 80042b8:	4613      	mov	r3, r2
 80042ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80042bc:	787b      	ldrb	r3, [r7, #1]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d003      	beq.n	80042ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042c2:	887a      	ldrh	r2, [r7, #2]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80042c8:	e003      	b.n	80042d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80042ca:	887b      	ldrh	r3, [r7, #2]
 80042cc:	041a      	lsls	r2, r3, #16
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	611a      	str	r2, [r3, #16]
}
 80042d2:	bf00      	nop
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bc80      	pop	{r7}
 80042da:	4770      	bx	lr

080042dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	460b      	mov	r3, r1
 80042e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80042ee:	887a      	ldrh	r2, [r7, #2]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	4013      	ands	r3, r2
 80042f4:	041a      	lsls	r2, r3, #16
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	43d9      	mvns	r1, r3
 80042fa:	887b      	ldrh	r3, [r7, #2]
 80042fc:	400b      	ands	r3, r1
 80042fe:	431a      	orrs	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	611a      	str	r2, [r3, #16]
}
 8004304:	bf00      	nop
 8004306:	3714      	adds	r7, #20
 8004308:	46bd      	mov	sp, r7
 800430a:	bc80      	pop	{r7}
 800430c:	4770      	bx	lr
	...

08004310 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e12b      	b.n	800457a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d106      	bne.n	800433c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f7fd fd4c 	bl	8001dd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2224      	movs	r2, #36	; 0x24
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 0201 	bic.w	r2, r2, #1
 8004352:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004362:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004372:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004374:	f002 f864 	bl	8006440 <HAL_RCC_GetPCLK1Freq>
 8004378:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	4a81      	ldr	r2, [pc, #516]	; (8004584 <HAL_I2C_Init+0x274>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d807      	bhi.n	8004394 <HAL_I2C_Init+0x84>
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4a80      	ldr	r2, [pc, #512]	; (8004588 <HAL_I2C_Init+0x278>)
 8004388:	4293      	cmp	r3, r2
 800438a:	bf94      	ite	ls
 800438c:	2301      	movls	r3, #1
 800438e:	2300      	movhi	r3, #0
 8004390:	b2db      	uxtb	r3, r3
 8004392:	e006      	b.n	80043a2 <HAL_I2C_Init+0x92>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	4a7d      	ldr	r2, [pc, #500]	; (800458c <HAL_I2C_Init+0x27c>)
 8004398:	4293      	cmp	r3, r2
 800439a:	bf94      	ite	ls
 800439c:	2301      	movls	r3, #1
 800439e:	2300      	movhi	r3, #0
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e0e7      	b.n	800457a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	4a78      	ldr	r2, [pc, #480]	; (8004590 <HAL_I2C_Init+0x280>)
 80043ae:	fba2 2303 	umull	r2, r3, r2, r3
 80043b2:	0c9b      	lsrs	r3, r3, #18
 80043b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68ba      	ldr	r2, [r7, #8]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6a1b      	ldr	r3, [r3, #32]
 80043d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	4a6a      	ldr	r2, [pc, #424]	; (8004584 <HAL_I2C_Init+0x274>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d802      	bhi.n	80043e4 <HAL_I2C_Init+0xd4>
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	3301      	adds	r3, #1
 80043e2:	e009      	b.n	80043f8 <HAL_I2C_Init+0xe8>
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80043ea:	fb02 f303 	mul.w	r3, r2, r3
 80043ee:	4a69      	ldr	r2, [pc, #420]	; (8004594 <HAL_I2C_Init+0x284>)
 80043f0:	fba2 2303 	umull	r2, r3, r2, r3
 80043f4:	099b      	lsrs	r3, r3, #6
 80043f6:	3301      	adds	r3, #1
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	6812      	ldr	r2, [r2, #0]
 80043fc:	430b      	orrs	r3, r1
 80043fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800440a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	495c      	ldr	r1, [pc, #368]	; (8004584 <HAL_I2C_Init+0x274>)
 8004414:	428b      	cmp	r3, r1
 8004416:	d819      	bhi.n	800444c <HAL_I2C_Init+0x13c>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	1e59      	subs	r1, r3, #1
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	fbb1 f3f3 	udiv	r3, r1, r3
 8004426:	1c59      	adds	r1, r3, #1
 8004428:	f640 73fc 	movw	r3, #4092	; 0xffc
 800442c:	400b      	ands	r3, r1
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00a      	beq.n	8004448 <HAL_I2C_Init+0x138>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	1e59      	subs	r1, r3, #1
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004440:	3301      	adds	r3, #1
 8004442:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004446:	e051      	b.n	80044ec <HAL_I2C_Init+0x1dc>
 8004448:	2304      	movs	r3, #4
 800444a:	e04f      	b.n	80044ec <HAL_I2C_Init+0x1dc>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d111      	bne.n	8004478 <HAL_I2C_Init+0x168>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	1e58      	subs	r0, r3, #1
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6859      	ldr	r1, [r3, #4]
 800445c:	460b      	mov	r3, r1
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	440b      	add	r3, r1
 8004462:	fbb0 f3f3 	udiv	r3, r0, r3
 8004466:	3301      	adds	r3, #1
 8004468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800446c:	2b00      	cmp	r3, #0
 800446e:	bf0c      	ite	eq
 8004470:	2301      	moveq	r3, #1
 8004472:	2300      	movne	r3, #0
 8004474:	b2db      	uxtb	r3, r3
 8004476:	e012      	b.n	800449e <HAL_I2C_Init+0x18e>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	1e58      	subs	r0, r3, #1
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6859      	ldr	r1, [r3, #4]
 8004480:	460b      	mov	r3, r1
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	440b      	add	r3, r1
 8004486:	0099      	lsls	r1, r3, #2
 8004488:	440b      	add	r3, r1
 800448a:	fbb0 f3f3 	udiv	r3, r0, r3
 800448e:	3301      	adds	r3, #1
 8004490:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004494:	2b00      	cmp	r3, #0
 8004496:	bf0c      	ite	eq
 8004498:	2301      	moveq	r3, #1
 800449a:	2300      	movne	r3, #0
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <HAL_I2C_Init+0x196>
 80044a2:	2301      	movs	r3, #1
 80044a4:	e022      	b.n	80044ec <HAL_I2C_Init+0x1dc>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10e      	bne.n	80044cc <HAL_I2C_Init+0x1bc>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	1e58      	subs	r0, r3, #1
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6859      	ldr	r1, [r3, #4]
 80044b6:	460b      	mov	r3, r1
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	440b      	add	r3, r1
 80044bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80044c0:	3301      	adds	r3, #1
 80044c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ca:	e00f      	b.n	80044ec <HAL_I2C_Init+0x1dc>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	1e58      	subs	r0, r3, #1
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6859      	ldr	r1, [r3, #4]
 80044d4:	460b      	mov	r3, r1
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	440b      	add	r3, r1
 80044da:	0099      	lsls	r1, r3, #2
 80044dc:	440b      	add	r3, r1
 80044de:	fbb0 f3f3 	udiv	r3, r0, r3
 80044e2:	3301      	adds	r3, #1
 80044e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044ec:	6879      	ldr	r1, [r7, #4]
 80044ee:	6809      	ldr	r1, [r1, #0]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	69da      	ldr	r2, [r3, #28]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	431a      	orrs	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	430a      	orrs	r2, r1
 800450e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800451a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	6911      	ldr	r1, [r2, #16]
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	68d2      	ldr	r2, [r2, #12]
 8004526:	4311      	orrs	r1, r2
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	6812      	ldr	r2, [r2, #0]
 800452c:	430b      	orrs	r3, r1
 800452e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	695a      	ldr	r2, [r3, #20]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	431a      	orrs	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f042 0201 	orr.w	r2, r2, #1
 800455a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2220      	movs	r2, #32
 8004566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	000186a0 	.word	0x000186a0
 8004588:	001e847f 	.word	0x001e847f
 800458c:	003d08ff 	.word	0x003d08ff
 8004590:	431bde83 	.word	0x431bde83
 8004594:	10624dd3 	.word	0x10624dd3

08004598 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b08c      	sub	sp, #48	; 0x30
 800459c:	af02      	add	r7, sp, #8
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	607a      	str	r2, [r7, #4]
 80045a2:	461a      	mov	r2, r3
 80045a4:	460b      	mov	r3, r1
 80045a6:	817b      	strh	r3, [r7, #10]
 80045a8:	4613      	mov	r3, r2
 80045aa:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80045ac:	2300      	movs	r3, #0
 80045ae:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045b0:	f7ff f884 	bl	80036bc <HAL_GetTick>
 80045b4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b20      	cmp	r3, #32
 80045c0:	f040 824b 	bne.w	8004a5a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	2319      	movs	r3, #25
 80045ca:	2201      	movs	r2, #1
 80045cc:	497f      	ldr	r1, [pc, #508]	; (80047cc <HAL_I2C_Master_Receive+0x234>)
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f001 f92a 	bl	8005828 <I2C_WaitOnFlagUntilTimeout>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80045da:	2302      	movs	r3, #2
 80045dc:	e23e      	b.n	8004a5c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d101      	bne.n	80045ec <HAL_I2C_Master_Receive+0x54>
 80045e8:	2302      	movs	r3, #2
 80045ea:	e237      	b.n	8004a5c <HAL_I2C_Master_Receive+0x4c4>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0301 	and.w	r3, r3, #1
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d007      	beq.n	8004612 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f042 0201 	orr.w	r2, r2, #1
 8004610:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004620:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2222      	movs	r2, #34	; 0x22
 8004626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2210      	movs	r2, #16
 800462e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	893a      	ldrh	r2, [r7, #8]
 8004642:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004648:	b29a      	uxth	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	4a5f      	ldr	r2, [pc, #380]	; (80047d0 <HAL_I2C_Master_Receive+0x238>)
 8004652:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004654:	8979      	ldrh	r1, [r7, #10]
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f000 fe98 	bl	8005390 <I2C_MasterRequestRead>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e1f8      	b.n	8004a5c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800466e:	2b00      	cmp	r3, #0
 8004670:	d113      	bne.n	800469a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004672:	2300      	movs	r3, #0
 8004674:	61fb      	str	r3, [r7, #28]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	61fb      	str	r3, [r7, #28]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	61fb      	str	r3, [r7, #28]
 8004686:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004696:	601a      	str	r2, [r3, #0]
 8004698:	e1cc      	b.n	8004a34 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d11e      	bne.n	80046e0 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80046b2:	b672      	cpsid	i
}
 80046b4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046b6:	2300      	movs	r3, #0
 80046b8:	61bb      	str	r3, [r7, #24]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	61bb      	str	r3, [r7, #24]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	61bb      	str	r3, [r7, #24]
 80046ca:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80046dc:	b662      	cpsie	i
}
 80046de:	e035      	b.n	800474c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d11e      	bne.n	8004726 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80046f8:	b672      	cpsid	i
}
 80046fa:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046fc:	2300      	movs	r3, #0
 80046fe:	617b      	str	r3, [r7, #20]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	617b      	str	r3, [r7, #20]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	617b      	str	r3, [r7, #20]
 8004710:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004720:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004722:	b662      	cpsie	i
}
 8004724:	e012      	b.n	800474c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004734:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004736:	2300      	movs	r3, #0
 8004738:	613b      	str	r3, [r7, #16]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	695b      	ldr	r3, [r3, #20]
 8004740:	613b      	str	r3, [r7, #16]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	613b      	str	r3, [r7, #16]
 800474a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800474c:	e172      	b.n	8004a34 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004752:	2b03      	cmp	r3, #3
 8004754:	f200 811f 	bhi.w	8004996 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800475c:	2b01      	cmp	r3, #1
 800475e:	d123      	bne.n	80047a8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004762:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f001 fa09 	bl	8005b7c <I2C_WaitOnRXNEFlagUntilTimeout>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e173      	b.n	8004a5c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	691a      	ldr	r2, [r3, #16]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004786:	1c5a      	adds	r2, r3, #1
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004790:	3b01      	subs	r3, #1
 8004792:	b29a      	uxth	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800479c:	b29b      	uxth	r3, r3
 800479e:	3b01      	subs	r3, #1
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80047a6:	e145      	b.n	8004a34 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d152      	bne.n	8004856 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b6:	2200      	movs	r2, #0
 80047b8:	4906      	ldr	r1, [pc, #24]	; (80047d4 <HAL_I2C_Master_Receive+0x23c>)
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f001 f834 	bl	8005828 <I2C_WaitOnFlagUntilTimeout>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d008      	beq.n	80047d8 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e148      	b.n	8004a5c <HAL_I2C_Master_Receive+0x4c4>
 80047ca:	bf00      	nop
 80047cc:	00100002 	.word	0x00100002
 80047d0:	ffff0000 	.word	0xffff0000
 80047d4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80047d8:	b672      	cpsid	i
}
 80047da:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	691a      	ldr	r2, [r3, #16]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f6:	b2d2      	uxtb	r2, r2
 80047f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fe:	1c5a      	adds	r2, r3, #1
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004808:	3b01      	subs	r3, #1
 800480a:	b29a      	uxth	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004814:	b29b      	uxth	r3, r3
 8004816:	3b01      	subs	r3, #1
 8004818:	b29a      	uxth	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800481e:	b662      	cpsie	i
}
 8004820:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	691a      	ldr	r2, [r3, #16]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482c:	b2d2      	uxtb	r2, r2
 800482e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800483e:	3b01      	subs	r3, #1
 8004840:	b29a      	uxth	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484a:	b29b      	uxth	r3, r3
 800484c:	3b01      	subs	r3, #1
 800484e:	b29a      	uxth	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004854:	e0ee      	b.n	8004a34 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485c:	2200      	movs	r2, #0
 800485e:	4981      	ldr	r1, [pc, #516]	; (8004a64 <HAL_I2C_Master_Receive+0x4cc>)
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f000 ffe1 	bl	8005828 <I2C_WaitOnFlagUntilTimeout>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d001      	beq.n	8004870 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e0f5      	b.n	8004a5c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800487e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004880:	b672      	cpsid	i
}
 8004882:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	691a      	ldr	r2, [r3, #16]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488e:	b2d2      	uxtb	r2, r2
 8004890:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004896:	1c5a      	adds	r2, r3, #1
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a0:	3b01      	subs	r3, #1
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	3b01      	subs	r3, #1
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80048b6:	4b6c      	ldr	r3, [pc, #432]	; (8004a68 <HAL_I2C_Master_Receive+0x4d0>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	08db      	lsrs	r3, r3, #3
 80048bc:	4a6b      	ldr	r2, [pc, #428]	; (8004a6c <HAL_I2C_Master_Receive+0x4d4>)
 80048be:	fba2 2303 	umull	r2, r3, r2, r3
 80048c2:	0a1a      	lsrs	r2, r3, #8
 80048c4:	4613      	mov	r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4413      	add	r3, r2
 80048ca:	00da      	lsls	r2, r3, #3
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80048d0:	6a3b      	ldr	r3, [r7, #32]
 80048d2:	3b01      	subs	r3, #1
 80048d4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d118      	bne.n	800490e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2220      	movs	r2, #32
 80048e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	f043 0220 	orr.w	r2, r3, #32
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80048fe:	b662      	cpsie	i
}
 8004900:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e0a6      	b.n	8004a5c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	2b04      	cmp	r3, #4
 800491a:	d1d9      	bne.n	80048d0 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800492a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	691a      	ldr	r2, [r3, #16]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004936:	b2d2      	uxtb	r2, r2
 8004938:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493e:	1c5a      	adds	r2, r3, #1
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004948:	3b01      	subs	r3, #1
 800494a:	b29a      	uxth	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004954:	b29b      	uxth	r3, r3
 8004956:	3b01      	subs	r3, #1
 8004958:	b29a      	uxth	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800495e:	b662      	cpsie	i
}
 8004960:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	691a      	ldr	r2, [r3, #16]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496c:	b2d2      	uxtb	r2, r2
 800496e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004974:	1c5a      	adds	r2, r3, #1
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800497e:	3b01      	subs	r3, #1
 8004980:	b29a      	uxth	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800498a:	b29b      	uxth	r3, r3
 800498c:	3b01      	subs	r3, #1
 800498e:	b29a      	uxth	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004994:	e04e      	b.n	8004a34 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004998:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	f001 f8ee 	bl	8005b7c <I2C_WaitOnRXNEFlagUntilTimeout>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e058      	b.n	8004a5c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	691a      	ldr	r2, [r3, #16]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b4:	b2d2      	uxtb	r2, r2
 80049b6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	1c5a      	adds	r2, r3, #1
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c6:	3b01      	subs	r3, #1
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	3b01      	subs	r3, #1
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	f003 0304 	and.w	r3, r3, #4
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d124      	bne.n	8004a34 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ee:	2b03      	cmp	r3, #3
 80049f0:	d107      	bne.n	8004a02 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a00:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	691a      	ldr	r2, [r3, #16]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0c:	b2d2      	uxtb	r2, r2
 8004a0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a14:	1c5a      	adds	r2, r3, #1
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f47f ae88 	bne.w	800474e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2220      	movs	r2, #32
 8004a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a56:	2300      	movs	r3, #0
 8004a58:	e000      	b.n	8004a5c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8004a5a:	2302      	movs	r3, #2
  }
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3728      	adds	r7, #40	; 0x28
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	00010004 	.word	0x00010004
 8004a68:	20000004 	.word	0x20000004
 8004a6c:	14f8b589 	.word	0x14f8b589

08004a70 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b088      	sub	sp, #32
 8004a74:	af02      	add	r7, sp, #8
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	4608      	mov	r0, r1
 8004a7a:	4611      	mov	r1, r2
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	4603      	mov	r3, r0
 8004a80:	817b      	strh	r3, [r7, #10]
 8004a82:	460b      	mov	r3, r1
 8004a84:	813b      	strh	r3, [r7, #8]
 8004a86:	4613      	mov	r3, r2
 8004a88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a8a:	f7fe fe17 	bl	80036bc <HAL_GetTick>
 8004a8e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b20      	cmp	r3, #32
 8004a9a:	f040 80d9 	bne.w	8004c50 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	9300      	str	r3, [sp, #0]
 8004aa2:	2319      	movs	r3, #25
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	496d      	ldr	r1, [pc, #436]	; (8004c5c <HAL_I2C_Mem_Write+0x1ec>)
 8004aa8:	68f8      	ldr	r0, [r7, #12]
 8004aaa:	f000 febd 	bl	8005828 <I2C_WaitOnFlagUntilTimeout>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d001      	beq.n	8004ab8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004ab4:	2302      	movs	r3, #2
 8004ab6:	e0cc      	b.n	8004c52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d101      	bne.n	8004ac6 <HAL_I2C_Mem_Write+0x56>
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	e0c5      	b.n	8004c52 <HAL_I2C_Mem_Write+0x1e2>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d007      	beq.n	8004aec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0201 	orr.w	r2, r2, #1
 8004aea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004afa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2221      	movs	r2, #33	; 0x21
 8004b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2240      	movs	r2, #64	; 0x40
 8004b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6a3a      	ldr	r2, [r7, #32]
 8004b16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004b1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b22:	b29a      	uxth	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	4a4d      	ldr	r2, [pc, #308]	; (8004c60 <HAL_I2C_Mem_Write+0x1f0>)
 8004b2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b2e:	88f8      	ldrh	r0, [r7, #6]
 8004b30:	893a      	ldrh	r2, [r7, #8]
 8004b32:	8979      	ldrh	r1, [r7, #10]
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	9301      	str	r3, [sp, #4]
 8004b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3a:	9300      	str	r3, [sp, #0]
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	68f8      	ldr	r0, [r7, #12]
 8004b40:	f000 fcf4 	bl	800552c <I2C_RequestMemoryWrite>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d052      	beq.n	8004bf0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e081      	b.n	8004c52 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b4e:	697a      	ldr	r2, [r7, #20]
 8004b50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f000 ff82 	bl	8005a5c <I2C_WaitOnTXEFlagUntilTimeout>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00d      	beq.n	8004b7a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b62:	2b04      	cmp	r3, #4
 8004b64:	d107      	bne.n	8004b76 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e06b      	b.n	8004c52 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7e:	781a      	ldrb	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8a:	1c5a      	adds	r2, r3, #1
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b94:	3b01      	subs	r3, #1
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	f003 0304 	and.w	r3, r3, #4
 8004bb4:	2b04      	cmp	r3, #4
 8004bb6:	d11b      	bne.n	8004bf0 <HAL_I2C_Mem_Write+0x180>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d017      	beq.n	8004bf0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc4:	781a      	ldrb	r2, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd0:	1c5a      	adds	r2, r3, #1
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	3b01      	subs	r3, #1
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1aa      	bne.n	8004b4e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f000 ff75 	bl	8005aec <I2C_WaitOnBTFFlagUntilTimeout>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00d      	beq.n	8004c24 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0c:	2b04      	cmp	r3, #4
 8004c0e:	d107      	bne.n	8004c20 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c1e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e016      	b.n	8004c52 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2220      	movs	r2, #32
 8004c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	e000      	b.n	8004c52 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004c50:	2302      	movs	r3, #2
  }
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3718      	adds	r7, #24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	00100002 	.word	0x00100002
 8004c60:	ffff0000 	.word	0xffff0000

08004c64 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b08c      	sub	sp, #48	; 0x30
 8004c68:	af02      	add	r7, sp, #8
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	4608      	mov	r0, r1
 8004c6e:	4611      	mov	r1, r2
 8004c70:	461a      	mov	r2, r3
 8004c72:	4603      	mov	r3, r0
 8004c74:	817b      	strh	r3, [r7, #10]
 8004c76:	460b      	mov	r3, r1
 8004c78:	813b      	strh	r3, [r7, #8]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c82:	f7fe fd1b 	bl	80036bc <HAL_GetTick>
 8004c86:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b20      	cmp	r3, #32
 8004c92:	f040 8244 	bne.w	800511e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	2319      	movs	r3, #25
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	4982      	ldr	r1, [pc, #520]	; (8004ea8 <HAL_I2C_Mem_Read+0x244>)
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f000 fdc1 	bl	8005828 <I2C_WaitOnFlagUntilTimeout>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8004cac:	2302      	movs	r3, #2
 8004cae:	e237      	b.n	8005120 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d101      	bne.n	8004cbe <HAL_I2C_Mem_Read+0x5a>
 8004cba:	2302      	movs	r3, #2
 8004cbc:	e230      	b.n	8005120 <HAL_I2C_Mem_Read+0x4bc>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0301 	and.w	r3, r3, #1
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d007      	beq.n	8004ce4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f042 0201 	orr.w	r2, r2, #1
 8004ce2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cf2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2222      	movs	r2, #34	; 0x22
 8004cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2240      	movs	r2, #64	; 0x40
 8004d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004d14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	4a62      	ldr	r2, [pc, #392]	; (8004eac <HAL_I2C_Mem_Read+0x248>)
 8004d24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d26:	88f8      	ldrh	r0, [r7, #6]
 8004d28:	893a      	ldrh	r2, [r7, #8]
 8004d2a:	8979      	ldrh	r1, [r7, #10]
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2e:	9301      	str	r3, [sp, #4]
 8004d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	4603      	mov	r3, r0
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f000 fc8e 	bl	8005658 <I2C_RequestMemoryRead>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e1ec      	b.n	8005120 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d113      	bne.n	8004d76 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d4e:	2300      	movs	r3, #0
 8004d50:	61fb      	str	r3, [r7, #28]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	61fb      	str	r3, [r7, #28]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	61fb      	str	r3, [r7, #28]
 8004d62:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d72:	601a      	str	r2, [r3, #0]
 8004d74:	e1c0      	b.n	80050f8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d11e      	bne.n	8004dbc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d8c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d8e:	b672      	cpsid	i
}
 8004d90:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d92:	2300      	movs	r3, #0
 8004d94:	61bb      	str	r3, [r7, #24]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	61bb      	str	r3, [r7, #24]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	699b      	ldr	r3, [r3, #24]
 8004da4:	61bb      	str	r3, [r7, #24]
 8004da6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004db6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004db8:	b662      	cpsie	i
}
 8004dba:	e035      	b.n	8004e28 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d11e      	bne.n	8004e02 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dd2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004dd4:	b672      	cpsid	i
}
 8004dd6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dd8:	2300      	movs	r3, #0
 8004dda:	617b      	str	r3, [r7, #20]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	617b      	str	r3, [r7, #20]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	617b      	str	r3, [r7, #20]
 8004dec:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dfc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004dfe:	b662      	cpsie	i
}
 8004e00:	e012      	b.n	8004e28 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e10:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e12:	2300      	movs	r3, #0
 8004e14:	613b      	str	r3, [r7, #16]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	613b      	str	r3, [r7, #16]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	613b      	str	r3, [r7, #16]
 8004e26:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004e28:	e166      	b.n	80050f8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e2e:	2b03      	cmp	r3, #3
 8004e30:	f200 811f 	bhi.w	8005072 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d123      	bne.n	8004e84 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f000 fe9b 	bl	8005b7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d001      	beq.n	8004e50 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e167      	b.n	8005120 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	691a      	ldr	r2, [r3, #16]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5a:	b2d2      	uxtb	r2, r2
 8004e5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e62:	1c5a      	adds	r2, r3, #1
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	b29a      	uxth	r2, r3
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004e82:	e139      	b.n	80050f8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d152      	bne.n	8004f32 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e92:	2200      	movs	r2, #0
 8004e94:	4906      	ldr	r1, [pc, #24]	; (8004eb0 <HAL_I2C_Mem_Read+0x24c>)
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	f000 fcc6 	bl	8005828 <I2C_WaitOnFlagUntilTimeout>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d008      	beq.n	8004eb4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e13c      	b.n	8005120 <HAL_I2C_Mem_Read+0x4bc>
 8004ea6:	bf00      	nop
 8004ea8:	00100002 	.word	0x00100002
 8004eac:	ffff0000 	.word	0xffff0000
 8004eb0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004eb4:	b672      	cpsid	i
}
 8004eb6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ec6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	691a      	ldr	r2, [r3, #16]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed2:	b2d2      	uxtb	r2, r2
 8004ed4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	1c5a      	adds	r2, r3, #1
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	b29a      	uxth	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004efa:	b662      	cpsie	i
}
 8004efc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	691a      	ldr	r2, [r3, #16]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	b2d2      	uxtb	r2, r2
 8004f0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f30:	e0e2      	b.n	80050f8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f34:	9300      	str	r3, [sp, #0]
 8004f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f38:	2200      	movs	r2, #0
 8004f3a:	497b      	ldr	r1, [pc, #492]	; (8005128 <HAL_I2C_Mem_Read+0x4c4>)
 8004f3c:	68f8      	ldr	r0, [r7, #12]
 8004f3e:	f000 fc73 	bl	8005828 <I2C_WaitOnFlagUntilTimeout>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d001      	beq.n	8004f4c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e0e9      	b.n	8005120 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f5a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004f5c:	b672      	cpsid	i
}
 8004f5e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	691a      	ldr	r2, [r3, #16]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	b2d2      	uxtb	r2, r2
 8004f6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f72:	1c5a      	adds	r2, r3, #1
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f92:	4b66      	ldr	r3, [pc, #408]	; (800512c <HAL_I2C_Mem_Read+0x4c8>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	08db      	lsrs	r3, r3, #3
 8004f98:	4a65      	ldr	r2, [pc, #404]	; (8005130 <HAL_I2C_Mem_Read+0x4cc>)
 8004f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f9e:	0a1a      	lsrs	r2, r3, #8
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	4413      	add	r3, r2
 8004fa6:	00da      	lsls	r2, r3, #3
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004fac:	6a3b      	ldr	r3, [r7, #32]
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004fb2:	6a3b      	ldr	r3, [r7, #32]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d118      	bne.n	8004fea <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd2:	f043 0220 	orr.w	r2, r3, #32
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8004fda:	b662      	cpsie	i
}
 8004fdc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e09a      	b.n	8005120 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	695b      	ldr	r3, [r3, #20]
 8004ff0:	f003 0304 	and.w	r3, r3, #4
 8004ff4:	2b04      	cmp	r3, #4
 8004ff6:	d1d9      	bne.n	8004fac <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005006:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	691a      	ldr	r2, [r3, #16]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005012:	b2d2      	uxtb	r2, r2
 8005014:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	1c5a      	adds	r2, r3, #1
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005024:	3b01      	subs	r3, #1
 8005026:	b29a      	uxth	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005030:	b29b      	uxth	r3, r3
 8005032:	3b01      	subs	r3, #1
 8005034:	b29a      	uxth	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800503a:	b662      	cpsie	i
}
 800503c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	691a      	ldr	r2, [r3, #16]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	b2d2      	uxtb	r2, r2
 800504a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	1c5a      	adds	r2, r3, #1
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800505a:	3b01      	subs	r3, #1
 800505c:	b29a      	uxth	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005066:	b29b      	uxth	r3, r3
 8005068:	3b01      	subs	r3, #1
 800506a:	b29a      	uxth	r2, r3
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005070:	e042      	b.n	80050f8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005074:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f000 fd80 	bl	8005b7c <I2C_WaitOnRXNEFlagUntilTimeout>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d001      	beq.n	8005086 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e04c      	b.n	8005120 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	691a      	ldr	r2, [r3, #16]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	b2d2      	uxtb	r2, r2
 8005092:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005098:	1c5a      	adds	r2, r3, #1
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050a2:	3b01      	subs	r3, #1
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	3b01      	subs	r3, #1
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	f003 0304 	and.w	r3, r3, #4
 80050c2:	2b04      	cmp	r3, #4
 80050c4:	d118      	bne.n	80050f8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	691a      	ldr	r2, [r3, #16]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	b2d2      	uxtb	r2, r2
 80050d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	1c5a      	adds	r2, r3, #1
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e2:	3b01      	subs	r3, #1
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	3b01      	subs	r3, #1
 80050f2:	b29a      	uxth	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f47f ae94 	bne.w	8004e2a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2220      	movs	r2, #32
 8005106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800511a:	2300      	movs	r3, #0
 800511c:	e000      	b.n	8005120 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800511e:	2302      	movs	r3, #2
  }
}
 8005120:	4618      	mov	r0, r3
 8005122:	3728      	adds	r7, #40	; 0x28
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	00010004 	.word	0x00010004
 800512c:	20000004 	.word	0x20000004
 8005130:	14f8b589 	.word	0x14f8b589

08005134 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b08a      	sub	sp, #40	; 0x28
 8005138:	af02      	add	r7, sp, #8
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	607a      	str	r2, [r7, #4]
 800513e:	603b      	str	r3, [r7, #0]
 8005140:	460b      	mov	r3, r1
 8005142:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005144:	f7fe faba 	bl	80036bc <HAL_GetTick>
 8005148:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800514a:	2300      	movs	r3, #0
 800514c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b20      	cmp	r3, #32
 8005158:	f040 8111 	bne.w	800537e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	2319      	movs	r3, #25
 8005162:	2201      	movs	r2, #1
 8005164:	4988      	ldr	r1, [pc, #544]	; (8005388 <HAL_I2C_IsDeviceReady+0x254>)
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f000 fb5e 	bl	8005828 <I2C_WaitOnFlagUntilTimeout>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005172:	2302      	movs	r3, #2
 8005174:	e104      	b.n	8005380 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800517c:	2b01      	cmp	r3, #1
 800517e:	d101      	bne.n	8005184 <HAL_I2C_IsDeviceReady+0x50>
 8005180:	2302      	movs	r3, #2
 8005182:	e0fd      	b.n	8005380 <HAL_I2C_IsDeviceReady+0x24c>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0301 	and.w	r3, r3, #1
 8005196:	2b01      	cmp	r3, #1
 8005198:	d007      	beq.n	80051aa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f042 0201 	orr.w	r2, r2, #1
 80051a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2224      	movs	r2, #36	; 0x24
 80051be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	4a70      	ldr	r2, [pc, #448]	; (800538c <HAL_I2C_IsDeviceReady+0x258>)
 80051cc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051dc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	9300      	str	r3, [sp, #0]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f000 fb1c 	bl	8005828 <I2C_WaitOnFlagUntilTimeout>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00d      	beq.n	8005212 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005204:	d103      	bne.n	800520e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f44f 7200 	mov.w	r2, #512	; 0x200
 800520c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e0b6      	b.n	8005380 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005212:	897b      	ldrh	r3, [r7, #10]
 8005214:	b2db      	uxtb	r3, r3
 8005216:	461a      	mov	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005220:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005222:	f7fe fa4b 	bl	80036bc <HAL_GetTick>
 8005226:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b02      	cmp	r3, #2
 8005234:	bf0c      	ite	eq
 8005236:	2301      	moveq	r3, #1
 8005238:	2300      	movne	r3, #0
 800523a:	b2db      	uxtb	r3, r3
 800523c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005248:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800524c:	bf0c      	ite	eq
 800524e:	2301      	moveq	r3, #1
 8005250:	2300      	movne	r3, #0
 8005252:	b2db      	uxtb	r3, r3
 8005254:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005256:	e025      	b.n	80052a4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005258:	f7fe fa30 	bl	80036bc <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	429a      	cmp	r2, r3
 8005266:	d302      	bcc.n	800526e <HAL_I2C_IsDeviceReady+0x13a>
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d103      	bne.n	8005276 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	22a0      	movs	r2, #160	; 0xa0
 8005272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	f003 0302 	and.w	r3, r3, #2
 8005280:	2b02      	cmp	r3, #2
 8005282:	bf0c      	ite	eq
 8005284:	2301      	moveq	r3, #1
 8005286:	2300      	movne	r3, #0
 8005288:	b2db      	uxtb	r3, r3
 800528a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800529a:	bf0c      	ite	eq
 800529c:	2301      	moveq	r3, #1
 800529e:	2300      	movne	r3, #0
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	2ba0      	cmp	r3, #160	; 0xa0
 80052ae:	d005      	beq.n	80052bc <HAL_I2C_IsDeviceReady+0x188>
 80052b0:	7dfb      	ldrb	r3, [r7, #23]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d102      	bne.n	80052bc <HAL_I2C_IsDeviceReady+0x188>
 80052b6:	7dbb      	ldrb	r3, [r7, #22]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d0cd      	beq.n	8005258 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2220      	movs	r2, #32
 80052c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d129      	bne.n	8005326 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052e0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052e2:	2300      	movs	r3, #0
 80052e4:	613b      	str	r3, [r7, #16]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	695b      	ldr	r3, [r3, #20]
 80052ec:	613b      	str	r3, [r7, #16]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	699b      	ldr	r3, [r3, #24]
 80052f4:	613b      	str	r3, [r7, #16]
 80052f6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	9300      	str	r3, [sp, #0]
 80052fc:	2319      	movs	r3, #25
 80052fe:	2201      	movs	r2, #1
 8005300:	4921      	ldr	r1, [pc, #132]	; (8005388 <HAL_I2C_IsDeviceReady+0x254>)
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f000 fa90 	bl	8005828 <I2C_WaitOnFlagUntilTimeout>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d001      	beq.n	8005312 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e036      	b.n	8005380 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2220      	movs	r2, #32
 8005316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005322:	2300      	movs	r3, #0
 8005324:	e02c      	b.n	8005380 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005334:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800533e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	2319      	movs	r3, #25
 8005346:	2201      	movs	r2, #1
 8005348:	490f      	ldr	r1, [pc, #60]	; (8005388 <HAL_I2C_IsDeviceReady+0x254>)
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f000 fa6c 	bl	8005828 <I2C_WaitOnFlagUntilTimeout>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d001      	beq.n	800535a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e012      	b.n	8005380 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	3301      	adds	r3, #1
 800535e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005360:	69ba      	ldr	r2, [r7, #24]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	429a      	cmp	r2, r3
 8005366:	f4ff af32 	bcc.w	80051ce <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2220      	movs	r2, #32
 800536e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e000      	b.n	8005380 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800537e:	2302      	movs	r3, #2
  }
}
 8005380:	4618      	mov	r0, r3
 8005382:	3720      	adds	r7, #32
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	00100002 	.word	0x00100002
 800538c:	ffff0000 	.word	0xffff0000

08005390 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b088      	sub	sp, #32
 8005394:	af02      	add	r7, sp, #8
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	607a      	str	r2, [r7, #4]
 800539a:	603b      	str	r3, [r7, #0]
 800539c:	460b      	mov	r3, r1
 800539e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053b4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	2b08      	cmp	r3, #8
 80053ba:	d006      	beq.n	80053ca <I2C_MasterRequestRead+0x3a>
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d003      	beq.n	80053ca <I2C_MasterRequestRead+0x3a>
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053c8:	d108      	bne.n	80053dc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053d8:	601a      	str	r2, [r3, #0]
 80053da:	e00b      	b.n	80053f4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e0:	2b11      	cmp	r3, #17
 80053e2:	d107      	bne.n	80053f4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	9300      	str	r3, [sp, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f000 fa11 	bl	8005828 <I2C_WaitOnFlagUntilTimeout>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d00d      	beq.n	8005428 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800541a:	d103      	bne.n	8005424 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005422:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e079      	b.n	800551c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005430:	d108      	bne.n	8005444 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005432:	897b      	ldrh	r3, [r7, #10]
 8005434:	b2db      	uxtb	r3, r3
 8005436:	f043 0301 	orr.w	r3, r3, #1
 800543a:	b2da      	uxtb	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	611a      	str	r2, [r3, #16]
 8005442:	e05f      	b.n	8005504 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005444:	897b      	ldrh	r3, [r7, #10]
 8005446:	11db      	asrs	r3, r3, #7
 8005448:	b2db      	uxtb	r3, r3
 800544a:	f003 0306 	and.w	r3, r3, #6
 800544e:	b2db      	uxtb	r3, r3
 8005450:	f063 030f 	orn	r3, r3, #15
 8005454:	b2da      	uxtb	r2, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	4930      	ldr	r1, [pc, #192]	; (8005524 <I2C_MasterRequestRead+0x194>)
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	f000 fa5a 	bl	800591c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d001      	beq.n	8005472 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e054      	b.n	800551c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005472:	897b      	ldrh	r3, [r7, #10]
 8005474:	b2da      	uxtb	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	4929      	ldr	r1, [pc, #164]	; (8005528 <I2C_MasterRequestRead+0x198>)
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f000 fa4a 	bl	800591c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d001      	beq.n	8005492 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e044      	b.n	800551c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005492:	2300      	movs	r3, #0
 8005494:	613b      	str	r3, [r7, #16]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	613b      	str	r3, [r7, #16]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	613b      	str	r3, [r7, #16]
 80054a6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054b6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	9300      	str	r3, [sp, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f000 f9af 	bl	8005828 <I2C_WaitOnFlagUntilTimeout>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00d      	beq.n	80054ec <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054de:	d103      	bne.n	80054e8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054e6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e017      	b.n	800551c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80054ec:	897b      	ldrh	r3, [r7, #10]
 80054ee:	11db      	asrs	r3, r3, #7
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	f003 0306 	and.w	r3, r3, #6
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	f063 030e 	orn	r3, r3, #14
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	4907      	ldr	r1, [pc, #28]	; (8005528 <I2C_MasterRequestRead+0x198>)
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f000 fa06 	bl	800591c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d001      	beq.n	800551a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e000      	b.n	800551c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3718      	adds	r7, #24
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	00010008 	.word	0x00010008
 8005528:	00010002 	.word	0x00010002

0800552c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b088      	sub	sp, #32
 8005530:	af02      	add	r7, sp, #8
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	4608      	mov	r0, r1
 8005536:	4611      	mov	r1, r2
 8005538:	461a      	mov	r2, r3
 800553a:	4603      	mov	r3, r0
 800553c:	817b      	strh	r3, [r7, #10]
 800553e:	460b      	mov	r3, r1
 8005540:	813b      	strh	r3, [r7, #8]
 8005542:	4613      	mov	r3, r2
 8005544:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005554:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	9300      	str	r3, [sp, #0]
 800555a:	6a3b      	ldr	r3, [r7, #32]
 800555c:	2200      	movs	r2, #0
 800555e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005562:	68f8      	ldr	r0, [r7, #12]
 8005564:	f000 f960 	bl	8005828 <I2C_WaitOnFlagUntilTimeout>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00d      	beq.n	800558a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800557c:	d103      	bne.n	8005586 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005584:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e05f      	b.n	800564a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800558a:	897b      	ldrh	r3, [r7, #10]
 800558c:	b2db      	uxtb	r3, r3
 800558e:	461a      	mov	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005598:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800559a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559c:	6a3a      	ldr	r2, [r7, #32]
 800559e:	492d      	ldr	r1, [pc, #180]	; (8005654 <I2C_RequestMemoryWrite+0x128>)
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f000 f9bb 	bl	800591c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d001      	beq.n	80055b0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e04c      	b.n	800564a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055b0:	2300      	movs	r3, #0
 80055b2:	617b      	str	r3, [r7, #20]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	617b      	str	r3, [r7, #20]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	617b      	str	r3, [r7, #20]
 80055c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055c8:	6a39      	ldr	r1, [r7, #32]
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f000 fa46 	bl	8005a5c <I2C_WaitOnTXEFlagUntilTimeout>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00d      	beq.n	80055f2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055da:	2b04      	cmp	r3, #4
 80055dc:	d107      	bne.n	80055ee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e02b      	b.n	800564a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055f2:	88fb      	ldrh	r3, [r7, #6]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d105      	bne.n	8005604 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055f8:	893b      	ldrh	r3, [r7, #8]
 80055fa:	b2da      	uxtb	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	611a      	str	r2, [r3, #16]
 8005602:	e021      	b.n	8005648 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005604:	893b      	ldrh	r3, [r7, #8]
 8005606:	0a1b      	lsrs	r3, r3, #8
 8005608:	b29b      	uxth	r3, r3
 800560a:	b2da      	uxtb	r2, r3
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005614:	6a39      	ldr	r1, [r7, #32]
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f000 fa20 	bl	8005a5c <I2C_WaitOnTXEFlagUntilTimeout>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00d      	beq.n	800563e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005626:	2b04      	cmp	r3, #4
 8005628:	d107      	bne.n	800563a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005638:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e005      	b.n	800564a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800563e:	893b      	ldrh	r3, [r7, #8]
 8005640:	b2da      	uxtb	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3718      	adds	r7, #24
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	00010002 	.word	0x00010002

08005658 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b088      	sub	sp, #32
 800565c:	af02      	add	r7, sp, #8
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	4608      	mov	r0, r1
 8005662:	4611      	mov	r1, r2
 8005664:	461a      	mov	r2, r3
 8005666:	4603      	mov	r3, r0
 8005668:	817b      	strh	r3, [r7, #10]
 800566a:	460b      	mov	r3, r1
 800566c:	813b      	strh	r3, [r7, #8]
 800566e:	4613      	mov	r3, r2
 8005670:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005680:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005690:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005694:	9300      	str	r3, [sp, #0]
 8005696:	6a3b      	ldr	r3, [r7, #32]
 8005698:	2200      	movs	r2, #0
 800569a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f000 f8c2 	bl	8005828 <I2C_WaitOnFlagUntilTimeout>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00d      	beq.n	80056c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056b8:	d103      	bne.n	80056c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80056c2:	2303      	movs	r3, #3
 80056c4:	e0aa      	b.n	800581c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056c6:	897b      	ldrh	r3, [r7, #10]
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	461a      	mov	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80056d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d8:	6a3a      	ldr	r2, [r7, #32]
 80056da:	4952      	ldr	r1, [pc, #328]	; (8005824 <I2C_RequestMemoryRead+0x1cc>)
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f000 f91d 	bl	800591c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d001      	beq.n	80056ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e097      	b.n	800581c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056ec:	2300      	movs	r3, #0
 80056ee:	617b      	str	r3, [r7, #20]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	617b      	str	r3, [r7, #20]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	617b      	str	r3, [r7, #20]
 8005700:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005704:	6a39      	ldr	r1, [r7, #32]
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f000 f9a8 	bl	8005a5c <I2C_WaitOnTXEFlagUntilTimeout>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00d      	beq.n	800572e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005716:	2b04      	cmp	r3, #4
 8005718:	d107      	bne.n	800572a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005728:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e076      	b.n	800581c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800572e:	88fb      	ldrh	r3, [r7, #6]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d105      	bne.n	8005740 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005734:	893b      	ldrh	r3, [r7, #8]
 8005736:	b2da      	uxtb	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	611a      	str	r2, [r3, #16]
 800573e:	e021      	b.n	8005784 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005740:	893b      	ldrh	r3, [r7, #8]
 8005742:	0a1b      	lsrs	r3, r3, #8
 8005744:	b29b      	uxth	r3, r3
 8005746:	b2da      	uxtb	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800574e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005750:	6a39      	ldr	r1, [r7, #32]
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f000 f982 	bl	8005a5c <I2C_WaitOnTXEFlagUntilTimeout>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00d      	beq.n	800577a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005762:	2b04      	cmp	r3, #4
 8005764:	d107      	bne.n	8005776 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005774:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e050      	b.n	800581c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800577a:	893b      	ldrh	r3, [r7, #8]
 800577c:	b2da      	uxtb	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005786:	6a39      	ldr	r1, [r7, #32]
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f000 f967 	bl	8005a5c <I2C_WaitOnTXEFlagUntilTimeout>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d00d      	beq.n	80057b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005798:	2b04      	cmp	r3, #4
 800579a:	d107      	bne.n	80057ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e035      	b.n	800581c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c2:	9300      	str	r3, [sp, #0]
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	f000 f82b 	bl	8005828 <I2C_WaitOnFlagUntilTimeout>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00d      	beq.n	80057f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057e6:	d103      	bne.n	80057f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e013      	b.n	800581c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80057f4:	897b      	ldrh	r3, [r7, #10]
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	f043 0301 	orr.w	r3, r3, #1
 80057fc:	b2da      	uxtb	r2, r3
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005806:	6a3a      	ldr	r2, [r7, #32]
 8005808:	4906      	ldr	r1, [pc, #24]	; (8005824 <I2C_RequestMemoryRead+0x1cc>)
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f000 f886 	bl	800591c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d001      	beq.n	800581a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e000      	b.n	800581c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3718      	adds	r7, #24
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	00010002 	.word	0x00010002

08005828 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	603b      	str	r3, [r7, #0]
 8005834:	4613      	mov	r3, r2
 8005836:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005838:	e048      	b.n	80058cc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005840:	d044      	beq.n	80058cc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005842:	f7fd ff3b 	bl	80036bc <HAL_GetTick>
 8005846:	4602      	mov	r2, r0
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	683a      	ldr	r2, [r7, #0]
 800584e:	429a      	cmp	r2, r3
 8005850:	d302      	bcc.n	8005858 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d139      	bne.n	80058cc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	0c1b      	lsrs	r3, r3, #16
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b01      	cmp	r3, #1
 8005860:	d10d      	bne.n	800587e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	43da      	mvns	r2, r3
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	4013      	ands	r3, r2
 800586e:	b29b      	uxth	r3, r3
 8005870:	2b00      	cmp	r3, #0
 8005872:	bf0c      	ite	eq
 8005874:	2301      	moveq	r3, #1
 8005876:	2300      	movne	r3, #0
 8005878:	b2db      	uxtb	r3, r3
 800587a:	461a      	mov	r2, r3
 800587c:	e00c      	b.n	8005898 <I2C_WaitOnFlagUntilTimeout+0x70>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	699b      	ldr	r3, [r3, #24]
 8005884:	43da      	mvns	r2, r3
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	4013      	ands	r3, r2
 800588a:	b29b      	uxth	r3, r3
 800588c:	2b00      	cmp	r3, #0
 800588e:	bf0c      	ite	eq
 8005890:	2301      	moveq	r3, #1
 8005892:	2300      	movne	r3, #0
 8005894:	b2db      	uxtb	r3, r3
 8005896:	461a      	mov	r2, r3
 8005898:	79fb      	ldrb	r3, [r7, #7]
 800589a:	429a      	cmp	r2, r3
 800589c:	d116      	bne.n	80058cc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2220      	movs	r2, #32
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b8:	f043 0220 	orr.w	r2, r3, #32
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e023      	b.n	8005914 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	0c1b      	lsrs	r3, r3, #16
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d10d      	bne.n	80058f2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	43da      	mvns	r2, r3
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	4013      	ands	r3, r2
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	bf0c      	ite	eq
 80058e8:	2301      	moveq	r3, #1
 80058ea:	2300      	movne	r3, #0
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	461a      	mov	r2, r3
 80058f0:	e00c      	b.n	800590c <I2C_WaitOnFlagUntilTimeout+0xe4>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	43da      	mvns	r2, r3
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	4013      	ands	r3, r2
 80058fe:	b29b      	uxth	r3, r3
 8005900:	2b00      	cmp	r3, #0
 8005902:	bf0c      	ite	eq
 8005904:	2301      	moveq	r3, #1
 8005906:	2300      	movne	r3, #0
 8005908:	b2db      	uxtb	r3, r3
 800590a:	461a      	mov	r2, r3
 800590c:	79fb      	ldrb	r3, [r7, #7]
 800590e:	429a      	cmp	r2, r3
 8005910:	d093      	beq.n	800583a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
 8005928:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800592a:	e071      	b.n	8005a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800593a:	d123      	bne.n	8005984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800594a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005954:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2220      	movs	r2, #32
 8005960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005970:	f043 0204 	orr.w	r2, r3, #4
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e067      	b.n	8005a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800598a:	d041      	beq.n	8005a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800598c:	f7fd fe96 	bl	80036bc <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	429a      	cmp	r2, r3
 800599a:	d302      	bcc.n	80059a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d136      	bne.n	8005a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	0c1b      	lsrs	r3, r3, #16
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d10c      	bne.n	80059c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	43da      	mvns	r2, r3
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	4013      	ands	r3, r2
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	bf14      	ite	ne
 80059be:	2301      	movne	r3, #1
 80059c0:	2300      	moveq	r3, #0
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	e00b      	b.n	80059de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	43da      	mvns	r2, r3
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	4013      	ands	r3, r2
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	bf14      	ite	ne
 80059d8:	2301      	movne	r3, #1
 80059da:	2300      	moveq	r3, #0
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d016      	beq.n	8005a10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2220      	movs	r2, #32
 80059ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fc:	f043 0220 	orr.w	r2, r3, #32
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e021      	b.n	8005a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	0c1b      	lsrs	r3, r3, #16
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d10c      	bne.n	8005a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	695b      	ldr	r3, [r3, #20]
 8005a20:	43da      	mvns	r2, r3
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	4013      	ands	r3, r2
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	bf14      	ite	ne
 8005a2c:	2301      	movne	r3, #1
 8005a2e:	2300      	moveq	r3, #0
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	e00b      	b.n	8005a4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	43da      	mvns	r2, r3
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	4013      	ands	r3, r2
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	bf14      	ite	ne
 8005a46:	2301      	movne	r3, #1
 8005a48:	2300      	moveq	r3, #0
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f47f af6d 	bne.w	800592c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3710      	adds	r7, #16
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a68:	e034      	b.n	8005ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a6a:	68f8      	ldr	r0, [r7, #12]
 8005a6c:	f000 f8e3 	bl	8005c36 <I2C_IsAcknowledgeFailed>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d001      	beq.n	8005a7a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e034      	b.n	8005ae4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a80:	d028      	beq.n	8005ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a82:	f7fd fe1b 	bl	80036bc <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d302      	bcc.n	8005a98 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d11d      	bne.n	8005ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aa2:	2b80      	cmp	r3, #128	; 0x80
 8005aa4:	d016      	beq.n	8005ad4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2220      	movs	r2, #32
 8005ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac0:	f043 0220 	orr.w	r2, r3, #32
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e007      	b.n	8005ae4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ade:	2b80      	cmp	r3, #128	; 0x80
 8005ae0:	d1c3      	bne.n	8005a6a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3710      	adds	r7, #16
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005af8:	e034      	b.n	8005b64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f000 f89b 	bl	8005c36 <I2C_IsAcknowledgeFailed>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d001      	beq.n	8005b0a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e034      	b.n	8005b74 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b10:	d028      	beq.n	8005b64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b12:	f7fd fdd3 	bl	80036bc <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d302      	bcc.n	8005b28 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d11d      	bne.n	8005b64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	f003 0304 	and.w	r3, r3, #4
 8005b32:	2b04      	cmp	r3, #4
 8005b34:	d016      	beq.n	8005b64 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2220      	movs	r2, #32
 8005b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b50:	f043 0220 	orr.w	r2, r3, #32
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e007      	b.n	8005b74 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	f003 0304 	and.w	r3, r3, #4
 8005b6e:	2b04      	cmp	r3, #4
 8005b70:	d1c3      	bne.n	8005afa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005b72:	2300      	movs	r3, #0
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3710      	adds	r7, #16
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b88:	e049      	b.n	8005c1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	f003 0310 	and.w	r3, r3, #16
 8005b94:	2b10      	cmp	r3, #16
 8005b96:	d119      	bne.n	8005bcc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f06f 0210 	mvn.w	r2, #16
 8005ba0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2220      	movs	r2, #32
 8005bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e030      	b.n	8005c2e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bcc:	f7fd fd76 	bl	80036bc <HAL_GetTick>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d302      	bcc.n	8005be2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d11d      	bne.n	8005c1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bec:	2b40      	cmp	r3, #64	; 0x40
 8005bee:	d016      	beq.n	8005c1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2220      	movs	r2, #32
 8005bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0a:	f043 0220 	orr.w	r2, r3, #32
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e007      	b.n	8005c2e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	695b      	ldr	r3, [r3, #20]
 8005c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c28:	2b40      	cmp	r3, #64	; 0x40
 8005c2a:	d1ae      	bne.n	8005b8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005c36:	b480      	push	{r7}
 8005c38:	b083      	sub	sp, #12
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	695b      	ldr	r3, [r3, #20]
 8005c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c4c:	d11b      	bne.n	8005c86 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c56:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2220      	movs	r2, #32
 8005c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c72:	f043 0204 	orr.w	r2, r3, #4
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e000      	b.n	8005c88 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bc80      	pop	{r7}
 8005c90:	4770      	bx	lr
	...

08005c94 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005c94:	b480      	push	{r7}
 8005c96:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005c98:	4b03      	ldr	r3, [pc, #12]	; (8005ca8 <HAL_PWR_EnableBkUpAccess+0x14>)
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	601a      	str	r2, [r3, #0]
}
 8005c9e:	bf00      	nop
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bc80      	pop	{r7}
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	420e0020 	.word	0x420e0020

08005cac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e272      	b.n	80061a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0301 	and.w	r3, r3, #1
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f000 8087 	beq.w	8005dda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ccc:	4b92      	ldr	r3, [pc, #584]	; (8005f18 <HAL_RCC_OscConfig+0x26c>)
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f003 030c 	and.w	r3, r3, #12
 8005cd4:	2b04      	cmp	r3, #4
 8005cd6:	d00c      	beq.n	8005cf2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005cd8:	4b8f      	ldr	r3, [pc, #572]	; (8005f18 <HAL_RCC_OscConfig+0x26c>)
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f003 030c 	and.w	r3, r3, #12
 8005ce0:	2b08      	cmp	r3, #8
 8005ce2:	d112      	bne.n	8005d0a <HAL_RCC_OscConfig+0x5e>
 8005ce4:	4b8c      	ldr	r3, [pc, #560]	; (8005f18 <HAL_RCC_OscConfig+0x26c>)
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cf0:	d10b      	bne.n	8005d0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cf2:	4b89      	ldr	r3, [pc, #548]	; (8005f18 <HAL_RCC_OscConfig+0x26c>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d06c      	beq.n	8005dd8 <HAL_RCC_OscConfig+0x12c>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d168      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e24c      	b.n	80061a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d12:	d106      	bne.n	8005d22 <HAL_RCC_OscConfig+0x76>
 8005d14:	4b80      	ldr	r3, [pc, #512]	; (8005f18 <HAL_RCC_OscConfig+0x26c>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a7f      	ldr	r2, [pc, #508]	; (8005f18 <HAL_RCC_OscConfig+0x26c>)
 8005d1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d1e:	6013      	str	r3, [r2, #0]
 8005d20:	e02e      	b.n	8005d80 <HAL_RCC_OscConfig+0xd4>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d10c      	bne.n	8005d44 <HAL_RCC_OscConfig+0x98>
 8005d2a:	4b7b      	ldr	r3, [pc, #492]	; (8005f18 <HAL_RCC_OscConfig+0x26c>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a7a      	ldr	r2, [pc, #488]	; (8005f18 <HAL_RCC_OscConfig+0x26c>)
 8005d30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d34:	6013      	str	r3, [r2, #0]
 8005d36:	4b78      	ldr	r3, [pc, #480]	; (8005f18 <HAL_RCC_OscConfig+0x26c>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a77      	ldr	r2, [pc, #476]	; (8005f18 <HAL_RCC_OscConfig+0x26c>)
 8005d3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d40:	6013      	str	r3, [r2, #0]
 8005d42:	e01d      	b.n	8005d80 <HAL_RCC_OscConfig+0xd4>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d4c:	d10c      	bne.n	8005d68 <HAL_RCC_OscConfig+0xbc>
 8005d4e:	4b72      	ldr	r3, [pc, #456]	; (8005f18 <HAL_RCC_OscConfig+0x26c>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a71      	ldr	r2, [pc, #452]	; (8005f18 <HAL_RCC_OscConfig+0x26c>)
 8005d54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d58:	6013      	str	r3, [r2, #0]
 8005d5a:	4b6f      	ldr	r3, [pc, #444]	; (8005f18 <HAL_RCC_OscConfig+0x26c>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a6e      	ldr	r2, [pc, #440]	; (8005f18 <HAL_RCC_OscConfig+0x26c>)
 8005d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d64:	6013      	str	r3, [r2, #0]
 8005d66:	e00b      	b.n	8005d80 <HAL_RCC_OscConfig+0xd4>
 8005d68:	4b6b      	ldr	r3, [pc, #428]	; (8005f18 <HAL_RCC_OscConfig+0x26c>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a6a      	ldr	r2, [pc, #424]	; (8005f18 <HAL_RCC_OscConfig+0x26c>)
 8005d6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d72:	6013      	str	r3, [r2, #0]
 8005d74:	4b68      	ldr	r3, [pc, #416]	; (8005f18 <HAL_RCC_OscConfig+0x26c>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a67      	ldr	r2, [pc, #412]	; (8005f18 <HAL_RCC_OscConfig+0x26c>)
 8005d7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d013      	beq.n	8005db0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d88:	f7fd fc98 	bl	80036bc <HAL_GetTick>
 8005d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d8e:	e008      	b.n	8005da2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d90:	f7fd fc94 	bl	80036bc <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	2b64      	cmp	r3, #100	; 0x64
 8005d9c:	d901      	bls.n	8005da2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e200      	b.n	80061a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005da2:	4b5d      	ldr	r3, [pc, #372]	; (8005f18 <HAL_RCC_OscConfig+0x26c>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d0f0      	beq.n	8005d90 <HAL_RCC_OscConfig+0xe4>
 8005dae:	e014      	b.n	8005dda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005db0:	f7fd fc84 	bl	80036bc <HAL_GetTick>
 8005db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005db6:	e008      	b.n	8005dca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005db8:	f7fd fc80 	bl	80036bc <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	2b64      	cmp	r3, #100	; 0x64
 8005dc4:	d901      	bls.n	8005dca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e1ec      	b.n	80061a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dca:	4b53      	ldr	r3, [pc, #332]	; (8005f18 <HAL_RCC_OscConfig+0x26c>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1f0      	bne.n	8005db8 <HAL_RCC_OscConfig+0x10c>
 8005dd6:	e000      	b.n	8005dda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0302 	and.w	r3, r3, #2
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d063      	beq.n	8005eae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005de6:	4b4c      	ldr	r3, [pc, #304]	; (8005f18 <HAL_RCC_OscConfig+0x26c>)
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f003 030c 	and.w	r3, r3, #12
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00b      	beq.n	8005e0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005df2:	4b49      	ldr	r3, [pc, #292]	; (8005f18 <HAL_RCC_OscConfig+0x26c>)
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f003 030c 	and.w	r3, r3, #12
 8005dfa:	2b08      	cmp	r3, #8
 8005dfc:	d11c      	bne.n	8005e38 <HAL_RCC_OscConfig+0x18c>
 8005dfe:	4b46      	ldr	r3, [pc, #280]	; (8005f18 <HAL_RCC_OscConfig+0x26c>)
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d116      	bne.n	8005e38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e0a:	4b43      	ldr	r3, [pc, #268]	; (8005f18 <HAL_RCC_OscConfig+0x26c>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d005      	beq.n	8005e22 <HAL_RCC_OscConfig+0x176>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d001      	beq.n	8005e22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e1c0      	b.n	80061a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e22:	4b3d      	ldr	r3, [pc, #244]	; (8005f18 <HAL_RCC_OscConfig+0x26c>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	00db      	lsls	r3, r3, #3
 8005e30:	4939      	ldr	r1, [pc, #228]	; (8005f18 <HAL_RCC_OscConfig+0x26c>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e36:	e03a      	b.n	8005eae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d020      	beq.n	8005e82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e40:	4b36      	ldr	r3, [pc, #216]	; (8005f1c <HAL_RCC_OscConfig+0x270>)
 8005e42:	2201      	movs	r2, #1
 8005e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e46:	f7fd fc39 	bl	80036bc <HAL_GetTick>
 8005e4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e4c:	e008      	b.n	8005e60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e4e:	f7fd fc35 	bl	80036bc <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d901      	bls.n	8005e60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e1a1      	b.n	80061a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e60:	4b2d      	ldr	r3, [pc, #180]	; (8005f18 <HAL_RCC_OscConfig+0x26c>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0302 	and.w	r3, r3, #2
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d0f0      	beq.n	8005e4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e6c:	4b2a      	ldr	r3, [pc, #168]	; (8005f18 <HAL_RCC_OscConfig+0x26c>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	00db      	lsls	r3, r3, #3
 8005e7a:	4927      	ldr	r1, [pc, #156]	; (8005f18 <HAL_RCC_OscConfig+0x26c>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	600b      	str	r3, [r1, #0]
 8005e80:	e015      	b.n	8005eae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e82:	4b26      	ldr	r3, [pc, #152]	; (8005f1c <HAL_RCC_OscConfig+0x270>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e88:	f7fd fc18 	bl	80036bc <HAL_GetTick>
 8005e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e8e:	e008      	b.n	8005ea2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e90:	f7fd fc14 	bl	80036bc <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e180      	b.n	80061a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ea2:	4b1d      	ldr	r3, [pc, #116]	; (8005f18 <HAL_RCC_OscConfig+0x26c>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1f0      	bne.n	8005e90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0308 	and.w	r3, r3, #8
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d03a      	beq.n	8005f30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d019      	beq.n	8005ef6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ec2:	4b17      	ldr	r3, [pc, #92]	; (8005f20 <HAL_RCC_OscConfig+0x274>)
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ec8:	f7fd fbf8 	bl	80036bc <HAL_GetTick>
 8005ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ece:	e008      	b.n	8005ee2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ed0:	f7fd fbf4 	bl	80036bc <HAL_GetTick>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	1ad3      	subs	r3, r2, r3
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e160      	b.n	80061a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ee2:	4b0d      	ldr	r3, [pc, #52]	; (8005f18 <HAL_RCC_OscConfig+0x26c>)
 8005ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee6:	f003 0302 	and.w	r3, r3, #2
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d0f0      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005eee:	2001      	movs	r0, #1
 8005ef0:	f000 face 	bl	8006490 <RCC_Delay>
 8005ef4:	e01c      	b.n	8005f30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ef6:	4b0a      	ldr	r3, [pc, #40]	; (8005f20 <HAL_RCC_OscConfig+0x274>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005efc:	f7fd fbde 	bl	80036bc <HAL_GetTick>
 8005f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f02:	e00f      	b.n	8005f24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f04:	f7fd fbda 	bl	80036bc <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d908      	bls.n	8005f24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e146      	b.n	80061a4 <HAL_RCC_OscConfig+0x4f8>
 8005f16:	bf00      	nop
 8005f18:	40021000 	.word	0x40021000
 8005f1c:	42420000 	.word	0x42420000
 8005f20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f24:	4b92      	ldr	r3, [pc, #584]	; (8006170 <HAL_RCC_OscConfig+0x4c4>)
 8005f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1e9      	bne.n	8005f04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0304 	and.w	r3, r3, #4
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f000 80a6 	beq.w	800608a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f42:	4b8b      	ldr	r3, [pc, #556]	; (8006170 <HAL_RCC_OscConfig+0x4c4>)
 8005f44:	69db      	ldr	r3, [r3, #28]
 8005f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d10d      	bne.n	8005f6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f4e:	4b88      	ldr	r3, [pc, #544]	; (8006170 <HAL_RCC_OscConfig+0x4c4>)
 8005f50:	69db      	ldr	r3, [r3, #28]
 8005f52:	4a87      	ldr	r2, [pc, #540]	; (8006170 <HAL_RCC_OscConfig+0x4c4>)
 8005f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f58:	61d3      	str	r3, [r2, #28]
 8005f5a:	4b85      	ldr	r3, [pc, #532]	; (8006170 <HAL_RCC_OscConfig+0x4c4>)
 8005f5c:	69db      	ldr	r3, [r3, #28]
 8005f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f62:	60bb      	str	r3, [r7, #8]
 8005f64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f66:	2301      	movs	r3, #1
 8005f68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f6a:	4b82      	ldr	r3, [pc, #520]	; (8006174 <HAL_RCC_OscConfig+0x4c8>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d118      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f76:	4b7f      	ldr	r3, [pc, #508]	; (8006174 <HAL_RCC_OscConfig+0x4c8>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a7e      	ldr	r2, [pc, #504]	; (8006174 <HAL_RCC_OscConfig+0x4c8>)
 8005f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f82:	f7fd fb9b 	bl	80036bc <HAL_GetTick>
 8005f86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f88:	e008      	b.n	8005f9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f8a:	f7fd fb97 	bl	80036bc <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	2b64      	cmp	r3, #100	; 0x64
 8005f96:	d901      	bls.n	8005f9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e103      	b.n	80061a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f9c:	4b75      	ldr	r3, [pc, #468]	; (8006174 <HAL_RCC_OscConfig+0x4c8>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d0f0      	beq.n	8005f8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d106      	bne.n	8005fbe <HAL_RCC_OscConfig+0x312>
 8005fb0:	4b6f      	ldr	r3, [pc, #444]	; (8006170 <HAL_RCC_OscConfig+0x4c4>)
 8005fb2:	6a1b      	ldr	r3, [r3, #32]
 8005fb4:	4a6e      	ldr	r2, [pc, #440]	; (8006170 <HAL_RCC_OscConfig+0x4c4>)
 8005fb6:	f043 0301 	orr.w	r3, r3, #1
 8005fba:	6213      	str	r3, [r2, #32]
 8005fbc:	e02d      	b.n	800601a <HAL_RCC_OscConfig+0x36e>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d10c      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x334>
 8005fc6:	4b6a      	ldr	r3, [pc, #424]	; (8006170 <HAL_RCC_OscConfig+0x4c4>)
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	4a69      	ldr	r2, [pc, #420]	; (8006170 <HAL_RCC_OscConfig+0x4c4>)
 8005fcc:	f023 0301 	bic.w	r3, r3, #1
 8005fd0:	6213      	str	r3, [r2, #32]
 8005fd2:	4b67      	ldr	r3, [pc, #412]	; (8006170 <HAL_RCC_OscConfig+0x4c4>)
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
 8005fd6:	4a66      	ldr	r2, [pc, #408]	; (8006170 <HAL_RCC_OscConfig+0x4c4>)
 8005fd8:	f023 0304 	bic.w	r3, r3, #4
 8005fdc:	6213      	str	r3, [r2, #32]
 8005fde:	e01c      	b.n	800601a <HAL_RCC_OscConfig+0x36e>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	2b05      	cmp	r3, #5
 8005fe6:	d10c      	bne.n	8006002 <HAL_RCC_OscConfig+0x356>
 8005fe8:	4b61      	ldr	r3, [pc, #388]	; (8006170 <HAL_RCC_OscConfig+0x4c4>)
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	4a60      	ldr	r2, [pc, #384]	; (8006170 <HAL_RCC_OscConfig+0x4c4>)
 8005fee:	f043 0304 	orr.w	r3, r3, #4
 8005ff2:	6213      	str	r3, [r2, #32]
 8005ff4:	4b5e      	ldr	r3, [pc, #376]	; (8006170 <HAL_RCC_OscConfig+0x4c4>)
 8005ff6:	6a1b      	ldr	r3, [r3, #32]
 8005ff8:	4a5d      	ldr	r2, [pc, #372]	; (8006170 <HAL_RCC_OscConfig+0x4c4>)
 8005ffa:	f043 0301 	orr.w	r3, r3, #1
 8005ffe:	6213      	str	r3, [r2, #32]
 8006000:	e00b      	b.n	800601a <HAL_RCC_OscConfig+0x36e>
 8006002:	4b5b      	ldr	r3, [pc, #364]	; (8006170 <HAL_RCC_OscConfig+0x4c4>)
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	4a5a      	ldr	r2, [pc, #360]	; (8006170 <HAL_RCC_OscConfig+0x4c4>)
 8006008:	f023 0301 	bic.w	r3, r3, #1
 800600c:	6213      	str	r3, [r2, #32]
 800600e:	4b58      	ldr	r3, [pc, #352]	; (8006170 <HAL_RCC_OscConfig+0x4c4>)
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	4a57      	ldr	r2, [pc, #348]	; (8006170 <HAL_RCC_OscConfig+0x4c4>)
 8006014:	f023 0304 	bic.w	r3, r3, #4
 8006018:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d015      	beq.n	800604e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006022:	f7fd fb4b 	bl	80036bc <HAL_GetTick>
 8006026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006028:	e00a      	b.n	8006040 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800602a:	f7fd fb47 	bl	80036bc <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	f241 3288 	movw	r2, #5000	; 0x1388
 8006038:	4293      	cmp	r3, r2
 800603a:	d901      	bls.n	8006040 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e0b1      	b.n	80061a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006040:	4b4b      	ldr	r3, [pc, #300]	; (8006170 <HAL_RCC_OscConfig+0x4c4>)
 8006042:	6a1b      	ldr	r3, [r3, #32]
 8006044:	f003 0302 	and.w	r3, r3, #2
 8006048:	2b00      	cmp	r3, #0
 800604a:	d0ee      	beq.n	800602a <HAL_RCC_OscConfig+0x37e>
 800604c:	e014      	b.n	8006078 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800604e:	f7fd fb35 	bl	80036bc <HAL_GetTick>
 8006052:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006054:	e00a      	b.n	800606c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006056:	f7fd fb31 	bl	80036bc <HAL_GetTick>
 800605a:	4602      	mov	r2, r0
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	f241 3288 	movw	r2, #5000	; 0x1388
 8006064:	4293      	cmp	r3, r2
 8006066:	d901      	bls.n	800606c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e09b      	b.n	80061a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800606c:	4b40      	ldr	r3, [pc, #256]	; (8006170 <HAL_RCC_OscConfig+0x4c4>)
 800606e:	6a1b      	ldr	r3, [r3, #32]
 8006070:	f003 0302 	and.w	r3, r3, #2
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1ee      	bne.n	8006056 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006078:	7dfb      	ldrb	r3, [r7, #23]
 800607a:	2b01      	cmp	r3, #1
 800607c:	d105      	bne.n	800608a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800607e:	4b3c      	ldr	r3, [pc, #240]	; (8006170 <HAL_RCC_OscConfig+0x4c4>)
 8006080:	69db      	ldr	r3, [r3, #28]
 8006082:	4a3b      	ldr	r2, [pc, #236]	; (8006170 <HAL_RCC_OscConfig+0x4c4>)
 8006084:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006088:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	2b00      	cmp	r3, #0
 8006090:	f000 8087 	beq.w	80061a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006094:	4b36      	ldr	r3, [pc, #216]	; (8006170 <HAL_RCC_OscConfig+0x4c4>)
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	f003 030c 	and.w	r3, r3, #12
 800609c:	2b08      	cmp	r3, #8
 800609e:	d061      	beq.n	8006164 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	69db      	ldr	r3, [r3, #28]
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d146      	bne.n	8006136 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060a8:	4b33      	ldr	r3, [pc, #204]	; (8006178 <HAL_RCC_OscConfig+0x4cc>)
 80060aa:	2200      	movs	r2, #0
 80060ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060ae:	f7fd fb05 	bl	80036bc <HAL_GetTick>
 80060b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060b4:	e008      	b.n	80060c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060b6:	f7fd fb01 	bl	80036bc <HAL_GetTick>
 80060ba:	4602      	mov	r2, r0
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d901      	bls.n	80060c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80060c4:	2303      	movs	r3, #3
 80060c6:	e06d      	b.n	80061a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060c8:	4b29      	ldr	r3, [pc, #164]	; (8006170 <HAL_RCC_OscConfig+0x4c4>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1f0      	bne.n	80060b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a1b      	ldr	r3, [r3, #32]
 80060d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060dc:	d108      	bne.n	80060f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80060de:	4b24      	ldr	r3, [pc, #144]	; (8006170 <HAL_RCC_OscConfig+0x4c4>)
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	4921      	ldr	r1, [pc, #132]	; (8006170 <HAL_RCC_OscConfig+0x4c4>)
 80060ec:	4313      	orrs	r3, r2
 80060ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80060f0:	4b1f      	ldr	r3, [pc, #124]	; (8006170 <HAL_RCC_OscConfig+0x4c4>)
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a19      	ldr	r1, [r3, #32]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006100:	430b      	orrs	r3, r1
 8006102:	491b      	ldr	r1, [pc, #108]	; (8006170 <HAL_RCC_OscConfig+0x4c4>)
 8006104:	4313      	orrs	r3, r2
 8006106:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006108:	4b1b      	ldr	r3, [pc, #108]	; (8006178 <HAL_RCC_OscConfig+0x4cc>)
 800610a:	2201      	movs	r2, #1
 800610c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800610e:	f7fd fad5 	bl	80036bc <HAL_GetTick>
 8006112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006114:	e008      	b.n	8006128 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006116:	f7fd fad1 	bl	80036bc <HAL_GetTick>
 800611a:	4602      	mov	r2, r0
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	2b02      	cmp	r3, #2
 8006122:	d901      	bls.n	8006128 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	e03d      	b.n	80061a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006128:	4b11      	ldr	r3, [pc, #68]	; (8006170 <HAL_RCC_OscConfig+0x4c4>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d0f0      	beq.n	8006116 <HAL_RCC_OscConfig+0x46a>
 8006134:	e035      	b.n	80061a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006136:	4b10      	ldr	r3, [pc, #64]	; (8006178 <HAL_RCC_OscConfig+0x4cc>)
 8006138:	2200      	movs	r2, #0
 800613a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800613c:	f7fd fabe 	bl	80036bc <HAL_GetTick>
 8006140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006142:	e008      	b.n	8006156 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006144:	f7fd faba 	bl	80036bc <HAL_GetTick>
 8006148:	4602      	mov	r2, r0
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	2b02      	cmp	r3, #2
 8006150:	d901      	bls.n	8006156 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e026      	b.n	80061a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006156:	4b06      	ldr	r3, [pc, #24]	; (8006170 <HAL_RCC_OscConfig+0x4c4>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1f0      	bne.n	8006144 <HAL_RCC_OscConfig+0x498>
 8006162:	e01e      	b.n	80061a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	69db      	ldr	r3, [r3, #28]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d107      	bne.n	800617c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	e019      	b.n	80061a4 <HAL_RCC_OscConfig+0x4f8>
 8006170:	40021000 	.word	0x40021000
 8006174:	40007000 	.word	0x40007000
 8006178:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800617c:	4b0b      	ldr	r3, [pc, #44]	; (80061ac <HAL_RCC_OscConfig+0x500>)
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a1b      	ldr	r3, [r3, #32]
 800618c:	429a      	cmp	r2, r3
 800618e:	d106      	bne.n	800619e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800619a:	429a      	cmp	r2, r3
 800619c:	d001      	beq.n	80061a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e000      	b.n	80061a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3718      	adds	r7, #24
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	40021000 	.word	0x40021000

080061b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d101      	bne.n	80061c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e0d0      	b.n	8006366 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80061c4:	4b6a      	ldr	r3, [pc, #424]	; (8006370 <HAL_RCC_ClockConfig+0x1c0>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 0307 	and.w	r3, r3, #7
 80061cc:	683a      	ldr	r2, [r7, #0]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d910      	bls.n	80061f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061d2:	4b67      	ldr	r3, [pc, #412]	; (8006370 <HAL_RCC_ClockConfig+0x1c0>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f023 0207 	bic.w	r2, r3, #7
 80061da:	4965      	ldr	r1, [pc, #404]	; (8006370 <HAL_RCC_ClockConfig+0x1c0>)
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	4313      	orrs	r3, r2
 80061e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061e2:	4b63      	ldr	r3, [pc, #396]	; (8006370 <HAL_RCC_ClockConfig+0x1c0>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 0307 	and.w	r3, r3, #7
 80061ea:	683a      	ldr	r2, [r7, #0]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d001      	beq.n	80061f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e0b8      	b.n	8006366 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0302 	and.w	r3, r3, #2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d020      	beq.n	8006242 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0304 	and.w	r3, r3, #4
 8006208:	2b00      	cmp	r3, #0
 800620a:	d005      	beq.n	8006218 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800620c:	4b59      	ldr	r3, [pc, #356]	; (8006374 <HAL_RCC_ClockConfig+0x1c4>)
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	4a58      	ldr	r2, [pc, #352]	; (8006374 <HAL_RCC_ClockConfig+0x1c4>)
 8006212:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006216:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0308 	and.w	r3, r3, #8
 8006220:	2b00      	cmp	r3, #0
 8006222:	d005      	beq.n	8006230 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006224:	4b53      	ldr	r3, [pc, #332]	; (8006374 <HAL_RCC_ClockConfig+0x1c4>)
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	4a52      	ldr	r2, [pc, #328]	; (8006374 <HAL_RCC_ClockConfig+0x1c4>)
 800622a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800622e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006230:	4b50      	ldr	r3, [pc, #320]	; (8006374 <HAL_RCC_ClockConfig+0x1c4>)
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	494d      	ldr	r1, [pc, #308]	; (8006374 <HAL_RCC_ClockConfig+0x1c4>)
 800623e:	4313      	orrs	r3, r2
 8006240:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b00      	cmp	r3, #0
 800624c:	d040      	beq.n	80062d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d107      	bne.n	8006266 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006256:	4b47      	ldr	r3, [pc, #284]	; (8006374 <HAL_RCC_ClockConfig+0x1c4>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d115      	bne.n	800628e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e07f      	b.n	8006366 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	2b02      	cmp	r3, #2
 800626c:	d107      	bne.n	800627e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800626e:	4b41      	ldr	r3, [pc, #260]	; (8006374 <HAL_RCC_ClockConfig+0x1c4>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d109      	bne.n	800628e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e073      	b.n	8006366 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800627e:	4b3d      	ldr	r3, [pc, #244]	; (8006374 <HAL_RCC_ClockConfig+0x1c4>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0302 	and.w	r3, r3, #2
 8006286:	2b00      	cmp	r3, #0
 8006288:	d101      	bne.n	800628e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e06b      	b.n	8006366 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800628e:	4b39      	ldr	r3, [pc, #228]	; (8006374 <HAL_RCC_ClockConfig+0x1c4>)
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f023 0203 	bic.w	r2, r3, #3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	4936      	ldr	r1, [pc, #216]	; (8006374 <HAL_RCC_ClockConfig+0x1c4>)
 800629c:	4313      	orrs	r3, r2
 800629e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062a0:	f7fd fa0c 	bl	80036bc <HAL_GetTick>
 80062a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062a6:	e00a      	b.n	80062be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062a8:	f7fd fa08 	bl	80036bc <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d901      	bls.n	80062be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e053      	b.n	8006366 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062be:	4b2d      	ldr	r3, [pc, #180]	; (8006374 <HAL_RCC_ClockConfig+0x1c4>)
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	f003 020c 	and.w	r2, r3, #12
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d1eb      	bne.n	80062a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80062d0:	4b27      	ldr	r3, [pc, #156]	; (8006370 <HAL_RCC_ClockConfig+0x1c0>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0307 	and.w	r3, r3, #7
 80062d8:	683a      	ldr	r2, [r7, #0]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d210      	bcs.n	8006300 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062de:	4b24      	ldr	r3, [pc, #144]	; (8006370 <HAL_RCC_ClockConfig+0x1c0>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f023 0207 	bic.w	r2, r3, #7
 80062e6:	4922      	ldr	r1, [pc, #136]	; (8006370 <HAL_RCC_ClockConfig+0x1c0>)
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062ee:	4b20      	ldr	r3, [pc, #128]	; (8006370 <HAL_RCC_ClockConfig+0x1c0>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0307 	and.w	r3, r3, #7
 80062f6:	683a      	ldr	r2, [r7, #0]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d001      	beq.n	8006300 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e032      	b.n	8006366 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0304 	and.w	r3, r3, #4
 8006308:	2b00      	cmp	r3, #0
 800630a:	d008      	beq.n	800631e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800630c:	4b19      	ldr	r3, [pc, #100]	; (8006374 <HAL_RCC_ClockConfig+0x1c4>)
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	4916      	ldr	r1, [pc, #88]	; (8006374 <HAL_RCC_ClockConfig+0x1c4>)
 800631a:	4313      	orrs	r3, r2
 800631c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0308 	and.w	r3, r3, #8
 8006326:	2b00      	cmp	r3, #0
 8006328:	d009      	beq.n	800633e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800632a:	4b12      	ldr	r3, [pc, #72]	; (8006374 <HAL_RCC_ClockConfig+0x1c4>)
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	691b      	ldr	r3, [r3, #16]
 8006336:	00db      	lsls	r3, r3, #3
 8006338:	490e      	ldr	r1, [pc, #56]	; (8006374 <HAL_RCC_ClockConfig+0x1c4>)
 800633a:	4313      	orrs	r3, r2
 800633c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800633e:	f000 f821 	bl	8006384 <HAL_RCC_GetSysClockFreq>
 8006342:	4602      	mov	r2, r0
 8006344:	4b0b      	ldr	r3, [pc, #44]	; (8006374 <HAL_RCC_ClockConfig+0x1c4>)
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	091b      	lsrs	r3, r3, #4
 800634a:	f003 030f 	and.w	r3, r3, #15
 800634e:	490a      	ldr	r1, [pc, #40]	; (8006378 <HAL_RCC_ClockConfig+0x1c8>)
 8006350:	5ccb      	ldrb	r3, [r1, r3]
 8006352:	fa22 f303 	lsr.w	r3, r2, r3
 8006356:	4a09      	ldr	r2, [pc, #36]	; (800637c <HAL_RCC_ClockConfig+0x1cc>)
 8006358:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800635a:	4b09      	ldr	r3, [pc, #36]	; (8006380 <HAL_RCC_ClockConfig+0x1d0>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4618      	mov	r0, r3
 8006360:	f7fd f96a 	bl	8003638 <HAL_InitTick>

  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	40022000 	.word	0x40022000
 8006374:	40021000 	.word	0x40021000
 8006378:	080106d4 	.word	0x080106d4
 800637c:	20000004 	.word	0x20000004
 8006380:	20000008 	.word	0x20000008

08006384 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006384:	b480      	push	{r7}
 8006386:	b087      	sub	sp, #28
 8006388:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800638a:	2300      	movs	r3, #0
 800638c:	60fb      	str	r3, [r7, #12]
 800638e:	2300      	movs	r3, #0
 8006390:	60bb      	str	r3, [r7, #8]
 8006392:	2300      	movs	r3, #0
 8006394:	617b      	str	r3, [r7, #20]
 8006396:	2300      	movs	r3, #0
 8006398:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800639a:	2300      	movs	r3, #0
 800639c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800639e:	4b1e      	ldr	r3, [pc, #120]	; (8006418 <HAL_RCC_GetSysClockFreq+0x94>)
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f003 030c 	and.w	r3, r3, #12
 80063aa:	2b04      	cmp	r3, #4
 80063ac:	d002      	beq.n	80063b4 <HAL_RCC_GetSysClockFreq+0x30>
 80063ae:	2b08      	cmp	r3, #8
 80063b0:	d003      	beq.n	80063ba <HAL_RCC_GetSysClockFreq+0x36>
 80063b2:	e027      	b.n	8006404 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80063b4:	4b19      	ldr	r3, [pc, #100]	; (800641c <HAL_RCC_GetSysClockFreq+0x98>)
 80063b6:	613b      	str	r3, [r7, #16]
      break;
 80063b8:	e027      	b.n	800640a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	0c9b      	lsrs	r3, r3, #18
 80063be:	f003 030f 	and.w	r3, r3, #15
 80063c2:	4a17      	ldr	r2, [pc, #92]	; (8006420 <HAL_RCC_GetSysClockFreq+0x9c>)
 80063c4:	5cd3      	ldrb	r3, [r2, r3]
 80063c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d010      	beq.n	80063f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80063d2:	4b11      	ldr	r3, [pc, #68]	; (8006418 <HAL_RCC_GetSysClockFreq+0x94>)
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	0c5b      	lsrs	r3, r3, #17
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	4a11      	ldr	r2, [pc, #68]	; (8006424 <HAL_RCC_GetSysClockFreq+0xa0>)
 80063de:	5cd3      	ldrb	r3, [r2, r3]
 80063e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a0d      	ldr	r2, [pc, #52]	; (800641c <HAL_RCC_GetSysClockFreq+0x98>)
 80063e6:	fb03 f202 	mul.w	r2, r3, r2
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f0:	617b      	str	r3, [r7, #20]
 80063f2:	e004      	b.n	80063fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	4a0c      	ldr	r2, [pc, #48]	; (8006428 <HAL_RCC_GetSysClockFreq+0xa4>)
 80063f8:	fb02 f303 	mul.w	r3, r2, r3
 80063fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	613b      	str	r3, [r7, #16]
      break;
 8006402:	e002      	b.n	800640a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006404:	4b05      	ldr	r3, [pc, #20]	; (800641c <HAL_RCC_GetSysClockFreq+0x98>)
 8006406:	613b      	str	r3, [r7, #16]
      break;
 8006408:	bf00      	nop
    }
  }
  return sysclockfreq;
 800640a:	693b      	ldr	r3, [r7, #16]
}
 800640c:	4618      	mov	r0, r3
 800640e:	371c      	adds	r7, #28
 8006410:	46bd      	mov	sp, r7
 8006412:	bc80      	pop	{r7}
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	40021000 	.word	0x40021000
 800641c:	007a1200 	.word	0x007a1200
 8006420:	080106ec 	.word	0x080106ec
 8006424:	080106fc 	.word	0x080106fc
 8006428:	003d0900 	.word	0x003d0900

0800642c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800642c:	b480      	push	{r7}
 800642e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006430:	4b02      	ldr	r3, [pc, #8]	; (800643c <HAL_RCC_GetHCLKFreq+0x10>)
 8006432:	681b      	ldr	r3, [r3, #0]
}
 8006434:	4618      	mov	r0, r3
 8006436:	46bd      	mov	sp, r7
 8006438:	bc80      	pop	{r7}
 800643a:	4770      	bx	lr
 800643c:	20000004 	.word	0x20000004

08006440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006444:	f7ff fff2 	bl	800642c <HAL_RCC_GetHCLKFreq>
 8006448:	4602      	mov	r2, r0
 800644a:	4b05      	ldr	r3, [pc, #20]	; (8006460 <HAL_RCC_GetPCLK1Freq+0x20>)
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	0a1b      	lsrs	r3, r3, #8
 8006450:	f003 0307 	and.w	r3, r3, #7
 8006454:	4903      	ldr	r1, [pc, #12]	; (8006464 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006456:	5ccb      	ldrb	r3, [r1, r3]
 8006458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800645c:	4618      	mov	r0, r3
 800645e:	bd80      	pop	{r7, pc}
 8006460:	40021000 	.word	0x40021000
 8006464:	080106e4 	.word	0x080106e4

08006468 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800646c:	f7ff ffde 	bl	800642c <HAL_RCC_GetHCLKFreq>
 8006470:	4602      	mov	r2, r0
 8006472:	4b05      	ldr	r3, [pc, #20]	; (8006488 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	0adb      	lsrs	r3, r3, #11
 8006478:	f003 0307 	and.w	r3, r3, #7
 800647c:	4903      	ldr	r1, [pc, #12]	; (800648c <HAL_RCC_GetPCLK2Freq+0x24>)
 800647e:	5ccb      	ldrb	r3, [r1, r3]
 8006480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006484:	4618      	mov	r0, r3
 8006486:	bd80      	pop	{r7, pc}
 8006488:	40021000 	.word	0x40021000
 800648c:	080106e4 	.word	0x080106e4

08006490 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006498:	4b0a      	ldr	r3, [pc, #40]	; (80064c4 <RCC_Delay+0x34>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a0a      	ldr	r2, [pc, #40]	; (80064c8 <RCC_Delay+0x38>)
 800649e:	fba2 2303 	umull	r2, r3, r2, r3
 80064a2:	0a5b      	lsrs	r3, r3, #9
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	fb02 f303 	mul.w	r3, r2, r3
 80064aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80064ac:	bf00      	nop
  }
  while (Delay --);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	1e5a      	subs	r2, r3, #1
 80064b2:	60fa      	str	r2, [r7, #12]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d1f9      	bne.n	80064ac <RCC_Delay+0x1c>
}
 80064b8:	bf00      	nop
 80064ba:	bf00      	nop
 80064bc:	3714      	adds	r7, #20
 80064be:	46bd      	mov	sp, r7
 80064c0:	bc80      	pop	{r7}
 80064c2:	4770      	bx	lr
 80064c4:	20000004 	.word	0x20000004
 80064c8:	10624dd3 	.word	0x10624dd3

080064cc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b086      	sub	sp, #24
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80064d4:	2300      	movs	r3, #0
 80064d6:	613b      	str	r3, [r7, #16]
 80064d8:	2300      	movs	r3, #0
 80064da:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 0301 	and.w	r3, r3, #1
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d07d      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80064e8:	2300      	movs	r3, #0
 80064ea:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064ec:	4b4f      	ldr	r3, [pc, #316]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064ee:	69db      	ldr	r3, [r3, #28]
 80064f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d10d      	bne.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064f8:	4b4c      	ldr	r3, [pc, #304]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064fa:	69db      	ldr	r3, [r3, #28]
 80064fc:	4a4b      	ldr	r2, [pc, #300]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80064fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006502:	61d3      	str	r3, [r2, #28]
 8006504:	4b49      	ldr	r3, [pc, #292]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006506:	69db      	ldr	r3, [r3, #28]
 8006508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800650c:	60bb      	str	r3, [r7, #8]
 800650e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006510:	2301      	movs	r3, #1
 8006512:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006514:	4b46      	ldr	r3, [pc, #280]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800651c:	2b00      	cmp	r3, #0
 800651e:	d118      	bne.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006520:	4b43      	ldr	r3, [pc, #268]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a42      	ldr	r2, [pc, #264]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800652a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800652c:	f7fd f8c6 	bl	80036bc <HAL_GetTick>
 8006530:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006532:	e008      	b.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006534:	f7fd f8c2 	bl	80036bc <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	2b64      	cmp	r3, #100	; 0x64
 8006540:	d901      	bls.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e06d      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006546:	4b3a      	ldr	r3, [pc, #232]	; (8006630 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800654e:	2b00      	cmp	r3, #0
 8006550:	d0f0      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006552:	4b36      	ldr	r3, [pc, #216]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006554:	6a1b      	ldr	r3, [r3, #32]
 8006556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800655a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d02e      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	429a      	cmp	r2, r3
 800656e:	d027      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006570:	4b2e      	ldr	r3, [pc, #184]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006572:	6a1b      	ldr	r3, [r3, #32]
 8006574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006578:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800657a:	4b2e      	ldr	r3, [pc, #184]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800657c:	2201      	movs	r2, #1
 800657e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006580:	4b2c      	ldr	r3, [pc, #176]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006582:	2200      	movs	r2, #0
 8006584:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006586:	4a29      	ldr	r2, [pc, #164]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	2b00      	cmp	r3, #0
 8006594:	d014      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006596:	f7fd f891 	bl	80036bc <HAL_GetTick>
 800659a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800659c:	e00a      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800659e:	f7fd f88d 	bl	80036bc <HAL_GetTick>
 80065a2:	4602      	mov	r2, r0
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d901      	bls.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80065b0:	2303      	movs	r3, #3
 80065b2:	e036      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065b4:	4b1d      	ldr	r3, [pc, #116]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065b6:	6a1b      	ldr	r3, [r3, #32]
 80065b8:	f003 0302 	and.w	r3, r3, #2
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d0ee      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065c0:	4b1a      	ldr	r3, [pc, #104]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065c2:	6a1b      	ldr	r3, [r3, #32]
 80065c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	4917      	ldr	r1, [pc, #92]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80065d2:	7dfb      	ldrb	r3, [r7, #23]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d105      	bne.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065d8:	4b14      	ldr	r3, [pc, #80]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065da:	69db      	ldr	r3, [r3, #28]
 80065dc:	4a13      	ldr	r2, [pc, #76]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065e2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 0302 	and.w	r3, r3, #2
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d008      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80065f0:	4b0e      	ldr	r3, [pc, #56]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	490b      	ldr	r1, [pc, #44]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 0310 	and.w	r3, r3, #16
 800660a:	2b00      	cmp	r3, #0
 800660c:	d008      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800660e:	4b07      	ldr	r3, [pc, #28]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	4904      	ldr	r1, [pc, #16]	; (800662c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800661c:	4313      	orrs	r3, r2
 800661e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3718      	adds	r7, #24
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	40021000 	.word	0x40021000
 8006630:	40007000 	.word	0x40007000
 8006634:	42420440 	.word	0x42420440

08006638 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b088      	sub	sp, #32
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006640:	2300      	movs	r3, #0
 8006642:	617b      	str	r3, [r7, #20]
 8006644:	2300      	movs	r3, #0
 8006646:	61fb      	str	r3, [r7, #28]
 8006648:	2300      	movs	r3, #0
 800664a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800664c:	2300      	movs	r3, #0
 800664e:	60fb      	str	r3, [r7, #12]
 8006650:	2300      	movs	r3, #0
 8006652:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	3b01      	subs	r3, #1
 8006658:	2b0f      	cmp	r3, #15
 800665a:	f200 80af 	bhi.w	80067bc <HAL_RCCEx_GetPeriphCLKFreq+0x184>
 800665e:	a201      	add	r2, pc, #4	; (adr r2, 8006664 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8006660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006664:	0800673b 	.word	0x0800673b
 8006668:	080067a1 	.word	0x080067a1
 800666c:	080067bd 	.word	0x080067bd
 8006670:	0800672b 	.word	0x0800672b
 8006674:	080067bd 	.word	0x080067bd
 8006678:	080067bd 	.word	0x080067bd
 800667c:	080067bd 	.word	0x080067bd
 8006680:	08006733 	.word	0x08006733
 8006684:	080067bd 	.word	0x080067bd
 8006688:	080067bd 	.word	0x080067bd
 800668c:	080067bd 	.word	0x080067bd
 8006690:	080067bd 	.word	0x080067bd
 8006694:	080067bd 	.word	0x080067bd
 8006698:	080067bd 	.word	0x080067bd
 800669c:	080067bd 	.word	0x080067bd
 80066a0:	080066a5 	.word	0x080066a5
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80066a4:	4b4a      	ldr	r3, [pc, #296]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	60fb      	str	r3, [r7, #12]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80066aa:	4b49      	ldr	r3, [pc, #292]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f000 8084 	beq.w	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	0c9b      	lsrs	r3, r3, #18
 80066bc:	f003 030f 	and.w	r3, r3, #15
 80066c0:	4a44      	ldr	r2, [pc, #272]	; (80067d4 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>)
 80066c2:	5cd3      	ldrb	r3, [r2, r3]
 80066c4:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d015      	beq.n	80066fc <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80066d0:	4b3f      	ldr	r3, [pc, #252]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	0c5b      	lsrs	r3, r3, #17
 80066d6:	f003 0301 	and.w	r3, r3, #1
 80066da:	4a3f      	ldr	r2, [pc, #252]	; (80067d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>)
 80066dc:	5cd3      	ldrb	r3, [r2, r3]
 80066de:	617b      	str	r3, [r7, #20]
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00d      	beq.n	8006706 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80066ea:	4a3c      	ldr	r2, [pc, #240]	; (80067dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>)
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	fb02 f303 	mul.w	r3, r2, r3
 80066f8:	61fb      	str	r3, [r7, #28]
 80066fa:	e004      	b.n	8006706 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	4a38      	ldr	r2, [pc, #224]	; (80067e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>)
 8006700:	fb02 f303 	mul.w	r3, r2, r3
 8006704:	61fb      	str	r3, [r7, #28]
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006706:	4b32      	ldr	r3, [pc, #200]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800670e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006712:	d102      	bne.n	800671a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	61bb      	str	r3, [r7, #24]
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8006718:	e052      	b.n	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
          frequency = (pllclk * 2) / 3;
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	005b      	lsls	r3, r3, #1
 800671e:	4a31      	ldr	r2, [pc, #196]	; (80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>)
 8006720:	fba2 2303 	umull	r2, r3, r2, r3
 8006724:	085b      	lsrs	r3, r3, #1
 8006726:	61bb      	str	r3, [r7, #24]
      break;
 8006728:	e04a      	b.n	80067c0 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 800672a:	f7ff fe2b 	bl	8006384 <HAL_RCC_GetSysClockFreq>
 800672e:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8006730:	e049      	b.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8006732:	f7ff fe27 	bl	8006384 <HAL_RCC_GetSysClockFreq>
 8006736:	61b8      	str	r0, [r7, #24]
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8006738:	e045      	b.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 800673a:	4b25      	ldr	r3, [pc, #148]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	60fb      	str	r3, [r7, #12]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006746:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800674a:	d108      	bne.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x126>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f003 0302 	and.w	r3, r3, #2
 8006752:	2b00      	cmp	r3, #0
 8006754:	d003      	beq.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x126>
      {
        frequency = LSE_VALUE;
 8006756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800675a:	61bb      	str	r3, [r7, #24]
 800675c:	e01f      	b.n	800679e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006764:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006768:	d109      	bne.n	800677e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800676a:	4b19      	ldr	r3, [pc, #100]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800676c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676e:	f003 0302 	and.w	r3, r3, #2
 8006772:	2b00      	cmp	r3, #0
 8006774:	d003      	beq.n	800677e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSI_VALUE;
 8006776:	f649 4340 	movw	r3, #40000	; 0x9c40
 800677a:	61bb      	str	r3, [r7, #24]
 800677c:	e00f      	b.n	800679e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006784:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006788:	d11c      	bne.n	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 800678a:	4b11      	ldr	r3, [pc, #68]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d016      	beq.n	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
      {
        frequency = HSE_VALUE / 128U;
 8006796:	f24f 4324 	movw	r3, #62500	; 0xf424
 800679a:	61bb      	str	r3, [r7, #24]
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 800679c:	e012      	b.n	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
 800679e:	e011      	b.n	80067c4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80067a0:	f7ff fe62 	bl	8006468 <HAL_RCC_GetPCLK2Freq>
 80067a4:	4602      	mov	r2, r0
 80067a6:	4b0a      	ldr	r3, [pc, #40]	; (80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x198>)
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	0b9b      	lsrs	r3, r3, #14
 80067ac:	f003 0303 	and.w	r3, r3, #3
 80067b0:	3301      	adds	r3, #1
 80067b2:	005b      	lsls	r3, r3, #1
 80067b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067b8:	61bb      	str	r3, [r7, #24]
      break;
 80067ba:	e004      	b.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
    }
    default:
    {
      break;
 80067bc:	bf00      	nop
 80067be:	e002      	b.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 80067c0:	bf00      	nop
 80067c2:	e000      	b.n	80067c6 <HAL_RCCEx_GetPeriphCLKFreq+0x18e>
      break;
 80067c4:	bf00      	nop
    }
  }
  return (frequency);
 80067c6:	69bb      	ldr	r3, [r7, #24]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3720      	adds	r7, #32
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	40021000 	.word	0x40021000
 80067d4:	08010700 	.word	0x08010700
 80067d8:	08010710 	.word	0x08010710
 80067dc:	007a1200 	.word	0x007a1200
 80067e0:	003d0900 	.word	0x003d0900
 80067e4:	aaaaaaab 	.word	0xaaaaaaab

080067e8 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80067f0:	2300      	movs	r3, #0
 80067f2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d101      	bne.n	80067fe <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e07a      	b.n	80068f4 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	7c5b      	ldrb	r3, [r3, #17]
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2b00      	cmp	r3, #0
 8006806:	d105      	bne.n	8006814 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f7fc fa98 	bl	8002d44 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2202      	movs	r2, #2
 8006818:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 faea 	bl	8006df4 <HAL_RTC_WaitForSynchro>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d004      	beq.n	8006830 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2204      	movs	r2, #4
 800682a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e061      	b.n	80068f4 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 fba3 	bl	8006f7c <RTC_EnterInitMode>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d004      	beq.n	8006846 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2204      	movs	r2, #4
 8006840:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e056      	b.n	80068f4 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	685a      	ldr	r2, [r3, #4]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f022 0207 	bic.w	r2, r2, #7
 8006854:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d005      	beq.n	800686a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800685e:	4b27      	ldr	r3, [pc, #156]	; (80068fc <HAL_RTC_Init+0x114>)
 8006860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006862:	4a26      	ldr	r2, [pc, #152]	; (80068fc <HAL_RTC_Init+0x114>)
 8006864:	f023 0301 	bic.w	r3, r3, #1
 8006868:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800686a:	4b24      	ldr	r3, [pc, #144]	; (80068fc <HAL_RTC_Init+0x114>)
 800686c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800686e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	4921      	ldr	r1, [pc, #132]	; (80068fc <HAL_RTC_Init+0x114>)
 8006878:	4313      	orrs	r3, r2
 800687a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006884:	d003      	beq.n	800688e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	60fb      	str	r3, [r7, #12]
 800688c:	e00e      	b.n	80068ac <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800688e:	2001      	movs	r0, #1
 8006890:	f7ff fed2 	bl	8006638 <HAL_RCCEx_GetPeriphCLKFreq>
 8006894:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d104      	bne.n	80068a6 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2204      	movs	r2, #4
 80068a0:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e026      	b.n	80068f4 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	3b01      	subs	r3, #1
 80068aa:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	0c1a      	lsrs	r2, r3, #16
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f002 020f 	and.w	r2, r2, #15
 80068b8:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	b292      	uxth	r2, r2
 80068c2:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 fb81 	bl	8006fcc <RTC_ExitInitMode>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d004      	beq.n	80068da <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2204      	movs	r2, #4
 80068d4:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e00c      	b.n	80068f4 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2201      	movs	r2, #1
 80068ea:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80068f2:	2300      	movs	r3, #0
  }
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	40006c00 	.word	0x40006c00

08006900 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006900:	b590      	push	{r4, r7, lr}
 8006902:	b087      	sub	sp, #28
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 800690c:	2300      	movs	r3, #0
 800690e:	617b      	str	r3, [r7, #20]
 8006910:	2300      	movs	r3, #0
 8006912:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d002      	beq.n	8006920 <HAL_RTC_SetTime+0x20>
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d101      	bne.n	8006924 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e080      	b.n	8006a26 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	7c1b      	ldrb	r3, [r3, #16]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d101      	bne.n	8006930 <HAL_RTC_SetTime+0x30>
 800692c:	2302      	movs	r3, #2
 800692e:	e07a      	b.n	8006a26 <HAL_RTC_SetTime+0x126>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2201      	movs	r2, #1
 8006934:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2202      	movs	r2, #2
 800693a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d113      	bne.n	800696a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	461a      	mov	r2, r3
 8006948:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800694c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	785b      	ldrb	r3, [r3, #1]
 8006954:	4619      	mov	r1, r3
 8006956:	460b      	mov	r3, r1
 8006958:	011b      	lsls	r3, r3, #4
 800695a:	1a5b      	subs	r3, r3, r1
 800695c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800695e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8006960:	68ba      	ldr	r2, [r7, #8]
 8006962:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006964:	4413      	add	r3, r2
 8006966:	617b      	str	r3, [r7, #20]
 8006968:	e01e      	b.n	80069a8 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	4618      	mov	r0, r3
 8006970:	f000 fb71 	bl	8007056 <RTC_Bcd2ToByte>
 8006974:	4603      	mov	r3, r0
 8006976:	461a      	mov	r2, r3
 8006978:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800697c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	785b      	ldrb	r3, [r3, #1]
 8006984:	4618      	mov	r0, r3
 8006986:	f000 fb66 	bl	8007056 <RTC_Bcd2ToByte>
 800698a:	4603      	mov	r3, r0
 800698c:	461a      	mov	r2, r3
 800698e:	4613      	mov	r3, r2
 8006990:	011b      	lsls	r3, r3, #4
 8006992:	1a9b      	subs	r3, r3, r2
 8006994:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006996:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	789b      	ldrb	r3, [r3, #2]
 800699c:	4618      	mov	r0, r3
 800699e:	f000 fb5a 	bl	8007056 <RTC_Bcd2ToByte>
 80069a2:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80069a4:	4423      	add	r3, r4
 80069a6:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80069a8:	6979      	ldr	r1, [r7, #20]
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f000 fa7f 	bl	8006eae <RTC_WriteTimeCounter>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d007      	beq.n	80069c6 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2204      	movs	r2, #4
 80069ba:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e02f      	b.n	8006a26 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	685a      	ldr	r2, [r3, #4]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f022 0205 	bic.w	r2, r2, #5
 80069d4:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f000 fa90 	bl	8006efc <RTC_ReadAlarmCounter>
 80069dc:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e4:	d018      	beq.n	8006a18 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d214      	bcs.n	8006a18 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80069f4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80069f8:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80069fa:	6939      	ldr	r1, [r7, #16]
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f000 fa96 	bl	8006f2e <RTC_WriteAlarmCounter>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d007      	beq.n	8006a18 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2204      	movs	r2, #4
 8006a0c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2200      	movs	r2, #0
 8006a12:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e006      	b.n	8006a26 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2200      	movs	r2, #0
 8006a22:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8006a24:	2300      	movs	r3, #0
  }
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	371c      	adds	r7, #28
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd90      	pop	{r4, r7, pc}
	...

08006a30 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b088      	sub	sp, #32
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	61bb      	str	r3, [r7, #24]
 8006a40:	2300      	movs	r3, #0
 8006a42:	61fb      	str	r3, [r7, #28]
 8006a44:	2300      	movs	r3, #0
 8006a46:	617b      	str	r3, [r7, #20]
 8006a48:	2300      	movs	r3, #0
 8006a4a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d002      	beq.n	8006a58 <HAL_RTC_GetTime+0x28>
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d101      	bne.n	8006a5c <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e0b5      	b.n	8006bc8 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f003 0304 	and.w	r3, r3, #4
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d001      	beq.n	8006a6e <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e0ac      	b.n	8006bc8 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	f000 f9ed 	bl	8006e4e <RTC_ReadTimeCounter>
 8006a74:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	4a55      	ldr	r2, [pc, #340]	; (8006bd0 <HAL_RTC_GetTime+0x1a0>)
 8006a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a7e:	0adb      	lsrs	r3, r3, #11
 8006a80:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8006a82:	69ba      	ldr	r2, [r7, #24]
 8006a84:	4b52      	ldr	r3, [pc, #328]	; (8006bd0 <HAL_RTC_GetTime+0x1a0>)
 8006a86:	fba3 1302 	umull	r1, r3, r3, r2
 8006a8a:	0adb      	lsrs	r3, r3, #11
 8006a8c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8006a90:	fb01 f303 	mul.w	r3, r1, r3
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	4a4f      	ldr	r2, [pc, #316]	; (8006bd4 <HAL_RTC_GetTime+0x1a4>)
 8006a98:	fba2 2303 	umull	r2, r3, r2, r3
 8006a9c:	095b      	lsrs	r3, r3, #5
 8006a9e:	b2da      	uxtb	r2, r3
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	4a4a      	ldr	r2, [pc, #296]	; (8006bd0 <HAL_RTC_GetTime+0x1a0>)
 8006aa8:	fba2 1203 	umull	r1, r2, r2, r3
 8006aac:	0ad2      	lsrs	r2, r2, #11
 8006aae:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8006ab2:	fb01 f202 	mul.w	r2, r1, r2
 8006ab6:	1a9a      	subs	r2, r3, r2
 8006ab8:	4b46      	ldr	r3, [pc, #280]	; (8006bd4 <HAL_RTC_GetTime+0x1a4>)
 8006aba:	fba3 1302 	umull	r1, r3, r3, r2
 8006abe:	0959      	lsrs	r1, r3, #5
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	011b      	lsls	r3, r3, #4
 8006ac4:	1a5b      	subs	r3, r3, r1
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	1ad1      	subs	r1, r2, r3
 8006aca:	b2ca      	uxtb	r2, r1
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	2b17      	cmp	r3, #23
 8006ad4:	d955      	bls.n	8006b82 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	4a3f      	ldr	r2, [pc, #252]	; (8006bd8 <HAL_RTC_GetTime+0x1a8>)
 8006ada:	fba2 2303 	umull	r2, r3, r2, r3
 8006ade:	091b      	lsrs	r3, r3, #4
 8006ae0:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8006ae2:	6939      	ldr	r1, [r7, #16]
 8006ae4:	4b3c      	ldr	r3, [pc, #240]	; (8006bd8 <HAL_RTC_GetTime+0x1a8>)
 8006ae6:	fba3 2301 	umull	r2, r3, r3, r1
 8006aea:	091a      	lsrs	r2, r3, #4
 8006aec:	4613      	mov	r3, r2
 8006aee:	005b      	lsls	r3, r3, #1
 8006af0:	4413      	add	r3, r2
 8006af2:	00db      	lsls	r3, r3, #3
 8006af4:	1aca      	subs	r2, r1, r3
 8006af6:	b2d2      	uxtb	r2, r2
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f000 f9fd 	bl	8006efc <RTC_ReadAlarmCounter>
 8006b02:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b0a:	d008      	beq.n	8006b1e <HAL_RTC_GetTime+0xee>
 8006b0c:	69fa      	ldr	r2, [r7, #28]
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d904      	bls.n	8006b1e <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8006b14:	69fa      	ldr	r2, [r7, #28]
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	61fb      	str	r3, [r7, #28]
 8006b1c:	e002      	b.n	8006b24 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8006b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b22:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	4a2d      	ldr	r2, [pc, #180]	; (8006bdc <HAL_RTC_GetTime+0x1ac>)
 8006b28:	fb02 f303 	mul.w	r3, r2, r3
 8006b2c:	69ba      	ldr	r2, [r7, #24]
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006b32:	69b9      	ldr	r1, [r7, #24]
 8006b34:	68f8      	ldr	r0, [r7, #12]
 8006b36:	f000 f9ba 	bl	8006eae <RTC_WriteTimeCounter>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d001      	beq.n	8006b44 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e041      	b.n	8006bc8 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b4a:	d00c      	beq.n	8006b66 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8006b4c:	69fa      	ldr	r2, [r7, #28]
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	4413      	add	r3, r2
 8006b52:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006b54:	69f9      	ldr	r1, [r7, #28]
 8006b56:	68f8      	ldr	r0, [r7, #12]
 8006b58:	f000 f9e9 	bl	8006f2e <RTC_WriteAlarmCounter>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00a      	beq.n	8006b78 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e030      	b.n	8006bc8 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006b66:	69f9      	ldr	r1, [r7, #28]
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	f000 f9e0 	bl	8006f2e <RTC_WriteAlarmCounter>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d001      	beq.n	8006b78 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e027      	b.n	8006bc8 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8006b78:	6979      	ldr	r1, [r7, #20]
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	f000 fa88 	bl	8007090 <RTC_DateUpdate>
 8006b80:	e003      	b.n	8006b8a <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	b2da      	uxtb	r2, r3
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d01a      	beq.n	8006bc6 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	4618      	mov	r0, r3
 8006b96:	f000 fa41 	bl	800701c <RTC_ByteToBcd2>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	785b      	ldrb	r3, [r3, #1]
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f000 fa38 	bl	800701c <RTC_ByteToBcd2>
 8006bac:	4603      	mov	r3, r0
 8006bae:	461a      	mov	r2, r3
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	789b      	ldrb	r3, [r3, #2]
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f000 fa2f 	bl	800701c <RTC_ByteToBcd2>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3720      	adds	r7, #32
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	91a2b3c5 	.word	0x91a2b3c5
 8006bd4:	88888889 	.word	0x88888889
 8006bd8:	aaaaaaab 	.word	0xaaaaaaab
 8006bdc:	00015180 	.word	0x00015180

08006be0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b088      	sub	sp, #32
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8006bec:	2300      	movs	r3, #0
 8006bee:	61fb      	str	r3, [r7, #28]
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	61bb      	str	r3, [r7, #24]
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d002      	beq.n	8006c04 <HAL_RTC_SetDate+0x24>
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d101      	bne.n	8006c08 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e097      	b.n	8006d38 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	7c1b      	ldrb	r3, [r3, #16]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d101      	bne.n	8006c14 <HAL_RTC_SetDate+0x34>
 8006c10:	2302      	movs	r3, #2
 8006c12:	e091      	b.n	8006d38 <HAL_RTC_SetDate+0x158>
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2201      	movs	r2, #1
 8006c18:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2202      	movs	r2, #2
 8006c1e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d10c      	bne.n	8006c40 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	78da      	ldrb	r2, [r3, #3]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	785a      	ldrb	r2, [r3, #1]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	789a      	ldrb	r2, [r3, #2]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	739a      	strb	r2, [r3, #14]
 8006c3e:	e01a      	b.n	8006c76 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	78db      	ldrb	r3, [r3, #3]
 8006c44:	4618      	mov	r0, r3
 8006c46:	f000 fa06 	bl	8007056 <RTC_Bcd2ToByte>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	785b      	ldrb	r3, [r3, #1]
 8006c56:	4618      	mov	r0, r3
 8006c58:	f000 f9fd 	bl	8007056 <RTC_Bcd2ToByte>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	461a      	mov	r2, r3
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	789b      	ldrb	r3, [r3, #2]
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f000 f9f4 	bl	8007056 <RTC_Bcd2ToByte>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	461a      	mov	r2, r3
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	7bdb      	ldrb	r3, [r3, #15]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	7b59      	ldrb	r1, [r3, #13]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	7b9b      	ldrb	r3, [r3, #14]
 8006c84:	461a      	mov	r2, r3
 8006c86:	f000 fadf 	bl	8007248 <RTC_WeekDayNum>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	7b1a      	ldrb	r2, [r3, #12]
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8006c9a:	68f8      	ldr	r0, [r7, #12]
 8006c9c:	f000 f8d7 	bl	8006e4e <RTC_ReadTimeCounter>
 8006ca0:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	4a26      	ldr	r2, [pc, #152]	; (8006d40 <HAL_RTC_SetDate+0x160>)
 8006ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8006caa:	0adb      	lsrs	r3, r3, #11
 8006cac:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	2b18      	cmp	r3, #24
 8006cb2:	d93a      	bls.n	8006d2a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	4a23      	ldr	r2, [pc, #140]	; (8006d44 <HAL_RTC_SetDate+0x164>)
 8006cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cbc:	091b      	lsrs	r3, r3, #4
 8006cbe:	4a22      	ldr	r2, [pc, #136]	; (8006d48 <HAL_RTC_SetDate+0x168>)
 8006cc0:	fb02 f303 	mul.w	r3, r2, r3
 8006cc4:	69fa      	ldr	r2, [r7, #28]
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006cca:	69f9      	ldr	r1, [r7, #28]
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f000 f8ee 	bl	8006eae <RTC_WriteTimeCounter>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d007      	beq.n	8006ce8 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2204      	movs	r2, #4
 8006cdc:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	e027      	b.n	8006d38 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f000 f907 	bl	8006efc <RTC_ReadAlarmCounter>
 8006cee:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cf6:	d018      	beq.n	8006d2a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8006cf8:	69ba      	ldr	r2, [r7, #24]
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d214      	bcs.n	8006d2a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8006d06:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006d0a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006d0c:	69b9      	ldr	r1, [r7, #24]
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f000 f90d 	bl	8006f2e <RTC_WriteAlarmCounter>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d007      	beq.n	8006d2a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2204      	movs	r2, #4
 8006d1e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2200      	movs	r2, #0
 8006d24:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e006      	b.n	8006d38 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3720      	adds	r7, #32
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	91a2b3c5 	.word	0x91a2b3c5
 8006d44:	aaaaaaab 	.word	0xaaaaaaab
 8006d48:	00015180 	.word	0x00015180

08006d4c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b086      	sub	sp, #24
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8006d58:	f107 0314 	add.w	r3, r7, #20
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	460a      	mov	r2, r1
 8006d60:	801a      	strh	r2, [r3, #0]
 8006d62:	460a      	mov	r2, r1
 8006d64:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d002      	beq.n	8006d72 <HAL_RTC_GetDate+0x26>
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d101      	bne.n	8006d76 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e03a      	b.n	8006dec <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8006d76:	f107 0314 	add.w	r3, r7, #20
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	68f8      	ldr	r0, [r7, #12]
 8006d80:	f7ff fe56 	bl	8006a30 <HAL_RTC_GetTime>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d001      	beq.n	8006d8e <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e02e      	b.n	8006dec <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	7b1a      	ldrb	r2, [r3, #12]
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	7bda      	ldrb	r2, [r3, #15]
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	7b5a      	ldrb	r2, [r3, #13]
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	7b9a      	ldrb	r2, [r3, #14]
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d01a      	beq.n	8006dea <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	78db      	ldrb	r3, [r3, #3]
 8006db8:	4618      	mov	r0, r3
 8006dba:	f000 f92f 	bl	800701c <RTC_ByteToBcd2>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	785b      	ldrb	r3, [r3, #1]
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f000 f926 	bl	800701c <RTC_ByteToBcd2>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	789b      	ldrb	r3, [r3, #2]
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f000 f91d 	bl	800701c <RTC_ByteToBcd2>
 8006de2:	4603      	mov	r3, r0
 8006de4:	461a      	mov	r2, r3
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3718      	adds	r7, #24
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d101      	bne.n	8006e0a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e01d      	b.n	8006e46 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	685a      	ldr	r2, [r3, #4]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f022 0208 	bic.w	r2, r2, #8
 8006e18:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006e1a:	f7fc fc4f 	bl	80036bc <HAL_GetTick>
 8006e1e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8006e20:	e009      	b.n	8006e36 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006e22:	f7fc fc4b 	bl	80036bc <HAL_GetTick>
 8006e26:	4602      	mov	r2, r0
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e30:	d901      	bls.n	8006e36 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8006e32:	2303      	movs	r3, #3
 8006e34:	e007      	b.n	8006e46 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	f003 0308 	and.w	r3, r3, #8
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d0ee      	beq.n	8006e22 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3710      	adds	r7, #16
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b087      	sub	sp, #28
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8006e56:	2300      	movs	r3, #0
 8006e58:	827b      	strh	r3, [r7, #18]
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	823b      	strh	r3, [r7, #16]
 8006e5e:	2300      	movs	r3, #0
 8006e60:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8006e62:	2300      	movs	r3, #0
 8006e64:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	699b      	ldr	r3, [r3, #24]
 8006e6c:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	69db      	ldr	r3, [r3, #28]
 8006e74:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	699b      	ldr	r3, [r3, #24]
 8006e7c:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8006e7e:	8a7a      	ldrh	r2, [r7, #18]
 8006e80:	8a3b      	ldrh	r3, [r7, #16]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d008      	beq.n	8006e98 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8006e86:	8a3b      	ldrh	r3, [r7, #16]
 8006e88:	041a      	lsls	r2, r3, #16
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	69db      	ldr	r3, [r3, #28]
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	4313      	orrs	r3, r2
 8006e94:	617b      	str	r3, [r7, #20]
 8006e96:	e004      	b.n	8006ea2 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8006e98:	8a7b      	ldrh	r3, [r7, #18]
 8006e9a:	041a      	lsls	r2, r3, #16
 8006e9c:	89fb      	ldrh	r3, [r7, #14]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8006ea2:	697b      	ldr	r3, [r7, #20]
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	371c      	adds	r7, #28
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bc80      	pop	{r7}
 8006eac:	4770      	bx	lr

08006eae <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b084      	sub	sp, #16
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
 8006eb6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 f85d 	bl	8006f7c <RTC_EnterInitMode>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d002      	beq.n	8006ece <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	73fb      	strb	r3, [r7, #15]
 8006ecc:	e011      	b.n	8006ef2 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	683a      	ldr	r2, [r7, #0]
 8006ed4:	0c12      	lsrs	r2, r2, #16
 8006ed6:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	683a      	ldr	r2, [r7, #0]
 8006ede:	b292      	uxth	r2, r2
 8006ee0:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f872 	bl	8006fcc <RTC_ExitInitMode>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d001      	beq.n	8006ef2 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8006f04:	2300      	movs	r3, #0
 8006f06:	81fb      	strh	r3, [r7, #14]
 8006f08:	2300      	movs	r3, #0
 8006f0a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	6a1b      	ldr	r3, [r3, #32]
 8006f12:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8006f1c:	89fb      	ldrh	r3, [r7, #14]
 8006f1e:	041a      	lsls	r2, r3, #16
 8006f20:	89bb      	ldrh	r3, [r7, #12]
 8006f22:	4313      	orrs	r3, r2
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3714      	adds	r7, #20
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bc80      	pop	{r7}
 8006f2c:	4770      	bx	lr

08006f2e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b084      	sub	sp, #16
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
 8006f36:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 f81d 	bl	8006f7c <RTC_EnterInitMode>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d002      	beq.n	8006f4e <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	73fb      	strb	r3, [r7, #15]
 8006f4c:	e011      	b.n	8006f72 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	683a      	ldr	r2, [r7, #0]
 8006f54:	0c12      	lsrs	r2, r2, #16
 8006f56:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	683a      	ldr	r2, [r7, #0]
 8006f5e:	b292      	uxth	r2, r2
 8006f60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 f832 	bl	8006fcc <RTC_ExitInitMode>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d001      	beq.n	8006f72 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3710      	adds	r7, #16
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f84:	2300      	movs	r3, #0
 8006f86:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8006f88:	f7fc fb98 	bl	80036bc <HAL_GetTick>
 8006f8c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006f8e:	e009      	b.n	8006fa4 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006f90:	f7fc fb94 	bl	80036bc <HAL_GetTick>
 8006f94:	4602      	mov	r2, r0
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	1ad3      	subs	r3, r2, r3
 8006f9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f9e:	d901      	bls.n	8006fa4 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	e00f      	b.n	8006fc4 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	f003 0320 	and.w	r3, r3, #32
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d0ee      	beq.n	8006f90 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	685a      	ldr	r2, [r3, #4]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f042 0210 	orr.w	r2, r2, #16
 8006fc0:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3710      	adds	r7, #16
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	685a      	ldr	r2, [r3, #4]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f022 0210 	bic.w	r2, r2, #16
 8006fe6:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006fe8:	f7fc fb68 	bl	80036bc <HAL_GetTick>
 8006fec:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006fee:	e009      	b.n	8007004 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006ff0:	f7fc fb64 	bl	80036bc <HAL_GetTick>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ffe:	d901      	bls.n	8007004 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8007000:	2303      	movs	r3, #3
 8007002:	e007      	b.n	8007014 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	f003 0320 	and.w	r3, r3, #32
 800700e:	2b00      	cmp	r3, #0
 8007010:	d0ee      	beq.n	8006ff0 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3710      	adds	r7, #16
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800701c:	b480      	push	{r7}
 800701e:	b085      	sub	sp, #20
 8007020:	af00      	add	r7, sp, #0
 8007022:	4603      	mov	r3, r0
 8007024:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007026:	2300      	movs	r3, #0
 8007028:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800702a:	e005      	b.n	8007038 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	3301      	adds	r3, #1
 8007030:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8007032:	79fb      	ldrb	r3, [r7, #7]
 8007034:	3b0a      	subs	r3, #10
 8007036:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8007038:	79fb      	ldrb	r3, [r7, #7]
 800703a:	2b09      	cmp	r3, #9
 800703c:	d8f6      	bhi.n	800702c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	b2db      	uxtb	r3, r3
 8007042:	011b      	lsls	r3, r3, #4
 8007044:	b2da      	uxtb	r2, r3
 8007046:	79fb      	ldrb	r3, [r7, #7]
 8007048:	4313      	orrs	r3, r2
 800704a:	b2db      	uxtb	r3, r3
}
 800704c:	4618      	mov	r0, r3
 800704e:	3714      	adds	r7, #20
 8007050:	46bd      	mov	sp, r7
 8007052:	bc80      	pop	{r7}
 8007054:	4770      	bx	lr

08007056 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007056:	b480      	push	{r7}
 8007058:	b085      	sub	sp, #20
 800705a:	af00      	add	r7, sp, #0
 800705c:	4603      	mov	r3, r0
 800705e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8007060:	2300      	movs	r3, #0
 8007062:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8007064:	79fb      	ldrb	r3, [r7, #7]
 8007066:	091b      	lsrs	r3, r3, #4
 8007068:	b2db      	uxtb	r3, r3
 800706a:	461a      	mov	r2, r3
 800706c:	4613      	mov	r3, r2
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	4413      	add	r3, r2
 8007072:	005b      	lsls	r3, r3, #1
 8007074:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8007076:	79fb      	ldrb	r3, [r7, #7]
 8007078:	f003 030f 	and.w	r3, r3, #15
 800707c:	b2da      	uxtb	r2, r3
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	b2db      	uxtb	r3, r3
 8007082:	4413      	add	r3, r2
 8007084:	b2db      	uxtb	r3, r3
}
 8007086:	4618      	mov	r0, r3
 8007088:	3714      	adds	r7, #20
 800708a:	46bd      	mov	sp, r7
 800708c:	bc80      	pop	{r7}
 800708e:	4770      	bx	lr

08007090 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b086      	sub	sp, #24
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800709a:	2300      	movs	r3, #0
 800709c:	617b      	str	r3, [r7, #20]
 800709e:	2300      	movs	r3, #0
 80070a0:	613b      	str	r3, [r7, #16]
 80070a2:	2300      	movs	r3, #0
 80070a4:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80070a6:	2300      	movs	r3, #0
 80070a8:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	7bdb      	ldrb	r3, [r3, #15]
 80070ae:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	7b5b      	ldrb	r3, [r3, #13]
 80070b4:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	7b9b      	ldrb	r3, [r3, #14]
 80070ba:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80070bc:	2300      	movs	r3, #0
 80070be:	60bb      	str	r3, [r7, #8]
 80070c0:	e06f      	b.n	80071a2 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d011      	beq.n	80070ec <RTC_DateUpdate+0x5c>
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	2b03      	cmp	r3, #3
 80070cc:	d00e      	beq.n	80070ec <RTC_DateUpdate+0x5c>
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	2b05      	cmp	r3, #5
 80070d2:	d00b      	beq.n	80070ec <RTC_DateUpdate+0x5c>
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	2b07      	cmp	r3, #7
 80070d8:	d008      	beq.n	80070ec <RTC_DateUpdate+0x5c>
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	2b08      	cmp	r3, #8
 80070de:	d005      	beq.n	80070ec <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	2b0a      	cmp	r3, #10
 80070e4:	d002      	beq.n	80070ec <RTC_DateUpdate+0x5c>
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	2b0c      	cmp	r3, #12
 80070ea:	d117      	bne.n	800711c <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2b1e      	cmp	r3, #30
 80070f0:	d803      	bhi.n	80070fa <RTC_DateUpdate+0x6a>
      {
        day++;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	3301      	adds	r3, #1
 80070f6:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80070f8:	e050      	b.n	800719c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	2b0c      	cmp	r3, #12
 80070fe:	d005      	beq.n	800710c <RTC_DateUpdate+0x7c>
        {
          month++;
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	3301      	adds	r3, #1
 8007104:	613b      	str	r3, [r7, #16]
          day = 1U;
 8007106:	2301      	movs	r3, #1
 8007108:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800710a:	e047      	b.n	800719c <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800710c:	2301      	movs	r3, #1
 800710e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8007110:	2301      	movs	r3, #1
 8007112:	60fb      	str	r3, [r7, #12]
          year++;
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	3301      	adds	r3, #1
 8007118:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800711a:	e03f      	b.n	800719c <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	2b04      	cmp	r3, #4
 8007120:	d008      	beq.n	8007134 <RTC_DateUpdate+0xa4>
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	2b06      	cmp	r3, #6
 8007126:	d005      	beq.n	8007134 <RTC_DateUpdate+0xa4>
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	2b09      	cmp	r3, #9
 800712c:	d002      	beq.n	8007134 <RTC_DateUpdate+0xa4>
 800712e:	693b      	ldr	r3, [r7, #16]
 8007130:	2b0b      	cmp	r3, #11
 8007132:	d10c      	bne.n	800714e <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2b1d      	cmp	r3, #29
 8007138:	d803      	bhi.n	8007142 <RTC_DateUpdate+0xb2>
      {
        day++;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	3301      	adds	r3, #1
 800713e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8007140:	e02c      	b.n	800719c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	3301      	adds	r3, #1
 8007146:	613b      	str	r3, [r7, #16]
        day = 1U;
 8007148:	2301      	movs	r3, #1
 800714a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800714c:	e026      	b.n	800719c <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	2b02      	cmp	r3, #2
 8007152:	d123      	bne.n	800719c <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2b1b      	cmp	r3, #27
 8007158:	d803      	bhi.n	8007162 <RTC_DateUpdate+0xd2>
      {
        day++;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	3301      	adds	r3, #1
 800715e:	60fb      	str	r3, [r7, #12]
 8007160:	e01c      	b.n	800719c <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2b1c      	cmp	r3, #28
 8007166:	d111      	bne.n	800718c <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	b29b      	uxth	r3, r3
 800716c:	4618      	mov	r0, r3
 800716e:	f000 f839 	bl	80071e4 <RTC_IsLeapYear>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d003      	beq.n	8007180 <RTC_DateUpdate+0xf0>
        {
          day++;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	3301      	adds	r3, #1
 800717c:	60fb      	str	r3, [r7, #12]
 800717e:	e00d      	b.n	800719c <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	3301      	adds	r3, #1
 8007184:	613b      	str	r3, [r7, #16]
          day = 1U;
 8007186:	2301      	movs	r3, #1
 8007188:	60fb      	str	r3, [r7, #12]
 800718a:	e007      	b.n	800719c <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2b1d      	cmp	r3, #29
 8007190:	d104      	bne.n	800719c <RTC_DateUpdate+0x10c>
      {
        month++;
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	3301      	adds	r3, #1
 8007196:	613b      	str	r3, [r7, #16]
        day = 1U;
 8007198:	2301      	movs	r3, #1
 800719a:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	3301      	adds	r3, #1
 80071a0:	60bb      	str	r3, [r7, #8]
 80071a2:	68ba      	ldr	r2, [r7, #8]
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d38b      	bcc.n	80070c2 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	b2da      	uxtb	r2, r3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	b2da      	uxtb	r2, r3
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	b2da      	uxtb	r2, r3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	b2d2      	uxtb	r2, r2
 80071ca:	4619      	mov	r1, r3
 80071cc:	6978      	ldr	r0, [r7, #20]
 80071ce:	f000 f83b 	bl	8007248 <RTC_WeekDayNum>
 80071d2:	4603      	mov	r3, r0
 80071d4:	461a      	mov	r2, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	731a      	strb	r2, [r3, #12]
}
 80071da:	bf00      	nop
 80071dc:	3718      	adds	r7, #24
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
	...

080071e4 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	4603      	mov	r3, r0
 80071ec:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80071ee:	88fb      	ldrh	r3, [r7, #6]
 80071f0:	f003 0303 	and.w	r3, r3, #3
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d001      	beq.n	80071fe <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80071fa:	2300      	movs	r3, #0
 80071fc:	e01d      	b.n	800723a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80071fe:	88fb      	ldrh	r3, [r7, #6]
 8007200:	4a10      	ldr	r2, [pc, #64]	; (8007244 <RTC_IsLeapYear+0x60>)
 8007202:	fba2 1203 	umull	r1, r2, r2, r3
 8007206:	0952      	lsrs	r2, r2, #5
 8007208:	2164      	movs	r1, #100	; 0x64
 800720a:	fb01 f202 	mul.w	r2, r1, r2
 800720e:	1a9b      	subs	r3, r3, r2
 8007210:	b29b      	uxth	r3, r3
 8007212:	2b00      	cmp	r3, #0
 8007214:	d001      	beq.n	800721a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8007216:	2301      	movs	r3, #1
 8007218:	e00f      	b.n	800723a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800721a:	88fb      	ldrh	r3, [r7, #6]
 800721c:	4a09      	ldr	r2, [pc, #36]	; (8007244 <RTC_IsLeapYear+0x60>)
 800721e:	fba2 1203 	umull	r1, r2, r2, r3
 8007222:	09d2      	lsrs	r2, r2, #7
 8007224:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007228:	fb01 f202 	mul.w	r2, r1, r2
 800722c:	1a9b      	subs	r3, r3, r2
 800722e:	b29b      	uxth	r3, r3
 8007230:	2b00      	cmp	r3, #0
 8007232:	d101      	bne.n	8007238 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8007234:	2301      	movs	r3, #1
 8007236:	e000      	b.n	800723a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8007238:	2300      	movs	r3, #0
  }
}
 800723a:	4618      	mov	r0, r3
 800723c:	370c      	adds	r7, #12
 800723e:	46bd      	mov	sp, r7
 8007240:	bc80      	pop	{r7}
 8007242:	4770      	bx	lr
 8007244:	51eb851f 	.word	0x51eb851f

08007248 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8007248:	b480      	push	{r7}
 800724a:	b085      	sub	sp, #20
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	460b      	mov	r3, r1
 8007252:	70fb      	strb	r3, [r7, #3]
 8007254:	4613      	mov	r3, r2
 8007256:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8007258:	2300      	movs	r3, #0
 800725a:	60bb      	str	r3, [r7, #8]
 800725c:	2300      	movs	r3, #0
 800725e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8007266:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8007268:	78fb      	ldrb	r3, [r7, #3]
 800726a:	2b02      	cmp	r3, #2
 800726c:	d82d      	bhi.n	80072ca <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800726e:	78fa      	ldrb	r2, [r7, #3]
 8007270:	4613      	mov	r3, r2
 8007272:	005b      	lsls	r3, r3, #1
 8007274:	4413      	add	r3, r2
 8007276:	00db      	lsls	r3, r3, #3
 8007278:	1a9b      	subs	r3, r3, r2
 800727a:	4a2c      	ldr	r2, [pc, #176]	; (800732c <RTC_WeekDayNum+0xe4>)
 800727c:	fba2 2303 	umull	r2, r3, r2, r3
 8007280:	085a      	lsrs	r2, r3, #1
 8007282:	78bb      	ldrb	r3, [r7, #2]
 8007284:	441a      	add	r2, r3
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	441a      	add	r2, r3
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	3b01      	subs	r3, #1
 800728e:	089b      	lsrs	r3, r3, #2
 8007290:	441a      	add	r2, r3
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	3b01      	subs	r3, #1
 8007296:	4926      	ldr	r1, [pc, #152]	; (8007330 <RTC_WeekDayNum+0xe8>)
 8007298:	fba1 1303 	umull	r1, r3, r1, r3
 800729c:	095b      	lsrs	r3, r3, #5
 800729e:	1ad2      	subs	r2, r2, r3
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	3b01      	subs	r3, #1
 80072a4:	4922      	ldr	r1, [pc, #136]	; (8007330 <RTC_WeekDayNum+0xe8>)
 80072a6:	fba1 1303 	umull	r1, r3, r1, r3
 80072aa:	09db      	lsrs	r3, r3, #7
 80072ac:	4413      	add	r3, r2
 80072ae:	1d1a      	adds	r2, r3, #4
 80072b0:	4b20      	ldr	r3, [pc, #128]	; (8007334 <RTC_WeekDayNum+0xec>)
 80072b2:	fba3 1302 	umull	r1, r3, r3, r2
 80072b6:	1ad1      	subs	r1, r2, r3
 80072b8:	0849      	lsrs	r1, r1, #1
 80072ba:	440b      	add	r3, r1
 80072bc:	0899      	lsrs	r1, r3, #2
 80072be:	460b      	mov	r3, r1
 80072c0:	00db      	lsls	r3, r3, #3
 80072c2:	1a5b      	subs	r3, r3, r1
 80072c4:	1ad3      	subs	r3, r2, r3
 80072c6:	60fb      	str	r3, [r7, #12]
 80072c8:	e029      	b.n	800731e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80072ca:	78fa      	ldrb	r2, [r7, #3]
 80072cc:	4613      	mov	r3, r2
 80072ce:	005b      	lsls	r3, r3, #1
 80072d0:	4413      	add	r3, r2
 80072d2:	00db      	lsls	r3, r3, #3
 80072d4:	1a9b      	subs	r3, r3, r2
 80072d6:	4a15      	ldr	r2, [pc, #84]	; (800732c <RTC_WeekDayNum+0xe4>)
 80072d8:	fba2 2303 	umull	r2, r3, r2, r3
 80072dc:	085a      	lsrs	r2, r3, #1
 80072de:	78bb      	ldrb	r3, [r7, #2]
 80072e0:	441a      	add	r2, r3
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	441a      	add	r2, r3
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	089b      	lsrs	r3, r3, #2
 80072ea:	441a      	add	r2, r3
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	4910      	ldr	r1, [pc, #64]	; (8007330 <RTC_WeekDayNum+0xe8>)
 80072f0:	fba1 1303 	umull	r1, r3, r1, r3
 80072f4:	095b      	lsrs	r3, r3, #5
 80072f6:	1ad2      	subs	r2, r2, r3
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	490d      	ldr	r1, [pc, #52]	; (8007330 <RTC_WeekDayNum+0xe8>)
 80072fc:	fba1 1303 	umull	r1, r3, r1, r3
 8007300:	09db      	lsrs	r3, r3, #7
 8007302:	4413      	add	r3, r2
 8007304:	1c9a      	adds	r2, r3, #2
 8007306:	4b0b      	ldr	r3, [pc, #44]	; (8007334 <RTC_WeekDayNum+0xec>)
 8007308:	fba3 1302 	umull	r1, r3, r3, r2
 800730c:	1ad1      	subs	r1, r2, r3
 800730e:	0849      	lsrs	r1, r1, #1
 8007310:	440b      	add	r3, r1
 8007312:	0899      	lsrs	r1, r3, #2
 8007314:	460b      	mov	r3, r1
 8007316:	00db      	lsls	r3, r3, #3
 8007318:	1a5b      	subs	r3, r3, r1
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	b2db      	uxtb	r3, r3
}
 8007322:	4618      	mov	r0, r3
 8007324:	3714      	adds	r7, #20
 8007326:	46bd      	mov	sp, r7
 8007328:	bc80      	pop	{r7}
 800732a:	4770      	bx	lr
 800732c:	38e38e39 	.word	0x38e38e39
 8007330:	51eb851f 	.word	0x51eb851f
 8007334:	24924925 	.word	0x24924925

08007338 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d101      	bne.n	800734a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e076      	b.n	8007438 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734e:	2b00      	cmp	r3, #0
 8007350:	d108      	bne.n	8007364 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800735a:	d009      	beq.n	8007370 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	61da      	str	r2, [r3, #28]
 8007362:	e005      	b.n	8007370 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800737c:	b2db      	uxtb	r3, r3
 800737e:	2b00      	cmp	r3, #0
 8007380:	d106      	bne.n	8007390 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f7fb fec4 	bl	8003118 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2202      	movs	r2, #2
 8007394:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80073b8:	431a      	orrs	r2, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80073c2:	431a      	orrs	r2, r3
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	f003 0302 	and.w	r3, r3, #2
 80073cc:	431a      	orrs	r2, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	695b      	ldr	r3, [r3, #20]
 80073d2:	f003 0301 	and.w	r3, r3, #1
 80073d6:	431a      	orrs	r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80073e0:	431a      	orrs	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	69db      	ldr	r3, [r3, #28]
 80073e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073ea:	431a      	orrs	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a1b      	ldr	r3, [r3, #32]
 80073f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073f4:	ea42 0103 	orr.w	r1, r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	430a      	orrs	r2, r1
 8007406:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	699b      	ldr	r3, [r3, #24]
 800740c:	0c1a      	lsrs	r2, r3, #16
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f002 0204 	and.w	r2, r2, #4
 8007416:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	69da      	ldr	r2, [r3, #28]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007426:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2201      	movs	r2, #1
 8007432:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007436:	2300      	movs	r3, #0
}
 8007438:	4618      	mov	r0, r3
 800743a:	3708      	adds	r7, #8
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d101      	bne.n	8007452 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	e042      	b.n	80074d8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007458:	b2db      	uxtb	r3, r3
 800745a:	2b00      	cmp	r3, #0
 800745c:	d106      	bne.n	800746c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f7fc f814 	bl	8003494 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2224      	movs	r2, #36	; 0x24
 8007470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	68da      	ldr	r2, [r3, #12]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007482:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 f91d 	bl	80076c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	691a      	ldr	r2, [r3, #16]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007498:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	695a      	ldr	r2, [r3, #20]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	68da      	ldr	r2, [r3, #12]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2220      	movs	r2, #32
 80074c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2220      	movs	r2, #32
 80074cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3708      	adds	r7, #8
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b08a      	sub	sp, #40	; 0x28
 80074e4:	af02      	add	r7, sp, #8
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	60b9      	str	r1, [r7, #8]
 80074ea:	603b      	str	r3, [r7, #0]
 80074ec:	4613      	mov	r3, r2
 80074ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80074f0:	2300      	movs	r3, #0
 80074f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	2b20      	cmp	r3, #32
 80074fe:	d16d      	bne.n	80075dc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d002      	beq.n	800750c <HAL_UART_Transmit+0x2c>
 8007506:	88fb      	ldrh	r3, [r7, #6]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d101      	bne.n	8007510 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800750c:	2301      	movs	r3, #1
 800750e:	e066      	b.n	80075de <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2200      	movs	r2, #0
 8007514:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2221      	movs	r2, #33	; 0x21
 800751a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800751e:	f7fc f8cd 	bl	80036bc <HAL_GetTick>
 8007522:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	88fa      	ldrh	r2, [r7, #6]
 8007528:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	88fa      	ldrh	r2, [r7, #6]
 800752e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007538:	d108      	bne.n	800754c <HAL_UART_Transmit+0x6c>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	691b      	ldr	r3, [r3, #16]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d104      	bne.n	800754c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007542:	2300      	movs	r3, #0
 8007544:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	61bb      	str	r3, [r7, #24]
 800754a:	e003      	b.n	8007554 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007550:	2300      	movs	r3, #0
 8007552:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007554:	e02a      	b.n	80075ac <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	9300      	str	r3, [sp, #0]
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	2200      	movs	r2, #0
 800755e:	2180      	movs	r1, #128	; 0x80
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f000 f840 	bl	80075e6 <UART_WaitOnFlagUntilTimeout>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d001      	beq.n	8007570 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800756c:	2303      	movs	r3, #3
 800756e:	e036      	b.n	80075de <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d10b      	bne.n	800758e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	881b      	ldrh	r3, [r3, #0]
 800757a:	461a      	mov	r2, r3
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007584:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	3302      	adds	r3, #2
 800758a:	61bb      	str	r3, [r7, #24]
 800758c:	e007      	b.n	800759e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	781a      	ldrb	r2, [r3, #0]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	3301      	adds	r3, #1
 800759c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	3b01      	subs	r3, #1
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1cf      	bne.n	8007556 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	9300      	str	r3, [sp, #0]
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	2200      	movs	r2, #0
 80075be:	2140      	movs	r1, #64	; 0x40
 80075c0:	68f8      	ldr	r0, [r7, #12]
 80075c2:	f000 f810 	bl	80075e6 <UART_WaitOnFlagUntilTimeout>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d001      	beq.n	80075d0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80075cc:	2303      	movs	r3, #3
 80075ce:	e006      	b.n	80075de <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2220      	movs	r2, #32
 80075d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80075d8:	2300      	movs	r3, #0
 80075da:	e000      	b.n	80075de <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80075dc:	2302      	movs	r3, #2
  }
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3720      	adds	r7, #32
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80075e6:	b580      	push	{r7, lr}
 80075e8:	b090      	sub	sp, #64	; 0x40
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	60f8      	str	r0, [r7, #12]
 80075ee:	60b9      	str	r1, [r7, #8]
 80075f0:	603b      	str	r3, [r7, #0]
 80075f2:	4613      	mov	r3, r2
 80075f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075f6:	e050      	b.n	800769a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075fe:	d04c      	beq.n	800769a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007600:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007602:	2b00      	cmp	r3, #0
 8007604:	d007      	beq.n	8007616 <UART_WaitOnFlagUntilTimeout+0x30>
 8007606:	f7fc f859 	bl	80036bc <HAL_GetTick>
 800760a:	4602      	mov	r2, r0
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	1ad3      	subs	r3, r2, r3
 8007610:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007612:	429a      	cmp	r2, r3
 8007614:	d241      	bcs.n	800769a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	330c      	adds	r3, #12
 800761c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007620:	e853 3f00 	ldrex	r3, [r3]
 8007624:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007628:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800762c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	330c      	adds	r3, #12
 8007634:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007636:	637a      	str	r2, [r7, #52]	; 0x34
 8007638:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800763c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800763e:	e841 2300 	strex	r3, r2, [r1]
 8007642:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1e5      	bne.n	8007616 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	3314      	adds	r3, #20
 8007650:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	e853 3f00 	ldrex	r3, [r3]
 8007658:	613b      	str	r3, [r7, #16]
   return(result);
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	f023 0301 	bic.w	r3, r3, #1
 8007660:	63bb      	str	r3, [r7, #56]	; 0x38
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	3314      	adds	r3, #20
 8007668:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800766a:	623a      	str	r2, [r7, #32]
 800766c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766e:	69f9      	ldr	r1, [r7, #28]
 8007670:	6a3a      	ldr	r2, [r7, #32]
 8007672:	e841 2300 	strex	r3, r2, [r1]
 8007676:	61bb      	str	r3, [r7, #24]
   return(result);
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d1e5      	bne.n	800764a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2220      	movs	r2, #32
 8007682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2220      	movs	r2, #32
 800768a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2200      	movs	r2, #0
 8007692:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8007696:	2303      	movs	r3, #3
 8007698:	e00f      	b.n	80076ba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	4013      	ands	r3, r2
 80076a4:	68ba      	ldr	r2, [r7, #8]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	bf0c      	ite	eq
 80076aa:	2301      	moveq	r3, #1
 80076ac:	2300      	movne	r3, #0
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	461a      	mov	r2, r3
 80076b2:	79fb      	ldrb	r3, [r7, #7]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d09f      	beq.n	80075f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3740      	adds	r7, #64	; 0x40
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
	...

080076c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	691b      	ldr	r3, [r3, #16]
 80076d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	68da      	ldr	r2, [r3, #12]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	430a      	orrs	r2, r1
 80076e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	689a      	ldr	r2, [r3, #8]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	431a      	orrs	r2, r3
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	695b      	ldr	r3, [r3, #20]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80076fe:	f023 030c 	bic.w	r3, r3, #12
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	6812      	ldr	r2, [r2, #0]
 8007706:	68b9      	ldr	r1, [r7, #8]
 8007708:	430b      	orrs	r3, r1
 800770a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	695b      	ldr	r3, [r3, #20]
 8007712:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	699a      	ldr	r2, [r3, #24]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	430a      	orrs	r2, r1
 8007720:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a2c      	ldr	r2, [pc, #176]	; (80077d8 <UART_SetConfig+0x114>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d103      	bne.n	8007734 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800772c:	f7fe fe9c 	bl	8006468 <HAL_RCC_GetPCLK2Freq>
 8007730:	60f8      	str	r0, [r7, #12]
 8007732:	e002      	b.n	800773a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007734:	f7fe fe84 	bl	8006440 <HAL_RCC_GetPCLK1Freq>
 8007738:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	4613      	mov	r3, r2
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	4413      	add	r3, r2
 8007742:	009a      	lsls	r2, r3, #2
 8007744:	441a      	add	r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007750:	4a22      	ldr	r2, [pc, #136]	; (80077dc <UART_SetConfig+0x118>)
 8007752:	fba2 2303 	umull	r2, r3, r2, r3
 8007756:	095b      	lsrs	r3, r3, #5
 8007758:	0119      	lsls	r1, r3, #4
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	4613      	mov	r3, r2
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	4413      	add	r3, r2
 8007762:	009a      	lsls	r2, r3, #2
 8007764:	441a      	add	r2, r3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007770:	4b1a      	ldr	r3, [pc, #104]	; (80077dc <UART_SetConfig+0x118>)
 8007772:	fba3 0302 	umull	r0, r3, r3, r2
 8007776:	095b      	lsrs	r3, r3, #5
 8007778:	2064      	movs	r0, #100	; 0x64
 800777a:	fb00 f303 	mul.w	r3, r0, r3
 800777e:	1ad3      	subs	r3, r2, r3
 8007780:	011b      	lsls	r3, r3, #4
 8007782:	3332      	adds	r3, #50	; 0x32
 8007784:	4a15      	ldr	r2, [pc, #84]	; (80077dc <UART_SetConfig+0x118>)
 8007786:	fba2 2303 	umull	r2, r3, r2, r3
 800778a:	095b      	lsrs	r3, r3, #5
 800778c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007790:	4419      	add	r1, r3
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	4613      	mov	r3, r2
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	4413      	add	r3, r2
 800779a:	009a      	lsls	r2, r3, #2
 800779c:	441a      	add	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80077a8:	4b0c      	ldr	r3, [pc, #48]	; (80077dc <UART_SetConfig+0x118>)
 80077aa:	fba3 0302 	umull	r0, r3, r3, r2
 80077ae:	095b      	lsrs	r3, r3, #5
 80077b0:	2064      	movs	r0, #100	; 0x64
 80077b2:	fb00 f303 	mul.w	r3, r0, r3
 80077b6:	1ad3      	subs	r3, r2, r3
 80077b8:	011b      	lsls	r3, r3, #4
 80077ba:	3332      	adds	r3, #50	; 0x32
 80077bc:	4a07      	ldr	r2, [pc, #28]	; (80077dc <UART_SetConfig+0x118>)
 80077be:	fba2 2303 	umull	r2, r3, r2, r3
 80077c2:	095b      	lsrs	r3, r3, #5
 80077c4:	f003 020f 	and.w	r2, r3, #15
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	440a      	add	r2, r1
 80077ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80077d0:	bf00      	nop
 80077d2:	3710      	adds	r7, #16
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	40013800 	.word	0x40013800
 80077dc:	51eb851f 	.word	0x51eb851f

080077e0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077e6:	f3ef 8305 	mrs	r3, IPSR
 80077ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80077ec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10f      	bne.n	8007812 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077f2:	f3ef 8310 	mrs	r3, PRIMASK
 80077f6:	607b      	str	r3, [r7, #4]
  return(result);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d109      	bne.n	8007812 <osKernelInitialize+0x32>
 80077fe:	4b10      	ldr	r3, [pc, #64]	; (8007840 <osKernelInitialize+0x60>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2b02      	cmp	r3, #2
 8007804:	d109      	bne.n	800781a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007806:	f3ef 8311 	mrs	r3, BASEPRI
 800780a:	603b      	str	r3, [r7, #0]
  return(result);
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d003      	beq.n	800781a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007812:	f06f 0305 	mvn.w	r3, #5
 8007816:	60fb      	str	r3, [r7, #12]
 8007818:	e00c      	b.n	8007834 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800781a:	4b09      	ldr	r3, [pc, #36]	; (8007840 <osKernelInitialize+0x60>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d105      	bne.n	800782e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8007822:	4b07      	ldr	r3, [pc, #28]	; (8007840 <osKernelInitialize+0x60>)
 8007824:	2201      	movs	r2, #1
 8007826:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007828:	2300      	movs	r3, #0
 800782a:	60fb      	str	r3, [r7, #12]
 800782c:	e002      	b.n	8007834 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800782e:	f04f 33ff 	mov.w	r3, #4294967295
 8007832:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007834:	68fb      	ldr	r3, [r7, #12]
}
 8007836:	4618      	mov	r0, r3
 8007838:	3714      	adds	r7, #20
 800783a:	46bd      	mov	sp, r7
 800783c:	bc80      	pop	{r7}
 800783e:	4770      	bx	lr
 8007840:	20000560 	.word	0x20000560

08007844 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800784a:	f002 f891 	bl	8009970 <xTaskGetSchedulerState>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d004      	beq.n	800785e <osKernelGetState+0x1a>
 8007854:	2b02      	cmp	r3, #2
 8007856:	d105      	bne.n	8007864 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8007858:	2302      	movs	r3, #2
 800785a:	607b      	str	r3, [r7, #4]
      break;
 800785c:	e00c      	b.n	8007878 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800785e:	2303      	movs	r3, #3
 8007860:	607b      	str	r3, [r7, #4]
      break;
 8007862:	e009      	b.n	8007878 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8007864:	4b07      	ldr	r3, [pc, #28]	; (8007884 <osKernelGetState+0x40>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d102      	bne.n	8007872 <osKernelGetState+0x2e>
        state = osKernelReady;
 800786c:	2301      	movs	r3, #1
 800786e:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8007870:	e001      	b.n	8007876 <osKernelGetState+0x32>
        state = osKernelInactive;
 8007872:	2300      	movs	r3, #0
 8007874:	607b      	str	r3, [r7, #4]
      break;
 8007876:	bf00      	nop
  }

  return (state);
 8007878:	687b      	ldr	r3, [r7, #4]
}
 800787a:	4618      	mov	r0, r3
 800787c:	3708      	adds	r7, #8
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	20000560 	.word	0x20000560

08007888 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800788e:	f3ef 8305 	mrs	r3, IPSR
 8007892:	60bb      	str	r3, [r7, #8]
  return(result);
 8007894:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007896:	2b00      	cmp	r3, #0
 8007898:	d10f      	bne.n	80078ba <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800789a:	f3ef 8310 	mrs	r3, PRIMASK
 800789e:	607b      	str	r3, [r7, #4]
  return(result);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d109      	bne.n	80078ba <osKernelStart+0x32>
 80078a6:	4b11      	ldr	r3, [pc, #68]	; (80078ec <osKernelStart+0x64>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d109      	bne.n	80078c2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80078ae:	f3ef 8311 	mrs	r3, BASEPRI
 80078b2:	603b      	str	r3, [r7, #0]
  return(result);
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d003      	beq.n	80078c2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80078ba:	f06f 0305 	mvn.w	r3, #5
 80078be:	60fb      	str	r3, [r7, #12]
 80078c0:	e00e      	b.n	80078e0 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80078c2:	4b0a      	ldr	r3, [pc, #40]	; (80078ec <osKernelStart+0x64>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d107      	bne.n	80078da <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80078ca:	4b08      	ldr	r3, [pc, #32]	; (80078ec <osKernelStart+0x64>)
 80078cc:	2202      	movs	r2, #2
 80078ce:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80078d0:	f001 fbec 	bl	80090ac <vTaskStartScheduler>
      stat = osOK;
 80078d4:	2300      	movs	r3, #0
 80078d6:	60fb      	str	r3, [r7, #12]
 80078d8:	e002      	b.n	80078e0 <osKernelStart+0x58>
    } else {
      stat = osError;
 80078da:	f04f 33ff 	mov.w	r3, #4294967295
 80078de:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80078e0:	68fb      	ldr	r3, [r7, #12]
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3710      	adds	r7, #16
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	20000560 	.word	0x20000560

080078f0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b092      	sub	sp, #72	; 0x48
 80078f4:	af04      	add	r7, sp, #16
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80078fc:	2300      	movs	r3, #0
 80078fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007900:	f3ef 8305 	mrs	r3, IPSR
 8007904:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007906:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8007908:	2b00      	cmp	r3, #0
 800790a:	f040 8094 	bne.w	8007a36 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800790e:	f3ef 8310 	mrs	r3, PRIMASK
 8007912:	623b      	str	r3, [r7, #32]
  return(result);
 8007914:	6a3b      	ldr	r3, [r7, #32]
 8007916:	2b00      	cmp	r3, #0
 8007918:	f040 808d 	bne.w	8007a36 <osThreadNew+0x146>
 800791c:	4b48      	ldr	r3, [pc, #288]	; (8007a40 <osThreadNew+0x150>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2b02      	cmp	r3, #2
 8007922:	d106      	bne.n	8007932 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007924:	f3ef 8311 	mrs	r3, BASEPRI
 8007928:	61fb      	str	r3, [r7, #28]
  return(result);
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	2b00      	cmp	r3, #0
 800792e:	f040 8082 	bne.w	8007a36 <osThreadNew+0x146>
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d07e      	beq.n	8007a36 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8007938:	2380      	movs	r3, #128	; 0x80
 800793a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800793c:	2318      	movs	r3, #24
 800793e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8007940:	2300      	movs	r3, #0
 8007942:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8007944:	f107 031b 	add.w	r3, r7, #27
 8007948:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800794a:	f04f 33ff 	mov.w	r3, #4294967295
 800794e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d045      	beq.n	80079e2 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d002      	beq.n	8007964 <osThreadNew+0x74>
        name = attr->name;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	699b      	ldr	r3, [r3, #24]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d002      	beq.n	8007972 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	699b      	ldr	r3, [r3, #24]
 8007970:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007974:	2b00      	cmp	r3, #0
 8007976:	d008      	beq.n	800798a <osThreadNew+0x9a>
 8007978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797a:	2b38      	cmp	r3, #56	; 0x38
 800797c:	d805      	bhi.n	800798a <osThreadNew+0x9a>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	f003 0301 	and.w	r3, r3, #1
 8007986:	2b00      	cmp	r3, #0
 8007988:	d001      	beq.n	800798e <osThreadNew+0x9e>
        return (NULL);
 800798a:	2300      	movs	r3, #0
 800798c:	e054      	b.n	8007a38 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	695b      	ldr	r3, [r3, #20]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d003      	beq.n	800799e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	695b      	ldr	r3, [r3, #20]
 800799a:	089b      	lsrs	r3, r3, #2
 800799c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00e      	beq.n	80079c4 <osThreadNew+0xd4>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	2bb7      	cmp	r3, #183	; 0xb7
 80079ac:	d90a      	bls.n	80079c4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d006      	beq.n	80079c4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	695b      	ldr	r3, [r3, #20]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d002      	beq.n	80079c4 <osThreadNew+0xd4>
        mem = 1;
 80079be:	2301      	movs	r3, #1
 80079c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80079c2:	e010      	b.n	80079e6 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d10c      	bne.n	80079e6 <osThreadNew+0xf6>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d108      	bne.n	80079e6 <osThreadNew+0xf6>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	691b      	ldr	r3, [r3, #16]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d104      	bne.n	80079e6 <osThreadNew+0xf6>
          mem = 0;
 80079dc:	2300      	movs	r3, #0
 80079de:	62bb      	str	r3, [r7, #40]	; 0x28
 80079e0:	e001      	b.n	80079e6 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80079e2:	2300      	movs	r3, #0
 80079e4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80079e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d110      	bne.n	8007a0e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80079f4:	9202      	str	r2, [sp, #8]
 80079f6:	9301      	str	r3, [sp, #4]
 80079f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fa:	9300      	str	r3, [sp, #0]
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a00:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f001 f96e 	bl	8008ce4 <xTaskCreateStatic>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	617b      	str	r3, [r7, #20]
 8007a0c:	e013      	b.n	8007a36 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8007a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d110      	bne.n	8007a36 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	f107 0314 	add.w	r3, r7, #20
 8007a1c:	9301      	str	r3, [sp, #4]
 8007a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a20:	9300      	str	r3, [sp, #0]
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f001 f9b8 	bl	8008d9c <xTaskCreate>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d001      	beq.n	8007a36 <osThreadNew+0x146>
          hTask = NULL;
 8007a32:	2300      	movs	r3, #0
 8007a34:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007a36:	697b      	ldr	r3, [r7, #20]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3738      	adds	r7, #56	; 0x38
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	20000560 	.word	0x20000560

08007a44 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8007a44:	b480      	push	{r7}
 8007a46:	b085      	sub	sp, #20
 8007a48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a4a:	f3ef 8305 	mrs	r3, IPSR
 8007a4e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007a50:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d10f      	bne.n	8007a76 <osThreadYield+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a56:	f3ef 8310 	mrs	r3, PRIMASK
 8007a5a:	607b      	str	r3, [r7, #4]
  return(result);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d109      	bne.n	8007a76 <osThreadYield+0x32>
 8007a62:	4b0f      	ldr	r3, [pc, #60]	; (8007aa0 <osThreadYield+0x5c>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d109      	bne.n	8007a7e <osThreadYield+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007a6a:	f3ef 8311 	mrs	r3, BASEPRI
 8007a6e:	603b      	str	r3, [r7, #0]
  return(result);
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d003      	beq.n	8007a7e <osThreadYield+0x3a>
    stat = osErrorISR;
 8007a76:	f06f 0305 	mvn.w	r3, #5
 8007a7a:	60fb      	str	r3, [r7, #12]
 8007a7c:	e009      	b.n	8007a92 <osThreadYield+0x4e>
  } else {
    stat = osOK;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	60fb      	str	r3, [r7, #12]
    taskYIELD();
 8007a82:	4b08      	ldr	r3, [pc, #32]	; (8007aa4 <osThreadYield+0x60>)
 8007a84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a88:	601a      	str	r2, [r3, #0]
 8007a8a:	f3bf 8f4f 	dsb	sy
 8007a8e:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8007a92:	68fb      	ldr	r3, [r7, #12]
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3714      	adds	r7, #20
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bc80      	pop	{r7}
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop
 8007aa0:	20000560 	.word	0x20000560
 8007aa4:	e000ed04 	.word	0xe000ed04

08007aa8 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b08e      	sub	sp, #56	; 0x38
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	60b9      	str	r1, [r7, #8]
 8007ab2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ab4:	f3ef 8305 	mrs	r3, IPSR
 8007ab8:	61fb      	str	r3, [r7, #28]
  return(result);
 8007aba:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d10f      	bne.n	8007ae0 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ac0:	f3ef 8310 	mrs	r3, PRIMASK
 8007ac4:	61bb      	str	r3, [r7, #24]
  return(result);
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d109      	bne.n	8007ae0 <osThreadFlagsWait+0x38>
 8007acc:	4b3f      	ldr	r3, [pc, #252]	; (8007bcc <osThreadFlagsWait+0x124>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	d109      	bne.n	8007ae8 <osThreadFlagsWait+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007ad4:	f3ef 8311 	mrs	r3, BASEPRI
 8007ad8:	617b      	str	r3, [r7, #20]
  return(result);
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d003      	beq.n	8007ae8 <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 8007ae0:	f06f 0305 	mvn.w	r3, #5
 8007ae4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ae6:	e06b      	b.n	8007bc0 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	da03      	bge.n	8007af6 <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 8007aee:	f06f 0303 	mvn.w	r3, #3
 8007af2:	637b      	str	r3, [r7, #52]	; 0x34
 8007af4:	e064      	b.n	8007bc0 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	f003 0302 	and.w	r3, r3, #2
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d002      	beq.n	8007b06 <osThreadFlagsWait+0x5e>
      clear = 0U;
 8007b00:	2300      	movs	r3, #0
 8007b02:	633b      	str	r3, [r7, #48]	; 0x30
 8007b04:	e001      	b.n	8007b0a <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 8007b12:	f001 fbe7 	bl	80092e4 <xTaskGetTickCount>
 8007b16:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8007b18:	f107 0210 	add.w	r2, r7, #16
 8007b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b20:	2000      	movs	r0, #0
 8007b22:	f001 ffb1 	bl	8009a88 <xTaskNotifyWait>
 8007b26:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 8007b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d137      	bne.n	8007b9e <osThreadFlagsWait+0xf6>
        rflags &= flags;
 8007b2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	4013      	ands	r3, r2
 8007b34:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	f003 0301 	and.w	r3, r3, #1
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00c      	beq.n	8007b62 <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b4c:	4013      	ands	r3, r2
 8007b4e:	68fa      	ldr	r2, [r7, #12]
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d032      	beq.n	8007bba <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d10f      	bne.n	8007b7a <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 8007b5a:	f06f 0302 	mvn.w	r3, #2
 8007b5e:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8007b60:	e02e      	b.n	8007bc0 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b66:	4013      	ands	r3, r2
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d128      	bne.n	8007bbe <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d103      	bne.n	8007b7a <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 8007b72:	f06f 0302 	mvn.w	r3, #2
 8007b76:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 8007b78:	e022      	b.n	8007bc0 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8007b7a:	f001 fbb3 	bl	80092e4 <xTaskGetTickCount>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b82:	1ad3      	subs	r3, r2, r3
 8007b84:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 8007b86:	6a3a      	ldr	r2, [r7, #32]
 8007b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d902      	bls.n	8007b94 <osThreadFlagsWait+0xec>
          tout  = 0;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b92:	e00e      	b.n	8007bb2 <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 8007b94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b96:	6a3b      	ldr	r3, [r7, #32]
 8007b98:	1ad3      	subs	r3, r2, r3
 8007b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b9c:	e009      	b.n	8007bb2 <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d103      	bne.n	8007bac <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 8007ba4:	f06f 0302 	mvn.w	r3, #2
 8007ba8:	637b      	str	r3, [r7, #52]	; 0x34
 8007baa:	e002      	b.n	8007bb2 <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8007bac:	f06f 0301 	mvn.w	r3, #1
 8007bb0:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 8007bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d1af      	bne.n	8007b18 <osThreadFlagsWait+0x70>
 8007bb8:	e002      	b.n	8007bc0 <osThreadFlagsWait+0x118>
            break;
 8007bba:	bf00      	nop
 8007bbc:	e000      	b.n	8007bc0 <osThreadFlagsWait+0x118>
            break;
 8007bbe:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8007bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3738      	adds	r7, #56	; 0x38
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	bf00      	nop
 8007bcc:	20000560 	.word	0x20000560

08007bd0 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b086      	sub	sp, #24
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bd8:	f3ef 8305 	mrs	r3, IPSR
 8007bdc:	613b      	str	r3, [r7, #16]
  return(result);
 8007bde:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d10f      	bne.n	8007c04 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007be4:	f3ef 8310 	mrs	r3, PRIMASK
 8007be8:	60fb      	str	r3, [r7, #12]
  return(result);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d109      	bne.n	8007c04 <osDelay+0x34>
 8007bf0:	4b0d      	ldr	r3, [pc, #52]	; (8007c28 <osDelay+0x58>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d109      	bne.n	8007c0c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007bf8:	f3ef 8311 	mrs	r3, BASEPRI
 8007bfc:	60bb      	str	r3, [r7, #8]
  return(result);
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d003      	beq.n	8007c0c <osDelay+0x3c>
    stat = osErrorISR;
 8007c04:	f06f 0305 	mvn.w	r3, #5
 8007c08:	617b      	str	r3, [r7, #20]
 8007c0a:	e007      	b.n	8007c1c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d002      	beq.n	8007c1c <osDelay+0x4c>
      vTaskDelay(ticks);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f001 fa14 	bl	8009044 <vTaskDelay>
    }
  }

  return (stat);
 8007c1c:	697b      	ldr	r3, [r7, #20]
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3718      	adds	r7, #24
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	20000560 	.word	0x20000560

08007c2c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b08c      	sub	sp, #48	; 0x30
 8007c30:	af02      	add	r7, sp, #8
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c3c:	f3ef 8305 	mrs	r3, IPSR
 8007c40:	61bb      	str	r3, [r7, #24]
  return(result);
 8007c42:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d16f      	bne.n	8007d28 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c48:	f3ef 8310 	mrs	r3, PRIMASK
 8007c4c:	617b      	str	r3, [r7, #20]
  return(result);
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d169      	bne.n	8007d28 <osMessageQueueNew+0xfc>
 8007c54:	4b37      	ldr	r3, [pc, #220]	; (8007d34 <osMessageQueueNew+0x108>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	d105      	bne.n	8007c68 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007c5c:	f3ef 8311 	mrs	r3, BASEPRI
 8007c60:	613b      	str	r3, [r7, #16]
  return(result);
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d15f      	bne.n	8007d28 <osMessageQueueNew+0xfc>
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d05c      	beq.n	8007d28 <osMessageQueueNew+0xfc>
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d059      	beq.n	8007d28 <osMessageQueueNew+0xfc>
    mem = -1;
 8007c74:	f04f 33ff 	mov.w	r3, #4294967295
 8007c78:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d029      	beq.n	8007cd4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d012      	beq.n	8007cae <osMessageQueueNew+0x82>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	2b4f      	cmp	r3, #79	; 0x4f
 8007c8e:	d90e      	bls.n	8007cae <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00a      	beq.n	8007cae <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	695a      	ldr	r2, [r3, #20]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	68b9      	ldr	r1, [r7, #8]
 8007ca0:	fb01 f303 	mul.w	r3, r1, r3
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d302      	bcc.n	8007cae <osMessageQueueNew+0x82>
        mem = 1;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	623b      	str	r3, [r7, #32]
 8007cac:	e014      	b.n	8007cd8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d110      	bne.n	8007cd8 <osMessageQueueNew+0xac>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	68db      	ldr	r3, [r3, #12]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d10c      	bne.n	8007cd8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d108      	bne.n	8007cd8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	695b      	ldr	r3, [r3, #20]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d104      	bne.n	8007cd8 <osMessageQueueNew+0xac>
          mem = 0;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	623b      	str	r3, [r7, #32]
 8007cd2:	e001      	b.n	8007cd8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007cd8:	6a3b      	ldr	r3, [r7, #32]
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d10b      	bne.n	8007cf6 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	691a      	ldr	r2, [r3, #16]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	9100      	str	r1, [sp, #0]
 8007cea:	68b9      	ldr	r1, [r7, #8]
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	f000 fa85 	bl	80081fc <xQueueGenericCreateStatic>
 8007cf2:	6278      	str	r0, [r7, #36]	; 0x24
 8007cf4:	e008      	b.n	8007d08 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8007cf6:	6a3b      	ldr	r3, [r7, #32]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d105      	bne.n	8007d08 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	68b9      	ldr	r1, [r7, #8]
 8007d00:	68f8      	ldr	r0, [r7, #12]
 8007d02:	f000 faf2 	bl	80082ea <xQueueGenericCreate>
 8007d06:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00c      	beq.n	8007d28 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d003      	beq.n	8007d1c <osMessageQueueNew+0xf0>
        name = attr->name;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	61fb      	str	r3, [r7, #28]
 8007d1a:	e001      	b.n	8007d20 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8007d20:	69f9      	ldr	r1, [r7, #28]
 8007d22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d24:	f000 ff82 	bl	8008c2c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3728      	adds	r7, #40	; 0x28
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	20000560 	.word	0x20000560

08007d38 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b08a      	sub	sp, #40	; 0x28
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	603b      	str	r3, [r7, #0]
 8007d44:	4613      	mov	r3, r2
 8007d46:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d50:	f3ef 8305 	mrs	r3, IPSR
 8007d54:	61fb      	str	r3, [r7, #28]
  return(result);
 8007d56:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d10f      	bne.n	8007d7c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d5c:	f3ef 8310 	mrs	r3, PRIMASK
 8007d60:	61bb      	str	r3, [r7, #24]
  return(result);
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d109      	bne.n	8007d7c <osMessageQueuePut+0x44>
 8007d68:	4b2b      	ldr	r3, [pc, #172]	; (8007e18 <osMessageQueuePut+0xe0>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	d12e      	bne.n	8007dce <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007d70:	f3ef 8311 	mrs	r3, BASEPRI
 8007d74:	617b      	str	r3, [r7, #20]
  return(result);
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d028      	beq.n	8007dce <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007d7c:	6a3b      	ldr	r3, [r7, #32]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d005      	beq.n	8007d8e <osMessageQueuePut+0x56>
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d002      	beq.n	8007d8e <osMessageQueuePut+0x56>
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d003      	beq.n	8007d96 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8007d8e:	f06f 0303 	mvn.w	r3, #3
 8007d92:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007d94:	e039      	b.n	8007e0a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8007d96:	2300      	movs	r3, #0
 8007d98:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8007d9a:	f107 0210 	add.w	r2, r7, #16
 8007d9e:	2300      	movs	r3, #0
 8007da0:	68b9      	ldr	r1, [r7, #8]
 8007da2:	6a38      	ldr	r0, [r7, #32]
 8007da4:	f000 fc00 	bl	80085a8 <xQueueGenericSendFromISR>
 8007da8:	4603      	mov	r3, r0
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d003      	beq.n	8007db6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8007dae:	f06f 0302 	mvn.w	r3, #2
 8007db2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007db4:	e029      	b.n	8007e0a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d026      	beq.n	8007e0a <osMessageQueuePut+0xd2>
 8007dbc:	4b17      	ldr	r3, [pc, #92]	; (8007e1c <osMessageQueuePut+0xe4>)
 8007dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dc2:	601a      	str	r2, [r3, #0]
 8007dc4:	f3bf 8f4f 	dsb	sy
 8007dc8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007dcc:	e01d      	b.n	8007e0a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007dce:	6a3b      	ldr	r3, [r7, #32]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d002      	beq.n	8007dda <osMessageQueuePut+0xa2>
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d103      	bne.n	8007de2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8007dda:	f06f 0303 	mvn.w	r3, #3
 8007dde:	627b      	str	r3, [r7, #36]	; 0x24
 8007de0:	e014      	b.n	8007e0c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007de2:	2300      	movs	r3, #0
 8007de4:	683a      	ldr	r2, [r7, #0]
 8007de6:	68b9      	ldr	r1, [r7, #8]
 8007de8:	6a38      	ldr	r0, [r7, #32]
 8007dea:	f000 fadf 	bl	80083ac <xQueueGenericSend>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d00b      	beq.n	8007e0c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d003      	beq.n	8007e02 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8007dfa:	f06f 0301 	mvn.w	r3, #1
 8007dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8007e00:	e004      	b.n	8007e0c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8007e02:	f06f 0302 	mvn.w	r3, #2
 8007e06:	627b      	str	r3, [r7, #36]	; 0x24
 8007e08:	e000      	b.n	8007e0c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007e0a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3728      	adds	r7, #40	; 0x28
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	20000560 	.word	0x20000560
 8007e1c:	e000ed04 	.word	0xe000ed04

08007e20 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b08a      	sub	sp, #40	; 0x28
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	607a      	str	r2, [r7, #4]
 8007e2c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007e32:	2300      	movs	r3, #0
 8007e34:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e36:	f3ef 8305 	mrs	r3, IPSR
 8007e3a:	61fb      	str	r3, [r7, #28]
  return(result);
 8007e3c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d10f      	bne.n	8007e62 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e42:	f3ef 8310 	mrs	r3, PRIMASK
 8007e46:	61bb      	str	r3, [r7, #24]
  return(result);
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d109      	bne.n	8007e62 <osMessageQueueGet+0x42>
 8007e4e:	4b2b      	ldr	r3, [pc, #172]	; (8007efc <osMessageQueueGet+0xdc>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2b02      	cmp	r3, #2
 8007e54:	d12e      	bne.n	8007eb4 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007e56:	f3ef 8311 	mrs	r3, BASEPRI
 8007e5a:	617b      	str	r3, [r7, #20]
  return(result);
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d028      	beq.n	8007eb4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007e62:	6a3b      	ldr	r3, [r7, #32]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d005      	beq.n	8007e74 <osMessageQueueGet+0x54>
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d002      	beq.n	8007e74 <osMessageQueueGet+0x54>
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d003      	beq.n	8007e7c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8007e74:	f06f 0303 	mvn.w	r3, #3
 8007e78:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007e7a:	e038      	b.n	8007eee <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8007e80:	f107 0310 	add.w	r3, r7, #16
 8007e84:	461a      	mov	r2, r3
 8007e86:	68b9      	ldr	r1, [r7, #8]
 8007e88:	6a38      	ldr	r0, [r7, #32]
 8007e8a:	f000 fd05 	bl	8008898 <xQueueReceiveFromISR>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d003      	beq.n	8007e9c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8007e94:	f06f 0302 	mvn.w	r3, #2
 8007e98:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007e9a:	e028      	b.n	8007eee <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d025      	beq.n	8007eee <osMessageQueueGet+0xce>
 8007ea2:	4b17      	ldr	r3, [pc, #92]	; (8007f00 <osMessageQueueGet+0xe0>)
 8007ea4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ea8:	601a      	str	r2, [r3, #0]
 8007eaa:	f3bf 8f4f 	dsb	sy
 8007eae:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007eb2:	e01c      	b.n	8007eee <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007eb4:	6a3b      	ldr	r3, [r7, #32]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d002      	beq.n	8007ec0 <osMessageQueueGet+0xa0>
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d103      	bne.n	8007ec8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8007ec0:	f06f 0303 	mvn.w	r3, #3
 8007ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8007ec6:	e013      	b.n	8007ef0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007ec8:	683a      	ldr	r2, [r7, #0]
 8007eca:	68b9      	ldr	r1, [r7, #8]
 8007ecc:	6a38      	ldr	r0, [r7, #32]
 8007ece:	f000 fc03 	bl	80086d8 <xQueueReceive>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d00b      	beq.n	8007ef0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d003      	beq.n	8007ee6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8007ede:	f06f 0301 	mvn.w	r3, #1
 8007ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8007ee4:	e004      	b.n	8007ef0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8007ee6:	f06f 0302 	mvn.w	r3, #2
 8007eea:	627b      	str	r3, [r7, #36]	; 0x24
 8007eec:	e000      	b.n	8007ef0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007eee:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8007ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3728      	adds	r7, #40	; 0x28
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	20000560 	.word	0x20000560
 8007f00:	e000ed04 	.word	0xe000ed04

08007f04 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b088      	sub	sp, #32
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d102      	bne.n	8007f1c <osMessageQueueGetCount+0x18>
    count = 0U;
 8007f16:	2300      	movs	r3, #0
 8007f18:	61fb      	str	r3, [r7, #28]
 8007f1a:	e01e      	b.n	8007f5a <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f1c:	f3ef 8305 	mrs	r3, IPSR
 8007f20:	617b      	str	r3, [r7, #20]
  return(result);
 8007f22:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d10f      	bne.n	8007f48 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f28:	f3ef 8310 	mrs	r3, PRIMASK
 8007f2c:	613b      	str	r3, [r7, #16]
  return(result);
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d109      	bne.n	8007f48 <osMessageQueueGetCount+0x44>
 8007f34:	4b0b      	ldr	r3, [pc, #44]	; (8007f64 <osMessageQueueGetCount+0x60>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	d10a      	bne.n	8007f52 <osMessageQueueGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007f3c:	f3ef 8311 	mrs	r3, BASEPRI
 8007f40:	60fb      	str	r3, [r7, #12]
  return(result);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d004      	beq.n	8007f52 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8007f48:	69b8      	ldr	r0, [r7, #24]
 8007f4a:	f000 fd43 	bl	80089d4 <uxQueueMessagesWaitingFromISR>
 8007f4e:	61f8      	str	r0, [r7, #28]
 8007f50:	e003      	b.n	8007f5a <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8007f52:	69b8      	ldr	r0, [r7, #24]
 8007f54:	f000 fd20 	bl	8008998 <uxQueueMessagesWaiting>
 8007f58:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 8007f5a:	69fb      	ldr	r3, [r7, #28]
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3720      	adds	r7, #32
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	20000560 	.word	0x20000560

08007f68 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007f68:	b480      	push	{r7}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	4a06      	ldr	r2, [pc, #24]	; (8007f90 <vApplicationGetIdleTaskMemory+0x28>)
 8007f78:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	4a05      	ldr	r2, [pc, #20]	; (8007f94 <vApplicationGetIdleTaskMemory+0x2c>)
 8007f7e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2280      	movs	r2, #128	; 0x80
 8007f84:	601a      	str	r2, [r3, #0]
}
 8007f86:	bf00      	nop
 8007f88:	3714      	adds	r7, #20
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bc80      	pop	{r7}
 8007f8e:	4770      	bx	lr
 8007f90:	20000564 	.word	0x20000564
 8007f94:	2000061c 	.word	0x2000061c

08007f98 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007f98:	b480      	push	{r7}
 8007f9a:	b085      	sub	sp, #20
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	4a07      	ldr	r2, [pc, #28]	; (8007fc4 <vApplicationGetTimerTaskMemory+0x2c>)
 8007fa8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	4a06      	ldr	r2, [pc, #24]	; (8007fc8 <vApplicationGetTimerTaskMemory+0x30>)
 8007fae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007fb6:	601a      	str	r2, [r3, #0]
}
 8007fb8:	bf00      	nop
 8007fba:	3714      	adds	r7, #20
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bc80      	pop	{r7}
 8007fc0:	4770      	bx	lr
 8007fc2:	bf00      	nop
 8007fc4:	2000081c 	.word	0x2000081c
 8007fc8:	200008d4 	.word	0x200008d4

08007fcc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f103 0208 	add.w	r2, r3, #8
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8007fe4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f103 0208 	add.w	r2, r3, #8
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f103 0208 	add.w	r2, r3, #8
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008000:	bf00      	nop
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	bc80      	pop	{r7}
 8008008:	4770      	bx	lr

0800800a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800800a:	b480      	push	{r7}
 800800c:	b083      	sub	sp, #12
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2200      	movs	r2, #0
 8008016:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008018:	bf00      	nop
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	bc80      	pop	{r7}
 8008020:	4770      	bx	lr

08008022 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008022:	b480      	push	{r7}
 8008024:	b085      	sub	sp, #20
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
 800802a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	68fa      	ldr	r2, [r7, #12]
 8008036:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	689a      	ldr	r2, [r3, #8]
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	683a      	ldr	r2, [r7, #0]
 8008046:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	683a      	ldr	r2, [r7, #0]
 800804c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	1c5a      	adds	r2, r3, #1
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	601a      	str	r2, [r3, #0]
}
 800805e:	bf00      	nop
 8008060:	3714      	adds	r7, #20
 8008062:	46bd      	mov	sp, r7
 8008064:	bc80      	pop	{r7}
 8008066:	4770      	bx	lr

08008068 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008068:	b480      	push	{r7}
 800806a:	b085      	sub	sp, #20
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800807e:	d103      	bne.n	8008088 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	691b      	ldr	r3, [r3, #16]
 8008084:	60fb      	str	r3, [r7, #12]
 8008086:	e00c      	b.n	80080a2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	3308      	adds	r3, #8
 800808c:	60fb      	str	r3, [r7, #12]
 800808e:	e002      	b.n	8008096 <vListInsert+0x2e>
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	60fb      	str	r3, [r7, #12]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	68ba      	ldr	r2, [r7, #8]
 800809e:	429a      	cmp	r2, r3
 80080a0:	d2f6      	bcs.n	8008090 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	685a      	ldr	r2, [r3, #4]
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	683a      	ldr	r2, [r7, #0]
 80080b0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	68fa      	ldr	r2, [r7, #12]
 80080b6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	683a      	ldr	r2, [r7, #0]
 80080bc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	1c5a      	adds	r2, r3, #1
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	601a      	str	r2, [r3, #0]
}
 80080ce:	bf00      	nop
 80080d0:	3714      	adds	r7, #20
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bc80      	pop	{r7}
 80080d6:	4770      	bx	lr

080080d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80080d8:	b480      	push	{r7}
 80080da:	b085      	sub	sp, #20
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	691b      	ldr	r3, [r3, #16]
 80080e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	6892      	ldr	r2, [r2, #8]
 80080ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	689b      	ldr	r3, [r3, #8]
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	6852      	ldr	r2, [r2, #4]
 80080f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	429a      	cmp	r2, r3
 8008102:	d103      	bne.n	800810c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	689a      	ldr	r2, [r3, #8]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	1e5a      	subs	r2, r3, #1
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
}
 8008120:	4618      	mov	r0, r3
 8008122:	3714      	adds	r7, #20
 8008124:	46bd      	mov	sp, r7
 8008126:	bc80      	pop	{r7}
 8008128:	4770      	bx	lr
	...

0800812c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d10a      	bne.n	8008156 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008144:	f383 8811 	msr	BASEPRI, r3
 8008148:	f3bf 8f6f 	isb	sy
 800814c:	f3bf 8f4f 	dsb	sy
 8008150:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008152:	bf00      	nop
 8008154:	e7fe      	b.n	8008154 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008156:	f002 f951 	bl	800a3fc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008162:	68f9      	ldr	r1, [r7, #12]
 8008164:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008166:	fb01 f303 	mul.w	r3, r1, r3
 800816a:	441a      	add	r2, r3
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2200      	movs	r2, #0
 8008174:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008186:	3b01      	subs	r3, #1
 8008188:	68f9      	ldr	r1, [r7, #12]
 800818a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800818c:	fb01 f303 	mul.w	r3, r1, r3
 8008190:	441a      	add	r2, r3
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	22ff      	movs	r2, #255	; 0xff
 800819a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	22ff      	movs	r2, #255	; 0xff
 80081a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d114      	bne.n	80081d6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	691b      	ldr	r3, [r3, #16]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d01a      	beq.n	80081ea <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	3310      	adds	r3, #16
 80081b8:	4618      	mov	r0, r3
 80081ba:	f001 fa13 	bl	80095e4 <xTaskRemoveFromEventList>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d012      	beq.n	80081ea <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80081c4:	4b0c      	ldr	r3, [pc, #48]	; (80081f8 <xQueueGenericReset+0xcc>)
 80081c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081ca:	601a      	str	r2, [r3, #0]
 80081cc:	f3bf 8f4f 	dsb	sy
 80081d0:	f3bf 8f6f 	isb	sy
 80081d4:	e009      	b.n	80081ea <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	3310      	adds	r3, #16
 80081da:	4618      	mov	r0, r3
 80081dc:	f7ff fef6 	bl	8007fcc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	3324      	adds	r3, #36	; 0x24
 80081e4:	4618      	mov	r0, r3
 80081e6:	f7ff fef1 	bl	8007fcc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80081ea:	f002 f937 	bl	800a45c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80081ee:	2301      	movs	r3, #1
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3710      	adds	r7, #16
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}
 80081f8:	e000ed04 	.word	0xe000ed04

080081fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b08e      	sub	sp, #56	; 0x38
 8008200:	af02      	add	r7, sp, #8
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	60b9      	str	r1, [r7, #8]
 8008206:	607a      	str	r2, [r7, #4]
 8008208:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d10a      	bne.n	8008226 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008214:	f383 8811 	msr	BASEPRI, r3
 8008218:	f3bf 8f6f 	isb	sy
 800821c:	f3bf 8f4f 	dsb	sy
 8008220:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008222:	bf00      	nop
 8008224:	e7fe      	b.n	8008224 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d10a      	bne.n	8008242 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800822c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008230:	f383 8811 	msr	BASEPRI, r3
 8008234:	f3bf 8f6f 	isb	sy
 8008238:	f3bf 8f4f 	dsb	sy
 800823c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800823e:	bf00      	nop
 8008240:	e7fe      	b.n	8008240 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d002      	beq.n	800824e <xQueueGenericCreateStatic+0x52>
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d001      	beq.n	8008252 <xQueueGenericCreateStatic+0x56>
 800824e:	2301      	movs	r3, #1
 8008250:	e000      	b.n	8008254 <xQueueGenericCreateStatic+0x58>
 8008252:	2300      	movs	r3, #0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d10a      	bne.n	800826e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825c:	f383 8811 	msr	BASEPRI, r3
 8008260:	f3bf 8f6f 	isb	sy
 8008264:	f3bf 8f4f 	dsb	sy
 8008268:	623b      	str	r3, [r7, #32]
}
 800826a:	bf00      	nop
 800826c:	e7fe      	b.n	800826c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d102      	bne.n	800827a <xQueueGenericCreateStatic+0x7e>
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d101      	bne.n	800827e <xQueueGenericCreateStatic+0x82>
 800827a:	2301      	movs	r3, #1
 800827c:	e000      	b.n	8008280 <xQueueGenericCreateStatic+0x84>
 800827e:	2300      	movs	r3, #0
 8008280:	2b00      	cmp	r3, #0
 8008282:	d10a      	bne.n	800829a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008288:	f383 8811 	msr	BASEPRI, r3
 800828c:	f3bf 8f6f 	isb	sy
 8008290:	f3bf 8f4f 	dsb	sy
 8008294:	61fb      	str	r3, [r7, #28]
}
 8008296:	bf00      	nop
 8008298:	e7fe      	b.n	8008298 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800829a:	2350      	movs	r3, #80	; 0x50
 800829c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	2b50      	cmp	r3, #80	; 0x50
 80082a2:	d00a      	beq.n	80082ba <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80082a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a8:	f383 8811 	msr	BASEPRI, r3
 80082ac:	f3bf 8f6f 	isb	sy
 80082b0:	f3bf 8f4f 	dsb	sy
 80082b4:	61bb      	str	r3, [r7, #24]
}
 80082b6:	bf00      	nop
 80082b8:	e7fe      	b.n	80082b8 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80082be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d00d      	beq.n	80082e0 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80082c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c6:	2201      	movs	r2, #1
 80082c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80082cc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80082d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d2:	9300      	str	r3, [sp, #0]
 80082d4:	4613      	mov	r3, r2
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	68b9      	ldr	r1, [r7, #8]
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	f000 f843 	bl	8008366 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80082e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3730      	adds	r7, #48	; 0x30
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b08a      	sub	sp, #40	; 0x28
 80082ee:	af02      	add	r7, sp, #8
 80082f0:	60f8      	str	r0, [r7, #12]
 80082f2:	60b9      	str	r1, [r7, #8]
 80082f4:	4613      	mov	r3, r2
 80082f6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d10a      	bne.n	8008314 <xQueueGenericCreate+0x2a>
	__asm volatile
 80082fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008302:	f383 8811 	msr	BASEPRI, r3
 8008306:	f3bf 8f6f 	isb	sy
 800830a:	f3bf 8f4f 	dsb	sy
 800830e:	613b      	str	r3, [r7, #16]
}
 8008310:	bf00      	nop
 8008312:	e7fe      	b.n	8008312 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d102      	bne.n	8008320 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800831a:	2300      	movs	r3, #0
 800831c:	61fb      	str	r3, [r7, #28]
 800831e:	e004      	b.n	800832a <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	68ba      	ldr	r2, [r7, #8]
 8008324:	fb02 f303 	mul.w	r3, r2, r3
 8008328:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	3350      	adds	r3, #80	; 0x50
 800832e:	4618      	mov	r0, r3
 8008330:	f002 f964 	bl	800a5fc <pvPortMalloc>
 8008334:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d00f      	beq.n	800835c <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800833c:	69bb      	ldr	r3, [r7, #24]
 800833e:	3350      	adds	r3, #80	; 0x50
 8008340:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	2200      	movs	r2, #0
 8008346:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800834a:	79fa      	ldrb	r2, [r7, #7]
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	9300      	str	r3, [sp, #0]
 8008350:	4613      	mov	r3, r2
 8008352:	697a      	ldr	r2, [r7, #20]
 8008354:	68b9      	ldr	r1, [r7, #8]
 8008356:	68f8      	ldr	r0, [r7, #12]
 8008358:	f000 f805 	bl	8008366 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800835c:	69bb      	ldr	r3, [r7, #24]
	}
 800835e:	4618      	mov	r0, r3
 8008360:	3720      	adds	r7, #32
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b084      	sub	sp, #16
 800836a:	af00      	add	r7, sp, #0
 800836c:	60f8      	str	r0, [r7, #12]
 800836e:	60b9      	str	r1, [r7, #8]
 8008370:	607a      	str	r2, [r7, #4]
 8008372:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d103      	bne.n	8008382 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	69ba      	ldr	r2, [r7, #24]
 800837e:	601a      	str	r2, [r3, #0]
 8008380:	e002      	b.n	8008388 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	68fa      	ldr	r2, [r7, #12]
 800838c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	68ba      	ldr	r2, [r7, #8]
 8008392:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008394:	2101      	movs	r1, #1
 8008396:	69b8      	ldr	r0, [r7, #24]
 8008398:	f7ff fec8 	bl	800812c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	78fa      	ldrb	r2, [r7, #3]
 80083a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80083a4:	bf00      	nop
 80083a6:	3710      	adds	r7, #16
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b08e      	sub	sp, #56	; 0x38
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	607a      	str	r2, [r7, #4]
 80083b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80083ba:	2300      	movs	r3, #0
 80083bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80083c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d10a      	bne.n	80083de <xQueueGenericSend+0x32>
	__asm volatile
 80083c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083cc:	f383 8811 	msr	BASEPRI, r3
 80083d0:	f3bf 8f6f 	isb	sy
 80083d4:	f3bf 8f4f 	dsb	sy
 80083d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80083da:	bf00      	nop
 80083dc:	e7fe      	b.n	80083dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d103      	bne.n	80083ec <xQueueGenericSend+0x40>
 80083e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d101      	bne.n	80083f0 <xQueueGenericSend+0x44>
 80083ec:	2301      	movs	r3, #1
 80083ee:	e000      	b.n	80083f2 <xQueueGenericSend+0x46>
 80083f0:	2300      	movs	r3, #0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d10a      	bne.n	800840c <xQueueGenericSend+0x60>
	__asm volatile
 80083f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fa:	f383 8811 	msr	BASEPRI, r3
 80083fe:	f3bf 8f6f 	isb	sy
 8008402:	f3bf 8f4f 	dsb	sy
 8008406:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008408:	bf00      	nop
 800840a:	e7fe      	b.n	800840a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	2b02      	cmp	r3, #2
 8008410:	d103      	bne.n	800841a <xQueueGenericSend+0x6e>
 8008412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008416:	2b01      	cmp	r3, #1
 8008418:	d101      	bne.n	800841e <xQueueGenericSend+0x72>
 800841a:	2301      	movs	r3, #1
 800841c:	e000      	b.n	8008420 <xQueueGenericSend+0x74>
 800841e:	2300      	movs	r3, #0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d10a      	bne.n	800843a <xQueueGenericSend+0x8e>
	__asm volatile
 8008424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008428:	f383 8811 	msr	BASEPRI, r3
 800842c:	f3bf 8f6f 	isb	sy
 8008430:	f3bf 8f4f 	dsb	sy
 8008434:	623b      	str	r3, [r7, #32]
}
 8008436:	bf00      	nop
 8008438:	e7fe      	b.n	8008438 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800843a:	f001 fa99 	bl	8009970 <xTaskGetSchedulerState>
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d102      	bne.n	800844a <xQueueGenericSend+0x9e>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d101      	bne.n	800844e <xQueueGenericSend+0xa2>
 800844a:	2301      	movs	r3, #1
 800844c:	e000      	b.n	8008450 <xQueueGenericSend+0xa4>
 800844e:	2300      	movs	r3, #0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d10a      	bne.n	800846a <xQueueGenericSend+0xbe>
	__asm volatile
 8008454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008458:	f383 8811 	msr	BASEPRI, r3
 800845c:	f3bf 8f6f 	isb	sy
 8008460:	f3bf 8f4f 	dsb	sy
 8008464:	61fb      	str	r3, [r7, #28]
}
 8008466:	bf00      	nop
 8008468:	e7fe      	b.n	8008468 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800846a:	f001 ffc7 	bl	800a3fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800846e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008476:	429a      	cmp	r2, r3
 8008478:	d302      	bcc.n	8008480 <xQueueGenericSend+0xd4>
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	2b02      	cmp	r3, #2
 800847e:	d129      	bne.n	80084d4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008480:	683a      	ldr	r2, [r7, #0]
 8008482:	68b9      	ldr	r1, [r7, #8]
 8008484:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008486:	f000 fac0 	bl	8008a0a <prvCopyDataToQueue>
 800848a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800848c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008490:	2b00      	cmp	r3, #0
 8008492:	d010      	beq.n	80084b6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008496:	3324      	adds	r3, #36	; 0x24
 8008498:	4618      	mov	r0, r3
 800849a:	f001 f8a3 	bl	80095e4 <xTaskRemoveFromEventList>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d013      	beq.n	80084cc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80084a4:	4b3f      	ldr	r3, [pc, #252]	; (80085a4 <xQueueGenericSend+0x1f8>)
 80084a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084aa:	601a      	str	r2, [r3, #0]
 80084ac:	f3bf 8f4f 	dsb	sy
 80084b0:	f3bf 8f6f 	isb	sy
 80084b4:	e00a      	b.n	80084cc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80084b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d007      	beq.n	80084cc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80084bc:	4b39      	ldr	r3, [pc, #228]	; (80085a4 <xQueueGenericSend+0x1f8>)
 80084be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084c2:	601a      	str	r2, [r3, #0]
 80084c4:	f3bf 8f4f 	dsb	sy
 80084c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80084cc:	f001 ffc6 	bl	800a45c <vPortExitCritical>
				return pdPASS;
 80084d0:	2301      	movs	r3, #1
 80084d2:	e063      	b.n	800859c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d103      	bne.n	80084e2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80084da:	f001 ffbf 	bl	800a45c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80084de:	2300      	movs	r3, #0
 80084e0:	e05c      	b.n	800859c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80084e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d106      	bne.n	80084f6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80084e8:	f107 0314 	add.w	r3, r7, #20
 80084ec:	4618      	mov	r0, r3
 80084ee:	f001 f8dd 	bl	80096ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80084f2:	2301      	movs	r3, #1
 80084f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80084f6:	f001 ffb1 	bl	800a45c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80084fa:	f000 fe47 	bl	800918c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80084fe:	f001 ff7d 	bl	800a3fc <vPortEnterCritical>
 8008502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008504:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008508:	b25b      	sxtb	r3, r3
 800850a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800850e:	d103      	bne.n	8008518 <xQueueGenericSend+0x16c>
 8008510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008512:	2200      	movs	r2, #0
 8008514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800851e:	b25b      	sxtb	r3, r3
 8008520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008524:	d103      	bne.n	800852e <xQueueGenericSend+0x182>
 8008526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008528:	2200      	movs	r2, #0
 800852a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800852e:	f001 ff95 	bl	800a45c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008532:	1d3a      	adds	r2, r7, #4
 8008534:	f107 0314 	add.w	r3, r7, #20
 8008538:	4611      	mov	r1, r2
 800853a:	4618      	mov	r0, r3
 800853c:	f001 f8cc 	bl	80096d8 <xTaskCheckForTimeOut>
 8008540:	4603      	mov	r3, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d124      	bne.n	8008590 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008546:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008548:	f000 fb57 	bl	8008bfa <prvIsQueueFull>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d018      	beq.n	8008584 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008554:	3310      	adds	r3, #16
 8008556:	687a      	ldr	r2, [r7, #4]
 8008558:	4611      	mov	r1, r2
 800855a:	4618      	mov	r0, r3
 800855c:	f000 fff2 	bl	8009544 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008560:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008562:	f000 fae2 	bl	8008b2a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008566:	f000 fe1f 	bl	80091a8 <xTaskResumeAll>
 800856a:	4603      	mov	r3, r0
 800856c:	2b00      	cmp	r3, #0
 800856e:	f47f af7c 	bne.w	800846a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008572:	4b0c      	ldr	r3, [pc, #48]	; (80085a4 <xQueueGenericSend+0x1f8>)
 8008574:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008578:	601a      	str	r2, [r3, #0]
 800857a:	f3bf 8f4f 	dsb	sy
 800857e:	f3bf 8f6f 	isb	sy
 8008582:	e772      	b.n	800846a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008584:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008586:	f000 fad0 	bl	8008b2a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800858a:	f000 fe0d 	bl	80091a8 <xTaskResumeAll>
 800858e:	e76c      	b.n	800846a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008590:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008592:	f000 faca 	bl	8008b2a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008596:	f000 fe07 	bl	80091a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800859a:	2300      	movs	r3, #0
		}
	}
}
 800859c:	4618      	mov	r0, r3
 800859e:	3738      	adds	r7, #56	; 0x38
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}
 80085a4:	e000ed04 	.word	0xe000ed04

080085a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b08e      	sub	sp, #56	; 0x38
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	607a      	str	r2, [r7, #4]
 80085b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80085ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d10a      	bne.n	80085d6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80085c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c4:	f383 8811 	msr	BASEPRI, r3
 80085c8:	f3bf 8f6f 	isb	sy
 80085cc:	f3bf 8f4f 	dsb	sy
 80085d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80085d2:	bf00      	nop
 80085d4:	e7fe      	b.n	80085d4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d103      	bne.n	80085e4 <xQueueGenericSendFromISR+0x3c>
 80085dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d101      	bne.n	80085e8 <xQueueGenericSendFromISR+0x40>
 80085e4:	2301      	movs	r3, #1
 80085e6:	e000      	b.n	80085ea <xQueueGenericSendFromISR+0x42>
 80085e8:	2300      	movs	r3, #0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d10a      	bne.n	8008604 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80085ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f2:	f383 8811 	msr	BASEPRI, r3
 80085f6:	f3bf 8f6f 	isb	sy
 80085fa:	f3bf 8f4f 	dsb	sy
 80085fe:	623b      	str	r3, [r7, #32]
}
 8008600:	bf00      	nop
 8008602:	e7fe      	b.n	8008602 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	2b02      	cmp	r3, #2
 8008608:	d103      	bne.n	8008612 <xQueueGenericSendFromISR+0x6a>
 800860a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800860e:	2b01      	cmp	r3, #1
 8008610:	d101      	bne.n	8008616 <xQueueGenericSendFromISR+0x6e>
 8008612:	2301      	movs	r3, #1
 8008614:	e000      	b.n	8008618 <xQueueGenericSendFromISR+0x70>
 8008616:	2300      	movs	r3, #0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d10a      	bne.n	8008632 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800861c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008620:	f383 8811 	msr	BASEPRI, r3
 8008624:	f3bf 8f6f 	isb	sy
 8008628:	f3bf 8f4f 	dsb	sy
 800862c:	61fb      	str	r3, [r7, #28]
}
 800862e:	bf00      	nop
 8008630:	e7fe      	b.n	8008630 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008632:	f001 ffa5 	bl	800a580 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008636:	f3ef 8211 	mrs	r2, BASEPRI
 800863a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863e:	f383 8811 	msr	BASEPRI, r3
 8008642:	f3bf 8f6f 	isb	sy
 8008646:	f3bf 8f4f 	dsb	sy
 800864a:	61ba      	str	r2, [r7, #24]
 800864c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800864e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008650:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008654:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800865a:	429a      	cmp	r2, r3
 800865c:	d302      	bcc.n	8008664 <xQueueGenericSendFromISR+0xbc>
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	2b02      	cmp	r3, #2
 8008662:	d12c      	bne.n	80086be <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008666:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800866a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800866e:	683a      	ldr	r2, [r7, #0]
 8008670:	68b9      	ldr	r1, [r7, #8]
 8008672:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008674:	f000 f9c9 	bl	8008a0a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008678:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800867c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008680:	d112      	bne.n	80086a8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008686:	2b00      	cmp	r3, #0
 8008688:	d016      	beq.n	80086b8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800868a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868c:	3324      	adds	r3, #36	; 0x24
 800868e:	4618      	mov	r0, r3
 8008690:	f000 ffa8 	bl	80095e4 <xTaskRemoveFromEventList>
 8008694:	4603      	mov	r3, r0
 8008696:	2b00      	cmp	r3, #0
 8008698:	d00e      	beq.n	80086b8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d00b      	beq.n	80086b8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	601a      	str	r2, [r3, #0]
 80086a6:	e007      	b.n	80086b8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80086a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80086ac:	3301      	adds	r3, #1
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	b25a      	sxtb	r2, r3
 80086b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80086b8:	2301      	movs	r3, #1
 80086ba:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80086bc:	e001      	b.n	80086c2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80086be:	2300      	movs	r3, #0
 80086c0:	637b      	str	r3, [r7, #52]	; 0x34
 80086c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80086cc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80086ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3738      	adds	r7, #56	; 0x38
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b08c      	sub	sp, #48	; 0x30
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80086e4:	2300      	movs	r3, #0
 80086e6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80086ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d10a      	bne.n	8008708 <xQueueReceive+0x30>
	__asm volatile
 80086f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f6:	f383 8811 	msr	BASEPRI, r3
 80086fa:	f3bf 8f6f 	isb	sy
 80086fe:	f3bf 8f4f 	dsb	sy
 8008702:	623b      	str	r3, [r7, #32]
}
 8008704:	bf00      	nop
 8008706:	e7fe      	b.n	8008706 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d103      	bne.n	8008716 <xQueueReceive+0x3e>
 800870e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008712:	2b00      	cmp	r3, #0
 8008714:	d101      	bne.n	800871a <xQueueReceive+0x42>
 8008716:	2301      	movs	r3, #1
 8008718:	e000      	b.n	800871c <xQueueReceive+0x44>
 800871a:	2300      	movs	r3, #0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d10a      	bne.n	8008736 <xQueueReceive+0x5e>
	__asm volatile
 8008720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008724:	f383 8811 	msr	BASEPRI, r3
 8008728:	f3bf 8f6f 	isb	sy
 800872c:	f3bf 8f4f 	dsb	sy
 8008730:	61fb      	str	r3, [r7, #28]
}
 8008732:	bf00      	nop
 8008734:	e7fe      	b.n	8008734 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008736:	f001 f91b 	bl	8009970 <xTaskGetSchedulerState>
 800873a:	4603      	mov	r3, r0
 800873c:	2b00      	cmp	r3, #0
 800873e:	d102      	bne.n	8008746 <xQueueReceive+0x6e>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d101      	bne.n	800874a <xQueueReceive+0x72>
 8008746:	2301      	movs	r3, #1
 8008748:	e000      	b.n	800874c <xQueueReceive+0x74>
 800874a:	2300      	movs	r3, #0
 800874c:	2b00      	cmp	r3, #0
 800874e:	d10a      	bne.n	8008766 <xQueueReceive+0x8e>
	__asm volatile
 8008750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008754:	f383 8811 	msr	BASEPRI, r3
 8008758:	f3bf 8f6f 	isb	sy
 800875c:	f3bf 8f4f 	dsb	sy
 8008760:	61bb      	str	r3, [r7, #24]
}
 8008762:	bf00      	nop
 8008764:	e7fe      	b.n	8008764 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008766:	f001 fe49 	bl	800a3fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800876a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800876e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008772:	2b00      	cmp	r3, #0
 8008774:	d01f      	beq.n	80087b6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008776:	68b9      	ldr	r1, [r7, #8]
 8008778:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800877a:	f000 f9b0 	bl	8008ade <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800877e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008780:	1e5a      	subs	r2, r3, #1
 8008782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008784:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008788:	691b      	ldr	r3, [r3, #16]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d00f      	beq.n	80087ae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800878e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008790:	3310      	adds	r3, #16
 8008792:	4618      	mov	r0, r3
 8008794:	f000 ff26 	bl	80095e4 <xTaskRemoveFromEventList>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d007      	beq.n	80087ae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800879e:	4b3d      	ldr	r3, [pc, #244]	; (8008894 <xQueueReceive+0x1bc>)
 80087a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087a4:	601a      	str	r2, [r3, #0]
 80087a6:	f3bf 8f4f 	dsb	sy
 80087aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80087ae:	f001 fe55 	bl	800a45c <vPortExitCritical>
				return pdPASS;
 80087b2:	2301      	movs	r3, #1
 80087b4:	e069      	b.n	800888a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d103      	bne.n	80087c4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80087bc:	f001 fe4e 	bl	800a45c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80087c0:	2300      	movs	r3, #0
 80087c2:	e062      	b.n	800888a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80087c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d106      	bne.n	80087d8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80087ca:	f107 0310 	add.w	r3, r7, #16
 80087ce:	4618      	mov	r0, r3
 80087d0:	f000 ff6c 	bl	80096ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80087d4:	2301      	movs	r3, #1
 80087d6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80087d8:	f001 fe40 	bl	800a45c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80087dc:	f000 fcd6 	bl	800918c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80087e0:	f001 fe0c 	bl	800a3fc <vPortEnterCritical>
 80087e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80087ea:	b25b      	sxtb	r3, r3
 80087ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f0:	d103      	bne.n	80087fa <xQueueReceive+0x122>
 80087f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008800:	b25b      	sxtb	r3, r3
 8008802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008806:	d103      	bne.n	8008810 <xQueueReceive+0x138>
 8008808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800880a:	2200      	movs	r2, #0
 800880c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008810:	f001 fe24 	bl	800a45c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008814:	1d3a      	adds	r2, r7, #4
 8008816:	f107 0310 	add.w	r3, r7, #16
 800881a:	4611      	mov	r1, r2
 800881c:	4618      	mov	r0, r3
 800881e:	f000 ff5b 	bl	80096d8 <xTaskCheckForTimeOut>
 8008822:	4603      	mov	r3, r0
 8008824:	2b00      	cmp	r3, #0
 8008826:	d123      	bne.n	8008870 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008828:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800882a:	f000 f9d0 	bl	8008bce <prvIsQueueEmpty>
 800882e:	4603      	mov	r3, r0
 8008830:	2b00      	cmp	r3, #0
 8008832:	d017      	beq.n	8008864 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008836:	3324      	adds	r3, #36	; 0x24
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	4611      	mov	r1, r2
 800883c:	4618      	mov	r0, r3
 800883e:	f000 fe81 	bl	8009544 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008842:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008844:	f000 f971 	bl	8008b2a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008848:	f000 fcae 	bl	80091a8 <xTaskResumeAll>
 800884c:	4603      	mov	r3, r0
 800884e:	2b00      	cmp	r3, #0
 8008850:	d189      	bne.n	8008766 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008852:	4b10      	ldr	r3, [pc, #64]	; (8008894 <xQueueReceive+0x1bc>)
 8008854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008858:	601a      	str	r2, [r3, #0]
 800885a:	f3bf 8f4f 	dsb	sy
 800885e:	f3bf 8f6f 	isb	sy
 8008862:	e780      	b.n	8008766 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008866:	f000 f960 	bl	8008b2a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800886a:	f000 fc9d 	bl	80091a8 <xTaskResumeAll>
 800886e:	e77a      	b.n	8008766 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008870:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008872:	f000 f95a 	bl	8008b2a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008876:	f000 fc97 	bl	80091a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800887a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800887c:	f000 f9a7 	bl	8008bce <prvIsQueueEmpty>
 8008880:	4603      	mov	r3, r0
 8008882:	2b00      	cmp	r3, #0
 8008884:	f43f af6f 	beq.w	8008766 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008888:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800888a:	4618      	mov	r0, r3
 800888c:	3730      	adds	r7, #48	; 0x30
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
 8008892:	bf00      	nop
 8008894:	e000ed04 	.word	0xe000ed04

08008898 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b08e      	sub	sp, #56	; 0x38
 800889c:	af00      	add	r7, sp, #0
 800889e:	60f8      	str	r0, [r7, #12]
 80088a0:	60b9      	str	r1, [r7, #8]
 80088a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80088a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d10a      	bne.n	80088c4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80088ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b2:	f383 8811 	msr	BASEPRI, r3
 80088b6:	f3bf 8f6f 	isb	sy
 80088ba:	f3bf 8f4f 	dsb	sy
 80088be:	623b      	str	r3, [r7, #32]
}
 80088c0:	bf00      	nop
 80088c2:	e7fe      	b.n	80088c2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d103      	bne.n	80088d2 <xQueueReceiveFromISR+0x3a>
 80088ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d101      	bne.n	80088d6 <xQueueReceiveFromISR+0x3e>
 80088d2:	2301      	movs	r3, #1
 80088d4:	e000      	b.n	80088d8 <xQueueReceiveFromISR+0x40>
 80088d6:	2300      	movs	r3, #0
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d10a      	bne.n	80088f2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80088dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e0:	f383 8811 	msr	BASEPRI, r3
 80088e4:	f3bf 8f6f 	isb	sy
 80088e8:	f3bf 8f4f 	dsb	sy
 80088ec:	61fb      	str	r3, [r7, #28]
}
 80088ee:	bf00      	nop
 80088f0:	e7fe      	b.n	80088f0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80088f2:	f001 fe45 	bl	800a580 <vPortValidateInterruptPriority>
	__asm volatile
 80088f6:	f3ef 8211 	mrs	r2, BASEPRI
 80088fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fe:	f383 8811 	msr	BASEPRI, r3
 8008902:	f3bf 8f6f 	isb	sy
 8008906:	f3bf 8f4f 	dsb	sy
 800890a:	61ba      	str	r2, [r7, #24]
 800890c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800890e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008910:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008916:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891a:	2b00      	cmp	r3, #0
 800891c:	d02f      	beq.n	800897e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800891e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008920:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008924:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008928:	68b9      	ldr	r1, [r7, #8]
 800892a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800892c:	f000 f8d7 	bl	8008ade <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008932:	1e5a      	subs	r2, r3, #1
 8008934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008936:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008938:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800893c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008940:	d112      	bne.n	8008968 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008944:	691b      	ldr	r3, [r3, #16]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d016      	beq.n	8008978 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800894a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894c:	3310      	adds	r3, #16
 800894e:	4618      	mov	r0, r3
 8008950:	f000 fe48 	bl	80095e4 <xTaskRemoveFromEventList>
 8008954:	4603      	mov	r3, r0
 8008956:	2b00      	cmp	r3, #0
 8008958:	d00e      	beq.n	8008978 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d00b      	beq.n	8008978 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2201      	movs	r2, #1
 8008964:	601a      	str	r2, [r3, #0]
 8008966:	e007      	b.n	8008978 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008968:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800896c:	3301      	adds	r3, #1
 800896e:	b2db      	uxtb	r3, r3
 8008970:	b25a      	sxtb	r2, r3
 8008972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008978:	2301      	movs	r3, #1
 800897a:	637b      	str	r3, [r7, #52]	; 0x34
 800897c:	e001      	b.n	8008982 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800897e:	2300      	movs	r3, #0
 8008980:	637b      	str	r3, [r7, #52]	; 0x34
 8008982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008984:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	f383 8811 	msr	BASEPRI, r3
}
 800898c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800898e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008990:	4618      	mov	r0, r3
 8008992:	3738      	adds	r7, #56	; 0x38
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d10a      	bne.n	80089bc <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80089a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089aa:	f383 8811 	msr	BASEPRI, r3
 80089ae:	f3bf 8f6f 	isb	sy
 80089b2:	f3bf 8f4f 	dsb	sy
 80089b6:	60bb      	str	r3, [r7, #8]
}
 80089b8:	bf00      	nop
 80089ba:	e7fe      	b.n	80089ba <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80089bc:	f001 fd1e 	bl	800a3fc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089c4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80089c6:	f001 fd49 	bl	800a45c <vPortExitCritical>

	return uxReturn;
 80089ca:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80089cc:	4618      	mov	r0, r3
 80089ce:	3710      	adds	r7, #16
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80089d4:	b480      	push	{r7}
 80089d6:	b085      	sub	sp, #20
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d10a      	bne.n	80089f8 <uxQueueMessagesWaitingFromISR+0x24>
	__asm volatile
 80089e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e6:	f383 8811 	msr	BASEPRI, r3
 80089ea:	f3bf 8f6f 	isb	sy
 80089ee:	f3bf 8f4f 	dsb	sy
 80089f2:	60bb      	str	r3, [r7, #8]
}
 80089f4:	bf00      	nop
 80089f6:	e7fe      	b.n	80089f6 <uxQueueMessagesWaitingFromISR+0x22>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089fc:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 80089fe:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008a00:	4618      	mov	r0, r3
 8008a02:	3714      	adds	r7, #20
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bc80      	pop	{r7}
 8008a08:	4770      	bx	lr

08008a0a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b086      	sub	sp, #24
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	60f8      	str	r0, [r7, #12]
 8008a12:	60b9      	str	r1, [r7, #8]
 8008a14:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008a16:	2300      	movs	r3, #0
 8008a18:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a1e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d10d      	bne.n	8008a44 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d14d      	bne.n	8008acc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	4618      	mov	r0, r3
 8008a36:	f000 ffb9 	bl	80099ac <xTaskPriorityDisinherit>
 8008a3a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	605a      	str	r2, [r3, #4]
 8008a42:	e043      	b.n	8008acc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d119      	bne.n	8008a7e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	6898      	ldr	r0, [r3, #8]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a52:	461a      	mov	r2, r3
 8008a54:	68b9      	ldr	r1, [r7, #8]
 8008a56:	f004 fbd0 	bl	800d1fa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	689a      	ldr	r2, [r3, #8]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a62:	441a      	add	r2, r3
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	689a      	ldr	r2, [r3, #8]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d32b      	bcc.n	8008acc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	609a      	str	r2, [r3, #8]
 8008a7c:	e026      	b.n	8008acc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	68d8      	ldr	r0, [r3, #12]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a86:	461a      	mov	r2, r3
 8008a88:	68b9      	ldr	r1, [r7, #8]
 8008a8a:	f004 fbb6 	bl	800d1fa <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	68da      	ldr	r2, [r3, #12]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a96:	425b      	negs	r3, r3
 8008a98:	441a      	add	r2, r3
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	68da      	ldr	r2, [r3, #12]
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d207      	bcs.n	8008aba <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	685a      	ldr	r2, [r3, #4]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ab2:	425b      	negs	r3, r3
 8008ab4:	441a      	add	r2, r3
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2b02      	cmp	r3, #2
 8008abe:	d105      	bne.n	8008acc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d002      	beq.n	8008acc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	3b01      	subs	r3, #1
 8008aca:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	1c5a      	adds	r2, r3, #1
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008ad4:	697b      	ldr	r3, [r7, #20]
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3718      	adds	r7, #24
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}

08008ade <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008ade:	b580      	push	{r7, lr}
 8008ae0:	b082      	sub	sp, #8
 8008ae2:	af00      	add	r7, sp, #0
 8008ae4:	6078      	str	r0, [r7, #4]
 8008ae6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d018      	beq.n	8008b22 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	68da      	ldr	r2, [r3, #12]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af8:	441a      	add	r2, r3
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	68da      	ldr	r2, [r3, #12]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d303      	bcc.n	8008b12 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	68d9      	ldr	r1, [r3, #12]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	6838      	ldr	r0, [r7, #0]
 8008b1e:	f004 fb6c 	bl	800d1fa <memcpy>
	}
}
 8008b22:	bf00      	nop
 8008b24:	3708      	adds	r7, #8
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}

08008b2a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008b2a:	b580      	push	{r7, lr}
 8008b2c:	b084      	sub	sp, #16
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008b32:	f001 fc63 	bl	800a3fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b3c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b3e:	e011      	b.n	8008b64 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d012      	beq.n	8008b6e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	3324      	adds	r3, #36	; 0x24
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f000 fd49 	bl	80095e4 <xTaskRemoveFromEventList>
 8008b52:	4603      	mov	r3, r0
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d001      	beq.n	8008b5c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008b58:	f000 fe20 	bl	800979c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008b5c:	7bfb      	ldrb	r3, [r7, #15]
 8008b5e:	3b01      	subs	r3, #1
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	dce9      	bgt.n	8008b40 <prvUnlockQueue+0x16>
 8008b6c:	e000      	b.n	8008b70 <prvUnlockQueue+0x46>
					break;
 8008b6e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	22ff      	movs	r2, #255	; 0xff
 8008b74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008b78:	f001 fc70 	bl	800a45c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008b7c:	f001 fc3e 	bl	800a3fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b86:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b88:	e011      	b.n	8008bae <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	691b      	ldr	r3, [r3, #16]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d012      	beq.n	8008bb8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	3310      	adds	r3, #16
 8008b96:	4618      	mov	r0, r3
 8008b98:	f000 fd24 	bl	80095e4 <xTaskRemoveFromEventList>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d001      	beq.n	8008ba6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008ba2:	f000 fdfb 	bl	800979c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008ba6:	7bbb      	ldrb	r3, [r7, #14]
 8008ba8:	3b01      	subs	r3, #1
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008bae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	dce9      	bgt.n	8008b8a <prvUnlockQueue+0x60>
 8008bb6:	e000      	b.n	8008bba <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008bb8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	22ff      	movs	r2, #255	; 0xff
 8008bbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008bc2:	f001 fc4b 	bl	800a45c <vPortExitCritical>
}
 8008bc6:	bf00      	nop
 8008bc8:	3710      	adds	r7, #16
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}

08008bce <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008bce:	b580      	push	{r7, lr}
 8008bd0:	b084      	sub	sp, #16
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008bd6:	f001 fc11 	bl	800a3fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d102      	bne.n	8008be8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008be2:	2301      	movs	r3, #1
 8008be4:	60fb      	str	r3, [r7, #12]
 8008be6:	e001      	b.n	8008bec <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008be8:	2300      	movs	r3, #0
 8008bea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008bec:	f001 fc36 	bl	800a45c <vPortExitCritical>

	return xReturn;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3710      	adds	r7, #16
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b084      	sub	sp, #16
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008c02:	f001 fbfb 	bl	800a3fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d102      	bne.n	8008c18 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008c12:	2301      	movs	r3, #1
 8008c14:	60fb      	str	r3, [r7, #12]
 8008c16:	e001      	b.n	8008c1c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008c1c:	f001 fc1e 	bl	800a45c <vPortExitCritical>

	return xReturn;
 8008c20:	68fb      	ldr	r3, [r7, #12]
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3710      	adds	r7, #16
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
	...

08008c2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b085      	sub	sp, #20
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c36:	2300      	movs	r3, #0
 8008c38:	60fb      	str	r3, [r7, #12]
 8008c3a:	e014      	b.n	8008c66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008c3c:	4a0e      	ldr	r2, [pc, #56]	; (8008c78 <vQueueAddToRegistry+0x4c>)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d10b      	bne.n	8008c60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008c48:	490b      	ldr	r1, [pc, #44]	; (8008c78 <vQueueAddToRegistry+0x4c>)
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	683a      	ldr	r2, [r7, #0]
 8008c4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008c52:	4a09      	ldr	r2, [pc, #36]	; (8008c78 <vQueueAddToRegistry+0x4c>)
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	00db      	lsls	r3, r3, #3
 8008c58:	4413      	add	r3, r2
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008c5e:	e006      	b.n	8008c6e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	3301      	adds	r3, #1
 8008c64:	60fb      	str	r3, [r7, #12]
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2b07      	cmp	r3, #7
 8008c6a:	d9e7      	bls.n	8008c3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008c6c:	bf00      	nop
 8008c6e:	bf00      	nop
 8008c70:	3714      	adds	r7, #20
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bc80      	pop	{r7}
 8008c76:	4770      	bx	lr
 8008c78:	20000cd4 	.word	0x20000cd4

08008c7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b086      	sub	sp, #24
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	60b9      	str	r1, [r7, #8]
 8008c86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008c8c:	f001 fbb6 	bl	800a3fc <vPortEnterCritical>
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c96:	b25b      	sxtb	r3, r3
 8008c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c9c:	d103      	bne.n	8008ca6 <vQueueWaitForMessageRestricted+0x2a>
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cac:	b25b      	sxtb	r3, r3
 8008cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cb2:	d103      	bne.n	8008cbc <vQueueWaitForMessageRestricted+0x40>
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008cbc:	f001 fbce 	bl	800a45c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d106      	bne.n	8008cd6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	3324      	adds	r3, #36	; 0x24
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	68b9      	ldr	r1, [r7, #8]
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f000 fc5b 	bl	800958c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008cd6:	6978      	ldr	r0, [r7, #20]
 8008cd8:	f7ff ff27 	bl	8008b2a <prvUnlockQueue>
	}
 8008cdc:	bf00      	nop
 8008cde:	3718      	adds	r7, #24
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b08e      	sub	sp, #56	; 0x38
 8008ce8:	af04      	add	r7, sp, #16
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	60b9      	str	r1, [r7, #8]
 8008cee:	607a      	str	r2, [r7, #4]
 8008cf0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d10a      	bne.n	8008d0e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cfc:	f383 8811 	msr	BASEPRI, r3
 8008d00:	f3bf 8f6f 	isb	sy
 8008d04:	f3bf 8f4f 	dsb	sy
 8008d08:	623b      	str	r3, [r7, #32]
}
 8008d0a:	bf00      	nop
 8008d0c:	e7fe      	b.n	8008d0c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d10a      	bne.n	8008d2a <xTaskCreateStatic+0x46>
	__asm volatile
 8008d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d18:	f383 8811 	msr	BASEPRI, r3
 8008d1c:	f3bf 8f6f 	isb	sy
 8008d20:	f3bf 8f4f 	dsb	sy
 8008d24:	61fb      	str	r3, [r7, #28]
}
 8008d26:	bf00      	nop
 8008d28:	e7fe      	b.n	8008d28 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008d2a:	23b8      	movs	r3, #184	; 0xb8
 8008d2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	2bb8      	cmp	r3, #184	; 0xb8
 8008d32:	d00a      	beq.n	8008d4a <xTaskCreateStatic+0x66>
	__asm volatile
 8008d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d38:	f383 8811 	msr	BASEPRI, r3
 8008d3c:	f3bf 8f6f 	isb	sy
 8008d40:	f3bf 8f4f 	dsb	sy
 8008d44:	61bb      	str	r3, [r7, #24]
}
 8008d46:	bf00      	nop
 8008d48:	e7fe      	b.n	8008d48 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d01e      	beq.n	8008d8e <xTaskCreateStatic+0xaa>
 8008d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d01b      	beq.n	8008d8e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d58:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d5e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d62:	2202      	movs	r2, #2
 8008d64:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008d68:	2300      	movs	r3, #0
 8008d6a:	9303      	str	r3, [sp, #12]
 8008d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6e:	9302      	str	r3, [sp, #8]
 8008d70:	f107 0314 	add.w	r3, r7, #20
 8008d74:	9301      	str	r3, [sp, #4]
 8008d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d78:	9300      	str	r3, [sp, #0]
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	68b9      	ldr	r1, [r7, #8]
 8008d80:	68f8      	ldr	r0, [r7, #12]
 8008d82:	f000 f851 	bl	8008e28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d88:	f000 f8ec 	bl	8008f64 <prvAddNewTaskToReadyList>
 8008d8c:	e001      	b.n	8008d92 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008d92:	697b      	ldr	r3, [r7, #20]
	}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3728      	adds	r7, #40	; 0x28
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b08c      	sub	sp, #48	; 0x30
 8008da0:	af04      	add	r7, sp, #16
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	603b      	str	r3, [r7, #0]
 8008da8:	4613      	mov	r3, r2
 8008daa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dac:	88fb      	ldrh	r3, [r7, #6]
 8008dae:	009b      	lsls	r3, r3, #2
 8008db0:	4618      	mov	r0, r3
 8008db2:	f001 fc23 	bl	800a5fc <pvPortMalloc>
 8008db6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d00e      	beq.n	8008ddc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008dbe:	20b8      	movs	r0, #184	; 0xb8
 8008dc0:	f001 fc1c 	bl	800a5fc <pvPortMalloc>
 8008dc4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d003      	beq.n	8008dd4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	697a      	ldr	r2, [r7, #20]
 8008dd0:	631a      	str	r2, [r3, #48]	; 0x30
 8008dd2:	e005      	b.n	8008de0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008dd4:	6978      	ldr	r0, [r7, #20]
 8008dd6:	f001 fcd5 	bl	800a784 <vPortFree>
 8008dda:	e001      	b.n	8008de0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d017      	beq.n	8008e16 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008de6:	69fb      	ldr	r3, [r7, #28]
 8008de8:	2200      	movs	r2, #0
 8008dea:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008dee:	88fa      	ldrh	r2, [r7, #6]
 8008df0:	2300      	movs	r3, #0
 8008df2:	9303      	str	r3, [sp, #12]
 8008df4:	69fb      	ldr	r3, [r7, #28]
 8008df6:	9302      	str	r3, [sp, #8]
 8008df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dfa:	9301      	str	r3, [sp, #4]
 8008dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfe:	9300      	str	r3, [sp, #0]
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	68b9      	ldr	r1, [r7, #8]
 8008e04:	68f8      	ldr	r0, [r7, #12]
 8008e06:	f000 f80f 	bl	8008e28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e0a:	69f8      	ldr	r0, [r7, #28]
 8008e0c:	f000 f8aa 	bl	8008f64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008e10:	2301      	movs	r3, #1
 8008e12:	61bb      	str	r3, [r7, #24]
 8008e14:	e002      	b.n	8008e1c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008e16:	f04f 33ff 	mov.w	r3, #4294967295
 8008e1a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008e1c:	69bb      	ldr	r3, [r7, #24]
	}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3720      	adds	r7, #32
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
	...

08008e28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b088      	sub	sp, #32
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	607a      	str	r2, [r7, #4]
 8008e34:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e38:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	461a      	mov	r2, r3
 8008e40:	21a5      	movs	r1, #165	; 0xa5
 8008e42:	f003 faec 	bl	800c41e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008e50:	3b01      	subs	r3, #1
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	4413      	add	r3, r2
 8008e56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008e58:	69bb      	ldr	r3, [r7, #24]
 8008e5a:	f023 0307 	bic.w	r3, r3, #7
 8008e5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008e60:	69bb      	ldr	r3, [r7, #24]
 8008e62:	f003 0307 	and.w	r3, r3, #7
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d00a      	beq.n	8008e80 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6e:	f383 8811 	msr	BASEPRI, r3
 8008e72:	f3bf 8f6f 	isb	sy
 8008e76:	f3bf 8f4f 	dsb	sy
 8008e7a:	617b      	str	r3, [r7, #20]
}
 8008e7c:	bf00      	nop
 8008e7e:	e7fe      	b.n	8008e7e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e80:	2300      	movs	r3, #0
 8008e82:	61fb      	str	r3, [r7, #28]
 8008e84:	e012      	b.n	8008eac <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008e86:	68ba      	ldr	r2, [r7, #8]
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	4413      	add	r3, r2
 8008e8c:	7819      	ldrb	r1, [r3, #0]
 8008e8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	4413      	add	r3, r2
 8008e94:	3334      	adds	r3, #52	; 0x34
 8008e96:	460a      	mov	r2, r1
 8008e98:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008e9a:	68ba      	ldr	r2, [r7, #8]
 8008e9c:	69fb      	ldr	r3, [r7, #28]
 8008e9e:	4413      	add	r3, r2
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d006      	beq.n	8008eb4 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ea6:	69fb      	ldr	r3, [r7, #28]
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	61fb      	str	r3, [r7, #28]
 8008eac:	69fb      	ldr	r3, [r7, #28]
 8008eae:	2b1f      	cmp	r3, #31
 8008eb0:	d9e9      	bls.n	8008e86 <prvInitialiseNewTask+0x5e>
 8008eb2:	e000      	b.n	8008eb6 <prvInitialiseNewTask+0x8e>
		{
			break;
 8008eb4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec0:	2b37      	cmp	r3, #55	; 0x37
 8008ec2:	d901      	bls.n	8008ec8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008ec4:	2337      	movs	r3, #55	; 0x37
 8008ec6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ecc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ed2:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8008ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008edc:	3304      	adds	r3, #4
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7ff f893 	bl	800800a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee6:	3318      	adds	r3, #24
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f7ff f88e 	bl	800800a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ef2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f02:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f06:	2200      	movs	r2, #0
 8008f08:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f16:	3364      	adds	r3, #100	; 0x64
 8008f18:	224c      	movs	r2, #76	; 0x4c
 8008f1a:	2100      	movs	r1, #0
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f003 fa7e 	bl	800c41e <memset>
 8008f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f24:	4a0c      	ldr	r2, [pc, #48]	; (8008f58 <prvInitialiseNewTask+0x130>)
 8008f26:	669a      	str	r2, [r3, #104]	; 0x68
 8008f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2a:	4a0c      	ldr	r2, [pc, #48]	; (8008f5c <prvInitialiseNewTask+0x134>)
 8008f2c:	66da      	str	r2, [r3, #108]	; 0x6c
 8008f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f30:	4a0b      	ldr	r2, [pc, #44]	; (8008f60 <prvInitialiseNewTask+0x138>)
 8008f32:	671a      	str	r2, [r3, #112]	; 0x70
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008f34:	683a      	ldr	r2, [r7, #0]
 8008f36:	68f9      	ldr	r1, [r7, #12]
 8008f38:	69b8      	ldr	r0, [r7, #24]
 8008f3a:	f001 f96b 	bl	800a214 <pxPortInitialiseStack>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f42:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d002      	beq.n	8008f50 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f4e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f50:	bf00      	nop
 8008f52:	3720      	adds	r7, #32
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}
 8008f58:	20003368 	.word	0x20003368
 8008f5c:	200033d0 	.word	0x200033d0
 8008f60:	20003438 	.word	0x20003438

08008f64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b082      	sub	sp, #8
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008f6c:	f001 fa46 	bl	800a3fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008f70:	4b2d      	ldr	r3, [pc, #180]	; (8009028 <prvAddNewTaskToReadyList+0xc4>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	3301      	adds	r3, #1
 8008f76:	4a2c      	ldr	r2, [pc, #176]	; (8009028 <prvAddNewTaskToReadyList+0xc4>)
 8008f78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008f7a:	4b2c      	ldr	r3, [pc, #176]	; (800902c <prvAddNewTaskToReadyList+0xc8>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d109      	bne.n	8008f96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008f82:	4a2a      	ldr	r2, [pc, #168]	; (800902c <prvAddNewTaskToReadyList+0xc8>)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008f88:	4b27      	ldr	r3, [pc, #156]	; (8009028 <prvAddNewTaskToReadyList+0xc4>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d110      	bne.n	8008fb2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008f90:	f000 fc28 	bl	80097e4 <prvInitialiseTaskLists>
 8008f94:	e00d      	b.n	8008fb2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008f96:	4b26      	ldr	r3, [pc, #152]	; (8009030 <prvAddNewTaskToReadyList+0xcc>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d109      	bne.n	8008fb2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008f9e:	4b23      	ldr	r3, [pc, #140]	; (800902c <prvAddNewTaskToReadyList+0xc8>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d802      	bhi.n	8008fb2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008fac:	4a1f      	ldr	r2, [pc, #124]	; (800902c <prvAddNewTaskToReadyList+0xc8>)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008fb2:	4b20      	ldr	r3, [pc, #128]	; (8009034 <prvAddNewTaskToReadyList+0xd0>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	4a1e      	ldr	r2, [pc, #120]	; (8009034 <prvAddNewTaskToReadyList+0xd0>)
 8008fba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008fbc:	4b1d      	ldr	r3, [pc, #116]	; (8009034 <prvAddNewTaskToReadyList+0xd0>)
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fc8:	4b1b      	ldr	r3, [pc, #108]	; (8009038 <prvAddNewTaskToReadyList+0xd4>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d903      	bls.n	8008fd8 <prvAddNewTaskToReadyList+0x74>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd4:	4a18      	ldr	r2, [pc, #96]	; (8009038 <prvAddNewTaskToReadyList+0xd4>)
 8008fd6:	6013      	str	r3, [r2, #0]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fdc:	4613      	mov	r3, r2
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	4413      	add	r3, r2
 8008fe2:	009b      	lsls	r3, r3, #2
 8008fe4:	4a15      	ldr	r2, [pc, #84]	; (800903c <prvAddNewTaskToReadyList+0xd8>)
 8008fe6:	441a      	add	r2, r3
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	3304      	adds	r3, #4
 8008fec:	4619      	mov	r1, r3
 8008fee:	4610      	mov	r0, r2
 8008ff0:	f7ff f817 	bl	8008022 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008ff4:	f001 fa32 	bl	800a45c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008ff8:	4b0d      	ldr	r3, [pc, #52]	; (8009030 <prvAddNewTaskToReadyList+0xcc>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d00e      	beq.n	800901e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009000:	4b0a      	ldr	r3, [pc, #40]	; (800902c <prvAddNewTaskToReadyList+0xc8>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800900a:	429a      	cmp	r2, r3
 800900c:	d207      	bcs.n	800901e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800900e:	4b0c      	ldr	r3, [pc, #48]	; (8009040 <prvAddNewTaskToReadyList+0xdc>)
 8009010:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009014:	601a      	str	r2, [r3, #0]
 8009016:	f3bf 8f4f 	dsb	sy
 800901a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800901e:	bf00      	nop
 8009020:	3708      	adds	r7, #8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	200011e8 	.word	0x200011e8
 800902c:	20000d14 	.word	0x20000d14
 8009030:	200011f4 	.word	0x200011f4
 8009034:	20001204 	.word	0x20001204
 8009038:	200011f0 	.word	0x200011f0
 800903c:	20000d18 	.word	0x20000d18
 8009040:	e000ed04 	.word	0xe000ed04

08009044 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800904c:	2300      	movs	r3, #0
 800904e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d017      	beq.n	8009086 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009056:	4b13      	ldr	r3, [pc, #76]	; (80090a4 <vTaskDelay+0x60>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d00a      	beq.n	8009074 <vTaskDelay+0x30>
	__asm volatile
 800905e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009062:	f383 8811 	msr	BASEPRI, r3
 8009066:	f3bf 8f6f 	isb	sy
 800906a:	f3bf 8f4f 	dsb	sy
 800906e:	60bb      	str	r3, [r7, #8]
}
 8009070:	bf00      	nop
 8009072:	e7fe      	b.n	8009072 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009074:	f000 f88a 	bl	800918c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009078:	2100      	movs	r1, #0
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 fd64 	bl	8009b48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009080:	f000 f892 	bl	80091a8 <xTaskResumeAll>
 8009084:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d107      	bne.n	800909c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800908c:	4b06      	ldr	r3, [pc, #24]	; (80090a8 <vTaskDelay+0x64>)
 800908e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009092:	601a      	str	r2, [r3, #0]
 8009094:	f3bf 8f4f 	dsb	sy
 8009098:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800909c:	bf00      	nop
 800909e:	3710      	adds	r7, #16
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	20001210 	.word	0x20001210
 80090a8:	e000ed04 	.word	0xe000ed04

080090ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b08a      	sub	sp, #40	; 0x28
 80090b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80090b2:	2300      	movs	r3, #0
 80090b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80090b6:	2300      	movs	r3, #0
 80090b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80090ba:	463a      	mov	r2, r7
 80090bc:	1d39      	adds	r1, r7, #4
 80090be:	f107 0308 	add.w	r3, r7, #8
 80090c2:	4618      	mov	r0, r3
 80090c4:	f7fe ff50 	bl	8007f68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80090c8:	6839      	ldr	r1, [r7, #0]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	68ba      	ldr	r2, [r7, #8]
 80090ce:	9202      	str	r2, [sp, #8]
 80090d0:	9301      	str	r3, [sp, #4]
 80090d2:	2300      	movs	r3, #0
 80090d4:	9300      	str	r3, [sp, #0]
 80090d6:	2300      	movs	r3, #0
 80090d8:	460a      	mov	r2, r1
 80090da:	4924      	ldr	r1, [pc, #144]	; (800916c <vTaskStartScheduler+0xc0>)
 80090dc:	4824      	ldr	r0, [pc, #144]	; (8009170 <vTaskStartScheduler+0xc4>)
 80090de:	f7ff fe01 	bl	8008ce4 <xTaskCreateStatic>
 80090e2:	4603      	mov	r3, r0
 80090e4:	4a23      	ldr	r2, [pc, #140]	; (8009174 <vTaskStartScheduler+0xc8>)
 80090e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80090e8:	4b22      	ldr	r3, [pc, #136]	; (8009174 <vTaskStartScheduler+0xc8>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d002      	beq.n	80090f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80090f0:	2301      	movs	r3, #1
 80090f2:	617b      	str	r3, [r7, #20]
 80090f4:	e001      	b.n	80090fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80090f6:	2300      	movs	r3, #0
 80090f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d102      	bne.n	8009106 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009100:	f000 fd76 	bl	8009bf0 <xTimerCreateTimerTask>
 8009104:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	2b01      	cmp	r3, #1
 800910a:	d11b      	bne.n	8009144 <vTaskStartScheduler+0x98>
	__asm volatile
 800910c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009110:	f383 8811 	msr	BASEPRI, r3
 8009114:	f3bf 8f6f 	isb	sy
 8009118:	f3bf 8f4f 	dsb	sy
 800911c:	613b      	str	r3, [r7, #16]
}
 800911e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009120:	4b15      	ldr	r3, [pc, #84]	; (8009178 <vTaskStartScheduler+0xcc>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	3364      	adds	r3, #100	; 0x64
 8009126:	4a15      	ldr	r2, [pc, #84]	; (800917c <vTaskStartScheduler+0xd0>)
 8009128:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800912a:	4b15      	ldr	r3, [pc, #84]	; (8009180 <vTaskStartScheduler+0xd4>)
 800912c:	f04f 32ff 	mov.w	r2, #4294967295
 8009130:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009132:	4b14      	ldr	r3, [pc, #80]	; (8009184 <vTaskStartScheduler+0xd8>)
 8009134:	2201      	movs	r2, #1
 8009136:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009138:	4b13      	ldr	r3, [pc, #76]	; (8009188 <vTaskStartScheduler+0xdc>)
 800913a:	2200      	movs	r2, #0
 800913c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800913e:	f001 f8eb 	bl	800a318 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009142:	e00e      	b.n	8009162 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800914a:	d10a      	bne.n	8009162 <vTaskStartScheduler+0xb6>
	__asm volatile
 800914c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009150:	f383 8811 	msr	BASEPRI, r3
 8009154:	f3bf 8f6f 	isb	sy
 8009158:	f3bf 8f4f 	dsb	sy
 800915c:	60fb      	str	r3, [r7, #12]
}
 800915e:	bf00      	nop
 8009160:	e7fe      	b.n	8009160 <vTaskStartScheduler+0xb4>
}
 8009162:	bf00      	nop
 8009164:	3718      	adds	r7, #24
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	08010548 	.word	0x08010548
 8009170:	080097b5 	.word	0x080097b5
 8009174:	2000120c 	.word	0x2000120c
 8009178:	20000d14 	.word	0x20000d14
 800917c:	200001e0 	.word	0x200001e0
 8009180:	20001208 	.word	0x20001208
 8009184:	200011f4 	.word	0x200011f4
 8009188:	200011ec 	.word	0x200011ec

0800918c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800918c:	b480      	push	{r7}
 800918e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009190:	4b04      	ldr	r3, [pc, #16]	; (80091a4 <vTaskSuspendAll+0x18>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	3301      	adds	r3, #1
 8009196:	4a03      	ldr	r2, [pc, #12]	; (80091a4 <vTaskSuspendAll+0x18>)
 8009198:	6013      	str	r3, [r2, #0]
}
 800919a:	bf00      	nop
 800919c:	46bd      	mov	sp, r7
 800919e:	bc80      	pop	{r7}
 80091a0:	4770      	bx	lr
 80091a2:	bf00      	nop
 80091a4:	20001210 	.word	0x20001210

080091a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80091ae:	2300      	movs	r3, #0
 80091b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80091b2:	2300      	movs	r3, #0
 80091b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80091b6:	4b42      	ldr	r3, [pc, #264]	; (80092c0 <xTaskResumeAll+0x118>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d10a      	bne.n	80091d4 <xTaskResumeAll+0x2c>
	__asm volatile
 80091be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c2:	f383 8811 	msr	BASEPRI, r3
 80091c6:	f3bf 8f6f 	isb	sy
 80091ca:	f3bf 8f4f 	dsb	sy
 80091ce:	603b      	str	r3, [r7, #0]
}
 80091d0:	bf00      	nop
 80091d2:	e7fe      	b.n	80091d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80091d4:	f001 f912 	bl	800a3fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80091d8:	4b39      	ldr	r3, [pc, #228]	; (80092c0 <xTaskResumeAll+0x118>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	3b01      	subs	r3, #1
 80091de:	4a38      	ldr	r2, [pc, #224]	; (80092c0 <xTaskResumeAll+0x118>)
 80091e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091e2:	4b37      	ldr	r3, [pc, #220]	; (80092c0 <xTaskResumeAll+0x118>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d162      	bne.n	80092b0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80091ea:	4b36      	ldr	r3, [pc, #216]	; (80092c4 <xTaskResumeAll+0x11c>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d05e      	beq.n	80092b0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80091f2:	e02f      	b.n	8009254 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80091f4:	4b34      	ldr	r3, [pc, #208]	; (80092c8 <xTaskResumeAll+0x120>)
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	68db      	ldr	r3, [r3, #12]
 80091fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	3318      	adds	r3, #24
 8009200:	4618      	mov	r0, r3
 8009202:	f7fe ff69 	bl	80080d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	3304      	adds	r3, #4
 800920a:	4618      	mov	r0, r3
 800920c:	f7fe ff64 	bl	80080d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009214:	4b2d      	ldr	r3, [pc, #180]	; (80092cc <xTaskResumeAll+0x124>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	429a      	cmp	r2, r3
 800921a:	d903      	bls.n	8009224 <xTaskResumeAll+0x7c>
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009220:	4a2a      	ldr	r2, [pc, #168]	; (80092cc <xTaskResumeAll+0x124>)
 8009222:	6013      	str	r3, [r2, #0]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009228:	4613      	mov	r3, r2
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	4413      	add	r3, r2
 800922e:	009b      	lsls	r3, r3, #2
 8009230:	4a27      	ldr	r2, [pc, #156]	; (80092d0 <xTaskResumeAll+0x128>)
 8009232:	441a      	add	r2, r3
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	3304      	adds	r3, #4
 8009238:	4619      	mov	r1, r3
 800923a:	4610      	mov	r0, r2
 800923c:	f7fe fef1 	bl	8008022 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009244:	4b23      	ldr	r3, [pc, #140]	; (80092d4 <xTaskResumeAll+0x12c>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800924a:	429a      	cmp	r2, r3
 800924c:	d302      	bcc.n	8009254 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800924e:	4b22      	ldr	r3, [pc, #136]	; (80092d8 <xTaskResumeAll+0x130>)
 8009250:	2201      	movs	r2, #1
 8009252:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009254:	4b1c      	ldr	r3, [pc, #112]	; (80092c8 <xTaskResumeAll+0x120>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d1cb      	bne.n	80091f4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d001      	beq.n	8009266 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009262:	f000 fb61 	bl	8009928 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009266:	4b1d      	ldr	r3, [pc, #116]	; (80092dc <xTaskResumeAll+0x134>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d010      	beq.n	8009294 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009272:	f000 f845 	bl	8009300 <xTaskIncrementTick>
 8009276:	4603      	mov	r3, r0
 8009278:	2b00      	cmp	r3, #0
 800927a:	d002      	beq.n	8009282 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800927c:	4b16      	ldr	r3, [pc, #88]	; (80092d8 <xTaskResumeAll+0x130>)
 800927e:	2201      	movs	r2, #1
 8009280:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	3b01      	subs	r3, #1
 8009286:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d1f1      	bne.n	8009272 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800928e:	4b13      	ldr	r3, [pc, #76]	; (80092dc <xTaskResumeAll+0x134>)
 8009290:	2200      	movs	r2, #0
 8009292:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009294:	4b10      	ldr	r3, [pc, #64]	; (80092d8 <xTaskResumeAll+0x130>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d009      	beq.n	80092b0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800929c:	2301      	movs	r3, #1
 800929e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80092a0:	4b0f      	ldr	r3, [pc, #60]	; (80092e0 <xTaskResumeAll+0x138>)
 80092a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092a6:	601a      	str	r2, [r3, #0]
 80092a8:	f3bf 8f4f 	dsb	sy
 80092ac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80092b0:	f001 f8d4 	bl	800a45c <vPortExitCritical>

	return xAlreadyYielded;
 80092b4:	68bb      	ldr	r3, [r7, #8]
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3710      	adds	r7, #16
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	20001210 	.word	0x20001210
 80092c4:	200011e8 	.word	0x200011e8
 80092c8:	200011a8 	.word	0x200011a8
 80092cc:	200011f0 	.word	0x200011f0
 80092d0:	20000d18 	.word	0x20000d18
 80092d4:	20000d14 	.word	0x20000d14
 80092d8:	200011fc 	.word	0x200011fc
 80092dc:	200011f8 	.word	0x200011f8
 80092e0:	e000ed04 	.word	0xe000ed04

080092e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80092e4:	b480      	push	{r7}
 80092e6:	b083      	sub	sp, #12
 80092e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80092ea:	4b04      	ldr	r3, [pc, #16]	; (80092fc <xTaskGetTickCount+0x18>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80092f0:	687b      	ldr	r3, [r7, #4]
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	370c      	adds	r7, #12
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bc80      	pop	{r7}
 80092fa:	4770      	bx	lr
 80092fc:	200011ec 	.word	0x200011ec

08009300 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b086      	sub	sp, #24
 8009304:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009306:	2300      	movs	r3, #0
 8009308:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800930a:	4b51      	ldr	r3, [pc, #324]	; (8009450 <xTaskIncrementTick+0x150>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2b00      	cmp	r3, #0
 8009310:	f040 808e 	bne.w	8009430 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009314:	4b4f      	ldr	r3, [pc, #316]	; (8009454 <xTaskIncrementTick+0x154>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	3301      	adds	r3, #1
 800931a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800931c:	4a4d      	ldr	r2, [pc, #308]	; (8009454 <xTaskIncrementTick+0x154>)
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d120      	bne.n	800936a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009328:	4b4b      	ldr	r3, [pc, #300]	; (8009458 <xTaskIncrementTick+0x158>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d00a      	beq.n	8009348 <xTaskIncrementTick+0x48>
	__asm volatile
 8009332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009336:	f383 8811 	msr	BASEPRI, r3
 800933a:	f3bf 8f6f 	isb	sy
 800933e:	f3bf 8f4f 	dsb	sy
 8009342:	603b      	str	r3, [r7, #0]
}
 8009344:	bf00      	nop
 8009346:	e7fe      	b.n	8009346 <xTaskIncrementTick+0x46>
 8009348:	4b43      	ldr	r3, [pc, #268]	; (8009458 <xTaskIncrementTick+0x158>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	60fb      	str	r3, [r7, #12]
 800934e:	4b43      	ldr	r3, [pc, #268]	; (800945c <xTaskIncrementTick+0x15c>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a41      	ldr	r2, [pc, #260]	; (8009458 <xTaskIncrementTick+0x158>)
 8009354:	6013      	str	r3, [r2, #0]
 8009356:	4a41      	ldr	r2, [pc, #260]	; (800945c <xTaskIncrementTick+0x15c>)
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	6013      	str	r3, [r2, #0]
 800935c:	4b40      	ldr	r3, [pc, #256]	; (8009460 <xTaskIncrementTick+0x160>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	3301      	adds	r3, #1
 8009362:	4a3f      	ldr	r2, [pc, #252]	; (8009460 <xTaskIncrementTick+0x160>)
 8009364:	6013      	str	r3, [r2, #0]
 8009366:	f000 fadf 	bl	8009928 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800936a:	4b3e      	ldr	r3, [pc, #248]	; (8009464 <xTaskIncrementTick+0x164>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	693a      	ldr	r2, [r7, #16]
 8009370:	429a      	cmp	r2, r3
 8009372:	d34e      	bcc.n	8009412 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009374:	4b38      	ldr	r3, [pc, #224]	; (8009458 <xTaskIncrementTick+0x158>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d101      	bne.n	8009382 <xTaskIncrementTick+0x82>
 800937e:	2301      	movs	r3, #1
 8009380:	e000      	b.n	8009384 <xTaskIncrementTick+0x84>
 8009382:	2300      	movs	r3, #0
 8009384:	2b00      	cmp	r3, #0
 8009386:	d004      	beq.n	8009392 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009388:	4b36      	ldr	r3, [pc, #216]	; (8009464 <xTaskIncrementTick+0x164>)
 800938a:	f04f 32ff 	mov.w	r2, #4294967295
 800938e:	601a      	str	r2, [r3, #0]
					break;
 8009390:	e03f      	b.n	8009412 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009392:	4b31      	ldr	r3, [pc, #196]	; (8009458 <xTaskIncrementTick+0x158>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	68db      	ldr	r3, [r3, #12]
 800939a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80093a2:	693a      	ldr	r2, [r7, #16]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d203      	bcs.n	80093b2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80093aa:	4a2e      	ldr	r2, [pc, #184]	; (8009464 <xTaskIncrementTick+0x164>)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6013      	str	r3, [r2, #0]
						break;
 80093b0:	e02f      	b.n	8009412 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	3304      	adds	r3, #4
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7fe fe8e 	bl	80080d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d004      	beq.n	80093ce <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	3318      	adds	r3, #24
 80093c8:	4618      	mov	r0, r3
 80093ca:	f7fe fe85 	bl	80080d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093d2:	4b25      	ldr	r3, [pc, #148]	; (8009468 <xTaskIncrementTick+0x168>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d903      	bls.n	80093e2 <xTaskIncrementTick+0xe2>
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093de:	4a22      	ldr	r2, [pc, #136]	; (8009468 <xTaskIncrementTick+0x168>)
 80093e0:	6013      	str	r3, [r2, #0]
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093e6:	4613      	mov	r3, r2
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	4413      	add	r3, r2
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	4a1f      	ldr	r2, [pc, #124]	; (800946c <xTaskIncrementTick+0x16c>)
 80093f0:	441a      	add	r2, r3
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	3304      	adds	r3, #4
 80093f6:	4619      	mov	r1, r3
 80093f8:	4610      	mov	r0, r2
 80093fa:	f7fe fe12 	bl	8008022 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009402:	4b1b      	ldr	r3, [pc, #108]	; (8009470 <xTaskIncrementTick+0x170>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009408:	429a      	cmp	r2, r3
 800940a:	d3b3      	bcc.n	8009374 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800940c:	2301      	movs	r3, #1
 800940e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009410:	e7b0      	b.n	8009374 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009412:	4b17      	ldr	r3, [pc, #92]	; (8009470 <xTaskIncrementTick+0x170>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009418:	4914      	ldr	r1, [pc, #80]	; (800946c <xTaskIncrementTick+0x16c>)
 800941a:	4613      	mov	r3, r2
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	4413      	add	r3, r2
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	440b      	add	r3, r1
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	2b01      	cmp	r3, #1
 8009428:	d907      	bls.n	800943a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800942a:	2301      	movs	r3, #1
 800942c:	617b      	str	r3, [r7, #20]
 800942e:	e004      	b.n	800943a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009430:	4b10      	ldr	r3, [pc, #64]	; (8009474 <xTaskIncrementTick+0x174>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	3301      	adds	r3, #1
 8009436:	4a0f      	ldr	r2, [pc, #60]	; (8009474 <xTaskIncrementTick+0x174>)
 8009438:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800943a:	4b0f      	ldr	r3, [pc, #60]	; (8009478 <xTaskIncrementTick+0x178>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d001      	beq.n	8009446 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8009442:	2301      	movs	r3, #1
 8009444:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009446:	697b      	ldr	r3, [r7, #20]
}
 8009448:	4618      	mov	r0, r3
 800944a:	3718      	adds	r7, #24
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}
 8009450:	20001210 	.word	0x20001210
 8009454:	200011ec 	.word	0x200011ec
 8009458:	200011a0 	.word	0x200011a0
 800945c:	200011a4 	.word	0x200011a4
 8009460:	20001200 	.word	0x20001200
 8009464:	20001208 	.word	0x20001208
 8009468:	200011f0 	.word	0x200011f0
 800946c:	20000d18 	.word	0x20000d18
 8009470:	20000d14 	.word	0x20000d14
 8009474:	200011f8 	.word	0x200011f8
 8009478:	200011fc 	.word	0x200011fc

0800947c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800947c:	b480      	push	{r7}
 800947e:	b085      	sub	sp, #20
 8009480:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009482:	4b2a      	ldr	r3, [pc, #168]	; (800952c <vTaskSwitchContext+0xb0>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d003      	beq.n	8009492 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800948a:	4b29      	ldr	r3, [pc, #164]	; (8009530 <vTaskSwitchContext+0xb4>)
 800948c:	2201      	movs	r2, #1
 800948e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009490:	e046      	b.n	8009520 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009492:	4b27      	ldr	r3, [pc, #156]	; (8009530 <vTaskSwitchContext+0xb4>)
 8009494:	2200      	movs	r2, #0
 8009496:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009498:	4b26      	ldr	r3, [pc, #152]	; (8009534 <vTaskSwitchContext+0xb8>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	60fb      	str	r3, [r7, #12]
 800949e:	e010      	b.n	80094c2 <vTaskSwitchContext+0x46>
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d10a      	bne.n	80094bc <vTaskSwitchContext+0x40>
	__asm volatile
 80094a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094aa:	f383 8811 	msr	BASEPRI, r3
 80094ae:	f3bf 8f6f 	isb	sy
 80094b2:	f3bf 8f4f 	dsb	sy
 80094b6:	607b      	str	r3, [r7, #4]
}
 80094b8:	bf00      	nop
 80094ba:	e7fe      	b.n	80094ba <vTaskSwitchContext+0x3e>
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	3b01      	subs	r3, #1
 80094c0:	60fb      	str	r3, [r7, #12]
 80094c2:	491d      	ldr	r1, [pc, #116]	; (8009538 <vTaskSwitchContext+0xbc>)
 80094c4:	68fa      	ldr	r2, [r7, #12]
 80094c6:	4613      	mov	r3, r2
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	4413      	add	r3, r2
 80094cc:	009b      	lsls	r3, r3, #2
 80094ce:	440b      	add	r3, r1
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d0e4      	beq.n	80094a0 <vTaskSwitchContext+0x24>
 80094d6:	68fa      	ldr	r2, [r7, #12]
 80094d8:	4613      	mov	r3, r2
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	4413      	add	r3, r2
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	4a15      	ldr	r2, [pc, #84]	; (8009538 <vTaskSwitchContext+0xbc>)
 80094e2:	4413      	add	r3, r2
 80094e4:	60bb      	str	r3, [r7, #8]
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	685a      	ldr	r2, [r3, #4]
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	605a      	str	r2, [r3, #4]
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	685a      	ldr	r2, [r3, #4]
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	3308      	adds	r3, #8
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d104      	bne.n	8009506 <vTaskSwitchContext+0x8a>
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	685a      	ldr	r2, [r3, #4]
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	605a      	str	r2, [r3, #4]
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	68db      	ldr	r3, [r3, #12]
 800950c:	4a0b      	ldr	r2, [pc, #44]	; (800953c <vTaskSwitchContext+0xc0>)
 800950e:	6013      	str	r3, [r2, #0]
 8009510:	4a08      	ldr	r2, [pc, #32]	; (8009534 <vTaskSwitchContext+0xb8>)
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009516:	4b09      	ldr	r3, [pc, #36]	; (800953c <vTaskSwitchContext+0xc0>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	3364      	adds	r3, #100	; 0x64
 800951c:	4a08      	ldr	r2, [pc, #32]	; (8009540 <vTaskSwitchContext+0xc4>)
 800951e:	6013      	str	r3, [r2, #0]
}
 8009520:	bf00      	nop
 8009522:	3714      	adds	r7, #20
 8009524:	46bd      	mov	sp, r7
 8009526:	bc80      	pop	{r7}
 8009528:	4770      	bx	lr
 800952a:	bf00      	nop
 800952c:	20001210 	.word	0x20001210
 8009530:	200011fc 	.word	0x200011fc
 8009534:	200011f0 	.word	0x200011f0
 8009538:	20000d18 	.word	0x20000d18
 800953c:	20000d14 	.word	0x20000d14
 8009540:	200001e0 	.word	0x200001e0

08009544 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b084      	sub	sp, #16
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d10a      	bne.n	800956a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009558:	f383 8811 	msr	BASEPRI, r3
 800955c:	f3bf 8f6f 	isb	sy
 8009560:	f3bf 8f4f 	dsb	sy
 8009564:	60fb      	str	r3, [r7, #12]
}
 8009566:	bf00      	nop
 8009568:	e7fe      	b.n	8009568 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800956a:	4b07      	ldr	r3, [pc, #28]	; (8009588 <vTaskPlaceOnEventList+0x44>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	3318      	adds	r3, #24
 8009570:	4619      	mov	r1, r3
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f7fe fd78 	bl	8008068 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009578:	2101      	movs	r1, #1
 800957a:	6838      	ldr	r0, [r7, #0]
 800957c:	f000 fae4 	bl	8009b48 <prvAddCurrentTaskToDelayedList>
}
 8009580:	bf00      	nop
 8009582:	3710      	adds	r7, #16
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}
 8009588:	20000d14 	.word	0x20000d14

0800958c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800958c:	b580      	push	{r7, lr}
 800958e:	b086      	sub	sp, #24
 8009590:	af00      	add	r7, sp, #0
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	60b9      	str	r1, [r7, #8]
 8009596:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d10a      	bne.n	80095b4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800959e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a2:	f383 8811 	msr	BASEPRI, r3
 80095a6:	f3bf 8f6f 	isb	sy
 80095aa:	f3bf 8f4f 	dsb	sy
 80095ae:	617b      	str	r3, [r7, #20]
}
 80095b0:	bf00      	nop
 80095b2:	e7fe      	b.n	80095b2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80095b4:	4b0a      	ldr	r3, [pc, #40]	; (80095e0 <vTaskPlaceOnEventListRestricted+0x54>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	3318      	adds	r3, #24
 80095ba:	4619      	mov	r1, r3
 80095bc:	68f8      	ldr	r0, [r7, #12]
 80095be:	f7fe fd30 	bl	8008022 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d002      	beq.n	80095ce <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80095c8:	f04f 33ff 	mov.w	r3, #4294967295
 80095cc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80095ce:	6879      	ldr	r1, [r7, #4]
 80095d0:	68b8      	ldr	r0, [r7, #8]
 80095d2:	f000 fab9 	bl	8009b48 <prvAddCurrentTaskToDelayedList>
	}
 80095d6:	bf00      	nop
 80095d8:	3718      	adds	r7, #24
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	20000d14 	.word	0x20000d14

080095e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b086      	sub	sp, #24
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	68db      	ldr	r3, [r3, #12]
 80095f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d10a      	bne.n	8009610 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80095fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095fe:	f383 8811 	msr	BASEPRI, r3
 8009602:	f3bf 8f6f 	isb	sy
 8009606:	f3bf 8f4f 	dsb	sy
 800960a:	60fb      	str	r3, [r7, #12]
}
 800960c:	bf00      	nop
 800960e:	e7fe      	b.n	800960e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	3318      	adds	r3, #24
 8009614:	4618      	mov	r0, r3
 8009616:	f7fe fd5f 	bl	80080d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800961a:	4b1e      	ldr	r3, [pc, #120]	; (8009694 <xTaskRemoveFromEventList+0xb0>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d11d      	bne.n	800965e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	3304      	adds	r3, #4
 8009626:	4618      	mov	r0, r3
 8009628:	f7fe fd56 	bl	80080d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009630:	4b19      	ldr	r3, [pc, #100]	; (8009698 <xTaskRemoveFromEventList+0xb4>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	429a      	cmp	r2, r3
 8009636:	d903      	bls.n	8009640 <xTaskRemoveFromEventList+0x5c>
 8009638:	693b      	ldr	r3, [r7, #16]
 800963a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800963c:	4a16      	ldr	r2, [pc, #88]	; (8009698 <xTaskRemoveFromEventList+0xb4>)
 800963e:	6013      	str	r3, [r2, #0]
 8009640:	693b      	ldr	r3, [r7, #16]
 8009642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009644:	4613      	mov	r3, r2
 8009646:	009b      	lsls	r3, r3, #2
 8009648:	4413      	add	r3, r2
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	4a13      	ldr	r2, [pc, #76]	; (800969c <xTaskRemoveFromEventList+0xb8>)
 800964e:	441a      	add	r2, r3
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	3304      	adds	r3, #4
 8009654:	4619      	mov	r1, r3
 8009656:	4610      	mov	r0, r2
 8009658:	f7fe fce3 	bl	8008022 <vListInsertEnd>
 800965c:	e005      	b.n	800966a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	3318      	adds	r3, #24
 8009662:	4619      	mov	r1, r3
 8009664:	480e      	ldr	r0, [pc, #56]	; (80096a0 <xTaskRemoveFromEventList+0xbc>)
 8009666:	f7fe fcdc 	bl	8008022 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800966e:	4b0d      	ldr	r3, [pc, #52]	; (80096a4 <xTaskRemoveFromEventList+0xc0>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009674:	429a      	cmp	r2, r3
 8009676:	d905      	bls.n	8009684 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009678:	2301      	movs	r3, #1
 800967a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800967c:	4b0a      	ldr	r3, [pc, #40]	; (80096a8 <xTaskRemoveFromEventList+0xc4>)
 800967e:	2201      	movs	r2, #1
 8009680:	601a      	str	r2, [r3, #0]
 8009682:	e001      	b.n	8009688 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009684:	2300      	movs	r3, #0
 8009686:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009688:	697b      	ldr	r3, [r7, #20]
}
 800968a:	4618      	mov	r0, r3
 800968c:	3718      	adds	r7, #24
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop
 8009694:	20001210 	.word	0x20001210
 8009698:	200011f0 	.word	0x200011f0
 800969c:	20000d18 	.word	0x20000d18
 80096a0:	200011a8 	.word	0x200011a8
 80096a4:	20000d14 	.word	0x20000d14
 80096a8:	200011fc 	.word	0x200011fc

080096ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80096b4:	4b06      	ldr	r3, [pc, #24]	; (80096d0 <vTaskInternalSetTimeOutState+0x24>)
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80096bc:	4b05      	ldr	r3, [pc, #20]	; (80096d4 <vTaskInternalSetTimeOutState+0x28>)
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	605a      	str	r2, [r3, #4]
}
 80096c4:	bf00      	nop
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bc80      	pop	{r7}
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop
 80096d0:	20001200 	.word	0x20001200
 80096d4:	200011ec 	.word	0x200011ec

080096d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b088      	sub	sp, #32
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d10a      	bne.n	80096fe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80096e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ec:	f383 8811 	msr	BASEPRI, r3
 80096f0:	f3bf 8f6f 	isb	sy
 80096f4:	f3bf 8f4f 	dsb	sy
 80096f8:	613b      	str	r3, [r7, #16]
}
 80096fa:	bf00      	nop
 80096fc:	e7fe      	b.n	80096fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d10a      	bne.n	800971a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009708:	f383 8811 	msr	BASEPRI, r3
 800970c:	f3bf 8f6f 	isb	sy
 8009710:	f3bf 8f4f 	dsb	sy
 8009714:	60fb      	str	r3, [r7, #12]
}
 8009716:	bf00      	nop
 8009718:	e7fe      	b.n	8009718 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800971a:	f000 fe6f 	bl	800a3fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800971e:	4b1d      	ldr	r3, [pc, #116]	; (8009794 <xTaskCheckForTimeOut+0xbc>)
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	685b      	ldr	r3, [r3, #4]
 8009728:	69ba      	ldr	r2, [r7, #24]
 800972a:	1ad3      	subs	r3, r2, r3
 800972c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009736:	d102      	bne.n	800973e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009738:	2300      	movs	r3, #0
 800973a:	61fb      	str	r3, [r7, #28]
 800973c:	e023      	b.n	8009786 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	4b15      	ldr	r3, [pc, #84]	; (8009798 <xTaskCheckForTimeOut+0xc0>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	429a      	cmp	r2, r3
 8009748:	d007      	beq.n	800975a <xTaskCheckForTimeOut+0x82>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	69ba      	ldr	r2, [r7, #24]
 8009750:	429a      	cmp	r2, r3
 8009752:	d302      	bcc.n	800975a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009754:	2301      	movs	r3, #1
 8009756:	61fb      	str	r3, [r7, #28]
 8009758:	e015      	b.n	8009786 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	697a      	ldr	r2, [r7, #20]
 8009760:	429a      	cmp	r2, r3
 8009762:	d20b      	bcs.n	800977c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	1ad2      	subs	r2, r2, r3
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f7ff ff9b 	bl	80096ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009776:	2300      	movs	r3, #0
 8009778:	61fb      	str	r3, [r7, #28]
 800977a:	e004      	b.n	8009786 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	2200      	movs	r2, #0
 8009780:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009782:	2301      	movs	r3, #1
 8009784:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009786:	f000 fe69 	bl	800a45c <vPortExitCritical>

	return xReturn;
 800978a:	69fb      	ldr	r3, [r7, #28]
}
 800978c:	4618      	mov	r0, r3
 800978e:	3720      	adds	r7, #32
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}
 8009794:	200011ec 	.word	0x200011ec
 8009798:	20001200 	.word	0x20001200

0800979c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800979c:	b480      	push	{r7}
 800979e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80097a0:	4b03      	ldr	r3, [pc, #12]	; (80097b0 <vTaskMissedYield+0x14>)
 80097a2:	2201      	movs	r2, #1
 80097a4:	601a      	str	r2, [r3, #0]
}
 80097a6:	bf00      	nop
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bc80      	pop	{r7}
 80097ac:	4770      	bx	lr
 80097ae:	bf00      	nop
 80097b0:	200011fc 	.word	0x200011fc

080097b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b082      	sub	sp, #8
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80097bc:	f000 f852 	bl	8009864 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80097c0:	4b06      	ldr	r3, [pc, #24]	; (80097dc <prvIdleTask+0x28>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d9f9      	bls.n	80097bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80097c8:	4b05      	ldr	r3, [pc, #20]	; (80097e0 <prvIdleTask+0x2c>)
 80097ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097ce:	601a      	str	r2, [r3, #0]
 80097d0:	f3bf 8f4f 	dsb	sy
 80097d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80097d8:	e7f0      	b.n	80097bc <prvIdleTask+0x8>
 80097da:	bf00      	nop
 80097dc:	20000d18 	.word	0x20000d18
 80097e0:	e000ed04 	.word	0xe000ed04

080097e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80097ea:	2300      	movs	r3, #0
 80097ec:	607b      	str	r3, [r7, #4]
 80097ee:	e00c      	b.n	800980a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	4613      	mov	r3, r2
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	4413      	add	r3, r2
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	4a12      	ldr	r2, [pc, #72]	; (8009844 <prvInitialiseTaskLists+0x60>)
 80097fc:	4413      	add	r3, r2
 80097fe:	4618      	mov	r0, r3
 8009800:	f7fe fbe4 	bl	8007fcc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	3301      	adds	r3, #1
 8009808:	607b      	str	r3, [r7, #4]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2b37      	cmp	r3, #55	; 0x37
 800980e:	d9ef      	bls.n	80097f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009810:	480d      	ldr	r0, [pc, #52]	; (8009848 <prvInitialiseTaskLists+0x64>)
 8009812:	f7fe fbdb 	bl	8007fcc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009816:	480d      	ldr	r0, [pc, #52]	; (800984c <prvInitialiseTaskLists+0x68>)
 8009818:	f7fe fbd8 	bl	8007fcc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800981c:	480c      	ldr	r0, [pc, #48]	; (8009850 <prvInitialiseTaskLists+0x6c>)
 800981e:	f7fe fbd5 	bl	8007fcc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009822:	480c      	ldr	r0, [pc, #48]	; (8009854 <prvInitialiseTaskLists+0x70>)
 8009824:	f7fe fbd2 	bl	8007fcc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009828:	480b      	ldr	r0, [pc, #44]	; (8009858 <prvInitialiseTaskLists+0x74>)
 800982a:	f7fe fbcf 	bl	8007fcc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800982e:	4b0b      	ldr	r3, [pc, #44]	; (800985c <prvInitialiseTaskLists+0x78>)
 8009830:	4a05      	ldr	r2, [pc, #20]	; (8009848 <prvInitialiseTaskLists+0x64>)
 8009832:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009834:	4b0a      	ldr	r3, [pc, #40]	; (8009860 <prvInitialiseTaskLists+0x7c>)
 8009836:	4a05      	ldr	r2, [pc, #20]	; (800984c <prvInitialiseTaskLists+0x68>)
 8009838:	601a      	str	r2, [r3, #0]
}
 800983a:	bf00      	nop
 800983c:	3708      	adds	r7, #8
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	20000d18 	.word	0x20000d18
 8009848:	20001178 	.word	0x20001178
 800984c:	2000118c 	.word	0x2000118c
 8009850:	200011a8 	.word	0x200011a8
 8009854:	200011bc 	.word	0x200011bc
 8009858:	200011d4 	.word	0x200011d4
 800985c:	200011a0 	.word	0x200011a0
 8009860:	200011a4 	.word	0x200011a4

08009864 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b082      	sub	sp, #8
 8009868:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800986a:	e019      	b.n	80098a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800986c:	f000 fdc6 	bl	800a3fc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009870:	4b10      	ldr	r3, [pc, #64]	; (80098b4 <prvCheckTasksWaitingTermination+0x50>)
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	3304      	adds	r3, #4
 800987c:	4618      	mov	r0, r3
 800987e:	f7fe fc2b 	bl	80080d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009882:	4b0d      	ldr	r3, [pc, #52]	; (80098b8 <prvCheckTasksWaitingTermination+0x54>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	3b01      	subs	r3, #1
 8009888:	4a0b      	ldr	r2, [pc, #44]	; (80098b8 <prvCheckTasksWaitingTermination+0x54>)
 800988a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800988c:	4b0b      	ldr	r3, [pc, #44]	; (80098bc <prvCheckTasksWaitingTermination+0x58>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	3b01      	subs	r3, #1
 8009892:	4a0a      	ldr	r2, [pc, #40]	; (80098bc <prvCheckTasksWaitingTermination+0x58>)
 8009894:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009896:	f000 fde1 	bl	800a45c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 f810 	bl	80098c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80098a0:	4b06      	ldr	r3, [pc, #24]	; (80098bc <prvCheckTasksWaitingTermination+0x58>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d1e1      	bne.n	800986c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80098a8:	bf00      	nop
 80098aa:	bf00      	nop
 80098ac:	3708      	adds	r7, #8
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	200011bc 	.word	0x200011bc
 80098b8:	200011e8 	.word	0x200011e8
 80098bc:	200011d0 	.word	0x200011d0

080098c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b084      	sub	sp, #16
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	3364      	adds	r3, #100	; 0x64
 80098cc:	4618      	mov	r0, r3
 80098ce:	f003 fbb3 	bl	800d038 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d108      	bne.n	80098ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098e0:	4618      	mov	r0, r3
 80098e2:	f000 ff4f 	bl	800a784 <vPortFree>
				vPortFree( pxTCB );
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f000 ff4c 	bl	800a784 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80098ec:	e018      	b.n	8009920 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 80098f4:	2b01      	cmp	r3, #1
 80098f6:	d103      	bne.n	8009900 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 ff43 	bl	800a784 <vPortFree>
	}
 80098fe:	e00f      	b.n	8009920 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8009906:	2b02      	cmp	r3, #2
 8009908:	d00a      	beq.n	8009920 <prvDeleteTCB+0x60>
	__asm volatile
 800990a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800990e:	f383 8811 	msr	BASEPRI, r3
 8009912:	f3bf 8f6f 	isb	sy
 8009916:	f3bf 8f4f 	dsb	sy
 800991a:	60fb      	str	r3, [r7, #12]
}
 800991c:	bf00      	nop
 800991e:	e7fe      	b.n	800991e <prvDeleteTCB+0x5e>
	}
 8009920:	bf00      	nop
 8009922:	3710      	adds	r7, #16
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009928:	b480      	push	{r7}
 800992a:	b083      	sub	sp, #12
 800992c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800992e:	4b0e      	ldr	r3, [pc, #56]	; (8009968 <prvResetNextTaskUnblockTime+0x40>)
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d101      	bne.n	800993c <prvResetNextTaskUnblockTime+0x14>
 8009938:	2301      	movs	r3, #1
 800993a:	e000      	b.n	800993e <prvResetNextTaskUnblockTime+0x16>
 800993c:	2300      	movs	r3, #0
 800993e:	2b00      	cmp	r3, #0
 8009940:	d004      	beq.n	800994c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009942:	4b0a      	ldr	r3, [pc, #40]	; (800996c <prvResetNextTaskUnblockTime+0x44>)
 8009944:	f04f 32ff 	mov.w	r2, #4294967295
 8009948:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800994a:	e008      	b.n	800995e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800994c:	4b06      	ldr	r3, [pc, #24]	; (8009968 <prvResetNextTaskUnblockTime+0x40>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	68db      	ldr	r3, [r3, #12]
 8009952:	68db      	ldr	r3, [r3, #12]
 8009954:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	4a04      	ldr	r2, [pc, #16]	; (800996c <prvResetNextTaskUnblockTime+0x44>)
 800995c:	6013      	str	r3, [r2, #0]
}
 800995e:	bf00      	nop
 8009960:	370c      	adds	r7, #12
 8009962:	46bd      	mov	sp, r7
 8009964:	bc80      	pop	{r7}
 8009966:	4770      	bx	lr
 8009968:	200011a0 	.word	0x200011a0
 800996c:	20001208 	.word	0x20001208

08009970 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009970:	b480      	push	{r7}
 8009972:	b083      	sub	sp, #12
 8009974:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009976:	4b0b      	ldr	r3, [pc, #44]	; (80099a4 <xTaskGetSchedulerState+0x34>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d102      	bne.n	8009984 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800997e:	2301      	movs	r3, #1
 8009980:	607b      	str	r3, [r7, #4]
 8009982:	e008      	b.n	8009996 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009984:	4b08      	ldr	r3, [pc, #32]	; (80099a8 <xTaskGetSchedulerState+0x38>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d102      	bne.n	8009992 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800998c:	2302      	movs	r3, #2
 800998e:	607b      	str	r3, [r7, #4]
 8009990:	e001      	b.n	8009996 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009992:	2300      	movs	r3, #0
 8009994:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009996:	687b      	ldr	r3, [r7, #4]
	}
 8009998:	4618      	mov	r0, r3
 800999a:	370c      	adds	r7, #12
 800999c:	46bd      	mov	sp, r7
 800999e:	bc80      	pop	{r7}
 80099a0:	4770      	bx	lr
 80099a2:	bf00      	nop
 80099a4:	200011f4 	.word	0x200011f4
 80099a8:	20001210 	.word	0x20001210

080099ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b086      	sub	sp, #24
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80099b8:	2300      	movs	r3, #0
 80099ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d056      	beq.n	8009a70 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80099c2:	4b2e      	ldr	r3, [pc, #184]	; (8009a7c <xTaskPriorityDisinherit+0xd0>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	693a      	ldr	r2, [r7, #16]
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d00a      	beq.n	80099e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80099cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d0:	f383 8811 	msr	BASEPRI, r3
 80099d4:	f3bf 8f6f 	isb	sy
 80099d8:	f3bf 8f4f 	dsb	sy
 80099dc:	60fb      	str	r3, [r7, #12]
}
 80099de:	bf00      	nop
 80099e0:	e7fe      	b.n	80099e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d10a      	bne.n	8009a00 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80099ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ee:	f383 8811 	msr	BASEPRI, r3
 80099f2:	f3bf 8f6f 	isb	sy
 80099f6:	f3bf 8f4f 	dsb	sy
 80099fa:	60bb      	str	r3, [r7, #8]
}
 80099fc:	bf00      	nop
 80099fe:	e7fe      	b.n	80099fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a04:	1e5a      	subs	r2, r3, #1
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d02c      	beq.n	8009a70 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d128      	bne.n	8009a70 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	3304      	adds	r3, #4
 8009a22:	4618      	mov	r0, r3
 8009a24:	f7fe fb58 	bl	80080d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a34:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a40:	4b0f      	ldr	r3, [pc, #60]	; (8009a80 <xTaskPriorityDisinherit+0xd4>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d903      	bls.n	8009a50 <xTaskPriorityDisinherit+0xa4>
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a4c:	4a0c      	ldr	r2, [pc, #48]	; (8009a80 <xTaskPriorityDisinherit+0xd4>)
 8009a4e:	6013      	str	r3, [r2, #0]
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a54:	4613      	mov	r3, r2
 8009a56:	009b      	lsls	r3, r3, #2
 8009a58:	4413      	add	r3, r2
 8009a5a:	009b      	lsls	r3, r3, #2
 8009a5c:	4a09      	ldr	r2, [pc, #36]	; (8009a84 <xTaskPriorityDisinherit+0xd8>)
 8009a5e:	441a      	add	r2, r3
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	3304      	adds	r3, #4
 8009a64:	4619      	mov	r1, r3
 8009a66:	4610      	mov	r0, r2
 8009a68:	f7fe fadb 	bl	8008022 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009a70:	697b      	ldr	r3, [r7, #20]
	}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3718      	adds	r7, #24
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}
 8009a7a:	bf00      	nop
 8009a7c:	20000d14 	.word	0x20000d14
 8009a80:	200011f0 	.word	0x200011f0
 8009a84:	20000d18 	.word	0x20000d18

08009a88 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b086      	sub	sp, #24
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	60f8      	str	r0, [r7, #12]
 8009a90:	60b9      	str	r1, [r7, #8]
 8009a92:	607a      	str	r2, [r7, #4]
 8009a94:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8009a96:	f000 fcb1 	bl	800a3fc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009a9a:	4b29      	ldr	r3, [pc, #164]	; (8009b40 <xTaskNotifyWait+0xb8>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	2b02      	cmp	r3, #2
 8009aa6:	d01c      	beq.n	8009ae2 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009aa8:	4b25      	ldr	r3, [pc, #148]	; (8009b40 <xTaskNotifyWait+0xb8>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8009ab0:	68fa      	ldr	r2, [r7, #12]
 8009ab2:	43d2      	mvns	r2, r2
 8009ab4:	400a      	ands	r2, r1
 8009ab6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009aba:	4b21      	ldr	r3, [pc, #132]	; (8009b40 <xTaskNotifyWait+0xb8>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	2201      	movs	r2, #1
 8009ac0:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

				if( xTicksToWait > ( TickType_t ) 0 )
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d00b      	beq.n	8009ae2 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009aca:	2101      	movs	r1, #1
 8009acc:	6838      	ldr	r0, [r7, #0]
 8009ace:	f000 f83b 	bl	8009b48 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009ad2:	4b1c      	ldr	r3, [pc, #112]	; (8009b44 <xTaskNotifyWait+0xbc>)
 8009ad4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ad8:	601a      	str	r2, [r3, #0]
 8009ada:	f3bf 8f4f 	dsb	sy
 8009ade:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009ae2:	f000 fcbb 	bl	800a45c <vPortExitCritical>

		taskENTER_CRITICAL();
 8009ae6:	f000 fc89 	bl	800a3fc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d005      	beq.n	8009afc <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009af0:	4b13      	ldr	r3, [pc, #76]	; (8009b40 <xTaskNotifyWait+0xb8>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009afc:	4b10      	ldr	r3, [pc, #64]	; (8009b40 <xTaskNotifyWait+0xb8>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8009b04:	b2db      	uxtb	r3, r3
 8009b06:	2b02      	cmp	r3, #2
 8009b08:	d002      	beq.n	8009b10 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	617b      	str	r3, [r7, #20]
 8009b0e:	e00a      	b.n	8009b26 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009b10:	4b0b      	ldr	r3, [pc, #44]	; (8009b40 <xTaskNotifyWait+0xb8>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8009b18:	68ba      	ldr	r2, [r7, #8]
 8009b1a:	43d2      	mvns	r2, r2
 8009b1c:	400a      	ands	r2, r1
 8009b1e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
				xReturn = pdTRUE;
 8009b22:	2301      	movs	r3, #1
 8009b24:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009b26:	4b06      	ldr	r3, [pc, #24]	; (8009b40 <xTaskNotifyWait+0xb8>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
		}
		taskEXIT_CRITICAL();
 8009b30:	f000 fc94 	bl	800a45c <vPortExitCritical>

		return xReturn;
 8009b34:	697b      	ldr	r3, [r7, #20]
	}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3718      	adds	r7, #24
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
 8009b3e:	bf00      	nop
 8009b40:	20000d14 	.word	0x20000d14
 8009b44:	e000ed04 	.word	0xe000ed04

08009b48 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b084      	sub	sp, #16
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009b52:	4b21      	ldr	r3, [pc, #132]	; (8009bd8 <prvAddCurrentTaskToDelayedList+0x90>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b58:	4b20      	ldr	r3, [pc, #128]	; (8009bdc <prvAddCurrentTaskToDelayedList+0x94>)
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	3304      	adds	r3, #4
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f7fe faba 	bl	80080d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b6a:	d10a      	bne.n	8009b82 <prvAddCurrentTaskToDelayedList+0x3a>
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d007      	beq.n	8009b82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b72:	4b1a      	ldr	r3, [pc, #104]	; (8009bdc <prvAddCurrentTaskToDelayedList+0x94>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	3304      	adds	r3, #4
 8009b78:	4619      	mov	r1, r3
 8009b7a:	4819      	ldr	r0, [pc, #100]	; (8009be0 <prvAddCurrentTaskToDelayedList+0x98>)
 8009b7c:	f7fe fa51 	bl	8008022 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009b80:	e026      	b.n	8009bd0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009b82:	68fa      	ldr	r2, [r7, #12]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	4413      	add	r3, r2
 8009b88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009b8a:	4b14      	ldr	r3, [pc, #80]	; (8009bdc <prvAddCurrentTaskToDelayedList+0x94>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	68ba      	ldr	r2, [r7, #8]
 8009b90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009b92:	68ba      	ldr	r2, [r7, #8]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d209      	bcs.n	8009bae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b9a:	4b12      	ldr	r3, [pc, #72]	; (8009be4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	4b0f      	ldr	r3, [pc, #60]	; (8009bdc <prvAddCurrentTaskToDelayedList+0x94>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	3304      	adds	r3, #4
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	4610      	mov	r0, r2
 8009ba8:	f7fe fa5e 	bl	8008068 <vListInsert>
}
 8009bac:	e010      	b.n	8009bd0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bae:	4b0e      	ldr	r3, [pc, #56]	; (8009be8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	4b0a      	ldr	r3, [pc, #40]	; (8009bdc <prvAddCurrentTaskToDelayedList+0x94>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	3304      	adds	r3, #4
 8009bb8:	4619      	mov	r1, r3
 8009bba:	4610      	mov	r0, r2
 8009bbc:	f7fe fa54 	bl	8008068 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009bc0:	4b0a      	ldr	r3, [pc, #40]	; (8009bec <prvAddCurrentTaskToDelayedList+0xa4>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	68ba      	ldr	r2, [r7, #8]
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d202      	bcs.n	8009bd0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009bca:	4a08      	ldr	r2, [pc, #32]	; (8009bec <prvAddCurrentTaskToDelayedList+0xa4>)
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	6013      	str	r3, [r2, #0]
}
 8009bd0:	bf00      	nop
 8009bd2:	3710      	adds	r7, #16
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}
 8009bd8:	200011ec 	.word	0x200011ec
 8009bdc:	20000d14 	.word	0x20000d14
 8009be0:	200011d4 	.word	0x200011d4
 8009be4:	200011a4 	.word	0x200011a4
 8009be8:	200011a0 	.word	0x200011a0
 8009bec:	20001208 	.word	0x20001208

08009bf0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b08a      	sub	sp, #40	; 0x28
 8009bf4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009bfa:	f000 facb 	bl	800a194 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009bfe:	4b1c      	ldr	r3, [pc, #112]	; (8009c70 <xTimerCreateTimerTask+0x80>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d021      	beq.n	8009c4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009c06:	2300      	movs	r3, #0
 8009c08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009c0e:	1d3a      	adds	r2, r7, #4
 8009c10:	f107 0108 	add.w	r1, r7, #8
 8009c14:	f107 030c 	add.w	r3, r7, #12
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f7fe f9bd 	bl	8007f98 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009c1e:	6879      	ldr	r1, [r7, #4]
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	68fa      	ldr	r2, [r7, #12]
 8009c24:	9202      	str	r2, [sp, #8]
 8009c26:	9301      	str	r3, [sp, #4]
 8009c28:	2302      	movs	r3, #2
 8009c2a:	9300      	str	r3, [sp, #0]
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	460a      	mov	r2, r1
 8009c30:	4910      	ldr	r1, [pc, #64]	; (8009c74 <xTimerCreateTimerTask+0x84>)
 8009c32:	4811      	ldr	r0, [pc, #68]	; (8009c78 <xTimerCreateTimerTask+0x88>)
 8009c34:	f7ff f856 	bl	8008ce4 <xTaskCreateStatic>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	4a10      	ldr	r2, [pc, #64]	; (8009c7c <xTimerCreateTimerTask+0x8c>)
 8009c3c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009c3e:	4b0f      	ldr	r3, [pc, #60]	; (8009c7c <xTimerCreateTimerTask+0x8c>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d001      	beq.n	8009c4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009c46:	2301      	movs	r3, #1
 8009c48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d10a      	bne.n	8009c66 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c54:	f383 8811 	msr	BASEPRI, r3
 8009c58:	f3bf 8f6f 	isb	sy
 8009c5c:	f3bf 8f4f 	dsb	sy
 8009c60:	613b      	str	r3, [r7, #16]
}
 8009c62:	bf00      	nop
 8009c64:	e7fe      	b.n	8009c64 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009c66:	697b      	ldr	r3, [r7, #20]
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3718      	adds	r7, #24
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}
 8009c70:	20001244 	.word	0x20001244
 8009c74:	08010550 	.word	0x08010550
 8009c78:	08009d9d 	.word	0x08009d9d
 8009c7c:	20001248 	.word	0x20001248

08009c80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b08a      	sub	sp, #40	; 0x28
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	60b9      	str	r1, [r7, #8]
 8009c8a:	607a      	str	r2, [r7, #4]
 8009c8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d10a      	bne.n	8009cae <xTimerGenericCommand+0x2e>
	__asm volatile
 8009c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c9c:	f383 8811 	msr	BASEPRI, r3
 8009ca0:	f3bf 8f6f 	isb	sy
 8009ca4:	f3bf 8f4f 	dsb	sy
 8009ca8:	623b      	str	r3, [r7, #32]
}
 8009caa:	bf00      	nop
 8009cac:	e7fe      	b.n	8009cac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009cae:	4b1a      	ldr	r3, [pc, #104]	; (8009d18 <xTimerGenericCommand+0x98>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d02a      	beq.n	8009d0c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	2b05      	cmp	r3, #5
 8009cc6:	dc18      	bgt.n	8009cfa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009cc8:	f7ff fe52 	bl	8009970 <xTaskGetSchedulerState>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	2b02      	cmp	r3, #2
 8009cd0:	d109      	bne.n	8009ce6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009cd2:	4b11      	ldr	r3, [pc, #68]	; (8009d18 <xTimerGenericCommand+0x98>)
 8009cd4:	6818      	ldr	r0, [r3, #0]
 8009cd6:	f107 0110 	add.w	r1, r7, #16
 8009cda:	2300      	movs	r3, #0
 8009cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cde:	f7fe fb65 	bl	80083ac <xQueueGenericSend>
 8009ce2:	6278      	str	r0, [r7, #36]	; 0x24
 8009ce4:	e012      	b.n	8009d0c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009ce6:	4b0c      	ldr	r3, [pc, #48]	; (8009d18 <xTimerGenericCommand+0x98>)
 8009ce8:	6818      	ldr	r0, [r3, #0]
 8009cea:	f107 0110 	add.w	r1, r7, #16
 8009cee:	2300      	movs	r3, #0
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	f7fe fb5b 	bl	80083ac <xQueueGenericSend>
 8009cf6:	6278      	str	r0, [r7, #36]	; 0x24
 8009cf8:	e008      	b.n	8009d0c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009cfa:	4b07      	ldr	r3, [pc, #28]	; (8009d18 <xTimerGenericCommand+0x98>)
 8009cfc:	6818      	ldr	r0, [r3, #0]
 8009cfe:	f107 0110 	add.w	r1, r7, #16
 8009d02:	2300      	movs	r3, #0
 8009d04:	683a      	ldr	r2, [r7, #0]
 8009d06:	f7fe fc4f 	bl	80085a8 <xQueueGenericSendFromISR>
 8009d0a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3728      	adds	r7, #40	; 0x28
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
 8009d16:	bf00      	nop
 8009d18:	20001244 	.word	0x20001244

08009d1c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b088      	sub	sp, #32
 8009d20:	af02      	add	r7, sp, #8
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d26:	4b1c      	ldr	r3, [pc, #112]	; (8009d98 <prvProcessExpiredTimer+0x7c>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	68db      	ldr	r3, [r3, #12]
 8009d2c:	68db      	ldr	r3, [r3, #12]
 8009d2e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	3304      	adds	r3, #4
 8009d34:	4618      	mov	r0, r3
 8009d36:	f7fe f9cf 	bl	80080d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	69db      	ldr	r3, [r3, #28]
 8009d3e:	2b01      	cmp	r3, #1
 8009d40:	d122      	bne.n	8009d88 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009d42:	697b      	ldr	r3, [r7, #20]
 8009d44:	699a      	ldr	r2, [r3, #24]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	18d1      	adds	r1, r2, r3
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	683a      	ldr	r2, [r7, #0]
 8009d4e:	6978      	ldr	r0, [r7, #20]
 8009d50:	f000 f8c8 	bl	8009ee4 <prvInsertTimerInActiveList>
 8009d54:	4603      	mov	r3, r0
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d016      	beq.n	8009d88 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	9300      	str	r3, [sp, #0]
 8009d5e:	2300      	movs	r3, #0
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	2100      	movs	r1, #0
 8009d64:	6978      	ldr	r0, [r7, #20]
 8009d66:	f7ff ff8b 	bl	8009c80 <xTimerGenericCommand>
 8009d6a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d10a      	bne.n	8009d88 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8009d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d76:	f383 8811 	msr	BASEPRI, r3
 8009d7a:	f3bf 8f6f 	isb	sy
 8009d7e:	f3bf 8f4f 	dsb	sy
 8009d82:	60fb      	str	r3, [r7, #12]
}
 8009d84:	bf00      	nop
 8009d86:	e7fe      	b.n	8009d86 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d8c:	6978      	ldr	r0, [r7, #20]
 8009d8e:	4798      	blx	r3
}
 8009d90:	bf00      	nop
 8009d92:	3718      	adds	r7, #24
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	2000123c 	.word	0x2000123c

08009d9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b084      	sub	sp, #16
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009da4:	f107 0308 	add.w	r3, r7, #8
 8009da8:	4618      	mov	r0, r3
 8009daa:	f000 f857 	bl	8009e5c <prvGetNextExpireTime>
 8009dae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	4619      	mov	r1, r3
 8009db4:	68f8      	ldr	r0, [r7, #12]
 8009db6:	f000 f803 	bl	8009dc0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009dba:	f000 f8d5 	bl	8009f68 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009dbe:	e7f1      	b.n	8009da4 <prvTimerTask+0x8>

08009dc0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b084      	sub	sp, #16
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009dca:	f7ff f9df 	bl	800918c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009dce:	f107 0308 	add.w	r3, r7, #8
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f000 f866 	bl	8009ea4 <prvSampleTimeNow>
 8009dd8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d130      	bne.n	8009e42 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d10a      	bne.n	8009dfc <prvProcessTimerOrBlockTask+0x3c>
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	429a      	cmp	r2, r3
 8009dec:	d806      	bhi.n	8009dfc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009dee:	f7ff f9db 	bl	80091a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009df2:	68f9      	ldr	r1, [r7, #12]
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f7ff ff91 	bl	8009d1c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009dfa:	e024      	b.n	8009e46 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d008      	beq.n	8009e14 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009e02:	4b13      	ldr	r3, [pc, #76]	; (8009e50 <prvProcessTimerOrBlockTask+0x90>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	bf0c      	ite	eq
 8009e0c:	2301      	moveq	r3, #1
 8009e0e:	2300      	movne	r3, #0
 8009e10:	b2db      	uxtb	r3, r3
 8009e12:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009e14:	4b0f      	ldr	r3, [pc, #60]	; (8009e54 <prvProcessTimerOrBlockTask+0x94>)
 8009e16:	6818      	ldr	r0, [r3, #0]
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	1ad3      	subs	r3, r2, r3
 8009e1e:	683a      	ldr	r2, [r7, #0]
 8009e20:	4619      	mov	r1, r3
 8009e22:	f7fe ff2b 	bl	8008c7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009e26:	f7ff f9bf 	bl	80091a8 <xTaskResumeAll>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d10a      	bne.n	8009e46 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009e30:	4b09      	ldr	r3, [pc, #36]	; (8009e58 <prvProcessTimerOrBlockTask+0x98>)
 8009e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e36:	601a      	str	r2, [r3, #0]
 8009e38:	f3bf 8f4f 	dsb	sy
 8009e3c:	f3bf 8f6f 	isb	sy
}
 8009e40:	e001      	b.n	8009e46 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009e42:	f7ff f9b1 	bl	80091a8 <xTaskResumeAll>
}
 8009e46:	bf00      	nop
 8009e48:	3710      	adds	r7, #16
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
 8009e4e:	bf00      	nop
 8009e50:	20001240 	.word	0x20001240
 8009e54:	20001244 	.word	0x20001244
 8009e58:	e000ed04 	.word	0xe000ed04

08009e5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b085      	sub	sp, #20
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009e64:	4b0e      	ldr	r3, [pc, #56]	; (8009ea0 <prvGetNextExpireTime+0x44>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	bf0c      	ite	eq
 8009e6e:	2301      	moveq	r3, #1
 8009e70:	2300      	movne	r3, #0
 8009e72:	b2db      	uxtb	r3, r3
 8009e74:	461a      	mov	r2, r3
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d105      	bne.n	8009e8e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009e82:	4b07      	ldr	r3, [pc, #28]	; (8009ea0 <prvGetNextExpireTime+0x44>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	60fb      	str	r3, [r7, #12]
 8009e8c:	e001      	b.n	8009e92 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009e92:	68fb      	ldr	r3, [r7, #12]
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3714      	adds	r7, #20
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bc80      	pop	{r7}
 8009e9c:	4770      	bx	lr
 8009e9e:	bf00      	nop
 8009ea0:	2000123c 	.word	0x2000123c

08009ea4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b084      	sub	sp, #16
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009eac:	f7ff fa1a 	bl	80092e4 <xTaskGetTickCount>
 8009eb0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009eb2:	4b0b      	ldr	r3, [pc, #44]	; (8009ee0 <prvSampleTimeNow+0x3c>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	68fa      	ldr	r2, [r7, #12]
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d205      	bcs.n	8009ec8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009ebc:	f000 f908 	bl	800a0d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	601a      	str	r2, [r3, #0]
 8009ec6:	e002      	b.n	8009ece <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009ece:	4a04      	ldr	r2, [pc, #16]	; (8009ee0 <prvSampleTimeNow+0x3c>)
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3710      	adds	r7, #16
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}
 8009ede:	bf00      	nop
 8009ee0:	2000124c 	.word	0x2000124c

08009ee4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b086      	sub	sp, #24
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	60f8      	str	r0, [r7, #12]
 8009eec:	60b9      	str	r1, [r7, #8]
 8009eee:	607a      	str	r2, [r7, #4]
 8009ef0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	68ba      	ldr	r2, [r7, #8]
 8009efa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	68fa      	ldr	r2, [r7, #12]
 8009f00:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009f02:	68ba      	ldr	r2, [r7, #8]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	429a      	cmp	r2, r3
 8009f08:	d812      	bhi.n	8009f30 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f0a:	687a      	ldr	r2, [r7, #4]
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	1ad2      	subs	r2, r2, r3
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	699b      	ldr	r3, [r3, #24]
 8009f14:	429a      	cmp	r2, r3
 8009f16:	d302      	bcc.n	8009f1e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009f18:	2301      	movs	r3, #1
 8009f1a:	617b      	str	r3, [r7, #20]
 8009f1c:	e01b      	b.n	8009f56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009f1e:	4b10      	ldr	r3, [pc, #64]	; (8009f60 <prvInsertTimerInActiveList+0x7c>)
 8009f20:	681a      	ldr	r2, [r3, #0]
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	3304      	adds	r3, #4
 8009f26:	4619      	mov	r1, r3
 8009f28:	4610      	mov	r0, r2
 8009f2a:	f7fe f89d 	bl	8008068 <vListInsert>
 8009f2e:	e012      	b.n	8009f56 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d206      	bcs.n	8009f46 <prvInsertTimerInActiveList+0x62>
 8009f38:	68ba      	ldr	r2, [r7, #8]
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d302      	bcc.n	8009f46 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009f40:	2301      	movs	r3, #1
 8009f42:	617b      	str	r3, [r7, #20]
 8009f44:	e007      	b.n	8009f56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f46:	4b07      	ldr	r3, [pc, #28]	; (8009f64 <prvInsertTimerInActiveList+0x80>)
 8009f48:	681a      	ldr	r2, [r3, #0]
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	3304      	adds	r3, #4
 8009f4e:	4619      	mov	r1, r3
 8009f50:	4610      	mov	r0, r2
 8009f52:	f7fe f889 	bl	8008068 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009f56:	697b      	ldr	r3, [r7, #20]
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3718      	adds	r7, #24
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}
 8009f60:	20001240 	.word	0x20001240
 8009f64:	2000123c 	.word	0x2000123c

08009f68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b08e      	sub	sp, #56	; 0x38
 8009f6c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f6e:	e09d      	b.n	800a0ac <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	da18      	bge.n	8009fa8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009f76:	1d3b      	adds	r3, r7, #4
 8009f78:	3304      	adds	r3, #4
 8009f7a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d10a      	bne.n	8009f98 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f86:	f383 8811 	msr	BASEPRI, r3
 8009f8a:	f3bf 8f6f 	isb	sy
 8009f8e:	f3bf 8f4f 	dsb	sy
 8009f92:	61fb      	str	r3, [r7, #28]
}
 8009f94:	bf00      	nop
 8009f96:	e7fe      	b.n	8009f96 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f9e:	6850      	ldr	r0, [r2, #4]
 8009fa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fa2:	6892      	ldr	r2, [r2, #8]
 8009fa4:	4611      	mov	r1, r2
 8009fa6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	db7e      	blt.n	800a0ac <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb4:	695b      	ldr	r3, [r3, #20]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d004      	beq.n	8009fc4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fbc:	3304      	adds	r3, #4
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f7fe f88a 	bl	80080d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009fc4:	463b      	mov	r3, r7
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f7ff ff6c 	bl	8009ea4 <prvSampleTimeNow>
 8009fcc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2b09      	cmp	r3, #9
 8009fd2:	d86a      	bhi.n	800a0aa <prvProcessReceivedCommands+0x142>
 8009fd4:	a201      	add	r2, pc, #4	; (adr r2, 8009fdc <prvProcessReceivedCommands+0x74>)
 8009fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fda:	bf00      	nop
 8009fdc:	0800a005 	.word	0x0800a005
 8009fe0:	0800a005 	.word	0x0800a005
 8009fe4:	0800a005 	.word	0x0800a005
 8009fe8:	0800a0ad 	.word	0x0800a0ad
 8009fec:	0800a061 	.word	0x0800a061
 8009ff0:	0800a099 	.word	0x0800a099
 8009ff4:	0800a005 	.word	0x0800a005
 8009ff8:	0800a005 	.word	0x0800a005
 8009ffc:	0800a0ad 	.word	0x0800a0ad
 800a000:	0800a061 	.word	0x0800a061
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a004:	68ba      	ldr	r2, [r7, #8]
 800a006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a008:	699b      	ldr	r3, [r3, #24]
 800a00a:	18d1      	adds	r1, r2, r3
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a010:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a012:	f7ff ff67 	bl	8009ee4 <prvInsertTimerInActiveList>
 800a016:	4603      	mov	r3, r0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d047      	beq.n	800a0ac <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a020:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a022:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a026:	69db      	ldr	r3, [r3, #28]
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d13f      	bne.n	800a0ac <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a02c:	68ba      	ldr	r2, [r7, #8]
 800a02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a030:	699b      	ldr	r3, [r3, #24]
 800a032:	441a      	add	r2, r3
 800a034:	2300      	movs	r3, #0
 800a036:	9300      	str	r3, [sp, #0]
 800a038:	2300      	movs	r3, #0
 800a03a:	2100      	movs	r1, #0
 800a03c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a03e:	f7ff fe1f 	bl	8009c80 <xTimerGenericCommand>
 800a042:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a044:	6a3b      	ldr	r3, [r7, #32]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d130      	bne.n	800a0ac <prvProcessReceivedCommands+0x144>
	__asm volatile
 800a04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04e:	f383 8811 	msr	BASEPRI, r3
 800a052:	f3bf 8f6f 	isb	sy
 800a056:	f3bf 8f4f 	dsb	sy
 800a05a:	61bb      	str	r3, [r7, #24]
}
 800a05c:	bf00      	nop
 800a05e:	e7fe      	b.n	800a05e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a060:	68ba      	ldr	r2, [r7, #8]
 800a062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a064:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a068:	699b      	ldr	r3, [r3, #24]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d10a      	bne.n	800a084 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800a06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a072:	f383 8811 	msr	BASEPRI, r3
 800a076:	f3bf 8f6f 	isb	sy
 800a07a:	f3bf 8f4f 	dsb	sy
 800a07e:	617b      	str	r3, [r7, #20]
}
 800a080:	bf00      	nop
 800a082:	e7fe      	b.n	800a082 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a086:	699a      	ldr	r2, [r3, #24]
 800a088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08a:	18d1      	adds	r1, r2, r3
 800a08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a090:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a092:	f7ff ff27 	bl	8009ee4 <prvInsertTimerInActiveList>
					break;
 800a096:	e009      	b.n	800a0ac <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d104      	bne.n	800a0ac <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800a0a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0a4:	f000 fb6e 	bl	800a784 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a0a8:	e000      	b.n	800a0ac <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800a0aa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a0ac:	4b07      	ldr	r3, [pc, #28]	; (800a0cc <prvProcessReceivedCommands+0x164>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	1d39      	adds	r1, r7, #4
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f7fe fb0f 	bl	80086d8 <xQueueReceive>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	f47f af57 	bne.w	8009f70 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a0c2:	bf00      	nop
 800a0c4:	bf00      	nop
 800a0c6:	3730      	adds	r7, #48	; 0x30
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}
 800a0cc:	20001244 	.word	0x20001244

0800a0d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b088      	sub	sp, #32
 800a0d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a0d6:	e045      	b.n	800a164 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a0d8:	4b2c      	ldr	r3, [pc, #176]	; (800a18c <prvSwitchTimerLists+0xbc>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	68db      	ldr	r3, [r3, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a0e2:	4b2a      	ldr	r3, [pc, #168]	; (800a18c <prvSwitchTimerLists+0xbc>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	68db      	ldr	r3, [r3, #12]
 800a0e8:	68db      	ldr	r3, [r3, #12]
 800a0ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	3304      	adds	r3, #4
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f7fd fff1 	bl	80080d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0fa:	68f8      	ldr	r0, [r7, #12]
 800a0fc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	69db      	ldr	r3, [r3, #28]
 800a102:	2b01      	cmp	r3, #1
 800a104:	d12e      	bne.n	800a164 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	699b      	ldr	r3, [r3, #24]
 800a10a:	693a      	ldr	r2, [r7, #16]
 800a10c:	4413      	add	r3, r2
 800a10e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a110:	68ba      	ldr	r2, [r7, #8]
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	429a      	cmp	r2, r3
 800a116:	d90e      	bls.n	800a136 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	68ba      	ldr	r2, [r7, #8]
 800a11c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	68fa      	ldr	r2, [r7, #12]
 800a122:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a124:	4b19      	ldr	r3, [pc, #100]	; (800a18c <prvSwitchTimerLists+0xbc>)
 800a126:	681a      	ldr	r2, [r3, #0]
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	3304      	adds	r3, #4
 800a12c:	4619      	mov	r1, r3
 800a12e:	4610      	mov	r0, r2
 800a130:	f7fd ff9a 	bl	8008068 <vListInsert>
 800a134:	e016      	b.n	800a164 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a136:	2300      	movs	r3, #0
 800a138:	9300      	str	r3, [sp, #0]
 800a13a:	2300      	movs	r3, #0
 800a13c:	693a      	ldr	r2, [r7, #16]
 800a13e:	2100      	movs	r1, #0
 800a140:	68f8      	ldr	r0, [r7, #12]
 800a142:	f7ff fd9d 	bl	8009c80 <xTimerGenericCommand>
 800a146:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d10a      	bne.n	800a164 <prvSwitchTimerLists+0x94>
	__asm volatile
 800a14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a152:	f383 8811 	msr	BASEPRI, r3
 800a156:	f3bf 8f6f 	isb	sy
 800a15a:	f3bf 8f4f 	dsb	sy
 800a15e:	603b      	str	r3, [r7, #0]
}
 800a160:	bf00      	nop
 800a162:	e7fe      	b.n	800a162 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a164:	4b09      	ldr	r3, [pc, #36]	; (800a18c <prvSwitchTimerLists+0xbc>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d1b4      	bne.n	800a0d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a16e:	4b07      	ldr	r3, [pc, #28]	; (800a18c <prvSwitchTimerLists+0xbc>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a174:	4b06      	ldr	r3, [pc, #24]	; (800a190 <prvSwitchTimerLists+0xc0>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4a04      	ldr	r2, [pc, #16]	; (800a18c <prvSwitchTimerLists+0xbc>)
 800a17a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a17c:	4a04      	ldr	r2, [pc, #16]	; (800a190 <prvSwitchTimerLists+0xc0>)
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	6013      	str	r3, [r2, #0]
}
 800a182:	bf00      	nop
 800a184:	3718      	adds	r7, #24
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	2000123c 	.word	0x2000123c
 800a190:	20001240 	.word	0x20001240

0800a194 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b082      	sub	sp, #8
 800a198:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a19a:	f000 f92f 	bl	800a3fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a19e:	4b15      	ldr	r3, [pc, #84]	; (800a1f4 <prvCheckForValidListAndQueue+0x60>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d120      	bne.n	800a1e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a1a6:	4814      	ldr	r0, [pc, #80]	; (800a1f8 <prvCheckForValidListAndQueue+0x64>)
 800a1a8:	f7fd ff10 	bl	8007fcc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a1ac:	4813      	ldr	r0, [pc, #76]	; (800a1fc <prvCheckForValidListAndQueue+0x68>)
 800a1ae:	f7fd ff0d 	bl	8007fcc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a1b2:	4b13      	ldr	r3, [pc, #76]	; (800a200 <prvCheckForValidListAndQueue+0x6c>)
 800a1b4:	4a10      	ldr	r2, [pc, #64]	; (800a1f8 <prvCheckForValidListAndQueue+0x64>)
 800a1b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a1b8:	4b12      	ldr	r3, [pc, #72]	; (800a204 <prvCheckForValidListAndQueue+0x70>)
 800a1ba:	4a10      	ldr	r2, [pc, #64]	; (800a1fc <prvCheckForValidListAndQueue+0x68>)
 800a1bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a1be:	2300      	movs	r3, #0
 800a1c0:	9300      	str	r3, [sp, #0]
 800a1c2:	4b11      	ldr	r3, [pc, #68]	; (800a208 <prvCheckForValidListAndQueue+0x74>)
 800a1c4:	4a11      	ldr	r2, [pc, #68]	; (800a20c <prvCheckForValidListAndQueue+0x78>)
 800a1c6:	2110      	movs	r1, #16
 800a1c8:	200a      	movs	r0, #10
 800a1ca:	f7fe f817 	bl	80081fc <xQueueGenericCreateStatic>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	4a08      	ldr	r2, [pc, #32]	; (800a1f4 <prvCheckForValidListAndQueue+0x60>)
 800a1d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a1d4:	4b07      	ldr	r3, [pc, #28]	; (800a1f4 <prvCheckForValidListAndQueue+0x60>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d005      	beq.n	800a1e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a1dc:	4b05      	ldr	r3, [pc, #20]	; (800a1f4 <prvCheckForValidListAndQueue+0x60>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	490b      	ldr	r1, [pc, #44]	; (800a210 <prvCheckForValidListAndQueue+0x7c>)
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f7fe fd22 	bl	8008c2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a1e8:	f000 f938 	bl	800a45c <vPortExitCritical>
}
 800a1ec:	bf00      	nop
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	bf00      	nop
 800a1f4:	20001244 	.word	0x20001244
 800a1f8:	20001214 	.word	0x20001214
 800a1fc:	20001228 	.word	0x20001228
 800a200:	2000123c 	.word	0x2000123c
 800a204:	20001240 	.word	0x20001240
 800a208:	200012f0 	.word	0x200012f0
 800a20c:	20001250 	.word	0x20001250
 800a210:	08010558 	.word	0x08010558

0800a214 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a214:	b480      	push	{r7}
 800a216:	b085      	sub	sp, #20
 800a218:	af00      	add	r7, sp, #0
 800a21a:	60f8      	str	r0, [r7, #12]
 800a21c:	60b9      	str	r1, [r7, #8]
 800a21e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	3b04      	subs	r3, #4
 800a224:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a22c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	3b04      	subs	r3, #4
 800a232:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	f023 0201 	bic.w	r2, r3, #1
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	3b04      	subs	r3, #4
 800a242:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a244:	4a08      	ldr	r2, [pc, #32]	; (800a268 <pxPortInitialiseStack+0x54>)
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	3b14      	subs	r3, #20
 800a24e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	3b20      	subs	r3, #32
 800a25a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a25c:	68fb      	ldr	r3, [r7, #12]
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3714      	adds	r7, #20
 800a262:	46bd      	mov	sp, r7
 800a264:	bc80      	pop	{r7}
 800a266:	4770      	bx	lr
 800a268:	0800a26d 	.word	0x0800a26d

0800a26c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a26c:	b480      	push	{r7}
 800a26e:	b085      	sub	sp, #20
 800a270:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a272:	2300      	movs	r3, #0
 800a274:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a276:	4b12      	ldr	r3, [pc, #72]	; (800a2c0 <prvTaskExitError+0x54>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a27e:	d00a      	beq.n	800a296 <prvTaskExitError+0x2a>
	__asm volatile
 800a280:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a284:	f383 8811 	msr	BASEPRI, r3
 800a288:	f3bf 8f6f 	isb	sy
 800a28c:	f3bf 8f4f 	dsb	sy
 800a290:	60fb      	str	r3, [r7, #12]
}
 800a292:	bf00      	nop
 800a294:	e7fe      	b.n	800a294 <prvTaskExitError+0x28>
	__asm volatile
 800a296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a29a:	f383 8811 	msr	BASEPRI, r3
 800a29e:	f3bf 8f6f 	isb	sy
 800a2a2:	f3bf 8f4f 	dsb	sy
 800a2a6:	60bb      	str	r3, [r7, #8]
}
 800a2a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a2aa:	bf00      	nop
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d0fc      	beq.n	800a2ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a2b2:	bf00      	nop
 800a2b4:	bf00      	nop
 800a2b6:	3714      	adds	r7, #20
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bc80      	pop	{r7}
 800a2bc:	4770      	bx	lr
 800a2be:	bf00      	nop
 800a2c0:	20000010 	.word	0x20000010
	...

0800a2d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a2d0:	4b07      	ldr	r3, [pc, #28]	; (800a2f0 <pxCurrentTCBConst2>)
 800a2d2:	6819      	ldr	r1, [r3, #0]
 800a2d4:	6808      	ldr	r0, [r1, #0]
 800a2d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a2da:	f380 8809 	msr	PSP, r0
 800a2de:	f3bf 8f6f 	isb	sy
 800a2e2:	f04f 0000 	mov.w	r0, #0
 800a2e6:	f380 8811 	msr	BASEPRI, r0
 800a2ea:	f04e 0e0d 	orr.w	lr, lr, #13
 800a2ee:	4770      	bx	lr

0800a2f0 <pxCurrentTCBConst2>:
 800a2f0:	20000d14 	.word	0x20000d14
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a2f4:	bf00      	nop
 800a2f6:	bf00      	nop

0800a2f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800a2f8:	4806      	ldr	r0, [pc, #24]	; (800a314 <prvPortStartFirstTask+0x1c>)
 800a2fa:	6800      	ldr	r0, [r0, #0]
 800a2fc:	6800      	ldr	r0, [r0, #0]
 800a2fe:	f380 8808 	msr	MSP, r0
 800a302:	b662      	cpsie	i
 800a304:	b661      	cpsie	f
 800a306:	f3bf 8f4f 	dsb	sy
 800a30a:	f3bf 8f6f 	isb	sy
 800a30e:	df00      	svc	0
 800a310:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a312:	bf00      	nop
 800a314:	e000ed08 	.word	0xe000ed08

0800a318 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a31e:	4b32      	ldr	r3, [pc, #200]	; (800a3e8 <xPortStartScheduler+0xd0>)
 800a320:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	781b      	ldrb	r3, [r3, #0]
 800a326:	b2db      	uxtb	r3, r3
 800a328:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	22ff      	movs	r2, #255	; 0xff
 800a32e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	781b      	ldrb	r3, [r3, #0]
 800a334:	b2db      	uxtb	r3, r3
 800a336:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a338:	78fb      	ldrb	r3, [r7, #3]
 800a33a:	b2db      	uxtb	r3, r3
 800a33c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a340:	b2da      	uxtb	r2, r3
 800a342:	4b2a      	ldr	r3, [pc, #168]	; (800a3ec <xPortStartScheduler+0xd4>)
 800a344:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a346:	4b2a      	ldr	r3, [pc, #168]	; (800a3f0 <xPortStartScheduler+0xd8>)
 800a348:	2207      	movs	r2, #7
 800a34a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a34c:	e009      	b.n	800a362 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a34e:	4b28      	ldr	r3, [pc, #160]	; (800a3f0 <xPortStartScheduler+0xd8>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	3b01      	subs	r3, #1
 800a354:	4a26      	ldr	r2, [pc, #152]	; (800a3f0 <xPortStartScheduler+0xd8>)
 800a356:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a358:	78fb      	ldrb	r3, [r7, #3]
 800a35a:	b2db      	uxtb	r3, r3
 800a35c:	005b      	lsls	r3, r3, #1
 800a35e:	b2db      	uxtb	r3, r3
 800a360:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a362:	78fb      	ldrb	r3, [r7, #3]
 800a364:	b2db      	uxtb	r3, r3
 800a366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a36a:	2b80      	cmp	r3, #128	; 0x80
 800a36c:	d0ef      	beq.n	800a34e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a36e:	4b20      	ldr	r3, [pc, #128]	; (800a3f0 <xPortStartScheduler+0xd8>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f1c3 0307 	rsb	r3, r3, #7
 800a376:	2b04      	cmp	r3, #4
 800a378:	d00a      	beq.n	800a390 <xPortStartScheduler+0x78>
	__asm volatile
 800a37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a37e:	f383 8811 	msr	BASEPRI, r3
 800a382:	f3bf 8f6f 	isb	sy
 800a386:	f3bf 8f4f 	dsb	sy
 800a38a:	60bb      	str	r3, [r7, #8]
}
 800a38c:	bf00      	nop
 800a38e:	e7fe      	b.n	800a38e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a390:	4b17      	ldr	r3, [pc, #92]	; (800a3f0 <xPortStartScheduler+0xd8>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	021b      	lsls	r3, r3, #8
 800a396:	4a16      	ldr	r2, [pc, #88]	; (800a3f0 <xPortStartScheduler+0xd8>)
 800a398:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a39a:	4b15      	ldr	r3, [pc, #84]	; (800a3f0 <xPortStartScheduler+0xd8>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a3a2:	4a13      	ldr	r2, [pc, #76]	; (800a3f0 <xPortStartScheduler+0xd8>)
 800a3a4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	b2da      	uxtb	r2, r3
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a3ae:	4b11      	ldr	r3, [pc, #68]	; (800a3f4 <xPortStartScheduler+0xdc>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	4a10      	ldr	r2, [pc, #64]	; (800a3f4 <xPortStartScheduler+0xdc>)
 800a3b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a3b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a3ba:	4b0e      	ldr	r3, [pc, #56]	; (800a3f4 <xPortStartScheduler+0xdc>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4a0d      	ldr	r2, [pc, #52]	; (800a3f4 <xPortStartScheduler+0xdc>)
 800a3c0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a3c4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a3c6:	f000 f8b9 	bl	800a53c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a3ca:	4b0b      	ldr	r3, [pc, #44]	; (800a3f8 <xPortStartScheduler+0xe0>)
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a3d0:	f7ff ff92 	bl	800a2f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a3d4:	f7ff f852 	bl	800947c <vTaskSwitchContext>
	prvTaskExitError();
 800a3d8:	f7ff ff48 	bl	800a26c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a3dc:	2300      	movs	r3, #0
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3710      	adds	r7, #16
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}
 800a3e6:	bf00      	nop
 800a3e8:	e000e400 	.word	0xe000e400
 800a3ec:	20001340 	.word	0x20001340
 800a3f0:	20001344 	.word	0x20001344
 800a3f4:	e000ed20 	.word	0xe000ed20
 800a3f8:	20000010 	.word	0x20000010

0800a3fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b083      	sub	sp, #12
 800a400:	af00      	add	r7, sp, #0
	__asm volatile
 800a402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a406:	f383 8811 	msr	BASEPRI, r3
 800a40a:	f3bf 8f6f 	isb	sy
 800a40e:	f3bf 8f4f 	dsb	sy
 800a412:	607b      	str	r3, [r7, #4]
}
 800a414:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a416:	4b0f      	ldr	r3, [pc, #60]	; (800a454 <vPortEnterCritical+0x58>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	3301      	adds	r3, #1
 800a41c:	4a0d      	ldr	r2, [pc, #52]	; (800a454 <vPortEnterCritical+0x58>)
 800a41e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a420:	4b0c      	ldr	r3, [pc, #48]	; (800a454 <vPortEnterCritical+0x58>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	2b01      	cmp	r3, #1
 800a426:	d10f      	bne.n	800a448 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a428:	4b0b      	ldr	r3, [pc, #44]	; (800a458 <vPortEnterCritical+0x5c>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	b2db      	uxtb	r3, r3
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d00a      	beq.n	800a448 <vPortEnterCritical+0x4c>
	__asm volatile
 800a432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a436:	f383 8811 	msr	BASEPRI, r3
 800a43a:	f3bf 8f6f 	isb	sy
 800a43e:	f3bf 8f4f 	dsb	sy
 800a442:	603b      	str	r3, [r7, #0]
}
 800a444:	bf00      	nop
 800a446:	e7fe      	b.n	800a446 <vPortEnterCritical+0x4a>
	}
}
 800a448:	bf00      	nop
 800a44a:	370c      	adds	r7, #12
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bc80      	pop	{r7}
 800a450:	4770      	bx	lr
 800a452:	bf00      	nop
 800a454:	20000010 	.word	0x20000010
 800a458:	e000ed04 	.word	0xe000ed04

0800a45c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a45c:	b480      	push	{r7}
 800a45e:	b083      	sub	sp, #12
 800a460:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a462:	4b11      	ldr	r3, [pc, #68]	; (800a4a8 <vPortExitCritical+0x4c>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d10a      	bne.n	800a480 <vPortExitCritical+0x24>
	__asm volatile
 800a46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46e:	f383 8811 	msr	BASEPRI, r3
 800a472:	f3bf 8f6f 	isb	sy
 800a476:	f3bf 8f4f 	dsb	sy
 800a47a:	607b      	str	r3, [r7, #4]
}
 800a47c:	bf00      	nop
 800a47e:	e7fe      	b.n	800a47e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a480:	4b09      	ldr	r3, [pc, #36]	; (800a4a8 <vPortExitCritical+0x4c>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	3b01      	subs	r3, #1
 800a486:	4a08      	ldr	r2, [pc, #32]	; (800a4a8 <vPortExitCritical+0x4c>)
 800a488:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a48a:	4b07      	ldr	r3, [pc, #28]	; (800a4a8 <vPortExitCritical+0x4c>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d105      	bne.n	800a49e <vPortExitCritical+0x42>
 800a492:	2300      	movs	r3, #0
 800a494:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	f383 8811 	msr	BASEPRI, r3
}
 800a49c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a49e:	bf00      	nop
 800a4a0:	370c      	adds	r7, #12
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bc80      	pop	{r7}
 800a4a6:	4770      	bx	lr
 800a4a8:	20000010 	.word	0x20000010
 800a4ac:	00000000 	.word	0x00000000

0800a4b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a4b0:	f3ef 8009 	mrs	r0, PSP
 800a4b4:	f3bf 8f6f 	isb	sy
 800a4b8:	4b0d      	ldr	r3, [pc, #52]	; (800a4f0 <pxCurrentTCBConst>)
 800a4ba:	681a      	ldr	r2, [r3, #0]
 800a4bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a4c0:	6010      	str	r0, [r2, #0]
 800a4c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a4c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a4ca:	f380 8811 	msr	BASEPRI, r0
 800a4ce:	f7fe ffd5 	bl	800947c <vTaskSwitchContext>
 800a4d2:	f04f 0000 	mov.w	r0, #0
 800a4d6:	f380 8811 	msr	BASEPRI, r0
 800a4da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a4de:	6819      	ldr	r1, [r3, #0]
 800a4e0:	6808      	ldr	r0, [r1, #0]
 800a4e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a4e6:	f380 8809 	msr	PSP, r0
 800a4ea:	f3bf 8f6f 	isb	sy
 800a4ee:	4770      	bx	lr

0800a4f0 <pxCurrentTCBConst>:
 800a4f0:	20000d14 	.word	0x20000d14
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a4f4:	bf00      	nop
 800a4f6:	bf00      	nop

0800a4f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b082      	sub	sp, #8
 800a4fc:	af00      	add	r7, sp, #0
	__asm volatile
 800a4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a502:	f383 8811 	msr	BASEPRI, r3
 800a506:	f3bf 8f6f 	isb	sy
 800a50a:	f3bf 8f4f 	dsb	sy
 800a50e:	607b      	str	r3, [r7, #4]
}
 800a510:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a512:	f7fe fef5 	bl	8009300 <xTaskIncrementTick>
 800a516:	4603      	mov	r3, r0
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d003      	beq.n	800a524 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a51c:	4b06      	ldr	r3, [pc, #24]	; (800a538 <xPortSysTickHandler+0x40>)
 800a51e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a522:	601a      	str	r2, [r3, #0]
 800a524:	2300      	movs	r3, #0
 800a526:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	f383 8811 	msr	BASEPRI, r3
}
 800a52e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a530:	bf00      	nop
 800a532:	3708      	adds	r7, #8
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}
 800a538:	e000ed04 	.word	0xe000ed04

0800a53c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a53c:	b480      	push	{r7}
 800a53e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a540:	4b0a      	ldr	r3, [pc, #40]	; (800a56c <vPortSetupTimerInterrupt+0x30>)
 800a542:	2200      	movs	r2, #0
 800a544:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a546:	4b0a      	ldr	r3, [pc, #40]	; (800a570 <vPortSetupTimerInterrupt+0x34>)
 800a548:	2200      	movs	r2, #0
 800a54a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a54c:	4b09      	ldr	r3, [pc, #36]	; (800a574 <vPortSetupTimerInterrupt+0x38>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4a09      	ldr	r2, [pc, #36]	; (800a578 <vPortSetupTimerInterrupt+0x3c>)
 800a552:	fba2 2303 	umull	r2, r3, r2, r3
 800a556:	099b      	lsrs	r3, r3, #6
 800a558:	4a08      	ldr	r2, [pc, #32]	; (800a57c <vPortSetupTimerInterrupt+0x40>)
 800a55a:	3b01      	subs	r3, #1
 800a55c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a55e:	4b03      	ldr	r3, [pc, #12]	; (800a56c <vPortSetupTimerInterrupt+0x30>)
 800a560:	2207      	movs	r2, #7
 800a562:	601a      	str	r2, [r3, #0]
}
 800a564:	bf00      	nop
 800a566:	46bd      	mov	sp, r7
 800a568:	bc80      	pop	{r7}
 800a56a:	4770      	bx	lr
 800a56c:	e000e010 	.word	0xe000e010
 800a570:	e000e018 	.word	0xe000e018
 800a574:	20000004 	.word	0x20000004
 800a578:	10624dd3 	.word	0x10624dd3
 800a57c:	e000e014 	.word	0xe000e014

0800a580 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a580:	b480      	push	{r7}
 800a582:	b085      	sub	sp, #20
 800a584:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a586:	f3ef 8305 	mrs	r3, IPSR
 800a58a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2b0f      	cmp	r3, #15
 800a590:	d914      	bls.n	800a5bc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a592:	4a16      	ldr	r2, [pc, #88]	; (800a5ec <vPortValidateInterruptPriority+0x6c>)
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	4413      	add	r3, r2
 800a598:	781b      	ldrb	r3, [r3, #0]
 800a59a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a59c:	4b14      	ldr	r3, [pc, #80]	; (800a5f0 <vPortValidateInterruptPriority+0x70>)
 800a59e:	781b      	ldrb	r3, [r3, #0]
 800a5a0:	7afa      	ldrb	r2, [r7, #11]
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d20a      	bcs.n	800a5bc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5aa:	f383 8811 	msr	BASEPRI, r3
 800a5ae:	f3bf 8f6f 	isb	sy
 800a5b2:	f3bf 8f4f 	dsb	sy
 800a5b6:	607b      	str	r3, [r7, #4]
}
 800a5b8:	bf00      	nop
 800a5ba:	e7fe      	b.n	800a5ba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a5bc:	4b0d      	ldr	r3, [pc, #52]	; (800a5f4 <vPortValidateInterruptPriority+0x74>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a5c4:	4b0c      	ldr	r3, [pc, #48]	; (800a5f8 <vPortValidateInterruptPriority+0x78>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d90a      	bls.n	800a5e2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d0:	f383 8811 	msr	BASEPRI, r3
 800a5d4:	f3bf 8f6f 	isb	sy
 800a5d8:	f3bf 8f4f 	dsb	sy
 800a5dc:	603b      	str	r3, [r7, #0]
}
 800a5de:	bf00      	nop
 800a5e0:	e7fe      	b.n	800a5e0 <vPortValidateInterruptPriority+0x60>
	}
 800a5e2:	bf00      	nop
 800a5e4:	3714      	adds	r7, #20
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bc80      	pop	{r7}
 800a5ea:	4770      	bx	lr
 800a5ec:	e000e3f0 	.word	0xe000e3f0
 800a5f0:	20001340 	.word	0x20001340
 800a5f4:	e000ed0c 	.word	0xe000ed0c
 800a5f8:	20001344 	.word	0x20001344

0800a5fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b08a      	sub	sp, #40	; 0x28
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a604:	2300      	movs	r3, #0
 800a606:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a608:	f7fe fdc0 	bl	800918c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a60c:	4b58      	ldr	r3, [pc, #352]	; (800a770 <pvPortMalloc+0x174>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d101      	bne.n	800a618 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a614:	f000 f910 	bl	800a838 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a618:	4b56      	ldr	r3, [pc, #344]	; (800a774 <pvPortMalloc+0x178>)
 800a61a:	681a      	ldr	r2, [r3, #0]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	4013      	ands	r3, r2
 800a620:	2b00      	cmp	r3, #0
 800a622:	f040 808e 	bne.w	800a742 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d01d      	beq.n	800a668 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a62c:	2208      	movs	r2, #8
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	4413      	add	r3, r2
 800a632:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f003 0307 	and.w	r3, r3, #7
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d014      	beq.n	800a668 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f023 0307 	bic.w	r3, r3, #7
 800a644:	3308      	adds	r3, #8
 800a646:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f003 0307 	and.w	r3, r3, #7
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d00a      	beq.n	800a668 <pvPortMalloc+0x6c>
	__asm volatile
 800a652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a656:	f383 8811 	msr	BASEPRI, r3
 800a65a:	f3bf 8f6f 	isb	sy
 800a65e:	f3bf 8f4f 	dsb	sy
 800a662:	617b      	str	r3, [r7, #20]
}
 800a664:	bf00      	nop
 800a666:	e7fe      	b.n	800a666 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d069      	beq.n	800a742 <pvPortMalloc+0x146>
 800a66e:	4b42      	ldr	r3, [pc, #264]	; (800a778 <pvPortMalloc+0x17c>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	429a      	cmp	r2, r3
 800a676:	d864      	bhi.n	800a742 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a678:	4b40      	ldr	r3, [pc, #256]	; (800a77c <pvPortMalloc+0x180>)
 800a67a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a67c:	4b3f      	ldr	r3, [pc, #252]	; (800a77c <pvPortMalloc+0x180>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a682:	e004      	b.n	800a68e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a686:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	687a      	ldr	r2, [r7, #4]
 800a694:	429a      	cmp	r2, r3
 800a696:	d903      	bls.n	800a6a0 <pvPortMalloc+0xa4>
 800a698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d1f1      	bne.n	800a684 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a6a0:	4b33      	ldr	r3, [pc, #204]	; (800a770 <pvPortMalloc+0x174>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	d04b      	beq.n	800a742 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a6aa:	6a3b      	ldr	r3, [r7, #32]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	2208      	movs	r2, #8
 800a6b0:	4413      	add	r3, r2
 800a6b2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b6:	681a      	ldr	r2, [r3, #0]
 800a6b8:	6a3b      	ldr	r3, [r7, #32]
 800a6ba:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6be:	685a      	ldr	r2, [r3, #4]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	1ad2      	subs	r2, r2, r3
 800a6c4:	2308      	movs	r3, #8
 800a6c6:	005b      	lsls	r3, r3, #1
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d91f      	bls.n	800a70c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a6cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	4413      	add	r3, r2
 800a6d2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6d4:	69bb      	ldr	r3, [r7, #24]
 800a6d6:	f003 0307 	and.w	r3, r3, #7
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d00a      	beq.n	800a6f4 <pvPortMalloc+0xf8>
	__asm volatile
 800a6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e2:	f383 8811 	msr	BASEPRI, r3
 800a6e6:	f3bf 8f6f 	isb	sy
 800a6ea:	f3bf 8f4f 	dsb	sy
 800a6ee:	613b      	str	r3, [r7, #16]
}
 800a6f0:	bf00      	nop
 800a6f2:	e7fe      	b.n	800a6f2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f6:	685a      	ldr	r2, [r3, #4]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	1ad2      	subs	r2, r2, r3
 800a6fc:	69bb      	ldr	r3, [r7, #24]
 800a6fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a706:	69b8      	ldr	r0, [r7, #24]
 800a708:	f000 f8f8 	bl	800a8fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a70c:	4b1a      	ldr	r3, [pc, #104]	; (800a778 <pvPortMalloc+0x17c>)
 800a70e:	681a      	ldr	r2, [r3, #0]
 800a710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a712:	685b      	ldr	r3, [r3, #4]
 800a714:	1ad3      	subs	r3, r2, r3
 800a716:	4a18      	ldr	r2, [pc, #96]	; (800a778 <pvPortMalloc+0x17c>)
 800a718:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a71a:	4b17      	ldr	r3, [pc, #92]	; (800a778 <pvPortMalloc+0x17c>)
 800a71c:	681a      	ldr	r2, [r3, #0]
 800a71e:	4b18      	ldr	r3, [pc, #96]	; (800a780 <pvPortMalloc+0x184>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	429a      	cmp	r2, r3
 800a724:	d203      	bcs.n	800a72e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a726:	4b14      	ldr	r3, [pc, #80]	; (800a778 <pvPortMalloc+0x17c>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4a15      	ldr	r2, [pc, #84]	; (800a780 <pvPortMalloc+0x184>)
 800a72c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a730:	685a      	ldr	r2, [r3, #4]
 800a732:	4b10      	ldr	r3, [pc, #64]	; (800a774 <pvPortMalloc+0x178>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	431a      	orrs	r2, r3
 800a738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73e:	2200      	movs	r2, #0
 800a740:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a742:	f7fe fd31 	bl	80091a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a746:	69fb      	ldr	r3, [r7, #28]
 800a748:	f003 0307 	and.w	r3, r3, #7
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d00a      	beq.n	800a766 <pvPortMalloc+0x16a>
	__asm volatile
 800a750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a754:	f383 8811 	msr	BASEPRI, r3
 800a758:	f3bf 8f6f 	isb	sy
 800a75c:	f3bf 8f4f 	dsb	sy
 800a760:	60fb      	str	r3, [r7, #12]
}
 800a762:	bf00      	nop
 800a764:	e7fe      	b.n	800a764 <pvPortMalloc+0x168>
	return pvReturn;
 800a766:	69fb      	ldr	r3, [r7, #28]
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3728      	adds	r7, #40	; 0x28
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}
 800a770:	20003350 	.word	0x20003350
 800a774:	2000335c 	.word	0x2000335c
 800a778:	20003354 	.word	0x20003354
 800a77c:	20003348 	.word	0x20003348
 800a780:	20003358 	.word	0x20003358

0800a784 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b086      	sub	sp, #24
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d048      	beq.n	800a828 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a796:	2308      	movs	r3, #8
 800a798:	425b      	negs	r3, r3
 800a79a:	697a      	ldr	r2, [r7, #20]
 800a79c:	4413      	add	r3, r2
 800a79e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	685a      	ldr	r2, [r3, #4]
 800a7a8:	4b21      	ldr	r3, [pc, #132]	; (800a830 <vPortFree+0xac>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4013      	ands	r3, r2
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d10a      	bne.n	800a7c8 <vPortFree+0x44>
	__asm volatile
 800a7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b6:	f383 8811 	msr	BASEPRI, r3
 800a7ba:	f3bf 8f6f 	isb	sy
 800a7be:	f3bf 8f4f 	dsb	sy
 800a7c2:	60fb      	str	r3, [r7, #12]
}
 800a7c4:	bf00      	nop
 800a7c6:	e7fe      	b.n	800a7c6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d00a      	beq.n	800a7e6 <vPortFree+0x62>
	__asm volatile
 800a7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d4:	f383 8811 	msr	BASEPRI, r3
 800a7d8:	f3bf 8f6f 	isb	sy
 800a7dc:	f3bf 8f4f 	dsb	sy
 800a7e0:	60bb      	str	r3, [r7, #8]
}
 800a7e2:	bf00      	nop
 800a7e4:	e7fe      	b.n	800a7e4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	685a      	ldr	r2, [r3, #4]
 800a7ea:	4b11      	ldr	r3, [pc, #68]	; (800a830 <vPortFree+0xac>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	4013      	ands	r3, r2
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d019      	beq.n	800a828 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d115      	bne.n	800a828 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	685a      	ldr	r2, [r3, #4]
 800a800:	4b0b      	ldr	r3, [pc, #44]	; (800a830 <vPortFree+0xac>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	43db      	mvns	r3, r3
 800a806:	401a      	ands	r2, r3
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a80c:	f7fe fcbe 	bl	800918c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	685a      	ldr	r2, [r3, #4]
 800a814:	4b07      	ldr	r3, [pc, #28]	; (800a834 <vPortFree+0xb0>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4413      	add	r3, r2
 800a81a:	4a06      	ldr	r2, [pc, #24]	; (800a834 <vPortFree+0xb0>)
 800a81c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a81e:	6938      	ldr	r0, [r7, #16]
 800a820:	f000 f86c 	bl	800a8fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a824:	f7fe fcc0 	bl	80091a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a828:	bf00      	nop
 800a82a:	3718      	adds	r7, #24
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}
 800a830:	2000335c 	.word	0x2000335c
 800a834:	20003354 	.word	0x20003354

0800a838 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a838:	b480      	push	{r7}
 800a83a:	b085      	sub	sp, #20
 800a83c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a83e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a842:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a844:	4b27      	ldr	r3, [pc, #156]	; (800a8e4 <prvHeapInit+0xac>)
 800a846:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	f003 0307 	and.w	r3, r3, #7
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d00c      	beq.n	800a86c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	3307      	adds	r3, #7
 800a856:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f023 0307 	bic.w	r3, r3, #7
 800a85e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a860:	68ba      	ldr	r2, [r7, #8]
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	1ad3      	subs	r3, r2, r3
 800a866:	4a1f      	ldr	r2, [pc, #124]	; (800a8e4 <prvHeapInit+0xac>)
 800a868:	4413      	add	r3, r2
 800a86a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a870:	4a1d      	ldr	r2, [pc, #116]	; (800a8e8 <prvHeapInit+0xb0>)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a876:	4b1c      	ldr	r3, [pc, #112]	; (800a8e8 <prvHeapInit+0xb0>)
 800a878:	2200      	movs	r2, #0
 800a87a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	68ba      	ldr	r2, [r7, #8]
 800a880:	4413      	add	r3, r2
 800a882:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a884:	2208      	movs	r2, #8
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	1a9b      	subs	r3, r3, r2
 800a88a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f023 0307 	bic.w	r3, r3, #7
 800a892:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	4a15      	ldr	r2, [pc, #84]	; (800a8ec <prvHeapInit+0xb4>)
 800a898:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a89a:	4b14      	ldr	r3, [pc, #80]	; (800a8ec <prvHeapInit+0xb4>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a8a2:	4b12      	ldr	r3, [pc, #72]	; (800a8ec <prvHeapInit+0xb4>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	68fa      	ldr	r2, [r7, #12]
 800a8b2:	1ad2      	subs	r2, r2, r3
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a8b8:	4b0c      	ldr	r3, [pc, #48]	; (800a8ec <prvHeapInit+0xb4>)
 800a8ba:	681a      	ldr	r2, [r3, #0]
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	4a0a      	ldr	r2, [pc, #40]	; (800a8f0 <prvHeapInit+0xb8>)
 800a8c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	685b      	ldr	r3, [r3, #4]
 800a8cc:	4a09      	ldr	r2, [pc, #36]	; (800a8f4 <prvHeapInit+0xbc>)
 800a8ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a8d0:	4b09      	ldr	r3, [pc, #36]	; (800a8f8 <prvHeapInit+0xc0>)
 800a8d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a8d6:	601a      	str	r2, [r3, #0]
}
 800a8d8:	bf00      	nop
 800a8da:	3714      	adds	r7, #20
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bc80      	pop	{r7}
 800a8e0:	4770      	bx	lr
 800a8e2:	bf00      	nop
 800a8e4:	20001348 	.word	0x20001348
 800a8e8:	20003348 	.word	0x20003348
 800a8ec:	20003350 	.word	0x20003350
 800a8f0:	20003358 	.word	0x20003358
 800a8f4:	20003354 	.word	0x20003354
 800a8f8:	2000335c 	.word	0x2000335c

0800a8fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b085      	sub	sp, #20
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a904:	4b27      	ldr	r3, [pc, #156]	; (800a9a4 <prvInsertBlockIntoFreeList+0xa8>)
 800a906:	60fb      	str	r3, [r7, #12]
 800a908:	e002      	b.n	800a910 <prvInsertBlockIntoFreeList+0x14>
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	60fb      	str	r3, [r7, #12]
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	687a      	ldr	r2, [r7, #4]
 800a916:	429a      	cmp	r2, r3
 800a918:	d8f7      	bhi.n	800a90a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	68ba      	ldr	r2, [r7, #8]
 800a924:	4413      	add	r3, r2
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	429a      	cmp	r2, r3
 800a92a:	d108      	bne.n	800a93e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	685a      	ldr	r2, [r3, #4]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	685b      	ldr	r3, [r3, #4]
 800a934:	441a      	add	r2, r3
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	68ba      	ldr	r2, [r7, #8]
 800a948:	441a      	add	r2, r3
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	429a      	cmp	r2, r3
 800a950:	d118      	bne.n	800a984 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681a      	ldr	r2, [r3, #0]
 800a956:	4b14      	ldr	r3, [pc, #80]	; (800a9a8 <prvInsertBlockIntoFreeList+0xac>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d00d      	beq.n	800a97a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	685a      	ldr	r2, [r3, #4]
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	685b      	ldr	r3, [r3, #4]
 800a968:	441a      	add	r2, r3
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	681a      	ldr	r2, [r3, #0]
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	601a      	str	r2, [r3, #0]
 800a978:	e008      	b.n	800a98c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a97a:	4b0b      	ldr	r3, [pc, #44]	; (800a9a8 <prvInsertBlockIntoFreeList+0xac>)
 800a97c:	681a      	ldr	r2, [r3, #0]
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	601a      	str	r2, [r3, #0]
 800a982:	e003      	b.n	800a98c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681a      	ldr	r2, [r3, #0]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a98c:	68fa      	ldr	r2, [r7, #12]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	429a      	cmp	r2, r3
 800a992:	d002      	beq.n	800a99a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	687a      	ldr	r2, [r7, #4]
 800a998:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a99a:	bf00      	nop
 800a99c:	3714      	adds	r7, #20
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bc80      	pop	{r7}
 800a9a2:	4770      	bx	lr
 800a9a4:	20003348 	.word	0x20003348
 800a9a8:	20003350 	.word	0x20003350

0800a9ac <malloc>:
 800a9ac:	4b02      	ldr	r3, [pc, #8]	; (800a9b8 <malloc+0xc>)
 800a9ae:	4601      	mov	r1, r0
 800a9b0:	6818      	ldr	r0, [r3, #0]
 800a9b2:	f000 b82b 	b.w	800aa0c <_malloc_r>
 800a9b6:	bf00      	nop
 800a9b8:	200001e0 	.word	0x200001e0

0800a9bc <free>:
 800a9bc:	4b02      	ldr	r3, [pc, #8]	; (800a9c8 <free+0xc>)
 800a9be:	4601      	mov	r1, r0
 800a9c0:	6818      	ldr	r0, [r3, #0]
 800a9c2:	f003 bad5 	b.w	800df70 <_free_r>
 800a9c6:	bf00      	nop
 800a9c8:	200001e0 	.word	0x200001e0

0800a9cc <sbrk_aligned>:
 800a9cc:	b570      	push	{r4, r5, r6, lr}
 800a9ce:	4e0e      	ldr	r6, [pc, #56]	; (800aa08 <sbrk_aligned+0x3c>)
 800a9d0:	460c      	mov	r4, r1
 800a9d2:	6831      	ldr	r1, [r6, #0]
 800a9d4:	4605      	mov	r5, r0
 800a9d6:	b911      	cbnz	r1, 800a9de <sbrk_aligned+0x12>
 800a9d8:	f002 fba8 	bl	800d12c <_sbrk_r>
 800a9dc:	6030      	str	r0, [r6, #0]
 800a9de:	4621      	mov	r1, r4
 800a9e0:	4628      	mov	r0, r5
 800a9e2:	f002 fba3 	bl	800d12c <_sbrk_r>
 800a9e6:	1c43      	adds	r3, r0, #1
 800a9e8:	d00a      	beq.n	800aa00 <sbrk_aligned+0x34>
 800a9ea:	1cc4      	adds	r4, r0, #3
 800a9ec:	f024 0403 	bic.w	r4, r4, #3
 800a9f0:	42a0      	cmp	r0, r4
 800a9f2:	d007      	beq.n	800aa04 <sbrk_aligned+0x38>
 800a9f4:	1a21      	subs	r1, r4, r0
 800a9f6:	4628      	mov	r0, r5
 800a9f8:	f002 fb98 	bl	800d12c <_sbrk_r>
 800a9fc:	3001      	adds	r0, #1
 800a9fe:	d101      	bne.n	800aa04 <sbrk_aligned+0x38>
 800aa00:	f04f 34ff 	mov.w	r4, #4294967295
 800aa04:	4620      	mov	r0, r4
 800aa06:	bd70      	pop	{r4, r5, r6, pc}
 800aa08:	20003364 	.word	0x20003364

0800aa0c <_malloc_r>:
 800aa0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa10:	1ccd      	adds	r5, r1, #3
 800aa12:	f025 0503 	bic.w	r5, r5, #3
 800aa16:	3508      	adds	r5, #8
 800aa18:	2d0c      	cmp	r5, #12
 800aa1a:	bf38      	it	cc
 800aa1c:	250c      	movcc	r5, #12
 800aa1e:	2d00      	cmp	r5, #0
 800aa20:	4607      	mov	r7, r0
 800aa22:	db01      	blt.n	800aa28 <_malloc_r+0x1c>
 800aa24:	42a9      	cmp	r1, r5
 800aa26:	d905      	bls.n	800aa34 <_malloc_r+0x28>
 800aa28:	230c      	movs	r3, #12
 800aa2a:	2600      	movs	r6, #0
 800aa2c:	603b      	str	r3, [r7, #0]
 800aa2e:	4630      	mov	r0, r6
 800aa30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa34:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ab08 <_malloc_r+0xfc>
 800aa38:	f000 f868 	bl	800ab0c <__malloc_lock>
 800aa3c:	f8d8 3000 	ldr.w	r3, [r8]
 800aa40:	461c      	mov	r4, r3
 800aa42:	bb5c      	cbnz	r4, 800aa9c <_malloc_r+0x90>
 800aa44:	4629      	mov	r1, r5
 800aa46:	4638      	mov	r0, r7
 800aa48:	f7ff ffc0 	bl	800a9cc <sbrk_aligned>
 800aa4c:	1c43      	adds	r3, r0, #1
 800aa4e:	4604      	mov	r4, r0
 800aa50:	d155      	bne.n	800aafe <_malloc_r+0xf2>
 800aa52:	f8d8 4000 	ldr.w	r4, [r8]
 800aa56:	4626      	mov	r6, r4
 800aa58:	2e00      	cmp	r6, #0
 800aa5a:	d145      	bne.n	800aae8 <_malloc_r+0xdc>
 800aa5c:	2c00      	cmp	r4, #0
 800aa5e:	d048      	beq.n	800aaf2 <_malloc_r+0xe6>
 800aa60:	6823      	ldr	r3, [r4, #0]
 800aa62:	4631      	mov	r1, r6
 800aa64:	4638      	mov	r0, r7
 800aa66:	eb04 0903 	add.w	r9, r4, r3
 800aa6a:	f002 fb5f 	bl	800d12c <_sbrk_r>
 800aa6e:	4581      	cmp	r9, r0
 800aa70:	d13f      	bne.n	800aaf2 <_malloc_r+0xe6>
 800aa72:	6821      	ldr	r1, [r4, #0]
 800aa74:	4638      	mov	r0, r7
 800aa76:	1a6d      	subs	r5, r5, r1
 800aa78:	4629      	mov	r1, r5
 800aa7a:	f7ff ffa7 	bl	800a9cc <sbrk_aligned>
 800aa7e:	3001      	adds	r0, #1
 800aa80:	d037      	beq.n	800aaf2 <_malloc_r+0xe6>
 800aa82:	6823      	ldr	r3, [r4, #0]
 800aa84:	442b      	add	r3, r5
 800aa86:	6023      	str	r3, [r4, #0]
 800aa88:	f8d8 3000 	ldr.w	r3, [r8]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d038      	beq.n	800ab02 <_malloc_r+0xf6>
 800aa90:	685a      	ldr	r2, [r3, #4]
 800aa92:	42a2      	cmp	r2, r4
 800aa94:	d12b      	bne.n	800aaee <_malloc_r+0xe2>
 800aa96:	2200      	movs	r2, #0
 800aa98:	605a      	str	r2, [r3, #4]
 800aa9a:	e00f      	b.n	800aabc <_malloc_r+0xb0>
 800aa9c:	6822      	ldr	r2, [r4, #0]
 800aa9e:	1b52      	subs	r2, r2, r5
 800aaa0:	d41f      	bmi.n	800aae2 <_malloc_r+0xd6>
 800aaa2:	2a0b      	cmp	r2, #11
 800aaa4:	d917      	bls.n	800aad6 <_malloc_r+0xca>
 800aaa6:	1961      	adds	r1, r4, r5
 800aaa8:	42a3      	cmp	r3, r4
 800aaaa:	6025      	str	r5, [r4, #0]
 800aaac:	bf18      	it	ne
 800aaae:	6059      	strne	r1, [r3, #4]
 800aab0:	6863      	ldr	r3, [r4, #4]
 800aab2:	bf08      	it	eq
 800aab4:	f8c8 1000 	streq.w	r1, [r8]
 800aab8:	5162      	str	r2, [r4, r5]
 800aaba:	604b      	str	r3, [r1, #4]
 800aabc:	4638      	mov	r0, r7
 800aabe:	f104 060b 	add.w	r6, r4, #11
 800aac2:	f000 f829 	bl	800ab18 <__malloc_unlock>
 800aac6:	f026 0607 	bic.w	r6, r6, #7
 800aaca:	1d23      	adds	r3, r4, #4
 800aacc:	1af2      	subs	r2, r6, r3
 800aace:	d0ae      	beq.n	800aa2e <_malloc_r+0x22>
 800aad0:	1b9b      	subs	r3, r3, r6
 800aad2:	50a3      	str	r3, [r4, r2]
 800aad4:	e7ab      	b.n	800aa2e <_malloc_r+0x22>
 800aad6:	42a3      	cmp	r3, r4
 800aad8:	6862      	ldr	r2, [r4, #4]
 800aada:	d1dd      	bne.n	800aa98 <_malloc_r+0x8c>
 800aadc:	f8c8 2000 	str.w	r2, [r8]
 800aae0:	e7ec      	b.n	800aabc <_malloc_r+0xb0>
 800aae2:	4623      	mov	r3, r4
 800aae4:	6864      	ldr	r4, [r4, #4]
 800aae6:	e7ac      	b.n	800aa42 <_malloc_r+0x36>
 800aae8:	4634      	mov	r4, r6
 800aaea:	6876      	ldr	r6, [r6, #4]
 800aaec:	e7b4      	b.n	800aa58 <_malloc_r+0x4c>
 800aaee:	4613      	mov	r3, r2
 800aaf0:	e7cc      	b.n	800aa8c <_malloc_r+0x80>
 800aaf2:	230c      	movs	r3, #12
 800aaf4:	4638      	mov	r0, r7
 800aaf6:	603b      	str	r3, [r7, #0]
 800aaf8:	f000 f80e 	bl	800ab18 <__malloc_unlock>
 800aafc:	e797      	b.n	800aa2e <_malloc_r+0x22>
 800aafe:	6025      	str	r5, [r4, #0]
 800ab00:	e7dc      	b.n	800aabc <_malloc_r+0xb0>
 800ab02:	605b      	str	r3, [r3, #4]
 800ab04:	deff      	udf	#255	; 0xff
 800ab06:	bf00      	nop
 800ab08:	20003360 	.word	0x20003360

0800ab0c <__malloc_lock>:
 800ab0c:	4801      	ldr	r0, [pc, #4]	; (800ab14 <__malloc_lock+0x8>)
 800ab0e:	f002 bb5b 	b.w	800d1c8 <__retarget_lock_acquire_recursive>
 800ab12:	bf00      	nop
 800ab14:	200034cd 	.word	0x200034cd

0800ab18 <__malloc_unlock>:
 800ab18:	4801      	ldr	r0, [pc, #4]	; (800ab20 <__malloc_unlock+0x8>)
 800ab1a:	f002 bb57 	b.w	800d1cc <__retarget_lock_release_recursive>
 800ab1e:	bf00      	nop
 800ab20:	200034cd 	.word	0x200034cd

0800ab24 <sulp>:
 800ab24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab28:	460f      	mov	r7, r1
 800ab2a:	4690      	mov	r8, r2
 800ab2c:	f004 f984 	bl	800ee38 <__ulp>
 800ab30:	4604      	mov	r4, r0
 800ab32:	460d      	mov	r5, r1
 800ab34:	f1b8 0f00 	cmp.w	r8, #0
 800ab38:	d011      	beq.n	800ab5e <sulp+0x3a>
 800ab3a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800ab3e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	dd0b      	ble.n	800ab5e <sulp+0x3a>
 800ab46:	2400      	movs	r4, #0
 800ab48:	051b      	lsls	r3, r3, #20
 800ab4a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ab4e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ab52:	4622      	mov	r2, r4
 800ab54:	462b      	mov	r3, r5
 800ab56:	f7f5 fd39 	bl	80005cc <__aeabi_dmul>
 800ab5a:	4604      	mov	r4, r0
 800ab5c:	460d      	mov	r5, r1
 800ab5e:	4620      	mov	r0, r4
 800ab60:	4629      	mov	r1, r5
 800ab62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800ab68 <_strtod_l>:
 800ab68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab6c:	b09f      	sub	sp, #124	; 0x7c
 800ab6e:	9217      	str	r2, [sp, #92]	; 0x5c
 800ab70:	2200      	movs	r2, #0
 800ab72:	4604      	mov	r4, r0
 800ab74:	921a      	str	r2, [sp, #104]	; 0x68
 800ab76:	460d      	mov	r5, r1
 800ab78:	f04f 0800 	mov.w	r8, #0
 800ab7c:	f04f 0900 	mov.w	r9, #0
 800ab80:	460a      	mov	r2, r1
 800ab82:	9219      	str	r2, [sp, #100]	; 0x64
 800ab84:	7811      	ldrb	r1, [r2, #0]
 800ab86:	292b      	cmp	r1, #43	; 0x2b
 800ab88:	d04a      	beq.n	800ac20 <_strtod_l+0xb8>
 800ab8a:	d838      	bhi.n	800abfe <_strtod_l+0x96>
 800ab8c:	290d      	cmp	r1, #13
 800ab8e:	d832      	bhi.n	800abf6 <_strtod_l+0x8e>
 800ab90:	2908      	cmp	r1, #8
 800ab92:	d832      	bhi.n	800abfa <_strtod_l+0x92>
 800ab94:	2900      	cmp	r1, #0
 800ab96:	d03b      	beq.n	800ac10 <_strtod_l+0xa8>
 800ab98:	2200      	movs	r2, #0
 800ab9a:	920e      	str	r2, [sp, #56]	; 0x38
 800ab9c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800ab9e:	7832      	ldrb	r2, [r6, #0]
 800aba0:	2a30      	cmp	r2, #48	; 0x30
 800aba2:	f040 80b2 	bne.w	800ad0a <_strtod_l+0x1a2>
 800aba6:	7872      	ldrb	r2, [r6, #1]
 800aba8:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800abac:	2a58      	cmp	r2, #88	; 0x58
 800abae:	d16e      	bne.n	800ac8e <_strtod_l+0x126>
 800abb0:	9302      	str	r3, [sp, #8]
 800abb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800abb4:	4620      	mov	r0, r4
 800abb6:	9301      	str	r3, [sp, #4]
 800abb8:	ab1a      	add	r3, sp, #104	; 0x68
 800abba:	9300      	str	r3, [sp, #0]
 800abbc:	4a8c      	ldr	r2, [pc, #560]	; (800adf0 <_strtod_l+0x288>)
 800abbe:	ab1b      	add	r3, sp, #108	; 0x6c
 800abc0:	a919      	add	r1, sp, #100	; 0x64
 800abc2:	f003 fa85 	bl	800e0d0 <__gethex>
 800abc6:	f010 070f 	ands.w	r7, r0, #15
 800abca:	4605      	mov	r5, r0
 800abcc:	d005      	beq.n	800abda <_strtod_l+0x72>
 800abce:	2f06      	cmp	r7, #6
 800abd0:	d128      	bne.n	800ac24 <_strtod_l+0xbc>
 800abd2:	2300      	movs	r3, #0
 800abd4:	3601      	adds	r6, #1
 800abd6:	9619      	str	r6, [sp, #100]	; 0x64
 800abd8:	930e      	str	r3, [sp, #56]	; 0x38
 800abda:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800abdc:	2b00      	cmp	r3, #0
 800abde:	f040 85a0 	bne.w	800b722 <_strtod_l+0xbba>
 800abe2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800abe4:	b1cb      	cbz	r3, 800ac1a <_strtod_l+0xb2>
 800abe6:	4642      	mov	r2, r8
 800abe8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800abec:	4610      	mov	r0, r2
 800abee:	4619      	mov	r1, r3
 800abf0:	b01f      	add	sp, #124	; 0x7c
 800abf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abf6:	2920      	cmp	r1, #32
 800abf8:	d1ce      	bne.n	800ab98 <_strtod_l+0x30>
 800abfa:	3201      	adds	r2, #1
 800abfc:	e7c1      	b.n	800ab82 <_strtod_l+0x1a>
 800abfe:	292d      	cmp	r1, #45	; 0x2d
 800ac00:	d1ca      	bne.n	800ab98 <_strtod_l+0x30>
 800ac02:	2101      	movs	r1, #1
 800ac04:	910e      	str	r1, [sp, #56]	; 0x38
 800ac06:	1c51      	adds	r1, r2, #1
 800ac08:	9119      	str	r1, [sp, #100]	; 0x64
 800ac0a:	7852      	ldrb	r2, [r2, #1]
 800ac0c:	2a00      	cmp	r2, #0
 800ac0e:	d1c5      	bne.n	800ab9c <_strtod_l+0x34>
 800ac10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac12:	9519      	str	r5, [sp, #100]	; 0x64
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	f040 8582 	bne.w	800b71e <_strtod_l+0xbb6>
 800ac1a:	4642      	mov	r2, r8
 800ac1c:	464b      	mov	r3, r9
 800ac1e:	e7e5      	b.n	800abec <_strtod_l+0x84>
 800ac20:	2100      	movs	r1, #0
 800ac22:	e7ef      	b.n	800ac04 <_strtod_l+0x9c>
 800ac24:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ac26:	b13a      	cbz	r2, 800ac38 <_strtod_l+0xd0>
 800ac28:	2135      	movs	r1, #53	; 0x35
 800ac2a:	a81c      	add	r0, sp, #112	; 0x70
 800ac2c:	f004 f9f0 	bl	800f010 <__copybits>
 800ac30:	4620      	mov	r0, r4
 800ac32:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ac34:	f003 fdd4 	bl	800e7e0 <_Bfree>
 800ac38:	3f01      	subs	r7, #1
 800ac3a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ac3c:	2f04      	cmp	r7, #4
 800ac3e:	d806      	bhi.n	800ac4e <_strtod_l+0xe6>
 800ac40:	e8df f007 	tbb	[pc, r7]
 800ac44:	201d0314 	.word	0x201d0314
 800ac48:	14          	.byte	0x14
 800ac49:	00          	.byte	0x00
 800ac4a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800ac4e:	05e9      	lsls	r1, r5, #23
 800ac50:	bf48      	it	mi
 800ac52:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800ac56:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ac5a:	0d1b      	lsrs	r3, r3, #20
 800ac5c:	051b      	lsls	r3, r3, #20
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d1bb      	bne.n	800abda <_strtod_l+0x72>
 800ac62:	f002 fa85 	bl	800d170 <__errno>
 800ac66:	2322      	movs	r3, #34	; 0x22
 800ac68:	6003      	str	r3, [r0, #0]
 800ac6a:	e7b6      	b.n	800abda <_strtod_l+0x72>
 800ac6c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ac70:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800ac74:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ac78:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800ac7c:	e7e7      	b.n	800ac4e <_strtod_l+0xe6>
 800ac7e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800adf4 <_strtod_l+0x28c>
 800ac82:	e7e4      	b.n	800ac4e <_strtod_l+0xe6>
 800ac84:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ac88:	f04f 38ff 	mov.w	r8, #4294967295
 800ac8c:	e7df      	b.n	800ac4e <_strtod_l+0xe6>
 800ac8e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ac90:	1c5a      	adds	r2, r3, #1
 800ac92:	9219      	str	r2, [sp, #100]	; 0x64
 800ac94:	785b      	ldrb	r3, [r3, #1]
 800ac96:	2b30      	cmp	r3, #48	; 0x30
 800ac98:	d0f9      	beq.n	800ac8e <_strtod_l+0x126>
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d09d      	beq.n	800abda <_strtod_l+0x72>
 800ac9e:	2301      	movs	r3, #1
 800aca0:	f04f 0a00 	mov.w	sl, #0
 800aca4:	220a      	movs	r2, #10
 800aca6:	46d3      	mov	fp, sl
 800aca8:	9305      	str	r3, [sp, #20]
 800acaa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800acac:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800acb0:	930b      	str	r3, [sp, #44]	; 0x2c
 800acb2:	9819      	ldr	r0, [sp, #100]	; 0x64
 800acb4:	7806      	ldrb	r6, [r0, #0]
 800acb6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800acba:	b2d9      	uxtb	r1, r3
 800acbc:	2909      	cmp	r1, #9
 800acbe:	d926      	bls.n	800ad0e <_strtod_l+0x1a6>
 800acc0:	2201      	movs	r2, #1
 800acc2:	494d      	ldr	r1, [pc, #308]	; (800adf8 <_strtod_l+0x290>)
 800acc4:	f001 fbc0 	bl	800c448 <strncmp>
 800acc8:	2800      	cmp	r0, #0
 800acca:	d030      	beq.n	800ad2e <_strtod_l+0x1c6>
 800accc:	2000      	movs	r0, #0
 800acce:	4632      	mov	r2, r6
 800acd0:	4603      	mov	r3, r0
 800acd2:	465e      	mov	r6, fp
 800acd4:	9008      	str	r0, [sp, #32]
 800acd6:	2a65      	cmp	r2, #101	; 0x65
 800acd8:	d001      	beq.n	800acde <_strtod_l+0x176>
 800acda:	2a45      	cmp	r2, #69	; 0x45
 800acdc:	d113      	bne.n	800ad06 <_strtod_l+0x19e>
 800acde:	b91e      	cbnz	r6, 800ace8 <_strtod_l+0x180>
 800ace0:	9a05      	ldr	r2, [sp, #20]
 800ace2:	4302      	orrs	r2, r0
 800ace4:	d094      	beq.n	800ac10 <_strtod_l+0xa8>
 800ace6:	2600      	movs	r6, #0
 800ace8:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800acea:	1c6a      	adds	r2, r5, #1
 800acec:	9219      	str	r2, [sp, #100]	; 0x64
 800acee:	786a      	ldrb	r2, [r5, #1]
 800acf0:	2a2b      	cmp	r2, #43	; 0x2b
 800acf2:	d074      	beq.n	800adde <_strtod_l+0x276>
 800acf4:	2a2d      	cmp	r2, #45	; 0x2d
 800acf6:	d078      	beq.n	800adea <_strtod_l+0x282>
 800acf8:	f04f 0c00 	mov.w	ip, #0
 800acfc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ad00:	2909      	cmp	r1, #9
 800ad02:	d97f      	bls.n	800ae04 <_strtod_l+0x29c>
 800ad04:	9519      	str	r5, [sp, #100]	; 0x64
 800ad06:	2700      	movs	r7, #0
 800ad08:	e09e      	b.n	800ae48 <_strtod_l+0x2e0>
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	e7c8      	b.n	800aca0 <_strtod_l+0x138>
 800ad0e:	f1bb 0f08 	cmp.w	fp, #8
 800ad12:	bfd8      	it	le
 800ad14:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800ad16:	f100 0001 	add.w	r0, r0, #1
 800ad1a:	bfd6      	itet	le
 800ad1c:	fb02 3301 	mlale	r3, r2, r1, r3
 800ad20:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800ad24:	930a      	strle	r3, [sp, #40]	; 0x28
 800ad26:	f10b 0b01 	add.w	fp, fp, #1
 800ad2a:	9019      	str	r0, [sp, #100]	; 0x64
 800ad2c:	e7c1      	b.n	800acb2 <_strtod_l+0x14a>
 800ad2e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ad30:	1c5a      	adds	r2, r3, #1
 800ad32:	9219      	str	r2, [sp, #100]	; 0x64
 800ad34:	785a      	ldrb	r2, [r3, #1]
 800ad36:	f1bb 0f00 	cmp.w	fp, #0
 800ad3a:	d037      	beq.n	800adac <_strtod_l+0x244>
 800ad3c:	465e      	mov	r6, fp
 800ad3e:	9008      	str	r0, [sp, #32]
 800ad40:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ad44:	2b09      	cmp	r3, #9
 800ad46:	d912      	bls.n	800ad6e <_strtod_l+0x206>
 800ad48:	2301      	movs	r3, #1
 800ad4a:	e7c4      	b.n	800acd6 <_strtod_l+0x16e>
 800ad4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ad4e:	3001      	adds	r0, #1
 800ad50:	1c5a      	adds	r2, r3, #1
 800ad52:	9219      	str	r2, [sp, #100]	; 0x64
 800ad54:	785a      	ldrb	r2, [r3, #1]
 800ad56:	2a30      	cmp	r2, #48	; 0x30
 800ad58:	d0f8      	beq.n	800ad4c <_strtod_l+0x1e4>
 800ad5a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ad5e:	2b08      	cmp	r3, #8
 800ad60:	f200 84e4 	bhi.w	800b72c <_strtod_l+0xbc4>
 800ad64:	9008      	str	r0, [sp, #32]
 800ad66:	2000      	movs	r0, #0
 800ad68:	4606      	mov	r6, r0
 800ad6a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ad6c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ad6e:	3a30      	subs	r2, #48	; 0x30
 800ad70:	f100 0301 	add.w	r3, r0, #1
 800ad74:	d014      	beq.n	800ada0 <_strtod_l+0x238>
 800ad76:	9908      	ldr	r1, [sp, #32]
 800ad78:	eb00 0c06 	add.w	ip, r0, r6
 800ad7c:	4419      	add	r1, r3
 800ad7e:	9108      	str	r1, [sp, #32]
 800ad80:	4633      	mov	r3, r6
 800ad82:	210a      	movs	r1, #10
 800ad84:	4563      	cmp	r3, ip
 800ad86:	d113      	bne.n	800adb0 <_strtod_l+0x248>
 800ad88:	1833      	adds	r3, r6, r0
 800ad8a:	2b08      	cmp	r3, #8
 800ad8c:	f106 0601 	add.w	r6, r6, #1
 800ad90:	4406      	add	r6, r0
 800ad92:	dc1a      	bgt.n	800adca <_strtod_l+0x262>
 800ad94:	230a      	movs	r3, #10
 800ad96:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ad98:	fb03 2301 	mla	r3, r3, r1, r2
 800ad9c:	930a      	str	r3, [sp, #40]	; 0x28
 800ad9e:	2300      	movs	r3, #0
 800ada0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ada2:	4618      	mov	r0, r3
 800ada4:	1c51      	adds	r1, r2, #1
 800ada6:	9119      	str	r1, [sp, #100]	; 0x64
 800ada8:	7852      	ldrb	r2, [r2, #1]
 800adaa:	e7c9      	b.n	800ad40 <_strtod_l+0x1d8>
 800adac:	4658      	mov	r0, fp
 800adae:	e7d2      	b.n	800ad56 <_strtod_l+0x1ee>
 800adb0:	2b08      	cmp	r3, #8
 800adb2:	f103 0301 	add.w	r3, r3, #1
 800adb6:	dc03      	bgt.n	800adc0 <_strtod_l+0x258>
 800adb8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800adba:	434f      	muls	r7, r1
 800adbc:	970a      	str	r7, [sp, #40]	; 0x28
 800adbe:	e7e1      	b.n	800ad84 <_strtod_l+0x21c>
 800adc0:	2b10      	cmp	r3, #16
 800adc2:	bfd8      	it	le
 800adc4:	fb01 fa0a 	mulle.w	sl, r1, sl
 800adc8:	e7dc      	b.n	800ad84 <_strtod_l+0x21c>
 800adca:	2e10      	cmp	r6, #16
 800adcc:	bfdc      	itt	le
 800adce:	230a      	movle	r3, #10
 800add0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800add4:	e7e3      	b.n	800ad9e <_strtod_l+0x236>
 800add6:	2300      	movs	r3, #0
 800add8:	9308      	str	r3, [sp, #32]
 800adda:	2301      	movs	r3, #1
 800addc:	e780      	b.n	800ace0 <_strtod_l+0x178>
 800adde:	f04f 0c00 	mov.w	ip, #0
 800ade2:	1caa      	adds	r2, r5, #2
 800ade4:	9219      	str	r2, [sp, #100]	; 0x64
 800ade6:	78aa      	ldrb	r2, [r5, #2]
 800ade8:	e788      	b.n	800acfc <_strtod_l+0x194>
 800adea:	f04f 0c01 	mov.w	ip, #1
 800adee:	e7f8      	b.n	800ade2 <_strtod_l+0x27a>
 800adf0:	08010714 	.word	0x08010714
 800adf4:	7ff00000 	.word	0x7ff00000
 800adf8:	08010712 	.word	0x08010712
 800adfc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800adfe:	1c51      	adds	r1, r2, #1
 800ae00:	9119      	str	r1, [sp, #100]	; 0x64
 800ae02:	7852      	ldrb	r2, [r2, #1]
 800ae04:	2a30      	cmp	r2, #48	; 0x30
 800ae06:	d0f9      	beq.n	800adfc <_strtod_l+0x294>
 800ae08:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ae0c:	2908      	cmp	r1, #8
 800ae0e:	f63f af7a 	bhi.w	800ad06 <_strtod_l+0x19e>
 800ae12:	3a30      	subs	r2, #48	; 0x30
 800ae14:	9209      	str	r2, [sp, #36]	; 0x24
 800ae16:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ae18:	920c      	str	r2, [sp, #48]	; 0x30
 800ae1a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ae1c:	1c57      	adds	r7, r2, #1
 800ae1e:	9719      	str	r7, [sp, #100]	; 0x64
 800ae20:	7852      	ldrb	r2, [r2, #1]
 800ae22:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ae26:	f1be 0f09 	cmp.w	lr, #9
 800ae2a:	d938      	bls.n	800ae9e <_strtod_l+0x336>
 800ae2c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ae2e:	1a7f      	subs	r7, r7, r1
 800ae30:	2f08      	cmp	r7, #8
 800ae32:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800ae36:	dc03      	bgt.n	800ae40 <_strtod_l+0x2d8>
 800ae38:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae3a:	428f      	cmp	r7, r1
 800ae3c:	bfa8      	it	ge
 800ae3e:	460f      	movge	r7, r1
 800ae40:	f1bc 0f00 	cmp.w	ip, #0
 800ae44:	d000      	beq.n	800ae48 <_strtod_l+0x2e0>
 800ae46:	427f      	negs	r7, r7
 800ae48:	2e00      	cmp	r6, #0
 800ae4a:	d14f      	bne.n	800aeec <_strtod_l+0x384>
 800ae4c:	9905      	ldr	r1, [sp, #20]
 800ae4e:	4301      	orrs	r1, r0
 800ae50:	f47f aec3 	bne.w	800abda <_strtod_l+0x72>
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	f47f aedb 	bne.w	800ac10 <_strtod_l+0xa8>
 800ae5a:	2a69      	cmp	r2, #105	; 0x69
 800ae5c:	d029      	beq.n	800aeb2 <_strtod_l+0x34a>
 800ae5e:	dc26      	bgt.n	800aeae <_strtod_l+0x346>
 800ae60:	2a49      	cmp	r2, #73	; 0x49
 800ae62:	d026      	beq.n	800aeb2 <_strtod_l+0x34a>
 800ae64:	2a4e      	cmp	r2, #78	; 0x4e
 800ae66:	f47f aed3 	bne.w	800ac10 <_strtod_l+0xa8>
 800ae6a:	499a      	ldr	r1, [pc, #616]	; (800b0d4 <_strtod_l+0x56c>)
 800ae6c:	a819      	add	r0, sp, #100	; 0x64
 800ae6e:	f003 fb71 	bl	800e554 <__match>
 800ae72:	2800      	cmp	r0, #0
 800ae74:	f43f aecc 	beq.w	800ac10 <_strtod_l+0xa8>
 800ae78:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ae7a:	781b      	ldrb	r3, [r3, #0]
 800ae7c:	2b28      	cmp	r3, #40	; 0x28
 800ae7e:	d12f      	bne.n	800aee0 <_strtod_l+0x378>
 800ae80:	4995      	ldr	r1, [pc, #596]	; (800b0d8 <_strtod_l+0x570>)
 800ae82:	aa1c      	add	r2, sp, #112	; 0x70
 800ae84:	a819      	add	r0, sp, #100	; 0x64
 800ae86:	f003 fb79 	bl	800e57c <__hexnan>
 800ae8a:	2805      	cmp	r0, #5
 800ae8c:	d128      	bne.n	800aee0 <_strtod_l+0x378>
 800ae8e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ae90:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800ae94:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800ae98:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800ae9c:	e69d      	b.n	800abda <_strtod_l+0x72>
 800ae9e:	210a      	movs	r1, #10
 800aea0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800aea2:	fb01 2107 	mla	r1, r1, r7, r2
 800aea6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800aeaa:	9209      	str	r2, [sp, #36]	; 0x24
 800aeac:	e7b5      	b.n	800ae1a <_strtod_l+0x2b2>
 800aeae:	2a6e      	cmp	r2, #110	; 0x6e
 800aeb0:	e7d9      	b.n	800ae66 <_strtod_l+0x2fe>
 800aeb2:	498a      	ldr	r1, [pc, #552]	; (800b0dc <_strtod_l+0x574>)
 800aeb4:	a819      	add	r0, sp, #100	; 0x64
 800aeb6:	f003 fb4d 	bl	800e554 <__match>
 800aeba:	2800      	cmp	r0, #0
 800aebc:	f43f aea8 	beq.w	800ac10 <_strtod_l+0xa8>
 800aec0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aec2:	4987      	ldr	r1, [pc, #540]	; (800b0e0 <_strtod_l+0x578>)
 800aec4:	3b01      	subs	r3, #1
 800aec6:	a819      	add	r0, sp, #100	; 0x64
 800aec8:	9319      	str	r3, [sp, #100]	; 0x64
 800aeca:	f003 fb43 	bl	800e554 <__match>
 800aece:	b910      	cbnz	r0, 800aed6 <_strtod_l+0x36e>
 800aed0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aed2:	3301      	adds	r3, #1
 800aed4:	9319      	str	r3, [sp, #100]	; 0x64
 800aed6:	f04f 0800 	mov.w	r8, #0
 800aeda:	f8df 9208 	ldr.w	r9, [pc, #520]	; 800b0e4 <_strtod_l+0x57c>
 800aede:	e67c      	b.n	800abda <_strtod_l+0x72>
 800aee0:	4881      	ldr	r0, [pc, #516]	; (800b0e8 <_strtod_l+0x580>)
 800aee2:	f002 f999 	bl	800d218 <nan>
 800aee6:	4680      	mov	r8, r0
 800aee8:	4689      	mov	r9, r1
 800aeea:	e676      	b.n	800abda <_strtod_l+0x72>
 800aeec:	9b08      	ldr	r3, [sp, #32]
 800aeee:	f1bb 0f00 	cmp.w	fp, #0
 800aef2:	bf08      	it	eq
 800aef4:	46b3      	moveq	fp, r6
 800aef6:	1afb      	subs	r3, r7, r3
 800aef8:	2e10      	cmp	r6, #16
 800aefa:	980a      	ldr	r0, [sp, #40]	; 0x28
 800aefc:	4635      	mov	r5, r6
 800aefe:	9309      	str	r3, [sp, #36]	; 0x24
 800af00:	bfa8      	it	ge
 800af02:	2510      	movge	r5, #16
 800af04:	f7f5 fae8 	bl	80004d8 <__aeabi_ui2d>
 800af08:	2e09      	cmp	r6, #9
 800af0a:	4680      	mov	r8, r0
 800af0c:	4689      	mov	r9, r1
 800af0e:	dd13      	ble.n	800af38 <_strtod_l+0x3d0>
 800af10:	4b76      	ldr	r3, [pc, #472]	; (800b0ec <_strtod_l+0x584>)
 800af12:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800af16:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800af1a:	f7f5 fb57 	bl	80005cc <__aeabi_dmul>
 800af1e:	4680      	mov	r8, r0
 800af20:	4650      	mov	r0, sl
 800af22:	4689      	mov	r9, r1
 800af24:	f7f5 fad8 	bl	80004d8 <__aeabi_ui2d>
 800af28:	4602      	mov	r2, r0
 800af2a:	460b      	mov	r3, r1
 800af2c:	4640      	mov	r0, r8
 800af2e:	4649      	mov	r1, r9
 800af30:	f7f5 f996 	bl	8000260 <__adddf3>
 800af34:	4680      	mov	r8, r0
 800af36:	4689      	mov	r9, r1
 800af38:	2e0f      	cmp	r6, #15
 800af3a:	dc36      	bgt.n	800afaa <_strtod_l+0x442>
 800af3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af3e:	2b00      	cmp	r3, #0
 800af40:	f43f ae4b 	beq.w	800abda <_strtod_l+0x72>
 800af44:	dd22      	ble.n	800af8c <_strtod_l+0x424>
 800af46:	2b16      	cmp	r3, #22
 800af48:	dc09      	bgt.n	800af5e <_strtod_l+0x3f6>
 800af4a:	4968      	ldr	r1, [pc, #416]	; (800b0ec <_strtod_l+0x584>)
 800af4c:	4642      	mov	r2, r8
 800af4e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800af52:	464b      	mov	r3, r9
 800af54:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af58:	f7f5 fb38 	bl	80005cc <__aeabi_dmul>
 800af5c:	e7c3      	b.n	800aee6 <_strtod_l+0x37e>
 800af5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af60:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800af64:	4293      	cmp	r3, r2
 800af66:	db20      	blt.n	800afaa <_strtod_l+0x442>
 800af68:	4c60      	ldr	r4, [pc, #384]	; (800b0ec <_strtod_l+0x584>)
 800af6a:	f1c6 060f 	rsb	r6, r6, #15
 800af6e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800af72:	4642      	mov	r2, r8
 800af74:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af78:	464b      	mov	r3, r9
 800af7a:	f7f5 fb27 	bl	80005cc <__aeabi_dmul>
 800af7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af80:	1b9e      	subs	r6, r3, r6
 800af82:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800af86:	e9d4 2300 	ldrd	r2, r3, [r4]
 800af8a:	e7e5      	b.n	800af58 <_strtod_l+0x3f0>
 800af8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af8e:	3316      	adds	r3, #22
 800af90:	db0b      	blt.n	800afaa <_strtod_l+0x442>
 800af92:	9b08      	ldr	r3, [sp, #32]
 800af94:	4640      	mov	r0, r8
 800af96:	1bdf      	subs	r7, r3, r7
 800af98:	4b54      	ldr	r3, [pc, #336]	; (800b0ec <_strtod_l+0x584>)
 800af9a:	4649      	mov	r1, r9
 800af9c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800afa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afa4:	f7f5 fc3c 	bl	8000820 <__aeabi_ddiv>
 800afa8:	e79d      	b.n	800aee6 <_strtod_l+0x37e>
 800afaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afac:	1b75      	subs	r5, r6, r5
 800afae:	441d      	add	r5, r3
 800afb0:	2d00      	cmp	r5, #0
 800afb2:	dd70      	ble.n	800b096 <_strtod_l+0x52e>
 800afb4:	f015 030f 	ands.w	r3, r5, #15
 800afb8:	d00a      	beq.n	800afd0 <_strtod_l+0x468>
 800afba:	494c      	ldr	r1, [pc, #304]	; (800b0ec <_strtod_l+0x584>)
 800afbc:	4642      	mov	r2, r8
 800afbe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800afc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afc6:	464b      	mov	r3, r9
 800afc8:	f7f5 fb00 	bl	80005cc <__aeabi_dmul>
 800afcc:	4680      	mov	r8, r0
 800afce:	4689      	mov	r9, r1
 800afd0:	f035 050f 	bics.w	r5, r5, #15
 800afd4:	d04d      	beq.n	800b072 <_strtod_l+0x50a>
 800afd6:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800afda:	dd22      	ble.n	800b022 <_strtod_l+0x4ba>
 800afdc:	2600      	movs	r6, #0
 800afde:	46b3      	mov	fp, r6
 800afe0:	960b      	str	r6, [sp, #44]	; 0x2c
 800afe2:	9608      	str	r6, [sp, #32]
 800afe4:	2322      	movs	r3, #34	; 0x22
 800afe6:	f04f 0800 	mov.w	r8, #0
 800afea:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800b0e4 <_strtod_l+0x57c>
 800afee:	6023      	str	r3, [r4, #0]
 800aff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	f43f adf1 	beq.w	800abda <_strtod_l+0x72>
 800aff8:	4620      	mov	r0, r4
 800affa:	991a      	ldr	r1, [sp, #104]	; 0x68
 800affc:	f003 fbf0 	bl	800e7e0 <_Bfree>
 800b000:	4620      	mov	r0, r4
 800b002:	9908      	ldr	r1, [sp, #32]
 800b004:	f003 fbec 	bl	800e7e0 <_Bfree>
 800b008:	4659      	mov	r1, fp
 800b00a:	4620      	mov	r0, r4
 800b00c:	f003 fbe8 	bl	800e7e0 <_Bfree>
 800b010:	4620      	mov	r0, r4
 800b012:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b014:	f003 fbe4 	bl	800e7e0 <_Bfree>
 800b018:	4631      	mov	r1, r6
 800b01a:	4620      	mov	r0, r4
 800b01c:	f003 fbe0 	bl	800e7e0 <_Bfree>
 800b020:	e5db      	b.n	800abda <_strtod_l+0x72>
 800b022:	4b33      	ldr	r3, [pc, #204]	; (800b0f0 <_strtod_l+0x588>)
 800b024:	4640      	mov	r0, r8
 800b026:	9305      	str	r3, [sp, #20]
 800b028:	2300      	movs	r3, #0
 800b02a:	4649      	mov	r1, r9
 800b02c:	469a      	mov	sl, r3
 800b02e:	112d      	asrs	r5, r5, #4
 800b030:	2d01      	cmp	r5, #1
 800b032:	dc21      	bgt.n	800b078 <_strtod_l+0x510>
 800b034:	b10b      	cbz	r3, 800b03a <_strtod_l+0x4d2>
 800b036:	4680      	mov	r8, r0
 800b038:	4689      	mov	r9, r1
 800b03a:	492d      	ldr	r1, [pc, #180]	; (800b0f0 <_strtod_l+0x588>)
 800b03c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b040:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b044:	4642      	mov	r2, r8
 800b046:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b04a:	464b      	mov	r3, r9
 800b04c:	f7f5 fabe 	bl	80005cc <__aeabi_dmul>
 800b050:	4b24      	ldr	r3, [pc, #144]	; (800b0e4 <_strtod_l+0x57c>)
 800b052:	460a      	mov	r2, r1
 800b054:	400b      	ands	r3, r1
 800b056:	4927      	ldr	r1, [pc, #156]	; (800b0f4 <_strtod_l+0x58c>)
 800b058:	4680      	mov	r8, r0
 800b05a:	428b      	cmp	r3, r1
 800b05c:	d8be      	bhi.n	800afdc <_strtod_l+0x474>
 800b05e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b062:	428b      	cmp	r3, r1
 800b064:	bf86      	itte	hi
 800b066:	f04f 38ff 	movhi.w	r8, #4294967295
 800b06a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800b0f8 <_strtod_l+0x590>
 800b06e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800b072:	2300      	movs	r3, #0
 800b074:	9305      	str	r3, [sp, #20]
 800b076:	e07b      	b.n	800b170 <_strtod_l+0x608>
 800b078:	07ea      	lsls	r2, r5, #31
 800b07a:	d505      	bpl.n	800b088 <_strtod_l+0x520>
 800b07c:	9b05      	ldr	r3, [sp, #20]
 800b07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b082:	f7f5 faa3 	bl	80005cc <__aeabi_dmul>
 800b086:	2301      	movs	r3, #1
 800b088:	9a05      	ldr	r2, [sp, #20]
 800b08a:	f10a 0a01 	add.w	sl, sl, #1
 800b08e:	3208      	adds	r2, #8
 800b090:	106d      	asrs	r5, r5, #1
 800b092:	9205      	str	r2, [sp, #20]
 800b094:	e7cc      	b.n	800b030 <_strtod_l+0x4c8>
 800b096:	d0ec      	beq.n	800b072 <_strtod_l+0x50a>
 800b098:	426d      	negs	r5, r5
 800b09a:	f015 020f 	ands.w	r2, r5, #15
 800b09e:	d00a      	beq.n	800b0b6 <_strtod_l+0x54e>
 800b0a0:	4b12      	ldr	r3, [pc, #72]	; (800b0ec <_strtod_l+0x584>)
 800b0a2:	4640      	mov	r0, r8
 800b0a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0a8:	4649      	mov	r1, r9
 800b0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ae:	f7f5 fbb7 	bl	8000820 <__aeabi_ddiv>
 800b0b2:	4680      	mov	r8, r0
 800b0b4:	4689      	mov	r9, r1
 800b0b6:	112d      	asrs	r5, r5, #4
 800b0b8:	d0db      	beq.n	800b072 <_strtod_l+0x50a>
 800b0ba:	2d1f      	cmp	r5, #31
 800b0bc:	dd1e      	ble.n	800b0fc <_strtod_l+0x594>
 800b0be:	2600      	movs	r6, #0
 800b0c0:	46b3      	mov	fp, r6
 800b0c2:	960b      	str	r6, [sp, #44]	; 0x2c
 800b0c4:	9608      	str	r6, [sp, #32]
 800b0c6:	2322      	movs	r3, #34	; 0x22
 800b0c8:	f04f 0800 	mov.w	r8, #0
 800b0cc:	f04f 0900 	mov.w	r9, #0
 800b0d0:	6023      	str	r3, [r4, #0]
 800b0d2:	e78d      	b.n	800aff0 <_strtod_l+0x488>
 800b0d4:	08010876 	.word	0x08010876
 800b0d8:	08010728 	.word	0x08010728
 800b0dc:	0801086e 	.word	0x0801086e
 800b0e0:	08010a01 	.word	0x08010a01
 800b0e4:	7ff00000 	.word	0x7ff00000
 800b0e8:	080109fd 	.word	0x080109fd
 800b0ec:	08010b58 	.word	0x08010b58
 800b0f0:	08010b30 	.word	0x08010b30
 800b0f4:	7ca00000 	.word	0x7ca00000
 800b0f8:	7fefffff 	.word	0x7fefffff
 800b0fc:	f015 0310 	ands.w	r3, r5, #16
 800b100:	bf18      	it	ne
 800b102:	236a      	movne	r3, #106	; 0x6a
 800b104:	4640      	mov	r0, r8
 800b106:	9305      	str	r3, [sp, #20]
 800b108:	4649      	mov	r1, r9
 800b10a:	2300      	movs	r3, #0
 800b10c:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 800b3d8 <_strtod_l+0x870>
 800b110:	07ea      	lsls	r2, r5, #31
 800b112:	d504      	bpl.n	800b11e <_strtod_l+0x5b6>
 800b114:	e9da 2300 	ldrd	r2, r3, [sl]
 800b118:	f7f5 fa58 	bl	80005cc <__aeabi_dmul>
 800b11c:	2301      	movs	r3, #1
 800b11e:	106d      	asrs	r5, r5, #1
 800b120:	f10a 0a08 	add.w	sl, sl, #8
 800b124:	d1f4      	bne.n	800b110 <_strtod_l+0x5a8>
 800b126:	b10b      	cbz	r3, 800b12c <_strtod_l+0x5c4>
 800b128:	4680      	mov	r8, r0
 800b12a:	4689      	mov	r9, r1
 800b12c:	9b05      	ldr	r3, [sp, #20]
 800b12e:	b1bb      	cbz	r3, 800b160 <_strtod_l+0x5f8>
 800b130:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b134:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b138:	2b00      	cmp	r3, #0
 800b13a:	4649      	mov	r1, r9
 800b13c:	dd10      	ble.n	800b160 <_strtod_l+0x5f8>
 800b13e:	2b1f      	cmp	r3, #31
 800b140:	f340 8128 	ble.w	800b394 <_strtod_l+0x82c>
 800b144:	2b34      	cmp	r3, #52	; 0x34
 800b146:	bfd8      	it	le
 800b148:	f04f 33ff 	movle.w	r3, #4294967295
 800b14c:	f04f 0800 	mov.w	r8, #0
 800b150:	bfcf      	iteee	gt
 800b152:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b156:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b15a:	4093      	lslle	r3, r2
 800b15c:	ea03 0901 	andle.w	r9, r3, r1
 800b160:	2200      	movs	r2, #0
 800b162:	2300      	movs	r3, #0
 800b164:	4640      	mov	r0, r8
 800b166:	4649      	mov	r1, r9
 800b168:	f7f5 fc98 	bl	8000a9c <__aeabi_dcmpeq>
 800b16c:	2800      	cmp	r0, #0
 800b16e:	d1a6      	bne.n	800b0be <_strtod_l+0x556>
 800b170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b172:	465a      	mov	r2, fp
 800b174:	9300      	str	r3, [sp, #0]
 800b176:	4620      	mov	r0, r4
 800b178:	4633      	mov	r3, r6
 800b17a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b17c:	f003 fb98 	bl	800e8b0 <__s2b>
 800b180:	900b      	str	r0, [sp, #44]	; 0x2c
 800b182:	2800      	cmp	r0, #0
 800b184:	f43f af2a 	beq.w	800afdc <_strtod_l+0x474>
 800b188:	2600      	movs	r6, #0
 800b18a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b18c:	9b08      	ldr	r3, [sp, #32]
 800b18e:	2a00      	cmp	r2, #0
 800b190:	eba3 0307 	sub.w	r3, r3, r7
 800b194:	bfa8      	it	ge
 800b196:	2300      	movge	r3, #0
 800b198:	46b3      	mov	fp, r6
 800b19a:	9312      	str	r3, [sp, #72]	; 0x48
 800b19c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b1a0:	9316      	str	r3, [sp, #88]	; 0x58
 800b1a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1a4:	4620      	mov	r0, r4
 800b1a6:	6859      	ldr	r1, [r3, #4]
 800b1a8:	f003 fada 	bl	800e760 <_Balloc>
 800b1ac:	9008      	str	r0, [sp, #32]
 800b1ae:	2800      	cmp	r0, #0
 800b1b0:	f43f af18 	beq.w	800afe4 <_strtod_l+0x47c>
 800b1b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1b6:	300c      	adds	r0, #12
 800b1b8:	691a      	ldr	r2, [r3, #16]
 800b1ba:	f103 010c 	add.w	r1, r3, #12
 800b1be:	3202      	adds	r2, #2
 800b1c0:	0092      	lsls	r2, r2, #2
 800b1c2:	f002 f81a 	bl	800d1fa <memcpy>
 800b1c6:	ab1c      	add	r3, sp, #112	; 0x70
 800b1c8:	9301      	str	r3, [sp, #4]
 800b1ca:	ab1b      	add	r3, sp, #108	; 0x6c
 800b1cc:	9300      	str	r3, [sp, #0]
 800b1ce:	4642      	mov	r2, r8
 800b1d0:	464b      	mov	r3, r9
 800b1d2:	4620      	mov	r0, r4
 800b1d4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800b1d8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800b1dc:	f003 fe94 	bl	800ef08 <__d2b>
 800b1e0:	901a      	str	r0, [sp, #104]	; 0x68
 800b1e2:	2800      	cmp	r0, #0
 800b1e4:	f43f aefe 	beq.w	800afe4 <_strtod_l+0x47c>
 800b1e8:	2101      	movs	r1, #1
 800b1ea:	4620      	mov	r0, r4
 800b1ec:	f003 fbf8 	bl	800e9e0 <__i2b>
 800b1f0:	4683      	mov	fp, r0
 800b1f2:	2800      	cmp	r0, #0
 800b1f4:	f43f aef6 	beq.w	800afe4 <_strtod_l+0x47c>
 800b1f8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800b1fa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b1fc:	2f00      	cmp	r7, #0
 800b1fe:	bfab      	itete	ge
 800b200:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800b202:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800b204:	eb07 0a03 	addge.w	sl, r7, r3
 800b208:	1bdd      	sublt	r5, r3, r7
 800b20a:	9b05      	ldr	r3, [sp, #20]
 800b20c:	bfa8      	it	ge
 800b20e:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800b210:	eba7 0703 	sub.w	r7, r7, r3
 800b214:	4417      	add	r7, r2
 800b216:	4b71      	ldr	r3, [pc, #452]	; (800b3dc <_strtod_l+0x874>)
 800b218:	f107 37ff 	add.w	r7, r7, #4294967295
 800b21c:	bfb8      	it	lt
 800b21e:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800b222:	429f      	cmp	r7, r3
 800b224:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b228:	f280 80c7 	bge.w	800b3ba <_strtod_l+0x852>
 800b22c:	1bdb      	subs	r3, r3, r7
 800b22e:	2b1f      	cmp	r3, #31
 800b230:	f04f 0101 	mov.w	r1, #1
 800b234:	eba2 0203 	sub.w	r2, r2, r3
 800b238:	f300 80b3 	bgt.w	800b3a2 <_strtod_l+0x83a>
 800b23c:	fa01 f303 	lsl.w	r3, r1, r3
 800b240:	9313      	str	r3, [sp, #76]	; 0x4c
 800b242:	2300      	movs	r3, #0
 800b244:	9310      	str	r3, [sp, #64]	; 0x40
 800b246:	eb0a 0702 	add.w	r7, sl, r2
 800b24a:	9b05      	ldr	r3, [sp, #20]
 800b24c:	45ba      	cmp	sl, r7
 800b24e:	4415      	add	r5, r2
 800b250:	441d      	add	r5, r3
 800b252:	4653      	mov	r3, sl
 800b254:	bfa8      	it	ge
 800b256:	463b      	movge	r3, r7
 800b258:	42ab      	cmp	r3, r5
 800b25a:	bfa8      	it	ge
 800b25c:	462b      	movge	r3, r5
 800b25e:	2b00      	cmp	r3, #0
 800b260:	bfc2      	ittt	gt
 800b262:	1aff      	subgt	r7, r7, r3
 800b264:	1aed      	subgt	r5, r5, r3
 800b266:	ebaa 0a03 	subgt.w	sl, sl, r3
 800b26a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	dd17      	ble.n	800b2a0 <_strtod_l+0x738>
 800b270:	4659      	mov	r1, fp
 800b272:	461a      	mov	r2, r3
 800b274:	4620      	mov	r0, r4
 800b276:	f003 fc71 	bl	800eb5c <__pow5mult>
 800b27a:	4683      	mov	fp, r0
 800b27c:	2800      	cmp	r0, #0
 800b27e:	f43f aeb1 	beq.w	800afe4 <_strtod_l+0x47c>
 800b282:	4601      	mov	r1, r0
 800b284:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b286:	4620      	mov	r0, r4
 800b288:	f003 fbc0 	bl	800ea0c <__multiply>
 800b28c:	900a      	str	r0, [sp, #40]	; 0x28
 800b28e:	2800      	cmp	r0, #0
 800b290:	f43f aea8 	beq.w	800afe4 <_strtod_l+0x47c>
 800b294:	4620      	mov	r0, r4
 800b296:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b298:	f003 faa2 	bl	800e7e0 <_Bfree>
 800b29c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b29e:	931a      	str	r3, [sp, #104]	; 0x68
 800b2a0:	2f00      	cmp	r7, #0
 800b2a2:	f300 808f 	bgt.w	800b3c4 <_strtod_l+0x85c>
 800b2a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	dd08      	ble.n	800b2be <_strtod_l+0x756>
 800b2ac:	4620      	mov	r0, r4
 800b2ae:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b2b0:	9908      	ldr	r1, [sp, #32]
 800b2b2:	f003 fc53 	bl	800eb5c <__pow5mult>
 800b2b6:	9008      	str	r0, [sp, #32]
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	f43f ae93 	beq.w	800afe4 <_strtod_l+0x47c>
 800b2be:	2d00      	cmp	r5, #0
 800b2c0:	dd08      	ble.n	800b2d4 <_strtod_l+0x76c>
 800b2c2:	462a      	mov	r2, r5
 800b2c4:	4620      	mov	r0, r4
 800b2c6:	9908      	ldr	r1, [sp, #32]
 800b2c8:	f003 fca2 	bl	800ec10 <__lshift>
 800b2cc:	9008      	str	r0, [sp, #32]
 800b2ce:	2800      	cmp	r0, #0
 800b2d0:	f43f ae88 	beq.w	800afe4 <_strtod_l+0x47c>
 800b2d4:	f1ba 0f00 	cmp.w	sl, #0
 800b2d8:	dd08      	ble.n	800b2ec <_strtod_l+0x784>
 800b2da:	4659      	mov	r1, fp
 800b2dc:	4652      	mov	r2, sl
 800b2de:	4620      	mov	r0, r4
 800b2e0:	f003 fc96 	bl	800ec10 <__lshift>
 800b2e4:	4683      	mov	fp, r0
 800b2e6:	2800      	cmp	r0, #0
 800b2e8:	f43f ae7c 	beq.w	800afe4 <_strtod_l+0x47c>
 800b2ec:	4620      	mov	r0, r4
 800b2ee:	9a08      	ldr	r2, [sp, #32]
 800b2f0:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b2f2:	f003 fd15 	bl	800ed20 <__mdiff>
 800b2f6:	4606      	mov	r6, r0
 800b2f8:	2800      	cmp	r0, #0
 800b2fa:	f43f ae73 	beq.w	800afe4 <_strtod_l+0x47c>
 800b2fe:	2500      	movs	r5, #0
 800b300:	68c3      	ldr	r3, [r0, #12]
 800b302:	4659      	mov	r1, fp
 800b304:	60c5      	str	r5, [r0, #12]
 800b306:	930a      	str	r3, [sp, #40]	; 0x28
 800b308:	f003 fcee 	bl	800ece8 <__mcmp>
 800b30c:	42a8      	cmp	r0, r5
 800b30e:	da6b      	bge.n	800b3e8 <_strtod_l+0x880>
 800b310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b312:	ea53 0308 	orrs.w	r3, r3, r8
 800b316:	f040 808f 	bne.w	800b438 <_strtod_l+0x8d0>
 800b31a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b31e:	2b00      	cmp	r3, #0
 800b320:	f040 808a 	bne.w	800b438 <_strtod_l+0x8d0>
 800b324:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b328:	0d1b      	lsrs	r3, r3, #20
 800b32a:	051b      	lsls	r3, r3, #20
 800b32c:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b330:	f240 8082 	bls.w	800b438 <_strtod_l+0x8d0>
 800b334:	6973      	ldr	r3, [r6, #20]
 800b336:	b913      	cbnz	r3, 800b33e <_strtod_l+0x7d6>
 800b338:	6933      	ldr	r3, [r6, #16]
 800b33a:	2b01      	cmp	r3, #1
 800b33c:	dd7c      	ble.n	800b438 <_strtod_l+0x8d0>
 800b33e:	4631      	mov	r1, r6
 800b340:	2201      	movs	r2, #1
 800b342:	4620      	mov	r0, r4
 800b344:	f003 fc64 	bl	800ec10 <__lshift>
 800b348:	4659      	mov	r1, fp
 800b34a:	4606      	mov	r6, r0
 800b34c:	f003 fccc 	bl	800ece8 <__mcmp>
 800b350:	2800      	cmp	r0, #0
 800b352:	dd71      	ble.n	800b438 <_strtod_l+0x8d0>
 800b354:	9905      	ldr	r1, [sp, #20]
 800b356:	464b      	mov	r3, r9
 800b358:	4a21      	ldr	r2, [pc, #132]	; (800b3e0 <_strtod_l+0x878>)
 800b35a:	2900      	cmp	r1, #0
 800b35c:	f000 808d 	beq.w	800b47a <_strtod_l+0x912>
 800b360:	ea02 0109 	and.w	r1, r2, r9
 800b364:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b368:	f300 8087 	bgt.w	800b47a <_strtod_l+0x912>
 800b36c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b370:	f77f aea9 	ble.w	800b0c6 <_strtod_l+0x55e>
 800b374:	4640      	mov	r0, r8
 800b376:	4649      	mov	r1, r9
 800b378:	4b1a      	ldr	r3, [pc, #104]	; (800b3e4 <_strtod_l+0x87c>)
 800b37a:	2200      	movs	r2, #0
 800b37c:	f7f5 f926 	bl	80005cc <__aeabi_dmul>
 800b380:	4b17      	ldr	r3, [pc, #92]	; (800b3e0 <_strtod_l+0x878>)
 800b382:	4680      	mov	r8, r0
 800b384:	400b      	ands	r3, r1
 800b386:	4689      	mov	r9, r1
 800b388:	2b00      	cmp	r3, #0
 800b38a:	f47f ae35 	bne.w	800aff8 <_strtod_l+0x490>
 800b38e:	2322      	movs	r3, #34	; 0x22
 800b390:	6023      	str	r3, [r4, #0]
 800b392:	e631      	b.n	800aff8 <_strtod_l+0x490>
 800b394:	f04f 32ff 	mov.w	r2, #4294967295
 800b398:	fa02 f303 	lsl.w	r3, r2, r3
 800b39c:	ea03 0808 	and.w	r8, r3, r8
 800b3a0:	e6de      	b.n	800b160 <_strtod_l+0x5f8>
 800b3a2:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800b3a6:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800b3aa:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800b3ae:	37e2      	adds	r7, #226	; 0xe2
 800b3b0:	fa01 f307 	lsl.w	r3, r1, r7
 800b3b4:	9310      	str	r3, [sp, #64]	; 0x40
 800b3b6:	9113      	str	r1, [sp, #76]	; 0x4c
 800b3b8:	e745      	b.n	800b246 <_strtod_l+0x6de>
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	9310      	str	r3, [sp, #64]	; 0x40
 800b3be:	2301      	movs	r3, #1
 800b3c0:	9313      	str	r3, [sp, #76]	; 0x4c
 800b3c2:	e740      	b.n	800b246 <_strtod_l+0x6de>
 800b3c4:	463a      	mov	r2, r7
 800b3c6:	4620      	mov	r0, r4
 800b3c8:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b3ca:	f003 fc21 	bl	800ec10 <__lshift>
 800b3ce:	901a      	str	r0, [sp, #104]	; 0x68
 800b3d0:	2800      	cmp	r0, #0
 800b3d2:	f47f af68 	bne.w	800b2a6 <_strtod_l+0x73e>
 800b3d6:	e605      	b.n	800afe4 <_strtod_l+0x47c>
 800b3d8:	08010740 	.word	0x08010740
 800b3dc:	fffffc02 	.word	0xfffffc02
 800b3e0:	7ff00000 	.word	0x7ff00000
 800b3e4:	39500000 	.word	0x39500000
 800b3e8:	46ca      	mov	sl, r9
 800b3ea:	d165      	bne.n	800b4b8 <_strtod_l+0x950>
 800b3ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3ee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b3f2:	b352      	cbz	r2, 800b44a <_strtod_l+0x8e2>
 800b3f4:	4a9e      	ldr	r2, [pc, #632]	; (800b670 <_strtod_l+0xb08>)
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d12a      	bne.n	800b450 <_strtod_l+0x8e8>
 800b3fa:	9b05      	ldr	r3, [sp, #20]
 800b3fc:	4641      	mov	r1, r8
 800b3fe:	b1fb      	cbz	r3, 800b440 <_strtod_l+0x8d8>
 800b400:	4b9c      	ldr	r3, [pc, #624]	; (800b674 <_strtod_l+0xb0c>)
 800b402:	f04f 32ff 	mov.w	r2, #4294967295
 800b406:	ea09 0303 	and.w	r3, r9, r3
 800b40a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b40e:	d81a      	bhi.n	800b446 <_strtod_l+0x8de>
 800b410:	0d1b      	lsrs	r3, r3, #20
 800b412:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b416:	fa02 f303 	lsl.w	r3, r2, r3
 800b41a:	4299      	cmp	r1, r3
 800b41c:	d118      	bne.n	800b450 <_strtod_l+0x8e8>
 800b41e:	4b96      	ldr	r3, [pc, #600]	; (800b678 <_strtod_l+0xb10>)
 800b420:	459a      	cmp	sl, r3
 800b422:	d102      	bne.n	800b42a <_strtod_l+0x8c2>
 800b424:	3101      	adds	r1, #1
 800b426:	f43f addd 	beq.w	800afe4 <_strtod_l+0x47c>
 800b42a:	f04f 0800 	mov.w	r8, #0
 800b42e:	4b91      	ldr	r3, [pc, #580]	; (800b674 <_strtod_l+0xb0c>)
 800b430:	ea0a 0303 	and.w	r3, sl, r3
 800b434:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b438:	9b05      	ldr	r3, [sp, #20]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d19a      	bne.n	800b374 <_strtod_l+0x80c>
 800b43e:	e5db      	b.n	800aff8 <_strtod_l+0x490>
 800b440:	f04f 33ff 	mov.w	r3, #4294967295
 800b444:	e7e9      	b.n	800b41a <_strtod_l+0x8b2>
 800b446:	4613      	mov	r3, r2
 800b448:	e7e7      	b.n	800b41a <_strtod_l+0x8b2>
 800b44a:	ea53 0308 	orrs.w	r3, r3, r8
 800b44e:	d081      	beq.n	800b354 <_strtod_l+0x7ec>
 800b450:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b452:	b1e3      	cbz	r3, 800b48e <_strtod_l+0x926>
 800b454:	ea13 0f0a 	tst.w	r3, sl
 800b458:	d0ee      	beq.n	800b438 <_strtod_l+0x8d0>
 800b45a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b45c:	4640      	mov	r0, r8
 800b45e:	4649      	mov	r1, r9
 800b460:	9a05      	ldr	r2, [sp, #20]
 800b462:	b1c3      	cbz	r3, 800b496 <_strtod_l+0x92e>
 800b464:	f7ff fb5e 	bl	800ab24 <sulp>
 800b468:	4602      	mov	r2, r0
 800b46a:	460b      	mov	r3, r1
 800b46c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b46e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b470:	f7f4 fef6 	bl	8000260 <__adddf3>
 800b474:	4680      	mov	r8, r0
 800b476:	4689      	mov	r9, r1
 800b478:	e7de      	b.n	800b438 <_strtod_l+0x8d0>
 800b47a:	4013      	ands	r3, r2
 800b47c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b480:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b484:	f04f 38ff 	mov.w	r8, #4294967295
 800b488:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b48c:	e7d4      	b.n	800b438 <_strtod_l+0x8d0>
 800b48e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b490:	ea13 0f08 	tst.w	r3, r8
 800b494:	e7e0      	b.n	800b458 <_strtod_l+0x8f0>
 800b496:	f7ff fb45 	bl	800ab24 <sulp>
 800b49a:	4602      	mov	r2, r0
 800b49c:	460b      	mov	r3, r1
 800b49e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b4a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b4a2:	f7f4 fedb 	bl	800025c <__aeabi_dsub>
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	4680      	mov	r8, r0
 800b4ac:	4689      	mov	r9, r1
 800b4ae:	f7f5 faf5 	bl	8000a9c <__aeabi_dcmpeq>
 800b4b2:	2800      	cmp	r0, #0
 800b4b4:	d0c0      	beq.n	800b438 <_strtod_l+0x8d0>
 800b4b6:	e606      	b.n	800b0c6 <_strtod_l+0x55e>
 800b4b8:	4659      	mov	r1, fp
 800b4ba:	4630      	mov	r0, r6
 800b4bc:	f003 fd7a 	bl	800efb4 <__ratio>
 800b4c0:	4602      	mov	r2, r0
 800b4c2:	460b      	mov	r3, r1
 800b4c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b4ce:	f7f5 faf9 	bl	8000ac4 <__aeabi_dcmple>
 800b4d2:	2800      	cmp	r0, #0
 800b4d4:	d06f      	beq.n	800b5b6 <_strtod_l+0xa4e>
 800b4d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d17c      	bne.n	800b5d6 <_strtod_l+0xa6e>
 800b4dc:	f1b8 0f00 	cmp.w	r8, #0
 800b4e0:	d159      	bne.n	800b596 <_strtod_l+0xa2e>
 800b4e2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d17b      	bne.n	800b5e2 <_strtod_l+0xa7a>
 800b4ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	4b62      	ldr	r3, [pc, #392]	; (800b67c <_strtod_l+0xb14>)
 800b4f2:	f7f5 fadd 	bl	8000ab0 <__aeabi_dcmplt>
 800b4f6:	2800      	cmp	r0, #0
 800b4f8:	d15a      	bne.n	800b5b0 <_strtod_l+0xa48>
 800b4fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b4fe:	2200      	movs	r2, #0
 800b500:	4b5f      	ldr	r3, [pc, #380]	; (800b680 <_strtod_l+0xb18>)
 800b502:	f7f5 f863 	bl	80005cc <__aeabi_dmul>
 800b506:	4605      	mov	r5, r0
 800b508:	460f      	mov	r7, r1
 800b50a:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b50e:	9506      	str	r5, [sp, #24]
 800b510:	9307      	str	r3, [sp, #28]
 800b512:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b516:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b51a:	4b56      	ldr	r3, [pc, #344]	; (800b674 <_strtod_l+0xb0c>)
 800b51c:	4a55      	ldr	r2, [pc, #340]	; (800b674 <_strtod_l+0xb0c>)
 800b51e:	ea0a 0303 	and.w	r3, sl, r3
 800b522:	9313      	str	r3, [sp, #76]	; 0x4c
 800b524:	4b57      	ldr	r3, [pc, #348]	; (800b684 <_strtod_l+0xb1c>)
 800b526:	ea0a 0202 	and.w	r2, sl, r2
 800b52a:	429a      	cmp	r2, r3
 800b52c:	f040 80b0 	bne.w	800b690 <_strtod_l+0xb28>
 800b530:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b534:	4640      	mov	r0, r8
 800b536:	4649      	mov	r1, r9
 800b538:	f003 fc7e 	bl	800ee38 <__ulp>
 800b53c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b540:	f7f5 f844 	bl	80005cc <__aeabi_dmul>
 800b544:	4642      	mov	r2, r8
 800b546:	464b      	mov	r3, r9
 800b548:	f7f4 fe8a 	bl	8000260 <__adddf3>
 800b54c:	f8df a124 	ldr.w	sl, [pc, #292]	; 800b674 <_strtod_l+0xb0c>
 800b550:	4a4d      	ldr	r2, [pc, #308]	; (800b688 <_strtod_l+0xb20>)
 800b552:	ea01 0a0a 	and.w	sl, r1, sl
 800b556:	4592      	cmp	sl, r2
 800b558:	4680      	mov	r8, r0
 800b55a:	d948      	bls.n	800b5ee <_strtod_l+0xa86>
 800b55c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b55e:	4b46      	ldr	r3, [pc, #280]	; (800b678 <_strtod_l+0xb10>)
 800b560:	429a      	cmp	r2, r3
 800b562:	d103      	bne.n	800b56c <_strtod_l+0xa04>
 800b564:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b566:	3301      	adds	r3, #1
 800b568:	f43f ad3c 	beq.w	800afe4 <_strtod_l+0x47c>
 800b56c:	f04f 38ff 	mov.w	r8, #4294967295
 800b570:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800b678 <_strtod_l+0xb10>
 800b574:	4620      	mov	r0, r4
 800b576:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b578:	f003 f932 	bl	800e7e0 <_Bfree>
 800b57c:	4620      	mov	r0, r4
 800b57e:	9908      	ldr	r1, [sp, #32]
 800b580:	f003 f92e 	bl	800e7e0 <_Bfree>
 800b584:	4659      	mov	r1, fp
 800b586:	4620      	mov	r0, r4
 800b588:	f003 f92a 	bl	800e7e0 <_Bfree>
 800b58c:	4631      	mov	r1, r6
 800b58e:	4620      	mov	r0, r4
 800b590:	f003 f926 	bl	800e7e0 <_Bfree>
 800b594:	e605      	b.n	800b1a2 <_strtod_l+0x63a>
 800b596:	f1b8 0f01 	cmp.w	r8, #1
 800b59a:	d103      	bne.n	800b5a4 <_strtod_l+0xa3c>
 800b59c:	f1b9 0f00 	cmp.w	r9, #0
 800b5a0:	f43f ad91 	beq.w	800b0c6 <_strtod_l+0x55e>
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	4b39      	ldr	r3, [pc, #228]	; (800b68c <_strtod_l+0xb24>)
 800b5a8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b5aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b5ae:	e016      	b.n	800b5de <_strtod_l+0xa76>
 800b5b0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b5b2:	4f33      	ldr	r7, [pc, #204]	; (800b680 <_strtod_l+0xb18>)
 800b5b4:	e7a9      	b.n	800b50a <_strtod_l+0x9a2>
 800b5b6:	4b32      	ldr	r3, [pc, #200]	; (800b680 <_strtod_l+0xb18>)
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b5be:	f7f5 f805 	bl	80005cc <__aeabi_dmul>
 800b5c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b5c4:	4605      	mov	r5, r0
 800b5c6:	460f      	mov	r7, r1
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d09e      	beq.n	800b50a <_strtod_l+0x9a2>
 800b5cc:	4602      	mov	r2, r0
 800b5ce:	460b      	mov	r3, r1
 800b5d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b5d4:	e79d      	b.n	800b512 <_strtod_l+0x9aa>
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	4b28      	ldr	r3, [pc, #160]	; (800b67c <_strtod_l+0xb14>)
 800b5da:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b5de:	4f27      	ldr	r7, [pc, #156]	; (800b67c <_strtod_l+0xb14>)
 800b5e0:	e797      	b.n	800b512 <_strtod_l+0x9aa>
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	4b29      	ldr	r3, [pc, #164]	; (800b68c <_strtod_l+0xb24>)
 800b5e6:	4645      	mov	r5, r8
 800b5e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b5ec:	e7f7      	b.n	800b5de <_strtod_l+0xa76>
 800b5ee:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800b5f2:	9b05      	ldr	r3, [sp, #20]
 800b5f4:	46ca      	mov	sl, r9
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d1bc      	bne.n	800b574 <_strtod_l+0xa0c>
 800b5fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b5fe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b600:	0d1b      	lsrs	r3, r3, #20
 800b602:	051b      	lsls	r3, r3, #20
 800b604:	429a      	cmp	r2, r3
 800b606:	d1b5      	bne.n	800b574 <_strtod_l+0xa0c>
 800b608:	4628      	mov	r0, r5
 800b60a:	4639      	mov	r1, r7
 800b60c:	f7f5 fe10 	bl	8001230 <__aeabi_d2lz>
 800b610:	f7f4 ffae 	bl	8000570 <__aeabi_l2d>
 800b614:	4602      	mov	r2, r0
 800b616:	460b      	mov	r3, r1
 800b618:	4628      	mov	r0, r5
 800b61a:	4639      	mov	r1, r7
 800b61c:	f7f4 fe1e 	bl	800025c <__aeabi_dsub>
 800b620:	460b      	mov	r3, r1
 800b622:	4602      	mov	r2, r0
 800b624:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 800b628:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b62c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b62e:	ea4a 0a08 	orr.w	sl, sl, r8
 800b632:	ea5a 0a03 	orrs.w	sl, sl, r3
 800b636:	d06c      	beq.n	800b712 <_strtod_l+0xbaa>
 800b638:	a309      	add	r3, pc, #36	; (adr r3, 800b660 <_strtod_l+0xaf8>)
 800b63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63e:	f7f5 fa37 	bl	8000ab0 <__aeabi_dcmplt>
 800b642:	2800      	cmp	r0, #0
 800b644:	f47f acd8 	bne.w	800aff8 <_strtod_l+0x490>
 800b648:	a307      	add	r3, pc, #28	; (adr r3, 800b668 <_strtod_l+0xb00>)
 800b64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b64e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b652:	f7f5 fa4b 	bl	8000aec <__aeabi_dcmpgt>
 800b656:	2800      	cmp	r0, #0
 800b658:	d08c      	beq.n	800b574 <_strtod_l+0xa0c>
 800b65a:	e4cd      	b.n	800aff8 <_strtod_l+0x490>
 800b65c:	f3af 8000 	nop.w
 800b660:	94a03595 	.word	0x94a03595
 800b664:	3fdfffff 	.word	0x3fdfffff
 800b668:	35afe535 	.word	0x35afe535
 800b66c:	3fe00000 	.word	0x3fe00000
 800b670:	000fffff 	.word	0x000fffff
 800b674:	7ff00000 	.word	0x7ff00000
 800b678:	7fefffff 	.word	0x7fefffff
 800b67c:	3ff00000 	.word	0x3ff00000
 800b680:	3fe00000 	.word	0x3fe00000
 800b684:	7fe00000 	.word	0x7fe00000
 800b688:	7c9fffff 	.word	0x7c9fffff
 800b68c:	bff00000 	.word	0xbff00000
 800b690:	9b05      	ldr	r3, [sp, #20]
 800b692:	b333      	cbz	r3, 800b6e2 <_strtod_l+0xb7a>
 800b694:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b696:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b69a:	d822      	bhi.n	800b6e2 <_strtod_l+0xb7a>
 800b69c:	a328      	add	r3, pc, #160	; (adr r3, 800b740 <_strtod_l+0xbd8>)
 800b69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a2:	4628      	mov	r0, r5
 800b6a4:	4639      	mov	r1, r7
 800b6a6:	f7f5 fa0d 	bl	8000ac4 <__aeabi_dcmple>
 800b6aa:	b1a0      	cbz	r0, 800b6d6 <_strtod_l+0xb6e>
 800b6ac:	4639      	mov	r1, r7
 800b6ae:	4628      	mov	r0, r5
 800b6b0:	f7f5 fa64 	bl	8000b7c <__aeabi_d2uiz>
 800b6b4:	2801      	cmp	r0, #1
 800b6b6:	bf38      	it	cc
 800b6b8:	2001      	movcc	r0, #1
 800b6ba:	f7f4 ff0d 	bl	80004d8 <__aeabi_ui2d>
 800b6be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6c0:	4605      	mov	r5, r0
 800b6c2:	460f      	mov	r7, r1
 800b6c4:	bb03      	cbnz	r3, 800b708 <_strtod_l+0xba0>
 800b6c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b6ca:	9014      	str	r0, [sp, #80]	; 0x50
 800b6cc:	9315      	str	r3, [sp, #84]	; 0x54
 800b6ce:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b6d2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800b6d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b6d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b6da:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b6de:	1a9b      	subs	r3, r3, r2
 800b6e0:	9311      	str	r3, [sp, #68]	; 0x44
 800b6e2:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b6e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b6e6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800b6ea:	f003 fba5 	bl	800ee38 <__ulp>
 800b6ee:	4602      	mov	r2, r0
 800b6f0:	460b      	mov	r3, r1
 800b6f2:	4640      	mov	r0, r8
 800b6f4:	4649      	mov	r1, r9
 800b6f6:	f7f4 ff69 	bl	80005cc <__aeabi_dmul>
 800b6fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b6fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b6fe:	f7f4 fdaf 	bl	8000260 <__adddf3>
 800b702:	4680      	mov	r8, r0
 800b704:	4689      	mov	r9, r1
 800b706:	e774      	b.n	800b5f2 <_strtod_l+0xa8a>
 800b708:	4602      	mov	r2, r0
 800b70a:	460b      	mov	r3, r1
 800b70c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800b710:	e7dd      	b.n	800b6ce <_strtod_l+0xb66>
 800b712:	a30d      	add	r3, pc, #52	; (adr r3, 800b748 <_strtod_l+0xbe0>)
 800b714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b718:	f7f5 f9ca 	bl	8000ab0 <__aeabi_dcmplt>
 800b71c:	e79b      	b.n	800b656 <_strtod_l+0xaee>
 800b71e:	2300      	movs	r3, #0
 800b720:	930e      	str	r3, [sp, #56]	; 0x38
 800b722:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b724:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b726:	6013      	str	r3, [r2, #0]
 800b728:	f7ff ba5b 	b.w	800abe2 <_strtod_l+0x7a>
 800b72c:	2a65      	cmp	r2, #101	; 0x65
 800b72e:	f43f ab52 	beq.w	800add6 <_strtod_l+0x26e>
 800b732:	2a45      	cmp	r2, #69	; 0x45
 800b734:	f43f ab4f 	beq.w	800add6 <_strtod_l+0x26e>
 800b738:	2301      	movs	r3, #1
 800b73a:	f7ff bb87 	b.w	800ae4c <_strtod_l+0x2e4>
 800b73e:	bf00      	nop
 800b740:	ffc00000 	.word	0xffc00000
 800b744:	41dfffff 	.word	0x41dfffff
 800b748:	94a03595 	.word	0x94a03595
 800b74c:	3fcfffff 	.word	0x3fcfffff

0800b750 <strtof>:
 800b750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b754:	4f24      	ldr	r7, [pc, #144]	; (800b7e8 <strtof+0x98>)
 800b756:	460a      	mov	r2, r1
 800b758:	4b24      	ldr	r3, [pc, #144]	; (800b7ec <strtof+0x9c>)
 800b75a:	4601      	mov	r1, r0
 800b75c:	6838      	ldr	r0, [r7, #0]
 800b75e:	f7ff fa03 	bl	800ab68 <_strtod_l>
 800b762:	4602      	mov	r2, r0
 800b764:	460b      	mov	r3, r1
 800b766:	4606      	mov	r6, r0
 800b768:	460c      	mov	r4, r1
 800b76a:	f7f5 f9c9 	bl	8000b00 <__aeabi_dcmpun>
 800b76e:	b168      	cbz	r0, 800b78c <strtof+0x3c>
 800b770:	2c00      	cmp	r4, #0
 800b772:	481f      	ldr	r0, [pc, #124]	; (800b7f0 <strtof+0xa0>)
 800b774:	da06      	bge.n	800b784 <strtof+0x34>
 800b776:	f001 fd55 	bl	800d224 <nanf>
 800b77a:	f100 4500 	add.w	r5, r0, #2147483648	; 0x80000000
 800b77e:	4628      	mov	r0, r5
 800b780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b784:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b788:	f001 bd4c 	b.w	800d224 <nanf>
 800b78c:	4621      	mov	r1, r4
 800b78e:	4630      	mov	r0, r6
 800b790:	f7f5 fa14 	bl	8000bbc <__aeabi_d2f>
 800b794:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800b798:	4605      	mov	r5, r0
 800b79a:	4916      	ldr	r1, [pc, #88]	; (800b7f4 <strtof+0xa4>)
 800b79c:	4640      	mov	r0, r8
 800b79e:	f7f5 fd31 	bl	8001204 <__aeabi_fcmpun>
 800b7a2:	b9b0      	cbnz	r0, 800b7d2 <strtof+0x82>
 800b7a4:	4640      	mov	r0, r8
 800b7a6:	4913      	ldr	r1, [pc, #76]	; (800b7f4 <strtof+0xa4>)
 800b7a8:	f7f5 fd0e 	bl	80011c8 <__aeabi_fcmple>
 800b7ac:	b988      	cbnz	r0, 800b7d2 <strtof+0x82>
 800b7ae:	f024 4800 	bic.w	r8, r4, #2147483648	; 0x80000000
 800b7b2:	f04f 32ff 	mov.w	r2, #4294967295
 800b7b6:	4630      	mov	r0, r6
 800b7b8:	4641      	mov	r1, r8
 800b7ba:	4b0f      	ldr	r3, [pc, #60]	; (800b7f8 <strtof+0xa8>)
 800b7bc:	f7f5 f9a0 	bl	8000b00 <__aeabi_dcmpun>
 800b7c0:	b970      	cbnz	r0, 800b7e0 <strtof+0x90>
 800b7c2:	f04f 32ff 	mov.w	r2, #4294967295
 800b7c6:	4630      	mov	r0, r6
 800b7c8:	4641      	mov	r1, r8
 800b7ca:	4b0b      	ldr	r3, [pc, #44]	; (800b7f8 <strtof+0xa8>)
 800b7cc:	f7f5 f97a 	bl	8000ac4 <__aeabi_dcmple>
 800b7d0:	b930      	cbnz	r0, 800b7e0 <strtof+0x90>
 800b7d2:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 800b7d6:	d1d2      	bne.n	800b77e <strtof+0x2e>
 800b7d8:	4b08      	ldr	r3, [pc, #32]	; (800b7fc <strtof+0xac>)
 800b7da:	4023      	ands	r3, r4
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d0ce      	beq.n	800b77e <strtof+0x2e>
 800b7e0:	2222      	movs	r2, #34	; 0x22
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	601a      	str	r2, [r3, #0]
 800b7e6:	e7ca      	b.n	800b77e <strtof+0x2e>
 800b7e8:	200001e0 	.word	0x200001e0
 800b7ec:	20000028 	.word	0x20000028
 800b7f0:	080109fd 	.word	0x080109fd
 800b7f4:	7f7fffff 	.word	0x7f7fffff
 800b7f8:	7fefffff 	.word	0x7fefffff
 800b7fc:	7ff00000 	.word	0x7ff00000

0800b800 <_strtol_l.constprop.0>:
 800b800:	2b01      	cmp	r3, #1
 800b802:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b806:	4686      	mov	lr, r0
 800b808:	4690      	mov	r8, r2
 800b80a:	d001      	beq.n	800b810 <_strtol_l.constprop.0+0x10>
 800b80c:	2b24      	cmp	r3, #36	; 0x24
 800b80e:	d906      	bls.n	800b81e <_strtol_l.constprop.0+0x1e>
 800b810:	f001 fcae 	bl	800d170 <__errno>
 800b814:	2316      	movs	r3, #22
 800b816:	6003      	str	r3, [r0, #0]
 800b818:	2000      	movs	r0, #0
 800b81a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b81e:	460d      	mov	r5, r1
 800b820:	4835      	ldr	r0, [pc, #212]	; (800b8f8 <_strtol_l.constprop.0+0xf8>)
 800b822:	462a      	mov	r2, r5
 800b824:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b828:	5d06      	ldrb	r6, [r0, r4]
 800b82a:	f016 0608 	ands.w	r6, r6, #8
 800b82e:	d1f8      	bne.n	800b822 <_strtol_l.constprop.0+0x22>
 800b830:	2c2d      	cmp	r4, #45	; 0x2d
 800b832:	d12e      	bne.n	800b892 <_strtol_l.constprop.0+0x92>
 800b834:	2601      	movs	r6, #1
 800b836:	782c      	ldrb	r4, [r5, #0]
 800b838:	1c95      	adds	r5, r2, #2
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d057      	beq.n	800b8ee <_strtol_l.constprop.0+0xee>
 800b83e:	2b10      	cmp	r3, #16
 800b840:	d109      	bne.n	800b856 <_strtol_l.constprop.0+0x56>
 800b842:	2c30      	cmp	r4, #48	; 0x30
 800b844:	d107      	bne.n	800b856 <_strtol_l.constprop.0+0x56>
 800b846:	782a      	ldrb	r2, [r5, #0]
 800b848:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b84c:	2a58      	cmp	r2, #88	; 0x58
 800b84e:	d149      	bne.n	800b8e4 <_strtol_l.constprop.0+0xe4>
 800b850:	2310      	movs	r3, #16
 800b852:	786c      	ldrb	r4, [r5, #1]
 800b854:	3502      	adds	r5, #2
 800b856:	2200      	movs	r2, #0
 800b858:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800b85c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b860:	fbbc f9f3 	udiv	r9, ip, r3
 800b864:	4610      	mov	r0, r2
 800b866:	fb03 ca19 	mls	sl, r3, r9, ip
 800b86a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b86e:	2f09      	cmp	r7, #9
 800b870:	d814      	bhi.n	800b89c <_strtol_l.constprop.0+0x9c>
 800b872:	463c      	mov	r4, r7
 800b874:	42a3      	cmp	r3, r4
 800b876:	dd20      	ble.n	800b8ba <_strtol_l.constprop.0+0xba>
 800b878:	1c57      	adds	r7, r2, #1
 800b87a:	d007      	beq.n	800b88c <_strtol_l.constprop.0+0x8c>
 800b87c:	4581      	cmp	r9, r0
 800b87e:	d319      	bcc.n	800b8b4 <_strtol_l.constprop.0+0xb4>
 800b880:	d101      	bne.n	800b886 <_strtol_l.constprop.0+0x86>
 800b882:	45a2      	cmp	sl, r4
 800b884:	db16      	blt.n	800b8b4 <_strtol_l.constprop.0+0xb4>
 800b886:	2201      	movs	r2, #1
 800b888:	fb00 4003 	mla	r0, r0, r3, r4
 800b88c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b890:	e7eb      	b.n	800b86a <_strtol_l.constprop.0+0x6a>
 800b892:	2c2b      	cmp	r4, #43	; 0x2b
 800b894:	bf04      	itt	eq
 800b896:	782c      	ldrbeq	r4, [r5, #0]
 800b898:	1c95      	addeq	r5, r2, #2
 800b89a:	e7ce      	b.n	800b83a <_strtol_l.constprop.0+0x3a>
 800b89c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b8a0:	2f19      	cmp	r7, #25
 800b8a2:	d801      	bhi.n	800b8a8 <_strtol_l.constprop.0+0xa8>
 800b8a4:	3c37      	subs	r4, #55	; 0x37
 800b8a6:	e7e5      	b.n	800b874 <_strtol_l.constprop.0+0x74>
 800b8a8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b8ac:	2f19      	cmp	r7, #25
 800b8ae:	d804      	bhi.n	800b8ba <_strtol_l.constprop.0+0xba>
 800b8b0:	3c57      	subs	r4, #87	; 0x57
 800b8b2:	e7df      	b.n	800b874 <_strtol_l.constprop.0+0x74>
 800b8b4:	f04f 32ff 	mov.w	r2, #4294967295
 800b8b8:	e7e8      	b.n	800b88c <_strtol_l.constprop.0+0x8c>
 800b8ba:	1c53      	adds	r3, r2, #1
 800b8bc:	d108      	bne.n	800b8d0 <_strtol_l.constprop.0+0xd0>
 800b8be:	2322      	movs	r3, #34	; 0x22
 800b8c0:	4660      	mov	r0, ip
 800b8c2:	f8ce 3000 	str.w	r3, [lr]
 800b8c6:	f1b8 0f00 	cmp.w	r8, #0
 800b8ca:	d0a6      	beq.n	800b81a <_strtol_l.constprop.0+0x1a>
 800b8cc:	1e69      	subs	r1, r5, #1
 800b8ce:	e006      	b.n	800b8de <_strtol_l.constprop.0+0xde>
 800b8d0:	b106      	cbz	r6, 800b8d4 <_strtol_l.constprop.0+0xd4>
 800b8d2:	4240      	negs	r0, r0
 800b8d4:	f1b8 0f00 	cmp.w	r8, #0
 800b8d8:	d09f      	beq.n	800b81a <_strtol_l.constprop.0+0x1a>
 800b8da:	2a00      	cmp	r2, #0
 800b8dc:	d1f6      	bne.n	800b8cc <_strtol_l.constprop.0+0xcc>
 800b8de:	f8c8 1000 	str.w	r1, [r8]
 800b8e2:	e79a      	b.n	800b81a <_strtol_l.constprop.0+0x1a>
 800b8e4:	2430      	movs	r4, #48	; 0x30
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d1b5      	bne.n	800b856 <_strtol_l.constprop.0+0x56>
 800b8ea:	2308      	movs	r3, #8
 800b8ec:	e7b3      	b.n	800b856 <_strtol_l.constprop.0+0x56>
 800b8ee:	2c30      	cmp	r4, #48	; 0x30
 800b8f0:	d0a9      	beq.n	800b846 <_strtol_l.constprop.0+0x46>
 800b8f2:	230a      	movs	r3, #10
 800b8f4:	e7af      	b.n	800b856 <_strtol_l.constprop.0+0x56>
 800b8f6:	bf00      	nop
 800b8f8:	08010769 	.word	0x08010769

0800b8fc <_strtol_r>:
 800b8fc:	f7ff bf80 	b.w	800b800 <_strtol_l.constprop.0>

0800b900 <strtol>:
 800b900:	4613      	mov	r3, r2
 800b902:	460a      	mov	r2, r1
 800b904:	4601      	mov	r1, r0
 800b906:	4802      	ldr	r0, [pc, #8]	; (800b910 <strtol+0x10>)
 800b908:	6800      	ldr	r0, [r0, #0]
 800b90a:	f7ff bf79 	b.w	800b800 <_strtol_l.constprop.0>
 800b90e:	bf00      	nop
 800b910:	200001e0 	.word	0x200001e0

0800b914 <__cvt>:
 800b914:	2b00      	cmp	r3, #0
 800b916:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b91a:	461f      	mov	r7, r3
 800b91c:	bfbb      	ittet	lt
 800b91e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800b922:	461f      	movlt	r7, r3
 800b924:	2300      	movge	r3, #0
 800b926:	232d      	movlt	r3, #45	; 0x2d
 800b928:	b088      	sub	sp, #32
 800b92a:	4614      	mov	r4, r2
 800b92c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b92e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b930:	7013      	strb	r3, [r2, #0]
 800b932:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b934:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800b938:	f023 0820 	bic.w	r8, r3, #32
 800b93c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b940:	d005      	beq.n	800b94e <__cvt+0x3a>
 800b942:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b946:	d100      	bne.n	800b94a <__cvt+0x36>
 800b948:	3501      	adds	r5, #1
 800b94a:	2302      	movs	r3, #2
 800b94c:	e000      	b.n	800b950 <__cvt+0x3c>
 800b94e:	2303      	movs	r3, #3
 800b950:	aa07      	add	r2, sp, #28
 800b952:	9204      	str	r2, [sp, #16]
 800b954:	aa06      	add	r2, sp, #24
 800b956:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b95a:	e9cd 3500 	strd	r3, r5, [sp]
 800b95e:	4622      	mov	r2, r4
 800b960:	463b      	mov	r3, r7
 800b962:	f001 fd21 	bl	800d3a8 <_dtoa_r>
 800b966:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b96a:	4606      	mov	r6, r0
 800b96c:	d102      	bne.n	800b974 <__cvt+0x60>
 800b96e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b970:	07db      	lsls	r3, r3, #31
 800b972:	d522      	bpl.n	800b9ba <__cvt+0xa6>
 800b974:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b978:	eb06 0905 	add.w	r9, r6, r5
 800b97c:	d110      	bne.n	800b9a0 <__cvt+0x8c>
 800b97e:	7833      	ldrb	r3, [r6, #0]
 800b980:	2b30      	cmp	r3, #48	; 0x30
 800b982:	d10a      	bne.n	800b99a <__cvt+0x86>
 800b984:	2200      	movs	r2, #0
 800b986:	2300      	movs	r3, #0
 800b988:	4620      	mov	r0, r4
 800b98a:	4639      	mov	r1, r7
 800b98c:	f7f5 f886 	bl	8000a9c <__aeabi_dcmpeq>
 800b990:	b918      	cbnz	r0, 800b99a <__cvt+0x86>
 800b992:	f1c5 0501 	rsb	r5, r5, #1
 800b996:	f8ca 5000 	str.w	r5, [sl]
 800b99a:	f8da 3000 	ldr.w	r3, [sl]
 800b99e:	4499      	add	r9, r3
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	4620      	mov	r0, r4
 800b9a6:	4639      	mov	r1, r7
 800b9a8:	f7f5 f878 	bl	8000a9c <__aeabi_dcmpeq>
 800b9ac:	b108      	cbz	r0, 800b9b2 <__cvt+0x9e>
 800b9ae:	f8cd 901c 	str.w	r9, [sp, #28]
 800b9b2:	2230      	movs	r2, #48	; 0x30
 800b9b4:	9b07      	ldr	r3, [sp, #28]
 800b9b6:	454b      	cmp	r3, r9
 800b9b8:	d307      	bcc.n	800b9ca <__cvt+0xb6>
 800b9ba:	4630      	mov	r0, r6
 800b9bc:	9b07      	ldr	r3, [sp, #28]
 800b9be:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b9c0:	1b9b      	subs	r3, r3, r6
 800b9c2:	6013      	str	r3, [r2, #0]
 800b9c4:	b008      	add	sp, #32
 800b9c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9ca:	1c59      	adds	r1, r3, #1
 800b9cc:	9107      	str	r1, [sp, #28]
 800b9ce:	701a      	strb	r2, [r3, #0]
 800b9d0:	e7f0      	b.n	800b9b4 <__cvt+0xa0>

0800b9d2 <__exponent>:
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b9d6:	2900      	cmp	r1, #0
 800b9d8:	f803 2b02 	strb.w	r2, [r3], #2
 800b9dc:	bfb6      	itet	lt
 800b9de:	222d      	movlt	r2, #45	; 0x2d
 800b9e0:	222b      	movge	r2, #43	; 0x2b
 800b9e2:	4249      	neglt	r1, r1
 800b9e4:	2909      	cmp	r1, #9
 800b9e6:	7042      	strb	r2, [r0, #1]
 800b9e8:	dd2a      	ble.n	800ba40 <__exponent+0x6e>
 800b9ea:	f10d 0207 	add.w	r2, sp, #7
 800b9ee:	4617      	mov	r7, r2
 800b9f0:	260a      	movs	r6, #10
 800b9f2:	fb91 f5f6 	sdiv	r5, r1, r6
 800b9f6:	4694      	mov	ip, r2
 800b9f8:	fb06 1415 	mls	r4, r6, r5, r1
 800b9fc:	3430      	adds	r4, #48	; 0x30
 800b9fe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800ba02:	460c      	mov	r4, r1
 800ba04:	2c63      	cmp	r4, #99	; 0x63
 800ba06:	4629      	mov	r1, r5
 800ba08:	f102 32ff 	add.w	r2, r2, #4294967295
 800ba0c:	dcf1      	bgt.n	800b9f2 <__exponent+0x20>
 800ba0e:	3130      	adds	r1, #48	; 0x30
 800ba10:	f1ac 0402 	sub.w	r4, ip, #2
 800ba14:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ba18:	4622      	mov	r2, r4
 800ba1a:	1c41      	adds	r1, r0, #1
 800ba1c:	42ba      	cmp	r2, r7
 800ba1e:	d30a      	bcc.n	800ba36 <__exponent+0x64>
 800ba20:	f10d 0209 	add.w	r2, sp, #9
 800ba24:	eba2 020c 	sub.w	r2, r2, ip
 800ba28:	42bc      	cmp	r4, r7
 800ba2a:	bf88      	it	hi
 800ba2c:	2200      	movhi	r2, #0
 800ba2e:	4413      	add	r3, r2
 800ba30:	1a18      	subs	r0, r3, r0
 800ba32:	b003      	add	sp, #12
 800ba34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba36:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ba3a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800ba3e:	e7ed      	b.n	800ba1c <__exponent+0x4a>
 800ba40:	2330      	movs	r3, #48	; 0x30
 800ba42:	3130      	adds	r1, #48	; 0x30
 800ba44:	7083      	strb	r3, [r0, #2]
 800ba46:	70c1      	strb	r1, [r0, #3]
 800ba48:	1d03      	adds	r3, r0, #4
 800ba4a:	e7f1      	b.n	800ba30 <__exponent+0x5e>

0800ba4c <_printf_float>:
 800ba4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba50:	b091      	sub	sp, #68	; 0x44
 800ba52:	460c      	mov	r4, r1
 800ba54:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800ba58:	4616      	mov	r6, r2
 800ba5a:	461f      	mov	r7, r3
 800ba5c:	4605      	mov	r5, r0
 800ba5e:	f001 fad7 	bl	800d010 <_localeconv_r>
 800ba62:	6803      	ldr	r3, [r0, #0]
 800ba64:	4618      	mov	r0, r3
 800ba66:	9309      	str	r3, [sp, #36]	; 0x24
 800ba68:	f7f4 fbec 	bl	8000244 <strlen>
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	930e      	str	r3, [sp, #56]	; 0x38
 800ba70:	f8d8 3000 	ldr.w	r3, [r8]
 800ba74:	900a      	str	r0, [sp, #40]	; 0x28
 800ba76:	3307      	adds	r3, #7
 800ba78:	f023 0307 	bic.w	r3, r3, #7
 800ba7c:	f103 0208 	add.w	r2, r3, #8
 800ba80:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ba84:	f8d4 b000 	ldr.w	fp, [r4]
 800ba88:	f8c8 2000 	str.w	r2, [r8]
 800ba8c:	e9d3 a800 	ldrd	sl, r8, [r3]
 800ba90:	4652      	mov	r2, sl
 800ba92:	4643      	mov	r3, r8
 800ba94:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ba98:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 800ba9c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba9e:	f04f 32ff 	mov.w	r2, #4294967295
 800baa2:	4650      	mov	r0, sl
 800baa4:	4b9c      	ldr	r3, [pc, #624]	; (800bd18 <_printf_float+0x2cc>)
 800baa6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800baa8:	f7f5 f82a 	bl	8000b00 <__aeabi_dcmpun>
 800baac:	bb70      	cbnz	r0, 800bb0c <_printf_float+0xc0>
 800baae:	f04f 32ff 	mov.w	r2, #4294967295
 800bab2:	4650      	mov	r0, sl
 800bab4:	4b98      	ldr	r3, [pc, #608]	; (800bd18 <_printf_float+0x2cc>)
 800bab6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bab8:	f7f5 f804 	bl	8000ac4 <__aeabi_dcmple>
 800babc:	bb30      	cbnz	r0, 800bb0c <_printf_float+0xc0>
 800babe:	2200      	movs	r2, #0
 800bac0:	2300      	movs	r3, #0
 800bac2:	4650      	mov	r0, sl
 800bac4:	4641      	mov	r1, r8
 800bac6:	f7f4 fff3 	bl	8000ab0 <__aeabi_dcmplt>
 800baca:	b110      	cbz	r0, 800bad2 <_printf_float+0x86>
 800bacc:	232d      	movs	r3, #45	; 0x2d
 800bace:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bad2:	4a92      	ldr	r2, [pc, #584]	; (800bd1c <_printf_float+0x2d0>)
 800bad4:	4b92      	ldr	r3, [pc, #584]	; (800bd20 <_printf_float+0x2d4>)
 800bad6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800bada:	bf94      	ite	ls
 800badc:	4690      	movls	r8, r2
 800bade:	4698      	movhi	r8, r3
 800bae0:	2303      	movs	r3, #3
 800bae2:	f04f 0a00 	mov.w	sl, #0
 800bae6:	6123      	str	r3, [r4, #16]
 800bae8:	f02b 0304 	bic.w	r3, fp, #4
 800baec:	6023      	str	r3, [r4, #0]
 800baee:	4633      	mov	r3, r6
 800baf0:	4621      	mov	r1, r4
 800baf2:	4628      	mov	r0, r5
 800baf4:	9700      	str	r7, [sp, #0]
 800baf6:	aa0f      	add	r2, sp, #60	; 0x3c
 800baf8:	f000 f9d6 	bl	800bea8 <_printf_common>
 800bafc:	3001      	adds	r0, #1
 800bafe:	f040 8090 	bne.w	800bc22 <_printf_float+0x1d6>
 800bb02:	f04f 30ff 	mov.w	r0, #4294967295
 800bb06:	b011      	add	sp, #68	; 0x44
 800bb08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb0c:	4652      	mov	r2, sl
 800bb0e:	4643      	mov	r3, r8
 800bb10:	4650      	mov	r0, sl
 800bb12:	4641      	mov	r1, r8
 800bb14:	f7f4 fff4 	bl	8000b00 <__aeabi_dcmpun>
 800bb18:	b148      	cbz	r0, 800bb2e <_printf_float+0xe2>
 800bb1a:	f1b8 0f00 	cmp.w	r8, #0
 800bb1e:	bfb8      	it	lt
 800bb20:	232d      	movlt	r3, #45	; 0x2d
 800bb22:	4a80      	ldr	r2, [pc, #512]	; (800bd24 <_printf_float+0x2d8>)
 800bb24:	bfb8      	it	lt
 800bb26:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bb2a:	4b7f      	ldr	r3, [pc, #508]	; (800bd28 <_printf_float+0x2dc>)
 800bb2c:	e7d3      	b.n	800bad6 <_printf_float+0x8a>
 800bb2e:	6863      	ldr	r3, [r4, #4]
 800bb30:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800bb34:	1c5a      	adds	r2, r3, #1
 800bb36:	d142      	bne.n	800bbbe <_printf_float+0x172>
 800bb38:	2306      	movs	r3, #6
 800bb3a:	6063      	str	r3, [r4, #4]
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	9206      	str	r2, [sp, #24]
 800bb40:	aa0e      	add	r2, sp, #56	; 0x38
 800bb42:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800bb46:	aa0d      	add	r2, sp, #52	; 0x34
 800bb48:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800bb4c:	9203      	str	r2, [sp, #12]
 800bb4e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800bb52:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800bb56:	6023      	str	r3, [r4, #0]
 800bb58:	6863      	ldr	r3, [r4, #4]
 800bb5a:	4652      	mov	r2, sl
 800bb5c:	9300      	str	r3, [sp, #0]
 800bb5e:	4628      	mov	r0, r5
 800bb60:	4643      	mov	r3, r8
 800bb62:	910b      	str	r1, [sp, #44]	; 0x2c
 800bb64:	f7ff fed6 	bl	800b914 <__cvt>
 800bb68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bb6a:	4680      	mov	r8, r0
 800bb6c:	2947      	cmp	r1, #71	; 0x47
 800bb6e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bb70:	d108      	bne.n	800bb84 <_printf_float+0x138>
 800bb72:	1cc8      	adds	r0, r1, #3
 800bb74:	db02      	blt.n	800bb7c <_printf_float+0x130>
 800bb76:	6863      	ldr	r3, [r4, #4]
 800bb78:	4299      	cmp	r1, r3
 800bb7a:	dd40      	ble.n	800bbfe <_printf_float+0x1b2>
 800bb7c:	f1a9 0902 	sub.w	r9, r9, #2
 800bb80:	fa5f f989 	uxtb.w	r9, r9
 800bb84:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800bb88:	d81f      	bhi.n	800bbca <_printf_float+0x17e>
 800bb8a:	464a      	mov	r2, r9
 800bb8c:	3901      	subs	r1, #1
 800bb8e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bb92:	910d      	str	r1, [sp, #52]	; 0x34
 800bb94:	f7ff ff1d 	bl	800b9d2 <__exponent>
 800bb98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb9a:	4682      	mov	sl, r0
 800bb9c:	1813      	adds	r3, r2, r0
 800bb9e:	2a01      	cmp	r2, #1
 800bba0:	6123      	str	r3, [r4, #16]
 800bba2:	dc02      	bgt.n	800bbaa <_printf_float+0x15e>
 800bba4:	6822      	ldr	r2, [r4, #0]
 800bba6:	07d2      	lsls	r2, r2, #31
 800bba8:	d501      	bpl.n	800bbae <_printf_float+0x162>
 800bbaa:	3301      	adds	r3, #1
 800bbac:	6123      	str	r3, [r4, #16]
 800bbae:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d09b      	beq.n	800baee <_printf_float+0xa2>
 800bbb6:	232d      	movs	r3, #45	; 0x2d
 800bbb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbbc:	e797      	b.n	800baee <_printf_float+0xa2>
 800bbbe:	2947      	cmp	r1, #71	; 0x47
 800bbc0:	d1bc      	bne.n	800bb3c <_printf_float+0xf0>
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d1ba      	bne.n	800bb3c <_printf_float+0xf0>
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	e7b7      	b.n	800bb3a <_printf_float+0xee>
 800bbca:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800bbce:	d118      	bne.n	800bc02 <_printf_float+0x1b6>
 800bbd0:	2900      	cmp	r1, #0
 800bbd2:	6863      	ldr	r3, [r4, #4]
 800bbd4:	dd0b      	ble.n	800bbee <_printf_float+0x1a2>
 800bbd6:	6121      	str	r1, [r4, #16]
 800bbd8:	b913      	cbnz	r3, 800bbe0 <_printf_float+0x194>
 800bbda:	6822      	ldr	r2, [r4, #0]
 800bbdc:	07d0      	lsls	r0, r2, #31
 800bbde:	d502      	bpl.n	800bbe6 <_printf_float+0x19a>
 800bbe0:	3301      	adds	r3, #1
 800bbe2:	440b      	add	r3, r1
 800bbe4:	6123      	str	r3, [r4, #16]
 800bbe6:	f04f 0a00 	mov.w	sl, #0
 800bbea:	65a1      	str	r1, [r4, #88]	; 0x58
 800bbec:	e7df      	b.n	800bbae <_printf_float+0x162>
 800bbee:	b913      	cbnz	r3, 800bbf6 <_printf_float+0x1aa>
 800bbf0:	6822      	ldr	r2, [r4, #0]
 800bbf2:	07d2      	lsls	r2, r2, #31
 800bbf4:	d501      	bpl.n	800bbfa <_printf_float+0x1ae>
 800bbf6:	3302      	adds	r3, #2
 800bbf8:	e7f4      	b.n	800bbe4 <_printf_float+0x198>
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	e7f2      	b.n	800bbe4 <_printf_float+0x198>
 800bbfe:	f04f 0967 	mov.w	r9, #103	; 0x67
 800bc02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc04:	4299      	cmp	r1, r3
 800bc06:	db05      	blt.n	800bc14 <_printf_float+0x1c8>
 800bc08:	6823      	ldr	r3, [r4, #0]
 800bc0a:	6121      	str	r1, [r4, #16]
 800bc0c:	07d8      	lsls	r0, r3, #31
 800bc0e:	d5ea      	bpl.n	800bbe6 <_printf_float+0x19a>
 800bc10:	1c4b      	adds	r3, r1, #1
 800bc12:	e7e7      	b.n	800bbe4 <_printf_float+0x198>
 800bc14:	2900      	cmp	r1, #0
 800bc16:	bfcc      	ite	gt
 800bc18:	2201      	movgt	r2, #1
 800bc1a:	f1c1 0202 	rsble	r2, r1, #2
 800bc1e:	4413      	add	r3, r2
 800bc20:	e7e0      	b.n	800bbe4 <_printf_float+0x198>
 800bc22:	6823      	ldr	r3, [r4, #0]
 800bc24:	055a      	lsls	r2, r3, #21
 800bc26:	d407      	bmi.n	800bc38 <_printf_float+0x1ec>
 800bc28:	6923      	ldr	r3, [r4, #16]
 800bc2a:	4642      	mov	r2, r8
 800bc2c:	4631      	mov	r1, r6
 800bc2e:	4628      	mov	r0, r5
 800bc30:	47b8      	blx	r7
 800bc32:	3001      	adds	r0, #1
 800bc34:	d12b      	bne.n	800bc8e <_printf_float+0x242>
 800bc36:	e764      	b.n	800bb02 <_printf_float+0xb6>
 800bc38:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800bc3c:	f240 80dd 	bls.w	800bdfa <_printf_float+0x3ae>
 800bc40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bc44:	2200      	movs	r2, #0
 800bc46:	2300      	movs	r3, #0
 800bc48:	f7f4 ff28 	bl	8000a9c <__aeabi_dcmpeq>
 800bc4c:	2800      	cmp	r0, #0
 800bc4e:	d033      	beq.n	800bcb8 <_printf_float+0x26c>
 800bc50:	2301      	movs	r3, #1
 800bc52:	4631      	mov	r1, r6
 800bc54:	4628      	mov	r0, r5
 800bc56:	4a35      	ldr	r2, [pc, #212]	; (800bd2c <_printf_float+0x2e0>)
 800bc58:	47b8      	blx	r7
 800bc5a:	3001      	adds	r0, #1
 800bc5c:	f43f af51 	beq.w	800bb02 <_printf_float+0xb6>
 800bc60:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800bc64:	429a      	cmp	r2, r3
 800bc66:	db02      	blt.n	800bc6e <_printf_float+0x222>
 800bc68:	6823      	ldr	r3, [r4, #0]
 800bc6a:	07d8      	lsls	r0, r3, #31
 800bc6c:	d50f      	bpl.n	800bc8e <_printf_float+0x242>
 800bc6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc72:	4631      	mov	r1, r6
 800bc74:	4628      	mov	r0, r5
 800bc76:	47b8      	blx	r7
 800bc78:	3001      	adds	r0, #1
 800bc7a:	f43f af42 	beq.w	800bb02 <_printf_float+0xb6>
 800bc7e:	f04f 0800 	mov.w	r8, #0
 800bc82:	f104 091a 	add.w	r9, r4, #26
 800bc86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc88:	3b01      	subs	r3, #1
 800bc8a:	4543      	cmp	r3, r8
 800bc8c:	dc09      	bgt.n	800bca2 <_printf_float+0x256>
 800bc8e:	6823      	ldr	r3, [r4, #0]
 800bc90:	079b      	lsls	r3, r3, #30
 800bc92:	f100 8104 	bmi.w	800be9e <_printf_float+0x452>
 800bc96:	68e0      	ldr	r0, [r4, #12]
 800bc98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc9a:	4298      	cmp	r0, r3
 800bc9c:	bfb8      	it	lt
 800bc9e:	4618      	movlt	r0, r3
 800bca0:	e731      	b.n	800bb06 <_printf_float+0xba>
 800bca2:	2301      	movs	r3, #1
 800bca4:	464a      	mov	r2, r9
 800bca6:	4631      	mov	r1, r6
 800bca8:	4628      	mov	r0, r5
 800bcaa:	47b8      	blx	r7
 800bcac:	3001      	adds	r0, #1
 800bcae:	f43f af28 	beq.w	800bb02 <_printf_float+0xb6>
 800bcb2:	f108 0801 	add.w	r8, r8, #1
 800bcb6:	e7e6      	b.n	800bc86 <_printf_float+0x23a>
 800bcb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	dc38      	bgt.n	800bd30 <_printf_float+0x2e4>
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	4631      	mov	r1, r6
 800bcc2:	4628      	mov	r0, r5
 800bcc4:	4a19      	ldr	r2, [pc, #100]	; (800bd2c <_printf_float+0x2e0>)
 800bcc6:	47b8      	blx	r7
 800bcc8:	3001      	adds	r0, #1
 800bcca:	f43f af1a 	beq.w	800bb02 <_printf_float+0xb6>
 800bcce:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800bcd2:	4313      	orrs	r3, r2
 800bcd4:	d102      	bne.n	800bcdc <_printf_float+0x290>
 800bcd6:	6823      	ldr	r3, [r4, #0]
 800bcd8:	07d9      	lsls	r1, r3, #31
 800bcda:	d5d8      	bpl.n	800bc8e <_printf_float+0x242>
 800bcdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bce0:	4631      	mov	r1, r6
 800bce2:	4628      	mov	r0, r5
 800bce4:	47b8      	blx	r7
 800bce6:	3001      	adds	r0, #1
 800bce8:	f43f af0b 	beq.w	800bb02 <_printf_float+0xb6>
 800bcec:	f04f 0900 	mov.w	r9, #0
 800bcf0:	f104 0a1a 	add.w	sl, r4, #26
 800bcf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcf6:	425b      	negs	r3, r3
 800bcf8:	454b      	cmp	r3, r9
 800bcfa:	dc01      	bgt.n	800bd00 <_printf_float+0x2b4>
 800bcfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bcfe:	e794      	b.n	800bc2a <_printf_float+0x1de>
 800bd00:	2301      	movs	r3, #1
 800bd02:	4652      	mov	r2, sl
 800bd04:	4631      	mov	r1, r6
 800bd06:	4628      	mov	r0, r5
 800bd08:	47b8      	blx	r7
 800bd0a:	3001      	adds	r0, #1
 800bd0c:	f43f aef9 	beq.w	800bb02 <_printf_float+0xb6>
 800bd10:	f109 0901 	add.w	r9, r9, #1
 800bd14:	e7ee      	b.n	800bcf4 <_printf_float+0x2a8>
 800bd16:	bf00      	nop
 800bd18:	7fefffff 	.word	0x7fefffff
 800bd1c:	08010869 	.word	0x08010869
 800bd20:	0801086d 	.word	0x0801086d
 800bd24:	08010871 	.word	0x08010871
 800bd28:	08010875 	.word	0x08010875
 800bd2c:	08010cb6 	.word	0x08010cb6
 800bd30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd32:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bd34:	429a      	cmp	r2, r3
 800bd36:	bfa8      	it	ge
 800bd38:	461a      	movge	r2, r3
 800bd3a:	2a00      	cmp	r2, #0
 800bd3c:	4691      	mov	r9, r2
 800bd3e:	dc37      	bgt.n	800bdb0 <_printf_float+0x364>
 800bd40:	f04f 0b00 	mov.w	fp, #0
 800bd44:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd48:	f104 021a 	add.w	r2, r4, #26
 800bd4c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800bd50:	ebaa 0309 	sub.w	r3, sl, r9
 800bd54:	455b      	cmp	r3, fp
 800bd56:	dc33      	bgt.n	800bdc0 <_printf_float+0x374>
 800bd58:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800bd5c:	429a      	cmp	r2, r3
 800bd5e:	db3b      	blt.n	800bdd8 <_printf_float+0x38c>
 800bd60:	6823      	ldr	r3, [r4, #0]
 800bd62:	07da      	lsls	r2, r3, #31
 800bd64:	d438      	bmi.n	800bdd8 <_printf_float+0x38c>
 800bd66:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800bd6a:	eba2 0903 	sub.w	r9, r2, r3
 800bd6e:	eba2 020a 	sub.w	r2, r2, sl
 800bd72:	4591      	cmp	r9, r2
 800bd74:	bfa8      	it	ge
 800bd76:	4691      	movge	r9, r2
 800bd78:	f1b9 0f00 	cmp.w	r9, #0
 800bd7c:	dc34      	bgt.n	800bde8 <_printf_float+0x39c>
 800bd7e:	f04f 0800 	mov.w	r8, #0
 800bd82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd86:	f104 0a1a 	add.w	sl, r4, #26
 800bd8a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800bd8e:	1a9b      	subs	r3, r3, r2
 800bd90:	eba3 0309 	sub.w	r3, r3, r9
 800bd94:	4543      	cmp	r3, r8
 800bd96:	f77f af7a 	ble.w	800bc8e <_printf_float+0x242>
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	4652      	mov	r2, sl
 800bd9e:	4631      	mov	r1, r6
 800bda0:	4628      	mov	r0, r5
 800bda2:	47b8      	blx	r7
 800bda4:	3001      	adds	r0, #1
 800bda6:	f43f aeac 	beq.w	800bb02 <_printf_float+0xb6>
 800bdaa:	f108 0801 	add.w	r8, r8, #1
 800bdae:	e7ec      	b.n	800bd8a <_printf_float+0x33e>
 800bdb0:	4613      	mov	r3, r2
 800bdb2:	4631      	mov	r1, r6
 800bdb4:	4642      	mov	r2, r8
 800bdb6:	4628      	mov	r0, r5
 800bdb8:	47b8      	blx	r7
 800bdba:	3001      	adds	r0, #1
 800bdbc:	d1c0      	bne.n	800bd40 <_printf_float+0x2f4>
 800bdbe:	e6a0      	b.n	800bb02 <_printf_float+0xb6>
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	4631      	mov	r1, r6
 800bdc4:	4628      	mov	r0, r5
 800bdc6:	920b      	str	r2, [sp, #44]	; 0x2c
 800bdc8:	47b8      	blx	r7
 800bdca:	3001      	adds	r0, #1
 800bdcc:	f43f ae99 	beq.w	800bb02 <_printf_float+0xb6>
 800bdd0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bdd2:	f10b 0b01 	add.w	fp, fp, #1
 800bdd6:	e7b9      	b.n	800bd4c <_printf_float+0x300>
 800bdd8:	4631      	mov	r1, r6
 800bdda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bdde:	4628      	mov	r0, r5
 800bde0:	47b8      	blx	r7
 800bde2:	3001      	adds	r0, #1
 800bde4:	d1bf      	bne.n	800bd66 <_printf_float+0x31a>
 800bde6:	e68c      	b.n	800bb02 <_printf_float+0xb6>
 800bde8:	464b      	mov	r3, r9
 800bdea:	4631      	mov	r1, r6
 800bdec:	4628      	mov	r0, r5
 800bdee:	eb08 020a 	add.w	r2, r8, sl
 800bdf2:	47b8      	blx	r7
 800bdf4:	3001      	adds	r0, #1
 800bdf6:	d1c2      	bne.n	800bd7e <_printf_float+0x332>
 800bdf8:	e683      	b.n	800bb02 <_printf_float+0xb6>
 800bdfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bdfc:	2a01      	cmp	r2, #1
 800bdfe:	dc01      	bgt.n	800be04 <_printf_float+0x3b8>
 800be00:	07db      	lsls	r3, r3, #31
 800be02:	d539      	bpl.n	800be78 <_printf_float+0x42c>
 800be04:	2301      	movs	r3, #1
 800be06:	4642      	mov	r2, r8
 800be08:	4631      	mov	r1, r6
 800be0a:	4628      	mov	r0, r5
 800be0c:	47b8      	blx	r7
 800be0e:	3001      	adds	r0, #1
 800be10:	f43f ae77 	beq.w	800bb02 <_printf_float+0xb6>
 800be14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be18:	4631      	mov	r1, r6
 800be1a:	4628      	mov	r0, r5
 800be1c:	47b8      	blx	r7
 800be1e:	3001      	adds	r0, #1
 800be20:	f43f ae6f 	beq.w	800bb02 <_printf_float+0xb6>
 800be24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800be28:	2200      	movs	r2, #0
 800be2a:	2300      	movs	r3, #0
 800be2c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800be30:	f7f4 fe34 	bl	8000a9c <__aeabi_dcmpeq>
 800be34:	b9d8      	cbnz	r0, 800be6e <_printf_float+0x422>
 800be36:	f109 33ff 	add.w	r3, r9, #4294967295
 800be3a:	f108 0201 	add.w	r2, r8, #1
 800be3e:	4631      	mov	r1, r6
 800be40:	4628      	mov	r0, r5
 800be42:	47b8      	blx	r7
 800be44:	3001      	adds	r0, #1
 800be46:	d10e      	bne.n	800be66 <_printf_float+0x41a>
 800be48:	e65b      	b.n	800bb02 <_printf_float+0xb6>
 800be4a:	2301      	movs	r3, #1
 800be4c:	464a      	mov	r2, r9
 800be4e:	4631      	mov	r1, r6
 800be50:	4628      	mov	r0, r5
 800be52:	47b8      	blx	r7
 800be54:	3001      	adds	r0, #1
 800be56:	f43f ae54 	beq.w	800bb02 <_printf_float+0xb6>
 800be5a:	f108 0801 	add.w	r8, r8, #1
 800be5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800be60:	3b01      	subs	r3, #1
 800be62:	4543      	cmp	r3, r8
 800be64:	dcf1      	bgt.n	800be4a <_printf_float+0x3fe>
 800be66:	4653      	mov	r3, sl
 800be68:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800be6c:	e6de      	b.n	800bc2c <_printf_float+0x1e0>
 800be6e:	f04f 0800 	mov.w	r8, #0
 800be72:	f104 091a 	add.w	r9, r4, #26
 800be76:	e7f2      	b.n	800be5e <_printf_float+0x412>
 800be78:	2301      	movs	r3, #1
 800be7a:	4642      	mov	r2, r8
 800be7c:	e7df      	b.n	800be3e <_printf_float+0x3f2>
 800be7e:	2301      	movs	r3, #1
 800be80:	464a      	mov	r2, r9
 800be82:	4631      	mov	r1, r6
 800be84:	4628      	mov	r0, r5
 800be86:	47b8      	blx	r7
 800be88:	3001      	adds	r0, #1
 800be8a:	f43f ae3a 	beq.w	800bb02 <_printf_float+0xb6>
 800be8e:	f108 0801 	add.w	r8, r8, #1
 800be92:	68e3      	ldr	r3, [r4, #12]
 800be94:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800be96:	1a5b      	subs	r3, r3, r1
 800be98:	4543      	cmp	r3, r8
 800be9a:	dcf0      	bgt.n	800be7e <_printf_float+0x432>
 800be9c:	e6fb      	b.n	800bc96 <_printf_float+0x24a>
 800be9e:	f04f 0800 	mov.w	r8, #0
 800bea2:	f104 0919 	add.w	r9, r4, #25
 800bea6:	e7f4      	b.n	800be92 <_printf_float+0x446>

0800bea8 <_printf_common>:
 800bea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800beac:	4616      	mov	r6, r2
 800beae:	4699      	mov	r9, r3
 800beb0:	688a      	ldr	r2, [r1, #8]
 800beb2:	690b      	ldr	r3, [r1, #16]
 800beb4:	4607      	mov	r7, r0
 800beb6:	4293      	cmp	r3, r2
 800beb8:	bfb8      	it	lt
 800beba:	4613      	movlt	r3, r2
 800bebc:	6033      	str	r3, [r6, #0]
 800bebe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bec2:	460c      	mov	r4, r1
 800bec4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bec8:	b10a      	cbz	r2, 800bece <_printf_common+0x26>
 800beca:	3301      	adds	r3, #1
 800becc:	6033      	str	r3, [r6, #0]
 800bece:	6823      	ldr	r3, [r4, #0]
 800bed0:	0699      	lsls	r1, r3, #26
 800bed2:	bf42      	ittt	mi
 800bed4:	6833      	ldrmi	r3, [r6, #0]
 800bed6:	3302      	addmi	r3, #2
 800bed8:	6033      	strmi	r3, [r6, #0]
 800beda:	6825      	ldr	r5, [r4, #0]
 800bedc:	f015 0506 	ands.w	r5, r5, #6
 800bee0:	d106      	bne.n	800bef0 <_printf_common+0x48>
 800bee2:	f104 0a19 	add.w	sl, r4, #25
 800bee6:	68e3      	ldr	r3, [r4, #12]
 800bee8:	6832      	ldr	r2, [r6, #0]
 800beea:	1a9b      	subs	r3, r3, r2
 800beec:	42ab      	cmp	r3, r5
 800beee:	dc2b      	bgt.n	800bf48 <_printf_common+0xa0>
 800bef0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bef4:	1e13      	subs	r3, r2, #0
 800bef6:	6822      	ldr	r2, [r4, #0]
 800bef8:	bf18      	it	ne
 800befa:	2301      	movne	r3, #1
 800befc:	0692      	lsls	r2, r2, #26
 800befe:	d430      	bmi.n	800bf62 <_printf_common+0xba>
 800bf00:	4649      	mov	r1, r9
 800bf02:	4638      	mov	r0, r7
 800bf04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bf08:	47c0      	blx	r8
 800bf0a:	3001      	adds	r0, #1
 800bf0c:	d023      	beq.n	800bf56 <_printf_common+0xae>
 800bf0e:	6823      	ldr	r3, [r4, #0]
 800bf10:	6922      	ldr	r2, [r4, #16]
 800bf12:	f003 0306 	and.w	r3, r3, #6
 800bf16:	2b04      	cmp	r3, #4
 800bf18:	bf14      	ite	ne
 800bf1a:	2500      	movne	r5, #0
 800bf1c:	6833      	ldreq	r3, [r6, #0]
 800bf1e:	f04f 0600 	mov.w	r6, #0
 800bf22:	bf08      	it	eq
 800bf24:	68e5      	ldreq	r5, [r4, #12]
 800bf26:	f104 041a 	add.w	r4, r4, #26
 800bf2a:	bf08      	it	eq
 800bf2c:	1aed      	subeq	r5, r5, r3
 800bf2e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800bf32:	bf08      	it	eq
 800bf34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	bfc4      	itt	gt
 800bf3c:	1a9b      	subgt	r3, r3, r2
 800bf3e:	18ed      	addgt	r5, r5, r3
 800bf40:	42b5      	cmp	r5, r6
 800bf42:	d11a      	bne.n	800bf7a <_printf_common+0xd2>
 800bf44:	2000      	movs	r0, #0
 800bf46:	e008      	b.n	800bf5a <_printf_common+0xb2>
 800bf48:	2301      	movs	r3, #1
 800bf4a:	4652      	mov	r2, sl
 800bf4c:	4649      	mov	r1, r9
 800bf4e:	4638      	mov	r0, r7
 800bf50:	47c0      	blx	r8
 800bf52:	3001      	adds	r0, #1
 800bf54:	d103      	bne.n	800bf5e <_printf_common+0xb6>
 800bf56:	f04f 30ff 	mov.w	r0, #4294967295
 800bf5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf5e:	3501      	adds	r5, #1
 800bf60:	e7c1      	b.n	800bee6 <_printf_common+0x3e>
 800bf62:	2030      	movs	r0, #48	; 0x30
 800bf64:	18e1      	adds	r1, r4, r3
 800bf66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bf6a:	1c5a      	adds	r2, r3, #1
 800bf6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bf70:	4422      	add	r2, r4
 800bf72:	3302      	adds	r3, #2
 800bf74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bf78:	e7c2      	b.n	800bf00 <_printf_common+0x58>
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	4622      	mov	r2, r4
 800bf7e:	4649      	mov	r1, r9
 800bf80:	4638      	mov	r0, r7
 800bf82:	47c0      	blx	r8
 800bf84:	3001      	adds	r0, #1
 800bf86:	d0e6      	beq.n	800bf56 <_printf_common+0xae>
 800bf88:	3601      	adds	r6, #1
 800bf8a:	e7d9      	b.n	800bf40 <_printf_common+0x98>

0800bf8c <_printf_i>:
 800bf8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf90:	7e0f      	ldrb	r7, [r1, #24]
 800bf92:	4691      	mov	r9, r2
 800bf94:	2f78      	cmp	r7, #120	; 0x78
 800bf96:	4680      	mov	r8, r0
 800bf98:	460c      	mov	r4, r1
 800bf9a:	469a      	mov	sl, r3
 800bf9c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bf9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bfa2:	d807      	bhi.n	800bfb4 <_printf_i+0x28>
 800bfa4:	2f62      	cmp	r7, #98	; 0x62
 800bfa6:	d80a      	bhi.n	800bfbe <_printf_i+0x32>
 800bfa8:	2f00      	cmp	r7, #0
 800bfaa:	f000 80d5 	beq.w	800c158 <_printf_i+0x1cc>
 800bfae:	2f58      	cmp	r7, #88	; 0x58
 800bfb0:	f000 80c1 	beq.w	800c136 <_printf_i+0x1aa>
 800bfb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bfb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bfbc:	e03a      	b.n	800c034 <_printf_i+0xa8>
 800bfbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bfc2:	2b15      	cmp	r3, #21
 800bfc4:	d8f6      	bhi.n	800bfb4 <_printf_i+0x28>
 800bfc6:	a101      	add	r1, pc, #4	; (adr r1, 800bfcc <_printf_i+0x40>)
 800bfc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bfcc:	0800c025 	.word	0x0800c025
 800bfd0:	0800c039 	.word	0x0800c039
 800bfd4:	0800bfb5 	.word	0x0800bfb5
 800bfd8:	0800bfb5 	.word	0x0800bfb5
 800bfdc:	0800bfb5 	.word	0x0800bfb5
 800bfe0:	0800bfb5 	.word	0x0800bfb5
 800bfe4:	0800c039 	.word	0x0800c039
 800bfe8:	0800bfb5 	.word	0x0800bfb5
 800bfec:	0800bfb5 	.word	0x0800bfb5
 800bff0:	0800bfb5 	.word	0x0800bfb5
 800bff4:	0800bfb5 	.word	0x0800bfb5
 800bff8:	0800c13f 	.word	0x0800c13f
 800bffc:	0800c065 	.word	0x0800c065
 800c000:	0800c0f9 	.word	0x0800c0f9
 800c004:	0800bfb5 	.word	0x0800bfb5
 800c008:	0800bfb5 	.word	0x0800bfb5
 800c00c:	0800c161 	.word	0x0800c161
 800c010:	0800bfb5 	.word	0x0800bfb5
 800c014:	0800c065 	.word	0x0800c065
 800c018:	0800bfb5 	.word	0x0800bfb5
 800c01c:	0800bfb5 	.word	0x0800bfb5
 800c020:	0800c101 	.word	0x0800c101
 800c024:	682b      	ldr	r3, [r5, #0]
 800c026:	1d1a      	adds	r2, r3, #4
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	602a      	str	r2, [r5, #0]
 800c02c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c030:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c034:	2301      	movs	r3, #1
 800c036:	e0a0      	b.n	800c17a <_printf_i+0x1ee>
 800c038:	6820      	ldr	r0, [r4, #0]
 800c03a:	682b      	ldr	r3, [r5, #0]
 800c03c:	0607      	lsls	r7, r0, #24
 800c03e:	f103 0104 	add.w	r1, r3, #4
 800c042:	6029      	str	r1, [r5, #0]
 800c044:	d501      	bpl.n	800c04a <_printf_i+0xbe>
 800c046:	681e      	ldr	r6, [r3, #0]
 800c048:	e003      	b.n	800c052 <_printf_i+0xc6>
 800c04a:	0646      	lsls	r6, r0, #25
 800c04c:	d5fb      	bpl.n	800c046 <_printf_i+0xba>
 800c04e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c052:	2e00      	cmp	r6, #0
 800c054:	da03      	bge.n	800c05e <_printf_i+0xd2>
 800c056:	232d      	movs	r3, #45	; 0x2d
 800c058:	4276      	negs	r6, r6
 800c05a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c05e:	230a      	movs	r3, #10
 800c060:	4859      	ldr	r0, [pc, #356]	; (800c1c8 <_printf_i+0x23c>)
 800c062:	e012      	b.n	800c08a <_printf_i+0xfe>
 800c064:	682b      	ldr	r3, [r5, #0]
 800c066:	6820      	ldr	r0, [r4, #0]
 800c068:	1d19      	adds	r1, r3, #4
 800c06a:	6029      	str	r1, [r5, #0]
 800c06c:	0605      	lsls	r5, r0, #24
 800c06e:	d501      	bpl.n	800c074 <_printf_i+0xe8>
 800c070:	681e      	ldr	r6, [r3, #0]
 800c072:	e002      	b.n	800c07a <_printf_i+0xee>
 800c074:	0641      	lsls	r1, r0, #25
 800c076:	d5fb      	bpl.n	800c070 <_printf_i+0xe4>
 800c078:	881e      	ldrh	r6, [r3, #0]
 800c07a:	2f6f      	cmp	r7, #111	; 0x6f
 800c07c:	bf0c      	ite	eq
 800c07e:	2308      	moveq	r3, #8
 800c080:	230a      	movne	r3, #10
 800c082:	4851      	ldr	r0, [pc, #324]	; (800c1c8 <_printf_i+0x23c>)
 800c084:	2100      	movs	r1, #0
 800c086:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c08a:	6865      	ldr	r5, [r4, #4]
 800c08c:	2d00      	cmp	r5, #0
 800c08e:	bfa8      	it	ge
 800c090:	6821      	ldrge	r1, [r4, #0]
 800c092:	60a5      	str	r5, [r4, #8]
 800c094:	bfa4      	itt	ge
 800c096:	f021 0104 	bicge.w	r1, r1, #4
 800c09a:	6021      	strge	r1, [r4, #0]
 800c09c:	b90e      	cbnz	r6, 800c0a2 <_printf_i+0x116>
 800c09e:	2d00      	cmp	r5, #0
 800c0a0:	d04b      	beq.n	800c13a <_printf_i+0x1ae>
 800c0a2:	4615      	mov	r5, r2
 800c0a4:	fbb6 f1f3 	udiv	r1, r6, r3
 800c0a8:	fb03 6711 	mls	r7, r3, r1, r6
 800c0ac:	5dc7      	ldrb	r7, [r0, r7]
 800c0ae:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c0b2:	4637      	mov	r7, r6
 800c0b4:	42bb      	cmp	r3, r7
 800c0b6:	460e      	mov	r6, r1
 800c0b8:	d9f4      	bls.n	800c0a4 <_printf_i+0x118>
 800c0ba:	2b08      	cmp	r3, #8
 800c0bc:	d10b      	bne.n	800c0d6 <_printf_i+0x14a>
 800c0be:	6823      	ldr	r3, [r4, #0]
 800c0c0:	07de      	lsls	r6, r3, #31
 800c0c2:	d508      	bpl.n	800c0d6 <_printf_i+0x14a>
 800c0c4:	6923      	ldr	r3, [r4, #16]
 800c0c6:	6861      	ldr	r1, [r4, #4]
 800c0c8:	4299      	cmp	r1, r3
 800c0ca:	bfde      	ittt	le
 800c0cc:	2330      	movle	r3, #48	; 0x30
 800c0ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c0d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c0d6:	1b52      	subs	r2, r2, r5
 800c0d8:	6122      	str	r2, [r4, #16]
 800c0da:	464b      	mov	r3, r9
 800c0dc:	4621      	mov	r1, r4
 800c0de:	4640      	mov	r0, r8
 800c0e0:	f8cd a000 	str.w	sl, [sp]
 800c0e4:	aa03      	add	r2, sp, #12
 800c0e6:	f7ff fedf 	bl	800bea8 <_printf_common>
 800c0ea:	3001      	adds	r0, #1
 800c0ec:	d14a      	bne.n	800c184 <_printf_i+0x1f8>
 800c0ee:	f04f 30ff 	mov.w	r0, #4294967295
 800c0f2:	b004      	add	sp, #16
 800c0f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0f8:	6823      	ldr	r3, [r4, #0]
 800c0fa:	f043 0320 	orr.w	r3, r3, #32
 800c0fe:	6023      	str	r3, [r4, #0]
 800c100:	2778      	movs	r7, #120	; 0x78
 800c102:	4832      	ldr	r0, [pc, #200]	; (800c1cc <_printf_i+0x240>)
 800c104:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c108:	6823      	ldr	r3, [r4, #0]
 800c10a:	6829      	ldr	r1, [r5, #0]
 800c10c:	061f      	lsls	r7, r3, #24
 800c10e:	f851 6b04 	ldr.w	r6, [r1], #4
 800c112:	d402      	bmi.n	800c11a <_printf_i+0x18e>
 800c114:	065f      	lsls	r7, r3, #25
 800c116:	bf48      	it	mi
 800c118:	b2b6      	uxthmi	r6, r6
 800c11a:	07df      	lsls	r7, r3, #31
 800c11c:	bf48      	it	mi
 800c11e:	f043 0320 	orrmi.w	r3, r3, #32
 800c122:	6029      	str	r1, [r5, #0]
 800c124:	bf48      	it	mi
 800c126:	6023      	strmi	r3, [r4, #0]
 800c128:	b91e      	cbnz	r6, 800c132 <_printf_i+0x1a6>
 800c12a:	6823      	ldr	r3, [r4, #0]
 800c12c:	f023 0320 	bic.w	r3, r3, #32
 800c130:	6023      	str	r3, [r4, #0]
 800c132:	2310      	movs	r3, #16
 800c134:	e7a6      	b.n	800c084 <_printf_i+0xf8>
 800c136:	4824      	ldr	r0, [pc, #144]	; (800c1c8 <_printf_i+0x23c>)
 800c138:	e7e4      	b.n	800c104 <_printf_i+0x178>
 800c13a:	4615      	mov	r5, r2
 800c13c:	e7bd      	b.n	800c0ba <_printf_i+0x12e>
 800c13e:	682b      	ldr	r3, [r5, #0]
 800c140:	6826      	ldr	r6, [r4, #0]
 800c142:	1d18      	adds	r0, r3, #4
 800c144:	6961      	ldr	r1, [r4, #20]
 800c146:	6028      	str	r0, [r5, #0]
 800c148:	0635      	lsls	r5, r6, #24
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	d501      	bpl.n	800c152 <_printf_i+0x1c6>
 800c14e:	6019      	str	r1, [r3, #0]
 800c150:	e002      	b.n	800c158 <_printf_i+0x1cc>
 800c152:	0670      	lsls	r0, r6, #25
 800c154:	d5fb      	bpl.n	800c14e <_printf_i+0x1c2>
 800c156:	8019      	strh	r1, [r3, #0]
 800c158:	2300      	movs	r3, #0
 800c15a:	4615      	mov	r5, r2
 800c15c:	6123      	str	r3, [r4, #16]
 800c15e:	e7bc      	b.n	800c0da <_printf_i+0x14e>
 800c160:	682b      	ldr	r3, [r5, #0]
 800c162:	2100      	movs	r1, #0
 800c164:	1d1a      	adds	r2, r3, #4
 800c166:	602a      	str	r2, [r5, #0]
 800c168:	681d      	ldr	r5, [r3, #0]
 800c16a:	6862      	ldr	r2, [r4, #4]
 800c16c:	4628      	mov	r0, r5
 800c16e:	f001 f836 	bl	800d1de <memchr>
 800c172:	b108      	cbz	r0, 800c178 <_printf_i+0x1ec>
 800c174:	1b40      	subs	r0, r0, r5
 800c176:	6060      	str	r0, [r4, #4]
 800c178:	6863      	ldr	r3, [r4, #4]
 800c17a:	6123      	str	r3, [r4, #16]
 800c17c:	2300      	movs	r3, #0
 800c17e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c182:	e7aa      	b.n	800c0da <_printf_i+0x14e>
 800c184:	462a      	mov	r2, r5
 800c186:	4649      	mov	r1, r9
 800c188:	4640      	mov	r0, r8
 800c18a:	6923      	ldr	r3, [r4, #16]
 800c18c:	47d0      	blx	sl
 800c18e:	3001      	adds	r0, #1
 800c190:	d0ad      	beq.n	800c0ee <_printf_i+0x162>
 800c192:	6823      	ldr	r3, [r4, #0]
 800c194:	079b      	lsls	r3, r3, #30
 800c196:	d413      	bmi.n	800c1c0 <_printf_i+0x234>
 800c198:	68e0      	ldr	r0, [r4, #12]
 800c19a:	9b03      	ldr	r3, [sp, #12]
 800c19c:	4298      	cmp	r0, r3
 800c19e:	bfb8      	it	lt
 800c1a0:	4618      	movlt	r0, r3
 800c1a2:	e7a6      	b.n	800c0f2 <_printf_i+0x166>
 800c1a4:	2301      	movs	r3, #1
 800c1a6:	4632      	mov	r2, r6
 800c1a8:	4649      	mov	r1, r9
 800c1aa:	4640      	mov	r0, r8
 800c1ac:	47d0      	blx	sl
 800c1ae:	3001      	adds	r0, #1
 800c1b0:	d09d      	beq.n	800c0ee <_printf_i+0x162>
 800c1b2:	3501      	adds	r5, #1
 800c1b4:	68e3      	ldr	r3, [r4, #12]
 800c1b6:	9903      	ldr	r1, [sp, #12]
 800c1b8:	1a5b      	subs	r3, r3, r1
 800c1ba:	42ab      	cmp	r3, r5
 800c1bc:	dcf2      	bgt.n	800c1a4 <_printf_i+0x218>
 800c1be:	e7eb      	b.n	800c198 <_printf_i+0x20c>
 800c1c0:	2500      	movs	r5, #0
 800c1c2:	f104 0619 	add.w	r6, r4, #25
 800c1c6:	e7f5      	b.n	800c1b4 <_printf_i+0x228>
 800c1c8:	08010879 	.word	0x08010879
 800c1cc:	0801088a 	.word	0x0801088a

0800c1d0 <std>:
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	b510      	push	{r4, lr}
 800c1d4:	4604      	mov	r4, r0
 800c1d6:	e9c0 3300 	strd	r3, r3, [r0]
 800c1da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c1de:	6083      	str	r3, [r0, #8]
 800c1e0:	8181      	strh	r1, [r0, #12]
 800c1e2:	6643      	str	r3, [r0, #100]	; 0x64
 800c1e4:	81c2      	strh	r2, [r0, #14]
 800c1e6:	6183      	str	r3, [r0, #24]
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	2208      	movs	r2, #8
 800c1ec:	305c      	adds	r0, #92	; 0x5c
 800c1ee:	f000 f916 	bl	800c41e <memset>
 800c1f2:	4b0d      	ldr	r3, [pc, #52]	; (800c228 <std+0x58>)
 800c1f4:	6224      	str	r4, [r4, #32]
 800c1f6:	6263      	str	r3, [r4, #36]	; 0x24
 800c1f8:	4b0c      	ldr	r3, [pc, #48]	; (800c22c <std+0x5c>)
 800c1fa:	62a3      	str	r3, [r4, #40]	; 0x28
 800c1fc:	4b0c      	ldr	r3, [pc, #48]	; (800c230 <std+0x60>)
 800c1fe:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c200:	4b0c      	ldr	r3, [pc, #48]	; (800c234 <std+0x64>)
 800c202:	6323      	str	r3, [r4, #48]	; 0x30
 800c204:	4b0c      	ldr	r3, [pc, #48]	; (800c238 <std+0x68>)
 800c206:	429c      	cmp	r4, r3
 800c208:	d006      	beq.n	800c218 <std+0x48>
 800c20a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c20e:	4294      	cmp	r4, r2
 800c210:	d002      	beq.n	800c218 <std+0x48>
 800c212:	33d0      	adds	r3, #208	; 0xd0
 800c214:	429c      	cmp	r4, r3
 800c216:	d105      	bne.n	800c224 <std+0x54>
 800c218:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c21c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c220:	f000 bfd0 	b.w	800d1c4 <__retarget_lock_init_recursive>
 800c224:	bd10      	pop	{r4, pc}
 800c226:	bf00      	nop
 800c228:	0800c395 	.word	0x0800c395
 800c22c:	0800c3bb 	.word	0x0800c3bb
 800c230:	0800c3f3 	.word	0x0800c3f3
 800c234:	0800c417 	.word	0x0800c417
 800c238:	20003368 	.word	0x20003368

0800c23c <stdio_exit_handler>:
 800c23c:	4a02      	ldr	r2, [pc, #8]	; (800c248 <stdio_exit_handler+0xc>)
 800c23e:	4903      	ldr	r1, [pc, #12]	; (800c24c <stdio_exit_handler+0x10>)
 800c240:	4803      	ldr	r0, [pc, #12]	; (800c250 <stdio_exit_handler+0x14>)
 800c242:	f000 b869 	b.w	800c318 <_fwalk_sglue>
 800c246:	bf00      	nop
 800c248:	20000014 	.word	0x20000014
 800c24c:	0800f565 	.word	0x0800f565
 800c250:	20000194 	.word	0x20000194

0800c254 <cleanup_stdio>:
 800c254:	6841      	ldr	r1, [r0, #4]
 800c256:	4b0c      	ldr	r3, [pc, #48]	; (800c288 <cleanup_stdio+0x34>)
 800c258:	b510      	push	{r4, lr}
 800c25a:	4299      	cmp	r1, r3
 800c25c:	4604      	mov	r4, r0
 800c25e:	d001      	beq.n	800c264 <cleanup_stdio+0x10>
 800c260:	f003 f980 	bl	800f564 <_fflush_r>
 800c264:	68a1      	ldr	r1, [r4, #8]
 800c266:	4b09      	ldr	r3, [pc, #36]	; (800c28c <cleanup_stdio+0x38>)
 800c268:	4299      	cmp	r1, r3
 800c26a:	d002      	beq.n	800c272 <cleanup_stdio+0x1e>
 800c26c:	4620      	mov	r0, r4
 800c26e:	f003 f979 	bl	800f564 <_fflush_r>
 800c272:	68e1      	ldr	r1, [r4, #12]
 800c274:	4b06      	ldr	r3, [pc, #24]	; (800c290 <cleanup_stdio+0x3c>)
 800c276:	4299      	cmp	r1, r3
 800c278:	d004      	beq.n	800c284 <cleanup_stdio+0x30>
 800c27a:	4620      	mov	r0, r4
 800c27c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c280:	f003 b970 	b.w	800f564 <_fflush_r>
 800c284:	bd10      	pop	{r4, pc}
 800c286:	bf00      	nop
 800c288:	20003368 	.word	0x20003368
 800c28c:	200033d0 	.word	0x200033d0
 800c290:	20003438 	.word	0x20003438

0800c294 <global_stdio_init.part.0>:
 800c294:	b510      	push	{r4, lr}
 800c296:	4b0b      	ldr	r3, [pc, #44]	; (800c2c4 <global_stdio_init.part.0+0x30>)
 800c298:	4c0b      	ldr	r4, [pc, #44]	; (800c2c8 <global_stdio_init.part.0+0x34>)
 800c29a:	4a0c      	ldr	r2, [pc, #48]	; (800c2cc <global_stdio_init.part.0+0x38>)
 800c29c:	4620      	mov	r0, r4
 800c29e:	601a      	str	r2, [r3, #0]
 800c2a0:	2104      	movs	r1, #4
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	f7ff ff94 	bl	800c1d0 <std>
 800c2a8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c2ac:	2201      	movs	r2, #1
 800c2ae:	2109      	movs	r1, #9
 800c2b0:	f7ff ff8e 	bl	800c1d0 <std>
 800c2b4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c2b8:	2202      	movs	r2, #2
 800c2ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2be:	2112      	movs	r1, #18
 800c2c0:	f7ff bf86 	b.w	800c1d0 <std>
 800c2c4:	200034a0 	.word	0x200034a0
 800c2c8:	20003368 	.word	0x20003368
 800c2cc:	0800c23d 	.word	0x0800c23d

0800c2d0 <__sfp_lock_acquire>:
 800c2d0:	4801      	ldr	r0, [pc, #4]	; (800c2d8 <__sfp_lock_acquire+0x8>)
 800c2d2:	f000 bf79 	b.w	800d1c8 <__retarget_lock_acquire_recursive>
 800c2d6:	bf00      	nop
 800c2d8:	200034ce 	.word	0x200034ce

0800c2dc <__sfp_lock_release>:
 800c2dc:	4801      	ldr	r0, [pc, #4]	; (800c2e4 <__sfp_lock_release+0x8>)
 800c2de:	f000 bf75 	b.w	800d1cc <__retarget_lock_release_recursive>
 800c2e2:	bf00      	nop
 800c2e4:	200034ce 	.word	0x200034ce

0800c2e8 <__sinit>:
 800c2e8:	b510      	push	{r4, lr}
 800c2ea:	4604      	mov	r4, r0
 800c2ec:	f7ff fff0 	bl	800c2d0 <__sfp_lock_acquire>
 800c2f0:	6a23      	ldr	r3, [r4, #32]
 800c2f2:	b11b      	cbz	r3, 800c2fc <__sinit+0x14>
 800c2f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2f8:	f7ff bff0 	b.w	800c2dc <__sfp_lock_release>
 800c2fc:	4b04      	ldr	r3, [pc, #16]	; (800c310 <__sinit+0x28>)
 800c2fe:	6223      	str	r3, [r4, #32]
 800c300:	4b04      	ldr	r3, [pc, #16]	; (800c314 <__sinit+0x2c>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d1f5      	bne.n	800c2f4 <__sinit+0xc>
 800c308:	f7ff ffc4 	bl	800c294 <global_stdio_init.part.0>
 800c30c:	e7f2      	b.n	800c2f4 <__sinit+0xc>
 800c30e:	bf00      	nop
 800c310:	0800c255 	.word	0x0800c255
 800c314:	200034a0 	.word	0x200034a0

0800c318 <_fwalk_sglue>:
 800c318:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c31c:	4607      	mov	r7, r0
 800c31e:	4688      	mov	r8, r1
 800c320:	4614      	mov	r4, r2
 800c322:	2600      	movs	r6, #0
 800c324:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c328:	f1b9 0901 	subs.w	r9, r9, #1
 800c32c:	d505      	bpl.n	800c33a <_fwalk_sglue+0x22>
 800c32e:	6824      	ldr	r4, [r4, #0]
 800c330:	2c00      	cmp	r4, #0
 800c332:	d1f7      	bne.n	800c324 <_fwalk_sglue+0xc>
 800c334:	4630      	mov	r0, r6
 800c336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c33a:	89ab      	ldrh	r3, [r5, #12]
 800c33c:	2b01      	cmp	r3, #1
 800c33e:	d907      	bls.n	800c350 <_fwalk_sglue+0x38>
 800c340:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c344:	3301      	adds	r3, #1
 800c346:	d003      	beq.n	800c350 <_fwalk_sglue+0x38>
 800c348:	4629      	mov	r1, r5
 800c34a:	4638      	mov	r0, r7
 800c34c:	47c0      	blx	r8
 800c34e:	4306      	orrs	r6, r0
 800c350:	3568      	adds	r5, #104	; 0x68
 800c352:	e7e9      	b.n	800c328 <_fwalk_sglue+0x10>

0800c354 <siprintf>:
 800c354:	b40e      	push	{r1, r2, r3}
 800c356:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c35a:	b500      	push	{lr}
 800c35c:	b09c      	sub	sp, #112	; 0x70
 800c35e:	ab1d      	add	r3, sp, #116	; 0x74
 800c360:	9002      	str	r0, [sp, #8]
 800c362:	9006      	str	r0, [sp, #24]
 800c364:	9107      	str	r1, [sp, #28]
 800c366:	9104      	str	r1, [sp, #16]
 800c368:	4808      	ldr	r0, [pc, #32]	; (800c38c <siprintf+0x38>)
 800c36a:	4909      	ldr	r1, [pc, #36]	; (800c390 <siprintf+0x3c>)
 800c36c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c370:	9105      	str	r1, [sp, #20]
 800c372:	6800      	ldr	r0, [r0, #0]
 800c374:	a902      	add	r1, sp, #8
 800c376:	9301      	str	r3, [sp, #4]
 800c378:	f002 ff74 	bl	800f264 <_svfiprintf_r>
 800c37c:	2200      	movs	r2, #0
 800c37e:	9b02      	ldr	r3, [sp, #8]
 800c380:	701a      	strb	r2, [r3, #0]
 800c382:	b01c      	add	sp, #112	; 0x70
 800c384:	f85d eb04 	ldr.w	lr, [sp], #4
 800c388:	b003      	add	sp, #12
 800c38a:	4770      	bx	lr
 800c38c:	200001e0 	.word	0x200001e0
 800c390:	ffff0208 	.word	0xffff0208

0800c394 <__sread>:
 800c394:	b510      	push	{r4, lr}
 800c396:	460c      	mov	r4, r1
 800c398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c39c:	f000 feb4 	bl	800d108 <_read_r>
 800c3a0:	2800      	cmp	r0, #0
 800c3a2:	bfab      	itete	ge
 800c3a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c3a6:	89a3      	ldrhlt	r3, [r4, #12]
 800c3a8:	181b      	addge	r3, r3, r0
 800c3aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c3ae:	bfac      	ite	ge
 800c3b0:	6563      	strge	r3, [r4, #84]	; 0x54
 800c3b2:	81a3      	strhlt	r3, [r4, #12]
 800c3b4:	bd10      	pop	{r4, pc}

0800c3b6 <__seofread>:
 800c3b6:	2000      	movs	r0, #0
 800c3b8:	4770      	bx	lr

0800c3ba <__swrite>:
 800c3ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3be:	461f      	mov	r7, r3
 800c3c0:	898b      	ldrh	r3, [r1, #12]
 800c3c2:	4605      	mov	r5, r0
 800c3c4:	05db      	lsls	r3, r3, #23
 800c3c6:	460c      	mov	r4, r1
 800c3c8:	4616      	mov	r6, r2
 800c3ca:	d505      	bpl.n	800c3d8 <__swrite+0x1e>
 800c3cc:	2302      	movs	r3, #2
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3d4:	f000 fe86 	bl	800d0e4 <_lseek_r>
 800c3d8:	89a3      	ldrh	r3, [r4, #12]
 800c3da:	4632      	mov	r2, r6
 800c3dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c3e0:	81a3      	strh	r3, [r4, #12]
 800c3e2:	4628      	mov	r0, r5
 800c3e4:	463b      	mov	r3, r7
 800c3e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c3ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3ee:	f000 bead 	b.w	800d14c <_write_r>

0800c3f2 <__sseek>:
 800c3f2:	b510      	push	{r4, lr}
 800c3f4:	460c      	mov	r4, r1
 800c3f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3fa:	f000 fe73 	bl	800d0e4 <_lseek_r>
 800c3fe:	1c43      	adds	r3, r0, #1
 800c400:	89a3      	ldrh	r3, [r4, #12]
 800c402:	bf15      	itete	ne
 800c404:	6560      	strne	r0, [r4, #84]	; 0x54
 800c406:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c40a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c40e:	81a3      	strheq	r3, [r4, #12]
 800c410:	bf18      	it	ne
 800c412:	81a3      	strhne	r3, [r4, #12]
 800c414:	bd10      	pop	{r4, pc}

0800c416 <__sclose>:
 800c416:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c41a:	f000 bdfd 	b.w	800d018 <_close_r>

0800c41e <memset>:
 800c41e:	4603      	mov	r3, r0
 800c420:	4402      	add	r2, r0
 800c422:	4293      	cmp	r3, r2
 800c424:	d100      	bne.n	800c428 <memset+0xa>
 800c426:	4770      	bx	lr
 800c428:	f803 1b01 	strb.w	r1, [r3], #1
 800c42c:	e7f9      	b.n	800c422 <memset+0x4>

0800c42e <strchr>:
 800c42e:	4603      	mov	r3, r0
 800c430:	b2c9      	uxtb	r1, r1
 800c432:	4618      	mov	r0, r3
 800c434:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c438:	b112      	cbz	r2, 800c440 <strchr+0x12>
 800c43a:	428a      	cmp	r2, r1
 800c43c:	d1f9      	bne.n	800c432 <strchr+0x4>
 800c43e:	4770      	bx	lr
 800c440:	2900      	cmp	r1, #0
 800c442:	bf18      	it	ne
 800c444:	2000      	movne	r0, #0
 800c446:	4770      	bx	lr

0800c448 <strncmp>:
 800c448:	b510      	push	{r4, lr}
 800c44a:	b16a      	cbz	r2, 800c468 <strncmp+0x20>
 800c44c:	3901      	subs	r1, #1
 800c44e:	1884      	adds	r4, r0, r2
 800c450:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c454:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c458:	429a      	cmp	r2, r3
 800c45a:	d103      	bne.n	800c464 <strncmp+0x1c>
 800c45c:	42a0      	cmp	r0, r4
 800c45e:	d001      	beq.n	800c464 <strncmp+0x1c>
 800c460:	2a00      	cmp	r2, #0
 800c462:	d1f5      	bne.n	800c450 <strncmp+0x8>
 800c464:	1ad0      	subs	r0, r2, r3
 800c466:	bd10      	pop	{r4, pc}
 800c468:	4610      	mov	r0, r2
 800c46a:	e7fc      	b.n	800c466 <strncmp+0x1e>

0800c46c <strncpy>:
 800c46c:	4603      	mov	r3, r0
 800c46e:	b510      	push	{r4, lr}
 800c470:	3901      	subs	r1, #1
 800c472:	b132      	cbz	r2, 800c482 <strncpy+0x16>
 800c474:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c478:	3a01      	subs	r2, #1
 800c47a:	f803 4b01 	strb.w	r4, [r3], #1
 800c47e:	2c00      	cmp	r4, #0
 800c480:	d1f7      	bne.n	800c472 <strncpy+0x6>
 800c482:	2100      	movs	r1, #0
 800c484:	441a      	add	r2, r3
 800c486:	4293      	cmp	r3, r2
 800c488:	d100      	bne.n	800c48c <strncpy+0x20>
 800c48a:	bd10      	pop	{r4, pc}
 800c48c:	f803 1b01 	strb.w	r1, [r3], #1
 800c490:	e7f9      	b.n	800c486 <strncpy+0x1a>
	...

0800c494 <strtok>:
 800c494:	4b16      	ldr	r3, [pc, #88]	; (800c4f0 <strtok+0x5c>)
 800c496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c49a:	681f      	ldr	r7, [r3, #0]
 800c49c:	4605      	mov	r5, r0
 800c49e:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800c4a0:	460e      	mov	r6, r1
 800c4a2:	b9ec      	cbnz	r4, 800c4e0 <strtok+0x4c>
 800c4a4:	2050      	movs	r0, #80	; 0x50
 800c4a6:	f7fe fa81 	bl	800a9ac <malloc>
 800c4aa:	4602      	mov	r2, r0
 800c4ac:	6478      	str	r0, [r7, #68]	; 0x44
 800c4ae:	b920      	cbnz	r0, 800c4ba <strtok+0x26>
 800c4b0:	215b      	movs	r1, #91	; 0x5b
 800c4b2:	4b10      	ldr	r3, [pc, #64]	; (800c4f4 <strtok+0x60>)
 800c4b4:	4810      	ldr	r0, [pc, #64]	; (800c4f8 <strtok+0x64>)
 800c4b6:	f000 feb9 	bl	800d22c <__assert_func>
 800c4ba:	e9c0 4400 	strd	r4, r4, [r0]
 800c4be:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c4c2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c4c6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800c4ca:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800c4ce:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800c4d2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800c4d6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800c4da:	6184      	str	r4, [r0, #24]
 800c4dc:	7704      	strb	r4, [r0, #28]
 800c4de:	6244      	str	r4, [r0, #36]	; 0x24
 800c4e0:	4631      	mov	r1, r6
 800c4e2:	4628      	mov	r0, r5
 800c4e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4ec:	f000 b806 	b.w	800c4fc <__strtok_r>
 800c4f0:	200001e0 	.word	0x200001e0
 800c4f4:	0801089b 	.word	0x0801089b
 800c4f8:	080108b2 	.word	0x080108b2

0800c4fc <__strtok_r>:
 800c4fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4fe:	b908      	cbnz	r0, 800c504 <__strtok_r+0x8>
 800c500:	6810      	ldr	r0, [r2, #0]
 800c502:	b188      	cbz	r0, 800c528 <__strtok_r+0x2c>
 800c504:	4604      	mov	r4, r0
 800c506:	460f      	mov	r7, r1
 800c508:	4620      	mov	r0, r4
 800c50a:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c50e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c512:	b91e      	cbnz	r6, 800c51c <__strtok_r+0x20>
 800c514:	b965      	cbnz	r5, 800c530 <__strtok_r+0x34>
 800c516:	4628      	mov	r0, r5
 800c518:	6015      	str	r5, [r2, #0]
 800c51a:	e005      	b.n	800c528 <__strtok_r+0x2c>
 800c51c:	42b5      	cmp	r5, r6
 800c51e:	d1f6      	bne.n	800c50e <__strtok_r+0x12>
 800c520:	2b00      	cmp	r3, #0
 800c522:	d1f0      	bne.n	800c506 <__strtok_r+0xa>
 800c524:	6014      	str	r4, [r2, #0]
 800c526:	7003      	strb	r3, [r0, #0]
 800c528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c52a:	461c      	mov	r4, r3
 800c52c:	e00c      	b.n	800c548 <__strtok_r+0x4c>
 800c52e:	b915      	cbnz	r5, 800c536 <__strtok_r+0x3a>
 800c530:	460e      	mov	r6, r1
 800c532:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c536:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c53a:	42ab      	cmp	r3, r5
 800c53c:	d1f7      	bne.n	800c52e <__strtok_r+0x32>
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d0f3      	beq.n	800c52a <__strtok_r+0x2e>
 800c542:	2300      	movs	r3, #0
 800c544:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c548:	6014      	str	r4, [r2, #0]
 800c54a:	e7ed      	b.n	800c528 <__strtok_r+0x2c>

0800c54c <strstr>:
 800c54c:	780a      	ldrb	r2, [r1, #0]
 800c54e:	b570      	push	{r4, r5, r6, lr}
 800c550:	b96a      	cbnz	r2, 800c56e <strstr+0x22>
 800c552:	bd70      	pop	{r4, r5, r6, pc}
 800c554:	429a      	cmp	r2, r3
 800c556:	d109      	bne.n	800c56c <strstr+0x20>
 800c558:	460c      	mov	r4, r1
 800c55a:	4605      	mov	r5, r0
 800c55c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c560:	2b00      	cmp	r3, #0
 800c562:	d0f6      	beq.n	800c552 <strstr+0x6>
 800c564:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c568:	429e      	cmp	r6, r3
 800c56a:	d0f7      	beq.n	800c55c <strstr+0x10>
 800c56c:	3001      	adds	r0, #1
 800c56e:	7803      	ldrb	r3, [r0, #0]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d1ef      	bne.n	800c554 <strstr+0x8>
 800c574:	4618      	mov	r0, r3
 800c576:	e7ec      	b.n	800c552 <strstr+0x6>

0800c578 <validate_structure>:
 800c578:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c57a:	6801      	ldr	r1, [r0, #0]
 800c57c:	4604      	mov	r4, r0
 800c57e:	293b      	cmp	r1, #59	; 0x3b
 800c580:	d911      	bls.n	800c5a6 <validate_structure+0x2e>
 800c582:	223c      	movs	r2, #60	; 0x3c
 800c584:	4668      	mov	r0, sp
 800c586:	f000 fe6f 	bl	800d268 <div>
 800c58a:	9a01      	ldr	r2, [sp, #4]
 800c58c:	6863      	ldr	r3, [r4, #4]
 800c58e:	9900      	ldr	r1, [sp, #0]
 800c590:	2a00      	cmp	r2, #0
 800c592:	440b      	add	r3, r1
 800c594:	6063      	str	r3, [r4, #4]
 800c596:	bfbb      	ittet	lt
 800c598:	323c      	addlt	r2, #60	; 0x3c
 800c59a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c59e:	6022      	strge	r2, [r4, #0]
 800c5a0:	6022      	strlt	r2, [r4, #0]
 800c5a2:	bfb8      	it	lt
 800c5a4:	6063      	strlt	r3, [r4, #4]
 800c5a6:	6861      	ldr	r1, [r4, #4]
 800c5a8:	293b      	cmp	r1, #59	; 0x3b
 800c5aa:	d911      	bls.n	800c5d0 <validate_structure+0x58>
 800c5ac:	223c      	movs	r2, #60	; 0x3c
 800c5ae:	4668      	mov	r0, sp
 800c5b0:	f000 fe5a 	bl	800d268 <div>
 800c5b4:	9a01      	ldr	r2, [sp, #4]
 800c5b6:	68a3      	ldr	r3, [r4, #8]
 800c5b8:	9900      	ldr	r1, [sp, #0]
 800c5ba:	2a00      	cmp	r2, #0
 800c5bc:	440b      	add	r3, r1
 800c5be:	60a3      	str	r3, [r4, #8]
 800c5c0:	bfbb      	ittet	lt
 800c5c2:	323c      	addlt	r2, #60	; 0x3c
 800c5c4:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c5c8:	6062      	strge	r2, [r4, #4]
 800c5ca:	6062      	strlt	r2, [r4, #4]
 800c5cc:	bfb8      	it	lt
 800c5ce:	60a3      	strlt	r3, [r4, #8]
 800c5d0:	68a1      	ldr	r1, [r4, #8]
 800c5d2:	2917      	cmp	r1, #23
 800c5d4:	d911      	bls.n	800c5fa <validate_structure+0x82>
 800c5d6:	2218      	movs	r2, #24
 800c5d8:	4668      	mov	r0, sp
 800c5da:	f000 fe45 	bl	800d268 <div>
 800c5de:	9a01      	ldr	r2, [sp, #4]
 800c5e0:	68e3      	ldr	r3, [r4, #12]
 800c5e2:	9900      	ldr	r1, [sp, #0]
 800c5e4:	2a00      	cmp	r2, #0
 800c5e6:	440b      	add	r3, r1
 800c5e8:	60e3      	str	r3, [r4, #12]
 800c5ea:	bfbb      	ittet	lt
 800c5ec:	3218      	addlt	r2, #24
 800c5ee:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c5f2:	60a2      	strge	r2, [r4, #8]
 800c5f4:	60a2      	strlt	r2, [r4, #8]
 800c5f6:	bfb8      	it	lt
 800c5f8:	60e3      	strlt	r3, [r4, #12]
 800c5fa:	6921      	ldr	r1, [r4, #16]
 800c5fc:	290b      	cmp	r1, #11
 800c5fe:	d911      	bls.n	800c624 <validate_structure+0xac>
 800c600:	220c      	movs	r2, #12
 800c602:	4668      	mov	r0, sp
 800c604:	f000 fe30 	bl	800d268 <div>
 800c608:	9a01      	ldr	r2, [sp, #4]
 800c60a:	6963      	ldr	r3, [r4, #20]
 800c60c:	9900      	ldr	r1, [sp, #0]
 800c60e:	2a00      	cmp	r2, #0
 800c610:	440b      	add	r3, r1
 800c612:	6163      	str	r3, [r4, #20]
 800c614:	bfbb      	ittet	lt
 800c616:	320c      	addlt	r2, #12
 800c618:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800c61c:	6122      	strge	r2, [r4, #16]
 800c61e:	6122      	strlt	r2, [r4, #16]
 800c620:	bfb8      	it	lt
 800c622:	6163      	strlt	r3, [r4, #20]
 800c624:	6963      	ldr	r3, [r4, #20]
 800c626:	079a      	lsls	r2, r3, #30
 800c628:	d11e      	bne.n	800c668 <validate_structure+0xf0>
 800c62a:	2164      	movs	r1, #100	; 0x64
 800c62c:	fb93 f2f1 	sdiv	r2, r3, r1
 800c630:	fb01 3212 	mls	r2, r1, r2, r3
 800c634:	b9d2      	cbnz	r2, 800c66c <validate_structure+0xf4>
 800c636:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c63a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800c63e:	fb93 f1f2 	sdiv	r1, r3, r2
 800c642:	fb02 3311 	mls	r3, r2, r1, r3
 800c646:	2b00      	cmp	r3, #0
 800c648:	bf14      	ite	ne
 800c64a:	231c      	movne	r3, #28
 800c64c:	231d      	moveq	r3, #29
 800c64e:	68e2      	ldr	r2, [r4, #12]
 800c650:	2a00      	cmp	r2, #0
 800c652:	dc0d      	bgt.n	800c670 <validate_structure+0xf8>
 800c654:	250b      	movs	r5, #11
 800c656:	2164      	movs	r1, #100	; 0x64
 800c658:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800c65c:	4e30      	ldr	r6, [pc, #192]	; (800c720 <validate_structure+0x1a8>)
 800c65e:	68e7      	ldr	r7, [r4, #12]
 800c660:	2f00      	cmp	r7, #0
 800c662:	dd31      	ble.n	800c6c8 <validate_structure+0x150>
 800c664:	b003      	add	sp, #12
 800c666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c668:	231c      	movs	r3, #28
 800c66a:	e7f0      	b.n	800c64e <validate_structure+0xd6>
 800c66c:	231d      	movs	r3, #29
 800c66e:	e7ee      	b.n	800c64e <validate_structure+0xd6>
 800c670:	2700      	movs	r7, #0
 800c672:	2064      	movs	r0, #100	; 0x64
 800c674:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800c678:	4e29      	ldr	r6, [pc, #164]	; (800c720 <validate_structure+0x1a8>)
 800c67a:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800c67e:	2a01      	cmp	r2, #1
 800c680:	bf0c      	ite	eq
 800c682:	469c      	moveq	ip, r3
 800c684:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 800c688:	4561      	cmp	r1, ip
 800c68a:	ddeb      	ble.n	800c664 <validate_structure+0xec>
 800c68c:	3201      	adds	r2, #1
 800c68e:	eba1 010c 	sub.w	r1, r1, ip
 800c692:	2a0c      	cmp	r2, #12
 800c694:	60e1      	str	r1, [r4, #12]
 800c696:	6122      	str	r2, [r4, #16]
 800c698:	d1ef      	bne.n	800c67a <validate_structure+0x102>
 800c69a:	6963      	ldr	r3, [r4, #20]
 800c69c:	1c5a      	adds	r2, r3, #1
 800c69e:	0791      	lsls	r1, r2, #30
 800c6a0:	e9c4 7204 	strd	r7, r2, [r4, #16]
 800c6a4:	d138      	bne.n	800c718 <validate_structure+0x1a0>
 800c6a6:	fb92 f1f0 	sdiv	r1, r2, r0
 800c6aa:	fb00 2211 	mls	r2, r0, r1, r2
 800c6ae:	2a00      	cmp	r2, #0
 800c6b0:	d134      	bne.n	800c71c <validate_structure+0x1a4>
 800c6b2:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 800c6b6:	fb93 f2f5 	sdiv	r2, r3, r5
 800c6ba:	fb05 3312 	mls	r3, r5, r2, r3
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	bf14      	ite	ne
 800c6c2:	231c      	movne	r3, #28
 800c6c4:	231d      	moveq	r3, #29
 800c6c6:	e7d8      	b.n	800c67a <validate_structure+0x102>
 800c6c8:	6922      	ldr	r2, [r4, #16]
 800c6ca:	3a01      	subs	r2, #1
 800c6cc:	6122      	str	r2, [r4, #16]
 800c6ce:	3201      	adds	r2, #1
 800c6d0:	d115      	bne.n	800c6fe <validate_structure+0x186>
 800c6d2:	6963      	ldr	r3, [r4, #20]
 800c6d4:	1e5a      	subs	r2, r3, #1
 800c6d6:	f012 0f03 	tst.w	r2, #3
 800c6da:	e9c4 5204 	strd	r5, r2, [r4, #16]
 800c6de:	d117      	bne.n	800c710 <validate_structure+0x198>
 800c6e0:	fb92 fcf1 	sdiv	ip, r2, r1
 800c6e4:	fb01 221c 	mls	r2, r1, ip, r2
 800c6e8:	b9a2      	cbnz	r2, 800c714 <validate_structure+0x19c>
 800c6ea:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800c6ee:	fb93 f2f0 	sdiv	r2, r3, r0
 800c6f2:	fb00 3312 	mls	r3, r0, r2, r3
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	bf14      	ite	ne
 800c6fa:	231c      	movne	r3, #28
 800c6fc:	231d      	moveq	r3, #29
 800c6fe:	6922      	ldr	r2, [r4, #16]
 800c700:	2a01      	cmp	r2, #1
 800c702:	bf0c      	ite	eq
 800c704:	461a      	moveq	r2, r3
 800c706:	f856 2022 	ldrne.w	r2, [r6, r2, lsl #2]
 800c70a:	443a      	add	r2, r7
 800c70c:	60e2      	str	r2, [r4, #12]
 800c70e:	e7a6      	b.n	800c65e <validate_structure+0xe6>
 800c710:	231c      	movs	r3, #28
 800c712:	e7f4      	b.n	800c6fe <validate_structure+0x186>
 800c714:	231d      	movs	r3, #29
 800c716:	e7f2      	b.n	800c6fe <validate_structure+0x186>
 800c718:	231c      	movs	r3, #28
 800c71a:	e7ae      	b.n	800c67a <validate_structure+0x102>
 800c71c:	231d      	movs	r3, #29
 800c71e:	e7ac      	b.n	800c67a <validate_structure+0x102>
 800c720:	0801090c 	.word	0x0801090c

0800c724 <mktime>:
 800c724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c728:	b085      	sub	sp, #20
 800c72a:	4607      	mov	r7, r0
 800c72c:	f002 ff98 	bl	800f660 <__gettzinfo>
 800c730:	4681      	mov	r9, r0
 800c732:	4638      	mov	r0, r7
 800c734:	f7ff ff20 	bl	800c578 <validate_structure>
 800c738:	e9d7 4300 	ldrd	r4, r3, [r7]
 800c73c:	223c      	movs	r2, #60	; 0x3c
 800c73e:	fb02 4403 	mla	r4, r2, r3, r4
 800c742:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	697e      	ldr	r6, [r7, #20]
 800c74a:	fb02 4403 	mla	r4, r2, r3, r4
 800c74e:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 800c752:	4abb      	ldr	r2, [pc, #748]	; (800ca40 <mktime+0x31c>)
 800c754:	3d01      	subs	r5, #1
 800c756:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c75a:	2b01      	cmp	r3, #1
 800c75c:	4415      	add	r5, r2
 800c75e:	dd11      	ble.n	800c784 <mktime+0x60>
 800c760:	07b1      	lsls	r1, r6, #30
 800c762:	d10f      	bne.n	800c784 <mktime+0x60>
 800c764:	2264      	movs	r2, #100	; 0x64
 800c766:	fb96 f3f2 	sdiv	r3, r6, r2
 800c76a:	fb02 6313 	mls	r3, r2, r3, r6
 800c76e:	b943      	cbnz	r3, 800c782 <mktime+0x5e>
 800c770:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c774:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800c778:	fb93 f1f2 	sdiv	r1, r3, r2
 800c77c:	fb02 3311 	mls	r3, r2, r1, r3
 800c780:	b903      	cbnz	r3, 800c784 <mktime+0x60>
 800c782:	3501      	adds	r5, #1
 800c784:	f644 6220 	movw	r2, #20000	; 0x4e20
 800c788:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 800c78c:	3310      	adds	r3, #16
 800c78e:	4293      	cmp	r3, r2
 800c790:	61fd      	str	r5, [r7, #28]
 800c792:	f200 815e 	bhi.w	800ca52 <mktime+0x32e>
 800c796:	2e46      	cmp	r6, #70	; 0x46
 800c798:	dd72      	ble.n	800c880 <mktime+0x15c>
 800c79a:	2346      	movs	r3, #70	; 0x46
 800c79c:	f240 1c6d 	movw	ip, #365	; 0x16d
 800c7a0:	2164      	movs	r1, #100	; 0x64
 800c7a2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800c7a6:	079a      	lsls	r2, r3, #30
 800c7a8:	d164      	bne.n	800c874 <mktime+0x150>
 800c7aa:	fb93 f2f1 	sdiv	r2, r3, r1
 800c7ae:	fb01 3212 	mls	r2, r1, r2, r3
 800c7b2:	2a00      	cmp	r2, #0
 800c7b4:	d161      	bne.n	800c87a <mktime+0x156>
 800c7b6:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800c7ba:	fb92 fef0 	sdiv	lr, r2, r0
 800c7be:	fb00 221e 	mls	r2, r0, lr, r2
 800c7c2:	2a00      	cmp	r2, #0
 800c7c4:	bf14      	ite	ne
 800c7c6:	4662      	movne	r2, ip
 800c7c8:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800c7cc:	3301      	adds	r3, #1
 800c7ce:	429e      	cmp	r6, r3
 800c7d0:	4415      	add	r5, r2
 800c7d2:	d1e8      	bne.n	800c7a6 <mktime+0x82>
 800c7d4:	4b9b      	ldr	r3, [pc, #620]	; (800ca44 <mktime+0x320>)
 800c7d6:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800c7da:	fbc5 4803 	smlal	r4, r8, r5, r3
 800c7de:	f000 f9e3 	bl	800cba8 <__tz_lock>
 800c7e2:	f000 f9ed 	bl	800cbc0 <_tzset_unlocked>
 800c7e6:	4b98      	ldr	r3, [pc, #608]	; (800ca48 <mktime+0x324>)
 800c7e8:	f8d3 b000 	ldr.w	fp, [r3]
 800c7ec:	f1bb 0f00 	cmp.w	fp, #0
 800c7f0:	d03a      	beq.n	800c868 <mktime+0x144>
 800c7f2:	f8d7 b020 	ldr.w	fp, [r7, #32]
 800c7f6:	6978      	ldr	r0, [r7, #20]
 800c7f8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c7fc:	f1bb 0f01 	cmp.w	fp, #1
 800c800:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800c804:	46da      	mov	sl, fp
 800c806:	bfa8      	it	ge
 800c808:	f04f 0a01 	movge.w	sl, #1
 800c80c:	4283      	cmp	r3, r0
 800c80e:	d179      	bne.n	800c904 <mktime+0x1e0>
 800c810:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
 800c814:	f8d9 0050 	ldr.w	r0, [r9, #80]	; 0x50
 800c818:	f8d9 c04c 	ldr.w	ip, [r9, #76]	; 0x4c
 800c81c:	1a13      	subs	r3, r2, r0
 800c81e:	9302      	str	r3, [sp, #8]
 800c820:	eb61 73e0 	sbc.w	r3, r1, r0, asr #31
 800c824:	9303      	str	r3, [sp, #12]
 800c826:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 800c82a:	9301      	str	r3, [sp, #4]
 800c82c:	9a01      	ldr	r2, [sp, #4]
 800c82e:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 800c832:	ebb2 0e03 	subs.w	lr, r2, r3
 800c836:	eb6c 71e3 	sbc.w	r1, ip, r3, asr #31
 800c83a:	4574      	cmp	r4, lr
 800c83c:	eb78 0201 	sbcs.w	r2, r8, r1
 800c840:	da66      	bge.n	800c910 <mktime+0x1ec>
 800c842:	f8d9 2000 	ldr.w	r2, [r9]
 800c846:	2a00      	cmp	r2, #0
 800c848:	d06f      	beq.n	800c92a <mktime+0x206>
 800c84a:	9a02      	ldr	r2, [sp, #8]
 800c84c:	4294      	cmp	r4, r2
 800c84e:	9a03      	ldr	r2, [sp, #12]
 800c850:	eb78 0202 	sbcs.w	r2, r8, r2
 800c854:	db03      	blt.n	800c85e <mktime+0x13a>
 800c856:	4574      	cmp	r4, lr
 800c858:	eb78 0101 	sbcs.w	r1, r8, r1
 800c85c:	db6b      	blt.n	800c936 <mktime+0x212>
 800c85e:	f1bb 0f00 	cmp.w	fp, #0
 800c862:	f04f 0b00 	mov.w	fp, #0
 800c866:	da6b      	bge.n	800c940 <mktime+0x21c>
 800c868:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 800c86c:	191c      	adds	r4, r3, r4
 800c86e:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800c872:	e0a9      	b.n	800c9c8 <mktime+0x2a4>
 800c874:	f240 126d 	movw	r2, #365	; 0x16d
 800c878:	e7a8      	b.n	800c7cc <mktime+0xa8>
 800c87a:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800c87e:	e7a5      	b.n	800c7cc <mktime+0xa8>
 800c880:	d0a8      	beq.n	800c7d4 <mktime+0xb0>
 800c882:	2345      	movs	r3, #69	; 0x45
 800c884:	f240 1c6d 	movw	ip, #365	; 0x16d
 800c888:	2164      	movs	r1, #100	; 0x64
 800c88a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800c88e:	e012      	b.n	800c8b6 <mktime+0x192>
 800c890:	bb62      	cbnz	r2, 800c8ec <mktime+0x1c8>
 800c892:	fb93 f2f1 	sdiv	r2, r3, r1
 800c896:	fb01 3212 	mls	r2, r1, r2, r3
 800c89a:	bb52      	cbnz	r2, 800c8f2 <mktime+0x1ce>
 800c89c:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800c8a0:	fb92 fef0 	sdiv	lr, r2, r0
 800c8a4:	fb00 221e 	mls	r2, r0, lr, r2
 800c8a8:	2a00      	cmp	r2, #0
 800c8aa:	bf14      	ite	ne
 800c8ac:	4662      	movne	r2, ip
 800c8ae:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800c8b2:	1aad      	subs	r5, r5, r2
 800c8b4:	3b01      	subs	r3, #1
 800c8b6:	429e      	cmp	r6, r3
 800c8b8:	f003 0203 	and.w	r2, r3, #3
 800c8bc:	dbe8      	blt.n	800c890 <mktime+0x16c>
 800c8be:	b9da      	cbnz	r2, 800c8f8 <mktime+0x1d4>
 800c8c0:	2264      	movs	r2, #100	; 0x64
 800c8c2:	fb96 f3f2 	sdiv	r3, r6, r2
 800c8c6:	fb02 6313 	mls	r3, r2, r3, r6
 800c8ca:	b9c3      	cbnz	r3, 800c8fe <mktime+0x1da>
 800c8cc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c8d0:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800c8d4:	fb93 f1f2 	sdiv	r1, r3, r2
 800c8d8:	fb02 3311 	mls	r3, r2, r1, r3
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	f240 136d 	movw	r3, #365	; 0x16d
 800c8e2:	bf08      	it	eq
 800c8e4:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 800c8e8:	1aed      	subs	r5, r5, r3
 800c8ea:	e773      	b.n	800c7d4 <mktime+0xb0>
 800c8ec:	f240 126d 	movw	r2, #365	; 0x16d
 800c8f0:	e7df      	b.n	800c8b2 <mktime+0x18e>
 800c8f2:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800c8f6:	e7dc      	b.n	800c8b2 <mktime+0x18e>
 800c8f8:	f240 136d 	movw	r3, #365	; 0x16d
 800c8fc:	e7f4      	b.n	800c8e8 <mktime+0x1c4>
 800c8fe:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800c902:	e7f1      	b.n	800c8e8 <mktime+0x1c4>
 800c904:	f000 f8aa 	bl	800ca5c <__tzcalc_limits>
 800c908:	2800      	cmp	r0, #0
 800c90a:	d181      	bne.n	800c810 <mktime+0xec>
 800c90c:	46d3      	mov	fp, sl
 800c90e:	e050      	b.n	800c9b2 <mktime+0x28e>
 800c910:	9a01      	ldr	r2, [sp, #4]
 800c912:	1a12      	subs	r2, r2, r0
 800c914:	9201      	str	r2, [sp, #4]
 800c916:	ea4f 72e0 	mov.w	r2, r0, asr #31
 800c91a:	eb6c 0c02 	sbc.w	ip, ip, r2
 800c91e:	9a01      	ldr	r2, [sp, #4]
 800c920:	4294      	cmp	r4, r2
 800c922:	eb78 0c0c 	sbcs.w	ip, r8, ip
 800c926:	dbf1      	blt.n	800c90c <mktime+0x1e8>
 800c928:	e78b      	b.n	800c842 <mktime+0x11e>
 800c92a:	9a02      	ldr	r2, [sp, #8]
 800c92c:	4294      	cmp	r4, r2
 800c92e:	9a03      	ldr	r2, [sp, #12]
 800c930:	eb78 0202 	sbcs.w	r2, r8, r2
 800c934:	db8f      	blt.n	800c856 <mktime+0x132>
 800c936:	f1bb 0f00 	cmp.w	fp, #0
 800c93a:	db3e      	blt.n	800c9ba <mktime+0x296>
 800c93c:	f04f 0b01 	mov.w	fp, #1
 800c940:	ea8a 0a0b 	eor.w	sl, sl, fp
 800c944:	f1ba 0f01 	cmp.w	sl, #1
 800c948:	d133      	bne.n	800c9b2 <mktime+0x28e>
 800c94a:	f1bb 0f00 	cmp.w	fp, #0
 800c94e:	d04e      	beq.n	800c9ee <mktime+0x2ca>
 800c950:	1a1b      	subs	r3, r3, r0
 800c952:	683a      	ldr	r2, [r7, #0]
 800c954:	191c      	adds	r4, r3, r4
 800c956:	441a      	add	r2, r3
 800c958:	603a      	str	r2, [r7, #0]
 800c95a:	4638      	mov	r0, r7
 800c95c:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 800c960:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800c964:	f7ff fe08 	bl	800c578 <validate_structure>
 800c968:	68fa      	ldr	r2, [r7, #12]
 800c96a:	ebb2 020a 	subs.w	r2, r2, sl
 800c96e:	d020      	beq.n	800c9b2 <mktime+0x28e>
 800c970:	2a01      	cmp	r2, #1
 800c972:	dc3e      	bgt.n	800c9f2 <mktime+0x2ce>
 800c974:	1c91      	adds	r1, r2, #2
 800c976:	bfd8      	it	le
 800c978:	2201      	movle	r2, #1
 800c97a:	69fb      	ldr	r3, [r7, #28]
 800c97c:	4415      	add	r5, r2
 800c97e:	18d2      	adds	r2, r2, r3
 800c980:	d540      	bpl.n	800ca04 <mktime+0x2e0>
 800c982:	1e73      	subs	r3, r6, #1
 800c984:	079a      	lsls	r2, r3, #30
 800c986:	d137      	bne.n	800c9f8 <mktime+0x2d4>
 800c988:	2264      	movs	r2, #100	; 0x64
 800c98a:	fb93 f1f2 	sdiv	r1, r3, r2
 800c98e:	fb02 3311 	mls	r3, r2, r1, r3
 800c992:	bba3      	cbnz	r3, 800c9fe <mktime+0x2da>
 800c994:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800c998:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 800c99c:	fb96 f2f3 	sdiv	r2, r6, r3
 800c9a0:	fb03 6612 	mls	r6, r3, r2, r6
 800c9a4:	2e00      	cmp	r6, #0
 800c9a6:	f240 136d 	movw	r3, #365	; 0x16d
 800c9aa:	bf18      	it	ne
 800c9ac:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 800c9b0:	61fb      	str	r3, [r7, #28]
 800c9b2:	f1bb 0f01 	cmp.w	fp, #1
 800c9b6:	f47f af57 	bne.w	800c868 <mktime+0x144>
 800c9ba:	f04f 0b01 	mov.w	fp, #1
 800c9be:	f8d9 3050 	ldr.w	r3, [r9, #80]	; 0x50
 800c9c2:	191c      	adds	r4, r3, r4
 800c9c4:	eb48 78e3 	adc.w	r8, r8, r3, asr #31
 800c9c8:	f000 f8f4 	bl	800cbb4 <__tz_unlock>
 800c9cc:	2307      	movs	r3, #7
 800c9ce:	3504      	adds	r5, #4
 800c9d0:	fb95 f3f3 	sdiv	r3, r5, r3
 800c9d4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800c9d8:	1aed      	subs	r5, r5, r3
 800c9da:	bf48      	it	mi
 800c9dc:	3507      	addmi	r5, #7
 800c9de:	f8c7 b020 	str.w	fp, [r7, #32]
 800c9e2:	61bd      	str	r5, [r7, #24]
 800c9e4:	4620      	mov	r0, r4
 800c9e6:	4641      	mov	r1, r8
 800c9e8:	b005      	add	sp, #20
 800c9ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ee:	1ac3      	subs	r3, r0, r3
 800c9f0:	e7af      	b.n	800c952 <mktime+0x22e>
 800c9f2:	f04f 32ff 	mov.w	r2, #4294967295
 800c9f6:	e7c0      	b.n	800c97a <mktime+0x256>
 800c9f8:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800c9fc:	e7d8      	b.n	800c9b0 <mktime+0x28c>
 800c9fe:	f240 136d 	movw	r3, #365	; 0x16d
 800ca02:	e7d5      	b.n	800c9b0 <mktime+0x28c>
 800ca04:	07b3      	lsls	r3, r6, #30
 800ca06:	d118      	bne.n	800ca3a <mktime+0x316>
 800ca08:	2164      	movs	r1, #100	; 0x64
 800ca0a:	fb96 f3f1 	sdiv	r3, r6, r1
 800ca0e:	fb01 6313 	mls	r3, r1, r3, r6
 800ca12:	b9db      	cbnz	r3, 800ca4c <mktime+0x328>
 800ca14:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800ca18:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 800ca1c:	fb96 f1f3 	sdiv	r1, r6, r3
 800ca20:	fb03 6611 	mls	r6, r3, r1, r6
 800ca24:	2e00      	cmp	r6, #0
 800ca26:	f240 136d 	movw	r3, #365	; 0x16d
 800ca2a:	bf08      	it	eq
 800ca2c:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 800ca30:	429a      	cmp	r2, r3
 800ca32:	bfa8      	it	ge
 800ca34:	1ad2      	subge	r2, r2, r3
 800ca36:	61fa      	str	r2, [r7, #28]
 800ca38:	e7bb      	b.n	800c9b2 <mktime+0x28e>
 800ca3a:	f240 136d 	movw	r3, #365	; 0x16d
 800ca3e:	e7f7      	b.n	800ca30 <mktime+0x30c>
 800ca40:	0801093c 	.word	0x0801093c
 800ca44:	00015180 	.word	0x00015180
 800ca48:	200034c0 	.word	0x200034c0
 800ca4c:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800ca50:	e7ee      	b.n	800ca30 <mktime+0x30c>
 800ca52:	f04f 34ff 	mov.w	r4, #4294967295
 800ca56:	46a0      	mov	r8, r4
 800ca58:	e7c4      	b.n	800c9e4 <mktime+0x2c0>
 800ca5a:	bf00      	nop

0800ca5c <__tzcalc_limits>:
 800ca5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca60:	4605      	mov	r5, r0
 800ca62:	f002 fdfd 	bl	800f660 <__gettzinfo>
 800ca66:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800ca6a:	429d      	cmp	r5, r3
 800ca6c:	f340 8096 	ble.w	800cb9c <__tzcalc_limits+0x140>
 800ca70:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 800ca74:	18ac      	adds	r4, r5, r2
 800ca76:	f240 126d 	movw	r2, #365	; 0x16d
 800ca7a:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 800ca7e:	10a4      	asrs	r4, r4, #2
 800ca80:	fb02 4403 	mla	r4, r2, r3, r4
 800ca84:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800ca88:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 800ca8c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca90:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 800ca94:	441c      	add	r4, r3
 800ca96:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800ca9a:	186a      	adds	r2, r5, r1
 800ca9c:	fbb2 f2f3 	udiv	r2, r2, r3
 800caa0:	fb95 fcf3 	sdiv	ip, r5, r3
 800caa4:	4414      	add	r4, r2
 800caa6:	2264      	movs	r2, #100	; 0x64
 800caa8:	fb03 5c1c 	mls	ip, r3, ip, r5
 800caac:	fb95 f7f2 	sdiv	r7, r5, r2
 800cab0:	fabc f68c 	clz	r6, ip
 800cab4:	4601      	mov	r1, r0
 800cab6:	fb02 5717 	mls	r7, r2, r7, r5
 800caba:	6045      	str	r5, [r0, #4]
 800cabc:	0976      	lsrs	r6, r6, #5
 800cabe:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 800cac2:	f005 0203 	and.w	r2, r5, #3
 800cac6:	7a0d      	ldrb	r5, [r1, #8]
 800cac8:	694b      	ldr	r3, [r1, #20]
 800caca:	2d4a      	cmp	r5, #74	; 0x4a
 800cacc:	d12b      	bne.n	800cb26 <__tzcalc_limits+0xca>
 800cace:	18e5      	adds	r5, r4, r3
 800cad0:	b902      	cbnz	r2, 800cad4 <__tzcalc_limits+0x78>
 800cad2:	b917      	cbnz	r7, 800cada <__tzcalc_limits+0x7e>
 800cad4:	f1bc 0f00 	cmp.w	ip, #0
 800cad8:	d123      	bne.n	800cb22 <__tzcalc_limits+0xc6>
 800cada:	2b3b      	cmp	r3, #59	; 0x3b
 800cadc:	bfd4      	ite	le
 800cade:	2300      	movle	r3, #0
 800cae0:	2301      	movgt	r3, #1
 800cae2:	442b      	add	r3, r5
 800cae4:	3b01      	subs	r3, #1
 800cae6:	698d      	ldr	r5, [r1, #24]
 800cae8:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 800cba0 <__tzcalc_limits+0x144>
 800caec:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 800caf0:	fbc3 5e08 	smlal	r5, lr, r3, r8
 800caf4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800caf6:	18ed      	adds	r5, r5, r3
 800caf8:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 800cafc:	e9c1 5308 	strd	r5, r3, [r1, #32]
 800cb00:	3128      	adds	r1, #40	; 0x28
 800cb02:	458b      	cmp	fp, r1
 800cb04:	d1df      	bne.n	800cac6 <__tzcalc_limits+0x6a>
 800cb06:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 800cb0a:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	; 0x48
 800cb0e:	428c      	cmp	r4, r1
 800cb10:	4193      	sbcs	r3, r2
 800cb12:	bfb4      	ite	lt
 800cb14:	2301      	movlt	r3, #1
 800cb16:	2300      	movge	r3, #0
 800cb18:	6003      	str	r3, [r0, #0]
 800cb1a:	2001      	movs	r0, #1
 800cb1c:	b003      	add	sp, #12
 800cb1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb22:	2300      	movs	r3, #0
 800cb24:	e7dd      	b.n	800cae2 <__tzcalc_limits+0x86>
 800cb26:	2d44      	cmp	r5, #68	; 0x44
 800cb28:	d101      	bne.n	800cb2e <__tzcalc_limits+0xd2>
 800cb2a:	4423      	add	r3, r4
 800cb2c:	e7db      	b.n	800cae6 <__tzcalc_limits+0x8a>
 800cb2e:	bb7a      	cbnz	r2, 800cb90 <__tzcalc_limits+0x134>
 800cb30:	2f00      	cmp	r7, #0
 800cb32:	bf0c      	ite	eq
 800cb34:	4635      	moveq	r5, r6
 800cb36:	2501      	movne	r5, #1
 800cb38:	f04f 0a30 	mov.w	sl, #48	; 0x30
 800cb3c:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 800cb40:	f04f 0800 	mov.w	r8, #0
 800cb44:	f8cd e004 	str.w	lr, [sp, #4]
 800cb48:	46a6      	mov	lr, r4
 800cb4a:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800cba4 <__tzcalc_limits+0x148>
 800cb4e:	fb0a 9505 	mla	r5, sl, r5, r9
 800cb52:	3d04      	subs	r5, #4
 800cb54:	f8dd a004 	ldr.w	sl, [sp, #4]
 800cb58:	f108 0801 	add.w	r8, r8, #1
 800cb5c:	45c2      	cmp	sl, r8
 800cb5e:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 800cb62:	dc17      	bgt.n	800cb94 <__tzcalc_limits+0x138>
 800cb64:	f04f 0807 	mov.w	r8, #7
 800cb68:	f10e 0504 	add.w	r5, lr, #4
 800cb6c:	fb95 f8f8 	sdiv	r8, r5, r8
 800cb70:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 800cb74:	eba5 0508 	sub.w	r5, r5, r8
 800cb78:	1b5d      	subs	r5, r3, r5
 800cb7a:	690b      	ldr	r3, [r1, #16]
 800cb7c:	bf48      	it	mi
 800cb7e:	3507      	addmi	r5, #7
 800cb80:	3b01      	subs	r3, #1
 800cb82:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800cb86:	442b      	add	r3, r5
 800cb88:	454b      	cmp	r3, r9
 800cb8a:	da05      	bge.n	800cb98 <__tzcalc_limits+0x13c>
 800cb8c:	4473      	add	r3, lr
 800cb8e:	e7aa      	b.n	800cae6 <__tzcalc_limits+0x8a>
 800cb90:	4635      	mov	r5, r6
 800cb92:	e7d1      	b.n	800cb38 <__tzcalc_limits+0xdc>
 800cb94:	44ce      	add	lr, r9
 800cb96:	e7dd      	b.n	800cb54 <__tzcalc_limits+0xf8>
 800cb98:	3b07      	subs	r3, #7
 800cb9a:	e7f5      	b.n	800cb88 <__tzcalc_limits+0x12c>
 800cb9c:	2000      	movs	r0, #0
 800cb9e:	e7bd      	b.n	800cb1c <__tzcalc_limits+0xc0>
 800cba0:	00015180 	.word	0x00015180
 800cba4:	08010c40 	.word	0x08010c40

0800cba8 <__tz_lock>:
 800cba8:	4801      	ldr	r0, [pc, #4]	; (800cbb0 <__tz_lock+0x8>)
 800cbaa:	f000 bb0c 	b.w	800d1c6 <__retarget_lock_acquire>
 800cbae:	bf00      	nop
 800cbb0:	200034cf 	.word	0x200034cf

0800cbb4 <__tz_unlock>:
 800cbb4:	4801      	ldr	r0, [pc, #4]	; (800cbbc <__tz_unlock+0x8>)
 800cbb6:	f000 bb08 	b.w	800d1ca <__retarget_lock_release>
 800cbba:	bf00      	nop
 800cbbc:	200034cf 	.word	0x200034cf

0800cbc0 <_tzset_unlocked>:
 800cbc0:	4b01      	ldr	r3, [pc, #4]	; (800cbc8 <_tzset_unlocked+0x8>)
 800cbc2:	6818      	ldr	r0, [r3, #0]
 800cbc4:	f000 b802 	b.w	800cbcc <_tzset_unlocked_r>
 800cbc8:	200001e0 	.word	0x200001e0

0800cbcc <_tzset_unlocked_r>:
 800cbcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbd0:	b08d      	sub	sp, #52	; 0x34
 800cbd2:	4607      	mov	r7, r0
 800cbd4:	f002 fd44 	bl	800f660 <__gettzinfo>
 800cbd8:	496d      	ldr	r1, [pc, #436]	; (800cd90 <_tzset_unlocked_r+0x1c4>)
 800cbda:	4604      	mov	r4, r0
 800cbdc:	4638      	mov	r0, r7
 800cbde:	f001 fda5 	bl	800e72c <_getenv_r>
 800cbe2:	4d6c      	ldr	r5, [pc, #432]	; (800cd94 <_tzset_unlocked_r+0x1c8>)
 800cbe4:	4606      	mov	r6, r0
 800cbe6:	bb10      	cbnz	r0, 800cc2e <_tzset_unlocked_r+0x62>
 800cbe8:	4b6b      	ldr	r3, [pc, #428]	; (800cd98 <_tzset_unlocked_r+0x1cc>)
 800cbea:	4a6c      	ldr	r2, [pc, #432]	; (800cd9c <_tzset_unlocked_r+0x1d0>)
 800cbec:	6018      	str	r0, [r3, #0]
 800cbee:	4b6c      	ldr	r3, [pc, #432]	; (800cda0 <_tzset_unlocked_r+0x1d4>)
 800cbf0:	214a      	movs	r1, #74	; 0x4a
 800cbf2:	6018      	str	r0, [r3, #0]
 800cbf4:	4b6b      	ldr	r3, [pc, #428]	; (800cda4 <_tzset_unlocked_r+0x1d8>)
 800cbf6:	e9c4 0003 	strd	r0, r0, [r4, #12]
 800cbfa:	e9c3 2200 	strd	r2, r2, [r3]
 800cbfe:	2200      	movs	r2, #0
 800cc00:	2300      	movs	r3, #0
 800cc02:	e9c4 0005 	strd	r0, r0, [r4, #20]
 800cc06:	e9c4 000d 	strd	r0, r0, [r4, #52]	; 0x34
 800cc0a:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 800cc0e:	62a0      	str	r0, [r4, #40]	; 0x28
 800cc10:	6520      	str	r0, [r4, #80]	; 0x50
 800cc12:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800cc16:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cc1a:	6828      	ldr	r0, [r5, #0]
 800cc1c:	7221      	strb	r1, [r4, #8]
 800cc1e:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 800cc22:	f7fd fecb 	bl	800a9bc <free>
 800cc26:	602e      	str	r6, [r5, #0]
 800cc28:	b00d      	add	sp, #52	; 0x34
 800cc2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc2e:	6829      	ldr	r1, [r5, #0]
 800cc30:	2900      	cmp	r1, #0
 800cc32:	f040 808e 	bne.w	800cd52 <_tzset_unlocked_r+0x186>
 800cc36:	6828      	ldr	r0, [r5, #0]
 800cc38:	f7fd fec0 	bl	800a9bc <free>
 800cc3c:	4630      	mov	r0, r6
 800cc3e:	f7f3 fb01 	bl	8000244 <strlen>
 800cc42:	1c41      	adds	r1, r0, #1
 800cc44:	4638      	mov	r0, r7
 800cc46:	f7fd fee1 	bl	800aa0c <_malloc_r>
 800cc4a:	6028      	str	r0, [r5, #0]
 800cc4c:	2800      	cmp	r0, #0
 800cc4e:	f040 8086 	bne.w	800cd5e <_tzset_unlocked_r+0x192>
 800cc52:	2300      	movs	r3, #0
 800cc54:	4a52      	ldr	r2, [pc, #328]	; (800cda0 <_tzset_unlocked_r+0x1d4>)
 800cc56:	2000      	movs	r0, #0
 800cc58:	6013      	str	r3, [r2, #0]
 800cc5a:	2100      	movs	r1, #0
 800cc5c:	4a52      	ldr	r2, [pc, #328]	; (800cda8 <_tzset_unlocked_r+0x1dc>)
 800cc5e:	f8df 8144 	ldr.w	r8, [pc, #324]	; 800cda4 <_tzset_unlocked_r+0x1d8>
 800cc62:	e9c4 3303 	strd	r3, r3, [r4, #12]
 800cc66:	e9c8 2200 	strd	r2, r2, [r8]
 800cc6a:	224a      	movs	r2, #74	; 0x4a
 800cc6c:	e9c4 3305 	strd	r3, r3, [r4, #20]
 800cc70:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800cc74:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 800cc78:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
 800cc7c:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800cc80:	f8df a114 	ldr.w	sl, [pc, #276]	; 800cd98 <_tzset_unlocked_r+0x1cc>
 800cc84:	7222      	strb	r2, [r4, #8]
 800cc86:	f8ca 3000 	str.w	r3, [sl]
 800cc8a:	62a3      	str	r3, [r4, #40]	; 0x28
 800cc8c:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
 800cc90:	6523      	str	r3, [r4, #80]	; 0x50
 800cc92:	7833      	ldrb	r3, [r6, #0]
 800cc94:	2b3a      	cmp	r3, #58	; 0x3a
 800cc96:	bf08      	it	eq
 800cc98:	3601      	addeq	r6, #1
 800cc9a:	7833      	ldrb	r3, [r6, #0]
 800cc9c:	2b3c      	cmp	r3, #60	; 0x3c
 800cc9e:	d162      	bne.n	800cd66 <_tzset_unlocked_r+0x19a>
 800cca0:	1c75      	adds	r5, r6, #1
 800cca2:	4628      	mov	r0, r5
 800cca4:	4a41      	ldr	r2, [pc, #260]	; (800cdac <_tzset_unlocked_r+0x1e0>)
 800cca6:	4942      	ldr	r1, [pc, #264]	; (800cdb0 <_tzset_unlocked_r+0x1e4>)
 800cca8:	ab0a      	add	r3, sp, #40	; 0x28
 800ccaa:	f002 fc95 	bl	800f5d8 <siscanf>
 800ccae:	2800      	cmp	r0, #0
 800ccb0:	ddba      	ble.n	800cc28 <_tzset_unlocked_r+0x5c>
 800ccb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccb4:	1eda      	subs	r2, r3, #3
 800ccb6:	2a07      	cmp	r2, #7
 800ccb8:	d8b6      	bhi.n	800cc28 <_tzset_unlocked_r+0x5c>
 800ccba:	5ceb      	ldrb	r3, [r5, r3]
 800ccbc:	2b3e      	cmp	r3, #62	; 0x3e
 800ccbe:	d1b3      	bne.n	800cc28 <_tzset_unlocked_r+0x5c>
 800ccc0:	3602      	adds	r6, #2
 800ccc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccc4:	18f5      	adds	r5, r6, r3
 800ccc6:	5cf3      	ldrb	r3, [r6, r3]
 800ccc8:	2b2d      	cmp	r3, #45	; 0x2d
 800ccca:	d15a      	bne.n	800cd82 <_tzset_unlocked_r+0x1b6>
 800cccc:	f04f 39ff 	mov.w	r9, #4294967295
 800ccd0:	3501      	adds	r5, #1
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	af08      	add	r7, sp, #32
 800ccd6:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ccda:	f8ad 3020 	strh.w	r3, [sp, #32]
 800ccde:	ab0a      	add	r3, sp, #40	; 0x28
 800cce0:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800cce4:	9303      	str	r3, [sp, #12]
 800cce6:	f10d 031e 	add.w	r3, sp, #30
 800ccea:	9300      	str	r3, [sp, #0]
 800ccec:	4628      	mov	r0, r5
 800ccee:	4931      	ldr	r1, [pc, #196]	; (800cdb4 <_tzset_unlocked_r+0x1e8>)
 800ccf0:	ab0a      	add	r3, sp, #40	; 0x28
 800ccf2:	aa07      	add	r2, sp, #28
 800ccf4:	f002 fc70 	bl	800f5d8 <siscanf>
 800ccf8:	2800      	cmp	r0, #0
 800ccfa:	dd95      	ble.n	800cc28 <_tzset_unlocked_r+0x5c>
 800ccfc:	223c      	movs	r2, #60	; 0x3c
 800ccfe:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800cd02:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 800cd06:	fb02 6603 	mla	r6, r2, r3, r6
 800cd0a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800cd0e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800cd12:	fb02 6603 	mla	r6, r2, r3, r6
 800cd16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd18:	fb09 f606 	mul.w	r6, r9, r6
 800cd1c:	eb05 0903 	add.w	r9, r5, r3
 800cd20:	5ceb      	ldrb	r3, [r5, r3]
 800cd22:	2b3c      	cmp	r3, #60	; 0x3c
 800cd24:	f040 80e7 	bne.w	800cef6 <_tzset_unlocked_r+0x32a>
 800cd28:	f109 0501 	add.w	r5, r9, #1
 800cd2c:	4628      	mov	r0, r5
 800cd2e:	4a22      	ldr	r2, [pc, #136]	; (800cdb8 <_tzset_unlocked_r+0x1ec>)
 800cd30:	491f      	ldr	r1, [pc, #124]	; (800cdb0 <_tzset_unlocked_r+0x1e4>)
 800cd32:	ab0a      	add	r3, sp, #40	; 0x28
 800cd34:	f002 fc50 	bl	800f5d8 <siscanf>
 800cd38:	2800      	cmp	r0, #0
 800cd3a:	dc41      	bgt.n	800cdc0 <_tzset_unlocked_r+0x1f4>
 800cd3c:	f899 3001 	ldrb.w	r3, [r9, #1]
 800cd40:	2b3e      	cmp	r3, #62	; 0x3e
 800cd42:	d13d      	bne.n	800cdc0 <_tzset_unlocked_r+0x1f4>
 800cd44:	4b19      	ldr	r3, [pc, #100]	; (800cdac <_tzset_unlocked_r+0x1e0>)
 800cd46:	62a6      	str	r6, [r4, #40]	; 0x28
 800cd48:	e9c8 3300 	strd	r3, r3, [r8]
 800cd4c:	f8ca 6000 	str.w	r6, [sl]
 800cd50:	e76a      	b.n	800cc28 <_tzset_unlocked_r+0x5c>
 800cd52:	f7f3 fa6d 	bl	8000230 <strcmp>
 800cd56:	2800      	cmp	r0, #0
 800cd58:	f47f af6d 	bne.w	800cc36 <_tzset_unlocked_r+0x6a>
 800cd5c:	e764      	b.n	800cc28 <_tzset_unlocked_r+0x5c>
 800cd5e:	4631      	mov	r1, r6
 800cd60:	f000 fa35 	bl	800d1ce <strcpy>
 800cd64:	e775      	b.n	800cc52 <_tzset_unlocked_r+0x86>
 800cd66:	4630      	mov	r0, r6
 800cd68:	4a10      	ldr	r2, [pc, #64]	; (800cdac <_tzset_unlocked_r+0x1e0>)
 800cd6a:	4914      	ldr	r1, [pc, #80]	; (800cdbc <_tzset_unlocked_r+0x1f0>)
 800cd6c:	ab0a      	add	r3, sp, #40	; 0x28
 800cd6e:	f002 fc33 	bl	800f5d8 <siscanf>
 800cd72:	2800      	cmp	r0, #0
 800cd74:	f77f af58 	ble.w	800cc28 <_tzset_unlocked_r+0x5c>
 800cd78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd7a:	3b03      	subs	r3, #3
 800cd7c:	2b07      	cmp	r3, #7
 800cd7e:	d9a0      	bls.n	800ccc2 <_tzset_unlocked_r+0xf6>
 800cd80:	e752      	b.n	800cc28 <_tzset_unlocked_r+0x5c>
 800cd82:	2b2b      	cmp	r3, #43	; 0x2b
 800cd84:	f04f 0901 	mov.w	r9, #1
 800cd88:	bf08      	it	eq
 800cd8a:	3501      	addeq	r5, #1
 800cd8c:	e7a1      	b.n	800ccd2 <_tzset_unlocked_r+0x106>
 800cd8e:	bf00      	nop
 800cd90:	0801096c 	.word	0x0801096c
 800cd94:	200034bc 	.word	0x200034bc
 800cd98:	200034c4 	.word	0x200034c4
 800cd9c:	0801096f 	.word	0x0801096f
 800cda0:	200034c0 	.word	0x200034c0
 800cda4:	20000020 	.word	0x20000020
 800cda8:	080109fd 	.word	0x080109fd
 800cdac:	200034b0 	.word	0x200034b0
 800cdb0:	08010973 	.word	0x08010973
 800cdb4:	080109a8 	.word	0x080109a8
 800cdb8:	200034a4 	.word	0x200034a4
 800cdbc:	08010986 	.word	0x08010986
 800cdc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdc2:	1eda      	subs	r2, r3, #3
 800cdc4:	2a07      	cmp	r2, #7
 800cdc6:	f63f af2f 	bhi.w	800cc28 <_tzset_unlocked_r+0x5c>
 800cdca:	5ceb      	ldrb	r3, [r5, r3]
 800cdcc:	2b3e      	cmp	r3, #62	; 0x3e
 800cdce:	f47f af2b 	bne.w	800cc28 <_tzset_unlocked_r+0x5c>
 800cdd2:	f109 0902 	add.w	r9, r9, #2
 800cdd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdd8:	eb09 0503 	add.w	r5, r9, r3
 800cddc:	f819 3003 	ldrb.w	r3, [r9, r3]
 800cde0:	2b2d      	cmp	r3, #45	; 0x2d
 800cde2:	f040 8097 	bne.w	800cf14 <_tzset_unlocked_r+0x348>
 800cde6:	f04f 39ff 	mov.w	r9, #4294967295
 800cdea:	3501      	adds	r5, #1
 800cdec:	2300      	movs	r3, #0
 800cdee:	f8ad 301c 	strh.w	r3, [sp, #28]
 800cdf2:	f8ad 301e 	strh.w	r3, [sp, #30]
 800cdf6:	f8ad 3020 	strh.w	r3, [sp, #32]
 800cdfa:	930a      	str	r3, [sp, #40]	; 0x28
 800cdfc:	ab0a      	add	r3, sp, #40	; 0x28
 800cdfe:	e9cd 7302 	strd	r7, r3, [sp, #8]
 800ce02:	9301      	str	r3, [sp, #4]
 800ce04:	f10d 031e 	add.w	r3, sp, #30
 800ce08:	9300      	str	r3, [sp, #0]
 800ce0a:	4628      	mov	r0, r5
 800ce0c:	4979      	ldr	r1, [pc, #484]	; (800cff4 <_tzset_unlocked_r+0x428>)
 800ce0e:	ab0a      	add	r3, sp, #40	; 0x28
 800ce10:	aa07      	add	r2, sp, #28
 800ce12:	f002 fbe1 	bl	800f5d8 <siscanf>
 800ce16:	2800      	cmp	r0, #0
 800ce18:	f300 8082 	bgt.w	800cf20 <_tzset_unlocked_r+0x354>
 800ce1c:	f5a6 6361 	sub.w	r3, r6, #3600	; 0xe10
 800ce20:	4627      	mov	r7, r4
 800ce22:	f04f 0b00 	mov.w	fp, #0
 800ce26:	9304      	str	r3, [sp, #16]
 800ce28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce2a:	441d      	add	r5, r3
 800ce2c:	782b      	ldrb	r3, [r5, #0]
 800ce2e:	2b2c      	cmp	r3, #44	; 0x2c
 800ce30:	bf08      	it	eq
 800ce32:	3501      	addeq	r5, #1
 800ce34:	f895 9000 	ldrb.w	r9, [r5]
 800ce38:	f1b9 0f4d 	cmp.w	r9, #77	; 0x4d
 800ce3c:	f040 8083 	bne.w	800cf46 <_tzset_unlocked_r+0x37a>
 800ce40:	ab0a      	add	r3, sp, #40	; 0x28
 800ce42:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 800ce46:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800ce4a:	aa09      	add	r2, sp, #36	; 0x24
 800ce4c:	9200      	str	r2, [sp, #0]
 800ce4e:	4628      	mov	r0, r5
 800ce50:	4969      	ldr	r1, [pc, #420]	; (800cff8 <_tzset_unlocked_r+0x42c>)
 800ce52:	9303      	str	r3, [sp, #12]
 800ce54:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 800ce58:	f002 fbbe 	bl	800f5d8 <siscanf>
 800ce5c:	2803      	cmp	r0, #3
 800ce5e:	f47f aee3 	bne.w	800cc28 <_tzset_unlocked_r+0x5c>
 800ce62:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 800ce66:	1e4b      	subs	r3, r1, #1
 800ce68:	2b0b      	cmp	r3, #11
 800ce6a:	f63f aedd 	bhi.w	800cc28 <_tzset_unlocked_r+0x5c>
 800ce6e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 800ce72:	1e53      	subs	r3, r2, #1
 800ce74:	2b04      	cmp	r3, #4
 800ce76:	f63f aed7 	bhi.w	800cc28 <_tzset_unlocked_r+0x5c>
 800ce7a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 800ce7e:	2b06      	cmp	r3, #6
 800ce80:	f63f aed2 	bhi.w	800cc28 <_tzset_unlocked_r+0x5c>
 800ce84:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800ce88:	f887 9008 	strb.w	r9, [r7, #8]
 800ce8c:	617b      	str	r3, [r7, #20]
 800ce8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce90:	eb05 0903 	add.w	r9, r5, r3
 800ce94:	2500      	movs	r5, #0
 800ce96:	2302      	movs	r3, #2
 800ce98:	f8ad 501e 	strh.w	r5, [sp, #30]
 800ce9c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800cea0:	f8ad 5020 	strh.w	r5, [sp, #32]
 800cea4:	950a      	str	r5, [sp, #40]	; 0x28
 800cea6:	f899 3000 	ldrb.w	r3, [r9]
 800ceaa:	2b2f      	cmp	r3, #47	; 0x2f
 800ceac:	d177      	bne.n	800cf9e <_tzset_unlocked_r+0x3d2>
 800ceae:	ab0a      	add	r3, sp, #40	; 0x28
 800ceb0:	aa08      	add	r2, sp, #32
 800ceb2:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800ceb6:	f10d 021e 	add.w	r2, sp, #30
 800ceba:	9200      	str	r2, [sp, #0]
 800cebc:	4648      	mov	r0, r9
 800cebe:	494f      	ldr	r1, [pc, #316]	; (800cffc <_tzset_unlocked_r+0x430>)
 800cec0:	9303      	str	r3, [sp, #12]
 800cec2:	aa07      	add	r2, sp, #28
 800cec4:	f002 fb88 	bl	800f5d8 <siscanf>
 800cec8:	42a8      	cmp	r0, r5
 800ceca:	dc68      	bgt.n	800cf9e <_tzset_unlocked_r+0x3d2>
 800cecc:	214a      	movs	r1, #74	; 0x4a
 800cece:	2200      	movs	r2, #0
 800ced0:	2300      	movs	r3, #0
 800ced2:	e9c4 5503 	strd	r5, r5, [r4, #12]
 800ced6:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800ceda:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800cede:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cee2:	e9c4 550f 	strd	r5, r5, [r4, #60]	; 0x3c
 800cee6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ceea:	7221      	strb	r1, [r4, #8]
 800ceec:	62a5      	str	r5, [r4, #40]	; 0x28
 800ceee:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 800cef2:	6525      	str	r5, [r4, #80]	; 0x50
 800cef4:	e698      	b.n	800cc28 <_tzset_unlocked_r+0x5c>
 800cef6:	4648      	mov	r0, r9
 800cef8:	4a41      	ldr	r2, [pc, #260]	; (800d000 <_tzset_unlocked_r+0x434>)
 800cefa:	4942      	ldr	r1, [pc, #264]	; (800d004 <_tzset_unlocked_r+0x438>)
 800cefc:	ab0a      	add	r3, sp, #40	; 0x28
 800cefe:	f002 fb6b 	bl	800f5d8 <siscanf>
 800cf02:	2800      	cmp	r0, #0
 800cf04:	f77f af1e 	ble.w	800cd44 <_tzset_unlocked_r+0x178>
 800cf08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf0a:	3b03      	subs	r3, #3
 800cf0c:	2b07      	cmp	r3, #7
 800cf0e:	f67f af62 	bls.w	800cdd6 <_tzset_unlocked_r+0x20a>
 800cf12:	e689      	b.n	800cc28 <_tzset_unlocked_r+0x5c>
 800cf14:	2b2b      	cmp	r3, #43	; 0x2b
 800cf16:	f04f 0901 	mov.w	r9, #1
 800cf1a:	bf08      	it	eq
 800cf1c:	3501      	addeq	r5, #1
 800cf1e:	e765      	b.n	800cdec <_tzset_unlocked_r+0x220>
 800cf20:	213c      	movs	r1, #60	; 0x3c
 800cf22:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800cf26:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800cf2a:	fb01 3302 	mla	r3, r1, r2, r3
 800cf2e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800cf32:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800cf36:	fb01 3302 	mla	r3, r1, r2, r3
 800cf3a:	fb09 f303 	mul.w	r3, r9, r3
 800cf3e:	e76f      	b.n	800ce20 <_tzset_unlocked_r+0x254>
 800cf40:	f04f 0b01 	mov.w	fp, #1
 800cf44:	e772      	b.n	800ce2c <_tzset_unlocked_r+0x260>
 800cf46:	f1b9 0f4a 	cmp.w	r9, #74	; 0x4a
 800cf4a:	bf0a      	itet	eq
 800cf4c:	464b      	moveq	r3, r9
 800cf4e:	2344      	movne	r3, #68	; 0x44
 800cf50:	3501      	addeq	r5, #1
 800cf52:	220a      	movs	r2, #10
 800cf54:	4628      	mov	r0, r5
 800cf56:	a90b      	add	r1, sp, #44	; 0x2c
 800cf58:	9305      	str	r3, [sp, #20]
 800cf5a:	f002 f911 	bl	800f180 <strtoul>
 800cf5e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800cf62:	9b05      	ldr	r3, [sp, #20]
 800cf64:	45a9      	cmp	r9, r5
 800cf66:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800cf6a:	d114      	bne.n	800cf96 <_tzset_unlocked_r+0x3ca>
 800cf6c:	234d      	movs	r3, #77	; 0x4d
 800cf6e:	f1bb 0f00 	cmp.w	fp, #0
 800cf72:	d107      	bne.n	800cf84 <_tzset_unlocked_r+0x3b8>
 800cf74:	2103      	movs	r1, #3
 800cf76:	7223      	strb	r3, [r4, #8]
 800cf78:	2302      	movs	r3, #2
 800cf7a:	f8c4 b014 	str.w	fp, [r4, #20]
 800cf7e:	e9c4 1303 	strd	r1, r3, [r4, #12]
 800cf82:	e787      	b.n	800ce94 <_tzset_unlocked_r+0x2c8>
 800cf84:	220b      	movs	r2, #11
 800cf86:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
 800cf90:	2300      	movs	r3, #0
 800cf92:	63e3      	str	r3, [r4, #60]	; 0x3c
 800cf94:	e77e      	b.n	800ce94 <_tzset_unlocked_r+0x2c8>
 800cf96:	b280      	uxth	r0, r0
 800cf98:	723b      	strb	r3, [r7, #8]
 800cf9a:	6178      	str	r0, [r7, #20]
 800cf9c:	e77a      	b.n	800ce94 <_tzset_unlocked_r+0x2c8>
 800cf9e:	213c      	movs	r1, #60	; 0x3c
 800cfa0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800cfa4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800cfa8:	3728      	adds	r7, #40	; 0x28
 800cfaa:	fb01 3302 	mla	r3, r1, r2, r3
 800cfae:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800cfb2:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800cfb6:	fb01 3302 	mla	r3, r1, r2, r3
 800cfba:	f847 3c10 	str.w	r3, [r7, #-16]
 800cfbe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800cfc0:	444d      	add	r5, r9
 800cfc2:	f1bb 0f00 	cmp.w	fp, #0
 800cfc6:	d0bb      	beq.n	800cf40 <_tzset_unlocked_r+0x374>
 800cfc8:	9b04      	ldr	r3, [sp, #16]
 800cfca:	6860      	ldr	r0, [r4, #4]
 800cfcc:	6523      	str	r3, [r4, #80]	; 0x50
 800cfce:	4b0e      	ldr	r3, [pc, #56]	; (800d008 <_tzset_unlocked_r+0x43c>)
 800cfd0:	62a6      	str	r6, [r4, #40]	; 0x28
 800cfd2:	f8c8 3000 	str.w	r3, [r8]
 800cfd6:	4b0a      	ldr	r3, [pc, #40]	; (800d000 <_tzset_unlocked_r+0x434>)
 800cfd8:	f8c8 3004 	str.w	r3, [r8, #4]
 800cfdc:	f7ff fd3e 	bl	800ca5c <__tzcalc_limits>
 800cfe0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800cfe2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800cfe4:	f8ca 2000 	str.w	r2, [sl]
 800cfe8:	1a9b      	subs	r3, r3, r2
 800cfea:	bf18      	it	ne
 800cfec:	2301      	movne	r3, #1
 800cfee:	4a07      	ldr	r2, [pc, #28]	; (800d00c <_tzset_unlocked_r+0x440>)
 800cff0:	6013      	str	r3, [r2, #0]
 800cff2:	e619      	b.n	800cc28 <_tzset_unlocked_r+0x5c>
 800cff4:	080109a8 	.word	0x080109a8
 800cff8:	08010994 	.word	0x08010994
 800cffc:	080109a7 	.word	0x080109a7
 800d000:	200034a4 	.word	0x200034a4
 800d004:	08010986 	.word	0x08010986
 800d008:	200034b0 	.word	0x200034b0
 800d00c:	200034c0 	.word	0x200034c0

0800d010 <_localeconv_r>:
 800d010:	4800      	ldr	r0, [pc, #0]	; (800d014 <_localeconv_r+0x4>)
 800d012:	4770      	bx	lr
 800d014:	20000118 	.word	0x20000118

0800d018 <_close_r>:
 800d018:	b538      	push	{r3, r4, r5, lr}
 800d01a:	2300      	movs	r3, #0
 800d01c:	4d05      	ldr	r5, [pc, #20]	; (800d034 <_close_r+0x1c>)
 800d01e:	4604      	mov	r4, r0
 800d020:	4608      	mov	r0, r1
 800d022:	602b      	str	r3, [r5, #0]
 800d024:	f7f6 f976 	bl	8003314 <_close>
 800d028:	1c43      	adds	r3, r0, #1
 800d02a:	d102      	bne.n	800d032 <_close_r+0x1a>
 800d02c:	682b      	ldr	r3, [r5, #0]
 800d02e:	b103      	cbz	r3, 800d032 <_close_r+0x1a>
 800d030:	6023      	str	r3, [r4, #0]
 800d032:	bd38      	pop	{r3, r4, r5, pc}
 800d034:	200034c8 	.word	0x200034c8

0800d038 <_reclaim_reent>:
 800d038:	4b29      	ldr	r3, [pc, #164]	; (800d0e0 <_reclaim_reent+0xa8>)
 800d03a:	b570      	push	{r4, r5, r6, lr}
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	4604      	mov	r4, r0
 800d040:	4283      	cmp	r3, r0
 800d042:	d04b      	beq.n	800d0dc <_reclaim_reent+0xa4>
 800d044:	69c3      	ldr	r3, [r0, #28]
 800d046:	b143      	cbz	r3, 800d05a <_reclaim_reent+0x22>
 800d048:	68db      	ldr	r3, [r3, #12]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d144      	bne.n	800d0d8 <_reclaim_reent+0xa0>
 800d04e:	69e3      	ldr	r3, [r4, #28]
 800d050:	6819      	ldr	r1, [r3, #0]
 800d052:	b111      	cbz	r1, 800d05a <_reclaim_reent+0x22>
 800d054:	4620      	mov	r0, r4
 800d056:	f000 ff8b 	bl	800df70 <_free_r>
 800d05a:	6961      	ldr	r1, [r4, #20]
 800d05c:	b111      	cbz	r1, 800d064 <_reclaim_reent+0x2c>
 800d05e:	4620      	mov	r0, r4
 800d060:	f000 ff86 	bl	800df70 <_free_r>
 800d064:	69e1      	ldr	r1, [r4, #28]
 800d066:	b111      	cbz	r1, 800d06e <_reclaim_reent+0x36>
 800d068:	4620      	mov	r0, r4
 800d06a:	f000 ff81 	bl	800df70 <_free_r>
 800d06e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d070:	b111      	cbz	r1, 800d078 <_reclaim_reent+0x40>
 800d072:	4620      	mov	r0, r4
 800d074:	f000 ff7c 	bl	800df70 <_free_r>
 800d078:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d07a:	b111      	cbz	r1, 800d082 <_reclaim_reent+0x4a>
 800d07c:	4620      	mov	r0, r4
 800d07e:	f000 ff77 	bl	800df70 <_free_r>
 800d082:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d084:	b111      	cbz	r1, 800d08c <_reclaim_reent+0x54>
 800d086:	4620      	mov	r0, r4
 800d088:	f000 ff72 	bl	800df70 <_free_r>
 800d08c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d08e:	b111      	cbz	r1, 800d096 <_reclaim_reent+0x5e>
 800d090:	4620      	mov	r0, r4
 800d092:	f000 ff6d 	bl	800df70 <_free_r>
 800d096:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d098:	b111      	cbz	r1, 800d0a0 <_reclaim_reent+0x68>
 800d09a:	4620      	mov	r0, r4
 800d09c:	f000 ff68 	bl	800df70 <_free_r>
 800d0a0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d0a2:	b111      	cbz	r1, 800d0aa <_reclaim_reent+0x72>
 800d0a4:	4620      	mov	r0, r4
 800d0a6:	f000 ff63 	bl	800df70 <_free_r>
 800d0aa:	6a23      	ldr	r3, [r4, #32]
 800d0ac:	b1b3      	cbz	r3, 800d0dc <_reclaim_reent+0xa4>
 800d0ae:	4620      	mov	r0, r4
 800d0b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d0b4:	4718      	bx	r3
 800d0b6:	5949      	ldr	r1, [r1, r5]
 800d0b8:	b941      	cbnz	r1, 800d0cc <_reclaim_reent+0x94>
 800d0ba:	3504      	adds	r5, #4
 800d0bc:	69e3      	ldr	r3, [r4, #28]
 800d0be:	2d80      	cmp	r5, #128	; 0x80
 800d0c0:	68d9      	ldr	r1, [r3, #12]
 800d0c2:	d1f8      	bne.n	800d0b6 <_reclaim_reent+0x7e>
 800d0c4:	4620      	mov	r0, r4
 800d0c6:	f000 ff53 	bl	800df70 <_free_r>
 800d0ca:	e7c0      	b.n	800d04e <_reclaim_reent+0x16>
 800d0cc:	680e      	ldr	r6, [r1, #0]
 800d0ce:	4620      	mov	r0, r4
 800d0d0:	f000 ff4e 	bl	800df70 <_free_r>
 800d0d4:	4631      	mov	r1, r6
 800d0d6:	e7ef      	b.n	800d0b8 <_reclaim_reent+0x80>
 800d0d8:	2500      	movs	r5, #0
 800d0da:	e7ef      	b.n	800d0bc <_reclaim_reent+0x84>
 800d0dc:	bd70      	pop	{r4, r5, r6, pc}
 800d0de:	bf00      	nop
 800d0e0:	200001e0 	.word	0x200001e0

0800d0e4 <_lseek_r>:
 800d0e4:	b538      	push	{r3, r4, r5, lr}
 800d0e6:	4604      	mov	r4, r0
 800d0e8:	4608      	mov	r0, r1
 800d0ea:	4611      	mov	r1, r2
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	4d05      	ldr	r5, [pc, #20]	; (800d104 <_lseek_r+0x20>)
 800d0f0:	602a      	str	r2, [r5, #0]
 800d0f2:	461a      	mov	r2, r3
 800d0f4:	f7f6 f932 	bl	800335c <_lseek>
 800d0f8:	1c43      	adds	r3, r0, #1
 800d0fa:	d102      	bne.n	800d102 <_lseek_r+0x1e>
 800d0fc:	682b      	ldr	r3, [r5, #0]
 800d0fe:	b103      	cbz	r3, 800d102 <_lseek_r+0x1e>
 800d100:	6023      	str	r3, [r4, #0]
 800d102:	bd38      	pop	{r3, r4, r5, pc}
 800d104:	200034c8 	.word	0x200034c8

0800d108 <_read_r>:
 800d108:	b538      	push	{r3, r4, r5, lr}
 800d10a:	4604      	mov	r4, r0
 800d10c:	4608      	mov	r0, r1
 800d10e:	4611      	mov	r1, r2
 800d110:	2200      	movs	r2, #0
 800d112:	4d05      	ldr	r5, [pc, #20]	; (800d128 <_read_r+0x20>)
 800d114:	602a      	str	r2, [r5, #0]
 800d116:	461a      	mov	r2, r3
 800d118:	f7f6 f8c3 	bl	80032a2 <_read>
 800d11c:	1c43      	adds	r3, r0, #1
 800d11e:	d102      	bne.n	800d126 <_read_r+0x1e>
 800d120:	682b      	ldr	r3, [r5, #0]
 800d122:	b103      	cbz	r3, 800d126 <_read_r+0x1e>
 800d124:	6023      	str	r3, [r4, #0]
 800d126:	bd38      	pop	{r3, r4, r5, pc}
 800d128:	200034c8 	.word	0x200034c8

0800d12c <_sbrk_r>:
 800d12c:	b538      	push	{r3, r4, r5, lr}
 800d12e:	2300      	movs	r3, #0
 800d130:	4d05      	ldr	r5, [pc, #20]	; (800d148 <_sbrk_r+0x1c>)
 800d132:	4604      	mov	r4, r0
 800d134:	4608      	mov	r0, r1
 800d136:	602b      	str	r3, [r5, #0]
 800d138:	f7f6 f91c 	bl	8003374 <_sbrk>
 800d13c:	1c43      	adds	r3, r0, #1
 800d13e:	d102      	bne.n	800d146 <_sbrk_r+0x1a>
 800d140:	682b      	ldr	r3, [r5, #0]
 800d142:	b103      	cbz	r3, 800d146 <_sbrk_r+0x1a>
 800d144:	6023      	str	r3, [r4, #0]
 800d146:	bd38      	pop	{r3, r4, r5, pc}
 800d148:	200034c8 	.word	0x200034c8

0800d14c <_write_r>:
 800d14c:	b538      	push	{r3, r4, r5, lr}
 800d14e:	4604      	mov	r4, r0
 800d150:	4608      	mov	r0, r1
 800d152:	4611      	mov	r1, r2
 800d154:	2200      	movs	r2, #0
 800d156:	4d05      	ldr	r5, [pc, #20]	; (800d16c <_write_r+0x20>)
 800d158:	602a      	str	r2, [r5, #0]
 800d15a:	461a      	mov	r2, r3
 800d15c:	f7f6 f8be 	bl	80032dc <_write>
 800d160:	1c43      	adds	r3, r0, #1
 800d162:	d102      	bne.n	800d16a <_write_r+0x1e>
 800d164:	682b      	ldr	r3, [r5, #0]
 800d166:	b103      	cbz	r3, 800d16a <_write_r+0x1e>
 800d168:	6023      	str	r3, [r4, #0]
 800d16a:	bd38      	pop	{r3, r4, r5, pc}
 800d16c:	200034c8 	.word	0x200034c8

0800d170 <__errno>:
 800d170:	4b01      	ldr	r3, [pc, #4]	; (800d178 <__errno+0x8>)
 800d172:	6818      	ldr	r0, [r3, #0]
 800d174:	4770      	bx	lr
 800d176:	bf00      	nop
 800d178:	200001e0 	.word	0x200001e0

0800d17c <__libc_init_array>:
 800d17c:	b570      	push	{r4, r5, r6, lr}
 800d17e:	2600      	movs	r6, #0
 800d180:	4d0c      	ldr	r5, [pc, #48]	; (800d1b4 <__libc_init_array+0x38>)
 800d182:	4c0d      	ldr	r4, [pc, #52]	; (800d1b8 <__libc_init_array+0x3c>)
 800d184:	1b64      	subs	r4, r4, r5
 800d186:	10a4      	asrs	r4, r4, #2
 800d188:	42a6      	cmp	r6, r4
 800d18a:	d109      	bne.n	800d1a0 <__libc_init_array+0x24>
 800d18c:	f003 f8fa 	bl	8010384 <_init>
 800d190:	2600      	movs	r6, #0
 800d192:	4d0a      	ldr	r5, [pc, #40]	; (800d1bc <__libc_init_array+0x40>)
 800d194:	4c0a      	ldr	r4, [pc, #40]	; (800d1c0 <__libc_init_array+0x44>)
 800d196:	1b64      	subs	r4, r4, r5
 800d198:	10a4      	asrs	r4, r4, #2
 800d19a:	42a6      	cmp	r6, r4
 800d19c:	d105      	bne.n	800d1aa <__libc_init_array+0x2e>
 800d19e:	bd70      	pop	{r4, r5, r6, pc}
 800d1a0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1a4:	4798      	blx	r3
 800d1a6:	3601      	adds	r6, #1
 800d1a8:	e7ee      	b.n	800d188 <__libc_init_array+0xc>
 800d1aa:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1ae:	4798      	blx	r3
 800d1b0:	3601      	adds	r6, #1
 800d1b2:	e7f2      	b.n	800d19a <__libc_init_array+0x1e>
 800d1b4:	08010cbc 	.word	0x08010cbc
 800d1b8:	08010cbc 	.word	0x08010cbc
 800d1bc:	08010cbc 	.word	0x08010cbc
 800d1c0:	08010cc0 	.word	0x08010cc0

0800d1c4 <__retarget_lock_init_recursive>:
 800d1c4:	4770      	bx	lr

0800d1c6 <__retarget_lock_acquire>:
 800d1c6:	4770      	bx	lr

0800d1c8 <__retarget_lock_acquire_recursive>:
 800d1c8:	4770      	bx	lr

0800d1ca <__retarget_lock_release>:
 800d1ca:	4770      	bx	lr

0800d1cc <__retarget_lock_release_recursive>:
 800d1cc:	4770      	bx	lr

0800d1ce <strcpy>:
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d1d4:	f803 2b01 	strb.w	r2, [r3], #1
 800d1d8:	2a00      	cmp	r2, #0
 800d1da:	d1f9      	bne.n	800d1d0 <strcpy+0x2>
 800d1dc:	4770      	bx	lr

0800d1de <memchr>:
 800d1de:	4603      	mov	r3, r0
 800d1e0:	b510      	push	{r4, lr}
 800d1e2:	b2c9      	uxtb	r1, r1
 800d1e4:	4402      	add	r2, r0
 800d1e6:	4293      	cmp	r3, r2
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	d101      	bne.n	800d1f0 <memchr+0x12>
 800d1ec:	2000      	movs	r0, #0
 800d1ee:	e003      	b.n	800d1f8 <memchr+0x1a>
 800d1f0:	7804      	ldrb	r4, [r0, #0]
 800d1f2:	3301      	adds	r3, #1
 800d1f4:	428c      	cmp	r4, r1
 800d1f6:	d1f6      	bne.n	800d1e6 <memchr+0x8>
 800d1f8:	bd10      	pop	{r4, pc}

0800d1fa <memcpy>:
 800d1fa:	440a      	add	r2, r1
 800d1fc:	4291      	cmp	r1, r2
 800d1fe:	f100 33ff 	add.w	r3, r0, #4294967295
 800d202:	d100      	bne.n	800d206 <memcpy+0xc>
 800d204:	4770      	bx	lr
 800d206:	b510      	push	{r4, lr}
 800d208:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d20c:	4291      	cmp	r1, r2
 800d20e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d212:	d1f9      	bne.n	800d208 <memcpy+0xe>
 800d214:	bd10      	pop	{r4, pc}
	...

0800d218 <nan>:
 800d218:	2000      	movs	r0, #0
 800d21a:	4901      	ldr	r1, [pc, #4]	; (800d220 <nan+0x8>)
 800d21c:	4770      	bx	lr
 800d21e:	bf00      	nop
 800d220:	7ff80000 	.word	0x7ff80000

0800d224 <nanf>:
 800d224:	4800      	ldr	r0, [pc, #0]	; (800d228 <nanf+0x4>)
 800d226:	4770      	bx	lr
 800d228:	7fc00000 	.word	0x7fc00000

0800d22c <__assert_func>:
 800d22c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d22e:	4614      	mov	r4, r2
 800d230:	461a      	mov	r2, r3
 800d232:	4b09      	ldr	r3, [pc, #36]	; (800d258 <__assert_func+0x2c>)
 800d234:	4605      	mov	r5, r0
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	68d8      	ldr	r0, [r3, #12]
 800d23a:	b14c      	cbz	r4, 800d250 <__assert_func+0x24>
 800d23c:	4b07      	ldr	r3, [pc, #28]	; (800d25c <__assert_func+0x30>)
 800d23e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d242:	9100      	str	r1, [sp, #0]
 800d244:	462b      	mov	r3, r5
 800d246:	4906      	ldr	r1, [pc, #24]	; (800d260 <__assert_func+0x34>)
 800d248:	f002 f9b4 	bl	800f5b4 <fiprintf>
 800d24c:	f002 fa0c 	bl	800f668 <abort>
 800d250:	4b04      	ldr	r3, [pc, #16]	; (800d264 <__assert_func+0x38>)
 800d252:	461c      	mov	r4, r3
 800d254:	e7f3      	b.n	800d23e <__assert_func+0x12>
 800d256:	bf00      	nop
 800d258:	200001e0 	.word	0x200001e0
 800d25c:	080109c2 	.word	0x080109c2
 800d260:	080109cf 	.word	0x080109cf
 800d264:	080109fd 	.word	0x080109fd

0800d268 <div>:
 800d268:	b510      	push	{r4, lr}
 800d26a:	fb91 f4f2 	sdiv	r4, r1, r2
 800d26e:	2900      	cmp	r1, #0
 800d270:	fb02 1314 	mls	r3, r2, r4, r1
 800d274:	db06      	blt.n	800d284 <div+0x1c>
 800d276:	2b00      	cmp	r3, #0
 800d278:	da01      	bge.n	800d27e <div+0x16>
 800d27a:	3401      	adds	r4, #1
 800d27c:	1a9b      	subs	r3, r3, r2
 800d27e:	e9c0 4300 	strd	r4, r3, [r0]
 800d282:	bd10      	pop	{r4, pc}
 800d284:	2b00      	cmp	r3, #0
 800d286:	bfc4      	itt	gt
 800d288:	f104 34ff 	addgt.w	r4, r4, #4294967295
 800d28c:	189b      	addgt	r3, r3, r2
 800d28e:	e7f6      	b.n	800d27e <div+0x16>

0800d290 <quorem>:
 800d290:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d294:	6903      	ldr	r3, [r0, #16]
 800d296:	690c      	ldr	r4, [r1, #16]
 800d298:	4607      	mov	r7, r0
 800d29a:	42a3      	cmp	r3, r4
 800d29c:	db7f      	blt.n	800d39e <quorem+0x10e>
 800d29e:	3c01      	subs	r4, #1
 800d2a0:	f100 0514 	add.w	r5, r0, #20
 800d2a4:	f101 0814 	add.w	r8, r1, #20
 800d2a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d2ac:	9301      	str	r3, [sp, #4]
 800d2ae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d2b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d2b6:	3301      	adds	r3, #1
 800d2b8:	429a      	cmp	r2, r3
 800d2ba:	fbb2 f6f3 	udiv	r6, r2, r3
 800d2be:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d2c2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d2c6:	d331      	bcc.n	800d32c <quorem+0x9c>
 800d2c8:	f04f 0e00 	mov.w	lr, #0
 800d2cc:	4640      	mov	r0, r8
 800d2ce:	46ac      	mov	ip, r5
 800d2d0:	46f2      	mov	sl, lr
 800d2d2:	f850 2b04 	ldr.w	r2, [r0], #4
 800d2d6:	b293      	uxth	r3, r2
 800d2d8:	fb06 e303 	mla	r3, r6, r3, lr
 800d2dc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d2e0:	0c1a      	lsrs	r2, r3, #16
 800d2e2:	b29b      	uxth	r3, r3
 800d2e4:	fb06 220e 	mla	r2, r6, lr, r2
 800d2e8:	ebaa 0303 	sub.w	r3, sl, r3
 800d2ec:	f8dc a000 	ldr.w	sl, [ip]
 800d2f0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d2f4:	fa1f fa8a 	uxth.w	sl, sl
 800d2f8:	4453      	add	r3, sl
 800d2fa:	f8dc a000 	ldr.w	sl, [ip]
 800d2fe:	b292      	uxth	r2, r2
 800d300:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d304:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d308:	b29b      	uxth	r3, r3
 800d30a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d30e:	4581      	cmp	r9, r0
 800d310:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d314:	f84c 3b04 	str.w	r3, [ip], #4
 800d318:	d2db      	bcs.n	800d2d2 <quorem+0x42>
 800d31a:	f855 300b 	ldr.w	r3, [r5, fp]
 800d31e:	b92b      	cbnz	r3, 800d32c <quorem+0x9c>
 800d320:	9b01      	ldr	r3, [sp, #4]
 800d322:	3b04      	subs	r3, #4
 800d324:	429d      	cmp	r5, r3
 800d326:	461a      	mov	r2, r3
 800d328:	d32d      	bcc.n	800d386 <quorem+0xf6>
 800d32a:	613c      	str	r4, [r7, #16]
 800d32c:	4638      	mov	r0, r7
 800d32e:	f001 fcdb 	bl	800ece8 <__mcmp>
 800d332:	2800      	cmp	r0, #0
 800d334:	db23      	blt.n	800d37e <quorem+0xee>
 800d336:	4629      	mov	r1, r5
 800d338:	2000      	movs	r0, #0
 800d33a:	3601      	adds	r6, #1
 800d33c:	f858 2b04 	ldr.w	r2, [r8], #4
 800d340:	f8d1 c000 	ldr.w	ip, [r1]
 800d344:	b293      	uxth	r3, r2
 800d346:	1ac3      	subs	r3, r0, r3
 800d348:	0c12      	lsrs	r2, r2, #16
 800d34a:	fa1f f08c 	uxth.w	r0, ip
 800d34e:	4403      	add	r3, r0
 800d350:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d354:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d358:	b29b      	uxth	r3, r3
 800d35a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d35e:	45c1      	cmp	r9, r8
 800d360:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d364:	f841 3b04 	str.w	r3, [r1], #4
 800d368:	d2e8      	bcs.n	800d33c <quorem+0xac>
 800d36a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d36e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d372:	b922      	cbnz	r2, 800d37e <quorem+0xee>
 800d374:	3b04      	subs	r3, #4
 800d376:	429d      	cmp	r5, r3
 800d378:	461a      	mov	r2, r3
 800d37a:	d30a      	bcc.n	800d392 <quorem+0x102>
 800d37c:	613c      	str	r4, [r7, #16]
 800d37e:	4630      	mov	r0, r6
 800d380:	b003      	add	sp, #12
 800d382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d386:	6812      	ldr	r2, [r2, #0]
 800d388:	3b04      	subs	r3, #4
 800d38a:	2a00      	cmp	r2, #0
 800d38c:	d1cd      	bne.n	800d32a <quorem+0x9a>
 800d38e:	3c01      	subs	r4, #1
 800d390:	e7c8      	b.n	800d324 <quorem+0x94>
 800d392:	6812      	ldr	r2, [r2, #0]
 800d394:	3b04      	subs	r3, #4
 800d396:	2a00      	cmp	r2, #0
 800d398:	d1f0      	bne.n	800d37c <quorem+0xec>
 800d39a:	3c01      	subs	r4, #1
 800d39c:	e7eb      	b.n	800d376 <quorem+0xe6>
 800d39e:	2000      	movs	r0, #0
 800d3a0:	e7ee      	b.n	800d380 <quorem+0xf0>
 800d3a2:	0000      	movs	r0, r0
 800d3a4:	0000      	movs	r0, r0
	...

0800d3a8 <_dtoa_r>:
 800d3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3ac:	4616      	mov	r6, r2
 800d3ae:	461f      	mov	r7, r3
 800d3b0:	69c4      	ldr	r4, [r0, #28]
 800d3b2:	b099      	sub	sp, #100	; 0x64
 800d3b4:	4605      	mov	r5, r0
 800d3b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d3ba:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800d3be:	b974      	cbnz	r4, 800d3de <_dtoa_r+0x36>
 800d3c0:	2010      	movs	r0, #16
 800d3c2:	f7fd faf3 	bl	800a9ac <malloc>
 800d3c6:	4602      	mov	r2, r0
 800d3c8:	61e8      	str	r0, [r5, #28]
 800d3ca:	b920      	cbnz	r0, 800d3d6 <_dtoa_r+0x2e>
 800d3cc:	21ef      	movs	r1, #239	; 0xef
 800d3ce:	4bac      	ldr	r3, [pc, #688]	; (800d680 <_dtoa_r+0x2d8>)
 800d3d0:	48ac      	ldr	r0, [pc, #688]	; (800d684 <_dtoa_r+0x2dc>)
 800d3d2:	f7ff ff2b 	bl	800d22c <__assert_func>
 800d3d6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d3da:	6004      	str	r4, [r0, #0]
 800d3dc:	60c4      	str	r4, [r0, #12]
 800d3de:	69eb      	ldr	r3, [r5, #28]
 800d3e0:	6819      	ldr	r1, [r3, #0]
 800d3e2:	b151      	cbz	r1, 800d3fa <_dtoa_r+0x52>
 800d3e4:	685a      	ldr	r2, [r3, #4]
 800d3e6:	2301      	movs	r3, #1
 800d3e8:	4093      	lsls	r3, r2
 800d3ea:	604a      	str	r2, [r1, #4]
 800d3ec:	608b      	str	r3, [r1, #8]
 800d3ee:	4628      	mov	r0, r5
 800d3f0:	f001 f9f6 	bl	800e7e0 <_Bfree>
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	69eb      	ldr	r3, [r5, #28]
 800d3f8:	601a      	str	r2, [r3, #0]
 800d3fa:	1e3b      	subs	r3, r7, #0
 800d3fc:	bfaf      	iteee	ge
 800d3fe:	2300      	movge	r3, #0
 800d400:	2201      	movlt	r2, #1
 800d402:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d406:	9305      	strlt	r3, [sp, #20]
 800d408:	bfa8      	it	ge
 800d40a:	f8c8 3000 	strge.w	r3, [r8]
 800d40e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800d412:	4b9d      	ldr	r3, [pc, #628]	; (800d688 <_dtoa_r+0x2e0>)
 800d414:	bfb8      	it	lt
 800d416:	f8c8 2000 	strlt.w	r2, [r8]
 800d41a:	ea33 0309 	bics.w	r3, r3, r9
 800d41e:	d119      	bne.n	800d454 <_dtoa_r+0xac>
 800d420:	f242 730f 	movw	r3, #9999	; 0x270f
 800d424:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d426:	6013      	str	r3, [r2, #0]
 800d428:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d42c:	4333      	orrs	r3, r6
 800d42e:	f000 8589 	beq.w	800df44 <_dtoa_r+0xb9c>
 800d432:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d434:	b953      	cbnz	r3, 800d44c <_dtoa_r+0xa4>
 800d436:	4b95      	ldr	r3, [pc, #596]	; (800d68c <_dtoa_r+0x2e4>)
 800d438:	e023      	b.n	800d482 <_dtoa_r+0xda>
 800d43a:	4b95      	ldr	r3, [pc, #596]	; (800d690 <_dtoa_r+0x2e8>)
 800d43c:	9303      	str	r3, [sp, #12]
 800d43e:	3308      	adds	r3, #8
 800d440:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d442:	6013      	str	r3, [r2, #0]
 800d444:	9803      	ldr	r0, [sp, #12]
 800d446:	b019      	add	sp, #100	; 0x64
 800d448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d44c:	4b8f      	ldr	r3, [pc, #572]	; (800d68c <_dtoa_r+0x2e4>)
 800d44e:	9303      	str	r3, [sp, #12]
 800d450:	3303      	adds	r3, #3
 800d452:	e7f5      	b.n	800d440 <_dtoa_r+0x98>
 800d454:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800d458:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800d45c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d460:	2200      	movs	r2, #0
 800d462:	2300      	movs	r3, #0
 800d464:	f7f3 fb1a 	bl	8000a9c <__aeabi_dcmpeq>
 800d468:	4680      	mov	r8, r0
 800d46a:	b160      	cbz	r0, 800d486 <_dtoa_r+0xde>
 800d46c:	2301      	movs	r3, #1
 800d46e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800d470:	6013      	str	r3, [r2, #0]
 800d472:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d474:	2b00      	cmp	r3, #0
 800d476:	f000 8562 	beq.w	800df3e <_dtoa_r+0xb96>
 800d47a:	4b86      	ldr	r3, [pc, #536]	; (800d694 <_dtoa_r+0x2ec>)
 800d47c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800d47e:	6013      	str	r3, [r2, #0]
 800d480:	3b01      	subs	r3, #1
 800d482:	9303      	str	r3, [sp, #12]
 800d484:	e7de      	b.n	800d444 <_dtoa_r+0x9c>
 800d486:	ab16      	add	r3, sp, #88	; 0x58
 800d488:	9301      	str	r3, [sp, #4]
 800d48a:	ab17      	add	r3, sp, #92	; 0x5c
 800d48c:	9300      	str	r3, [sp, #0]
 800d48e:	4628      	mov	r0, r5
 800d490:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d494:	f001 fd38 	bl	800ef08 <__d2b>
 800d498:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d49c:	4682      	mov	sl, r0
 800d49e:	2c00      	cmp	r4, #0
 800d4a0:	d07e      	beq.n	800d5a0 <_dtoa_r+0x1f8>
 800d4a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d4a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d4a8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800d4ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d4b0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d4b4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d4b8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800d4bc:	4619      	mov	r1, r3
 800d4be:	2200      	movs	r2, #0
 800d4c0:	4b75      	ldr	r3, [pc, #468]	; (800d698 <_dtoa_r+0x2f0>)
 800d4c2:	f7f2 fecb 	bl	800025c <__aeabi_dsub>
 800d4c6:	a368      	add	r3, pc, #416	; (adr r3, 800d668 <_dtoa_r+0x2c0>)
 800d4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4cc:	f7f3 f87e 	bl	80005cc <__aeabi_dmul>
 800d4d0:	a367      	add	r3, pc, #412	; (adr r3, 800d670 <_dtoa_r+0x2c8>)
 800d4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d6:	f7f2 fec3 	bl	8000260 <__adddf3>
 800d4da:	4606      	mov	r6, r0
 800d4dc:	4620      	mov	r0, r4
 800d4de:	460f      	mov	r7, r1
 800d4e0:	f7f3 f80a 	bl	80004f8 <__aeabi_i2d>
 800d4e4:	a364      	add	r3, pc, #400	; (adr r3, 800d678 <_dtoa_r+0x2d0>)
 800d4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4ea:	f7f3 f86f 	bl	80005cc <__aeabi_dmul>
 800d4ee:	4602      	mov	r2, r0
 800d4f0:	460b      	mov	r3, r1
 800d4f2:	4630      	mov	r0, r6
 800d4f4:	4639      	mov	r1, r7
 800d4f6:	f7f2 feb3 	bl	8000260 <__adddf3>
 800d4fa:	4606      	mov	r6, r0
 800d4fc:	460f      	mov	r7, r1
 800d4fe:	f7f3 fb15 	bl	8000b2c <__aeabi_d2iz>
 800d502:	2200      	movs	r2, #0
 800d504:	4683      	mov	fp, r0
 800d506:	2300      	movs	r3, #0
 800d508:	4630      	mov	r0, r6
 800d50a:	4639      	mov	r1, r7
 800d50c:	f7f3 fad0 	bl	8000ab0 <__aeabi_dcmplt>
 800d510:	b148      	cbz	r0, 800d526 <_dtoa_r+0x17e>
 800d512:	4658      	mov	r0, fp
 800d514:	f7f2 fff0 	bl	80004f8 <__aeabi_i2d>
 800d518:	4632      	mov	r2, r6
 800d51a:	463b      	mov	r3, r7
 800d51c:	f7f3 fabe 	bl	8000a9c <__aeabi_dcmpeq>
 800d520:	b908      	cbnz	r0, 800d526 <_dtoa_r+0x17e>
 800d522:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d526:	f1bb 0f16 	cmp.w	fp, #22
 800d52a:	d857      	bhi.n	800d5dc <_dtoa_r+0x234>
 800d52c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d530:	4b5a      	ldr	r3, [pc, #360]	; (800d69c <_dtoa_r+0x2f4>)
 800d532:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d53a:	f7f3 fab9 	bl	8000ab0 <__aeabi_dcmplt>
 800d53e:	2800      	cmp	r0, #0
 800d540:	d04e      	beq.n	800d5e0 <_dtoa_r+0x238>
 800d542:	2300      	movs	r3, #0
 800d544:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d548:	930f      	str	r3, [sp, #60]	; 0x3c
 800d54a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800d54c:	1b1b      	subs	r3, r3, r4
 800d54e:	1e5a      	subs	r2, r3, #1
 800d550:	bf46      	itte	mi
 800d552:	f1c3 0901 	rsbmi	r9, r3, #1
 800d556:	2300      	movmi	r3, #0
 800d558:	f04f 0900 	movpl.w	r9, #0
 800d55c:	9209      	str	r2, [sp, #36]	; 0x24
 800d55e:	bf48      	it	mi
 800d560:	9309      	strmi	r3, [sp, #36]	; 0x24
 800d562:	f1bb 0f00 	cmp.w	fp, #0
 800d566:	db3d      	blt.n	800d5e4 <_dtoa_r+0x23c>
 800d568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d56a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800d56e:	445b      	add	r3, fp
 800d570:	9309      	str	r3, [sp, #36]	; 0x24
 800d572:	2300      	movs	r3, #0
 800d574:	930a      	str	r3, [sp, #40]	; 0x28
 800d576:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d578:	2b09      	cmp	r3, #9
 800d57a:	d867      	bhi.n	800d64c <_dtoa_r+0x2a4>
 800d57c:	2b05      	cmp	r3, #5
 800d57e:	bfc4      	itt	gt
 800d580:	3b04      	subgt	r3, #4
 800d582:	9322      	strgt	r3, [sp, #136]	; 0x88
 800d584:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800d586:	bfc8      	it	gt
 800d588:	2400      	movgt	r4, #0
 800d58a:	f1a3 0302 	sub.w	r3, r3, #2
 800d58e:	bfd8      	it	le
 800d590:	2401      	movle	r4, #1
 800d592:	2b03      	cmp	r3, #3
 800d594:	f200 8086 	bhi.w	800d6a4 <_dtoa_r+0x2fc>
 800d598:	e8df f003 	tbb	[pc, r3]
 800d59c:	5637392c 	.word	0x5637392c
 800d5a0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800d5a4:	441c      	add	r4, r3
 800d5a6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800d5aa:	2b20      	cmp	r3, #32
 800d5ac:	bfc1      	itttt	gt
 800d5ae:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d5b2:	fa09 f903 	lslgt.w	r9, r9, r3
 800d5b6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800d5ba:	fa26 f303 	lsrgt.w	r3, r6, r3
 800d5be:	bfd6      	itet	le
 800d5c0:	f1c3 0320 	rsble	r3, r3, #32
 800d5c4:	ea49 0003 	orrgt.w	r0, r9, r3
 800d5c8:	fa06 f003 	lslle.w	r0, r6, r3
 800d5cc:	f7f2 ff84 	bl	80004d8 <__aeabi_ui2d>
 800d5d0:	2201      	movs	r2, #1
 800d5d2:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800d5d6:	3c01      	subs	r4, #1
 800d5d8:	9213      	str	r2, [sp, #76]	; 0x4c
 800d5da:	e76f      	b.n	800d4bc <_dtoa_r+0x114>
 800d5dc:	2301      	movs	r3, #1
 800d5de:	e7b3      	b.n	800d548 <_dtoa_r+0x1a0>
 800d5e0:	900f      	str	r0, [sp, #60]	; 0x3c
 800d5e2:	e7b2      	b.n	800d54a <_dtoa_r+0x1a2>
 800d5e4:	f1cb 0300 	rsb	r3, fp, #0
 800d5e8:	930a      	str	r3, [sp, #40]	; 0x28
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	eba9 090b 	sub.w	r9, r9, fp
 800d5f0:	930e      	str	r3, [sp, #56]	; 0x38
 800d5f2:	e7c0      	b.n	800d576 <_dtoa_r+0x1ce>
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	930b      	str	r3, [sp, #44]	; 0x2c
 800d5f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	dc55      	bgt.n	800d6aa <_dtoa_r+0x302>
 800d5fe:	2301      	movs	r3, #1
 800d600:	461a      	mov	r2, r3
 800d602:	9306      	str	r3, [sp, #24]
 800d604:	9308      	str	r3, [sp, #32]
 800d606:	9223      	str	r2, [sp, #140]	; 0x8c
 800d608:	e00b      	b.n	800d622 <_dtoa_r+0x27a>
 800d60a:	2301      	movs	r3, #1
 800d60c:	e7f3      	b.n	800d5f6 <_dtoa_r+0x24e>
 800d60e:	2300      	movs	r3, #0
 800d610:	930b      	str	r3, [sp, #44]	; 0x2c
 800d612:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d614:	445b      	add	r3, fp
 800d616:	9306      	str	r3, [sp, #24]
 800d618:	3301      	adds	r3, #1
 800d61a:	2b01      	cmp	r3, #1
 800d61c:	9308      	str	r3, [sp, #32]
 800d61e:	bfb8      	it	lt
 800d620:	2301      	movlt	r3, #1
 800d622:	2100      	movs	r1, #0
 800d624:	2204      	movs	r2, #4
 800d626:	69e8      	ldr	r0, [r5, #28]
 800d628:	f102 0614 	add.w	r6, r2, #20
 800d62c:	429e      	cmp	r6, r3
 800d62e:	d940      	bls.n	800d6b2 <_dtoa_r+0x30a>
 800d630:	6041      	str	r1, [r0, #4]
 800d632:	4628      	mov	r0, r5
 800d634:	f001 f894 	bl	800e760 <_Balloc>
 800d638:	9003      	str	r0, [sp, #12]
 800d63a:	2800      	cmp	r0, #0
 800d63c:	d13c      	bne.n	800d6b8 <_dtoa_r+0x310>
 800d63e:	4602      	mov	r2, r0
 800d640:	f240 11af 	movw	r1, #431	; 0x1af
 800d644:	4b16      	ldr	r3, [pc, #88]	; (800d6a0 <_dtoa_r+0x2f8>)
 800d646:	e6c3      	b.n	800d3d0 <_dtoa_r+0x28>
 800d648:	2301      	movs	r3, #1
 800d64a:	e7e1      	b.n	800d610 <_dtoa_r+0x268>
 800d64c:	2401      	movs	r4, #1
 800d64e:	2300      	movs	r3, #0
 800d650:	940b      	str	r4, [sp, #44]	; 0x2c
 800d652:	9322      	str	r3, [sp, #136]	; 0x88
 800d654:	f04f 33ff 	mov.w	r3, #4294967295
 800d658:	2200      	movs	r2, #0
 800d65a:	9306      	str	r3, [sp, #24]
 800d65c:	9308      	str	r3, [sp, #32]
 800d65e:	2312      	movs	r3, #18
 800d660:	e7d1      	b.n	800d606 <_dtoa_r+0x25e>
 800d662:	bf00      	nop
 800d664:	f3af 8000 	nop.w
 800d668:	636f4361 	.word	0x636f4361
 800d66c:	3fd287a7 	.word	0x3fd287a7
 800d670:	8b60c8b3 	.word	0x8b60c8b3
 800d674:	3fc68a28 	.word	0x3fc68a28
 800d678:	509f79fb 	.word	0x509f79fb
 800d67c:	3fd34413 	.word	0x3fd34413
 800d680:	0801089b 	.word	0x0801089b
 800d684:	08010a0b 	.word	0x08010a0b
 800d688:	7ff00000 	.word	0x7ff00000
 800d68c:	08010a07 	.word	0x08010a07
 800d690:	080109fe 	.word	0x080109fe
 800d694:	08010cb7 	.word	0x08010cb7
 800d698:	3ff80000 	.word	0x3ff80000
 800d69c:	08010b58 	.word	0x08010b58
 800d6a0:	08010a63 	.word	0x08010a63
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800d6a8:	e7d4      	b.n	800d654 <_dtoa_r+0x2ac>
 800d6aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d6ac:	9306      	str	r3, [sp, #24]
 800d6ae:	9308      	str	r3, [sp, #32]
 800d6b0:	e7b7      	b.n	800d622 <_dtoa_r+0x27a>
 800d6b2:	3101      	adds	r1, #1
 800d6b4:	0052      	lsls	r2, r2, #1
 800d6b6:	e7b7      	b.n	800d628 <_dtoa_r+0x280>
 800d6b8:	69eb      	ldr	r3, [r5, #28]
 800d6ba:	9a03      	ldr	r2, [sp, #12]
 800d6bc:	601a      	str	r2, [r3, #0]
 800d6be:	9b08      	ldr	r3, [sp, #32]
 800d6c0:	2b0e      	cmp	r3, #14
 800d6c2:	f200 80a8 	bhi.w	800d816 <_dtoa_r+0x46e>
 800d6c6:	2c00      	cmp	r4, #0
 800d6c8:	f000 80a5 	beq.w	800d816 <_dtoa_r+0x46e>
 800d6cc:	f1bb 0f00 	cmp.w	fp, #0
 800d6d0:	dd34      	ble.n	800d73c <_dtoa_r+0x394>
 800d6d2:	4b9a      	ldr	r3, [pc, #616]	; (800d93c <_dtoa_r+0x594>)
 800d6d4:	f00b 020f 	and.w	r2, fp, #15
 800d6d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d6dc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d6e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d6e4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800d6e8:	ea4f 142b 	mov.w	r4, fp, asr #4
 800d6ec:	d016      	beq.n	800d71c <_dtoa_r+0x374>
 800d6ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d6f2:	4b93      	ldr	r3, [pc, #588]	; (800d940 <_dtoa_r+0x598>)
 800d6f4:	2703      	movs	r7, #3
 800d6f6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d6fa:	f7f3 f891 	bl	8000820 <__aeabi_ddiv>
 800d6fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d702:	f004 040f 	and.w	r4, r4, #15
 800d706:	4e8e      	ldr	r6, [pc, #568]	; (800d940 <_dtoa_r+0x598>)
 800d708:	b954      	cbnz	r4, 800d720 <_dtoa_r+0x378>
 800d70a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d70e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d712:	f7f3 f885 	bl	8000820 <__aeabi_ddiv>
 800d716:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d71a:	e029      	b.n	800d770 <_dtoa_r+0x3c8>
 800d71c:	2702      	movs	r7, #2
 800d71e:	e7f2      	b.n	800d706 <_dtoa_r+0x35e>
 800d720:	07e1      	lsls	r1, r4, #31
 800d722:	d508      	bpl.n	800d736 <_dtoa_r+0x38e>
 800d724:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d728:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d72c:	f7f2 ff4e 	bl	80005cc <__aeabi_dmul>
 800d730:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d734:	3701      	adds	r7, #1
 800d736:	1064      	asrs	r4, r4, #1
 800d738:	3608      	adds	r6, #8
 800d73a:	e7e5      	b.n	800d708 <_dtoa_r+0x360>
 800d73c:	f000 80a5 	beq.w	800d88a <_dtoa_r+0x4e2>
 800d740:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d744:	f1cb 0400 	rsb	r4, fp, #0
 800d748:	4b7c      	ldr	r3, [pc, #496]	; (800d93c <_dtoa_r+0x594>)
 800d74a:	f004 020f 	and.w	r2, r4, #15
 800d74e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d756:	f7f2 ff39 	bl	80005cc <__aeabi_dmul>
 800d75a:	2702      	movs	r7, #2
 800d75c:	2300      	movs	r3, #0
 800d75e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d762:	4e77      	ldr	r6, [pc, #476]	; (800d940 <_dtoa_r+0x598>)
 800d764:	1124      	asrs	r4, r4, #4
 800d766:	2c00      	cmp	r4, #0
 800d768:	f040 8084 	bne.w	800d874 <_dtoa_r+0x4cc>
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d1d2      	bne.n	800d716 <_dtoa_r+0x36e>
 800d770:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800d774:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800d778:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	f000 8087 	beq.w	800d88e <_dtoa_r+0x4e6>
 800d780:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d784:	2200      	movs	r2, #0
 800d786:	4b6f      	ldr	r3, [pc, #444]	; (800d944 <_dtoa_r+0x59c>)
 800d788:	f7f3 f992 	bl	8000ab0 <__aeabi_dcmplt>
 800d78c:	2800      	cmp	r0, #0
 800d78e:	d07e      	beq.n	800d88e <_dtoa_r+0x4e6>
 800d790:	9b08      	ldr	r3, [sp, #32]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d07b      	beq.n	800d88e <_dtoa_r+0x4e6>
 800d796:	9b06      	ldr	r3, [sp, #24]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	dd38      	ble.n	800d80e <_dtoa_r+0x466>
 800d79c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	4b69      	ldr	r3, [pc, #420]	; (800d948 <_dtoa_r+0x5a0>)
 800d7a4:	f7f2 ff12 	bl	80005cc <__aeabi_dmul>
 800d7a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d7ac:	9c06      	ldr	r4, [sp, #24]
 800d7ae:	f10b 38ff 	add.w	r8, fp, #4294967295
 800d7b2:	3701      	adds	r7, #1
 800d7b4:	4638      	mov	r0, r7
 800d7b6:	f7f2 fe9f 	bl	80004f8 <__aeabi_i2d>
 800d7ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d7be:	f7f2 ff05 	bl	80005cc <__aeabi_dmul>
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	4b61      	ldr	r3, [pc, #388]	; (800d94c <_dtoa_r+0x5a4>)
 800d7c6:	f7f2 fd4b 	bl	8000260 <__adddf3>
 800d7ca:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800d7ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d7d2:	9611      	str	r6, [sp, #68]	; 0x44
 800d7d4:	2c00      	cmp	r4, #0
 800d7d6:	d15d      	bne.n	800d894 <_dtoa_r+0x4ec>
 800d7d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d7dc:	2200      	movs	r2, #0
 800d7de:	4b5c      	ldr	r3, [pc, #368]	; (800d950 <_dtoa_r+0x5a8>)
 800d7e0:	f7f2 fd3c 	bl	800025c <__aeabi_dsub>
 800d7e4:	4602      	mov	r2, r0
 800d7e6:	460b      	mov	r3, r1
 800d7e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d7ec:	4633      	mov	r3, r6
 800d7ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d7f0:	f7f3 f97c 	bl	8000aec <__aeabi_dcmpgt>
 800d7f4:	2800      	cmp	r0, #0
 800d7f6:	f040 8295 	bne.w	800dd24 <_dtoa_r+0x97c>
 800d7fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d7fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d800:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d804:	f7f3 f954 	bl	8000ab0 <__aeabi_dcmplt>
 800d808:	2800      	cmp	r0, #0
 800d80a:	f040 8289 	bne.w	800dd20 <_dtoa_r+0x978>
 800d80e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800d812:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d816:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d818:	2b00      	cmp	r3, #0
 800d81a:	f2c0 8151 	blt.w	800dac0 <_dtoa_r+0x718>
 800d81e:	f1bb 0f0e 	cmp.w	fp, #14
 800d822:	f300 814d 	bgt.w	800dac0 <_dtoa_r+0x718>
 800d826:	4b45      	ldr	r3, [pc, #276]	; (800d93c <_dtoa_r+0x594>)
 800d828:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d82c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800d830:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800d834:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d836:	2b00      	cmp	r3, #0
 800d838:	f280 80da 	bge.w	800d9f0 <_dtoa_r+0x648>
 800d83c:	9b08      	ldr	r3, [sp, #32]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	f300 80d6 	bgt.w	800d9f0 <_dtoa_r+0x648>
 800d844:	f040 826b 	bne.w	800dd1e <_dtoa_r+0x976>
 800d848:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d84c:	2200      	movs	r2, #0
 800d84e:	4b40      	ldr	r3, [pc, #256]	; (800d950 <_dtoa_r+0x5a8>)
 800d850:	f7f2 febc 	bl	80005cc <__aeabi_dmul>
 800d854:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d858:	f7f3 f93e 	bl	8000ad8 <__aeabi_dcmpge>
 800d85c:	9c08      	ldr	r4, [sp, #32]
 800d85e:	4626      	mov	r6, r4
 800d860:	2800      	cmp	r0, #0
 800d862:	f040 8241 	bne.w	800dce8 <_dtoa_r+0x940>
 800d866:	2331      	movs	r3, #49	; 0x31
 800d868:	9f03      	ldr	r7, [sp, #12]
 800d86a:	f10b 0b01 	add.w	fp, fp, #1
 800d86e:	f807 3b01 	strb.w	r3, [r7], #1
 800d872:	e23d      	b.n	800dcf0 <_dtoa_r+0x948>
 800d874:	07e2      	lsls	r2, r4, #31
 800d876:	d505      	bpl.n	800d884 <_dtoa_r+0x4dc>
 800d878:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d87c:	f7f2 fea6 	bl	80005cc <__aeabi_dmul>
 800d880:	2301      	movs	r3, #1
 800d882:	3701      	adds	r7, #1
 800d884:	1064      	asrs	r4, r4, #1
 800d886:	3608      	adds	r6, #8
 800d888:	e76d      	b.n	800d766 <_dtoa_r+0x3be>
 800d88a:	2702      	movs	r7, #2
 800d88c:	e770      	b.n	800d770 <_dtoa_r+0x3c8>
 800d88e:	46d8      	mov	r8, fp
 800d890:	9c08      	ldr	r4, [sp, #32]
 800d892:	e78f      	b.n	800d7b4 <_dtoa_r+0x40c>
 800d894:	9903      	ldr	r1, [sp, #12]
 800d896:	4b29      	ldr	r3, [pc, #164]	; (800d93c <_dtoa_r+0x594>)
 800d898:	4421      	add	r1, r4
 800d89a:	9112      	str	r1, [sp, #72]	; 0x48
 800d89c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d89e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d8a2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800d8a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d8aa:	2900      	cmp	r1, #0
 800d8ac:	d054      	beq.n	800d958 <_dtoa_r+0x5b0>
 800d8ae:	2000      	movs	r0, #0
 800d8b0:	4928      	ldr	r1, [pc, #160]	; (800d954 <_dtoa_r+0x5ac>)
 800d8b2:	f7f2 ffb5 	bl	8000820 <__aeabi_ddiv>
 800d8b6:	463b      	mov	r3, r7
 800d8b8:	4632      	mov	r2, r6
 800d8ba:	f7f2 fccf 	bl	800025c <__aeabi_dsub>
 800d8be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d8c2:	9f03      	ldr	r7, [sp, #12]
 800d8c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d8c8:	f7f3 f930 	bl	8000b2c <__aeabi_d2iz>
 800d8cc:	4604      	mov	r4, r0
 800d8ce:	f7f2 fe13 	bl	80004f8 <__aeabi_i2d>
 800d8d2:	4602      	mov	r2, r0
 800d8d4:	460b      	mov	r3, r1
 800d8d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d8da:	f7f2 fcbf 	bl	800025c <__aeabi_dsub>
 800d8de:	4602      	mov	r2, r0
 800d8e0:	460b      	mov	r3, r1
 800d8e2:	3430      	adds	r4, #48	; 0x30
 800d8e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d8e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d8ec:	f807 4b01 	strb.w	r4, [r7], #1
 800d8f0:	f7f3 f8de 	bl	8000ab0 <__aeabi_dcmplt>
 800d8f4:	2800      	cmp	r0, #0
 800d8f6:	d173      	bne.n	800d9e0 <_dtoa_r+0x638>
 800d8f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d8fc:	2000      	movs	r0, #0
 800d8fe:	4911      	ldr	r1, [pc, #68]	; (800d944 <_dtoa_r+0x59c>)
 800d900:	f7f2 fcac 	bl	800025c <__aeabi_dsub>
 800d904:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d908:	f7f3 f8d2 	bl	8000ab0 <__aeabi_dcmplt>
 800d90c:	2800      	cmp	r0, #0
 800d90e:	f040 80b6 	bne.w	800da7e <_dtoa_r+0x6d6>
 800d912:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d914:	429f      	cmp	r7, r3
 800d916:	f43f af7a 	beq.w	800d80e <_dtoa_r+0x466>
 800d91a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d91e:	2200      	movs	r2, #0
 800d920:	4b09      	ldr	r3, [pc, #36]	; (800d948 <_dtoa_r+0x5a0>)
 800d922:	f7f2 fe53 	bl	80005cc <__aeabi_dmul>
 800d926:	2200      	movs	r2, #0
 800d928:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d92c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d930:	4b05      	ldr	r3, [pc, #20]	; (800d948 <_dtoa_r+0x5a0>)
 800d932:	f7f2 fe4b 	bl	80005cc <__aeabi_dmul>
 800d936:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d93a:	e7c3      	b.n	800d8c4 <_dtoa_r+0x51c>
 800d93c:	08010b58 	.word	0x08010b58
 800d940:	08010b30 	.word	0x08010b30
 800d944:	3ff00000 	.word	0x3ff00000
 800d948:	40240000 	.word	0x40240000
 800d94c:	401c0000 	.word	0x401c0000
 800d950:	40140000 	.word	0x40140000
 800d954:	3fe00000 	.word	0x3fe00000
 800d958:	4630      	mov	r0, r6
 800d95a:	4639      	mov	r1, r7
 800d95c:	f7f2 fe36 	bl	80005cc <__aeabi_dmul>
 800d960:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d962:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800d966:	9c03      	ldr	r4, [sp, #12]
 800d968:	9314      	str	r3, [sp, #80]	; 0x50
 800d96a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d96e:	f7f3 f8dd 	bl	8000b2c <__aeabi_d2iz>
 800d972:	9015      	str	r0, [sp, #84]	; 0x54
 800d974:	f7f2 fdc0 	bl	80004f8 <__aeabi_i2d>
 800d978:	4602      	mov	r2, r0
 800d97a:	460b      	mov	r3, r1
 800d97c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d980:	f7f2 fc6c 	bl	800025c <__aeabi_dsub>
 800d984:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d986:	4606      	mov	r6, r0
 800d988:	3330      	adds	r3, #48	; 0x30
 800d98a:	f804 3b01 	strb.w	r3, [r4], #1
 800d98e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d990:	460f      	mov	r7, r1
 800d992:	429c      	cmp	r4, r3
 800d994:	f04f 0200 	mov.w	r2, #0
 800d998:	d124      	bne.n	800d9e4 <_dtoa_r+0x63c>
 800d99a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d99e:	4baf      	ldr	r3, [pc, #700]	; (800dc5c <_dtoa_r+0x8b4>)
 800d9a0:	f7f2 fc5e 	bl	8000260 <__adddf3>
 800d9a4:	4602      	mov	r2, r0
 800d9a6:	460b      	mov	r3, r1
 800d9a8:	4630      	mov	r0, r6
 800d9aa:	4639      	mov	r1, r7
 800d9ac:	f7f3 f89e 	bl	8000aec <__aeabi_dcmpgt>
 800d9b0:	2800      	cmp	r0, #0
 800d9b2:	d163      	bne.n	800da7c <_dtoa_r+0x6d4>
 800d9b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d9b8:	2000      	movs	r0, #0
 800d9ba:	49a8      	ldr	r1, [pc, #672]	; (800dc5c <_dtoa_r+0x8b4>)
 800d9bc:	f7f2 fc4e 	bl	800025c <__aeabi_dsub>
 800d9c0:	4602      	mov	r2, r0
 800d9c2:	460b      	mov	r3, r1
 800d9c4:	4630      	mov	r0, r6
 800d9c6:	4639      	mov	r1, r7
 800d9c8:	f7f3 f872 	bl	8000ab0 <__aeabi_dcmplt>
 800d9cc:	2800      	cmp	r0, #0
 800d9ce:	f43f af1e 	beq.w	800d80e <_dtoa_r+0x466>
 800d9d2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800d9d4:	1e7b      	subs	r3, r7, #1
 800d9d6:	9314      	str	r3, [sp, #80]	; 0x50
 800d9d8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800d9dc:	2b30      	cmp	r3, #48	; 0x30
 800d9de:	d0f8      	beq.n	800d9d2 <_dtoa_r+0x62a>
 800d9e0:	46c3      	mov	fp, r8
 800d9e2:	e03b      	b.n	800da5c <_dtoa_r+0x6b4>
 800d9e4:	4b9e      	ldr	r3, [pc, #632]	; (800dc60 <_dtoa_r+0x8b8>)
 800d9e6:	f7f2 fdf1 	bl	80005cc <__aeabi_dmul>
 800d9ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d9ee:	e7bc      	b.n	800d96a <_dtoa_r+0x5c2>
 800d9f0:	9f03      	ldr	r7, [sp, #12]
 800d9f2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800d9f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d9fa:	4640      	mov	r0, r8
 800d9fc:	4649      	mov	r1, r9
 800d9fe:	f7f2 ff0f 	bl	8000820 <__aeabi_ddiv>
 800da02:	f7f3 f893 	bl	8000b2c <__aeabi_d2iz>
 800da06:	4604      	mov	r4, r0
 800da08:	f7f2 fd76 	bl	80004f8 <__aeabi_i2d>
 800da0c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800da10:	f7f2 fddc 	bl	80005cc <__aeabi_dmul>
 800da14:	4602      	mov	r2, r0
 800da16:	460b      	mov	r3, r1
 800da18:	4640      	mov	r0, r8
 800da1a:	4649      	mov	r1, r9
 800da1c:	f7f2 fc1e 	bl	800025c <__aeabi_dsub>
 800da20:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800da24:	f807 6b01 	strb.w	r6, [r7], #1
 800da28:	9e03      	ldr	r6, [sp, #12]
 800da2a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800da2e:	1bbe      	subs	r6, r7, r6
 800da30:	45b4      	cmp	ip, r6
 800da32:	4602      	mov	r2, r0
 800da34:	460b      	mov	r3, r1
 800da36:	d136      	bne.n	800daa6 <_dtoa_r+0x6fe>
 800da38:	f7f2 fc12 	bl	8000260 <__adddf3>
 800da3c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800da40:	4680      	mov	r8, r0
 800da42:	4689      	mov	r9, r1
 800da44:	f7f3 f852 	bl	8000aec <__aeabi_dcmpgt>
 800da48:	bb58      	cbnz	r0, 800daa2 <_dtoa_r+0x6fa>
 800da4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800da4e:	4640      	mov	r0, r8
 800da50:	4649      	mov	r1, r9
 800da52:	f7f3 f823 	bl	8000a9c <__aeabi_dcmpeq>
 800da56:	b108      	cbz	r0, 800da5c <_dtoa_r+0x6b4>
 800da58:	07e3      	lsls	r3, r4, #31
 800da5a:	d422      	bmi.n	800daa2 <_dtoa_r+0x6fa>
 800da5c:	4651      	mov	r1, sl
 800da5e:	4628      	mov	r0, r5
 800da60:	f000 febe 	bl	800e7e0 <_Bfree>
 800da64:	2300      	movs	r3, #0
 800da66:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800da68:	703b      	strb	r3, [r7, #0]
 800da6a:	f10b 0301 	add.w	r3, fp, #1
 800da6e:	6013      	str	r3, [r2, #0]
 800da70:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800da72:	2b00      	cmp	r3, #0
 800da74:	f43f ace6 	beq.w	800d444 <_dtoa_r+0x9c>
 800da78:	601f      	str	r7, [r3, #0]
 800da7a:	e4e3      	b.n	800d444 <_dtoa_r+0x9c>
 800da7c:	4627      	mov	r7, r4
 800da7e:	463b      	mov	r3, r7
 800da80:	461f      	mov	r7, r3
 800da82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800da86:	2a39      	cmp	r2, #57	; 0x39
 800da88:	d107      	bne.n	800da9a <_dtoa_r+0x6f2>
 800da8a:	9a03      	ldr	r2, [sp, #12]
 800da8c:	429a      	cmp	r2, r3
 800da8e:	d1f7      	bne.n	800da80 <_dtoa_r+0x6d8>
 800da90:	2230      	movs	r2, #48	; 0x30
 800da92:	9903      	ldr	r1, [sp, #12]
 800da94:	f108 0801 	add.w	r8, r8, #1
 800da98:	700a      	strb	r2, [r1, #0]
 800da9a:	781a      	ldrb	r2, [r3, #0]
 800da9c:	3201      	adds	r2, #1
 800da9e:	701a      	strb	r2, [r3, #0]
 800daa0:	e79e      	b.n	800d9e0 <_dtoa_r+0x638>
 800daa2:	46d8      	mov	r8, fp
 800daa4:	e7eb      	b.n	800da7e <_dtoa_r+0x6d6>
 800daa6:	2200      	movs	r2, #0
 800daa8:	4b6d      	ldr	r3, [pc, #436]	; (800dc60 <_dtoa_r+0x8b8>)
 800daaa:	f7f2 fd8f 	bl	80005cc <__aeabi_dmul>
 800daae:	2200      	movs	r2, #0
 800dab0:	2300      	movs	r3, #0
 800dab2:	4680      	mov	r8, r0
 800dab4:	4689      	mov	r9, r1
 800dab6:	f7f2 fff1 	bl	8000a9c <__aeabi_dcmpeq>
 800daba:	2800      	cmp	r0, #0
 800dabc:	d09b      	beq.n	800d9f6 <_dtoa_r+0x64e>
 800dabe:	e7cd      	b.n	800da5c <_dtoa_r+0x6b4>
 800dac0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dac2:	2a00      	cmp	r2, #0
 800dac4:	f000 80c4 	beq.w	800dc50 <_dtoa_r+0x8a8>
 800dac8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800daca:	2a01      	cmp	r2, #1
 800dacc:	f300 80a8 	bgt.w	800dc20 <_dtoa_r+0x878>
 800dad0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800dad2:	2a00      	cmp	r2, #0
 800dad4:	f000 80a0 	beq.w	800dc18 <_dtoa_r+0x870>
 800dad8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dadc:	464f      	mov	r7, r9
 800dade:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800dae0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dae2:	2101      	movs	r1, #1
 800dae4:	441a      	add	r2, r3
 800dae6:	4628      	mov	r0, r5
 800dae8:	4499      	add	r9, r3
 800daea:	9209      	str	r2, [sp, #36]	; 0x24
 800daec:	f000 ff78 	bl	800e9e0 <__i2b>
 800daf0:	4606      	mov	r6, r0
 800daf2:	b15f      	cbz	r7, 800db0c <_dtoa_r+0x764>
 800daf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	dd08      	ble.n	800db0c <_dtoa_r+0x764>
 800dafa:	42bb      	cmp	r3, r7
 800dafc:	bfa8      	it	ge
 800dafe:	463b      	movge	r3, r7
 800db00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db02:	eba9 0903 	sub.w	r9, r9, r3
 800db06:	1aff      	subs	r7, r7, r3
 800db08:	1ad3      	subs	r3, r2, r3
 800db0a:	9309      	str	r3, [sp, #36]	; 0x24
 800db0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db0e:	b1f3      	cbz	r3, 800db4e <_dtoa_r+0x7a6>
 800db10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db12:	2b00      	cmp	r3, #0
 800db14:	f000 80a0 	beq.w	800dc58 <_dtoa_r+0x8b0>
 800db18:	2c00      	cmp	r4, #0
 800db1a:	dd10      	ble.n	800db3e <_dtoa_r+0x796>
 800db1c:	4631      	mov	r1, r6
 800db1e:	4622      	mov	r2, r4
 800db20:	4628      	mov	r0, r5
 800db22:	f001 f81b 	bl	800eb5c <__pow5mult>
 800db26:	4652      	mov	r2, sl
 800db28:	4601      	mov	r1, r0
 800db2a:	4606      	mov	r6, r0
 800db2c:	4628      	mov	r0, r5
 800db2e:	f000 ff6d 	bl	800ea0c <__multiply>
 800db32:	4680      	mov	r8, r0
 800db34:	4651      	mov	r1, sl
 800db36:	4628      	mov	r0, r5
 800db38:	f000 fe52 	bl	800e7e0 <_Bfree>
 800db3c:	46c2      	mov	sl, r8
 800db3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db40:	1b1a      	subs	r2, r3, r4
 800db42:	d004      	beq.n	800db4e <_dtoa_r+0x7a6>
 800db44:	4651      	mov	r1, sl
 800db46:	4628      	mov	r0, r5
 800db48:	f001 f808 	bl	800eb5c <__pow5mult>
 800db4c:	4682      	mov	sl, r0
 800db4e:	2101      	movs	r1, #1
 800db50:	4628      	mov	r0, r5
 800db52:	f000 ff45 	bl	800e9e0 <__i2b>
 800db56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db58:	4604      	mov	r4, r0
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	f340 8082 	ble.w	800dc64 <_dtoa_r+0x8bc>
 800db60:	461a      	mov	r2, r3
 800db62:	4601      	mov	r1, r0
 800db64:	4628      	mov	r0, r5
 800db66:	f000 fff9 	bl	800eb5c <__pow5mult>
 800db6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800db6c:	4604      	mov	r4, r0
 800db6e:	2b01      	cmp	r3, #1
 800db70:	dd7b      	ble.n	800dc6a <_dtoa_r+0x8c2>
 800db72:	f04f 0800 	mov.w	r8, #0
 800db76:	6923      	ldr	r3, [r4, #16]
 800db78:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800db7c:	6918      	ldr	r0, [r3, #16]
 800db7e:	f000 fee1 	bl	800e944 <__hi0bits>
 800db82:	f1c0 0020 	rsb	r0, r0, #32
 800db86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db88:	4418      	add	r0, r3
 800db8a:	f010 001f 	ands.w	r0, r0, #31
 800db8e:	f000 8092 	beq.w	800dcb6 <_dtoa_r+0x90e>
 800db92:	f1c0 0320 	rsb	r3, r0, #32
 800db96:	2b04      	cmp	r3, #4
 800db98:	f340 8085 	ble.w	800dca6 <_dtoa_r+0x8fe>
 800db9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db9e:	f1c0 001c 	rsb	r0, r0, #28
 800dba2:	4403      	add	r3, r0
 800dba4:	4481      	add	r9, r0
 800dba6:	4407      	add	r7, r0
 800dba8:	9309      	str	r3, [sp, #36]	; 0x24
 800dbaa:	f1b9 0f00 	cmp.w	r9, #0
 800dbae:	dd05      	ble.n	800dbbc <_dtoa_r+0x814>
 800dbb0:	4651      	mov	r1, sl
 800dbb2:	464a      	mov	r2, r9
 800dbb4:	4628      	mov	r0, r5
 800dbb6:	f001 f82b 	bl	800ec10 <__lshift>
 800dbba:	4682      	mov	sl, r0
 800dbbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	dd05      	ble.n	800dbce <_dtoa_r+0x826>
 800dbc2:	4621      	mov	r1, r4
 800dbc4:	461a      	mov	r2, r3
 800dbc6:	4628      	mov	r0, r5
 800dbc8:	f001 f822 	bl	800ec10 <__lshift>
 800dbcc:	4604      	mov	r4, r0
 800dbce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d072      	beq.n	800dcba <_dtoa_r+0x912>
 800dbd4:	4621      	mov	r1, r4
 800dbd6:	4650      	mov	r0, sl
 800dbd8:	f001 f886 	bl	800ece8 <__mcmp>
 800dbdc:	2800      	cmp	r0, #0
 800dbde:	da6c      	bge.n	800dcba <_dtoa_r+0x912>
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	4651      	mov	r1, sl
 800dbe4:	220a      	movs	r2, #10
 800dbe6:	4628      	mov	r0, r5
 800dbe8:	f000 fe1c 	bl	800e824 <__multadd>
 800dbec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbee:	4682      	mov	sl, r0
 800dbf0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	f000 81ac 	beq.w	800df52 <_dtoa_r+0xbaa>
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	4631      	mov	r1, r6
 800dbfe:	220a      	movs	r2, #10
 800dc00:	4628      	mov	r0, r5
 800dc02:	f000 fe0f 	bl	800e824 <__multadd>
 800dc06:	9b06      	ldr	r3, [sp, #24]
 800dc08:	4606      	mov	r6, r0
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	f300 8093 	bgt.w	800dd36 <_dtoa_r+0x98e>
 800dc10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dc12:	2b02      	cmp	r3, #2
 800dc14:	dc59      	bgt.n	800dcca <_dtoa_r+0x922>
 800dc16:	e08e      	b.n	800dd36 <_dtoa_r+0x98e>
 800dc18:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800dc1a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dc1e:	e75d      	b.n	800dadc <_dtoa_r+0x734>
 800dc20:	9b08      	ldr	r3, [sp, #32]
 800dc22:	1e5c      	subs	r4, r3, #1
 800dc24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc26:	42a3      	cmp	r3, r4
 800dc28:	bfbf      	itttt	lt
 800dc2a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800dc2c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800dc2e:	1ae3      	sublt	r3, r4, r3
 800dc30:	18d2      	addlt	r2, r2, r3
 800dc32:	bfa8      	it	ge
 800dc34:	1b1c      	subge	r4, r3, r4
 800dc36:	9b08      	ldr	r3, [sp, #32]
 800dc38:	bfbe      	ittt	lt
 800dc3a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800dc3c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800dc3e:	2400      	movlt	r4, #0
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	bfb5      	itete	lt
 800dc44:	eba9 0703 	sublt.w	r7, r9, r3
 800dc48:	464f      	movge	r7, r9
 800dc4a:	2300      	movlt	r3, #0
 800dc4c:	9b08      	ldrge	r3, [sp, #32]
 800dc4e:	e747      	b.n	800dae0 <_dtoa_r+0x738>
 800dc50:	464f      	mov	r7, r9
 800dc52:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800dc54:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800dc56:	e74c      	b.n	800daf2 <_dtoa_r+0x74a>
 800dc58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc5a:	e773      	b.n	800db44 <_dtoa_r+0x79c>
 800dc5c:	3fe00000 	.word	0x3fe00000
 800dc60:	40240000 	.word	0x40240000
 800dc64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dc66:	2b01      	cmp	r3, #1
 800dc68:	dc18      	bgt.n	800dc9c <_dtoa_r+0x8f4>
 800dc6a:	9b04      	ldr	r3, [sp, #16]
 800dc6c:	b9b3      	cbnz	r3, 800dc9c <_dtoa_r+0x8f4>
 800dc6e:	9b05      	ldr	r3, [sp, #20]
 800dc70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dc74:	b993      	cbnz	r3, 800dc9c <_dtoa_r+0x8f4>
 800dc76:	9b05      	ldr	r3, [sp, #20]
 800dc78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dc7c:	0d1b      	lsrs	r3, r3, #20
 800dc7e:	051b      	lsls	r3, r3, #20
 800dc80:	b17b      	cbz	r3, 800dca2 <_dtoa_r+0x8fa>
 800dc82:	f04f 0801 	mov.w	r8, #1
 800dc86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc88:	f109 0901 	add.w	r9, r9, #1
 800dc8c:	3301      	adds	r3, #1
 800dc8e:	9309      	str	r3, [sp, #36]	; 0x24
 800dc90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	f47f af6f 	bne.w	800db76 <_dtoa_r+0x7ce>
 800dc98:	2001      	movs	r0, #1
 800dc9a:	e774      	b.n	800db86 <_dtoa_r+0x7de>
 800dc9c:	f04f 0800 	mov.w	r8, #0
 800dca0:	e7f6      	b.n	800dc90 <_dtoa_r+0x8e8>
 800dca2:	4698      	mov	r8, r3
 800dca4:	e7f4      	b.n	800dc90 <_dtoa_r+0x8e8>
 800dca6:	d080      	beq.n	800dbaa <_dtoa_r+0x802>
 800dca8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dcaa:	331c      	adds	r3, #28
 800dcac:	441a      	add	r2, r3
 800dcae:	4499      	add	r9, r3
 800dcb0:	441f      	add	r7, r3
 800dcb2:	9209      	str	r2, [sp, #36]	; 0x24
 800dcb4:	e779      	b.n	800dbaa <_dtoa_r+0x802>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	e7f6      	b.n	800dca8 <_dtoa_r+0x900>
 800dcba:	9b08      	ldr	r3, [sp, #32]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	dc34      	bgt.n	800dd2a <_dtoa_r+0x982>
 800dcc0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dcc2:	2b02      	cmp	r3, #2
 800dcc4:	dd31      	ble.n	800dd2a <_dtoa_r+0x982>
 800dcc6:	9b08      	ldr	r3, [sp, #32]
 800dcc8:	9306      	str	r3, [sp, #24]
 800dcca:	9b06      	ldr	r3, [sp, #24]
 800dccc:	b963      	cbnz	r3, 800dce8 <_dtoa_r+0x940>
 800dcce:	4621      	mov	r1, r4
 800dcd0:	2205      	movs	r2, #5
 800dcd2:	4628      	mov	r0, r5
 800dcd4:	f000 fda6 	bl	800e824 <__multadd>
 800dcd8:	4601      	mov	r1, r0
 800dcda:	4604      	mov	r4, r0
 800dcdc:	4650      	mov	r0, sl
 800dcde:	f001 f803 	bl	800ece8 <__mcmp>
 800dce2:	2800      	cmp	r0, #0
 800dce4:	f73f adbf 	bgt.w	800d866 <_dtoa_r+0x4be>
 800dce8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800dcea:	9f03      	ldr	r7, [sp, #12]
 800dcec:	ea6f 0b03 	mvn.w	fp, r3
 800dcf0:	f04f 0800 	mov.w	r8, #0
 800dcf4:	4621      	mov	r1, r4
 800dcf6:	4628      	mov	r0, r5
 800dcf8:	f000 fd72 	bl	800e7e0 <_Bfree>
 800dcfc:	2e00      	cmp	r6, #0
 800dcfe:	f43f aead 	beq.w	800da5c <_dtoa_r+0x6b4>
 800dd02:	f1b8 0f00 	cmp.w	r8, #0
 800dd06:	d005      	beq.n	800dd14 <_dtoa_r+0x96c>
 800dd08:	45b0      	cmp	r8, r6
 800dd0a:	d003      	beq.n	800dd14 <_dtoa_r+0x96c>
 800dd0c:	4641      	mov	r1, r8
 800dd0e:	4628      	mov	r0, r5
 800dd10:	f000 fd66 	bl	800e7e0 <_Bfree>
 800dd14:	4631      	mov	r1, r6
 800dd16:	4628      	mov	r0, r5
 800dd18:	f000 fd62 	bl	800e7e0 <_Bfree>
 800dd1c:	e69e      	b.n	800da5c <_dtoa_r+0x6b4>
 800dd1e:	2400      	movs	r4, #0
 800dd20:	4626      	mov	r6, r4
 800dd22:	e7e1      	b.n	800dce8 <_dtoa_r+0x940>
 800dd24:	46c3      	mov	fp, r8
 800dd26:	4626      	mov	r6, r4
 800dd28:	e59d      	b.n	800d866 <_dtoa_r+0x4be>
 800dd2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	f000 80c8 	beq.w	800dec2 <_dtoa_r+0xb1a>
 800dd32:	9b08      	ldr	r3, [sp, #32]
 800dd34:	9306      	str	r3, [sp, #24]
 800dd36:	2f00      	cmp	r7, #0
 800dd38:	dd05      	ble.n	800dd46 <_dtoa_r+0x99e>
 800dd3a:	4631      	mov	r1, r6
 800dd3c:	463a      	mov	r2, r7
 800dd3e:	4628      	mov	r0, r5
 800dd40:	f000 ff66 	bl	800ec10 <__lshift>
 800dd44:	4606      	mov	r6, r0
 800dd46:	f1b8 0f00 	cmp.w	r8, #0
 800dd4a:	d05b      	beq.n	800de04 <_dtoa_r+0xa5c>
 800dd4c:	4628      	mov	r0, r5
 800dd4e:	6871      	ldr	r1, [r6, #4]
 800dd50:	f000 fd06 	bl	800e760 <_Balloc>
 800dd54:	4607      	mov	r7, r0
 800dd56:	b928      	cbnz	r0, 800dd64 <_dtoa_r+0x9bc>
 800dd58:	4602      	mov	r2, r0
 800dd5a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800dd5e:	4b81      	ldr	r3, [pc, #516]	; (800df64 <_dtoa_r+0xbbc>)
 800dd60:	f7ff bb36 	b.w	800d3d0 <_dtoa_r+0x28>
 800dd64:	6932      	ldr	r2, [r6, #16]
 800dd66:	f106 010c 	add.w	r1, r6, #12
 800dd6a:	3202      	adds	r2, #2
 800dd6c:	0092      	lsls	r2, r2, #2
 800dd6e:	300c      	adds	r0, #12
 800dd70:	f7ff fa43 	bl	800d1fa <memcpy>
 800dd74:	2201      	movs	r2, #1
 800dd76:	4639      	mov	r1, r7
 800dd78:	4628      	mov	r0, r5
 800dd7a:	f000 ff49 	bl	800ec10 <__lshift>
 800dd7e:	46b0      	mov	r8, r6
 800dd80:	4606      	mov	r6, r0
 800dd82:	9b03      	ldr	r3, [sp, #12]
 800dd84:	9a03      	ldr	r2, [sp, #12]
 800dd86:	3301      	adds	r3, #1
 800dd88:	9308      	str	r3, [sp, #32]
 800dd8a:	9b06      	ldr	r3, [sp, #24]
 800dd8c:	4413      	add	r3, r2
 800dd8e:	930b      	str	r3, [sp, #44]	; 0x2c
 800dd90:	9b04      	ldr	r3, [sp, #16]
 800dd92:	f003 0301 	and.w	r3, r3, #1
 800dd96:	930a      	str	r3, [sp, #40]	; 0x28
 800dd98:	9b08      	ldr	r3, [sp, #32]
 800dd9a:	4621      	mov	r1, r4
 800dd9c:	3b01      	subs	r3, #1
 800dd9e:	4650      	mov	r0, sl
 800dda0:	9304      	str	r3, [sp, #16]
 800dda2:	f7ff fa75 	bl	800d290 <quorem>
 800dda6:	4641      	mov	r1, r8
 800dda8:	9006      	str	r0, [sp, #24]
 800ddaa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ddae:	4650      	mov	r0, sl
 800ddb0:	f000 ff9a 	bl	800ece8 <__mcmp>
 800ddb4:	4632      	mov	r2, r6
 800ddb6:	9009      	str	r0, [sp, #36]	; 0x24
 800ddb8:	4621      	mov	r1, r4
 800ddba:	4628      	mov	r0, r5
 800ddbc:	f000 ffb0 	bl	800ed20 <__mdiff>
 800ddc0:	68c2      	ldr	r2, [r0, #12]
 800ddc2:	4607      	mov	r7, r0
 800ddc4:	bb02      	cbnz	r2, 800de08 <_dtoa_r+0xa60>
 800ddc6:	4601      	mov	r1, r0
 800ddc8:	4650      	mov	r0, sl
 800ddca:	f000 ff8d 	bl	800ece8 <__mcmp>
 800ddce:	4602      	mov	r2, r0
 800ddd0:	4639      	mov	r1, r7
 800ddd2:	4628      	mov	r0, r5
 800ddd4:	920c      	str	r2, [sp, #48]	; 0x30
 800ddd6:	f000 fd03 	bl	800e7e0 <_Bfree>
 800ddda:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dddc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ddde:	9f08      	ldr	r7, [sp, #32]
 800dde0:	ea43 0102 	orr.w	r1, r3, r2
 800dde4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dde6:	4319      	orrs	r1, r3
 800dde8:	d110      	bne.n	800de0c <_dtoa_r+0xa64>
 800ddea:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ddee:	d029      	beq.n	800de44 <_dtoa_r+0xa9c>
 800ddf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	dd02      	ble.n	800ddfc <_dtoa_r+0xa54>
 800ddf6:	9b06      	ldr	r3, [sp, #24]
 800ddf8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ddfc:	9b04      	ldr	r3, [sp, #16]
 800ddfe:	f883 9000 	strb.w	r9, [r3]
 800de02:	e777      	b.n	800dcf4 <_dtoa_r+0x94c>
 800de04:	4630      	mov	r0, r6
 800de06:	e7ba      	b.n	800dd7e <_dtoa_r+0x9d6>
 800de08:	2201      	movs	r2, #1
 800de0a:	e7e1      	b.n	800ddd0 <_dtoa_r+0xa28>
 800de0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de0e:	2b00      	cmp	r3, #0
 800de10:	db04      	blt.n	800de1c <_dtoa_r+0xa74>
 800de12:	9922      	ldr	r1, [sp, #136]	; 0x88
 800de14:	430b      	orrs	r3, r1
 800de16:	990a      	ldr	r1, [sp, #40]	; 0x28
 800de18:	430b      	orrs	r3, r1
 800de1a:	d120      	bne.n	800de5e <_dtoa_r+0xab6>
 800de1c:	2a00      	cmp	r2, #0
 800de1e:	dded      	ble.n	800ddfc <_dtoa_r+0xa54>
 800de20:	4651      	mov	r1, sl
 800de22:	2201      	movs	r2, #1
 800de24:	4628      	mov	r0, r5
 800de26:	f000 fef3 	bl	800ec10 <__lshift>
 800de2a:	4621      	mov	r1, r4
 800de2c:	4682      	mov	sl, r0
 800de2e:	f000 ff5b 	bl	800ece8 <__mcmp>
 800de32:	2800      	cmp	r0, #0
 800de34:	dc03      	bgt.n	800de3e <_dtoa_r+0xa96>
 800de36:	d1e1      	bne.n	800ddfc <_dtoa_r+0xa54>
 800de38:	f019 0f01 	tst.w	r9, #1
 800de3c:	d0de      	beq.n	800ddfc <_dtoa_r+0xa54>
 800de3e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800de42:	d1d8      	bne.n	800ddf6 <_dtoa_r+0xa4e>
 800de44:	2339      	movs	r3, #57	; 0x39
 800de46:	9a04      	ldr	r2, [sp, #16]
 800de48:	7013      	strb	r3, [r2, #0]
 800de4a:	463b      	mov	r3, r7
 800de4c:	461f      	mov	r7, r3
 800de4e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800de52:	3b01      	subs	r3, #1
 800de54:	2a39      	cmp	r2, #57	; 0x39
 800de56:	d06b      	beq.n	800df30 <_dtoa_r+0xb88>
 800de58:	3201      	adds	r2, #1
 800de5a:	701a      	strb	r2, [r3, #0]
 800de5c:	e74a      	b.n	800dcf4 <_dtoa_r+0x94c>
 800de5e:	2a00      	cmp	r2, #0
 800de60:	dd07      	ble.n	800de72 <_dtoa_r+0xaca>
 800de62:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800de66:	d0ed      	beq.n	800de44 <_dtoa_r+0xa9c>
 800de68:	9a04      	ldr	r2, [sp, #16]
 800de6a:	f109 0301 	add.w	r3, r9, #1
 800de6e:	7013      	strb	r3, [r2, #0]
 800de70:	e740      	b.n	800dcf4 <_dtoa_r+0x94c>
 800de72:	9b08      	ldr	r3, [sp, #32]
 800de74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800de76:	f803 9c01 	strb.w	r9, [r3, #-1]
 800de7a:	4293      	cmp	r3, r2
 800de7c:	d042      	beq.n	800df04 <_dtoa_r+0xb5c>
 800de7e:	4651      	mov	r1, sl
 800de80:	2300      	movs	r3, #0
 800de82:	220a      	movs	r2, #10
 800de84:	4628      	mov	r0, r5
 800de86:	f000 fccd 	bl	800e824 <__multadd>
 800de8a:	45b0      	cmp	r8, r6
 800de8c:	4682      	mov	sl, r0
 800de8e:	f04f 0300 	mov.w	r3, #0
 800de92:	f04f 020a 	mov.w	r2, #10
 800de96:	4641      	mov	r1, r8
 800de98:	4628      	mov	r0, r5
 800de9a:	d107      	bne.n	800deac <_dtoa_r+0xb04>
 800de9c:	f000 fcc2 	bl	800e824 <__multadd>
 800dea0:	4680      	mov	r8, r0
 800dea2:	4606      	mov	r6, r0
 800dea4:	9b08      	ldr	r3, [sp, #32]
 800dea6:	3301      	adds	r3, #1
 800dea8:	9308      	str	r3, [sp, #32]
 800deaa:	e775      	b.n	800dd98 <_dtoa_r+0x9f0>
 800deac:	f000 fcba 	bl	800e824 <__multadd>
 800deb0:	4631      	mov	r1, r6
 800deb2:	4680      	mov	r8, r0
 800deb4:	2300      	movs	r3, #0
 800deb6:	220a      	movs	r2, #10
 800deb8:	4628      	mov	r0, r5
 800deba:	f000 fcb3 	bl	800e824 <__multadd>
 800debe:	4606      	mov	r6, r0
 800dec0:	e7f0      	b.n	800dea4 <_dtoa_r+0xafc>
 800dec2:	9b08      	ldr	r3, [sp, #32]
 800dec4:	9306      	str	r3, [sp, #24]
 800dec6:	9f03      	ldr	r7, [sp, #12]
 800dec8:	4621      	mov	r1, r4
 800deca:	4650      	mov	r0, sl
 800decc:	f7ff f9e0 	bl	800d290 <quorem>
 800ded0:	9b03      	ldr	r3, [sp, #12]
 800ded2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ded6:	f807 9b01 	strb.w	r9, [r7], #1
 800deda:	1afa      	subs	r2, r7, r3
 800dedc:	9b06      	ldr	r3, [sp, #24]
 800dede:	4293      	cmp	r3, r2
 800dee0:	dd07      	ble.n	800def2 <_dtoa_r+0xb4a>
 800dee2:	4651      	mov	r1, sl
 800dee4:	2300      	movs	r3, #0
 800dee6:	220a      	movs	r2, #10
 800dee8:	4628      	mov	r0, r5
 800deea:	f000 fc9b 	bl	800e824 <__multadd>
 800deee:	4682      	mov	sl, r0
 800def0:	e7ea      	b.n	800dec8 <_dtoa_r+0xb20>
 800def2:	9b06      	ldr	r3, [sp, #24]
 800def4:	f04f 0800 	mov.w	r8, #0
 800def8:	2b00      	cmp	r3, #0
 800defa:	bfcc      	ite	gt
 800defc:	461f      	movgt	r7, r3
 800defe:	2701      	movle	r7, #1
 800df00:	9b03      	ldr	r3, [sp, #12]
 800df02:	441f      	add	r7, r3
 800df04:	4651      	mov	r1, sl
 800df06:	2201      	movs	r2, #1
 800df08:	4628      	mov	r0, r5
 800df0a:	f000 fe81 	bl	800ec10 <__lshift>
 800df0e:	4621      	mov	r1, r4
 800df10:	4682      	mov	sl, r0
 800df12:	f000 fee9 	bl	800ece8 <__mcmp>
 800df16:	2800      	cmp	r0, #0
 800df18:	dc97      	bgt.n	800de4a <_dtoa_r+0xaa2>
 800df1a:	d102      	bne.n	800df22 <_dtoa_r+0xb7a>
 800df1c:	f019 0f01 	tst.w	r9, #1
 800df20:	d193      	bne.n	800de4a <_dtoa_r+0xaa2>
 800df22:	463b      	mov	r3, r7
 800df24:	461f      	mov	r7, r3
 800df26:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800df2a:	2a30      	cmp	r2, #48	; 0x30
 800df2c:	d0fa      	beq.n	800df24 <_dtoa_r+0xb7c>
 800df2e:	e6e1      	b.n	800dcf4 <_dtoa_r+0x94c>
 800df30:	9a03      	ldr	r2, [sp, #12]
 800df32:	429a      	cmp	r2, r3
 800df34:	d18a      	bne.n	800de4c <_dtoa_r+0xaa4>
 800df36:	2331      	movs	r3, #49	; 0x31
 800df38:	f10b 0b01 	add.w	fp, fp, #1
 800df3c:	e797      	b.n	800de6e <_dtoa_r+0xac6>
 800df3e:	4b0a      	ldr	r3, [pc, #40]	; (800df68 <_dtoa_r+0xbc0>)
 800df40:	f7ff ba9f 	b.w	800d482 <_dtoa_r+0xda>
 800df44:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800df46:	2b00      	cmp	r3, #0
 800df48:	f47f aa77 	bne.w	800d43a <_dtoa_r+0x92>
 800df4c:	4b07      	ldr	r3, [pc, #28]	; (800df6c <_dtoa_r+0xbc4>)
 800df4e:	f7ff ba98 	b.w	800d482 <_dtoa_r+0xda>
 800df52:	9b06      	ldr	r3, [sp, #24]
 800df54:	2b00      	cmp	r3, #0
 800df56:	dcb6      	bgt.n	800dec6 <_dtoa_r+0xb1e>
 800df58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800df5a:	2b02      	cmp	r3, #2
 800df5c:	f73f aeb5 	bgt.w	800dcca <_dtoa_r+0x922>
 800df60:	e7b1      	b.n	800dec6 <_dtoa_r+0xb1e>
 800df62:	bf00      	nop
 800df64:	08010a63 	.word	0x08010a63
 800df68:	08010cb6 	.word	0x08010cb6
 800df6c:	080109fe 	.word	0x080109fe

0800df70 <_free_r>:
 800df70:	b538      	push	{r3, r4, r5, lr}
 800df72:	4605      	mov	r5, r0
 800df74:	2900      	cmp	r1, #0
 800df76:	d040      	beq.n	800dffa <_free_r+0x8a>
 800df78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df7c:	1f0c      	subs	r4, r1, #4
 800df7e:	2b00      	cmp	r3, #0
 800df80:	bfb8      	it	lt
 800df82:	18e4      	addlt	r4, r4, r3
 800df84:	f7fc fdc2 	bl	800ab0c <__malloc_lock>
 800df88:	4a1c      	ldr	r2, [pc, #112]	; (800dffc <_free_r+0x8c>)
 800df8a:	6813      	ldr	r3, [r2, #0]
 800df8c:	b933      	cbnz	r3, 800df9c <_free_r+0x2c>
 800df8e:	6063      	str	r3, [r4, #4]
 800df90:	6014      	str	r4, [r2, #0]
 800df92:	4628      	mov	r0, r5
 800df94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df98:	f7fc bdbe 	b.w	800ab18 <__malloc_unlock>
 800df9c:	42a3      	cmp	r3, r4
 800df9e:	d908      	bls.n	800dfb2 <_free_r+0x42>
 800dfa0:	6820      	ldr	r0, [r4, #0]
 800dfa2:	1821      	adds	r1, r4, r0
 800dfa4:	428b      	cmp	r3, r1
 800dfa6:	bf01      	itttt	eq
 800dfa8:	6819      	ldreq	r1, [r3, #0]
 800dfaa:	685b      	ldreq	r3, [r3, #4]
 800dfac:	1809      	addeq	r1, r1, r0
 800dfae:	6021      	streq	r1, [r4, #0]
 800dfb0:	e7ed      	b.n	800df8e <_free_r+0x1e>
 800dfb2:	461a      	mov	r2, r3
 800dfb4:	685b      	ldr	r3, [r3, #4]
 800dfb6:	b10b      	cbz	r3, 800dfbc <_free_r+0x4c>
 800dfb8:	42a3      	cmp	r3, r4
 800dfba:	d9fa      	bls.n	800dfb2 <_free_r+0x42>
 800dfbc:	6811      	ldr	r1, [r2, #0]
 800dfbe:	1850      	adds	r0, r2, r1
 800dfc0:	42a0      	cmp	r0, r4
 800dfc2:	d10b      	bne.n	800dfdc <_free_r+0x6c>
 800dfc4:	6820      	ldr	r0, [r4, #0]
 800dfc6:	4401      	add	r1, r0
 800dfc8:	1850      	adds	r0, r2, r1
 800dfca:	4283      	cmp	r3, r0
 800dfcc:	6011      	str	r1, [r2, #0]
 800dfce:	d1e0      	bne.n	800df92 <_free_r+0x22>
 800dfd0:	6818      	ldr	r0, [r3, #0]
 800dfd2:	685b      	ldr	r3, [r3, #4]
 800dfd4:	4408      	add	r0, r1
 800dfd6:	6010      	str	r0, [r2, #0]
 800dfd8:	6053      	str	r3, [r2, #4]
 800dfda:	e7da      	b.n	800df92 <_free_r+0x22>
 800dfdc:	d902      	bls.n	800dfe4 <_free_r+0x74>
 800dfde:	230c      	movs	r3, #12
 800dfe0:	602b      	str	r3, [r5, #0]
 800dfe2:	e7d6      	b.n	800df92 <_free_r+0x22>
 800dfe4:	6820      	ldr	r0, [r4, #0]
 800dfe6:	1821      	adds	r1, r4, r0
 800dfe8:	428b      	cmp	r3, r1
 800dfea:	bf01      	itttt	eq
 800dfec:	6819      	ldreq	r1, [r3, #0]
 800dfee:	685b      	ldreq	r3, [r3, #4]
 800dff0:	1809      	addeq	r1, r1, r0
 800dff2:	6021      	streq	r1, [r4, #0]
 800dff4:	6063      	str	r3, [r4, #4]
 800dff6:	6054      	str	r4, [r2, #4]
 800dff8:	e7cb      	b.n	800df92 <_free_r+0x22>
 800dffa:	bd38      	pop	{r3, r4, r5, pc}
 800dffc:	20003360 	.word	0x20003360

0800e000 <rshift>:
 800e000:	6903      	ldr	r3, [r0, #16]
 800e002:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e006:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e00a:	f100 0414 	add.w	r4, r0, #20
 800e00e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e012:	dd46      	ble.n	800e0a2 <rshift+0xa2>
 800e014:	f011 011f 	ands.w	r1, r1, #31
 800e018:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e01c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e020:	d10c      	bne.n	800e03c <rshift+0x3c>
 800e022:	4629      	mov	r1, r5
 800e024:	f100 0710 	add.w	r7, r0, #16
 800e028:	42b1      	cmp	r1, r6
 800e02a:	d335      	bcc.n	800e098 <rshift+0x98>
 800e02c:	1a9b      	subs	r3, r3, r2
 800e02e:	009b      	lsls	r3, r3, #2
 800e030:	1eea      	subs	r2, r5, #3
 800e032:	4296      	cmp	r6, r2
 800e034:	bf38      	it	cc
 800e036:	2300      	movcc	r3, #0
 800e038:	4423      	add	r3, r4
 800e03a:	e015      	b.n	800e068 <rshift+0x68>
 800e03c:	46a1      	mov	r9, r4
 800e03e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e042:	f1c1 0820 	rsb	r8, r1, #32
 800e046:	40cf      	lsrs	r7, r1
 800e048:	f105 0e04 	add.w	lr, r5, #4
 800e04c:	4576      	cmp	r6, lr
 800e04e:	46f4      	mov	ip, lr
 800e050:	d816      	bhi.n	800e080 <rshift+0x80>
 800e052:	1a9a      	subs	r2, r3, r2
 800e054:	0092      	lsls	r2, r2, #2
 800e056:	3a04      	subs	r2, #4
 800e058:	3501      	adds	r5, #1
 800e05a:	42ae      	cmp	r6, r5
 800e05c:	bf38      	it	cc
 800e05e:	2200      	movcc	r2, #0
 800e060:	18a3      	adds	r3, r4, r2
 800e062:	50a7      	str	r7, [r4, r2]
 800e064:	b107      	cbz	r7, 800e068 <rshift+0x68>
 800e066:	3304      	adds	r3, #4
 800e068:	42a3      	cmp	r3, r4
 800e06a:	eba3 0204 	sub.w	r2, r3, r4
 800e06e:	bf08      	it	eq
 800e070:	2300      	moveq	r3, #0
 800e072:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e076:	6102      	str	r2, [r0, #16]
 800e078:	bf08      	it	eq
 800e07a:	6143      	streq	r3, [r0, #20]
 800e07c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e080:	f8dc c000 	ldr.w	ip, [ip]
 800e084:	fa0c fc08 	lsl.w	ip, ip, r8
 800e088:	ea4c 0707 	orr.w	r7, ip, r7
 800e08c:	f849 7b04 	str.w	r7, [r9], #4
 800e090:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e094:	40cf      	lsrs	r7, r1
 800e096:	e7d9      	b.n	800e04c <rshift+0x4c>
 800e098:	f851 cb04 	ldr.w	ip, [r1], #4
 800e09c:	f847 cf04 	str.w	ip, [r7, #4]!
 800e0a0:	e7c2      	b.n	800e028 <rshift+0x28>
 800e0a2:	4623      	mov	r3, r4
 800e0a4:	e7e0      	b.n	800e068 <rshift+0x68>

0800e0a6 <__hexdig_fun>:
 800e0a6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e0aa:	2b09      	cmp	r3, #9
 800e0ac:	d802      	bhi.n	800e0b4 <__hexdig_fun+0xe>
 800e0ae:	3820      	subs	r0, #32
 800e0b0:	b2c0      	uxtb	r0, r0
 800e0b2:	4770      	bx	lr
 800e0b4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e0b8:	2b05      	cmp	r3, #5
 800e0ba:	d801      	bhi.n	800e0c0 <__hexdig_fun+0x1a>
 800e0bc:	3847      	subs	r0, #71	; 0x47
 800e0be:	e7f7      	b.n	800e0b0 <__hexdig_fun+0xa>
 800e0c0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e0c4:	2b05      	cmp	r3, #5
 800e0c6:	d801      	bhi.n	800e0cc <__hexdig_fun+0x26>
 800e0c8:	3827      	subs	r0, #39	; 0x27
 800e0ca:	e7f1      	b.n	800e0b0 <__hexdig_fun+0xa>
 800e0cc:	2000      	movs	r0, #0
 800e0ce:	4770      	bx	lr

0800e0d0 <__gethex>:
 800e0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0d4:	4681      	mov	r9, r0
 800e0d6:	468a      	mov	sl, r1
 800e0d8:	4617      	mov	r7, r2
 800e0da:	680a      	ldr	r2, [r1, #0]
 800e0dc:	b085      	sub	sp, #20
 800e0de:	f102 0b02 	add.w	fp, r2, #2
 800e0e2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e0e6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e0ea:	9302      	str	r3, [sp, #8]
 800e0ec:	32fe      	adds	r2, #254	; 0xfe
 800e0ee:	eb02 030b 	add.w	r3, r2, fp
 800e0f2:	46d8      	mov	r8, fp
 800e0f4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800e0f8:	9301      	str	r3, [sp, #4]
 800e0fa:	2830      	cmp	r0, #48	; 0x30
 800e0fc:	d0f7      	beq.n	800e0ee <__gethex+0x1e>
 800e0fe:	f7ff ffd2 	bl	800e0a6 <__hexdig_fun>
 800e102:	4604      	mov	r4, r0
 800e104:	2800      	cmp	r0, #0
 800e106:	d138      	bne.n	800e17a <__gethex+0xaa>
 800e108:	2201      	movs	r2, #1
 800e10a:	4640      	mov	r0, r8
 800e10c:	49a7      	ldr	r1, [pc, #668]	; (800e3ac <__gethex+0x2dc>)
 800e10e:	f7fe f99b 	bl	800c448 <strncmp>
 800e112:	4606      	mov	r6, r0
 800e114:	2800      	cmp	r0, #0
 800e116:	d169      	bne.n	800e1ec <__gethex+0x11c>
 800e118:	f898 0001 	ldrb.w	r0, [r8, #1]
 800e11c:	465d      	mov	r5, fp
 800e11e:	f7ff ffc2 	bl	800e0a6 <__hexdig_fun>
 800e122:	2800      	cmp	r0, #0
 800e124:	d064      	beq.n	800e1f0 <__gethex+0x120>
 800e126:	465a      	mov	r2, fp
 800e128:	7810      	ldrb	r0, [r2, #0]
 800e12a:	4690      	mov	r8, r2
 800e12c:	2830      	cmp	r0, #48	; 0x30
 800e12e:	f102 0201 	add.w	r2, r2, #1
 800e132:	d0f9      	beq.n	800e128 <__gethex+0x58>
 800e134:	f7ff ffb7 	bl	800e0a6 <__hexdig_fun>
 800e138:	2301      	movs	r3, #1
 800e13a:	fab0 f480 	clz	r4, r0
 800e13e:	465e      	mov	r6, fp
 800e140:	0964      	lsrs	r4, r4, #5
 800e142:	9301      	str	r3, [sp, #4]
 800e144:	4642      	mov	r2, r8
 800e146:	4615      	mov	r5, r2
 800e148:	7828      	ldrb	r0, [r5, #0]
 800e14a:	3201      	adds	r2, #1
 800e14c:	f7ff ffab 	bl	800e0a6 <__hexdig_fun>
 800e150:	2800      	cmp	r0, #0
 800e152:	d1f8      	bne.n	800e146 <__gethex+0x76>
 800e154:	2201      	movs	r2, #1
 800e156:	4628      	mov	r0, r5
 800e158:	4994      	ldr	r1, [pc, #592]	; (800e3ac <__gethex+0x2dc>)
 800e15a:	f7fe f975 	bl	800c448 <strncmp>
 800e15e:	b978      	cbnz	r0, 800e180 <__gethex+0xb0>
 800e160:	b946      	cbnz	r6, 800e174 <__gethex+0xa4>
 800e162:	1c6e      	adds	r6, r5, #1
 800e164:	4632      	mov	r2, r6
 800e166:	4615      	mov	r5, r2
 800e168:	7828      	ldrb	r0, [r5, #0]
 800e16a:	3201      	adds	r2, #1
 800e16c:	f7ff ff9b 	bl	800e0a6 <__hexdig_fun>
 800e170:	2800      	cmp	r0, #0
 800e172:	d1f8      	bne.n	800e166 <__gethex+0x96>
 800e174:	1b73      	subs	r3, r6, r5
 800e176:	009e      	lsls	r6, r3, #2
 800e178:	e004      	b.n	800e184 <__gethex+0xb4>
 800e17a:	2400      	movs	r4, #0
 800e17c:	4626      	mov	r6, r4
 800e17e:	e7e1      	b.n	800e144 <__gethex+0x74>
 800e180:	2e00      	cmp	r6, #0
 800e182:	d1f7      	bne.n	800e174 <__gethex+0xa4>
 800e184:	782b      	ldrb	r3, [r5, #0]
 800e186:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e18a:	2b50      	cmp	r3, #80	; 0x50
 800e18c:	d13d      	bne.n	800e20a <__gethex+0x13a>
 800e18e:	786b      	ldrb	r3, [r5, #1]
 800e190:	2b2b      	cmp	r3, #43	; 0x2b
 800e192:	d02f      	beq.n	800e1f4 <__gethex+0x124>
 800e194:	2b2d      	cmp	r3, #45	; 0x2d
 800e196:	d031      	beq.n	800e1fc <__gethex+0x12c>
 800e198:	f04f 0b00 	mov.w	fp, #0
 800e19c:	1c69      	adds	r1, r5, #1
 800e19e:	7808      	ldrb	r0, [r1, #0]
 800e1a0:	f7ff ff81 	bl	800e0a6 <__hexdig_fun>
 800e1a4:	1e42      	subs	r2, r0, #1
 800e1a6:	b2d2      	uxtb	r2, r2
 800e1a8:	2a18      	cmp	r2, #24
 800e1aa:	d82e      	bhi.n	800e20a <__gethex+0x13a>
 800e1ac:	f1a0 0210 	sub.w	r2, r0, #16
 800e1b0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e1b4:	f7ff ff77 	bl	800e0a6 <__hexdig_fun>
 800e1b8:	f100 3cff 	add.w	ip, r0, #4294967295
 800e1bc:	fa5f fc8c 	uxtb.w	ip, ip
 800e1c0:	f1bc 0f18 	cmp.w	ip, #24
 800e1c4:	d91d      	bls.n	800e202 <__gethex+0x132>
 800e1c6:	f1bb 0f00 	cmp.w	fp, #0
 800e1ca:	d000      	beq.n	800e1ce <__gethex+0xfe>
 800e1cc:	4252      	negs	r2, r2
 800e1ce:	4416      	add	r6, r2
 800e1d0:	f8ca 1000 	str.w	r1, [sl]
 800e1d4:	b1dc      	cbz	r4, 800e20e <__gethex+0x13e>
 800e1d6:	9b01      	ldr	r3, [sp, #4]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	bf14      	ite	ne
 800e1dc:	f04f 0800 	movne.w	r8, #0
 800e1e0:	f04f 0806 	moveq.w	r8, #6
 800e1e4:	4640      	mov	r0, r8
 800e1e6:	b005      	add	sp, #20
 800e1e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1ec:	4645      	mov	r5, r8
 800e1ee:	4626      	mov	r6, r4
 800e1f0:	2401      	movs	r4, #1
 800e1f2:	e7c7      	b.n	800e184 <__gethex+0xb4>
 800e1f4:	f04f 0b00 	mov.w	fp, #0
 800e1f8:	1ca9      	adds	r1, r5, #2
 800e1fa:	e7d0      	b.n	800e19e <__gethex+0xce>
 800e1fc:	f04f 0b01 	mov.w	fp, #1
 800e200:	e7fa      	b.n	800e1f8 <__gethex+0x128>
 800e202:	230a      	movs	r3, #10
 800e204:	fb03 0002 	mla	r0, r3, r2, r0
 800e208:	e7d0      	b.n	800e1ac <__gethex+0xdc>
 800e20a:	4629      	mov	r1, r5
 800e20c:	e7e0      	b.n	800e1d0 <__gethex+0x100>
 800e20e:	4621      	mov	r1, r4
 800e210:	eba5 0308 	sub.w	r3, r5, r8
 800e214:	3b01      	subs	r3, #1
 800e216:	2b07      	cmp	r3, #7
 800e218:	dc0a      	bgt.n	800e230 <__gethex+0x160>
 800e21a:	4648      	mov	r0, r9
 800e21c:	f000 faa0 	bl	800e760 <_Balloc>
 800e220:	4604      	mov	r4, r0
 800e222:	b940      	cbnz	r0, 800e236 <__gethex+0x166>
 800e224:	4602      	mov	r2, r0
 800e226:	21e4      	movs	r1, #228	; 0xe4
 800e228:	4b61      	ldr	r3, [pc, #388]	; (800e3b0 <__gethex+0x2e0>)
 800e22a:	4862      	ldr	r0, [pc, #392]	; (800e3b4 <__gethex+0x2e4>)
 800e22c:	f7fe fffe 	bl	800d22c <__assert_func>
 800e230:	3101      	adds	r1, #1
 800e232:	105b      	asrs	r3, r3, #1
 800e234:	e7ef      	b.n	800e216 <__gethex+0x146>
 800e236:	2300      	movs	r3, #0
 800e238:	469b      	mov	fp, r3
 800e23a:	f100 0a14 	add.w	sl, r0, #20
 800e23e:	f8cd a004 	str.w	sl, [sp, #4]
 800e242:	45a8      	cmp	r8, r5
 800e244:	d344      	bcc.n	800e2d0 <__gethex+0x200>
 800e246:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e24a:	4658      	mov	r0, fp
 800e24c:	f848 bb04 	str.w	fp, [r8], #4
 800e250:	eba8 080a 	sub.w	r8, r8, sl
 800e254:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800e258:	6122      	str	r2, [r4, #16]
 800e25a:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800e25e:	f000 fb71 	bl	800e944 <__hi0bits>
 800e262:	683d      	ldr	r5, [r7, #0]
 800e264:	eba8 0800 	sub.w	r8, r8, r0
 800e268:	45a8      	cmp	r8, r5
 800e26a:	dd59      	ble.n	800e320 <__gethex+0x250>
 800e26c:	eba8 0805 	sub.w	r8, r8, r5
 800e270:	4641      	mov	r1, r8
 800e272:	4620      	mov	r0, r4
 800e274:	f000 feef 	bl	800f056 <__any_on>
 800e278:	4683      	mov	fp, r0
 800e27a:	b1b8      	cbz	r0, 800e2ac <__gethex+0x1dc>
 800e27c:	f04f 0b01 	mov.w	fp, #1
 800e280:	f108 33ff 	add.w	r3, r8, #4294967295
 800e284:	1159      	asrs	r1, r3, #5
 800e286:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e28a:	f003 021f 	and.w	r2, r3, #31
 800e28e:	fa0b f202 	lsl.w	r2, fp, r2
 800e292:	420a      	tst	r2, r1
 800e294:	d00a      	beq.n	800e2ac <__gethex+0x1dc>
 800e296:	455b      	cmp	r3, fp
 800e298:	dd06      	ble.n	800e2a8 <__gethex+0x1d8>
 800e29a:	4620      	mov	r0, r4
 800e29c:	f1a8 0102 	sub.w	r1, r8, #2
 800e2a0:	f000 fed9 	bl	800f056 <__any_on>
 800e2a4:	2800      	cmp	r0, #0
 800e2a6:	d138      	bne.n	800e31a <__gethex+0x24a>
 800e2a8:	f04f 0b02 	mov.w	fp, #2
 800e2ac:	4641      	mov	r1, r8
 800e2ae:	4620      	mov	r0, r4
 800e2b0:	f7ff fea6 	bl	800e000 <rshift>
 800e2b4:	4446      	add	r6, r8
 800e2b6:	68bb      	ldr	r3, [r7, #8]
 800e2b8:	42b3      	cmp	r3, r6
 800e2ba:	da41      	bge.n	800e340 <__gethex+0x270>
 800e2bc:	4621      	mov	r1, r4
 800e2be:	4648      	mov	r0, r9
 800e2c0:	f000 fa8e 	bl	800e7e0 <_Bfree>
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e2c8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800e2cc:	6013      	str	r3, [r2, #0]
 800e2ce:	e789      	b.n	800e1e4 <__gethex+0x114>
 800e2d0:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800e2d4:	2a2e      	cmp	r2, #46	; 0x2e
 800e2d6:	d014      	beq.n	800e302 <__gethex+0x232>
 800e2d8:	2b20      	cmp	r3, #32
 800e2da:	d106      	bne.n	800e2ea <__gethex+0x21a>
 800e2dc:	9b01      	ldr	r3, [sp, #4]
 800e2de:	f843 bb04 	str.w	fp, [r3], #4
 800e2e2:	f04f 0b00 	mov.w	fp, #0
 800e2e6:	9301      	str	r3, [sp, #4]
 800e2e8:	465b      	mov	r3, fp
 800e2ea:	7828      	ldrb	r0, [r5, #0]
 800e2ec:	9303      	str	r3, [sp, #12]
 800e2ee:	f7ff feda 	bl	800e0a6 <__hexdig_fun>
 800e2f2:	9b03      	ldr	r3, [sp, #12]
 800e2f4:	f000 000f 	and.w	r0, r0, #15
 800e2f8:	4098      	lsls	r0, r3
 800e2fa:	ea4b 0b00 	orr.w	fp, fp, r0
 800e2fe:	3304      	adds	r3, #4
 800e300:	e79f      	b.n	800e242 <__gethex+0x172>
 800e302:	45a8      	cmp	r8, r5
 800e304:	d8e8      	bhi.n	800e2d8 <__gethex+0x208>
 800e306:	2201      	movs	r2, #1
 800e308:	4628      	mov	r0, r5
 800e30a:	4928      	ldr	r1, [pc, #160]	; (800e3ac <__gethex+0x2dc>)
 800e30c:	9303      	str	r3, [sp, #12]
 800e30e:	f7fe f89b 	bl	800c448 <strncmp>
 800e312:	9b03      	ldr	r3, [sp, #12]
 800e314:	2800      	cmp	r0, #0
 800e316:	d1df      	bne.n	800e2d8 <__gethex+0x208>
 800e318:	e793      	b.n	800e242 <__gethex+0x172>
 800e31a:	f04f 0b03 	mov.w	fp, #3
 800e31e:	e7c5      	b.n	800e2ac <__gethex+0x1dc>
 800e320:	da0b      	bge.n	800e33a <__gethex+0x26a>
 800e322:	eba5 0808 	sub.w	r8, r5, r8
 800e326:	4621      	mov	r1, r4
 800e328:	4642      	mov	r2, r8
 800e32a:	4648      	mov	r0, r9
 800e32c:	f000 fc70 	bl	800ec10 <__lshift>
 800e330:	4604      	mov	r4, r0
 800e332:	eba6 0608 	sub.w	r6, r6, r8
 800e336:	f100 0a14 	add.w	sl, r0, #20
 800e33a:	f04f 0b00 	mov.w	fp, #0
 800e33e:	e7ba      	b.n	800e2b6 <__gethex+0x1e6>
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	42b3      	cmp	r3, r6
 800e344:	dd74      	ble.n	800e430 <__gethex+0x360>
 800e346:	1b9e      	subs	r6, r3, r6
 800e348:	42b5      	cmp	r5, r6
 800e34a:	dc35      	bgt.n	800e3b8 <__gethex+0x2e8>
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	2b02      	cmp	r3, #2
 800e350:	d023      	beq.n	800e39a <__gethex+0x2ca>
 800e352:	2b03      	cmp	r3, #3
 800e354:	d025      	beq.n	800e3a2 <__gethex+0x2d2>
 800e356:	2b01      	cmp	r3, #1
 800e358:	d115      	bne.n	800e386 <__gethex+0x2b6>
 800e35a:	42b5      	cmp	r5, r6
 800e35c:	d113      	bne.n	800e386 <__gethex+0x2b6>
 800e35e:	2d01      	cmp	r5, #1
 800e360:	d10b      	bne.n	800e37a <__gethex+0x2aa>
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	9a02      	ldr	r2, [sp, #8]
 800e366:	f04f 0862 	mov.w	r8, #98	; 0x62
 800e36a:	6013      	str	r3, [r2, #0]
 800e36c:	2301      	movs	r3, #1
 800e36e:	6123      	str	r3, [r4, #16]
 800e370:	f8ca 3000 	str.w	r3, [sl]
 800e374:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e376:	601c      	str	r4, [r3, #0]
 800e378:	e734      	b.n	800e1e4 <__gethex+0x114>
 800e37a:	4620      	mov	r0, r4
 800e37c:	1e69      	subs	r1, r5, #1
 800e37e:	f000 fe6a 	bl	800f056 <__any_on>
 800e382:	2800      	cmp	r0, #0
 800e384:	d1ed      	bne.n	800e362 <__gethex+0x292>
 800e386:	4621      	mov	r1, r4
 800e388:	4648      	mov	r0, r9
 800e38a:	f000 fa29 	bl	800e7e0 <_Bfree>
 800e38e:	2300      	movs	r3, #0
 800e390:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e392:	f04f 0850 	mov.w	r8, #80	; 0x50
 800e396:	6013      	str	r3, [r2, #0]
 800e398:	e724      	b.n	800e1e4 <__gethex+0x114>
 800e39a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d1f2      	bne.n	800e386 <__gethex+0x2b6>
 800e3a0:	e7df      	b.n	800e362 <__gethex+0x292>
 800e3a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d1dc      	bne.n	800e362 <__gethex+0x292>
 800e3a8:	e7ed      	b.n	800e386 <__gethex+0x2b6>
 800e3aa:	bf00      	nop
 800e3ac:	08010712 	.word	0x08010712
 800e3b0:	08010a63 	.word	0x08010a63
 800e3b4:	08010a74 	.word	0x08010a74
 800e3b8:	f106 38ff 	add.w	r8, r6, #4294967295
 800e3bc:	f1bb 0f00 	cmp.w	fp, #0
 800e3c0:	d133      	bne.n	800e42a <__gethex+0x35a>
 800e3c2:	f1b8 0f00 	cmp.w	r8, #0
 800e3c6:	d004      	beq.n	800e3d2 <__gethex+0x302>
 800e3c8:	4641      	mov	r1, r8
 800e3ca:	4620      	mov	r0, r4
 800e3cc:	f000 fe43 	bl	800f056 <__any_on>
 800e3d0:	4683      	mov	fp, r0
 800e3d2:	2301      	movs	r3, #1
 800e3d4:	ea4f 1268 	mov.w	r2, r8, asr #5
 800e3d8:	f008 081f 	and.w	r8, r8, #31
 800e3dc:	fa03 f308 	lsl.w	r3, r3, r8
 800e3e0:	f04f 0802 	mov.w	r8, #2
 800e3e4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e3e8:	4631      	mov	r1, r6
 800e3ea:	4213      	tst	r3, r2
 800e3ec:	4620      	mov	r0, r4
 800e3ee:	bf18      	it	ne
 800e3f0:	f04b 0b02 	orrne.w	fp, fp, #2
 800e3f4:	1bad      	subs	r5, r5, r6
 800e3f6:	f7ff fe03 	bl	800e000 <rshift>
 800e3fa:	687e      	ldr	r6, [r7, #4]
 800e3fc:	f1bb 0f00 	cmp.w	fp, #0
 800e400:	d04a      	beq.n	800e498 <__gethex+0x3c8>
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	2b02      	cmp	r3, #2
 800e406:	d016      	beq.n	800e436 <__gethex+0x366>
 800e408:	2b03      	cmp	r3, #3
 800e40a:	d018      	beq.n	800e43e <__gethex+0x36e>
 800e40c:	2b01      	cmp	r3, #1
 800e40e:	d109      	bne.n	800e424 <__gethex+0x354>
 800e410:	f01b 0f02 	tst.w	fp, #2
 800e414:	d006      	beq.n	800e424 <__gethex+0x354>
 800e416:	f8da 3000 	ldr.w	r3, [sl]
 800e41a:	ea4b 0b03 	orr.w	fp, fp, r3
 800e41e:	f01b 0f01 	tst.w	fp, #1
 800e422:	d10f      	bne.n	800e444 <__gethex+0x374>
 800e424:	f048 0810 	orr.w	r8, r8, #16
 800e428:	e036      	b.n	800e498 <__gethex+0x3c8>
 800e42a:	f04f 0b01 	mov.w	fp, #1
 800e42e:	e7d0      	b.n	800e3d2 <__gethex+0x302>
 800e430:	f04f 0801 	mov.w	r8, #1
 800e434:	e7e2      	b.n	800e3fc <__gethex+0x32c>
 800e436:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e438:	f1c3 0301 	rsb	r3, r3, #1
 800e43c:	930f      	str	r3, [sp, #60]	; 0x3c
 800e43e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e440:	2b00      	cmp	r3, #0
 800e442:	d0ef      	beq.n	800e424 <__gethex+0x354>
 800e444:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e448:	f104 0214 	add.w	r2, r4, #20
 800e44c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800e450:	9301      	str	r3, [sp, #4]
 800e452:	2300      	movs	r3, #0
 800e454:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800e458:	4694      	mov	ip, r2
 800e45a:	f852 1b04 	ldr.w	r1, [r2], #4
 800e45e:	f1b1 3fff 	cmp.w	r1, #4294967295
 800e462:	d01e      	beq.n	800e4a2 <__gethex+0x3d2>
 800e464:	3101      	adds	r1, #1
 800e466:	f8cc 1000 	str.w	r1, [ip]
 800e46a:	f1b8 0f02 	cmp.w	r8, #2
 800e46e:	f104 0214 	add.w	r2, r4, #20
 800e472:	d13d      	bne.n	800e4f0 <__gethex+0x420>
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	3b01      	subs	r3, #1
 800e478:	42ab      	cmp	r3, r5
 800e47a:	d10b      	bne.n	800e494 <__gethex+0x3c4>
 800e47c:	2301      	movs	r3, #1
 800e47e:	1169      	asrs	r1, r5, #5
 800e480:	f005 051f 	and.w	r5, r5, #31
 800e484:	fa03 f505 	lsl.w	r5, r3, r5
 800e488:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e48c:	421d      	tst	r5, r3
 800e48e:	bf18      	it	ne
 800e490:	f04f 0801 	movne.w	r8, #1
 800e494:	f048 0820 	orr.w	r8, r8, #32
 800e498:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e49a:	601c      	str	r4, [r3, #0]
 800e49c:	9b02      	ldr	r3, [sp, #8]
 800e49e:	601e      	str	r6, [r3, #0]
 800e4a0:	e6a0      	b.n	800e1e4 <__gethex+0x114>
 800e4a2:	4290      	cmp	r0, r2
 800e4a4:	f842 3c04 	str.w	r3, [r2, #-4]
 800e4a8:	d8d6      	bhi.n	800e458 <__gethex+0x388>
 800e4aa:	68a2      	ldr	r2, [r4, #8]
 800e4ac:	4593      	cmp	fp, r2
 800e4ae:	db17      	blt.n	800e4e0 <__gethex+0x410>
 800e4b0:	6861      	ldr	r1, [r4, #4]
 800e4b2:	4648      	mov	r0, r9
 800e4b4:	3101      	adds	r1, #1
 800e4b6:	f000 f953 	bl	800e760 <_Balloc>
 800e4ba:	4682      	mov	sl, r0
 800e4bc:	b918      	cbnz	r0, 800e4c6 <__gethex+0x3f6>
 800e4be:	4602      	mov	r2, r0
 800e4c0:	2184      	movs	r1, #132	; 0x84
 800e4c2:	4b1a      	ldr	r3, [pc, #104]	; (800e52c <__gethex+0x45c>)
 800e4c4:	e6b1      	b.n	800e22a <__gethex+0x15a>
 800e4c6:	6922      	ldr	r2, [r4, #16]
 800e4c8:	f104 010c 	add.w	r1, r4, #12
 800e4cc:	3202      	adds	r2, #2
 800e4ce:	0092      	lsls	r2, r2, #2
 800e4d0:	300c      	adds	r0, #12
 800e4d2:	f7fe fe92 	bl	800d1fa <memcpy>
 800e4d6:	4621      	mov	r1, r4
 800e4d8:	4648      	mov	r0, r9
 800e4da:	f000 f981 	bl	800e7e0 <_Bfree>
 800e4de:	4654      	mov	r4, sl
 800e4e0:	6922      	ldr	r2, [r4, #16]
 800e4e2:	1c51      	adds	r1, r2, #1
 800e4e4:	6121      	str	r1, [r4, #16]
 800e4e6:	2101      	movs	r1, #1
 800e4e8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e4ec:	6151      	str	r1, [r2, #20]
 800e4ee:	e7bc      	b.n	800e46a <__gethex+0x39a>
 800e4f0:	6921      	ldr	r1, [r4, #16]
 800e4f2:	4559      	cmp	r1, fp
 800e4f4:	dd0b      	ble.n	800e50e <__gethex+0x43e>
 800e4f6:	2101      	movs	r1, #1
 800e4f8:	4620      	mov	r0, r4
 800e4fa:	f7ff fd81 	bl	800e000 <rshift>
 800e4fe:	68bb      	ldr	r3, [r7, #8]
 800e500:	3601      	adds	r6, #1
 800e502:	42b3      	cmp	r3, r6
 800e504:	f6ff aeda 	blt.w	800e2bc <__gethex+0x1ec>
 800e508:	f04f 0801 	mov.w	r8, #1
 800e50c:	e7c2      	b.n	800e494 <__gethex+0x3c4>
 800e50e:	f015 051f 	ands.w	r5, r5, #31
 800e512:	d0f9      	beq.n	800e508 <__gethex+0x438>
 800e514:	9b01      	ldr	r3, [sp, #4]
 800e516:	f1c5 0520 	rsb	r5, r5, #32
 800e51a:	441a      	add	r2, r3
 800e51c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800e520:	f000 fa10 	bl	800e944 <__hi0bits>
 800e524:	42a8      	cmp	r0, r5
 800e526:	dbe6      	blt.n	800e4f6 <__gethex+0x426>
 800e528:	e7ee      	b.n	800e508 <__gethex+0x438>
 800e52a:	bf00      	nop
 800e52c:	08010a63 	.word	0x08010a63

0800e530 <L_shift>:
 800e530:	f1c2 0208 	rsb	r2, r2, #8
 800e534:	0092      	lsls	r2, r2, #2
 800e536:	b570      	push	{r4, r5, r6, lr}
 800e538:	f1c2 0620 	rsb	r6, r2, #32
 800e53c:	6843      	ldr	r3, [r0, #4]
 800e53e:	6804      	ldr	r4, [r0, #0]
 800e540:	fa03 f506 	lsl.w	r5, r3, r6
 800e544:	432c      	orrs	r4, r5
 800e546:	40d3      	lsrs	r3, r2
 800e548:	6004      	str	r4, [r0, #0]
 800e54a:	f840 3f04 	str.w	r3, [r0, #4]!
 800e54e:	4288      	cmp	r0, r1
 800e550:	d3f4      	bcc.n	800e53c <L_shift+0xc>
 800e552:	bd70      	pop	{r4, r5, r6, pc}

0800e554 <__match>:
 800e554:	b530      	push	{r4, r5, lr}
 800e556:	6803      	ldr	r3, [r0, #0]
 800e558:	3301      	adds	r3, #1
 800e55a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e55e:	b914      	cbnz	r4, 800e566 <__match+0x12>
 800e560:	6003      	str	r3, [r0, #0]
 800e562:	2001      	movs	r0, #1
 800e564:	bd30      	pop	{r4, r5, pc}
 800e566:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e56a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e56e:	2d19      	cmp	r5, #25
 800e570:	bf98      	it	ls
 800e572:	3220      	addls	r2, #32
 800e574:	42a2      	cmp	r2, r4
 800e576:	d0f0      	beq.n	800e55a <__match+0x6>
 800e578:	2000      	movs	r0, #0
 800e57a:	e7f3      	b.n	800e564 <__match+0x10>

0800e57c <__hexnan>:
 800e57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e580:	2500      	movs	r5, #0
 800e582:	680b      	ldr	r3, [r1, #0]
 800e584:	4682      	mov	sl, r0
 800e586:	115e      	asrs	r6, r3, #5
 800e588:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e58c:	f013 031f 	ands.w	r3, r3, #31
 800e590:	bf18      	it	ne
 800e592:	3604      	addne	r6, #4
 800e594:	1f37      	subs	r7, r6, #4
 800e596:	4690      	mov	r8, r2
 800e598:	46b9      	mov	r9, r7
 800e59a:	463c      	mov	r4, r7
 800e59c:	46ab      	mov	fp, r5
 800e59e:	b087      	sub	sp, #28
 800e5a0:	6801      	ldr	r1, [r0, #0]
 800e5a2:	9301      	str	r3, [sp, #4]
 800e5a4:	f846 5c04 	str.w	r5, [r6, #-4]
 800e5a8:	9502      	str	r5, [sp, #8]
 800e5aa:	784a      	ldrb	r2, [r1, #1]
 800e5ac:	1c4b      	adds	r3, r1, #1
 800e5ae:	9303      	str	r3, [sp, #12]
 800e5b0:	b342      	cbz	r2, 800e604 <__hexnan+0x88>
 800e5b2:	4610      	mov	r0, r2
 800e5b4:	9105      	str	r1, [sp, #20]
 800e5b6:	9204      	str	r2, [sp, #16]
 800e5b8:	f7ff fd75 	bl	800e0a6 <__hexdig_fun>
 800e5bc:	2800      	cmp	r0, #0
 800e5be:	d14f      	bne.n	800e660 <__hexnan+0xe4>
 800e5c0:	9a04      	ldr	r2, [sp, #16]
 800e5c2:	9905      	ldr	r1, [sp, #20]
 800e5c4:	2a20      	cmp	r2, #32
 800e5c6:	d818      	bhi.n	800e5fa <__hexnan+0x7e>
 800e5c8:	9b02      	ldr	r3, [sp, #8]
 800e5ca:	459b      	cmp	fp, r3
 800e5cc:	dd13      	ble.n	800e5f6 <__hexnan+0x7a>
 800e5ce:	454c      	cmp	r4, r9
 800e5d0:	d206      	bcs.n	800e5e0 <__hexnan+0x64>
 800e5d2:	2d07      	cmp	r5, #7
 800e5d4:	dc04      	bgt.n	800e5e0 <__hexnan+0x64>
 800e5d6:	462a      	mov	r2, r5
 800e5d8:	4649      	mov	r1, r9
 800e5da:	4620      	mov	r0, r4
 800e5dc:	f7ff ffa8 	bl	800e530 <L_shift>
 800e5e0:	4544      	cmp	r4, r8
 800e5e2:	d950      	bls.n	800e686 <__hexnan+0x10a>
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	f1a4 0904 	sub.w	r9, r4, #4
 800e5ea:	f844 3c04 	str.w	r3, [r4, #-4]
 800e5ee:	461d      	mov	r5, r3
 800e5f0:	464c      	mov	r4, r9
 800e5f2:	f8cd b008 	str.w	fp, [sp, #8]
 800e5f6:	9903      	ldr	r1, [sp, #12]
 800e5f8:	e7d7      	b.n	800e5aa <__hexnan+0x2e>
 800e5fa:	2a29      	cmp	r2, #41	; 0x29
 800e5fc:	d155      	bne.n	800e6aa <__hexnan+0x12e>
 800e5fe:	3102      	adds	r1, #2
 800e600:	f8ca 1000 	str.w	r1, [sl]
 800e604:	f1bb 0f00 	cmp.w	fp, #0
 800e608:	d04f      	beq.n	800e6aa <__hexnan+0x12e>
 800e60a:	454c      	cmp	r4, r9
 800e60c:	d206      	bcs.n	800e61c <__hexnan+0xa0>
 800e60e:	2d07      	cmp	r5, #7
 800e610:	dc04      	bgt.n	800e61c <__hexnan+0xa0>
 800e612:	462a      	mov	r2, r5
 800e614:	4649      	mov	r1, r9
 800e616:	4620      	mov	r0, r4
 800e618:	f7ff ff8a 	bl	800e530 <L_shift>
 800e61c:	4544      	cmp	r4, r8
 800e61e:	d934      	bls.n	800e68a <__hexnan+0x10e>
 800e620:	4623      	mov	r3, r4
 800e622:	f1a8 0204 	sub.w	r2, r8, #4
 800e626:	f853 1b04 	ldr.w	r1, [r3], #4
 800e62a:	429f      	cmp	r7, r3
 800e62c:	f842 1f04 	str.w	r1, [r2, #4]!
 800e630:	d2f9      	bcs.n	800e626 <__hexnan+0xaa>
 800e632:	1b3b      	subs	r3, r7, r4
 800e634:	f023 0303 	bic.w	r3, r3, #3
 800e638:	3304      	adds	r3, #4
 800e63a:	3e03      	subs	r6, #3
 800e63c:	3401      	adds	r4, #1
 800e63e:	42a6      	cmp	r6, r4
 800e640:	bf38      	it	cc
 800e642:	2304      	movcc	r3, #4
 800e644:	2200      	movs	r2, #0
 800e646:	4443      	add	r3, r8
 800e648:	f843 2b04 	str.w	r2, [r3], #4
 800e64c:	429f      	cmp	r7, r3
 800e64e:	d2fb      	bcs.n	800e648 <__hexnan+0xcc>
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	b91b      	cbnz	r3, 800e65c <__hexnan+0xe0>
 800e654:	4547      	cmp	r7, r8
 800e656:	d126      	bne.n	800e6a6 <__hexnan+0x12a>
 800e658:	2301      	movs	r3, #1
 800e65a:	603b      	str	r3, [r7, #0]
 800e65c:	2005      	movs	r0, #5
 800e65e:	e025      	b.n	800e6ac <__hexnan+0x130>
 800e660:	3501      	adds	r5, #1
 800e662:	2d08      	cmp	r5, #8
 800e664:	f10b 0b01 	add.w	fp, fp, #1
 800e668:	dd06      	ble.n	800e678 <__hexnan+0xfc>
 800e66a:	4544      	cmp	r4, r8
 800e66c:	d9c3      	bls.n	800e5f6 <__hexnan+0x7a>
 800e66e:	2300      	movs	r3, #0
 800e670:	2501      	movs	r5, #1
 800e672:	f844 3c04 	str.w	r3, [r4, #-4]
 800e676:	3c04      	subs	r4, #4
 800e678:	6822      	ldr	r2, [r4, #0]
 800e67a:	f000 000f 	and.w	r0, r0, #15
 800e67e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e682:	6020      	str	r0, [r4, #0]
 800e684:	e7b7      	b.n	800e5f6 <__hexnan+0x7a>
 800e686:	2508      	movs	r5, #8
 800e688:	e7b5      	b.n	800e5f6 <__hexnan+0x7a>
 800e68a:	9b01      	ldr	r3, [sp, #4]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d0df      	beq.n	800e650 <__hexnan+0xd4>
 800e690:	f04f 32ff 	mov.w	r2, #4294967295
 800e694:	f1c3 0320 	rsb	r3, r3, #32
 800e698:	40da      	lsrs	r2, r3
 800e69a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e69e:	4013      	ands	r3, r2
 800e6a0:	f846 3c04 	str.w	r3, [r6, #-4]
 800e6a4:	e7d4      	b.n	800e650 <__hexnan+0xd4>
 800e6a6:	3f04      	subs	r7, #4
 800e6a8:	e7d2      	b.n	800e650 <__hexnan+0xd4>
 800e6aa:	2004      	movs	r0, #4
 800e6ac:	b007      	add	sp, #28
 800e6ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800e6b4 <_findenv_r>:
 800e6b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6b8:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800e728 <_findenv_r+0x74>
 800e6bc:	4607      	mov	r7, r0
 800e6be:	4689      	mov	r9, r1
 800e6c0:	4616      	mov	r6, r2
 800e6c2:	f000 ffed 	bl	800f6a0 <__env_lock>
 800e6c6:	f8da 4000 	ldr.w	r4, [sl]
 800e6ca:	b134      	cbz	r4, 800e6da <_findenv_r+0x26>
 800e6cc:	464b      	mov	r3, r9
 800e6ce:	4698      	mov	r8, r3
 800e6d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e6d4:	b13a      	cbz	r2, 800e6e6 <_findenv_r+0x32>
 800e6d6:	2a3d      	cmp	r2, #61	; 0x3d
 800e6d8:	d1f9      	bne.n	800e6ce <_findenv_r+0x1a>
 800e6da:	4638      	mov	r0, r7
 800e6dc:	f000 ffe6 	bl	800f6ac <__env_unlock>
 800e6e0:	2000      	movs	r0, #0
 800e6e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6e6:	eba8 0809 	sub.w	r8, r8, r9
 800e6ea:	46a3      	mov	fp, r4
 800e6ec:	f854 0b04 	ldr.w	r0, [r4], #4
 800e6f0:	2800      	cmp	r0, #0
 800e6f2:	d0f2      	beq.n	800e6da <_findenv_r+0x26>
 800e6f4:	4642      	mov	r2, r8
 800e6f6:	4649      	mov	r1, r9
 800e6f8:	f7fd fea6 	bl	800c448 <strncmp>
 800e6fc:	2800      	cmp	r0, #0
 800e6fe:	d1f4      	bne.n	800e6ea <_findenv_r+0x36>
 800e700:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800e704:	eb03 0508 	add.w	r5, r3, r8
 800e708:	f813 3008 	ldrb.w	r3, [r3, r8]
 800e70c:	2b3d      	cmp	r3, #61	; 0x3d
 800e70e:	d1ec      	bne.n	800e6ea <_findenv_r+0x36>
 800e710:	f8da 3000 	ldr.w	r3, [sl]
 800e714:	4638      	mov	r0, r7
 800e716:	ebab 0303 	sub.w	r3, fp, r3
 800e71a:	109b      	asrs	r3, r3, #2
 800e71c:	6033      	str	r3, [r6, #0]
 800e71e:	f000 ffc5 	bl	800f6ac <__env_unlock>
 800e722:	1c68      	adds	r0, r5, #1
 800e724:	e7dd      	b.n	800e6e2 <_findenv_r+0x2e>
 800e726:	bf00      	nop
 800e728:	20000000 	.word	0x20000000

0800e72c <_getenv_r>:
 800e72c:	b507      	push	{r0, r1, r2, lr}
 800e72e:	aa01      	add	r2, sp, #4
 800e730:	f7ff ffc0 	bl	800e6b4 <_findenv_r>
 800e734:	b003      	add	sp, #12
 800e736:	f85d fb04 	ldr.w	pc, [sp], #4

0800e73a <__ascii_mbtowc>:
 800e73a:	b082      	sub	sp, #8
 800e73c:	b901      	cbnz	r1, 800e740 <__ascii_mbtowc+0x6>
 800e73e:	a901      	add	r1, sp, #4
 800e740:	b142      	cbz	r2, 800e754 <__ascii_mbtowc+0x1a>
 800e742:	b14b      	cbz	r3, 800e758 <__ascii_mbtowc+0x1e>
 800e744:	7813      	ldrb	r3, [r2, #0]
 800e746:	600b      	str	r3, [r1, #0]
 800e748:	7812      	ldrb	r2, [r2, #0]
 800e74a:	1e10      	subs	r0, r2, #0
 800e74c:	bf18      	it	ne
 800e74e:	2001      	movne	r0, #1
 800e750:	b002      	add	sp, #8
 800e752:	4770      	bx	lr
 800e754:	4610      	mov	r0, r2
 800e756:	e7fb      	b.n	800e750 <__ascii_mbtowc+0x16>
 800e758:	f06f 0001 	mvn.w	r0, #1
 800e75c:	e7f8      	b.n	800e750 <__ascii_mbtowc+0x16>
	...

0800e760 <_Balloc>:
 800e760:	b570      	push	{r4, r5, r6, lr}
 800e762:	69c6      	ldr	r6, [r0, #28]
 800e764:	4604      	mov	r4, r0
 800e766:	460d      	mov	r5, r1
 800e768:	b976      	cbnz	r6, 800e788 <_Balloc+0x28>
 800e76a:	2010      	movs	r0, #16
 800e76c:	f7fc f91e 	bl	800a9ac <malloc>
 800e770:	4602      	mov	r2, r0
 800e772:	61e0      	str	r0, [r4, #28]
 800e774:	b920      	cbnz	r0, 800e780 <_Balloc+0x20>
 800e776:	216b      	movs	r1, #107	; 0x6b
 800e778:	4b17      	ldr	r3, [pc, #92]	; (800e7d8 <_Balloc+0x78>)
 800e77a:	4818      	ldr	r0, [pc, #96]	; (800e7dc <_Balloc+0x7c>)
 800e77c:	f7fe fd56 	bl	800d22c <__assert_func>
 800e780:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e784:	6006      	str	r6, [r0, #0]
 800e786:	60c6      	str	r6, [r0, #12]
 800e788:	69e6      	ldr	r6, [r4, #28]
 800e78a:	68f3      	ldr	r3, [r6, #12]
 800e78c:	b183      	cbz	r3, 800e7b0 <_Balloc+0x50>
 800e78e:	69e3      	ldr	r3, [r4, #28]
 800e790:	68db      	ldr	r3, [r3, #12]
 800e792:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e796:	b9b8      	cbnz	r0, 800e7c8 <_Balloc+0x68>
 800e798:	2101      	movs	r1, #1
 800e79a:	fa01 f605 	lsl.w	r6, r1, r5
 800e79e:	1d72      	adds	r2, r6, #5
 800e7a0:	4620      	mov	r0, r4
 800e7a2:	0092      	lsls	r2, r2, #2
 800e7a4:	f000 ff67 	bl	800f676 <_calloc_r>
 800e7a8:	b160      	cbz	r0, 800e7c4 <_Balloc+0x64>
 800e7aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e7ae:	e00e      	b.n	800e7ce <_Balloc+0x6e>
 800e7b0:	2221      	movs	r2, #33	; 0x21
 800e7b2:	2104      	movs	r1, #4
 800e7b4:	4620      	mov	r0, r4
 800e7b6:	f000 ff5e 	bl	800f676 <_calloc_r>
 800e7ba:	69e3      	ldr	r3, [r4, #28]
 800e7bc:	60f0      	str	r0, [r6, #12]
 800e7be:	68db      	ldr	r3, [r3, #12]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d1e4      	bne.n	800e78e <_Balloc+0x2e>
 800e7c4:	2000      	movs	r0, #0
 800e7c6:	bd70      	pop	{r4, r5, r6, pc}
 800e7c8:	6802      	ldr	r2, [r0, #0]
 800e7ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e7d4:	e7f7      	b.n	800e7c6 <_Balloc+0x66>
 800e7d6:	bf00      	nop
 800e7d8:	0801089b 	.word	0x0801089b
 800e7dc:	08010ad4 	.word	0x08010ad4

0800e7e0 <_Bfree>:
 800e7e0:	b570      	push	{r4, r5, r6, lr}
 800e7e2:	69c6      	ldr	r6, [r0, #28]
 800e7e4:	4605      	mov	r5, r0
 800e7e6:	460c      	mov	r4, r1
 800e7e8:	b976      	cbnz	r6, 800e808 <_Bfree+0x28>
 800e7ea:	2010      	movs	r0, #16
 800e7ec:	f7fc f8de 	bl	800a9ac <malloc>
 800e7f0:	4602      	mov	r2, r0
 800e7f2:	61e8      	str	r0, [r5, #28]
 800e7f4:	b920      	cbnz	r0, 800e800 <_Bfree+0x20>
 800e7f6:	218f      	movs	r1, #143	; 0x8f
 800e7f8:	4b08      	ldr	r3, [pc, #32]	; (800e81c <_Bfree+0x3c>)
 800e7fa:	4809      	ldr	r0, [pc, #36]	; (800e820 <_Bfree+0x40>)
 800e7fc:	f7fe fd16 	bl	800d22c <__assert_func>
 800e800:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e804:	6006      	str	r6, [r0, #0]
 800e806:	60c6      	str	r6, [r0, #12]
 800e808:	b13c      	cbz	r4, 800e81a <_Bfree+0x3a>
 800e80a:	69eb      	ldr	r3, [r5, #28]
 800e80c:	6862      	ldr	r2, [r4, #4]
 800e80e:	68db      	ldr	r3, [r3, #12]
 800e810:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e814:	6021      	str	r1, [r4, #0]
 800e816:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e81a:	bd70      	pop	{r4, r5, r6, pc}
 800e81c:	0801089b 	.word	0x0801089b
 800e820:	08010ad4 	.word	0x08010ad4

0800e824 <__multadd>:
 800e824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e828:	4607      	mov	r7, r0
 800e82a:	460c      	mov	r4, r1
 800e82c:	461e      	mov	r6, r3
 800e82e:	2000      	movs	r0, #0
 800e830:	690d      	ldr	r5, [r1, #16]
 800e832:	f101 0c14 	add.w	ip, r1, #20
 800e836:	f8dc 3000 	ldr.w	r3, [ip]
 800e83a:	3001      	adds	r0, #1
 800e83c:	b299      	uxth	r1, r3
 800e83e:	fb02 6101 	mla	r1, r2, r1, r6
 800e842:	0c1e      	lsrs	r6, r3, #16
 800e844:	0c0b      	lsrs	r3, r1, #16
 800e846:	fb02 3306 	mla	r3, r2, r6, r3
 800e84a:	b289      	uxth	r1, r1
 800e84c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e850:	4285      	cmp	r5, r0
 800e852:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e856:	f84c 1b04 	str.w	r1, [ip], #4
 800e85a:	dcec      	bgt.n	800e836 <__multadd+0x12>
 800e85c:	b30e      	cbz	r6, 800e8a2 <__multadd+0x7e>
 800e85e:	68a3      	ldr	r3, [r4, #8]
 800e860:	42ab      	cmp	r3, r5
 800e862:	dc19      	bgt.n	800e898 <__multadd+0x74>
 800e864:	6861      	ldr	r1, [r4, #4]
 800e866:	4638      	mov	r0, r7
 800e868:	3101      	adds	r1, #1
 800e86a:	f7ff ff79 	bl	800e760 <_Balloc>
 800e86e:	4680      	mov	r8, r0
 800e870:	b928      	cbnz	r0, 800e87e <__multadd+0x5a>
 800e872:	4602      	mov	r2, r0
 800e874:	21ba      	movs	r1, #186	; 0xba
 800e876:	4b0c      	ldr	r3, [pc, #48]	; (800e8a8 <__multadd+0x84>)
 800e878:	480c      	ldr	r0, [pc, #48]	; (800e8ac <__multadd+0x88>)
 800e87a:	f7fe fcd7 	bl	800d22c <__assert_func>
 800e87e:	6922      	ldr	r2, [r4, #16]
 800e880:	f104 010c 	add.w	r1, r4, #12
 800e884:	3202      	adds	r2, #2
 800e886:	0092      	lsls	r2, r2, #2
 800e888:	300c      	adds	r0, #12
 800e88a:	f7fe fcb6 	bl	800d1fa <memcpy>
 800e88e:	4621      	mov	r1, r4
 800e890:	4638      	mov	r0, r7
 800e892:	f7ff ffa5 	bl	800e7e0 <_Bfree>
 800e896:	4644      	mov	r4, r8
 800e898:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e89c:	3501      	adds	r5, #1
 800e89e:	615e      	str	r6, [r3, #20]
 800e8a0:	6125      	str	r5, [r4, #16]
 800e8a2:	4620      	mov	r0, r4
 800e8a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8a8:	08010a63 	.word	0x08010a63
 800e8ac:	08010ad4 	.word	0x08010ad4

0800e8b0 <__s2b>:
 800e8b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8b4:	4615      	mov	r5, r2
 800e8b6:	2209      	movs	r2, #9
 800e8b8:	461f      	mov	r7, r3
 800e8ba:	3308      	adds	r3, #8
 800e8bc:	460c      	mov	r4, r1
 800e8be:	fb93 f3f2 	sdiv	r3, r3, r2
 800e8c2:	4606      	mov	r6, r0
 800e8c4:	2201      	movs	r2, #1
 800e8c6:	2100      	movs	r1, #0
 800e8c8:	429a      	cmp	r2, r3
 800e8ca:	db09      	blt.n	800e8e0 <__s2b+0x30>
 800e8cc:	4630      	mov	r0, r6
 800e8ce:	f7ff ff47 	bl	800e760 <_Balloc>
 800e8d2:	b940      	cbnz	r0, 800e8e6 <__s2b+0x36>
 800e8d4:	4602      	mov	r2, r0
 800e8d6:	21d3      	movs	r1, #211	; 0xd3
 800e8d8:	4b18      	ldr	r3, [pc, #96]	; (800e93c <__s2b+0x8c>)
 800e8da:	4819      	ldr	r0, [pc, #100]	; (800e940 <__s2b+0x90>)
 800e8dc:	f7fe fca6 	bl	800d22c <__assert_func>
 800e8e0:	0052      	lsls	r2, r2, #1
 800e8e2:	3101      	adds	r1, #1
 800e8e4:	e7f0      	b.n	800e8c8 <__s2b+0x18>
 800e8e6:	9b08      	ldr	r3, [sp, #32]
 800e8e8:	2d09      	cmp	r5, #9
 800e8ea:	6143      	str	r3, [r0, #20]
 800e8ec:	f04f 0301 	mov.w	r3, #1
 800e8f0:	6103      	str	r3, [r0, #16]
 800e8f2:	dd16      	ble.n	800e922 <__s2b+0x72>
 800e8f4:	f104 0909 	add.w	r9, r4, #9
 800e8f8:	46c8      	mov	r8, r9
 800e8fa:	442c      	add	r4, r5
 800e8fc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e900:	4601      	mov	r1, r0
 800e902:	220a      	movs	r2, #10
 800e904:	4630      	mov	r0, r6
 800e906:	3b30      	subs	r3, #48	; 0x30
 800e908:	f7ff ff8c 	bl	800e824 <__multadd>
 800e90c:	45a0      	cmp	r8, r4
 800e90e:	d1f5      	bne.n	800e8fc <__s2b+0x4c>
 800e910:	f1a5 0408 	sub.w	r4, r5, #8
 800e914:	444c      	add	r4, r9
 800e916:	1b2d      	subs	r5, r5, r4
 800e918:	1963      	adds	r3, r4, r5
 800e91a:	42bb      	cmp	r3, r7
 800e91c:	db04      	blt.n	800e928 <__s2b+0x78>
 800e91e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e922:	2509      	movs	r5, #9
 800e924:	340a      	adds	r4, #10
 800e926:	e7f6      	b.n	800e916 <__s2b+0x66>
 800e928:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e92c:	4601      	mov	r1, r0
 800e92e:	220a      	movs	r2, #10
 800e930:	4630      	mov	r0, r6
 800e932:	3b30      	subs	r3, #48	; 0x30
 800e934:	f7ff ff76 	bl	800e824 <__multadd>
 800e938:	e7ee      	b.n	800e918 <__s2b+0x68>
 800e93a:	bf00      	nop
 800e93c:	08010a63 	.word	0x08010a63
 800e940:	08010ad4 	.word	0x08010ad4

0800e944 <__hi0bits>:
 800e944:	0c02      	lsrs	r2, r0, #16
 800e946:	0412      	lsls	r2, r2, #16
 800e948:	4603      	mov	r3, r0
 800e94a:	b9ca      	cbnz	r2, 800e980 <__hi0bits+0x3c>
 800e94c:	0403      	lsls	r3, r0, #16
 800e94e:	2010      	movs	r0, #16
 800e950:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e954:	bf04      	itt	eq
 800e956:	021b      	lsleq	r3, r3, #8
 800e958:	3008      	addeq	r0, #8
 800e95a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e95e:	bf04      	itt	eq
 800e960:	011b      	lsleq	r3, r3, #4
 800e962:	3004      	addeq	r0, #4
 800e964:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e968:	bf04      	itt	eq
 800e96a:	009b      	lsleq	r3, r3, #2
 800e96c:	3002      	addeq	r0, #2
 800e96e:	2b00      	cmp	r3, #0
 800e970:	db05      	blt.n	800e97e <__hi0bits+0x3a>
 800e972:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800e976:	f100 0001 	add.w	r0, r0, #1
 800e97a:	bf08      	it	eq
 800e97c:	2020      	moveq	r0, #32
 800e97e:	4770      	bx	lr
 800e980:	2000      	movs	r0, #0
 800e982:	e7e5      	b.n	800e950 <__hi0bits+0xc>

0800e984 <__lo0bits>:
 800e984:	6803      	ldr	r3, [r0, #0]
 800e986:	4602      	mov	r2, r0
 800e988:	f013 0007 	ands.w	r0, r3, #7
 800e98c:	d00b      	beq.n	800e9a6 <__lo0bits+0x22>
 800e98e:	07d9      	lsls	r1, r3, #31
 800e990:	d421      	bmi.n	800e9d6 <__lo0bits+0x52>
 800e992:	0798      	lsls	r0, r3, #30
 800e994:	bf49      	itett	mi
 800e996:	085b      	lsrmi	r3, r3, #1
 800e998:	089b      	lsrpl	r3, r3, #2
 800e99a:	2001      	movmi	r0, #1
 800e99c:	6013      	strmi	r3, [r2, #0]
 800e99e:	bf5c      	itt	pl
 800e9a0:	2002      	movpl	r0, #2
 800e9a2:	6013      	strpl	r3, [r2, #0]
 800e9a4:	4770      	bx	lr
 800e9a6:	b299      	uxth	r1, r3
 800e9a8:	b909      	cbnz	r1, 800e9ae <__lo0bits+0x2a>
 800e9aa:	2010      	movs	r0, #16
 800e9ac:	0c1b      	lsrs	r3, r3, #16
 800e9ae:	b2d9      	uxtb	r1, r3
 800e9b0:	b909      	cbnz	r1, 800e9b6 <__lo0bits+0x32>
 800e9b2:	3008      	adds	r0, #8
 800e9b4:	0a1b      	lsrs	r3, r3, #8
 800e9b6:	0719      	lsls	r1, r3, #28
 800e9b8:	bf04      	itt	eq
 800e9ba:	091b      	lsreq	r3, r3, #4
 800e9bc:	3004      	addeq	r0, #4
 800e9be:	0799      	lsls	r1, r3, #30
 800e9c0:	bf04      	itt	eq
 800e9c2:	089b      	lsreq	r3, r3, #2
 800e9c4:	3002      	addeq	r0, #2
 800e9c6:	07d9      	lsls	r1, r3, #31
 800e9c8:	d403      	bmi.n	800e9d2 <__lo0bits+0x4e>
 800e9ca:	085b      	lsrs	r3, r3, #1
 800e9cc:	f100 0001 	add.w	r0, r0, #1
 800e9d0:	d003      	beq.n	800e9da <__lo0bits+0x56>
 800e9d2:	6013      	str	r3, [r2, #0]
 800e9d4:	4770      	bx	lr
 800e9d6:	2000      	movs	r0, #0
 800e9d8:	4770      	bx	lr
 800e9da:	2020      	movs	r0, #32
 800e9dc:	4770      	bx	lr
	...

0800e9e0 <__i2b>:
 800e9e0:	b510      	push	{r4, lr}
 800e9e2:	460c      	mov	r4, r1
 800e9e4:	2101      	movs	r1, #1
 800e9e6:	f7ff febb 	bl	800e760 <_Balloc>
 800e9ea:	4602      	mov	r2, r0
 800e9ec:	b928      	cbnz	r0, 800e9fa <__i2b+0x1a>
 800e9ee:	f240 1145 	movw	r1, #325	; 0x145
 800e9f2:	4b04      	ldr	r3, [pc, #16]	; (800ea04 <__i2b+0x24>)
 800e9f4:	4804      	ldr	r0, [pc, #16]	; (800ea08 <__i2b+0x28>)
 800e9f6:	f7fe fc19 	bl	800d22c <__assert_func>
 800e9fa:	2301      	movs	r3, #1
 800e9fc:	6144      	str	r4, [r0, #20]
 800e9fe:	6103      	str	r3, [r0, #16]
 800ea00:	bd10      	pop	{r4, pc}
 800ea02:	bf00      	nop
 800ea04:	08010a63 	.word	0x08010a63
 800ea08:	08010ad4 	.word	0x08010ad4

0800ea0c <__multiply>:
 800ea0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea10:	4691      	mov	r9, r2
 800ea12:	690a      	ldr	r2, [r1, #16]
 800ea14:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ea18:	460c      	mov	r4, r1
 800ea1a:	429a      	cmp	r2, r3
 800ea1c:	bfbe      	ittt	lt
 800ea1e:	460b      	movlt	r3, r1
 800ea20:	464c      	movlt	r4, r9
 800ea22:	4699      	movlt	r9, r3
 800ea24:	6927      	ldr	r7, [r4, #16]
 800ea26:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ea2a:	68a3      	ldr	r3, [r4, #8]
 800ea2c:	6861      	ldr	r1, [r4, #4]
 800ea2e:	eb07 060a 	add.w	r6, r7, sl
 800ea32:	42b3      	cmp	r3, r6
 800ea34:	b085      	sub	sp, #20
 800ea36:	bfb8      	it	lt
 800ea38:	3101      	addlt	r1, #1
 800ea3a:	f7ff fe91 	bl	800e760 <_Balloc>
 800ea3e:	b930      	cbnz	r0, 800ea4e <__multiply+0x42>
 800ea40:	4602      	mov	r2, r0
 800ea42:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800ea46:	4b43      	ldr	r3, [pc, #268]	; (800eb54 <__multiply+0x148>)
 800ea48:	4843      	ldr	r0, [pc, #268]	; (800eb58 <__multiply+0x14c>)
 800ea4a:	f7fe fbef 	bl	800d22c <__assert_func>
 800ea4e:	f100 0514 	add.w	r5, r0, #20
 800ea52:	462b      	mov	r3, r5
 800ea54:	2200      	movs	r2, #0
 800ea56:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ea5a:	4543      	cmp	r3, r8
 800ea5c:	d321      	bcc.n	800eaa2 <__multiply+0x96>
 800ea5e:	f104 0314 	add.w	r3, r4, #20
 800ea62:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ea66:	f109 0314 	add.w	r3, r9, #20
 800ea6a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ea6e:	9202      	str	r2, [sp, #8]
 800ea70:	1b3a      	subs	r2, r7, r4
 800ea72:	3a15      	subs	r2, #21
 800ea74:	f022 0203 	bic.w	r2, r2, #3
 800ea78:	3204      	adds	r2, #4
 800ea7a:	f104 0115 	add.w	r1, r4, #21
 800ea7e:	428f      	cmp	r7, r1
 800ea80:	bf38      	it	cc
 800ea82:	2204      	movcc	r2, #4
 800ea84:	9201      	str	r2, [sp, #4]
 800ea86:	9a02      	ldr	r2, [sp, #8]
 800ea88:	9303      	str	r3, [sp, #12]
 800ea8a:	429a      	cmp	r2, r3
 800ea8c:	d80c      	bhi.n	800eaa8 <__multiply+0x9c>
 800ea8e:	2e00      	cmp	r6, #0
 800ea90:	dd03      	ble.n	800ea9a <__multiply+0x8e>
 800ea92:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d05a      	beq.n	800eb50 <__multiply+0x144>
 800ea9a:	6106      	str	r6, [r0, #16]
 800ea9c:	b005      	add	sp, #20
 800ea9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaa2:	f843 2b04 	str.w	r2, [r3], #4
 800eaa6:	e7d8      	b.n	800ea5a <__multiply+0x4e>
 800eaa8:	f8b3 a000 	ldrh.w	sl, [r3]
 800eaac:	f1ba 0f00 	cmp.w	sl, #0
 800eab0:	d023      	beq.n	800eafa <__multiply+0xee>
 800eab2:	46a9      	mov	r9, r5
 800eab4:	f04f 0c00 	mov.w	ip, #0
 800eab8:	f104 0e14 	add.w	lr, r4, #20
 800eabc:	f85e 2b04 	ldr.w	r2, [lr], #4
 800eac0:	f8d9 1000 	ldr.w	r1, [r9]
 800eac4:	fa1f fb82 	uxth.w	fp, r2
 800eac8:	b289      	uxth	r1, r1
 800eaca:	fb0a 110b 	mla	r1, sl, fp, r1
 800eace:	4461      	add	r1, ip
 800ead0:	f8d9 c000 	ldr.w	ip, [r9]
 800ead4:	0c12      	lsrs	r2, r2, #16
 800ead6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800eada:	fb0a c202 	mla	r2, sl, r2, ip
 800eade:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800eae2:	b289      	uxth	r1, r1
 800eae4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800eae8:	4577      	cmp	r7, lr
 800eaea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800eaee:	f849 1b04 	str.w	r1, [r9], #4
 800eaf2:	d8e3      	bhi.n	800eabc <__multiply+0xb0>
 800eaf4:	9a01      	ldr	r2, [sp, #4]
 800eaf6:	f845 c002 	str.w	ip, [r5, r2]
 800eafa:	9a03      	ldr	r2, [sp, #12]
 800eafc:	3304      	adds	r3, #4
 800eafe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800eb02:	f1b9 0f00 	cmp.w	r9, #0
 800eb06:	d021      	beq.n	800eb4c <__multiply+0x140>
 800eb08:	46ae      	mov	lr, r5
 800eb0a:	f04f 0a00 	mov.w	sl, #0
 800eb0e:	6829      	ldr	r1, [r5, #0]
 800eb10:	f104 0c14 	add.w	ip, r4, #20
 800eb14:	f8bc b000 	ldrh.w	fp, [ip]
 800eb18:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800eb1c:	b289      	uxth	r1, r1
 800eb1e:	fb09 220b 	mla	r2, r9, fp, r2
 800eb22:	4452      	add	r2, sl
 800eb24:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800eb28:	f84e 1b04 	str.w	r1, [lr], #4
 800eb2c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800eb30:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800eb34:	f8be 1000 	ldrh.w	r1, [lr]
 800eb38:	4567      	cmp	r7, ip
 800eb3a:	fb09 110a 	mla	r1, r9, sl, r1
 800eb3e:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800eb42:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800eb46:	d8e5      	bhi.n	800eb14 <__multiply+0x108>
 800eb48:	9a01      	ldr	r2, [sp, #4]
 800eb4a:	50a9      	str	r1, [r5, r2]
 800eb4c:	3504      	adds	r5, #4
 800eb4e:	e79a      	b.n	800ea86 <__multiply+0x7a>
 800eb50:	3e01      	subs	r6, #1
 800eb52:	e79c      	b.n	800ea8e <__multiply+0x82>
 800eb54:	08010a63 	.word	0x08010a63
 800eb58:	08010ad4 	.word	0x08010ad4

0800eb5c <__pow5mult>:
 800eb5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb60:	4615      	mov	r5, r2
 800eb62:	f012 0203 	ands.w	r2, r2, #3
 800eb66:	4606      	mov	r6, r0
 800eb68:	460f      	mov	r7, r1
 800eb6a:	d007      	beq.n	800eb7c <__pow5mult+0x20>
 800eb6c:	4c25      	ldr	r4, [pc, #148]	; (800ec04 <__pow5mult+0xa8>)
 800eb6e:	3a01      	subs	r2, #1
 800eb70:	2300      	movs	r3, #0
 800eb72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800eb76:	f7ff fe55 	bl	800e824 <__multadd>
 800eb7a:	4607      	mov	r7, r0
 800eb7c:	10ad      	asrs	r5, r5, #2
 800eb7e:	d03d      	beq.n	800ebfc <__pow5mult+0xa0>
 800eb80:	69f4      	ldr	r4, [r6, #28]
 800eb82:	b97c      	cbnz	r4, 800eba4 <__pow5mult+0x48>
 800eb84:	2010      	movs	r0, #16
 800eb86:	f7fb ff11 	bl	800a9ac <malloc>
 800eb8a:	4602      	mov	r2, r0
 800eb8c:	61f0      	str	r0, [r6, #28]
 800eb8e:	b928      	cbnz	r0, 800eb9c <__pow5mult+0x40>
 800eb90:	f240 11b3 	movw	r1, #435	; 0x1b3
 800eb94:	4b1c      	ldr	r3, [pc, #112]	; (800ec08 <__pow5mult+0xac>)
 800eb96:	481d      	ldr	r0, [pc, #116]	; (800ec0c <__pow5mult+0xb0>)
 800eb98:	f7fe fb48 	bl	800d22c <__assert_func>
 800eb9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800eba0:	6004      	str	r4, [r0, #0]
 800eba2:	60c4      	str	r4, [r0, #12]
 800eba4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800eba8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ebac:	b94c      	cbnz	r4, 800ebc2 <__pow5mult+0x66>
 800ebae:	f240 2171 	movw	r1, #625	; 0x271
 800ebb2:	4630      	mov	r0, r6
 800ebb4:	f7ff ff14 	bl	800e9e0 <__i2b>
 800ebb8:	2300      	movs	r3, #0
 800ebba:	4604      	mov	r4, r0
 800ebbc:	f8c8 0008 	str.w	r0, [r8, #8]
 800ebc0:	6003      	str	r3, [r0, #0]
 800ebc2:	f04f 0900 	mov.w	r9, #0
 800ebc6:	07eb      	lsls	r3, r5, #31
 800ebc8:	d50a      	bpl.n	800ebe0 <__pow5mult+0x84>
 800ebca:	4639      	mov	r1, r7
 800ebcc:	4622      	mov	r2, r4
 800ebce:	4630      	mov	r0, r6
 800ebd0:	f7ff ff1c 	bl	800ea0c <__multiply>
 800ebd4:	4680      	mov	r8, r0
 800ebd6:	4639      	mov	r1, r7
 800ebd8:	4630      	mov	r0, r6
 800ebda:	f7ff fe01 	bl	800e7e0 <_Bfree>
 800ebde:	4647      	mov	r7, r8
 800ebe0:	106d      	asrs	r5, r5, #1
 800ebe2:	d00b      	beq.n	800ebfc <__pow5mult+0xa0>
 800ebe4:	6820      	ldr	r0, [r4, #0]
 800ebe6:	b938      	cbnz	r0, 800ebf8 <__pow5mult+0x9c>
 800ebe8:	4622      	mov	r2, r4
 800ebea:	4621      	mov	r1, r4
 800ebec:	4630      	mov	r0, r6
 800ebee:	f7ff ff0d 	bl	800ea0c <__multiply>
 800ebf2:	6020      	str	r0, [r4, #0]
 800ebf4:	f8c0 9000 	str.w	r9, [r0]
 800ebf8:	4604      	mov	r4, r0
 800ebfa:	e7e4      	b.n	800ebc6 <__pow5mult+0x6a>
 800ebfc:	4638      	mov	r0, r7
 800ebfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec02:	bf00      	nop
 800ec04:	08010c20 	.word	0x08010c20
 800ec08:	0801089b 	.word	0x0801089b
 800ec0c:	08010ad4 	.word	0x08010ad4

0800ec10 <__lshift>:
 800ec10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec14:	460c      	mov	r4, r1
 800ec16:	4607      	mov	r7, r0
 800ec18:	4691      	mov	r9, r2
 800ec1a:	6923      	ldr	r3, [r4, #16]
 800ec1c:	6849      	ldr	r1, [r1, #4]
 800ec1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ec22:	68a3      	ldr	r3, [r4, #8]
 800ec24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ec28:	f108 0601 	add.w	r6, r8, #1
 800ec2c:	42b3      	cmp	r3, r6
 800ec2e:	db0b      	blt.n	800ec48 <__lshift+0x38>
 800ec30:	4638      	mov	r0, r7
 800ec32:	f7ff fd95 	bl	800e760 <_Balloc>
 800ec36:	4605      	mov	r5, r0
 800ec38:	b948      	cbnz	r0, 800ec4e <__lshift+0x3e>
 800ec3a:	4602      	mov	r2, r0
 800ec3c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ec40:	4b27      	ldr	r3, [pc, #156]	; (800ece0 <__lshift+0xd0>)
 800ec42:	4828      	ldr	r0, [pc, #160]	; (800ece4 <__lshift+0xd4>)
 800ec44:	f7fe faf2 	bl	800d22c <__assert_func>
 800ec48:	3101      	adds	r1, #1
 800ec4a:	005b      	lsls	r3, r3, #1
 800ec4c:	e7ee      	b.n	800ec2c <__lshift+0x1c>
 800ec4e:	2300      	movs	r3, #0
 800ec50:	f100 0114 	add.w	r1, r0, #20
 800ec54:	f100 0210 	add.w	r2, r0, #16
 800ec58:	4618      	mov	r0, r3
 800ec5a:	4553      	cmp	r3, sl
 800ec5c:	db33      	blt.n	800ecc6 <__lshift+0xb6>
 800ec5e:	6920      	ldr	r0, [r4, #16]
 800ec60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ec64:	f104 0314 	add.w	r3, r4, #20
 800ec68:	f019 091f 	ands.w	r9, r9, #31
 800ec6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ec70:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ec74:	d02b      	beq.n	800ecce <__lshift+0xbe>
 800ec76:	468a      	mov	sl, r1
 800ec78:	2200      	movs	r2, #0
 800ec7a:	f1c9 0e20 	rsb	lr, r9, #32
 800ec7e:	6818      	ldr	r0, [r3, #0]
 800ec80:	fa00 f009 	lsl.w	r0, r0, r9
 800ec84:	4310      	orrs	r0, r2
 800ec86:	f84a 0b04 	str.w	r0, [sl], #4
 800ec8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec8e:	459c      	cmp	ip, r3
 800ec90:	fa22 f20e 	lsr.w	r2, r2, lr
 800ec94:	d8f3      	bhi.n	800ec7e <__lshift+0x6e>
 800ec96:	ebac 0304 	sub.w	r3, ip, r4
 800ec9a:	3b15      	subs	r3, #21
 800ec9c:	f023 0303 	bic.w	r3, r3, #3
 800eca0:	3304      	adds	r3, #4
 800eca2:	f104 0015 	add.w	r0, r4, #21
 800eca6:	4584      	cmp	ip, r0
 800eca8:	bf38      	it	cc
 800ecaa:	2304      	movcc	r3, #4
 800ecac:	50ca      	str	r2, [r1, r3]
 800ecae:	b10a      	cbz	r2, 800ecb4 <__lshift+0xa4>
 800ecb0:	f108 0602 	add.w	r6, r8, #2
 800ecb4:	3e01      	subs	r6, #1
 800ecb6:	4638      	mov	r0, r7
 800ecb8:	4621      	mov	r1, r4
 800ecba:	612e      	str	r6, [r5, #16]
 800ecbc:	f7ff fd90 	bl	800e7e0 <_Bfree>
 800ecc0:	4628      	mov	r0, r5
 800ecc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecc6:	f842 0f04 	str.w	r0, [r2, #4]!
 800ecca:	3301      	adds	r3, #1
 800eccc:	e7c5      	b.n	800ec5a <__lshift+0x4a>
 800ecce:	3904      	subs	r1, #4
 800ecd0:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecd4:	459c      	cmp	ip, r3
 800ecd6:	f841 2f04 	str.w	r2, [r1, #4]!
 800ecda:	d8f9      	bhi.n	800ecd0 <__lshift+0xc0>
 800ecdc:	e7ea      	b.n	800ecb4 <__lshift+0xa4>
 800ecde:	bf00      	nop
 800ece0:	08010a63 	.word	0x08010a63
 800ece4:	08010ad4 	.word	0x08010ad4

0800ece8 <__mcmp>:
 800ece8:	4603      	mov	r3, r0
 800ecea:	690a      	ldr	r2, [r1, #16]
 800ecec:	6900      	ldr	r0, [r0, #16]
 800ecee:	b530      	push	{r4, r5, lr}
 800ecf0:	1a80      	subs	r0, r0, r2
 800ecf2:	d10d      	bne.n	800ed10 <__mcmp+0x28>
 800ecf4:	3314      	adds	r3, #20
 800ecf6:	3114      	adds	r1, #20
 800ecf8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ecfc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ed00:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ed04:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ed08:	4295      	cmp	r5, r2
 800ed0a:	d002      	beq.n	800ed12 <__mcmp+0x2a>
 800ed0c:	d304      	bcc.n	800ed18 <__mcmp+0x30>
 800ed0e:	2001      	movs	r0, #1
 800ed10:	bd30      	pop	{r4, r5, pc}
 800ed12:	42a3      	cmp	r3, r4
 800ed14:	d3f4      	bcc.n	800ed00 <__mcmp+0x18>
 800ed16:	e7fb      	b.n	800ed10 <__mcmp+0x28>
 800ed18:	f04f 30ff 	mov.w	r0, #4294967295
 800ed1c:	e7f8      	b.n	800ed10 <__mcmp+0x28>
	...

0800ed20 <__mdiff>:
 800ed20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed24:	460d      	mov	r5, r1
 800ed26:	4607      	mov	r7, r0
 800ed28:	4611      	mov	r1, r2
 800ed2a:	4628      	mov	r0, r5
 800ed2c:	4614      	mov	r4, r2
 800ed2e:	f7ff ffdb 	bl	800ece8 <__mcmp>
 800ed32:	1e06      	subs	r6, r0, #0
 800ed34:	d111      	bne.n	800ed5a <__mdiff+0x3a>
 800ed36:	4631      	mov	r1, r6
 800ed38:	4638      	mov	r0, r7
 800ed3a:	f7ff fd11 	bl	800e760 <_Balloc>
 800ed3e:	4602      	mov	r2, r0
 800ed40:	b928      	cbnz	r0, 800ed4e <__mdiff+0x2e>
 800ed42:	f240 2137 	movw	r1, #567	; 0x237
 800ed46:	4b3a      	ldr	r3, [pc, #232]	; (800ee30 <__mdiff+0x110>)
 800ed48:	483a      	ldr	r0, [pc, #232]	; (800ee34 <__mdiff+0x114>)
 800ed4a:	f7fe fa6f 	bl	800d22c <__assert_func>
 800ed4e:	2301      	movs	r3, #1
 800ed50:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ed54:	4610      	mov	r0, r2
 800ed56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed5a:	bfa4      	itt	ge
 800ed5c:	4623      	movge	r3, r4
 800ed5e:	462c      	movge	r4, r5
 800ed60:	4638      	mov	r0, r7
 800ed62:	6861      	ldr	r1, [r4, #4]
 800ed64:	bfa6      	itte	ge
 800ed66:	461d      	movge	r5, r3
 800ed68:	2600      	movge	r6, #0
 800ed6a:	2601      	movlt	r6, #1
 800ed6c:	f7ff fcf8 	bl	800e760 <_Balloc>
 800ed70:	4602      	mov	r2, r0
 800ed72:	b918      	cbnz	r0, 800ed7c <__mdiff+0x5c>
 800ed74:	f240 2145 	movw	r1, #581	; 0x245
 800ed78:	4b2d      	ldr	r3, [pc, #180]	; (800ee30 <__mdiff+0x110>)
 800ed7a:	e7e5      	b.n	800ed48 <__mdiff+0x28>
 800ed7c:	f102 0814 	add.w	r8, r2, #20
 800ed80:	46c2      	mov	sl, r8
 800ed82:	f04f 0c00 	mov.w	ip, #0
 800ed86:	6927      	ldr	r7, [r4, #16]
 800ed88:	60c6      	str	r6, [r0, #12]
 800ed8a:	692e      	ldr	r6, [r5, #16]
 800ed8c:	f104 0014 	add.w	r0, r4, #20
 800ed90:	f105 0914 	add.w	r9, r5, #20
 800ed94:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800ed98:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ed9c:	3410      	adds	r4, #16
 800ed9e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800eda2:	f859 3b04 	ldr.w	r3, [r9], #4
 800eda6:	fa1f f18b 	uxth.w	r1, fp
 800edaa:	4461      	add	r1, ip
 800edac:	fa1f fc83 	uxth.w	ip, r3
 800edb0:	0c1b      	lsrs	r3, r3, #16
 800edb2:	eba1 010c 	sub.w	r1, r1, ip
 800edb6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800edba:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800edbe:	b289      	uxth	r1, r1
 800edc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800edc4:	454e      	cmp	r6, r9
 800edc6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800edca:	f84a 1b04 	str.w	r1, [sl], #4
 800edce:	d8e6      	bhi.n	800ed9e <__mdiff+0x7e>
 800edd0:	1b73      	subs	r3, r6, r5
 800edd2:	3b15      	subs	r3, #21
 800edd4:	f023 0303 	bic.w	r3, r3, #3
 800edd8:	3515      	adds	r5, #21
 800edda:	3304      	adds	r3, #4
 800eddc:	42ae      	cmp	r6, r5
 800edde:	bf38      	it	cc
 800ede0:	2304      	movcc	r3, #4
 800ede2:	4418      	add	r0, r3
 800ede4:	4443      	add	r3, r8
 800ede6:	461e      	mov	r6, r3
 800ede8:	4605      	mov	r5, r0
 800edea:	4575      	cmp	r5, lr
 800edec:	d30e      	bcc.n	800ee0c <__mdiff+0xec>
 800edee:	f10e 0103 	add.w	r1, lr, #3
 800edf2:	1a09      	subs	r1, r1, r0
 800edf4:	f021 0103 	bic.w	r1, r1, #3
 800edf8:	3803      	subs	r0, #3
 800edfa:	4586      	cmp	lr, r0
 800edfc:	bf38      	it	cc
 800edfe:	2100      	movcc	r1, #0
 800ee00:	440b      	add	r3, r1
 800ee02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ee06:	b189      	cbz	r1, 800ee2c <__mdiff+0x10c>
 800ee08:	6117      	str	r7, [r2, #16]
 800ee0a:	e7a3      	b.n	800ed54 <__mdiff+0x34>
 800ee0c:	f855 8b04 	ldr.w	r8, [r5], #4
 800ee10:	fa1f f188 	uxth.w	r1, r8
 800ee14:	4461      	add	r1, ip
 800ee16:	140c      	asrs	r4, r1, #16
 800ee18:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ee1c:	b289      	uxth	r1, r1
 800ee1e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ee22:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800ee26:	f846 1b04 	str.w	r1, [r6], #4
 800ee2a:	e7de      	b.n	800edea <__mdiff+0xca>
 800ee2c:	3f01      	subs	r7, #1
 800ee2e:	e7e8      	b.n	800ee02 <__mdiff+0xe2>
 800ee30:	08010a63 	.word	0x08010a63
 800ee34:	08010ad4 	.word	0x08010ad4

0800ee38 <__ulp>:
 800ee38:	4b0e      	ldr	r3, [pc, #56]	; (800ee74 <__ulp+0x3c>)
 800ee3a:	400b      	ands	r3, r1
 800ee3c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	dc08      	bgt.n	800ee56 <__ulp+0x1e>
 800ee44:	425b      	negs	r3, r3
 800ee46:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800ee4a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ee4e:	da04      	bge.n	800ee5a <__ulp+0x22>
 800ee50:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ee54:	4113      	asrs	r3, r2
 800ee56:	2200      	movs	r2, #0
 800ee58:	e008      	b.n	800ee6c <__ulp+0x34>
 800ee5a:	f1a2 0314 	sub.w	r3, r2, #20
 800ee5e:	2b1e      	cmp	r3, #30
 800ee60:	bfd6      	itet	le
 800ee62:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800ee66:	2201      	movgt	r2, #1
 800ee68:	40da      	lsrle	r2, r3
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	4619      	mov	r1, r3
 800ee6e:	4610      	mov	r0, r2
 800ee70:	4770      	bx	lr
 800ee72:	bf00      	nop
 800ee74:	7ff00000 	.word	0x7ff00000

0800ee78 <__b2d>:
 800ee78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee7a:	6905      	ldr	r5, [r0, #16]
 800ee7c:	f100 0714 	add.w	r7, r0, #20
 800ee80:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ee84:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ee88:	1f2e      	subs	r6, r5, #4
 800ee8a:	4620      	mov	r0, r4
 800ee8c:	f7ff fd5a 	bl	800e944 <__hi0bits>
 800ee90:	f1c0 0220 	rsb	r2, r0, #32
 800ee94:	280a      	cmp	r0, #10
 800ee96:	4603      	mov	r3, r0
 800ee98:	f8df c068 	ldr.w	ip, [pc, #104]	; 800ef04 <__b2d+0x8c>
 800ee9c:	600a      	str	r2, [r1, #0]
 800ee9e:	dc12      	bgt.n	800eec6 <__b2d+0x4e>
 800eea0:	f1c0 0e0b 	rsb	lr, r0, #11
 800eea4:	fa24 f20e 	lsr.w	r2, r4, lr
 800eea8:	42b7      	cmp	r7, r6
 800eeaa:	ea42 010c 	orr.w	r1, r2, ip
 800eeae:	bf2c      	ite	cs
 800eeb0:	2200      	movcs	r2, #0
 800eeb2:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800eeb6:	3315      	adds	r3, #21
 800eeb8:	fa04 f303 	lsl.w	r3, r4, r3
 800eebc:	fa22 f20e 	lsr.w	r2, r2, lr
 800eec0:	431a      	orrs	r2, r3
 800eec2:	4610      	mov	r0, r2
 800eec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eec6:	42b7      	cmp	r7, r6
 800eec8:	bf2e      	itee	cs
 800eeca:	2200      	movcs	r2, #0
 800eecc:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800eed0:	f1a5 0608 	subcc.w	r6, r5, #8
 800eed4:	3b0b      	subs	r3, #11
 800eed6:	d012      	beq.n	800eefe <__b2d+0x86>
 800eed8:	f1c3 0520 	rsb	r5, r3, #32
 800eedc:	fa22 f105 	lsr.w	r1, r2, r5
 800eee0:	409c      	lsls	r4, r3
 800eee2:	430c      	orrs	r4, r1
 800eee4:	42be      	cmp	r6, r7
 800eee6:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800eeea:	bf94      	ite	ls
 800eeec:	2400      	movls	r4, #0
 800eeee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800eef2:	409a      	lsls	r2, r3
 800eef4:	40ec      	lsrs	r4, r5
 800eef6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800eefa:	4322      	orrs	r2, r4
 800eefc:	e7e1      	b.n	800eec2 <__b2d+0x4a>
 800eefe:	ea44 010c 	orr.w	r1, r4, ip
 800ef02:	e7de      	b.n	800eec2 <__b2d+0x4a>
 800ef04:	3ff00000 	.word	0x3ff00000

0800ef08 <__d2b>:
 800ef08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ef0a:	2101      	movs	r1, #1
 800ef0c:	4617      	mov	r7, r2
 800ef0e:	461c      	mov	r4, r3
 800ef10:	9e08      	ldr	r6, [sp, #32]
 800ef12:	f7ff fc25 	bl	800e760 <_Balloc>
 800ef16:	4605      	mov	r5, r0
 800ef18:	b930      	cbnz	r0, 800ef28 <__d2b+0x20>
 800ef1a:	4602      	mov	r2, r0
 800ef1c:	f240 310f 	movw	r1, #783	; 0x30f
 800ef20:	4b22      	ldr	r3, [pc, #136]	; (800efac <__d2b+0xa4>)
 800ef22:	4823      	ldr	r0, [pc, #140]	; (800efb0 <__d2b+0xa8>)
 800ef24:	f7fe f982 	bl	800d22c <__assert_func>
 800ef28:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800ef2c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800ef30:	bb24      	cbnz	r4, 800ef7c <__d2b+0x74>
 800ef32:	2f00      	cmp	r7, #0
 800ef34:	9301      	str	r3, [sp, #4]
 800ef36:	d026      	beq.n	800ef86 <__d2b+0x7e>
 800ef38:	4668      	mov	r0, sp
 800ef3a:	9700      	str	r7, [sp, #0]
 800ef3c:	f7ff fd22 	bl	800e984 <__lo0bits>
 800ef40:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ef44:	b1e8      	cbz	r0, 800ef82 <__d2b+0x7a>
 800ef46:	f1c0 0320 	rsb	r3, r0, #32
 800ef4a:	fa02 f303 	lsl.w	r3, r2, r3
 800ef4e:	430b      	orrs	r3, r1
 800ef50:	40c2      	lsrs	r2, r0
 800ef52:	616b      	str	r3, [r5, #20]
 800ef54:	9201      	str	r2, [sp, #4]
 800ef56:	9b01      	ldr	r3, [sp, #4]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	bf14      	ite	ne
 800ef5c:	2102      	movne	r1, #2
 800ef5e:	2101      	moveq	r1, #1
 800ef60:	61ab      	str	r3, [r5, #24]
 800ef62:	6129      	str	r1, [r5, #16]
 800ef64:	b1bc      	cbz	r4, 800ef96 <__d2b+0x8e>
 800ef66:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ef6a:	4404      	add	r4, r0
 800ef6c:	6034      	str	r4, [r6, #0]
 800ef6e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ef72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef74:	6018      	str	r0, [r3, #0]
 800ef76:	4628      	mov	r0, r5
 800ef78:	b003      	add	sp, #12
 800ef7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ef80:	e7d7      	b.n	800ef32 <__d2b+0x2a>
 800ef82:	6169      	str	r1, [r5, #20]
 800ef84:	e7e7      	b.n	800ef56 <__d2b+0x4e>
 800ef86:	a801      	add	r0, sp, #4
 800ef88:	f7ff fcfc 	bl	800e984 <__lo0bits>
 800ef8c:	9b01      	ldr	r3, [sp, #4]
 800ef8e:	2101      	movs	r1, #1
 800ef90:	616b      	str	r3, [r5, #20]
 800ef92:	3020      	adds	r0, #32
 800ef94:	e7e5      	b.n	800ef62 <__d2b+0x5a>
 800ef96:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ef9a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800ef9e:	6030      	str	r0, [r6, #0]
 800efa0:	6918      	ldr	r0, [r3, #16]
 800efa2:	f7ff fccf 	bl	800e944 <__hi0bits>
 800efa6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800efaa:	e7e2      	b.n	800ef72 <__d2b+0x6a>
 800efac:	08010a63 	.word	0x08010a63
 800efb0:	08010ad4 	.word	0x08010ad4

0800efb4 <__ratio>:
 800efb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efb8:	4688      	mov	r8, r1
 800efba:	4669      	mov	r1, sp
 800efbc:	4681      	mov	r9, r0
 800efbe:	f7ff ff5b 	bl	800ee78 <__b2d>
 800efc2:	460f      	mov	r7, r1
 800efc4:	4604      	mov	r4, r0
 800efc6:	460d      	mov	r5, r1
 800efc8:	4640      	mov	r0, r8
 800efca:	a901      	add	r1, sp, #4
 800efcc:	f7ff ff54 	bl	800ee78 <__b2d>
 800efd0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800efd4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800efd8:	468b      	mov	fp, r1
 800efda:	eba3 0c02 	sub.w	ip, r3, r2
 800efde:	e9dd 3200 	ldrd	r3, r2, [sp]
 800efe2:	1a9b      	subs	r3, r3, r2
 800efe4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800efe8:	2b00      	cmp	r3, #0
 800efea:	bfd5      	itete	le
 800efec:	460a      	movle	r2, r1
 800efee:	462a      	movgt	r2, r5
 800eff0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800eff4:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800eff8:	bfd8      	it	le
 800effa:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800effe:	465b      	mov	r3, fp
 800f000:	4602      	mov	r2, r0
 800f002:	4639      	mov	r1, r7
 800f004:	4620      	mov	r0, r4
 800f006:	f7f1 fc0b 	bl	8000820 <__aeabi_ddiv>
 800f00a:	b003      	add	sp, #12
 800f00c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f010 <__copybits>:
 800f010:	3901      	subs	r1, #1
 800f012:	b570      	push	{r4, r5, r6, lr}
 800f014:	1149      	asrs	r1, r1, #5
 800f016:	6914      	ldr	r4, [r2, #16]
 800f018:	3101      	adds	r1, #1
 800f01a:	f102 0314 	add.w	r3, r2, #20
 800f01e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f022:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f026:	1f05      	subs	r5, r0, #4
 800f028:	42a3      	cmp	r3, r4
 800f02a:	d30c      	bcc.n	800f046 <__copybits+0x36>
 800f02c:	1aa3      	subs	r3, r4, r2
 800f02e:	3b11      	subs	r3, #17
 800f030:	f023 0303 	bic.w	r3, r3, #3
 800f034:	3211      	adds	r2, #17
 800f036:	42a2      	cmp	r2, r4
 800f038:	bf88      	it	hi
 800f03a:	2300      	movhi	r3, #0
 800f03c:	4418      	add	r0, r3
 800f03e:	2300      	movs	r3, #0
 800f040:	4288      	cmp	r0, r1
 800f042:	d305      	bcc.n	800f050 <__copybits+0x40>
 800f044:	bd70      	pop	{r4, r5, r6, pc}
 800f046:	f853 6b04 	ldr.w	r6, [r3], #4
 800f04a:	f845 6f04 	str.w	r6, [r5, #4]!
 800f04e:	e7eb      	b.n	800f028 <__copybits+0x18>
 800f050:	f840 3b04 	str.w	r3, [r0], #4
 800f054:	e7f4      	b.n	800f040 <__copybits+0x30>

0800f056 <__any_on>:
 800f056:	f100 0214 	add.w	r2, r0, #20
 800f05a:	6900      	ldr	r0, [r0, #16]
 800f05c:	114b      	asrs	r3, r1, #5
 800f05e:	4298      	cmp	r0, r3
 800f060:	b510      	push	{r4, lr}
 800f062:	db11      	blt.n	800f088 <__any_on+0x32>
 800f064:	dd0a      	ble.n	800f07c <__any_on+0x26>
 800f066:	f011 011f 	ands.w	r1, r1, #31
 800f06a:	d007      	beq.n	800f07c <__any_on+0x26>
 800f06c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f070:	fa24 f001 	lsr.w	r0, r4, r1
 800f074:	fa00 f101 	lsl.w	r1, r0, r1
 800f078:	428c      	cmp	r4, r1
 800f07a:	d10b      	bne.n	800f094 <__any_on+0x3e>
 800f07c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f080:	4293      	cmp	r3, r2
 800f082:	d803      	bhi.n	800f08c <__any_on+0x36>
 800f084:	2000      	movs	r0, #0
 800f086:	bd10      	pop	{r4, pc}
 800f088:	4603      	mov	r3, r0
 800f08a:	e7f7      	b.n	800f07c <__any_on+0x26>
 800f08c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f090:	2900      	cmp	r1, #0
 800f092:	d0f5      	beq.n	800f080 <__any_on+0x2a>
 800f094:	2001      	movs	r0, #1
 800f096:	e7f6      	b.n	800f086 <__any_on+0x30>

0800f098 <_strtoul_l.constprop.0>:
 800f098:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f09c:	4686      	mov	lr, r0
 800f09e:	460d      	mov	r5, r1
 800f0a0:	4f35      	ldr	r7, [pc, #212]	; (800f178 <_strtoul_l.constprop.0+0xe0>)
 800f0a2:	4628      	mov	r0, r5
 800f0a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f0a8:	5d3e      	ldrb	r6, [r7, r4]
 800f0aa:	f016 0608 	ands.w	r6, r6, #8
 800f0ae:	d1f8      	bne.n	800f0a2 <_strtoul_l.constprop.0+0xa>
 800f0b0:	2c2d      	cmp	r4, #45	; 0x2d
 800f0b2:	d130      	bne.n	800f116 <_strtoul_l.constprop.0+0x7e>
 800f0b4:	2601      	movs	r6, #1
 800f0b6:	782c      	ldrb	r4, [r5, #0]
 800f0b8:	1c85      	adds	r5, r0, #2
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d057      	beq.n	800f16e <_strtoul_l.constprop.0+0xd6>
 800f0be:	2b10      	cmp	r3, #16
 800f0c0:	d109      	bne.n	800f0d6 <_strtoul_l.constprop.0+0x3e>
 800f0c2:	2c30      	cmp	r4, #48	; 0x30
 800f0c4:	d107      	bne.n	800f0d6 <_strtoul_l.constprop.0+0x3e>
 800f0c6:	7828      	ldrb	r0, [r5, #0]
 800f0c8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800f0cc:	2858      	cmp	r0, #88	; 0x58
 800f0ce:	d149      	bne.n	800f164 <_strtoul_l.constprop.0+0xcc>
 800f0d0:	2310      	movs	r3, #16
 800f0d2:	786c      	ldrb	r4, [r5, #1]
 800f0d4:	3502      	adds	r5, #2
 800f0d6:	f04f 38ff 	mov.w	r8, #4294967295
 800f0da:	fbb8 f8f3 	udiv	r8, r8, r3
 800f0de:	2700      	movs	r7, #0
 800f0e0:	fb03 f908 	mul.w	r9, r3, r8
 800f0e4:	4638      	mov	r0, r7
 800f0e6:	ea6f 0909 	mvn.w	r9, r9
 800f0ea:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800f0ee:	f1bc 0f09 	cmp.w	ip, #9
 800f0f2:	d815      	bhi.n	800f120 <_strtoul_l.constprop.0+0x88>
 800f0f4:	4664      	mov	r4, ip
 800f0f6:	42a3      	cmp	r3, r4
 800f0f8:	dd23      	ble.n	800f142 <_strtoul_l.constprop.0+0xaa>
 800f0fa:	f1b7 3fff 	cmp.w	r7, #4294967295
 800f0fe:	d007      	beq.n	800f110 <_strtoul_l.constprop.0+0x78>
 800f100:	4580      	cmp	r8, r0
 800f102:	d31b      	bcc.n	800f13c <_strtoul_l.constprop.0+0xa4>
 800f104:	d101      	bne.n	800f10a <_strtoul_l.constprop.0+0x72>
 800f106:	45a1      	cmp	r9, r4
 800f108:	db18      	blt.n	800f13c <_strtoul_l.constprop.0+0xa4>
 800f10a:	2701      	movs	r7, #1
 800f10c:	fb00 4003 	mla	r0, r0, r3, r4
 800f110:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f114:	e7e9      	b.n	800f0ea <_strtoul_l.constprop.0+0x52>
 800f116:	2c2b      	cmp	r4, #43	; 0x2b
 800f118:	bf04      	itt	eq
 800f11a:	782c      	ldrbeq	r4, [r5, #0]
 800f11c:	1c85      	addeq	r5, r0, #2
 800f11e:	e7cc      	b.n	800f0ba <_strtoul_l.constprop.0+0x22>
 800f120:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800f124:	f1bc 0f19 	cmp.w	ip, #25
 800f128:	d801      	bhi.n	800f12e <_strtoul_l.constprop.0+0x96>
 800f12a:	3c37      	subs	r4, #55	; 0x37
 800f12c:	e7e3      	b.n	800f0f6 <_strtoul_l.constprop.0+0x5e>
 800f12e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800f132:	f1bc 0f19 	cmp.w	ip, #25
 800f136:	d804      	bhi.n	800f142 <_strtoul_l.constprop.0+0xaa>
 800f138:	3c57      	subs	r4, #87	; 0x57
 800f13a:	e7dc      	b.n	800f0f6 <_strtoul_l.constprop.0+0x5e>
 800f13c:	f04f 37ff 	mov.w	r7, #4294967295
 800f140:	e7e6      	b.n	800f110 <_strtoul_l.constprop.0+0x78>
 800f142:	1c7b      	adds	r3, r7, #1
 800f144:	d106      	bne.n	800f154 <_strtoul_l.constprop.0+0xbc>
 800f146:	2322      	movs	r3, #34	; 0x22
 800f148:	4638      	mov	r0, r7
 800f14a:	f8ce 3000 	str.w	r3, [lr]
 800f14e:	b932      	cbnz	r2, 800f15e <_strtoul_l.constprop.0+0xc6>
 800f150:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f154:	b106      	cbz	r6, 800f158 <_strtoul_l.constprop.0+0xc0>
 800f156:	4240      	negs	r0, r0
 800f158:	2a00      	cmp	r2, #0
 800f15a:	d0f9      	beq.n	800f150 <_strtoul_l.constprop.0+0xb8>
 800f15c:	b107      	cbz	r7, 800f160 <_strtoul_l.constprop.0+0xc8>
 800f15e:	1e69      	subs	r1, r5, #1
 800f160:	6011      	str	r1, [r2, #0]
 800f162:	e7f5      	b.n	800f150 <_strtoul_l.constprop.0+0xb8>
 800f164:	2430      	movs	r4, #48	; 0x30
 800f166:	2b00      	cmp	r3, #0
 800f168:	d1b5      	bne.n	800f0d6 <_strtoul_l.constprop.0+0x3e>
 800f16a:	2308      	movs	r3, #8
 800f16c:	e7b3      	b.n	800f0d6 <_strtoul_l.constprop.0+0x3e>
 800f16e:	2c30      	cmp	r4, #48	; 0x30
 800f170:	d0a9      	beq.n	800f0c6 <_strtoul_l.constprop.0+0x2e>
 800f172:	230a      	movs	r3, #10
 800f174:	e7af      	b.n	800f0d6 <_strtoul_l.constprop.0+0x3e>
 800f176:	bf00      	nop
 800f178:	08010769 	.word	0x08010769

0800f17c <_strtoul_r>:
 800f17c:	f7ff bf8c 	b.w	800f098 <_strtoul_l.constprop.0>

0800f180 <strtoul>:
 800f180:	4613      	mov	r3, r2
 800f182:	460a      	mov	r2, r1
 800f184:	4601      	mov	r1, r0
 800f186:	4802      	ldr	r0, [pc, #8]	; (800f190 <strtoul+0x10>)
 800f188:	6800      	ldr	r0, [r0, #0]
 800f18a:	f7ff bf85 	b.w	800f098 <_strtoul_l.constprop.0>
 800f18e:	bf00      	nop
 800f190:	200001e0 	.word	0x200001e0

0800f194 <__ascii_wctomb>:
 800f194:	4603      	mov	r3, r0
 800f196:	4608      	mov	r0, r1
 800f198:	b141      	cbz	r1, 800f1ac <__ascii_wctomb+0x18>
 800f19a:	2aff      	cmp	r2, #255	; 0xff
 800f19c:	d904      	bls.n	800f1a8 <__ascii_wctomb+0x14>
 800f19e:	228a      	movs	r2, #138	; 0x8a
 800f1a0:	f04f 30ff 	mov.w	r0, #4294967295
 800f1a4:	601a      	str	r2, [r3, #0]
 800f1a6:	4770      	bx	lr
 800f1a8:	2001      	movs	r0, #1
 800f1aa:	700a      	strb	r2, [r1, #0]
 800f1ac:	4770      	bx	lr

0800f1ae <__ssputs_r>:
 800f1ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1b2:	461f      	mov	r7, r3
 800f1b4:	688e      	ldr	r6, [r1, #8]
 800f1b6:	4682      	mov	sl, r0
 800f1b8:	42be      	cmp	r6, r7
 800f1ba:	460c      	mov	r4, r1
 800f1bc:	4690      	mov	r8, r2
 800f1be:	680b      	ldr	r3, [r1, #0]
 800f1c0:	d82c      	bhi.n	800f21c <__ssputs_r+0x6e>
 800f1c2:	898a      	ldrh	r2, [r1, #12]
 800f1c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f1c8:	d026      	beq.n	800f218 <__ssputs_r+0x6a>
 800f1ca:	6965      	ldr	r5, [r4, #20]
 800f1cc:	6909      	ldr	r1, [r1, #16]
 800f1ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f1d2:	eba3 0901 	sub.w	r9, r3, r1
 800f1d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f1da:	1c7b      	adds	r3, r7, #1
 800f1dc:	444b      	add	r3, r9
 800f1de:	106d      	asrs	r5, r5, #1
 800f1e0:	429d      	cmp	r5, r3
 800f1e2:	bf38      	it	cc
 800f1e4:	461d      	movcc	r5, r3
 800f1e6:	0553      	lsls	r3, r2, #21
 800f1e8:	d527      	bpl.n	800f23a <__ssputs_r+0x8c>
 800f1ea:	4629      	mov	r1, r5
 800f1ec:	f7fb fc0e 	bl	800aa0c <_malloc_r>
 800f1f0:	4606      	mov	r6, r0
 800f1f2:	b360      	cbz	r0, 800f24e <__ssputs_r+0xa0>
 800f1f4:	464a      	mov	r2, r9
 800f1f6:	6921      	ldr	r1, [r4, #16]
 800f1f8:	f7fd ffff 	bl	800d1fa <memcpy>
 800f1fc:	89a3      	ldrh	r3, [r4, #12]
 800f1fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f206:	81a3      	strh	r3, [r4, #12]
 800f208:	6126      	str	r6, [r4, #16]
 800f20a:	444e      	add	r6, r9
 800f20c:	6026      	str	r6, [r4, #0]
 800f20e:	463e      	mov	r6, r7
 800f210:	6165      	str	r5, [r4, #20]
 800f212:	eba5 0509 	sub.w	r5, r5, r9
 800f216:	60a5      	str	r5, [r4, #8]
 800f218:	42be      	cmp	r6, r7
 800f21a:	d900      	bls.n	800f21e <__ssputs_r+0x70>
 800f21c:	463e      	mov	r6, r7
 800f21e:	4632      	mov	r2, r6
 800f220:	4641      	mov	r1, r8
 800f222:	6820      	ldr	r0, [r4, #0]
 800f224:	f000 fa02 	bl	800f62c <memmove>
 800f228:	2000      	movs	r0, #0
 800f22a:	68a3      	ldr	r3, [r4, #8]
 800f22c:	1b9b      	subs	r3, r3, r6
 800f22e:	60a3      	str	r3, [r4, #8]
 800f230:	6823      	ldr	r3, [r4, #0]
 800f232:	4433      	add	r3, r6
 800f234:	6023      	str	r3, [r4, #0]
 800f236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f23a:	462a      	mov	r2, r5
 800f23c:	f000 fa3c 	bl	800f6b8 <_realloc_r>
 800f240:	4606      	mov	r6, r0
 800f242:	2800      	cmp	r0, #0
 800f244:	d1e0      	bne.n	800f208 <__ssputs_r+0x5a>
 800f246:	4650      	mov	r0, sl
 800f248:	6921      	ldr	r1, [r4, #16]
 800f24a:	f7fe fe91 	bl	800df70 <_free_r>
 800f24e:	230c      	movs	r3, #12
 800f250:	f8ca 3000 	str.w	r3, [sl]
 800f254:	89a3      	ldrh	r3, [r4, #12]
 800f256:	f04f 30ff 	mov.w	r0, #4294967295
 800f25a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f25e:	81a3      	strh	r3, [r4, #12]
 800f260:	e7e9      	b.n	800f236 <__ssputs_r+0x88>
	...

0800f264 <_svfiprintf_r>:
 800f264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f268:	4698      	mov	r8, r3
 800f26a:	898b      	ldrh	r3, [r1, #12]
 800f26c:	4607      	mov	r7, r0
 800f26e:	061b      	lsls	r3, r3, #24
 800f270:	460d      	mov	r5, r1
 800f272:	4614      	mov	r4, r2
 800f274:	b09d      	sub	sp, #116	; 0x74
 800f276:	d50e      	bpl.n	800f296 <_svfiprintf_r+0x32>
 800f278:	690b      	ldr	r3, [r1, #16]
 800f27a:	b963      	cbnz	r3, 800f296 <_svfiprintf_r+0x32>
 800f27c:	2140      	movs	r1, #64	; 0x40
 800f27e:	f7fb fbc5 	bl	800aa0c <_malloc_r>
 800f282:	6028      	str	r0, [r5, #0]
 800f284:	6128      	str	r0, [r5, #16]
 800f286:	b920      	cbnz	r0, 800f292 <_svfiprintf_r+0x2e>
 800f288:	230c      	movs	r3, #12
 800f28a:	603b      	str	r3, [r7, #0]
 800f28c:	f04f 30ff 	mov.w	r0, #4294967295
 800f290:	e0d0      	b.n	800f434 <_svfiprintf_r+0x1d0>
 800f292:	2340      	movs	r3, #64	; 0x40
 800f294:	616b      	str	r3, [r5, #20]
 800f296:	2300      	movs	r3, #0
 800f298:	9309      	str	r3, [sp, #36]	; 0x24
 800f29a:	2320      	movs	r3, #32
 800f29c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f2a0:	2330      	movs	r3, #48	; 0x30
 800f2a2:	f04f 0901 	mov.w	r9, #1
 800f2a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800f2aa:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800f44c <_svfiprintf_r+0x1e8>
 800f2ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f2b2:	4623      	mov	r3, r4
 800f2b4:	469a      	mov	sl, r3
 800f2b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f2ba:	b10a      	cbz	r2, 800f2c0 <_svfiprintf_r+0x5c>
 800f2bc:	2a25      	cmp	r2, #37	; 0x25
 800f2be:	d1f9      	bne.n	800f2b4 <_svfiprintf_r+0x50>
 800f2c0:	ebba 0b04 	subs.w	fp, sl, r4
 800f2c4:	d00b      	beq.n	800f2de <_svfiprintf_r+0x7a>
 800f2c6:	465b      	mov	r3, fp
 800f2c8:	4622      	mov	r2, r4
 800f2ca:	4629      	mov	r1, r5
 800f2cc:	4638      	mov	r0, r7
 800f2ce:	f7ff ff6e 	bl	800f1ae <__ssputs_r>
 800f2d2:	3001      	adds	r0, #1
 800f2d4:	f000 80a9 	beq.w	800f42a <_svfiprintf_r+0x1c6>
 800f2d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f2da:	445a      	add	r2, fp
 800f2dc:	9209      	str	r2, [sp, #36]	; 0x24
 800f2de:	f89a 3000 	ldrb.w	r3, [sl]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	f000 80a1 	beq.w	800f42a <_svfiprintf_r+0x1c6>
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	f04f 32ff 	mov.w	r2, #4294967295
 800f2ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f2f2:	f10a 0a01 	add.w	sl, sl, #1
 800f2f6:	9304      	str	r3, [sp, #16]
 800f2f8:	9307      	str	r3, [sp, #28]
 800f2fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f2fe:	931a      	str	r3, [sp, #104]	; 0x68
 800f300:	4654      	mov	r4, sl
 800f302:	2205      	movs	r2, #5
 800f304:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f308:	4850      	ldr	r0, [pc, #320]	; (800f44c <_svfiprintf_r+0x1e8>)
 800f30a:	f7fd ff68 	bl	800d1de <memchr>
 800f30e:	9a04      	ldr	r2, [sp, #16]
 800f310:	b9d8      	cbnz	r0, 800f34a <_svfiprintf_r+0xe6>
 800f312:	06d0      	lsls	r0, r2, #27
 800f314:	bf44      	itt	mi
 800f316:	2320      	movmi	r3, #32
 800f318:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f31c:	0711      	lsls	r1, r2, #28
 800f31e:	bf44      	itt	mi
 800f320:	232b      	movmi	r3, #43	; 0x2b
 800f322:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f326:	f89a 3000 	ldrb.w	r3, [sl]
 800f32a:	2b2a      	cmp	r3, #42	; 0x2a
 800f32c:	d015      	beq.n	800f35a <_svfiprintf_r+0xf6>
 800f32e:	4654      	mov	r4, sl
 800f330:	2000      	movs	r0, #0
 800f332:	f04f 0c0a 	mov.w	ip, #10
 800f336:	9a07      	ldr	r2, [sp, #28]
 800f338:	4621      	mov	r1, r4
 800f33a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f33e:	3b30      	subs	r3, #48	; 0x30
 800f340:	2b09      	cmp	r3, #9
 800f342:	d94d      	bls.n	800f3e0 <_svfiprintf_r+0x17c>
 800f344:	b1b0      	cbz	r0, 800f374 <_svfiprintf_r+0x110>
 800f346:	9207      	str	r2, [sp, #28]
 800f348:	e014      	b.n	800f374 <_svfiprintf_r+0x110>
 800f34a:	eba0 0308 	sub.w	r3, r0, r8
 800f34e:	fa09 f303 	lsl.w	r3, r9, r3
 800f352:	4313      	orrs	r3, r2
 800f354:	46a2      	mov	sl, r4
 800f356:	9304      	str	r3, [sp, #16]
 800f358:	e7d2      	b.n	800f300 <_svfiprintf_r+0x9c>
 800f35a:	9b03      	ldr	r3, [sp, #12]
 800f35c:	1d19      	adds	r1, r3, #4
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	9103      	str	r1, [sp, #12]
 800f362:	2b00      	cmp	r3, #0
 800f364:	bfbb      	ittet	lt
 800f366:	425b      	neglt	r3, r3
 800f368:	f042 0202 	orrlt.w	r2, r2, #2
 800f36c:	9307      	strge	r3, [sp, #28]
 800f36e:	9307      	strlt	r3, [sp, #28]
 800f370:	bfb8      	it	lt
 800f372:	9204      	strlt	r2, [sp, #16]
 800f374:	7823      	ldrb	r3, [r4, #0]
 800f376:	2b2e      	cmp	r3, #46	; 0x2e
 800f378:	d10c      	bne.n	800f394 <_svfiprintf_r+0x130>
 800f37a:	7863      	ldrb	r3, [r4, #1]
 800f37c:	2b2a      	cmp	r3, #42	; 0x2a
 800f37e:	d134      	bne.n	800f3ea <_svfiprintf_r+0x186>
 800f380:	9b03      	ldr	r3, [sp, #12]
 800f382:	3402      	adds	r4, #2
 800f384:	1d1a      	adds	r2, r3, #4
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	9203      	str	r2, [sp, #12]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	bfb8      	it	lt
 800f38e:	f04f 33ff 	movlt.w	r3, #4294967295
 800f392:	9305      	str	r3, [sp, #20]
 800f394:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800f450 <_svfiprintf_r+0x1ec>
 800f398:	2203      	movs	r2, #3
 800f39a:	4650      	mov	r0, sl
 800f39c:	7821      	ldrb	r1, [r4, #0]
 800f39e:	f7fd ff1e 	bl	800d1de <memchr>
 800f3a2:	b138      	cbz	r0, 800f3b4 <_svfiprintf_r+0x150>
 800f3a4:	2240      	movs	r2, #64	; 0x40
 800f3a6:	9b04      	ldr	r3, [sp, #16]
 800f3a8:	eba0 000a 	sub.w	r0, r0, sl
 800f3ac:	4082      	lsls	r2, r0
 800f3ae:	4313      	orrs	r3, r2
 800f3b0:	3401      	adds	r4, #1
 800f3b2:	9304      	str	r3, [sp, #16]
 800f3b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3b8:	2206      	movs	r2, #6
 800f3ba:	4826      	ldr	r0, [pc, #152]	; (800f454 <_svfiprintf_r+0x1f0>)
 800f3bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f3c0:	f7fd ff0d 	bl	800d1de <memchr>
 800f3c4:	2800      	cmp	r0, #0
 800f3c6:	d038      	beq.n	800f43a <_svfiprintf_r+0x1d6>
 800f3c8:	4b23      	ldr	r3, [pc, #140]	; (800f458 <_svfiprintf_r+0x1f4>)
 800f3ca:	bb1b      	cbnz	r3, 800f414 <_svfiprintf_r+0x1b0>
 800f3cc:	9b03      	ldr	r3, [sp, #12]
 800f3ce:	3307      	adds	r3, #7
 800f3d0:	f023 0307 	bic.w	r3, r3, #7
 800f3d4:	3308      	adds	r3, #8
 800f3d6:	9303      	str	r3, [sp, #12]
 800f3d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3da:	4433      	add	r3, r6
 800f3dc:	9309      	str	r3, [sp, #36]	; 0x24
 800f3de:	e768      	b.n	800f2b2 <_svfiprintf_r+0x4e>
 800f3e0:	460c      	mov	r4, r1
 800f3e2:	2001      	movs	r0, #1
 800f3e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800f3e8:	e7a6      	b.n	800f338 <_svfiprintf_r+0xd4>
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	f04f 0c0a 	mov.w	ip, #10
 800f3f0:	4619      	mov	r1, r3
 800f3f2:	3401      	adds	r4, #1
 800f3f4:	9305      	str	r3, [sp, #20]
 800f3f6:	4620      	mov	r0, r4
 800f3f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f3fc:	3a30      	subs	r2, #48	; 0x30
 800f3fe:	2a09      	cmp	r2, #9
 800f400:	d903      	bls.n	800f40a <_svfiprintf_r+0x1a6>
 800f402:	2b00      	cmp	r3, #0
 800f404:	d0c6      	beq.n	800f394 <_svfiprintf_r+0x130>
 800f406:	9105      	str	r1, [sp, #20]
 800f408:	e7c4      	b.n	800f394 <_svfiprintf_r+0x130>
 800f40a:	4604      	mov	r4, r0
 800f40c:	2301      	movs	r3, #1
 800f40e:	fb0c 2101 	mla	r1, ip, r1, r2
 800f412:	e7f0      	b.n	800f3f6 <_svfiprintf_r+0x192>
 800f414:	ab03      	add	r3, sp, #12
 800f416:	9300      	str	r3, [sp, #0]
 800f418:	462a      	mov	r2, r5
 800f41a:	4638      	mov	r0, r7
 800f41c:	4b0f      	ldr	r3, [pc, #60]	; (800f45c <_svfiprintf_r+0x1f8>)
 800f41e:	a904      	add	r1, sp, #16
 800f420:	f7fc fb14 	bl	800ba4c <_printf_float>
 800f424:	1c42      	adds	r2, r0, #1
 800f426:	4606      	mov	r6, r0
 800f428:	d1d6      	bne.n	800f3d8 <_svfiprintf_r+0x174>
 800f42a:	89ab      	ldrh	r3, [r5, #12]
 800f42c:	065b      	lsls	r3, r3, #25
 800f42e:	f53f af2d 	bmi.w	800f28c <_svfiprintf_r+0x28>
 800f432:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f434:	b01d      	add	sp, #116	; 0x74
 800f436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f43a:	ab03      	add	r3, sp, #12
 800f43c:	9300      	str	r3, [sp, #0]
 800f43e:	462a      	mov	r2, r5
 800f440:	4638      	mov	r0, r7
 800f442:	4b06      	ldr	r3, [pc, #24]	; (800f45c <_svfiprintf_r+0x1f8>)
 800f444:	a904      	add	r1, sp, #16
 800f446:	f7fc fda1 	bl	800bf8c <_printf_i>
 800f44a:	e7eb      	b.n	800f424 <_svfiprintf_r+0x1c0>
 800f44c:	08010c2c 	.word	0x08010c2c
 800f450:	08010c32 	.word	0x08010c32
 800f454:	08010c36 	.word	0x08010c36
 800f458:	0800ba4d 	.word	0x0800ba4d
 800f45c:	0800f1af 	.word	0x0800f1af

0800f460 <__sflush_r>:
 800f460:	898a      	ldrh	r2, [r1, #12]
 800f462:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f464:	4605      	mov	r5, r0
 800f466:	0710      	lsls	r0, r2, #28
 800f468:	460c      	mov	r4, r1
 800f46a:	d457      	bmi.n	800f51c <__sflush_r+0xbc>
 800f46c:	684b      	ldr	r3, [r1, #4]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	dc04      	bgt.n	800f47c <__sflush_r+0x1c>
 800f472:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f474:	2b00      	cmp	r3, #0
 800f476:	dc01      	bgt.n	800f47c <__sflush_r+0x1c>
 800f478:	2000      	movs	r0, #0
 800f47a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f47c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f47e:	2e00      	cmp	r6, #0
 800f480:	d0fa      	beq.n	800f478 <__sflush_r+0x18>
 800f482:	2300      	movs	r3, #0
 800f484:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f488:	682f      	ldr	r7, [r5, #0]
 800f48a:	6a21      	ldr	r1, [r4, #32]
 800f48c:	602b      	str	r3, [r5, #0]
 800f48e:	d032      	beq.n	800f4f6 <__sflush_r+0x96>
 800f490:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f492:	89a3      	ldrh	r3, [r4, #12]
 800f494:	075a      	lsls	r2, r3, #29
 800f496:	d505      	bpl.n	800f4a4 <__sflush_r+0x44>
 800f498:	6863      	ldr	r3, [r4, #4]
 800f49a:	1ac0      	subs	r0, r0, r3
 800f49c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f49e:	b10b      	cbz	r3, 800f4a4 <__sflush_r+0x44>
 800f4a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f4a2:	1ac0      	subs	r0, r0, r3
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	4602      	mov	r2, r0
 800f4a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f4aa:	4628      	mov	r0, r5
 800f4ac:	6a21      	ldr	r1, [r4, #32]
 800f4ae:	47b0      	blx	r6
 800f4b0:	1c43      	adds	r3, r0, #1
 800f4b2:	89a3      	ldrh	r3, [r4, #12]
 800f4b4:	d106      	bne.n	800f4c4 <__sflush_r+0x64>
 800f4b6:	6829      	ldr	r1, [r5, #0]
 800f4b8:	291d      	cmp	r1, #29
 800f4ba:	d82b      	bhi.n	800f514 <__sflush_r+0xb4>
 800f4bc:	4a28      	ldr	r2, [pc, #160]	; (800f560 <__sflush_r+0x100>)
 800f4be:	410a      	asrs	r2, r1
 800f4c0:	07d6      	lsls	r6, r2, #31
 800f4c2:	d427      	bmi.n	800f514 <__sflush_r+0xb4>
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	6062      	str	r2, [r4, #4]
 800f4c8:	6922      	ldr	r2, [r4, #16]
 800f4ca:	04d9      	lsls	r1, r3, #19
 800f4cc:	6022      	str	r2, [r4, #0]
 800f4ce:	d504      	bpl.n	800f4da <__sflush_r+0x7a>
 800f4d0:	1c42      	adds	r2, r0, #1
 800f4d2:	d101      	bne.n	800f4d8 <__sflush_r+0x78>
 800f4d4:	682b      	ldr	r3, [r5, #0]
 800f4d6:	b903      	cbnz	r3, 800f4da <__sflush_r+0x7a>
 800f4d8:	6560      	str	r0, [r4, #84]	; 0x54
 800f4da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f4dc:	602f      	str	r7, [r5, #0]
 800f4de:	2900      	cmp	r1, #0
 800f4e0:	d0ca      	beq.n	800f478 <__sflush_r+0x18>
 800f4e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f4e6:	4299      	cmp	r1, r3
 800f4e8:	d002      	beq.n	800f4f0 <__sflush_r+0x90>
 800f4ea:	4628      	mov	r0, r5
 800f4ec:	f7fe fd40 	bl	800df70 <_free_r>
 800f4f0:	2000      	movs	r0, #0
 800f4f2:	6360      	str	r0, [r4, #52]	; 0x34
 800f4f4:	e7c1      	b.n	800f47a <__sflush_r+0x1a>
 800f4f6:	2301      	movs	r3, #1
 800f4f8:	4628      	mov	r0, r5
 800f4fa:	47b0      	blx	r6
 800f4fc:	1c41      	adds	r1, r0, #1
 800f4fe:	d1c8      	bne.n	800f492 <__sflush_r+0x32>
 800f500:	682b      	ldr	r3, [r5, #0]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d0c5      	beq.n	800f492 <__sflush_r+0x32>
 800f506:	2b1d      	cmp	r3, #29
 800f508:	d001      	beq.n	800f50e <__sflush_r+0xae>
 800f50a:	2b16      	cmp	r3, #22
 800f50c:	d101      	bne.n	800f512 <__sflush_r+0xb2>
 800f50e:	602f      	str	r7, [r5, #0]
 800f510:	e7b2      	b.n	800f478 <__sflush_r+0x18>
 800f512:	89a3      	ldrh	r3, [r4, #12]
 800f514:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f518:	81a3      	strh	r3, [r4, #12]
 800f51a:	e7ae      	b.n	800f47a <__sflush_r+0x1a>
 800f51c:	690f      	ldr	r7, [r1, #16]
 800f51e:	2f00      	cmp	r7, #0
 800f520:	d0aa      	beq.n	800f478 <__sflush_r+0x18>
 800f522:	0793      	lsls	r3, r2, #30
 800f524:	bf18      	it	ne
 800f526:	2300      	movne	r3, #0
 800f528:	680e      	ldr	r6, [r1, #0]
 800f52a:	bf08      	it	eq
 800f52c:	694b      	ldreq	r3, [r1, #20]
 800f52e:	1bf6      	subs	r6, r6, r7
 800f530:	600f      	str	r7, [r1, #0]
 800f532:	608b      	str	r3, [r1, #8]
 800f534:	2e00      	cmp	r6, #0
 800f536:	dd9f      	ble.n	800f478 <__sflush_r+0x18>
 800f538:	4633      	mov	r3, r6
 800f53a:	463a      	mov	r2, r7
 800f53c:	4628      	mov	r0, r5
 800f53e:	6a21      	ldr	r1, [r4, #32]
 800f540:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800f544:	47e0      	blx	ip
 800f546:	2800      	cmp	r0, #0
 800f548:	dc06      	bgt.n	800f558 <__sflush_r+0xf8>
 800f54a:	89a3      	ldrh	r3, [r4, #12]
 800f54c:	f04f 30ff 	mov.w	r0, #4294967295
 800f550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f554:	81a3      	strh	r3, [r4, #12]
 800f556:	e790      	b.n	800f47a <__sflush_r+0x1a>
 800f558:	4407      	add	r7, r0
 800f55a:	1a36      	subs	r6, r6, r0
 800f55c:	e7ea      	b.n	800f534 <__sflush_r+0xd4>
 800f55e:	bf00      	nop
 800f560:	dfbffffe 	.word	0xdfbffffe

0800f564 <_fflush_r>:
 800f564:	b538      	push	{r3, r4, r5, lr}
 800f566:	690b      	ldr	r3, [r1, #16]
 800f568:	4605      	mov	r5, r0
 800f56a:	460c      	mov	r4, r1
 800f56c:	b913      	cbnz	r3, 800f574 <_fflush_r+0x10>
 800f56e:	2500      	movs	r5, #0
 800f570:	4628      	mov	r0, r5
 800f572:	bd38      	pop	{r3, r4, r5, pc}
 800f574:	b118      	cbz	r0, 800f57e <_fflush_r+0x1a>
 800f576:	6a03      	ldr	r3, [r0, #32]
 800f578:	b90b      	cbnz	r3, 800f57e <_fflush_r+0x1a>
 800f57a:	f7fc feb5 	bl	800c2e8 <__sinit>
 800f57e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d0f3      	beq.n	800f56e <_fflush_r+0xa>
 800f586:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f588:	07d0      	lsls	r0, r2, #31
 800f58a:	d404      	bmi.n	800f596 <_fflush_r+0x32>
 800f58c:	0599      	lsls	r1, r3, #22
 800f58e:	d402      	bmi.n	800f596 <_fflush_r+0x32>
 800f590:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f592:	f7fd fe19 	bl	800d1c8 <__retarget_lock_acquire_recursive>
 800f596:	4628      	mov	r0, r5
 800f598:	4621      	mov	r1, r4
 800f59a:	f7ff ff61 	bl	800f460 <__sflush_r>
 800f59e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f5a0:	4605      	mov	r5, r0
 800f5a2:	07da      	lsls	r2, r3, #31
 800f5a4:	d4e4      	bmi.n	800f570 <_fflush_r+0xc>
 800f5a6:	89a3      	ldrh	r3, [r4, #12]
 800f5a8:	059b      	lsls	r3, r3, #22
 800f5aa:	d4e1      	bmi.n	800f570 <_fflush_r+0xc>
 800f5ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f5ae:	f7fd fe0d 	bl	800d1cc <__retarget_lock_release_recursive>
 800f5b2:	e7dd      	b.n	800f570 <_fflush_r+0xc>

0800f5b4 <fiprintf>:
 800f5b4:	b40e      	push	{r1, r2, r3}
 800f5b6:	b503      	push	{r0, r1, lr}
 800f5b8:	4601      	mov	r1, r0
 800f5ba:	ab03      	add	r3, sp, #12
 800f5bc:	4805      	ldr	r0, [pc, #20]	; (800f5d4 <fiprintf+0x20>)
 800f5be:	f853 2b04 	ldr.w	r2, [r3], #4
 800f5c2:	6800      	ldr	r0, [r0, #0]
 800f5c4:	9301      	str	r3, [sp, #4]
 800f5c6:	f000 faa1 	bl	800fb0c <_vfiprintf_r>
 800f5ca:	b002      	add	sp, #8
 800f5cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f5d0:	b003      	add	sp, #12
 800f5d2:	4770      	bx	lr
 800f5d4:	200001e0 	.word	0x200001e0

0800f5d8 <siscanf>:
 800f5d8:	b40e      	push	{r1, r2, r3}
 800f5da:	f44f 7201 	mov.w	r2, #516	; 0x204
 800f5de:	b530      	push	{r4, r5, lr}
 800f5e0:	b09c      	sub	sp, #112	; 0x70
 800f5e2:	ac1f      	add	r4, sp, #124	; 0x7c
 800f5e4:	f854 5b04 	ldr.w	r5, [r4], #4
 800f5e8:	f8ad 2014 	strh.w	r2, [sp, #20]
 800f5ec:	9002      	str	r0, [sp, #8]
 800f5ee:	9006      	str	r0, [sp, #24]
 800f5f0:	f7f0 fe28 	bl	8000244 <strlen>
 800f5f4:	4b0b      	ldr	r3, [pc, #44]	; (800f624 <siscanf+0x4c>)
 800f5f6:	9003      	str	r0, [sp, #12]
 800f5f8:	930b      	str	r3, [sp, #44]	; 0x2c
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	930f      	str	r3, [sp, #60]	; 0x3c
 800f5fe:	9314      	str	r3, [sp, #80]	; 0x50
 800f600:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f604:	9007      	str	r0, [sp, #28]
 800f606:	4808      	ldr	r0, [pc, #32]	; (800f628 <siscanf+0x50>)
 800f608:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f60c:	462a      	mov	r2, r5
 800f60e:	4623      	mov	r3, r4
 800f610:	a902      	add	r1, sp, #8
 800f612:	6800      	ldr	r0, [r0, #0]
 800f614:	9401      	str	r4, [sp, #4]
 800f616:	f000 f8d9 	bl	800f7cc <__ssvfiscanf_r>
 800f61a:	b01c      	add	sp, #112	; 0x70
 800f61c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f620:	b003      	add	sp, #12
 800f622:	4770      	bx	lr
 800f624:	0800c3b7 	.word	0x0800c3b7
 800f628:	200001e0 	.word	0x200001e0

0800f62c <memmove>:
 800f62c:	4288      	cmp	r0, r1
 800f62e:	b510      	push	{r4, lr}
 800f630:	eb01 0402 	add.w	r4, r1, r2
 800f634:	d902      	bls.n	800f63c <memmove+0x10>
 800f636:	4284      	cmp	r4, r0
 800f638:	4623      	mov	r3, r4
 800f63a:	d807      	bhi.n	800f64c <memmove+0x20>
 800f63c:	1e43      	subs	r3, r0, #1
 800f63e:	42a1      	cmp	r1, r4
 800f640:	d008      	beq.n	800f654 <memmove+0x28>
 800f642:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f646:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f64a:	e7f8      	b.n	800f63e <memmove+0x12>
 800f64c:	4601      	mov	r1, r0
 800f64e:	4402      	add	r2, r0
 800f650:	428a      	cmp	r2, r1
 800f652:	d100      	bne.n	800f656 <memmove+0x2a>
 800f654:	bd10      	pop	{r4, pc}
 800f656:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f65a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f65e:	e7f7      	b.n	800f650 <memmove+0x24>

0800f660 <__gettzinfo>:
 800f660:	4800      	ldr	r0, [pc, #0]	; (800f664 <__gettzinfo+0x4>)
 800f662:	4770      	bx	lr
 800f664:	200001e8 	.word	0x200001e8

0800f668 <abort>:
 800f668:	2006      	movs	r0, #6
 800f66a:	b508      	push	{r3, lr}
 800f66c:	f000 fde2 	bl	8010234 <raise>
 800f670:	2001      	movs	r0, #1
 800f672:	f7f3 fe0c 	bl	800328e <_exit>

0800f676 <_calloc_r>:
 800f676:	b570      	push	{r4, r5, r6, lr}
 800f678:	fba1 5402 	umull	r5, r4, r1, r2
 800f67c:	b934      	cbnz	r4, 800f68c <_calloc_r+0x16>
 800f67e:	4629      	mov	r1, r5
 800f680:	f7fb f9c4 	bl	800aa0c <_malloc_r>
 800f684:	4606      	mov	r6, r0
 800f686:	b928      	cbnz	r0, 800f694 <_calloc_r+0x1e>
 800f688:	4630      	mov	r0, r6
 800f68a:	bd70      	pop	{r4, r5, r6, pc}
 800f68c:	220c      	movs	r2, #12
 800f68e:	2600      	movs	r6, #0
 800f690:	6002      	str	r2, [r0, #0]
 800f692:	e7f9      	b.n	800f688 <_calloc_r+0x12>
 800f694:	462a      	mov	r2, r5
 800f696:	4621      	mov	r1, r4
 800f698:	f7fc fec1 	bl	800c41e <memset>
 800f69c:	e7f4      	b.n	800f688 <_calloc_r+0x12>
	...

0800f6a0 <__env_lock>:
 800f6a0:	4801      	ldr	r0, [pc, #4]	; (800f6a8 <__env_lock+0x8>)
 800f6a2:	f7fd bd91 	b.w	800d1c8 <__retarget_lock_acquire_recursive>
 800f6a6:	bf00      	nop
 800f6a8:	200034cc 	.word	0x200034cc

0800f6ac <__env_unlock>:
 800f6ac:	4801      	ldr	r0, [pc, #4]	; (800f6b4 <__env_unlock+0x8>)
 800f6ae:	f7fd bd8d 	b.w	800d1cc <__retarget_lock_release_recursive>
 800f6b2:	bf00      	nop
 800f6b4:	200034cc 	.word	0x200034cc

0800f6b8 <_realloc_r>:
 800f6b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6bc:	4680      	mov	r8, r0
 800f6be:	4614      	mov	r4, r2
 800f6c0:	460e      	mov	r6, r1
 800f6c2:	b921      	cbnz	r1, 800f6ce <_realloc_r+0x16>
 800f6c4:	4611      	mov	r1, r2
 800f6c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f6ca:	f7fb b99f 	b.w	800aa0c <_malloc_r>
 800f6ce:	b92a      	cbnz	r2, 800f6dc <_realloc_r+0x24>
 800f6d0:	f7fe fc4e 	bl	800df70 <_free_r>
 800f6d4:	4625      	mov	r5, r4
 800f6d6:	4628      	mov	r0, r5
 800f6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6dc:	f000 fdc6 	bl	801026c <_malloc_usable_size_r>
 800f6e0:	4284      	cmp	r4, r0
 800f6e2:	4607      	mov	r7, r0
 800f6e4:	d802      	bhi.n	800f6ec <_realloc_r+0x34>
 800f6e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f6ea:	d812      	bhi.n	800f712 <_realloc_r+0x5a>
 800f6ec:	4621      	mov	r1, r4
 800f6ee:	4640      	mov	r0, r8
 800f6f0:	f7fb f98c 	bl	800aa0c <_malloc_r>
 800f6f4:	4605      	mov	r5, r0
 800f6f6:	2800      	cmp	r0, #0
 800f6f8:	d0ed      	beq.n	800f6d6 <_realloc_r+0x1e>
 800f6fa:	42bc      	cmp	r4, r7
 800f6fc:	4622      	mov	r2, r4
 800f6fe:	4631      	mov	r1, r6
 800f700:	bf28      	it	cs
 800f702:	463a      	movcs	r2, r7
 800f704:	f7fd fd79 	bl	800d1fa <memcpy>
 800f708:	4631      	mov	r1, r6
 800f70a:	4640      	mov	r0, r8
 800f70c:	f7fe fc30 	bl	800df70 <_free_r>
 800f710:	e7e1      	b.n	800f6d6 <_realloc_r+0x1e>
 800f712:	4635      	mov	r5, r6
 800f714:	e7df      	b.n	800f6d6 <_realloc_r+0x1e>

0800f716 <_sungetc_r>:
 800f716:	b538      	push	{r3, r4, r5, lr}
 800f718:	1c4b      	adds	r3, r1, #1
 800f71a:	4614      	mov	r4, r2
 800f71c:	d103      	bne.n	800f726 <_sungetc_r+0x10>
 800f71e:	f04f 35ff 	mov.w	r5, #4294967295
 800f722:	4628      	mov	r0, r5
 800f724:	bd38      	pop	{r3, r4, r5, pc}
 800f726:	8993      	ldrh	r3, [r2, #12]
 800f728:	b2cd      	uxtb	r5, r1
 800f72a:	f023 0320 	bic.w	r3, r3, #32
 800f72e:	8193      	strh	r3, [r2, #12]
 800f730:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f732:	6852      	ldr	r2, [r2, #4]
 800f734:	b18b      	cbz	r3, 800f75a <_sungetc_r+0x44>
 800f736:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f738:	4293      	cmp	r3, r2
 800f73a:	dd08      	ble.n	800f74e <_sungetc_r+0x38>
 800f73c:	6823      	ldr	r3, [r4, #0]
 800f73e:	1e5a      	subs	r2, r3, #1
 800f740:	6022      	str	r2, [r4, #0]
 800f742:	f803 5c01 	strb.w	r5, [r3, #-1]
 800f746:	6863      	ldr	r3, [r4, #4]
 800f748:	3301      	adds	r3, #1
 800f74a:	6063      	str	r3, [r4, #4]
 800f74c:	e7e9      	b.n	800f722 <_sungetc_r+0xc>
 800f74e:	4621      	mov	r1, r4
 800f750:	f000 fc7b 	bl	801004a <__submore>
 800f754:	2800      	cmp	r0, #0
 800f756:	d0f1      	beq.n	800f73c <_sungetc_r+0x26>
 800f758:	e7e1      	b.n	800f71e <_sungetc_r+0x8>
 800f75a:	6921      	ldr	r1, [r4, #16]
 800f75c:	6823      	ldr	r3, [r4, #0]
 800f75e:	b151      	cbz	r1, 800f776 <_sungetc_r+0x60>
 800f760:	4299      	cmp	r1, r3
 800f762:	d208      	bcs.n	800f776 <_sungetc_r+0x60>
 800f764:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800f768:	42a9      	cmp	r1, r5
 800f76a:	d104      	bne.n	800f776 <_sungetc_r+0x60>
 800f76c:	3b01      	subs	r3, #1
 800f76e:	3201      	adds	r2, #1
 800f770:	6023      	str	r3, [r4, #0]
 800f772:	6062      	str	r2, [r4, #4]
 800f774:	e7d5      	b.n	800f722 <_sungetc_r+0xc>
 800f776:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800f77a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f77e:	6363      	str	r3, [r4, #52]	; 0x34
 800f780:	2303      	movs	r3, #3
 800f782:	63a3      	str	r3, [r4, #56]	; 0x38
 800f784:	4623      	mov	r3, r4
 800f786:	f803 5f46 	strb.w	r5, [r3, #70]!
 800f78a:	6023      	str	r3, [r4, #0]
 800f78c:	2301      	movs	r3, #1
 800f78e:	e7dc      	b.n	800f74a <_sungetc_r+0x34>

0800f790 <__ssrefill_r>:
 800f790:	b510      	push	{r4, lr}
 800f792:	460c      	mov	r4, r1
 800f794:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800f796:	b169      	cbz	r1, 800f7b4 <__ssrefill_r+0x24>
 800f798:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f79c:	4299      	cmp	r1, r3
 800f79e:	d001      	beq.n	800f7a4 <__ssrefill_r+0x14>
 800f7a0:	f7fe fbe6 	bl	800df70 <_free_r>
 800f7a4:	2000      	movs	r0, #0
 800f7a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f7a8:	6360      	str	r0, [r4, #52]	; 0x34
 800f7aa:	6063      	str	r3, [r4, #4]
 800f7ac:	b113      	cbz	r3, 800f7b4 <__ssrefill_r+0x24>
 800f7ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f7b0:	6023      	str	r3, [r4, #0]
 800f7b2:	bd10      	pop	{r4, pc}
 800f7b4:	6923      	ldr	r3, [r4, #16]
 800f7b6:	f04f 30ff 	mov.w	r0, #4294967295
 800f7ba:	6023      	str	r3, [r4, #0]
 800f7bc:	2300      	movs	r3, #0
 800f7be:	6063      	str	r3, [r4, #4]
 800f7c0:	89a3      	ldrh	r3, [r4, #12]
 800f7c2:	f043 0320 	orr.w	r3, r3, #32
 800f7c6:	81a3      	strh	r3, [r4, #12]
 800f7c8:	e7f3      	b.n	800f7b2 <__ssrefill_r+0x22>
	...

0800f7cc <__ssvfiscanf_r>:
 800f7cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7d0:	460c      	mov	r4, r1
 800f7d2:	2100      	movs	r1, #0
 800f7d4:	4606      	mov	r6, r0
 800f7d6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800f7da:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800f7de:	49a6      	ldr	r1, [pc, #664]	; (800fa78 <__ssvfiscanf_r+0x2ac>)
 800f7e0:	f10d 0804 	add.w	r8, sp, #4
 800f7e4:	91a0      	str	r1, [sp, #640]	; 0x280
 800f7e6:	49a5      	ldr	r1, [pc, #660]	; (800fa7c <__ssvfiscanf_r+0x2b0>)
 800f7e8:	4fa5      	ldr	r7, [pc, #660]	; (800fa80 <__ssvfiscanf_r+0x2b4>)
 800f7ea:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800fa84 <__ssvfiscanf_r+0x2b8>
 800f7ee:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800f7f2:	91a1      	str	r1, [sp, #644]	; 0x284
 800f7f4:	9300      	str	r3, [sp, #0]
 800f7f6:	7813      	ldrb	r3, [r2, #0]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	f000 815a 	beq.w	800fab2 <__ssvfiscanf_r+0x2e6>
 800f7fe:	5cf9      	ldrb	r1, [r7, r3]
 800f800:	1c55      	adds	r5, r2, #1
 800f802:	f011 0108 	ands.w	r1, r1, #8
 800f806:	d019      	beq.n	800f83c <__ssvfiscanf_r+0x70>
 800f808:	6863      	ldr	r3, [r4, #4]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	dd0f      	ble.n	800f82e <__ssvfiscanf_r+0x62>
 800f80e:	6823      	ldr	r3, [r4, #0]
 800f810:	781a      	ldrb	r2, [r3, #0]
 800f812:	5cba      	ldrb	r2, [r7, r2]
 800f814:	0712      	lsls	r2, r2, #28
 800f816:	d401      	bmi.n	800f81c <__ssvfiscanf_r+0x50>
 800f818:	462a      	mov	r2, r5
 800f81a:	e7ec      	b.n	800f7f6 <__ssvfiscanf_r+0x2a>
 800f81c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800f81e:	3301      	adds	r3, #1
 800f820:	3201      	adds	r2, #1
 800f822:	9245      	str	r2, [sp, #276]	; 0x114
 800f824:	6862      	ldr	r2, [r4, #4]
 800f826:	6023      	str	r3, [r4, #0]
 800f828:	3a01      	subs	r2, #1
 800f82a:	6062      	str	r2, [r4, #4]
 800f82c:	e7ec      	b.n	800f808 <__ssvfiscanf_r+0x3c>
 800f82e:	4621      	mov	r1, r4
 800f830:	4630      	mov	r0, r6
 800f832:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f834:	4798      	blx	r3
 800f836:	2800      	cmp	r0, #0
 800f838:	d0e9      	beq.n	800f80e <__ssvfiscanf_r+0x42>
 800f83a:	e7ed      	b.n	800f818 <__ssvfiscanf_r+0x4c>
 800f83c:	2b25      	cmp	r3, #37	; 0x25
 800f83e:	d012      	beq.n	800f866 <__ssvfiscanf_r+0x9a>
 800f840:	469a      	mov	sl, r3
 800f842:	6863      	ldr	r3, [r4, #4]
 800f844:	2b00      	cmp	r3, #0
 800f846:	f340 8092 	ble.w	800f96e <__ssvfiscanf_r+0x1a2>
 800f84a:	6822      	ldr	r2, [r4, #0]
 800f84c:	7813      	ldrb	r3, [r2, #0]
 800f84e:	4553      	cmp	r3, sl
 800f850:	f040 812f 	bne.w	800fab2 <__ssvfiscanf_r+0x2e6>
 800f854:	6863      	ldr	r3, [r4, #4]
 800f856:	3201      	adds	r2, #1
 800f858:	3b01      	subs	r3, #1
 800f85a:	6063      	str	r3, [r4, #4]
 800f85c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800f85e:	6022      	str	r2, [r4, #0]
 800f860:	3301      	adds	r3, #1
 800f862:	9345      	str	r3, [sp, #276]	; 0x114
 800f864:	e7d8      	b.n	800f818 <__ssvfiscanf_r+0x4c>
 800f866:	9141      	str	r1, [sp, #260]	; 0x104
 800f868:	9143      	str	r1, [sp, #268]	; 0x10c
 800f86a:	7853      	ldrb	r3, [r2, #1]
 800f86c:	2b2a      	cmp	r3, #42	; 0x2a
 800f86e:	bf04      	itt	eq
 800f870:	2310      	moveq	r3, #16
 800f872:	1c95      	addeq	r5, r2, #2
 800f874:	f04f 020a 	mov.w	r2, #10
 800f878:	bf08      	it	eq
 800f87a:	9341      	streq	r3, [sp, #260]	; 0x104
 800f87c:	46aa      	mov	sl, r5
 800f87e:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800f882:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800f886:	2b09      	cmp	r3, #9
 800f888:	d91c      	bls.n	800f8c4 <__ssvfiscanf_r+0xf8>
 800f88a:	2203      	movs	r2, #3
 800f88c:	487d      	ldr	r0, [pc, #500]	; (800fa84 <__ssvfiscanf_r+0x2b8>)
 800f88e:	f7fd fca6 	bl	800d1de <memchr>
 800f892:	b138      	cbz	r0, 800f8a4 <__ssvfiscanf_r+0xd8>
 800f894:	2301      	movs	r3, #1
 800f896:	4655      	mov	r5, sl
 800f898:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f89a:	eba0 0009 	sub.w	r0, r0, r9
 800f89e:	4083      	lsls	r3, r0
 800f8a0:	4313      	orrs	r3, r2
 800f8a2:	9341      	str	r3, [sp, #260]	; 0x104
 800f8a4:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f8a8:	2b78      	cmp	r3, #120	; 0x78
 800f8aa:	d806      	bhi.n	800f8ba <__ssvfiscanf_r+0xee>
 800f8ac:	2b57      	cmp	r3, #87	; 0x57
 800f8ae:	d810      	bhi.n	800f8d2 <__ssvfiscanf_r+0x106>
 800f8b0:	2b25      	cmp	r3, #37	; 0x25
 800f8b2:	d0c5      	beq.n	800f840 <__ssvfiscanf_r+0x74>
 800f8b4:	d856      	bhi.n	800f964 <__ssvfiscanf_r+0x198>
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d064      	beq.n	800f984 <__ssvfiscanf_r+0x1b8>
 800f8ba:	2303      	movs	r3, #3
 800f8bc:	9347      	str	r3, [sp, #284]	; 0x11c
 800f8be:	230a      	movs	r3, #10
 800f8c0:	9342      	str	r3, [sp, #264]	; 0x108
 800f8c2:	e075      	b.n	800f9b0 <__ssvfiscanf_r+0x1e4>
 800f8c4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800f8c6:	4655      	mov	r5, sl
 800f8c8:	fb02 1103 	mla	r1, r2, r3, r1
 800f8cc:	3930      	subs	r1, #48	; 0x30
 800f8ce:	9143      	str	r1, [sp, #268]	; 0x10c
 800f8d0:	e7d4      	b.n	800f87c <__ssvfiscanf_r+0xb0>
 800f8d2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800f8d6:	2a20      	cmp	r2, #32
 800f8d8:	d8ef      	bhi.n	800f8ba <__ssvfiscanf_r+0xee>
 800f8da:	a101      	add	r1, pc, #4	; (adr r1, 800f8e0 <__ssvfiscanf_r+0x114>)
 800f8dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f8e0:	0800f993 	.word	0x0800f993
 800f8e4:	0800f8bb 	.word	0x0800f8bb
 800f8e8:	0800f8bb 	.word	0x0800f8bb
 800f8ec:	0800f9f1 	.word	0x0800f9f1
 800f8f0:	0800f8bb 	.word	0x0800f8bb
 800f8f4:	0800f8bb 	.word	0x0800f8bb
 800f8f8:	0800f8bb 	.word	0x0800f8bb
 800f8fc:	0800f8bb 	.word	0x0800f8bb
 800f900:	0800f8bb 	.word	0x0800f8bb
 800f904:	0800f8bb 	.word	0x0800f8bb
 800f908:	0800f8bb 	.word	0x0800f8bb
 800f90c:	0800fa07 	.word	0x0800fa07
 800f910:	0800f9ed 	.word	0x0800f9ed
 800f914:	0800f96b 	.word	0x0800f96b
 800f918:	0800f96b 	.word	0x0800f96b
 800f91c:	0800f96b 	.word	0x0800f96b
 800f920:	0800f8bb 	.word	0x0800f8bb
 800f924:	0800f9a9 	.word	0x0800f9a9
 800f928:	0800f8bb 	.word	0x0800f8bb
 800f92c:	0800f8bb 	.word	0x0800f8bb
 800f930:	0800f8bb 	.word	0x0800f8bb
 800f934:	0800f8bb 	.word	0x0800f8bb
 800f938:	0800fa17 	.word	0x0800fa17
 800f93c:	0800f9e5 	.word	0x0800f9e5
 800f940:	0800f98b 	.word	0x0800f98b
 800f944:	0800f8bb 	.word	0x0800f8bb
 800f948:	0800f8bb 	.word	0x0800f8bb
 800f94c:	0800fa13 	.word	0x0800fa13
 800f950:	0800f8bb 	.word	0x0800f8bb
 800f954:	0800f9ed 	.word	0x0800f9ed
 800f958:	0800f8bb 	.word	0x0800f8bb
 800f95c:	0800f8bb 	.word	0x0800f8bb
 800f960:	0800f993 	.word	0x0800f993
 800f964:	3b45      	subs	r3, #69	; 0x45
 800f966:	2b02      	cmp	r3, #2
 800f968:	d8a7      	bhi.n	800f8ba <__ssvfiscanf_r+0xee>
 800f96a:	2305      	movs	r3, #5
 800f96c:	e01f      	b.n	800f9ae <__ssvfiscanf_r+0x1e2>
 800f96e:	4621      	mov	r1, r4
 800f970:	4630      	mov	r0, r6
 800f972:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800f974:	4798      	blx	r3
 800f976:	2800      	cmp	r0, #0
 800f978:	f43f af67 	beq.w	800f84a <__ssvfiscanf_r+0x7e>
 800f97c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800f97e:	2800      	cmp	r0, #0
 800f980:	f040 808d 	bne.w	800fa9e <__ssvfiscanf_r+0x2d2>
 800f984:	f04f 30ff 	mov.w	r0, #4294967295
 800f988:	e08f      	b.n	800faaa <__ssvfiscanf_r+0x2de>
 800f98a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f98c:	f042 0220 	orr.w	r2, r2, #32
 800f990:	9241      	str	r2, [sp, #260]	; 0x104
 800f992:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800f994:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f998:	9241      	str	r2, [sp, #260]	; 0x104
 800f99a:	2210      	movs	r2, #16
 800f99c:	2b6f      	cmp	r3, #111	; 0x6f
 800f99e:	bf34      	ite	cc
 800f9a0:	2303      	movcc	r3, #3
 800f9a2:	2304      	movcs	r3, #4
 800f9a4:	9242      	str	r2, [sp, #264]	; 0x108
 800f9a6:	e002      	b.n	800f9ae <__ssvfiscanf_r+0x1e2>
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	9342      	str	r3, [sp, #264]	; 0x108
 800f9ac:	2303      	movs	r3, #3
 800f9ae:	9347      	str	r3, [sp, #284]	; 0x11c
 800f9b0:	6863      	ldr	r3, [r4, #4]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	dd3d      	ble.n	800fa32 <__ssvfiscanf_r+0x266>
 800f9b6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f9b8:	0659      	lsls	r1, r3, #25
 800f9ba:	d404      	bmi.n	800f9c6 <__ssvfiscanf_r+0x1fa>
 800f9bc:	6823      	ldr	r3, [r4, #0]
 800f9be:	781a      	ldrb	r2, [r3, #0]
 800f9c0:	5cba      	ldrb	r2, [r7, r2]
 800f9c2:	0712      	lsls	r2, r2, #28
 800f9c4:	d43c      	bmi.n	800fa40 <__ssvfiscanf_r+0x274>
 800f9c6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800f9c8:	2b02      	cmp	r3, #2
 800f9ca:	dc4b      	bgt.n	800fa64 <__ssvfiscanf_r+0x298>
 800f9cc:	466b      	mov	r3, sp
 800f9ce:	4622      	mov	r2, r4
 800f9d0:	4630      	mov	r0, r6
 800f9d2:	a941      	add	r1, sp, #260	; 0x104
 800f9d4:	f000 f9b4 	bl	800fd40 <_scanf_chars>
 800f9d8:	2801      	cmp	r0, #1
 800f9da:	d06a      	beq.n	800fab2 <__ssvfiscanf_r+0x2e6>
 800f9dc:	2802      	cmp	r0, #2
 800f9de:	f47f af1b 	bne.w	800f818 <__ssvfiscanf_r+0x4c>
 800f9e2:	e7cb      	b.n	800f97c <__ssvfiscanf_r+0x1b0>
 800f9e4:	2308      	movs	r3, #8
 800f9e6:	9342      	str	r3, [sp, #264]	; 0x108
 800f9e8:	2304      	movs	r3, #4
 800f9ea:	e7e0      	b.n	800f9ae <__ssvfiscanf_r+0x1e2>
 800f9ec:	220a      	movs	r2, #10
 800f9ee:	e7d5      	b.n	800f99c <__ssvfiscanf_r+0x1d0>
 800f9f0:	4629      	mov	r1, r5
 800f9f2:	4640      	mov	r0, r8
 800f9f4:	f000 faf0 	bl	800ffd8 <__sccl>
 800f9f8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800f9fa:	4605      	mov	r5, r0
 800f9fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa00:	9341      	str	r3, [sp, #260]	; 0x104
 800fa02:	2301      	movs	r3, #1
 800fa04:	e7d3      	b.n	800f9ae <__ssvfiscanf_r+0x1e2>
 800fa06:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800fa08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa0c:	9341      	str	r3, [sp, #260]	; 0x104
 800fa0e:	2300      	movs	r3, #0
 800fa10:	e7cd      	b.n	800f9ae <__ssvfiscanf_r+0x1e2>
 800fa12:	2302      	movs	r3, #2
 800fa14:	e7cb      	b.n	800f9ae <__ssvfiscanf_r+0x1e2>
 800fa16:	9841      	ldr	r0, [sp, #260]	; 0x104
 800fa18:	06c3      	lsls	r3, r0, #27
 800fa1a:	f53f aefd 	bmi.w	800f818 <__ssvfiscanf_r+0x4c>
 800fa1e:	9b00      	ldr	r3, [sp, #0]
 800fa20:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800fa22:	1d19      	adds	r1, r3, #4
 800fa24:	9100      	str	r1, [sp, #0]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	07c0      	lsls	r0, r0, #31
 800fa2a:	bf4c      	ite	mi
 800fa2c:	801a      	strhmi	r2, [r3, #0]
 800fa2e:	601a      	strpl	r2, [r3, #0]
 800fa30:	e6f2      	b.n	800f818 <__ssvfiscanf_r+0x4c>
 800fa32:	4621      	mov	r1, r4
 800fa34:	4630      	mov	r0, r6
 800fa36:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fa38:	4798      	blx	r3
 800fa3a:	2800      	cmp	r0, #0
 800fa3c:	d0bb      	beq.n	800f9b6 <__ssvfiscanf_r+0x1ea>
 800fa3e:	e79d      	b.n	800f97c <__ssvfiscanf_r+0x1b0>
 800fa40:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800fa42:	3201      	adds	r2, #1
 800fa44:	9245      	str	r2, [sp, #276]	; 0x114
 800fa46:	6862      	ldr	r2, [r4, #4]
 800fa48:	3a01      	subs	r2, #1
 800fa4a:	2a00      	cmp	r2, #0
 800fa4c:	6062      	str	r2, [r4, #4]
 800fa4e:	dd02      	ble.n	800fa56 <__ssvfiscanf_r+0x28a>
 800fa50:	3301      	adds	r3, #1
 800fa52:	6023      	str	r3, [r4, #0]
 800fa54:	e7b2      	b.n	800f9bc <__ssvfiscanf_r+0x1f0>
 800fa56:	4621      	mov	r1, r4
 800fa58:	4630      	mov	r0, r6
 800fa5a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800fa5c:	4798      	blx	r3
 800fa5e:	2800      	cmp	r0, #0
 800fa60:	d0ac      	beq.n	800f9bc <__ssvfiscanf_r+0x1f0>
 800fa62:	e78b      	b.n	800f97c <__ssvfiscanf_r+0x1b0>
 800fa64:	2b04      	cmp	r3, #4
 800fa66:	dc0f      	bgt.n	800fa88 <__ssvfiscanf_r+0x2bc>
 800fa68:	466b      	mov	r3, sp
 800fa6a:	4622      	mov	r2, r4
 800fa6c:	4630      	mov	r0, r6
 800fa6e:	a941      	add	r1, sp, #260	; 0x104
 800fa70:	f000 f9c0 	bl	800fdf4 <_scanf_i>
 800fa74:	e7b0      	b.n	800f9d8 <__ssvfiscanf_r+0x20c>
 800fa76:	bf00      	nop
 800fa78:	0800f717 	.word	0x0800f717
 800fa7c:	0800f791 	.word	0x0800f791
 800fa80:	08010769 	.word	0x08010769
 800fa84:	08010c32 	.word	0x08010c32
 800fa88:	4b0b      	ldr	r3, [pc, #44]	; (800fab8 <__ssvfiscanf_r+0x2ec>)
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	f43f aec4 	beq.w	800f818 <__ssvfiscanf_r+0x4c>
 800fa90:	466b      	mov	r3, sp
 800fa92:	4622      	mov	r2, r4
 800fa94:	4630      	mov	r0, r6
 800fa96:	a941      	add	r1, sp, #260	; 0x104
 800fa98:	f3af 8000 	nop.w
 800fa9c:	e79c      	b.n	800f9d8 <__ssvfiscanf_r+0x20c>
 800fa9e:	89a3      	ldrh	r3, [r4, #12]
 800faa0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800faa4:	bf18      	it	ne
 800faa6:	f04f 30ff 	movne.w	r0, #4294967295
 800faaa:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800faae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fab2:	9844      	ldr	r0, [sp, #272]	; 0x110
 800fab4:	e7f9      	b.n	800faaa <__ssvfiscanf_r+0x2de>
 800fab6:	bf00      	nop
 800fab8:	00000000 	.word	0x00000000

0800fabc <__sfputc_r>:
 800fabc:	6893      	ldr	r3, [r2, #8]
 800fabe:	b410      	push	{r4}
 800fac0:	3b01      	subs	r3, #1
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	6093      	str	r3, [r2, #8]
 800fac6:	da07      	bge.n	800fad8 <__sfputc_r+0x1c>
 800fac8:	6994      	ldr	r4, [r2, #24]
 800faca:	42a3      	cmp	r3, r4
 800facc:	db01      	blt.n	800fad2 <__sfputc_r+0x16>
 800face:	290a      	cmp	r1, #10
 800fad0:	d102      	bne.n	800fad8 <__sfputc_r+0x1c>
 800fad2:	bc10      	pop	{r4}
 800fad4:	f000 baf1 	b.w	80100ba <__swbuf_r>
 800fad8:	6813      	ldr	r3, [r2, #0]
 800fada:	1c58      	adds	r0, r3, #1
 800fadc:	6010      	str	r0, [r2, #0]
 800fade:	7019      	strb	r1, [r3, #0]
 800fae0:	4608      	mov	r0, r1
 800fae2:	bc10      	pop	{r4}
 800fae4:	4770      	bx	lr

0800fae6 <__sfputs_r>:
 800fae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fae8:	4606      	mov	r6, r0
 800faea:	460f      	mov	r7, r1
 800faec:	4614      	mov	r4, r2
 800faee:	18d5      	adds	r5, r2, r3
 800faf0:	42ac      	cmp	r4, r5
 800faf2:	d101      	bne.n	800faf8 <__sfputs_r+0x12>
 800faf4:	2000      	movs	r0, #0
 800faf6:	e007      	b.n	800fb08 <__sfputs_r+0x22>
 800faf8:	463a      	mov	r2, r7
 800fafa:	4630      	mov	r0, r6
 800fafc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb00:	f7ff ffdc 	bl	800fabc <__sfputc_r>
 800fb04:	1c43      	adds	r3, r0, #1
 800fb06:	d1f3      	bne.n	800faf0 <__sfputs_r+0xa>
 800fb08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fb0c <_vfiprintf_r>:
 800fb0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb10:	460d      	mov	r5, r1
 800fb12:	4614      	mov	r4, r2
 800fb14:	4698      	mov	r8, r3
 800fb16:	4606      	mov	r6, r0
 800fb18:	b09d      	sub	sp, #116	; 0x74
 800fb1a:	b118      	cbz	r0, 800fb24 <_vfiprintf_r+0x18>
 800fb1c:	6a03      	ldr	r3, [r0, #32]
 800fb1e:	b90b      	cbnz	r3, 800fb24 <_vfiprintf_r+0x18>
 800fb20:	f7fc fbe2 	bl	800c2e8 <__sinit>
 800fb24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fb26:	07d9      	lsls	r1, r3, #31
 800fb28:	d405      	bmi.n	800fb36 <_vfiprintf_r+0x2a>
 800fb2a:	89ab      	ldrh	r3, [r5, #12]
 800fb2c:	059a      	lsls	r2, r3, #22
 800fb2e:	d402      	bmi.n	800fb36 <_vfiprintf_r+0x2a>
 800fb30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fb32:	f7fd fb49 	bl	800d1c8 <__retarget_lock_acquire_recursive>
 800fb36:	89ab      	ldrh	r3, [r5, #12]
 800fb38:	071b      	lsls	r3, r3, #28
 800fb3a:	d501      	bpl.n	800fb40 <_vfiprintf_r+0x34>
 800fb3c:	692b      	ldr	r3, [r5, #16]
 800fb3e:	b99b      	cbnz	r3, 800fb68 <_vfiprintf_r+0x5c>
 800fb40:	4629      	mov	r1, r5
 800fb42:	4630      	mov	r0, r6
 800fb44:	f000 faf6 	bl	8010134 <__swsetup_r>
 800fb48:	b170      	cbz	r0, 800fb68 <_vfiprintf_r+0x5c>
 800fb4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fb4c:	07dc      	lsls	r4, r3, #31
 800fb4e:	d504      	bpl.n	800fb5a <_vfiprintf_r+0x4e>
 800fb50:	f04f 30ff 	mov.w	r0, #4294967295
 800fb54:	b01d      	add	sp, #116	; 0x74
 800fb56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb5a:	89ab      	ldrh	r3, [r5, #12]
 800fb5c:	0598      	lsls	r0, r3, #22
 800fb5e:	d4f7      	bmi.n	800fb50 <_vfiprintf_r+0x44>
 800fb60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fb62:	f7fd fb33 	bl	800d1cc <__retarget_lock_release_recursive>
 800fb66:	e7f3      	b.n	800fb50 <_vfiprintf_r+0x44>
 800fb68:	2300      	movs	r3, #0
 800fb6a:	9309      	str	r3, [sp, #36]	; 0x24
 800fb6c:	2320      	movs	r3, #32
 800fb6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fb72:	2330      	movs	r3, #48	; 0x30
 800fb74:	f04f 0901 	mov.w	r9, #1
 800fb78:	f8cd 800c 	str.w	r8, [sp, #12]
 800fb7c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800fd2c <_vfiprintf_r+0x220>
 800fb80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fb84:	4623      	mov	r3, r4
 800fb86:	469a      	mov	sl, r3
 800fb88:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fb8c:	b10a      	cbz	r2, 800fb92 <_vfiprintf_r+0x86>
 800fb8e:	2a25      	cmp	r2, #37	; 0x25
 800fb90:	d1f9      	bne.n	800fb86 <_vfiprintf_r+0x7a>
 800fb92:	ebba 0b04 	subs.w	fp, sl, r4
 800fb96:	d00b      	beq.n	800fbb0 <_vfiprintf_r+0xa4>
 800fb98:	465b      	mov	r3, fp
 800fb9a:	4622      	mov	r2, r4
 800fb9c:	4629      	mov	r1, r5
 800fb9e:	4630      	mov	r0, r6
 800fba0:	f7ff ffa1 	bl	800fae6 <__sfputs_r>
 800fba4:	3001      	adds	r0, #1
 800fba6:	f000 80a9 	beq.w	800fcfc <_vfiprintf_r+0x1f0>
 800fbaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fbac:	445a      	add	r2, fp
 800fbae:	9209      	str	r2, [sp, #36]	; 0x24
 800fbb0:	f89a 3000 	ldrb.w	r3, [sl]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	f000 80a1 	beq.w	800fcfc <_vfiprintf_r+0x1f0>
 800fbba:	2300      	movs	r3, #0
 800fbbc:	f04f 32ff 	mov.w	r2, #4294967295
 800fbc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fbc4:	f10a 0a01 	add.w	sl, sl, #1
 800fbc8:	9304      	str	r3, [sp, #16]
 800fbca:	9307      	str	r3, [sp, #28]
 800fbcc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fbd0:	931a      	str	r3, [sp, #104]	; 0x68
 800fbd2:	4654      	mov	r4, sl
 800fbd4:	2205      	movs	r2, #5
 800fbd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbda:	4854      	ldr	r0, [pc, #336]	; (800fd2c <_vfiprintf_r+0x220>)
 800fbdc:	f7fd faff 	bl	800d1de <memchr>
 800fbe0:	9a04      	ldr	r2, [sp, #16]
 800fbe2:	b9d8      	cbnz	r0, 800fc1c <_vfiprintf_r+0x110>
 800fbe4:	06d1      	lsls	r1, r2, #27
 800fbe6:	bf44      	itt	mi
 800fbe8:	2320      	movmi	r3, #32
 800fbea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fbee:	0713      	lsls	r3, r2, #28
 800fbf0:	bf44      	itt	mi
 800fbf2:	232b      	movmi	r3, #43	; 0x2b
 800fbf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fbf8:	f89a 3000 	ldrb.w	r3, [sl]
 800fbfc:	2b2a      	cmp	r3, #42	; 0x2a
 800fbfe:	d015      	beq.n	800fc2c <_vfiprintf_r+0x120>
 800fc00:	4654      	mov	r4, sl
 800fc02:	2000      	movs	r0, #0
 800fc04:	f04f 0c0a 	mov.w	ip, #10
 800fc08:	9a07      	ldr	r2, [sp, #28]
 800fc0a:	4621      	mov	r1, r4
 800fc0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fc10:	3b30      	subs	r3, #48	; 0x30
 800fc12:	2b09      	cmp	r3, #9
 800fc14:	d94d      	bls.n	800fcb2 <_vfiprintf_r+0x1a6>
 800fc16:	b1b0      	cbz	r0, 800fc46 <_vfiprintf_r+0x13a>
 800fc18:	9207      	str	r2, [sp, #28]
 800fc1a:	e014      	b.n	800fc46 <_vfiprintf_r+0x13a>
 800fc1c:	eba0 0308 	sub.w	r3, r0, r8
 800fc20:	fa09 f303 	lsl.w	r3, r9, r3
 800fc24:	4313      	orrs	r3, r2
 800fc26:	46a2      	mov	sl, r4
 800fc28:	9304      	str	r3, [sp, #16]
 800fc2a:	e7d2      	b.n	800fbd2 <_vfiprintf_r+0xc6>
 800fc2c:	9b03      	ldr	r3, [sp, #12]
 800fc2e:	1d19      	adds	r1, r3, #4
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	9103      	str	r1, [sp, #12]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	bfbb      	ittet	lt
 800fc38:	425b      	neglt	r3, r3
 800fc3a:	f042 0202 	orrlt.w	r2, r2, #2
 800fc3e:	9307      	strge	r3, [sp, #28]
 800fc40:	9307      	strlt	r3, [sp, #28]
 800fc42:	bfb8      	it	lt
 800fc44:	9204      	strlt	r2, [sp, #16]
 800fc46:	7823      	ldrb	r3, [r4, #0]
 800fc48:	2b2e      	cmp	r3, #46	; 0x2e
 800fc4a:	d10c      	bne.n	800fc66 <_vfiprintf_r+0x15a>
 800fc4c:	7863      	ldrb	r3, [r4, #1]
 800fc4e:	2b2a      	cmp	r3, #42	; 0x2a
 800fc50:	d134      	bne.n	800fcbc <_vfiprintf_r+0x1b0>
 800fc52:	9b03      	ldr	r3, [sp, #12]
 800fc54:	3402      	adds	r4, #2
 800fc56:	1d1a      	adds	r2, r3, #4
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	9203      	str	r2, [sp, #12]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	bfb8      	it	lt
 800fc60:	f04f 33ff 	movlt.w	r3, #4294967295
 800fc64:	9305      	str	r3, [sp, #20]
 800fc66:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fd30 <_vfiprintf_r+0x224>
 800fc6a:	2203      	movs	r2, #3
 800fc6c:	4650      	mov	r0, sl
 800fc6e:	7821      	ldrb	r1, [r4, #0]
 800fc70:	f7fd fab5 	bl	800d1de <memchr>
 800fc74:	b138      	cbz	r0, 800fc86 <_vfiprintf_r+0x17a>
 800fc76:	2240      	movs	r2, #64	; 0x40
 800fc78:	9b04      	ldr	r3, [sp, #16]
 800fc7a:	eba0 000a 	sub.w	r0, r0, sl
 800fc7e:	4082      	lsls	r2, r0
 800fc80:	4313      	orrs	r3, r2
 800fc82:	3401      	adds	r4, #1
 800fc84:	9304      	str	r3, [sp, #16]
 800fc86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc8a:	2206      	movs	r2, #6
 800fc8c:	4829      	ldr	r0, [pc, #164]	; (800fd34 <_vfiprintf_r+0x228>)
 800fc8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fc92:	f7fd faa4 	bl	800d1de <memchr>
 800fc96:	2800      	cmp	r0, #0
 800fc98:	d03f      	beq.n	800fd1a <_vfiprintf_r+0x20e>
 800fc9a:	4b27      	ldr	r3, [pc, #156]	; (800fd38 <_vfiprintf_r+0x22c>)
 800fc9c:	bb1b      	cbnz	r3, 800fce6 <_vfiprintf_r+0x1da>
 800fc9e:	9b03      	ldr	r3, [sp, #12]
 800fca0:	3307      	adds	r3, #7
 800fca2:	f023 0307 	bic.w	r3, r3, #7
 800fca6:	3308      	adds	r3, #8
 800fca8:	9303      	str	r3, [sp, #12]
 800fcaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fcac:	443b      	add	r3, r7
 800fcae:	9309      	str	r3, [sp, #36]	; 0x24
 800fcb0:	e768      	b.n	800fb84 <_vfiprintf_r+0x78>
 800fcb2:	460c      	mov	r4, r1
 800fcb4:	2001      	movs	r0, #1
 800fcb6:	fb0c 3202 	mla	r2, ip, r2, r3
 800fcba:	e7a6      	b.n	800fc0a <_vfiprintf_r+0xfe>
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	f04f 0c0a 	mov.w	ip, #10
 800fcc2:	4619      	mov	r1, r3
 800fcc4:	3401      	adds	r4, #1
 800fcc6:	9305      	str	r3, [sp, #20]
 800fcc8:	4620      	mov	r0, r4
 800fcca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fcce:	3a30      	subs	r2, #48	; 0x30
 800fcd0:	2a09      	cmp	r2, #9
 800fcd2:	d903      	bls.n	800fcdc <_vfiprintf_r+0x1d0>
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d0c6      	beq.n	800fc66 <_vfiprintf_r+0x15a>
 800fcd8:	9105      	str	r1, [sp, #20]
 800fcda:	e7c4      	b.n	800fc66 <_vfiprintf_r+0x15a>
 800fcdc:	4604      	mov	r4, r0
 800fcde:	2301      	movs	r3, #1
 800fce0:	fb0c 2101 	mla	r1, ip, r1, r2
 800fce4:	e7f0      	b.n	800fcc8 <_vfiprintf_r+0x1bc>
 800fce6:	ab03      	add	r3, sp, #12
 800fce8:	9300      	str	r3, [sp, #0]
 800fcea:	462a      	mov	r2, r5
 800fcec:	4630      	mov	r0, r6
 800fcee:	4b13      	ldr	r3, [pc, #76]	; (800fd3c <_vfiprintf_r+0x230>)
 800fcf0:	a904      	add	r1, sp, #16
 800fcf2:	f7fb feab 	bl	800ba4c <_printf_float>
 800fcf6:	4607      	mov	r7, r0
 800fcf8:	1c78      	adds	r0, r7, #1
 800fcfa:	d1d6      	bne.n	800fcaa <_vfiprintf_r+0x19e>
 800fcfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fcfe:	07d9      	lsls	r1, r3, #31
 800fd00:	d405      	bmi.n	800fd0e <_vfiprintf_r+0x202>
 800fd02:	89ab      	ldrh	r3, [r5, #12]
 800fd04:	059a      	lsls	r2, r3, #22
 800fd06:	d402      	bmi.n	800fd0e <_vfiprintf_r+0x202>
 800fd08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fd0a:	f7fd fa5f 	bl	800d1cc <__retarget_lock_release_recursive>
 800fd0e:	89ab      	ldrh	r3, [r5, #12]
 800fd10:	065b      	lsls	r3, r3, #25
 800fd12:	f53f af1d 	bmi.w	800fb50 <_vfiprintf_r+0x44>
 800fd16:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fd18:	e71c      	b.n	800fb54 <_vfiprintf_r+0x48>
 800fd1a:	ab03      	add	r3, sp, #12
 800fd1c:	9300      	str	r3, [sp, #0]
 800fd1e:	462a      	mov	r2, r5
 800fd20:	4630      	mov	r0, r6
 800fd22:	4b06      	ldr	r3, [pc, #24]	; (800fd3c <_vfiprintf_r+0x230>)
 800fd24:	a904      	add	r1, sp, #16
 800fd26:	f7fc f931 	bl	800bf8c <_printf_i>
 800fd2a:	e7e4      	b.n	800fcf6 <_vfiprintf_r+0x1ea>
 800fd2c:	08010c2c 	.word	0x08010c2c
 800fd30:	08010c32 	.word	0x08010c32
 800fd34:	08010c36 	.word	0x08010c36
 800fd38:	0800ba4d 	.word	0x0800ba4d
 800fd3c:	0800fae7 	.word	0x0800fae7

0800fd40 <_scanf_chars>:
 800fd40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd44:	4615      	mov	r5, r2
 800fd46:	688a      	ldr	r2, [r1, #8]
 800fd48:	4680      	mov	r8, r0
 800fd4a:	460c      	mov	r4, r1
 800fd4c:	b932      	cbnz	r2, 800fd5c <_scanf_chars+0x1c>
 800fd4e:	698a      	ldr	r2, [r1, #24]
 800fd50:	2a00      	cmp	r2, #0
 800fd52:	bf0c      	ite	eq
 800fd54:	2201      	moveq	r2, #1
 800fd56:	f04f 32ff 	movne.w	r2, #4294967295
 800fd5a:	608a      	str	r2, [r1, #8]
 800fd5c:	2700      	movs	r7, #0
 800fd5e:	6822      	ldr	r2, [r4, #0]
 800fd60:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800fdf0 <_scanf_chars+0xb0>
 800fd64:	06d1      	lsls	r1, r2, #27
 800fd66:	bf5f      	itttt	pl
 800fd68:	681a      	ldrpl	r2, [r3, #0]
 800fd6a:	1d11      	addpl	r1, r2, #4
 800fd6c:	6019      	strpl	r1, [r3, #0]
 800fd6e:	6816      	ldrpl	r6, [r2, #0]
 800fd70:	69a0      	ldr	r0, [r4, #24]
 800fd72:	b188      	cbz	r0, 800fd98 <_scanf_chars+0x58>
 800fd74:	2801      	cmp	r0, #1
 800fd76:	d107      	bne.n	800fd88 <_scanf_chars+0x48>
 800fd78:	682b      	ldr	r3, [r5, #0]
 800fd7a:	781a      	ldrb	r2, [r3, #0]
 800fd7c:	6963      	ldr	r3, [r4, #20]
 800fd7e:	5c9b      	ldrb	r3, [r3, r2]
 800fd80:	b953      	cbnz	r3, 800fd98 <_scanf_chars+0x58>
 800fd82:	2f00      	cmp	r7, #0
 800fd84:	d031      	beq.n	800fdea <_scanf_chars+0xaa>
 800fd86:	e022      	b.n	800fdce <_scanf_chars+0x8e>
 800fd88:	2802      	cmp	r0, #2
 800fd8a:	d120      	bne.n	800fdce <_scanf_chars+0x8e>
 800fd8c:	682b      	ldr	r3, [r5, #0]
 800fd8e:	781b      	ldrb	r3, [r3, #0]
 800fd90:	f819 3003 	ldrb.w	r3, [r9, r3]
 800fd94:	071b      	lsls	r3, r3, #28
 800fd96:	d41a      	bmi.n	800fdce <_scanf_chars+0x8e>
 800fd98:	6823      	ldr	r3, [r4, #0]
 800fd9a:	3701      	adds	r7, #1
 800fd9c:	06da      	lsls	r2, r3, #27
 800fd9e:	bf5e      	ittt	pl
 800fda0:	682b      	ldrpl	r3, [r5, #0]
 800fda2:	781b      	ldrbpl	r3, [r3, #0]
 800fda4:	f806 3b01 	strbpl.w	r3, [r6], #1
 800fda8:	682a      	ldr	r2, [r5, #0]
 800fdaa:	686b      	ldr	r3, [r5, #4]
 800fdac:	3201      	adds	r2, #1
 800fdae:	602a      	str	r2, [r5, #0]
 800fdb0:	68a2      	ldr	r2, [r4, #8]
 800fdb2:	3b01      	subs	r3, #1
 800fdb4:	3a01      	subs	r2, #1
 800fdb6:	606b      	str	r3, [r5, #4]
 800fdb8:	60a2      	str	r2, [r4, #8]
 800fdba:	b142      	cbz	r2, 800fdce <_scanf_chars+0x8e>
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	dcd7      	bgt.n	800fd70 <_scanf_chars+0x30>
 800fdc0:	4629      	mov	r1, r5
 800fdc2:	4640      	mov	r0, r8
 800fdc4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800fdc8:	4798      	blx	r3
 800fdca:	2800      	cmp	r0, #0
 800fdcc:	d0d0      	beq.n	800fd70 <_scanf_chars+0x30>
 800fdce:	6823      	ldr	r3, [r4, #0]
 800fdd0:	f013 0310 	ands.w	r3, r3, #16
 800fdd4:	d105      	bne.n	800fde2 <_scanf_chars+0xa2>
 800fdd6:	68e2      	ldr	r2, [r4, #12]
 800fdd8:	3201      	adds	r2, #1
 800fdda:	60e2      	str	r2, [r4, #12]
 800fddc:	69a2      	ldr	r2, [r4, #24]
 800fdde:	b102      	cbz	r2, 800fde2 <_scanf_chars+0xa2>
 800fde0:	7033      	strb	r3, [r6, #0]
 800fde2:	2000      	movs	r0, #0
 800fde4:	6923      	ldr	r3, [r4, #16]
 800fde6:	443b      	add	r3, r7
 800fde8:	6123      	str	r3, [r4, #16]
 800fdea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fdee:	bf00      	nop
 800fdf0:	08010769 	.word	0x08010769

0800fdf4 <_scanf_i>:
 800fdf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdf8:	460c      	mov	r4, r1
 800fdfa:	4698      	mov	r8, r3
 800fdfc:	4b72      	ldr	r3, [pc, #456]	; (800ffc8 <_scanf_i+0x1d4>)
 800fdfe:	b087      	sub	sp, #28
 800fe00:	4682      	mov	sl, r0
 800fe02:	4616      	mov	r6, r2
 800fe04:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fe08:	ab03      	add	r3, sp, #12
 800fe0a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fe0e:	4b6f      	ldr	r3, [pc, #444]	; (800ffcc <_scanf_i+0x1d8>)
 800fe10:	69a1      	ldr	r1, [r4, #24]
 800fe12:	4a6f      	ldr	r2, [pc, #444]	; (800ffd0 <_scanf_i+0x1dc>)
 800fe14:	4627      	mov	r7, r4
 800fe16:	2903      	cmp	r1, #3
 800fe18:	bf18      	it	ne
 800fe1a:	461a      	movne	r2, r3
 800fe1c:	68a3      	ldr	r3, [r4, #8]
 800fe1e:	9201      	str	r2, [sp, #4]
 800fe20:	1e5a      	subs	r2, r3, #1
 800fe22:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800fe26:	bf81      	itttt	hi
 800fe28:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800fe2c:	eb03 0905 	addhi.w	r9, r3, r5
 800fe30:	f240 135d 	movwhi	r3, #349	; 0x15d
 800fe34:	60a3      	strhi	r3, [r4, #8]
 800fe36:	f857 3b1c 	ldr.w	r3, [r7], #28
 800fe3a:	bf98      	it	ls
 800fe3c:	f04f 0900 	movls.w	r9, #0
 800fe40:	463d      	mov	r5, r7
 800fe42:	f04f 0b00 	mov.w	fp, #0
 800fe46:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800fe4a:	6023      	str	r3, [r4, #0]
 800fe4c:	6831      	ldr	r1, [r6, #0]
 800fe4e:	ab03      	add	r3, sp, #12
 800fe50:	2202      	movs	r2, #2
 800fe52:	7809      	ldrb	r1, [r1, #0]
 800fe54:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800fe58:	f7fd f9c1 	bl	800d1de <memchr>
 800fe5c:	b328      	cbz	r0, 800feaa <_scanf_i+0xb6>
 800fe5e:	f1bb 0f01 	cmp.w	fp, #1
 800fe62:	d159      	bne.n	800ff18 <_scanf_i+0x124>
 800fe64:	6862      	ldr	r2, [r4, #4]
 800fe66:	b92a      	cbnz	r2, 800fe74 <_scanf_i+0x80>
 800fe68:	2308      	movs	r3, #8
 800fe6a:	6822      	ldr	r2, [r4, #0]
 800fe6c:	6063      	str	r3, [r4, #4]
 800fe6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fe72:	6022      	str	r2, [r4, #0]
 800fe74:	6822      	ldr	r2, [r4, #0]
 800fe76:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800fe7a:	6022      	str	r2, [r4, #0]
 800fe7c:	68a2      	ldr	r2, [r4, #8]
 800fe7e:	1e51      	subs	r1, r2, #1
 800fe80:	60a1      	str	r1, [r4, #8]
 800fe82:	b192      	cbz	r2, 800feaa <_scanf_i+0xb6>
 800fe84:	6832      	ldr	r2, [r6, #0]
 800fe86:	1c51      	adds	r1, r2, #1
 800fe88:	6031      	str	r1, [r6, #0]
 800fe8a:	7812      	ldrb	r2, [r2, #0]
 800fe8c:	f805 2b01 	strb.w	r2, [r5], #1
 800fe90:	6872      	ldr	r2, [r6, #4]
 800fe92:	3a01      	subs	r2, #1
 800fe94:	2a00      	cmp	r2, #0
 800fe96:	6072      	str	r2, [r6, #4]
 800fe98:	dc07      	bgt.n	800feaa <_scanf_i+0xb6>
 800fe9a:	4631      	mov	r1, r6
 800fe9c:	4650      	mov	r0, sl
 800fe9e:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800fea2:	4790      	blx	r2
 800fea4:	2800      	cmp	r0, #0
 800fea6:	f040 8085 	bne.w	800ffb4 <_scanf_i+0x1c0>
 800feaa:	f10b 0b01 	add.w	fp, fp, #1
 800feae:	f1bb 0f03 	cmp.w	fp, #3
 800feb2:	d1cb      	bne.n	800fe4c <_scanf_i+0x58>
 800feb4:	6863      	ldr	r3, [r4, #4]
 800feb6:	b90b      	cbnz	r3, 800febc <_scanf_i+0xc8>
 800feb8:	230a      	movs	r3, #10
 800feba:	6063      	str	r3, [r4, #4]
 800febc:	6863      	ldr	r3, [r4, #4]
 800febe:	4945      	ldr	r1, [pc, #276]	; (800ffd4 <_scanf_i+0x1e0>)
 800fec0:	6960      	ldr	r0, [r4, #20]
 800fec2:	1ac9      	subs	r1, r1, r3
 800fec4:	f000 f888 	bl	800ffd8 <__sccl>
 800fec8:	f04f 0b00 	mov.w	fp, #0
 800fecc:	68a3      	ldr	r3, [r4, #8]
 800fece:	6822      	ldr	r2, [r4, #0]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d03d      	beq.n	800ff50 <_scanf_i+0x15c>
 800fed4:	6831      	ldr	r1, [r6, #0]
 800fed6:	6960      	ldr	r0, [r4, #20]
 800fed8:	f891 c000 	ldrb.w	ip, [r1]
 800fedc:	f810 000c 	ldrb.w	r0, [r0, ip]
 800fee0:	2800      	cmp	r0, #0
 800fee2:	d035      	beq.n	800ff50 <_scanf_i+0x15c>
 800fee4:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800fee8:	d124      	bne.n	800ff34 <_scanf_i+0x140>
 800feea:	0510      	lsls	r0, r2, #20
 800feec:	d522      	bpl.n	800ff34 <_scanf_i+0x140>
 800feee:	f10b 0b01 	add.w	fp, fp, #1
 800fef2:	f1b9 0f00 	cmp.w	r9, #0
 800fef6:	d003      	beq.n	800ff00 <_scanf_i+0x10c>
 800fef8:	3301      	adds	r3, #1
 800fefa:	f109 39ff 	add.w	r9, r9, #4294967295
 800fefe:	60a3      	str	r3, [r4, #8]
 800ff00:	6873      	ldr	r3, [r6, #4]
 800ff02:	3b01      	subs	r3, #1
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	6073      	str	r3, [r6, #4]
 800ff08:	dd1b      	ble.n	800ff42 <_scanf_i+0x14e>
 800ff0a:	6833      	ldr	r3, [r6, #0]
 800ff0c:	3301      	adds	r3, #1
 800ff0e:	6033      	str	r3, [r6, #0]
 800ff10:	68a3      	ldr	r3, [r4, #8]
 800ff12:	3b01      	subs	r3, #1
 800ff14:	60a3      	str	r3, [r4, #8]
 800ff16:	e7d9      	b.n	800fecc <_scanf_i+0xd8>
 800ff18:	f1bb 0f02 	cmp.w	fp, #2
 800ff1c:	d1ae      	bne.n	800fe7c <_scanf_i+0x88>
 800ff1e:	6822      	ldr	r2, [r4, #0]
 800ff20:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800ff24:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ff28:	d1bf      	bne.n	800feaa <_scanf_i+0xb6>
 800ff2a:	2310      	movs	r3, #16
 800ff2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ff30:	6063      	str	r3, [r4, #4]
 800ff32:	e7a2      	b.n	800fe7a <_scanf_i+0x86>
 800ff34:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ff38:	6022      	str	r2, [r4, #0]
 800ff3a:	780b      	ldrb	r3, [r1, #0]
 800ff3c:	f805 3b01 	strb.w	r3, [r5], #1
 800ff40:	e7de      	b.n	800ff00 <_scanf_i+0x10c>
 800ff42:	4631      	mov	r1, r6
 800ff44:	4650      	mov	r0, sl
 800ff46:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ff4a:	4798      	blx	r3
 800ff4c:	2800      	cmp	r0, #0
 800ff4e:	d0df      	beq.n	800ff10 <_scanf_i+0x11c>
 800ff50:	6823      	ldr	r3, [r4, #0]
 800ff52:	05d9      	lsls	r1, r3, #23
 800ff54:	d50d      	bpl.n	800ff72 <_scanf_i+0x17e>
 800ff56:	42bd      	cmp	r5, r7
 800ff58:	d909      	bls.n	800ff6e <_scanf_i+0x17a>
 800ff5a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ff5e:	4632      	mov	r2, r6
 800ff60:	4650      	mov	r0, sl
 800ff62:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ff66:	f105 39ff 	add.w	r9, r5, #4294967295
 800ff6a:	4798      	blx	r3
 800ff6c:	464d      	mov	r5, r9
 800ff6e:	42bd      	cmp	r5, r7
 800ff70:	d028      	beq.n	800ffc4 <_scanf_i+0x1d0>
 800ff72:	6822      	ldr	r2, [r4, #0]
 800ff74:	f012 0210 	ands.w	r2, r2, #16
 800ff78:	d113      	bne.n	800ffa2 <_scanf_i+0x1ae>
 800ff7a:	702a      	strb	r2, [r5, #0]
 800ff7c:	4639      	mov	r1, r7
 800ff7e:	6863      	ldr	r3, [r4, #4]
 800ff80:	4650      	mov	r0, sl
 800ff82:	9e01      	ldr	r6, [sp, #4]
 800ff84:	47b0      	blx	r6
 800ff86:	f8d8 3000 	ldr.w	r3, [r8]
 800ff8a:	6821      	ldr	r1, [r4, #0]
 800ff8c:	1d1a      	adds	r2, r3, #4
 800ff8e:	f8c8 2000 	str.w	r2, [r8]
 800ff92:	f011 0f20 	tst.w	r1, #32
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	d00f      	beq.n	800ffba <_scanf_i+0x1c6>
 800ff9a:	6018      	str	r0, [r3, #0]
 800ff9c:	68e3      	ldr	r3, [r4, #12]
 800ff9e:	3301      	adds	r3, #1
 800ffa0:	60e3      	str	r3, [r4, #12]
 800ffa2:	2000      	movs	r0, #0
 800ffa4:	6923      	ldr	r3, [r4, #16]
 800ffa6:	1bed      	subs	r5, r5, r7
 800ffa8:	445d      	add	r5, fp
 800ffaa:	442b      	add	r3, r5
 800ffac:	6123      	str	r3, [r4, #16]
 800ffae:	b007      	add	sp, #28
 800ffb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffb4:	f04f 0b00 	mov.w	fp, #0
 800ffb8:	e7ca      	b.n	800ff50 <_scanf_i+0x15c>
 800ffba:	07ca      	lsls	r2, r1, #31
 800ffbc:	bf4c      	ite	mi
 800ffbe:	8018      	strhmi	r0, [r3, #0]
 800ffc0:	6018      	strpl	r0, [r3, #0]
 800ffc2:	e7eb      	b.n	800ff9c <_scanf_i+0x1a8>
 800ffc4:	2001      	movs	r0, #1
 800ffc6:	e7f2      	b.n	800ffae <_scanf_i+0x1ba>
 800ffc8:	08010560 	.word	0x08010560
 800ffcc:	0800f17d 	.word	0x0800f17d
 800ffd0:	0800b8fd 	.word	0x0800b8fd
 800ffd4:	08010cb0 	.word	0x08010cb0

0800ffd8 <__sccl>:
 800ffd8:	b570      	push	{r4, r5, r6, lr}
 800ffda:	780b      	ldrb	r3, [r1, #0]
 800ffdc:	4604      	mov	r4, r0
 800ffde:	2b5e      	cmp	r3, #94	; 0x5e
 800ffe0:	bf0b      	itete	eq
 800ffe2:	784b      	ldrbeq	r3, [r1, #1]
 800ffe4:	1c4a      	addne	r2, r1, #1
 800ffe6:	1c8a      	addeq	r2, r1, #2
 800ffe8:	2100      	movne	r1, #0
 800ffea:	bf08      	it	eq
 800ffec:	2101      	moveq	r1, #1
 800ffee:	3801      	subs	r0, #1
 800fff0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800fff4:	f800 1f01 	strb.w	r1, [r0, #1]!
 800fff8:	42a8      	cmp	r0, r5
 800fffa:	d1fb      	bne.n	800fff4 <__sccl+0x1c>
 800fffc:	b90b      	cbnz	r3, 8010002 <__sccl+0x2a>
 800fffe:	1e50      	subs	r0, r2, #1
 8010000:	bd70      	pop	{r4, r5, r6, pc}
 8010002:	f081 0101 	eor.w	r1, r1, #1
 8010006:	4610      	mov	r0, r2
 8010008:	54e1      	strb	r1, [r4, r3]
 801000a:	4602      	mov	r2, r0
 801000c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8010010:	2d2d      	cmp	r5, #45	; 0x2d
 8010012:	d005      	beq.n	8010020 <__sccl+0x48>
 8010014:	2d5d      	cmp	r5, #93	; 0x5d
 8010016:	d016      	beq.n	8010046 <__sccl+0x6e>
 8010018:	2d00      	cmp	r5, #0
 801001a:	d0f1      	beq.n	8010000 <__sccl+0x28>
 801001c:	462b      	mov	r3, r5
 801001e:	e7f2      	b.n	8010006 <__sccl+0x2e>
 8010020:	7846      	ldrb	r6, [r0, #1]
 8010022:	2e5d      	cmp	r6, #93	; 0x5d
 8010024:	d0fa      	beq.n	801001c <__sccl+0x44>
 8010026:	42b3      	cmp	r3, r6
 8010028:	dcf8      	bgt.n	801001c <__sccl+0x44>
 801002a:	461a      	mov	r2, r3
 801002c:	3002      	adds	r0, #2
 801002e:	3201      	adds	r2, #1
 8010030:	4296      	cmp	r6, r2
 8010032:	54a1      	strb	r1, [r4, r2]
 8010034:	dcfb      	bgt.n	801002e <__sccl+0x56>
 8010036:	1af2      	subs	r2, r6, r3
 8010038:	3a01      	subs	r2, #1
 801003a:	42b3      	cmp	r3, r6
 801003c:	bfa8      	it	ge
 801003e:	2200      	movge	r2, #0
 8010040:	1c5d      	adds	r5, r3, #1
 8010042:	18ab      	adds	r3, r5, r2
 8010044:	e7e1      	b.n	801000a <__sccl+0x32>
 8010046:	4610      	mov	r0, r2
 8010048:	e7da      	b.n	8010000 <__sccl+0x28>

0801004a <__submore>:
 801004a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801004e:	460c      	mov	r4, r1
 8010050:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010052:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010056:	4299      	cmp	r1, r3
 8010058:	d11b      	bne.n	8010092 <__submore+0x48>
 801005a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801005e:	f7fa fcd5 	bl	800aa0c <_malloc_r>
 8010062:	b918      	cbnz	r0, 801006c <__submore+0x22>
 8010064:	f04f 30ff 	mov.w	r0, #4294967295
 8010068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801006c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010070:	63a3      	str	r3, [r4, #56]	; 0x38
 8010072:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8010076:	6360      	str	r0, [r4, #52]	; 0x34
 8010078:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801007c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8010080:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8010084:	7043      	strb	r3, [r0, #1]
 8010086:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801008a:	7003      	strb	r3, [r0, #0]
 801008c:	6020      	str	r0, [r4, #0]
 801008e:	2000      	movs	r0, #0
 8010090:	e7ea      	b.n	8010068 <__submore+0x1e>
 8010092:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8010094:	0077      	lsls	r7, r6, #1
 8010096:	463a      	mov	r2, r7
 8010098:	f7ff fb0e 	bl	800f6b8 <_realloc_r>
 801009c:	4605      	mov	r5, r0
 801009e:	2800      	cmp	r0, #0
 80100a0:	d0e0      	beq.n	8010064 <__submore+0x1a>
 80100a2:	eb00 0806 	add.w	r8, r0, r6
 80100a6:	4601      	mov	r1, r0
 80100a8:	4632      	mov	r2, r6
 80100aa:	4640      	mov	r0, r8
 80100ac:	f7fd f8a5 	bl	800d1fa <memcpy>
 80100b0:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80100b4:	f8c4 8000 	str.w	r8, [r4]
 80100b8:	e7e9      	b.n	801008e <__submore+0x44>

080100ba <__swbuf_r>:
 80100ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100bc:	460e      	mov	r6, r1
 80100be:	4614      	mov	r4, r2
 80100c0:	4605      	mov	r5, r0
 80100c2:	b118      	cbz	r0, 80100cc <__swbuf_r+0x12>
 80100c4:	6a03      	ldr	r3, [r0, #32]
 80100c6:	b90b      	cbnz	r3, 80100cc <__swbuf_r+0x12>
 80100c8:	f7fc f90e 	bl	800c2e8 <__sinit>
 80100cc:	69a3      	ldr	r3, [r4, #24]
 80100ce:	60a3      	str	r3, [r4, #8]
 80100d0:	89a3      	ldrh	r3, [r4, #12]
 80100d2:	071a      	lsls	r2, r3, #28
 80100d4:	d525      	bpl.n	8010122 <__swbuf_r+0x68>
 80100d6:	6923      	ldr	r3, [r4, #16]
 80100d8:	b31b      	cbz	r3, 8010122 <__swbuf_r+0x68>
 80100da:	6823      	ldr	r3, [r4, #0]
 80100dc:	6922      	ldr	r2, [r4, #16]
 80100de:	b2f6      	uxtb	r6, r6
 80100e0:	1a98      	subs	r0, r3, r2
 80100e2:	6963      	ldr	r3, [r4, #20]
 80100e4:	4637      	mov	r7, r6
 80100e6:	4283      	cmp	r3, r0
 80100e8:	dc04      	bgt.n	80100f4 <__swbuf_r+0x3a>
 80100ea:	4621      	mov	r1, r4
 80100ec:	4628      	mov	r0, r5
 80100ee:	f7ff fa39 	bl	800f564 <_fflush_r>
 80100f2:	b9e0      	cbnz	r0, 801012e <__swbuf_r+0x74>
 80100f4:	68a3      	ldr	r3, [r4, #8]
 80100f6:	3b01      	subs	r3, #1
 80100f8:	60a3      	str	r3, [r4, #8]
 80100fa:	6823      	ldr	r3, [r4, #0]
 80100fc:	1c5a      	adds	r2, r3, #1
 80100fe:	6022      	str	r2, [r4, #0]
 8010100:	701e      	strb	r6, [r3, #0]
 8010102:	6962      	ldr	r2, [r4, #20]
 8010104:	1c43      	adds	r3, r0, #1
 8010106:	429a      	cmp	r2, r3
 8010108:	d004      	beq.n	8010114 <__swbuf_r+0x5a>
 801010a:	89a3      	ldrh	r3, [r4, #12]
 801010c:	07db      	lsls	r3, r3, #31
 801010e:	d506      	bpl.n	801011e <__swbuf_r+0x64>
 8010110:	2e0a      	cmp	r6, #10
 8010112:	d104      	bne.n	801011e <__swbuf_r+0x64>
 8010114:	4621      	mov	r1, r4
 8010116:	4628      	mov	r0, r5
 8010118:	f7ff fa24 	bl	800f564 <_fflush_r>
 801011c:	b938      	cbnz	r0, 801012e <__swbuf_r+0x74>
 801011e:	4638      	mov	r0, r7
 8010120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010122:	4621      	mov	r1, r4
 8010124:	4628      	mov	r0, r5
 8010126:	f000 f805 	bl	8010134 <__swsetup_r>
 801012a:	2800      	cmp	r0, #0
 801012c:	d0d5      	beq.n	80100da <__swbuf_r+0x20>
 801012e:	f04f 37ff 	mov.w	r7, #4294967295
 8010132:	e7f4      	b.n	801011e <__swbuf_r+0x64>

08010134 <__swsetup_r>:
 8010134:	b538      	push	{r3, r4, r5, lr}
 8010136:	4b2a      	ldr	r3, [pc, #168]	; (80101e0 <__swsetup_r+0xac>)
 8010138:	4605      	mov	r5, r0
 801013a:	6818      	ldr	r0, [r3, #0]
 801013c:	460c      	mov	r4, r1
 801013e:	b118      	cbz	r0, 8010148 <__swsetup_r+0x14>
 8010140:	6a03      	ldr	r3, [r0, #32]
 8010142:	b90b      	cbnz	r3, 8010148 <__swsetup_r+0x14>
 8010144:	f7fc f8d0 	bl	800c2e8 <__sinit>
 8010148:	89a3      	ldrh	r3, [r4, #12]
 801014a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801014e:	0718      	lsls	r0, r3, #28
 8010150:	d422      	bmi.n	8010198 <__swsetup_r+0x64>
 8010152:	06d9      	lsls	r1, r3, #27
 8010154:	d407      	bmi.n	8010166 <__swsetup_r+0x32>
 8010156:	2309      	movs	r3, #9
 8010158:	602b      	str	r3, [r5, #0]
 801015a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801015e:	f04f 30ff 	mov.w	r0, #4294967295
 8010162:	81a3      	strh	r3, [r4, #12]
 8010164:	e034      	b.n	80101d0 <__swsetup_r+0x9c>
 8010166:	0758      	lsls	r0, r3, #29
 8010168:	d512      	bpl.n	8010190 <__swsetup_r+0x5c>
 801016a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801016c:	b141      	cbz	r1, 8010180 <__swsetup_r+0x4c>
 801016e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010172:	4299      	cmp	r1, r3
 8010174:	d002      	beq.n	801017c <__swsetup_r+0x48>
 8010176:	4628      	mov	r0, r5
 8010178:	f7fd fefa 	bl	800df70 <_free_r>
 801017c:	2300      	movs	r3, #0
 801017e:	6363      	str	r3, [r4, #52]	; 0x34
 8010180:	89a3      	ldrh	r3, [r4, #12]
 8010182:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010186:	81a3      	strh	r3, [r4, #12]
 8010188:	2300      	movs	r3, #0
 801018a:	6063      	str	r3, [r4, #4]
 801018c:	6923      	ldr	r3, [r4, #16]
 801018e:	6023      	str	r3, [r4, #0]
 8010190:	89a3      	ldrh	r3, [r4, #12]
 8010192:	f043 0308 	orr.w	r3, r3, #8
 8010196:	81a3      	strh	r3, [r4, #12]
 8010198:	6923      	ldr	r3, [r4, #16]
 801019a:	b94b      	cbnz	r3, 80101b0 <__swsetup_r+0x7c>
 801019c:	89a3      	ldrh	r3, [r4, #12]
 801019e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80101a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80101a6:	d003      	beq.n	80101b0 <__swsetup_r+0x7c>
 80101a8:	4621      	mov	r1, r4
 80101aa:	4628      	mov	r0, r5
 80101ac:	f000 f88b 	bl	80102c6 <__smakebuf_r>
 80101b0:	89a0      	ldrh	r0, [r4, #12]
 80101b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80101b6:	f010 0301 	ands.w	r3, r0, #1
 80101ba:	d00a      	beq.n	80101d2 <__swsetup_r+0x9e>
 80101bc:	2300      	movs	r3, #0
 80101be:	60a3      	str	r3, [r4, #8]
 80101c0:	6963      	ldr	r3, [r4, #20]
 80101c2:	425b      	negs	r3, r3
 80101c4:	61a3      	str	r3, [r4, #24]
 80101c6:	6923      	ldr	r3, [r4, #16]
 80101c8:	b943      	cbnz	r3, 80101dc <__swsetup_r+0xa8>
 80101ca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80101ce:	d1c4      	bne.n	801015a <__swsetup_r+0x26>
 80101d0:	bd38      	pop	{r3, r4, r5, pc}
 80101d2:	0781      	lsls	r1, r0, #30
 80101d4:	bf58      	it	pl
 80101d6:	6963      	ldrpl	r3, [r4, #20]
 80101d8:	60a3      	str	r3, [r4, #8]
 80101da:	e7f4      	b.n	80101c6 <__swsetup_r+0x92>
 80101dc:	2000      	movs	r0, #0
 80101de:	e7f7      	b.n	80101d0 <__swsetup_r+0x9c>
 80101e0:	200001e0 	.word	0x200001e0

080101e4 <_raise_r>:
 80101e4:	291f      	cmp	r1, #31
 80101e6:	b538      	push	{r3, r4, r5, lr}
 80101e8:	4604      	mov	r4, r0
 80101ea:	460d      	mov	r5, r1
 80101ec:	d904      	bls.n	80101f8 <_raise_r+0x14>
 80101ee:	2316      	movs	r3, #22
 80101f0:	6003      	str	r3, [r0, #0]
 80101f2:	f04f 30ff 	mov.w	r0, #4294967295
 80101f6:	bd38      	pop	{r3, r4, r5, pc}
 80101f8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80101fa:	b112      	cbz	r2, 8010202 <_raise_r+0x1e>
 80101fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010200:	b94b      	cbnz	r3, 8010216 <_raise_r+0x32>
 8010202:	4620      	mov	r0, r4
 8010204:	f000 f830 	bl	8010268 <_getpid_r>
 8010208:	462a      	mov	r2, r5
 801020a:	4601      	mov	r1, r0
 801020c:	4620      	mov	r0, r4
 801020e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010212:	f000 b817 	b.w	8010244 <_kill_r>
 8010216:	2b01      	cmp	r3, #1
 8010218:	d00a      	beq.n	8010230 <_raise_r+0x4c>
 801021a:	1c59      	adds	r1, r3, #1
 801021c:	d103      	bne.n	8010226 <_raise_r+0x42>
 801021e:	2316      	movs	r3, #22
 8010220:	6003      	str	r3, [r0, #0]
 8010222:	2001      	movs	r0, #1
 8010224:	e7e7      	b.n	80101f6 <_raise_r+0x12>
 8010226:	2400      	movs	r4, #0
 8010228:	4628      	mov	r0, r5
 801022a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801022e:	4798      	blx	r3
 8010230:	2000      	movs	r0, #0
 8010232:	e7e0      	b.n	80101f6 <_raise_r+0x12>

08010234 <raise>:
 8010234:	4b02      	ldr	r3, [pc, #8]	; (8010240 <raise+0xc>)
 8010236:	4601      	mov	r1, r0
 8010238:	6818      	ldr	r0, [r3, #0]
 801023a:	f7ff bfd3 	b.w	80101e4 <_raise_r>
 801023e:	bf00      	nop
 8010240:	200001e0 	.word	0x200001e0

08010244 <_kill_r>:
 8010244:	b538      	push	{r3, r4, r5, lr}
 8010246:	2300      	movs	r3, #0
 8010248:	4d06      	ldr	r5, [pc, #24]	; (8010264 <_kill_r+0x20>)
 801024a:	4604      	mov	r4, r0
 801024c:	4608      	mov	r0, r1
 801024e:	4611      	mov	r1, r2
 8010250:	602b      	str	r3, [r5, #0]
 8010252:	f7f3 f80c 	bl	800326e <_kill>
 8010256:	1c43      	adds	r3, r0, #1
 8010258:	d102      	bne.n	8010260 <_kill_r+0x1c>
 801025a:	682b      	ldr	r3, [r5, #0]
 801025c:	b103      	cbz	r3, 8010260 <_kill_r+0x1c>
 801025e:	6023      	str	r3, [r4, #0]
 8010260:	bd38      	pop	{r3, r4, r5, pc}
 8010262:	bf00      	nop
 8010264:	200034c8 	.word	0x200034c8

08010268 <_getpid_r>:
 8010268:	f7f2 bffa 	b.w	8003260 <_getpid>

0801026c <_malloc_usable_size_r>:
 801026c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010270:	1f18      	subs	r0, r3, #4
 8010272:	2b00      	cmp	r3, #0
 8010274:	bfbc      	itt	lt
 8010276:	580b      	ldrlt	r3, [r1, r0]
 8010278:	18c0      	addlt	r0, r0, r3
 801027a:	4770      	bx	lr

0801027c <__swhatbuf_r>:
 801027c:	b570      	push	{r4, r5, r6, lr}
 801027e:	460c      	mov	r4, r1
 8010280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010284:	4615      	mov	r5, r2
 8010286:	2900      	cmp	r1, #0
 8010288:	461e      	mov	r6, r3
 801028a:	b096      	sub	sp, #88	; 0x58
 801028c:	da0c      	bge.n	80102a8 <__swhatbuf_r+0x2c>
 801028e:	89a3      	ldrh	r3, [r4, #12]
 8010290:	2100      	movs	r1, #0
 8010292:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010296:	bf0c      	ite	eq
 8010298:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801029c:	2340      	movne	r3, #64	; 0x40
 801029e:	2000      	movs	r0, #0
 80102a0:	6031      	str	r1, [r6, #0]
 80102a2:	602b      	str	r3, [r5, #0]
 80102a4:	b016      	add	sp, #88	; 0x58
 80102a6:	bd70      	pop	{r4, r5, r6, pc}
 80102a8:	466a      	mov	r2, sp
 80102aa:	f000 f849 	bl	8010340 <_fstat_r>
 80102ae:	2800      	cmp	r0, #0
 80102b0:	dbed      	blt.n	801028e <__swhatbuf_r+0x12>
 80102b2:	9901      	ldr	r1, [sp, #4]
 80102b4:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80102b8:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80102bc:	4259      	negs	r1, r3
 80102be:	4159      	adcs	r1, r3
 80102c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80102c4:	e7eb      	b.n	801029e <__swhatbuf_r+0x22>

080102c6 <__smakebuf_r>:
 80102c6:	898b      	ldrh	r3, [r1, #12]
 80102c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80102ca:	079d      	lsls	r5, r3, #30
 80102cc:	4606      	mov	r6, r0
 80102ce:	460c      	mov	r4, r1
 80102d0:	d507      	bpl.n	80102e2 <__smakebuf_r+0x1c>
 80102d2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80102d6:	6023      	str	r3, [r4, #0]
 80102d8:	6123      	str	r3, [r4, #16]
 80102da:	2301      	movs	r3, #1
 80102dc:	6163      	str	r3, [r4, #20]
 80102de:	b002      	add	sp, #8
 80102e0:	bd70      	pop	{r4, r5, r6, pc}
 80102e2:	466a      	mov	r2, sp
 80102e4:	ab01      	add	r3, sp, #4
 80102e6:	f7ff ffc9 	bl	801027c <__swhatbuf_r>
 80102ea:	9900      	ldr	r1, [sp, #0]
 80102ec:	4605      	mov	r5, r0
 80102ee:	4630      	mov	r0, r6
 80102f0:	f7fa fb8c 	bl	800aa0c <_malloc_r>
 80102f4:	b948      	cbnz	r0, 801030a <__smakebuf_r+0x44>
 80102f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80102fa:	059a      	lsls	r2, r3, #22
 80102fc:	d4ef      	bmi.n	80102de <__smakebuf_r+0x18>
 80102fe:	f023 0303 	bic.w	r3, r3, #3
 8010302:	f043 0302 	orr.w	r3, r3, #2
 8010306:	81a3      	strh	r3, [r4, #12]
 8010308:	e7e3      	b.n	80102d2 <__smakebuf_r+0xc>
 801030a:	89a3      	ldrh	r3, [r4, #12]
 801030c:	6020      	str	r0, [r4, #0]
 801030e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010312:	81a3      	strh	r3, [r4, #12]
 8010314:	9b00      	ldr	r3, [sp, #0]
 8010316:	6120      	str	r0, [r4, #16]
 8010318:	6163      	str	r3, [r4, #20]
 801031a:	9b01      	ldr	r3, [sp, #4]
 801031c:	b15b      	cbz	r3, 8010336 <__smakebuf_r+0x70>
 801031e:	4630      	mov	r0, r6
 8010320:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010324:	f000 f81e 	bl	8010364 <_isatty_r>
 8010328:	b128      	cbz	r0, 8010336 <__smakebuf_r+0x70>
 801032a:	89a3      	ldrh	r3, [r4, #12]
 801032c:	f023 0303 	bic.w	r3, r3, #3
 8010330:	f043 0301 	orr.w	r3, r3, #1
 8010334:	81a3      	strh	r3, [r4, #12]
 8010336:	89a3      	ldrh	r3, [r4, #12]
 8010338:	431d      	orrs	r5, r3
 801033a:	81a5      	strh	r5, [r4, #12]
 801033c:	e7cf      	b.n	80102de <__smakebuf_r+0x18>
	...

08010340 <_fstat_r>:
 8010340:	b538      	push	{r3, r4, r5, lr}
 8010342:	2300      	movs	r3, #0
 8010344:	4d06      	ldr	r5, [pc, #24]	; (8010360 <_fstat_r+0x20>)
 8010346:	4604      	mov	r4, r0
 8010348:	4608      	mov	r0, r1
 801034a:	4611      	mov	r1, r2
 801034c:	602b      	str	r3, [r5, #0]
 801034e:	f7f2 ffec 	bl	800332a <_fstat>
 8010352:	1c43      	adds	r3, r0, #1
 8010354:	d102      	bne.n	801035c <_fstat_r+0x1c>
 8010356:	682b      	ldr	r3, [r5, #0]
 8010358:	b103      	cbz	r3, 801035c <_fstat_r+0x1c>
 801035a:	6023      	str	r3, [r4, #0]
 801035c:	bd38      	pop	{r3, r4, r5, pc}
 801035e:	bf00      	nop
 8010360:	200034c8 	.word	0x200034c8

08010364 <_isatty_r>:
 8010364:	b538      	push	{r3, r4, r5, lr}
 8010366:	2300      	movs	r3, #0
 8010368:	4d05      	ldr	r5, [pc, #20]	; (8010380 <_isatty_r+0x1c>)
 801036a:	4604      	mov	r4, r0
 801036c:	4608      	mov	r0, r1
 801036e:	602b      	str	r3, [r5, #0]
 8010370:	f7f2 ffea 	bl	8003348 <_isatty>
 8010374:	1c43      	adds	r3, r0, #1
 8010376:	d102      	bne.n	801037e <_isatty_r+0x1a>
 8010378:	682b      	ldr	r3, [r5, #0]
 801037a:	b103      	cbz	r3, 801037e <_isatty_r+0x1a>
 801037c:	6023      	str	r3, [r4, #0]
 801037e:	bd38      	pop	{r3, r4, r5, pc}
 8010380:	200034c8 	.word	0x200034c8

08010384 <_init>:
 8010384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010386:	bf00      	nop
 8010388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801038a:	bc08      	pop	{r3}
 801038c:	469e      	mov	lr, r3
 801038e:	4770      	bx	lr

08010390 <_fini>:
 8010390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010392:	bf00      	nop
 8010394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010396:	bc08      	pop	{r3}
 8010398:	469e      	mov	lr, r3
 801039a:	4770      	bx	lr
