
telemetry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009400  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08009510  08009510  00019510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009748  08009748  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08009748  08009748  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009748  08009748  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009748  08009748  00019748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800974c  0800974c  0001974c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08009750  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025f0  20000060  080097b0  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002650  080097b0  00022650  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b9e9  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000411e  00000000  00000000  0003bab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001880  00000000  00000000  0003fbd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000132f  00000000  00000000  00041458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001adb2  00000000  00000000  00042787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cf24  00000000  00000000  0005d539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000993c4  00000000  00000000  0007a45d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006b08  00000000  00000000  00113824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0011a32c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	080094f8 	.word	0x080094f8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	080094f8 	.word	0x080094f8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <__aeabi_d2f>:
 800093c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000944:	bf24      	itt	cs
 8000946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800094a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800094e:	d90d      	bls.n	800096c <__aeabi_d2f+0x30>
 8000950:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800095c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000964:	bf08      	it	eq
 8000966:	f020 0001 	biceq.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000970:	d121      	bne.n	80009b6 <__aeabi_d2f+0x7a>
 8000972:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000976:	bfbc      	itt	lt
 8000978:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800097c:	4770      	bxlt	lr
 800097e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000982:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000986:	f1c2 0218 	rsb	r2, r2, #24
 800098a:	f1c2 0c20 	rsb	ip, r2, #32
 800098e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000992:	fa20 f002 	lsr.w	r0, r0, r2
 8000996:	bf18      	it	ne
 8000998:	f040 0001 	orrne.w	r0, r0, #1
 800099c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a8:	ea40 000c 	orr.w	r0, r0, ip
 80009ac:	fa23 f302 	lsr.w	r3, r3, r2
 80009b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b4:	e7cc      	b.n	8000950 <__aeabi_d2f+0x14>
 80009b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ba:	d107      	bne.n	80009cc <__aeabi_d2f+0x90>
 80009bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009c0:	bf1e      	ittt	ne
 80009c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ca:	4770      	bxne	lr
 80009cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_frsub>:
 80009dc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009e0:	e002      	b.n	80009e8 <__addsf3>
 80009e2:	bf00      	nop

080009e4 <__aeabi_fsub>:
 80009e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009e8 <__addsf3>:
 80009e8:	0042      	lsls	r2, r0, #1
 80009ea:	bf1f      	itttt	ne
 80009ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009f0:	ea92 0f03 	teqne	r2, r3
 80009f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009fc:	d06a      	beq.n	8000ad4 <__addsf3+0xec>
 80009fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a06:	bfc1      	itttt	gt
 8000a08:	18d2      	addgt	r2, r2, r3
 8000a0a:	4041      	eorgt	r1, r0
 8000a0c:	4048      	eorgt	r0, r1
 8000a0e:	4041      	eorgt	r1, r0
 8000a10:	bfb8      	it	lt
 8000a12:	425b      	neglt	r3, r3
 8000a14:	2b19      	cmp	r3, #25
 8000a16:	bf88      	it	hi
 8000a18:	4770      	bxhi	lr
 8000a1a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a2e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4249      	negne	r1, r1
 8000a3a:	ea92 0f03 	teq	r2, r3
 8000a3e:	d03f      	beq.n	8000ac0 <__addsf3+0xd8>
 8000a40:	f1a2 0201 	sub.w	r2, r2, #1
 8000a44:	fa41 fc03 	asr.w	ip, r1, r3
 8000a48:	eb10 000c 	adds.w	r0, r0, ip
 8000a4c:	f1c3 0320 	rsb	r3, r3, #32
 8000a50:	fa01 f103 	lsl.w	r1, r1, r3
 8000a54:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a58:	d502      	bpl.n	8000a60 <__addsf3+0x78>
 8000a5a:	4249      	negs	r1, r1
 8000a5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a64:	d313      	bcc.n	8000a8e <__addsf3+0xa6>
 8000a66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a6a:	d306      	bcc.n	8000a7a <__addsf3+0x92>
 8000a6c:	0840      	lsrs	r0, r0, #1
 8000a6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a72:	f102 0201 	add.w	r2, r2, #1
 8000a76:	2afe      	cmp	r2, #254	; 0xfe
 8000a78:	d251      	bcs.n	8000b1e <__addsf3+0x136>
 8000a7a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a82:	bf08      	it	eq
 8000a84:	f020 0001 	biceq.w	r0, r0, #1
 8000a88:	ea40 0003 	orr.w	r0, r0, r3
 8000a8c:	4770      	bx	lr
 8000a8e:	0049      	lsls	r1, r1, #1
 8000a90:	eb40 0000 	adc.w	r0, r0, r0
 8000a94:	3a01      	subs	r2, #1
 8000a96:	bf28      	it	cs
 8000a98:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a9c:	d2ed      	bcs.n	8000a7a <__addsf3+0x92>
 8000a9e:	fab0 fc80 	clz	ip, r0
 8000aa2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000aa6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aaa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aae:	bfaa      	itet	ge
 8000ab0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ab4:	4252      	neglt	r2, r2
 8000ab6:	4318      	orrge	r0, r3
 8000ab8:	bfbc      	itt	lt
 8000aba:	40d0      	lsrlt	r0, r2
 8000abc:	4318      	orrlt	r0, r3
 8000abe:	4770      	bx	lr
 8000ac0:	f092 0f00 	teq	r2, #0
 8000ac4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ac8:	bf06      	itte	eq
 8000aca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ace:	3201      	addeq	r2, #1
 8000ad0:	3b01      	subne	r3, #1
 8000ad2:	e7b5      	b.n	8000a40 <__addsf3+0x58>
 8000ad4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ad8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000adc:	bf18      	it	ne
 8000ade:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae2:	d021      	beq.n	8000b28 <__addsf3+0x140>
 8000ae4:	ea92 0f03 	teq	r2, r3
 8000ae8:	d004      	beq.n	8000af4 <__addsf3+0x10c>
 8000aea:	f092 0f00 	teq	r2, #0
 8000aee:	bf08      	it	eq
 8000af0:	4608      	moveq	r0, r1
 8000af2:	4770      	bx	lr
 8000af4:	ea90 0f01 	teq	r0, r1
 8000af8:	bf1c      	itt	ne
 8000afa:	2000      	movne	r0, #0
 8000afc:	4770      	bxne	lr
 8000afe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b02:	d104      	bne.n	8000b0e <__addsf3+0x126>
 8000b04:	0040      	lsls	r0, r0, #1
 8000b06:	bf28      	it	cs
 8000b08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b0c:	4770      	bx	lr
 8000b0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b12:	bf3c      	itt	cc
 8000b14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b18:	4770      	bxcc	lr
 8000b1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b26:	4770      	bx	lr
 8000b28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b2c:	bf16      	itet	ne
 8000b2e:	4608      	movne	r0, r1
 8000b30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b34:	4601      	movne	r1, r0
 8000b36:	0242      	lsls	r2, r0, #9
 8000b38:	bf06      	itte	eq
 8000b3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b3e:	ea90 0f01 	teqeq	r0, r1
 8000b42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_ui2f>:
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	e004      	b.n	8000b58 <__aeabi_i2f+0x8>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_i2f>:
 8000b50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b54:	bf48      	it	mi
 8000b56:	4240      	negmi	r0, r0
 8000b58:	ea5f 0c00 	movs.w	ip, r0
 8000b5c:	bf08      	it	eq
 8000b5e:	4770      	bxeq	lr
 8000b60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b64:	4601      	mov	r1, r0
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	e01c      	b.n	8000ba6 <__aeabi_l2f+0x2a>

08000b6c <__aeabi_ul2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	e00a      	b.n	8000b90 <__aeabi_l2f+0x14>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_l2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b88:	d502      	bpl.n	8000b90 <__aeabi_l2f+0x14>
 8000b8a:	4240      	negs	r0, r0
 8000b8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b90:	ea5f 0c01 	movs.w	ip, r1
 8000b94:	bf02      	ittt	eq
 8000b96:	4684      	moveq	ip, r0
 8000b98:	4601      	moveq	r1, r0
 8000b9a:	2000      	moveq	r0, #0
 8000b9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000baa:	fabc f28c 	clz	r2, ip
 8000bae:	3a08      	subs	r2, #8
 8000bb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bb4:	db10      	blt.n	8000bd8 <__aeabi_l2f+0x5c>
 8000bb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bba:	4463      	add	r3, ip
 8000bbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bc0:	f1c2 0220 	rsb	r2, r2, #32
 8000bc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bcc:	eb43 0002 	adc.w	r0, r3, r2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f102 0220 	add.w	r2, r2, #32
 8000bdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000be0:	f1c2 0220 	rsb	r2, r2, #32
 8000be4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000be8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bec:	eb43 0002 	adc.w	r0, r3, r2
 8000bf0:	bf08      	it	eq
 8000bf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bf6:	4770      	bx	lr

08000bf8 <CanFilterSetup>:
 * @brief Initialize CAN node for sending and receiving
 * @param: CAN filter structure
 * @retval: nothing
 */
void CanFilterSetup(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	// Use mask and list mode to filter IDs from the CAN ID BOM

	// Filter for 0x500 and 0x600 IDs
    CAN_filter0.FilterIdHigh = (uint16_t) (0x501 << 5);
 8000bfc:	4b23      	ldr	r3, [pc, #140]	; (8000c8c <CanFilterSetup+0x94>)
 8000bfe:	f24a 0220 	movw	r2, #40992	; 0xa020
 8000c02:	601a      	str	r2, [r3, #0]
    CAN_filter0.FilterMaskIdHigh = (uint16_t) (0x7F5 << 5);
 8000c04:	4b21      	ldr	r3, [pc, #132]	; (8000c8c <CanFilterSetup+0x94>)
 8000c06:	f64f 62a0 	movw	r2, #65184	; 0xfea0
 8000c0a:	609a      	str	r2, [r3, #8]

    CAN_filter0.FilterIdLow = (uint16_t) (0x620 << 5);
 8000c0c:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <CanFilterSetup+0x94>)
 8000c0e:	f44f 4244 	mov.w	r2, #50176	; 0xc400
 8000c12:	605a      	str	r2, [r3, #4]
    CAN_filter0.FilterMaskIdLow = (uint16_t) (0x7F8 << 5);
 8000c14:	4b1d      	ldr	r3, [pc, #116]	; (8000c8c <CanFilterSetup+0x94>)
 8000c16:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8000c1a:	60da      	str	r2, [r3, #12]

    CAN_filter0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000c1c:	4b1b      	ldr	r3, [pc, #108]	; (8000c8c <CanFilterSetup+0x94>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	611a      	str	r2, [r3, #16]
    CAN_filter0.FilterBank = (uint32_t) 0;
 8000c22:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <CanFilterSetup+0x94>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	615a      	str	r2, [r3, #20]
    CAN_filter0.FilterMode = CAN_FILTERMODE_IDMASK;
 8000c28:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <CanFilterSetup+0x94>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	619a      	str	r2, [r3, #24]
    CAN_filter0.FilterScale = CAN_FILTERSCALE_16BIT;
 8000c2e:	4b17      	ldr	r3, [pc, #92]	; (8000c8c <CanFilterSetup+0x94>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	61da      	str	r2, [r3, #28]
    CAN_filter0.FilterActivation = CAN_FILTER_ENABLE;
 8000c34:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <CanFilterSetup+0x94>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	621a      	str	r2, [r3, #32]

    // Remaining IDs filtered with list mode
    CAN_filter1.FilterIdHigh = (uint16_t) (0x502 << 5);
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <CanFilterSetup+0x98>)
 8000c3c:	f24a 0240 	movw	r2, #41024	; 0xa040
 8000c40:	601a      	str	r2, [r3, #0]
    CAN_filter1.FilterMaskIdHigh = (uint16_t) (0x401 << 5);
 8000c42:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <CanFilterSetup+0x98>)
 8000c44:	f248 0220 	movw	r2, #32800	; 0x8020
 8000c48:	609a      	str	r2, [r3, #8]

    CAN_filter1.FilterIdLow = (uint16_t) (0x401 << 5);
 8000c4a:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <CanFilterSetup+0x98>)
 8000c4c:	f248 0220 	movw	r2, #32800	; 0x8020
 8000c50:	605a      	str	r2, [r3, #4]
    CAN_filter1.FilterMaskIdLow = (uint16_t) (0x401 << 5);
 8000c52:	4b0f      	ldr	r3, [pc, #60]	; (8000c90 <CanFilterSetup+0x98>)
 8000c54:	f248 0220 	movw	r2, #32800	; 0x8020
 8000c58:	60da      	str	r2, [r3, #12]

    CAN_filter1.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000c5a:	4b0d      	ldr	r3, [pc, #52]	; (8000c90 <CanFilterSetup+0x98>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
    CAN_filter1.FilterBank = (uint32_t) 1;
 8000c60:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <CanFilterSetup+0x98>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	615a      	str	r2, [r3, #20]
    CAN_filter1.FilterMode = CAN_FILTERMODE_IDLIST;
 8000c66:	4b0a      	ldr	r3, [pc, #40]	; (8000c90 <CanFilterSetup+0x98>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	619a      	str	r2, [r3, #24]
    CAN_filter1.FilterScale = CAN_FILTERSCALE_16BIT;
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <CanFilterSetup+0x98>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	61da      	str	r2, [r3, #28]
    CAN_filter1.FilterActivation = CAN_FILTER_ENABLE;
 8000c72:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <CanFilterSetup+0x98>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	621a      	str	r2, [r3, #32]

	// Configure reception filters
    HAL_CAN_ConfigFilter(&hcan, &CAN_filter0);
 8000c78:	4904      	ldr	r1, [pc, #16]	; (8000c8c <CanFilterSetup+0x94>)
 8000c7a:	4806      	ldr	r0, [pc, #24]	; (8000c94 <CanFilterSetup+0x9c>)
 8000c7c:	f001 f935 	bl	8001eea <HAL_CAN_ConfigFilter>
    HAL_CAN_ConfigFilter(&hcan, &CAN_filter1);
 8000c80:	4903      	ldr	r1, [pc, #12]	; (8000c90 <CanFilterSetup+0x98>)
 8000c82:	4804      	ldr	r0, [pc, #16]	; (8000c94 <CanFilterSetup+0x9c>)
 8000c84:	f001 f931 	bl	8001eea <HAL_CAN_ConfigFilter>

}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000168 	.word	0x20000168
 8000c90:	20000190 	.word	0x20000190
 8000c94:	20000080 	.word	0x20000080

08000c98 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000c9c:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <MX_CAN_Init+0x64>)
 8000c9e:	4a18      	ldr	r2, [pc, #96]	; (8000d00 <MX_CAN_Init+0x68>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000ca2:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <MX_CAN_Init+0x64>)
 8000ca4:	2204      	movs	r2, #4
 8000ca6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000ca8:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <MX_CAN_Init+0x64>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000cae:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <MX_CAN_Init+0x64>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <MX_CAN_Init+0x64>)
 8000cb6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000cba:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <MX_CAN_Init+0x64>)
 8000cbe:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000cc2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000cc4:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <MX_CAN_Init+0x64>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <MX_CAN_Init+0x64>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <MX_CAN_Init+0x64>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <MX_CAN_Init+0x64>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000cdc:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <MX_CAN_Init+0x64>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <MX_CAN_Init+0x64>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000ce8:	4804      	ldr	r0, [pc, #16]	; (8000cfc <MX_CAN_Init+0x64>)
 8000cea:	f001 f803 	bl	8001cf4 <HAL_CAN_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000cf4:	f000 fdae 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000080 	.word	0x20000080
 8000d00:	40006400 	.word	0x40006400

08000d04 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08a      	sub	sp, #40	; 0x28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a29      	ldr	r2, [pc, #164]	; (8000dc4 <HAL_CAN_MspInit+0xc0>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d14b      	bne.n	8000dbc <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d24:	4b28      	ldr	r3, [pc, #160]	; (8000dc8 <HAL_CAN_MspInit+0xc4>)
 8000d26:	69db      	ldr	r3, [r3, #28]
 8000d28:	4a27      	ldr	r2, [pc, #156]	; (8000dc8 <HAL_CAN_MspInit+0xc4>)
 8000d2a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d2e:	61d3      	str	r3, [r2, #28]
 8000d30:	4b25      	ldr	r3, [pc, #148]	; (8000dc8 <HAL_CAN_MspInit+0xc4>)
 8000d32:	69db      	ldr	r3, [r3, #28]
 8000d34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3c:	4b22      	ldr	r3, [pc, #136]	; (8000dc8 <HAL_CAN_MspInit+0xc4>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	4a21      	ldr	r2, [pc, #132]	; (8000dc8 <HAL_CAN_MspInit+0xc4>)
 8000d42:	f043 0308 	orr.w	r3, r3, #8
 8000d46:	6193      	str	r3, [r2, #24]
 8000d48:	4b1f      	ldr	r3, [pc, #124]	; (8000dc8 <HAL_CAN_MspInit+0xc4>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	f003 0308 	and.w	r3, r3, #8
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	4619      	mov	r1, r3
 8000d68:	4818      	ldr	r0, [pc, #96]	; (8000dcc <HAL_CAN_MspInit+0xc8>)
 8000d6a:	f002 f9c9 	bl	8003100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	4619      	mov	r1, r3
 8000d82:	4812      	ldr	r0, [pc, #72]	; (8000dcc <HAL_CAN_MspInit+0xc8>)
 8000d84:	f002 f9bc 	bl	8003100 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <HAL_CAN_MspInit+0xcc>)
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d90:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
 8000d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d98:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
 8000da6:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <HAL_CAN_MspInit+0xcc>)
 8000da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000daa:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 5, 0);
 8000dac:	2200      	movs	r2, #0
 8000dae:	2105      	movs	r1, #5
 8000db0:	2014      	movs	r0, #20
 8000db2:	f001 fedc 	bl	8002b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000db6:	2014      	movs	r0, #20
 8000db8:	f001 fef5 	bl	8002ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000dbc:	bf00      	nop
 8000dbe:	3728      	adds	r7, #40	; 0x28
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40006400 	.word	0x40006400
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	40010c00 	.word	0x40010c00
 8000dd0:	40010000 	.word	0x40010000

08000dd4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  }
}

/* USER CODE BEGIN 1 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_CAN_DeactivateNotification(hcan,
 8000ddc:	2102      	movs	r1, #2
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f001 fbc7 	bl	8002572 <HAL_CAN_DeactivateNotification>
 8000de4:	4603      	mov	r3, r0
 8000de6:	73fb      	strb	r3, [r7, #15]
    CAN_IT_RX_FIFO0_MSG_PENDING);
    assert_param(status == HAL_OK);

    // osThreadFlagsClear(canReadMessagesTaskHandle);
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000de8:	2120      	movs	r1, #32
 8000dea:	4806      	ldr	r0, [pc, #24]	; (8000e04 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000dec:	f002 fb24 	bl	8003438 <HAL_GPIO_TogglePin>
    osThreadFlagsSet(readCANTaskHandle, CAN_READY);
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2101      	movs	r1, #1
 8000df6:	4618      	mov	r0, r3
 8000df8:	f005 f940 	bl	800607c <osThreadFlagsSet>
}
 8000dfc:	bf00      	nop
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40010800 	.word	0x40010800
 8000e08:	200000b0 	.word	0x200000b0

08000e0c <Can_Init>:

/*
 * CAN set-up: Sets up the filters, Starts CAN with HAL, and Activates notifications for interrupts.
 */
void Can_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
  CanFilterSetup();
 8000e12:	f7ff fef1 	bl	8000bf8 <CanFilterSetup>
  can_start = HAL_CAN_Start(&hcan);
 8000e16:	4808      	ldr	r0, [pc, #32]	; (8000e38 <Can_Init+0x2c>)
 8000e18:	f001 f930 	bl	800207c <HAL_CAN_Start>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	461a      	mov	r2, r3
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <Can_Init+0x30>)
 8000e22:	701a      	strb	r2, [r3, #0]
  assert_param(can_start == HAL_OK);

  HAL_StatusTypeDef can_notification_status = HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000e24:	2102      	movs	r1, #2
 8000e26:	4804      	ldr	r0, [pc, #16]	; (8000e38 <Can_Init+0x2c>)
 8000e28:	f001 fb7e 	bl	8002528 <HAL_CAN_ActivateNotification>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	71fb      	strb	r3, [r7, #7]
  assert_param(can_notification_status == HAL_OK);
}
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000080 	.word	0x20000080
 8000e3c:	2000007c 	.word	0x2000007c

08000e40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <MX_DMA_Init+0x38>)
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	4a0b      	ldr	r2, [pc, #44]	; (8000e78 <MX_DMA_Init+0x38>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6153      	str	r3, [r2, #20]
 8000e52:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <MX_DMA_Init+0x38>)
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	607b      	str	r3, [r7, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2105      	movs	r1, #5
 8000e62:	200f      	movs	r0, #15
 8000e64:	f001 fe83 	bl	8002b6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000e68:	200f      	movs	r0, #15
 8000e6a:	f001 fe9c 	bl	8002ba6 <HAL_NVIC_EnableIRQ>

}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	00000000 	.word	0x00000000

08000e80 <gyro>:
#define DEVICE_ADDRESS ((0x6A)<<1)

#define UART_TIMEOUT 1000

float gyro(enum GyroType type)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b088      	sub	sp, #32
 8000e84:	af04      	add	r7, sp, #16
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]

    int16_t gyro;
    uint8_t OUT_H_G, OUT_L_G;

    // goes sequential
    uint16_t addL = 0x22 + (type * 2);
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	3311      	adds	r3, #17
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	81fb      	strh	r3, [r7, #14]
    uint16_t addH = 0x23 + (type * 2);
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	3323      	adds	r3, #35	; 0x23
 8000e9e:	81bb      	strh	r3, [r7, #12]

    HAL_I2C_Mem_Read(&hi2c1, DEVICE_ADDRESS, addL, 1, &OUT_L_G, 1, 100);
 8000ea0:	89fa      	ldrh	r2, [r7, #14]
 8000ea2:	2364      	movs	r3, #100	; 0x64
 8000ea4:	9302      	str	r3, [sp, #8]
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	9301      	str	r3, [sp, #4]
 8000eaa:	f107 0308 	add.w	r3, r7, #8
 8000eae:	9300      	str	r3, [sp, #0]
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	21d4      	movs	r1, #212	; 0xd4
 8000eb4:	4824      	ldr	r0, [pc, #144]	; (8000f48 <gyro+0xc8>)
 8000eb6:	f002 fd17 	bl	80038e8 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c1, DEVICE_ADDRESS, addH, 1, &OUT_H_G, 1, 100);
 8000eba:	89ba      	ldrh	r2, [r7, #12]
 8000ebc:	2364      	movs	r3, #100	; 0x64
 8000ebe:	9302      	str	r3, [sp, #8]
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	9301      	str	r3, [sp, #4]
 8000ec4:	f107 0309 	add.w	r3, r7, #9
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	2301      	movs	r3, #1
 8000ecc:	21d4      	movs	r1, #212	; 0xd4
 8000ece:	481e      	ldr	r0, [pc, #120]	; (8000f48 <gyro+0xc8>)
 8000ed0:	f002 fd0a 	bl	80038e8 <HAL_I2C_Mem_Read>

    // The value is expressed as a 16-bit word in two’s complement.
    gyro = (OUT_H_G << 8) | (OUT_L_G);
 8000ed4:	7a7b      	ldrb	r3, [r7, #9]
 8000ed6:	021b      	lsls	r3, r3, #8
 8000ed8:	b21a      	sxth	r2, r3
 8000eda:	7a3b      	ldrb	r3, [r7, #8]
 8000edc:	b21b      	sxth	r3, r3
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	817b      	strh	r3, [r7, #10]

    gyro = (float) gyro / 8.75; // datasheet pg10
 8000ee2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff fe32 	bl	8000b50 <__aeabi_i2f>
 8000eec:	4603      	mov	r3, r0
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff fa92 	bl	8000418 <__aeabi_f2d>
 8000ef4:	f04f 0200 	mov.w	r2, #0
 8000ef8:	4b14      	ldr	r3, [pc, #80]	; (8000f4c <gyro+0xcc>)
 8000efa:	f7ff fc0f 	bl	800071c <__aeabi_ddiv>
 8000efe:	4602      	mov	r2, r0
 8000f00:	460b      	mov	r3, r1
 8000f02:	4610      	mov	r0, r2
 8000f04:	4619      	mov	r1, r3
 8000f06:	f7ff fcf1 	bl	80008ec <__aeabi_d2iz>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	817b      	strh	r3, [r7, #10]

    return (float) gyro * 0.02;
 8000f0e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fe1c 	bl	8000b50 <__aeabi_i2f>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff fa7c 	bl	8000418 <__aeabi_f2d>
 8000f20:	a307      	add	r3, pc, #28	; (adr r3, 8000f40 <gyro+0xc0>)
 8000f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f26:	f7ff facf 	bl	80004c8 <__aeabi_dmul>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	4610      	mov	r0, r2
 8000f30:	4619      	mov	r1, r3
 8000f32:	f7ff fd03 	bl	800093c <__aeabi_d2f>
 8000f36:	4603      	mov	r3, r0
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	47ae147b 	.word	0x47ae147b
 8000f44:	3f947ae1 	.word	0x3f947ae1
 8000f48:	20000114 	.word	0x20000114
 8000f4c:	40218000 	.word	0x40218000

08000f50 <accel>:

float accel(enum AccelType type)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b088      	sub	sp, #32
 8000f54:	af04      	add	r7, sp, #16
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]

    int16_t accel;
    uint8_t OUT_H_A, OUT_L_A;

    // goes sequential
    uint16_t addL = 0x28 + (type * 2);
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	3314      	adds	r3, #20
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	81fb      	strh	r3, [r7, #14]
    uint16_t addH = 0x29 + (type * 2);
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	3329      	adds	r3, #41	; 0x29
 8000f6e:	81bb      	strh	r3, [r7, #12]

    HAL_I2C_Mem_Read(&hi2c1, DEVICE_ADDRESS, addL, 1, &OUT_L_A, 1, 100);
 8000f70:	89fa      	ldrh	r2, [r7, #14]
 8000f72:	2364      	movs	r3, #100	; 0x64
 8000f74:	9302      	str	r3, [sp, #8]
 8000f76:	2301      	movs	r3, #1
 8000f78:	9301      	str	r3, [sp, #4]
 8000f7a:	f107 0308 	add.w	r3, r7, #8
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	2301      	movs	r3, #1
 8000f82:	21d4      	movs	r1, #212	; 0xd4
 8000f84:	481e      	ldr	r0, [pc, #120]	; (8001000 <accel+0xb0>)
 8000f86:	f002 fcaf 	bl	80038e8 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c1, DEVICE_ADDRESS, addH, 1, &OUT_H_A, 1, 100);
 8000f8a:	89ba      	ldrh	r2, [r7, #12]
 8000f8c:	2364      	movs	r3, #100	; 0x64
 8000f8e:	9302      	str	r3, [sp, #8]
 8000f90:	2301      	movs	r3, #1
 8000f92:	9301      	str	r3, [sp, #4]
 8000f94:	f107 0309 	add.w	r3, r7, #9
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	21d4      	movs	r1, #212	; 0xd4
 8000f9e:	4818      	ldr	r0, [pc, #96]	; (8001000 <accel+0xb0>)
 8000fa0:	f002 fca2 	bl	80038e8 <HAL_I2C_Mem_Read>

    // The value is expressed as a 16-bit word in two’s complement.
    accel = (OUT_H_A << 8) | (OUT_L_A);
 8000fa4:	7a7b      	ldrb	r3, [r7, #9]
 8000fa6:	021b      	lsls	r3, r3, #8
 8000fa8:	b21a      	sxth	r2, r3
 8000faa:	7a3b      	ldrb	r3, [r7, #8]
 8000fac:	b21b      	sxth	r3, r3
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	817b      	strh	r3, [r7, #10]

    accel = (float) accel * 0.061; // datasheet pg10
 8000fb2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fdca 	bl	8000b50 <__aeabi_i2f>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fa2a 	bl	8000418 <__aeabi_f2d>
 8000fc4:	a30c      	add	r3, pc, #48	; (adr r3, 8000ff8 <accel+0xa8>)
 8000fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fca:	f7ff fa7d 	bl	80004c8 <__aeabi_dmul>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	4610      	mov	r0, r2
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f7ff fc89 	bl	80008ec <__aeabi_d2iz>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	817b      	strh	r3, [r7, #10]

    return (float) accel;
 8000fde:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff fdb4 	bl	8000b50 <__aeabi_i2f>
 8000fe8:	4603      	mov	r3, r0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	f3af 8000 	nop.w
 8000ff8:	5a1cac08 	.word	0x5a1cac08
 8000ffc:	3faf3b64 	.word	0x3faf3b64
 8001000:	20000114 	.word	0x20000114

08001004 <initIMU>:

/*
    Set up for gyro/accel modes
*/
void initIMU(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af04      	add	r7, sp, #16
    uint8_t data;

    data = 0x80; // 0b10000000
 800100a:	2380      	movs	r3, #128	; 0x80
 800100c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, DEVICE_ADDRESS, 0x10, 1, &data, 1, 100);
 800100e:	2364      	movs	r3, #100	; 0x64
 8001010:	9302      	str	r3, [sp, #8]
 8001012:	2301      	movs	r3, #1
 8001014:	9301      	str	r3, [sp, #4]
 8001016:	1dfb      	adds	r3, r7, #7
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2301      	movs	r3, #1
 800101c:	2210      	movs	r2, #16
 800101e:	21d4      	movs	r1, #212	; 0xd4
 8001020:	4811      	ldr	r0, [pc, #68]	; (8001068 <initIMU+0x64>)
 8001022:	f002 fb67 	bl	80036f4 <HAL_I2C_Mem_Write>

    data = 0x80; // 0b10000000
 8001026:	2380      	movs	r3, #128	; 0x80
 8001028:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, DEVICE_ADDRESS, 0x11, 1, &data, 1, 100);
 800102a:	2364      	movs	r3, #100	; 0x64
 800102c:	9302      	str	r3, [sp, #8]
 800102e:	2301      	movs	r3, #1
 8001030:	9301      	str	r3, [sp, #4]
 8001032:	1dfb      	adds	r3, r7, #7
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	2301      	movs	r3, #1
 8001038:	2211      	movs	r2, #17
 800103a:	21d4      	movs	r1, #212	; 0xd4
 800103c:	480a      	ldr	r0, [pc, #40]	; (8001068 <initIMU+0x64>)
 800103e:	f002 fb59 	bl	80036f4 <HAL_I2C_Mem_Write>

    data = 0x04; // 0b00000100
 8001042:	2304      	movs	r3, #4
 8001044:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&hi2c1, DEVICE_ADDRESS, 0x12, 1, &data, 1, 100);
 8001046:	2364      	movs	r3, #100	; 0x64
 8001048:	9302      	str	r3, [sp, #8]
 800104a:	2301      	movs	r3, #1
 800104c:	9301      	str	r3, [sp, #4]
 800104e:	1dfb      	adds	r3, r7, #7
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	2301      	movs	r3, #1
 8001054:	2212      	movs	r2, #18
 8001056:	21d4      	movs	r1, #212	; 0xd4
 8001058:	4803      	ldr	r0, [pc, #12]	; (8001068 <initIMU+0x64>)
 800105a:	f002 fb4b 	bl	80036f4 <HAL_I2C_Mem_Write>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000114 	.word	0x20000114

0800106c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  // Initialize IMU
  initIMU();
 8001070:	f7ff ffc8 	bl	8001004 <initIMU>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */

  canMessageQueueHandle = osMessageQueueNew(CAN_MESSAGE_QUEUE_SIZE, sizeof(CAN_msg_t), &canMessageQueue_attributes);
 8001074:	4a20      	ldr	r2, [pc, #128]	; (80010f8 <MX_FREERTOS_Init+0x8c>)
 8001076:	2124      	movs	r1, #36	; 0x24
 8001078:	200a      	movs	r0, #10
 800107a:	f005 f921 	bl	80062c0 <osMessageQueueNew>
 800107e:	4603      	mov	r3, r0
 8001080:	4a1e      	ldr	r2, [pc, #120]	; (80010fc <MX_FREERTOS_Init+0x90>)
 8001082:	6013      	str	r3, [r2, #0]
  imuMessageQueueHandle = osMessageQueueNew(IMU_QUEUE_SIZE, sizeof(IMU_msg_t), &imuMessageQueue_attributes);
 8001084:	4a1e      	ldr	r2, [pc, #120]	; (8001100 <MX_FREERTOS_Init+0x94>)
 8001086:	2106      	movs	r1, #6
 8001088:	200a      	movs	r0, #10
 800108a:	f005 f919 	bl	80062c0 <osMessageQueueNew>
 800108e:	4603      	mov	r3, r0
 8001090:	4a1c      	ldr	r2, [pc, #112]	; (8001104 <MX_FREERTOS_Init+0x98>)
 8001092:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001094:	4a1c      	ldr	r2, [pc, #112]	; (8001108 <MX_FREERTOS_Init+0x9c>)
 8001096:	2100      	movs	r1, #0
 8001098:	481c      	ldr	r0, [pc, #112]	; (800110c <MX_FREERTOS_Init+0xa0>)
 800109a:	f004 ff13 	bl	8005ec4 <osThreadNew>
 800109e:	4603      	mov	r3, r0
 80010a0:	4a1b      	ldr	r2, [pc, #108]	; (8001110 <MX_FREERTOS_Init+0xa4>)
 80010a2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  // kernelLEDTaskHandle = osThreadNew(kernelLEDTask, NULL, &kernelLEDTask_attributes);
  
  readCANTaskHandle = osThreadNew(readCANTask, NULL, &readCANTask_attributes);
 80010a4:	4a1b      	ldr	r2, [pc, #108]	; (8001114 <MX_FREERTOS_Init+0xa8>)
 80010a6:	2100      	movs	r1, #0
 80010a8:	481b      	ldr	r0, [pc, #108]	; (8001118 <MX_FREERTOS_Init+0xac>)
 80010aa:	f004 ff0b 	bl	8005ec4 <osThreadNew>
 80010ae:	4603      	mov	r3, r0
 80010b0:	4a1a      	ldr	r2, [pc, #104]	; (800111c <MX_FREERTOS_Init+0xb0>)
 80010b2:	6013      	str	r3, [r2, #0]
  transmitSimSpeedTaskHandle = osThreadNew(transmitSimSpeedTask, NULL, &transmitSimSpeedTask_attributes);
 80010b4:	4a1a      	ldr	r2, [pc, #104]	; (8001120 <MX_FREERTOS_Init+0xb4>)
 80010b6:	2100      	movs	r1, #0
 80010b8:	481a      	ldr	r0, [pc, #104]	; (8001124 <MX_FREERTOS_Init+0xb8>)
 80010ba:	f004 ff03 	bl	8005ec4 <osThreadNew>
 80010be:	4603      	mov	r3, r0
 80010c0:	4a19      	ldr	r2, [pc, #100]	; (8001128 <MX_FREERTOS_Init+0xbc>)
 80010c2:	6013      	str	r3, [r2, #0]
  transmitMessageTaskHandle = osThreadNew(transmitMessageTask, NULL, &transmitMessageTask_attributes);
 80010c4:	4a19      	ldr	r2, [pc, #100]	; (800112c <MX_FREERTOS_Init+0xc0>)
 80010c6:	2100      	movs	r1, #0
 80010c8:	4819      	ldr	r0, [pc, #100]	; (8001130 <MX_FREERTOS_Init+0xc4>)
 80010ca:	f004 fefb 	bl	8005ec4 <osThreadNew>
 80010ce:	4603      	mov	r3, r0
 80010d0:	4a18      	ldr	r2, [pc, #96]	; (8001134 <MX_FREERTOS_Init+0xc8>)
 80010d2:	6013      	str	r3, [r2, #0]

  readimuHandle = osThreadNew(readIMUTask, NULL, &readimu_attributes);
 80010d4:	4a18      	ldr	r2, [pc, #96]	; (8001138 <MX_FREERTOS_Init+0xcc>)
 80010d6:	2100      	movs	r1, #0
 80010d8:	4818      	ldr	r0, [pc, #96]	; (800113c <MX_FREERTOS_Init+0xd0>)
 80010da:	f004 fef3 	bl	8005ec4 <osThreadNew>
 80010de:	4603      	mov	r3, r0
 80010e0:	4a17      	ldr	r2, [pc, #92]	; (8001140 <MX_FREERTOS_Init+0xd4>)
 80010e2:	6013      	str	r3, [r2, #0]
  transmitIMUHandle = osThreadNew(transmitIMUTask, NULL, &transmitIMU_attributes);
 80010e4:	4a17      	ldr	r2, [pc, #92]	; (8001144 <MX_FREERTOS_Init+0xd8>)
 80010e6:	2100      	movs	r1, #0
 80010e8:	4817      	ldr	r0, [pc, #92]	; (8001148 <MX_FREERTOS_Init+0xdc>)
 80010ea:	f004 feeb 	bl	8005ec4 <osThreadNew>
 80010ee:	4603      	mov	r3, r0
 80010f0:	4a16      	ldr	r2, [pc, #88]	; (800114c <MX_FREERTOS_Init+0xe0>)
 80010f2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	08009694 	.word	0x08009694
 80010fc:	200000bc 	.word	0x200000bc
 8001100:	080096ac 	.word	0x080096ac
 8001104:	200000c0 	.word	0x200000c0
 8001108:	0800970c 	.word	0x0800970c
 800110c:	08001151 	.word	0x08001151
 8001110:	200000c4 	.word	0x200000c4
 8001114:	08009628 	.word	0x08009628
 8001118:	08001209 	.word	0x08001209
 800111c:	200000b0 	.word	0x200000b0
 8001120:	0800964c 	.word	0x0800964c
 8001124:	08001189 	.word	0x08001189
 8001128:	200000b8 	.word	0x200000b8
 800112c:	08009670 	.word	0x08009670
 8001130:	080012b5 	.word	0x080012b5
 8001134:	200000b4 	.word	0x200000b4
 8001138:	080096c4 	.word	0x080096c4
 800113c:	080013c1 	.word	0x080013c1
 8001140:	200000a8 	.word	0x200000a8
 8001144:	080096e8 	.word	0x080096e8
 8001148:	080014b9 	.word	0x080014b9
 800114c:	200000ac 	.word	0x200000ac

08001150 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001158:	2001      	movs	r0, #1
 800115a:	f005 f883 	bl	8006264 <osDelay>
 800115e:	e7fb      	b.n	8001158 <StartDefaultTask+0x8>

08001160 <HAL_UART_RxCpltCallback>:
/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

//interrupt when data transfer from radio is complete
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af02      	add	r7, sp, #8
 8001166:	6078      	str	r0, [r7, #4]
	//set flag for transmitSimSpeed task
  xTaskNotifyFromISR(transmitSimSpeedTaskHandle,USART_RX_BIT, eSetBits, NULL);
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <HAL_UART_RxCpltCallback+0x24>)
 800116a:	6818      	ldr	r0, [r3, #0]
 800116c:	2300      	movs	r3, #0
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	2300      	movs	r3, #0
 8001172:	2201      	movs	r2, #1
 8001174:	2101      	movs	r1, #1
 8001176:	f007 f8db 	bl	8008330 <xTaskGenericNotifyFromISR>

}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	200000b8 	.word	0x200000b8

08001188 <transmitSimSpeedTask>:
  }
}


//sends simulation speed over can
__NO_RETURN void transmitSimSpeedTask (void *argument){
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]

	uint32_t ulInterruptStatus;
	uint8_t canTxData[3];

	//set can header
	can_tx_header.DLC = 3;
 8001190:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <transmitSimSpeedTask+0x74>)
 8001192:	2203      	movs	r2, #3
 8001194:	611a      	str	r2, [r3, #16]
	can_tx_header.IDE = CAN_ID_STD;
 8001196:	4b19      	ldr	r3, [pc, #100]	; (80011fc <transmitSimSpeedTask+0x74>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
	can_tx_header.RTR = CAN_RTR_DATA;
 800119c:	4b17      	ldr	r3, [pc, #92]	; (80011fc <transmitSimSpeedTask+0x74>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
	can_tx_header.StdId = SIM_SPEED_ID;
 80011a2:	4b16      	ldr	r3, [pc, #88]	; (80011fc <transmitSimSpeedTask+0x74>)
 80011a4:	f44f 62ea 	mov.w	r2, #1872	; 0x750
 80011a8:	601a      	str	r2, [r3, #0]

	while(1){
		//task waits for interrupt before running
		xTaskNotifyWait (0x00, USART_RX_BIT, &ulInterruptStatus, portMAX_DELAY);
 80011aa:	f107 0210 	add.w	r2, r7, #16
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295
 80011b2:	2101      	movs	r1, #1
 80011b4:	2000      	movs	r0, #0
 80011b6:	f006 ffb1 	bl	800811c <xTaskNotifyWait>

		//check if flag is set
		if ((USART_RX_BIT & ulInterruptStatus) != 0){
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0f2      	beq.n	80011aa <transmitSimSpeedTask+0x22>

			for(int i = 0; i < 3; i++){
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
 80011c8:	e00c      	b.n	80011e4 <transmitSimSpeedTask+0x5c>

				//add values from rx buffer to Can data array
				canTxData[i] = uart_rx_buffer[i];
 80011ca:	4a0d      	ldr	r2, [pc, #52]	; (8001200 <transmitSimSpeedTask+0x78>)
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	4413      	add	r3, r2
 80011d0:	7819      	ldrb	r1, [r3, #0]
 80011d2:	f107 020c 	add.w	r2, r7, #12
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	4413      	add	r3, r2
 80011da:	460a      	mov	r2, r1
 80011dc:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 3; i++){
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	3301      	adds	r3, #1
 80011e2:	617b      	str	r3, [r7, #20]
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	ddef      	ble.n	80011ca <transmitSimSpeedTask+0x42>

			}

			HAL_CAN_AddTxMessage(&hcan, &can_tx_header, canTxData, NULL);
 80011ea:	f107 020c 	add.w	r2, r7, #12
 80011ee:	2300      	movs	r3, #0
 80011f0:	4902      	ldr	r1, [pc, #8]	; (80011fc <transmitSimSpeedTask+0x74>)
 80011f2:	4804      	ldr	r0, [pc, #16]	; (8001204 <transmitSimSpeedTask+0x7c>)
 80011f4:	f000 ff86 	bl	8002104 <HAL_CAN_AddTxMessage>
		xTaskNotifyWait (0x00, USART_RX_BIT, &ulInterruptStatus, portMAX_DELAY);
 80011f8:	e7d7      	b.n	80011aa <transmitSimSpeedTask+0x22>
 80011fa:	bf00      	nop
 80011fc:	200001d4 	.word	0x200001d4
 8001200:	200001f4 	.word	0x200001f4
 8001204:	20000080 	.word	0x20000080

08001208 <readCANTask>:
}




__NO_RETURN void readCANTask(void *argument) {
 8001208:	b5b0      	push	{r4, r5, r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  static HAL_StatusTypeDef rx_status;
  static CAN_msg_t current_can_message;

  while (1) {
    // wait for thread flags to be set in the CAN Rx FIFO0 Interrupt Callback
    osThreadFlagsWait(CAN_READY, osFlagsWaitAll, osWaitForever);
 8001210:	f04f 32ff 	mov.w	r2, #4294967295
 8001214:	2101      	movs	r1, #1
 8001216:	2001      	movs	r0, #1
 8001218:	f004 ff90 	bl	800613c <osThreadFlagsWait>

    if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) != 0) {
 800121c:	2100      	movs	r1, #0
 800121e:	481e      	ldr	r0, [pc, #120]	; (8001298 <readCANTask+0x90>)
 8001220:	f001 f95b 	bl	80024da <HAL_CAN_GetRxFifoFillLevel>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d030      	beq.n	800128c <readCANTask+0x84>
      // there are multiple CAN IDs being passed through the filter, pull out the current message
      rx_status = HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &can_rx_header, current_can_data);
 800122a:	4b1c      	ldr	r3, [pc, #112]	; (800129c <readCANTask+0x94>)
 800122c:	4a1c      	ldr	r2, [pc, #112]	; (80012a0 <readCANTask+0x98>)
 800122e:	2100      	movs	r1, #0
 8001230:	4819      	ldr	r0, [pc, #100]	; (8001298 <readCANTask+0x90>)
 8001232:	f001 f841 	bl	80022b8 <HAL_CAN_GetRxMessage>
 8001236:	4603      	mov	r3, r0
 8001238:	461a      	mov	r2, r3
 800123a:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <readCANTask+0x9c>)
 800123c:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_TogglePin(KERNEL_LED_GPIO_Port, KERNEL_LED_Pin);
 800123e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001242:	4819      	ldr	r0, [pc, #100]	; (80012a8 <readCANTask+0xa0>)
 8001244:	f002 f8f8 	bl	8003438 <HAL_GPIO_TogglePin>

      // package into CAN_msg_t
      current_can_message.header = can_rx_header;
 8001248:	4a18      	ldr	r2, [pc, #96]	; (80012ac <readCANTask+0xa4>)
 800124a:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <readCANTask+0x98>)
 800124c:	4614      	mov	r4, r2
 800124e:	461d      	mov	r5, r3
 8001250:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001254:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001258:	e884 0007 	stmia.w	r4, {r0, r1, r2}


      for (uint8_t i=0; i<8; i++) {
 800125c:	2300      	movs	r3, #0
 800125e:	73fb      	strb	r3, [r7, #15]
 8001260:	e00a      	b.n	8001278 <readCANTask+0x70>
        current_can_message.data[i] = current_can_data[i];
 8001262:	7bfa      	ldrb	r2, [r7, #15]
 8001264:	7bfb      	ldrb	r3, [r7, #15]
 8001266:	490d      	ldr	r1, [pc, #52]	; (800129c <readCANTask+0x94>)
 8001268:	5c89      	ldrb	r1, [r1, r2]
 800126a:	4a10      	ldr	r2, [pc, #64]	; (80012ac <readCANTask+0xa4>)
 800126c:	4413      	add	r3, r2
 800126e:	460a      	mov	r2, r1
 8001270:	771a      	strb	r2, [r3, #28]
      for (uint8_t i=0; i<8; i++) {
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	3301      	adds	r3, #1
 8001276:	73fb      	strb	r3, [r7, #15]
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	2b07      	cmp	r3, #7
 800127c:	d9f1      	bls.n	8001262 <readCANTask+0x5a>
      }

      // priority=0, timeout=0
      osMessageQueuePut(canMessageQueueHandle, &current_can_message, 0U, 0U);
 800127e:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <readCANTask+0xa8>)
 8001280:	6818      	ldr	r0, [r3, #0]
 8001282:	2300      	movs	r3, #0
 8001284:	2200      	movs	r2, #0
 8001286:	4909      	ldr	r1, [pc, #36]	; (80012ac <readCANTask+0xa4>)
 8001288:	f005 f8a0 	bl	80063cc <osMessageQueuePut>
    }

    // Enables Interrupts
    HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800128c:	2102      	movs	r1, #2
 800128e:	4802      	ldr	r0, [pc, #8]	; (8001298 <readCANTask+0x90>)
 8001290:	f001 f94a 	bl	8002528 <HAL_CAN_ActivateNotification>
    osThreadFlagsWait(CAN_READY, osFlagsWaitAll, osWaitForever);
 8001294:	e7bc      	b.n	8001210 <readCANTask+0x8>
 8001296:	bf00      	nop
 8001298:	20000080 	.word	0x20000080
 800129c:	200001ec 	.word	0x200001ec
 80012a0:	200001b8 	.word	0x200001b8
 80012a4:	200000c8 	.word	0x200000c8
 80012a8:	40011000 	.word	0x40011000
 80012ac:	200000cc 	.word	0x200000cc
 80012b0:	200000bc 	.word	0x200000bc

080012b4 <transmitMessageTask>:
}

/*
 * Sends the CAN Message over UART
 */
__NO_RETURN void transmitMessageTask(void *argument) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08c      	sub	sp, #48	; 0x30
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  static CAN_msg_t can_message;
  osStatus_t queue_status;

  while (1) {
    // retrieve CAN message from queue
    queue_status = osMessageQueueGet(canMessageQueueHandle, &can_message, NULL, osWaitForever);
 80012bc:	4b3b      	ldr	r3, [pc, #236]	; (80013ac <transmitMessageTask+0xf8>)
 80012be:	6818      	ldr	r0, [r3, #0]
 80012c0:	f04f 33ff 	mov.w	r3, #4294967295
 80012c4:	2200      	movs	r2, #0
 80012c6:	493a      	ldr	r1, [pc, #232]	; (80013b0 <transmitMessageTask+0xfc>)
 80012c8:	f005 f8f4 	bl	80064b4 <osMessageQueueGet>
 80012cc:	62b8      	str	r0, [r7, #40]	; 0x28

    if (queue_status != osOK){
 80012ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <transmitMessageTask+0x24>
      osThreadYield();
 80012d4:	f004 fea0 	bl	8006018 <osThreadYield>
    }

    //
    uint8_t can_buffer[CAN_BUFFER_LEN] = {0};
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	f107 0310 	add.w	r3, r7, #16
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	821a      	strh	r2, [r3, #16]

    // TIMESTAMP: 8 ASCII characters
    for (uint8_t i=0; i<CAN_BUFFER_LEN - 14; i++) {
 80012ec:	2300      	movs	r3, #0
 80012ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80012f2:	e00b      	b.n	800130c <transmitMessageTask+0x58>
      // send 'D' as placeholder
        can_buffer[i] = 'D';
 80012f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80012f8:	3330      	adds	r3, #48	; 0x30
 80012fa:	443b      	add	r3, r7
 80012fc:	2244      	movs	r2, #68	; 0x44
 80012fe:	f803 2c24 	strb.w	r2, [r3, #-36]
    for (uint8_t i=0; i<CAN_BUFFER_LEN - 14; i++) {
 8001302:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001306:	3301      	adds	r3, #1
 8001308:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800130c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001310:	2b07      	cmp	r3, #7
 8001312:	d9ef      	bls.n	80012f4 <transmitMessageTask+0x40>
    }

    // CAN MESSAGE IDENTIFIER
    can_buffer[CAN_BUFFER_LEN - 14] = '#';
 8001314:	2323      	movs	r3, #35	; 0x23
 8001316:	753b      	strb	r3, [r7, #20]

    // CAN ID: 4 ASCII characters
    uint8_t id_h = 0xFFUL & (can_message.header.StdId >> 8);
 8001318:	4b25      	ldr	r3, [pc, #148]	; (80013b0 <transmitMessageTask+0xfc>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	0a1b      	lsrs	r3, r3, #8
 800131e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t id_l = 0xFFUL & (can_message.header.StdId);
 8001322:	4b23      	ldr	r3, [pc, #140]	; (80013b0 <transmitMessageTask+0xfc>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    can_buffer[CAN_BUFFER_LEN - 13] = id_h;
 800132a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800132e:	757b      	strb	r3, [r7, #21]
    can_buffer[CAN_BUFFER_LEN - 12] = id_l;
 8001330:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001334:	75bb      	strb	r3, [r7, #22]


    // CAN DATA: 16 ASCII characters
    for (uint8_t i=0; i<8; i++) {
 8001336:	2300      	movs	r3, #0
 8001338:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800133c:	e010      	b.n	8001360 <transmitMessageTask+0xac>
      // can_stream[2+i] = 0xFFUL & (can_message.data[i]);
        can_buffer[i + CAN_BUFFER_LEN - 11]= can_message.data[i];
 800133e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8001342:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001346:	330b      	adds	r3, #11
 8001348:	4919      	ldr	r1, [pc, #100]	; (80013b0 <transmitMessageTask+0xfc>)
 800134a:	440a      	add	r2, r1
 800134c:	7f12      	ldrb	r2, [r2, #28]
 800134e:	3330      	adds	r3, #48	; 0x30
 8001350:	443b      	add	r3, r7
 8001352:	f803 2c24 	strb.w	r2, [r3, #-36]
    for (uint8_t i=0; i<8; i++) {
 8001356:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800135a:	3301      	adds	r3, #1
 800135c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001360:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001364:	2b07      	cmp	r3, #7
 8001366:	d9ea      	bls.n	800133e <transmitMessageTask+0x8a>
    }


    // CAN DATA LENGTH: 1 ASCII character
    uint8_t length = "0123456789ABCDEF"[ can_message.header.DLC & 0xFUL];
 8001368:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <transmitMessageTask+0xfc>)
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	f003 030f 	and.w	r3, r3, #15
 8001370:	4a10      	ldr	r2, [pc, #64]	; (80013b4 <transmitMessageTask+0x100>)
 8001372:	5cd3      	ldrb	r3, [r2, r3]
 8001374:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    can_buffer[CAN_BUFFER_LEN - 3] = length;
 8001378:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800137c:	77fb      	strb	r3, [r7, #31]

    // NEW LINE: 1 ASCII character
    can_buffer[CAN_BUFFER_LEN - 2] = '\r';
 800137e:	230d      	movs	r3, #13
 8001380:	f887 3020 	strb.w	r3, [r7, #32]

    // CARRIAGE RETURN: 1 ASCII character
    can_buffer[CAN_BUFFER_LEN - 1] = '\n';
 8001384:	230a      	movs	r3, #10
 8001386:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

    HAL_UART_Transmit(&huart3, can_buffer, sizeof(can_buffer), 1000);
 800138a:	f107 010c 	add.w	r1, r7, #12
 800138e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001392:	2216      	movs	r2, #22
 8001394:	4808      	ldr	r0, [pc, #32]	; (80013b8 <transmitMessageTask+0x104>)
 8001396:	f003 ff4a 	bl	800522e <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, can_buffer, sizeof(can_buffer), 1000);
 800139a:	f107 010c 	add.w	r1, r7, #12
 800139e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a2:	2216      	movs	r2, #22
 80013a4:	4805      	ldr	r0, [pc, #20]	; (80013bc <transmitMessageTask+0x108>)
 80013a6:	f003 ff42 	bl	800522e <HAL_UART_Transmit>
  while (1) {
 80013aa:	e787      	b.n	80012bc <transmitMessageTask+0x8>
 80013ac:	200000bc 	.word	0x200000bc
 80013b0:	200000f0 	.word	0x200000f0
 80013b4:	080095ac 	.word	0x080095ac
 80013b8:	20000284 	.word	0x20000284
 80013bc:	20000240 	.word	0x20000240

080013c0 <readIMUTask>:
}

/*
 * Reads data from the IMU using I2C and stores it in a queue
 */
__NO_RETURN void readIMUTask(void *argument){
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  union FloatBytes gy_x, gy_y, gy_z, ax_x, ax_y, ax_z;
  /* Infinite loop */
  while(1)
  {
    gy_x.float_value = gyro(GYRO_X);
 80013c8:	2000      	movs	r0, #0
 80013ca:	f7ff fd59 	bl	8000e80 <gyro>
 80013ce:	4603      	mov	r3, r0
 80013d0:	61fb      	str	r3, [r7, #28]
    gy_y.float_value = gyro(GYRO_Y);
 80013d2:	2001      	movs	r0, #1
 80013d4:	f7ff fd54 	bl	8000e80 <gyro>
 80013d8:	4603      	mov	r3, r0
 80013da:	61bb      	str	r3, [r7, #24]
    gy_z.float_value = gyro(GYRO_Z);
 80013dc:	2002      	movs	r0, #2
 80013de:	f7ff fd4f 	bl	8000e80 <gyro>
 80013e2:	4603      	mov	r3, r0
 80013e4:	617b      	str	r3, [r7, #20]
    ax_x.float_value = accel(ACCEL_X);
 80013e6:	2000      	movs	r0, #0
 80013e8:	f7ff fdb2 	bl	8000f50 <accel>
 80013ec:	4603      	mov	r3, r0
 80013ee:	613b      	str	r3, [r7, #16]
    ax_y.float_value = accel(ACCEL_Y);
 80013f0:	2001      	movs	r0, #1
 80013f2:	f7ff fdad 	bl	8000f50 <accel>
 80013f6:	4603      	mov	r3, r0
 80013f8:	60fb      	str	r3, [r7, #12]
    ax_z.float_value = accel(ACCEL_Z);
 80013fa:	2002      	movs	r0, #2
 80013fc:	f7ff fda8 	bl	8000f50 <accel>
 8001400:	4603      	mov	r3, r0
 8001402:	60bb      	str	r3, [r7, #8]

    addtoIMUQueue("G", "X", gy_x);
 8001404:	69fa      	ldr	r2, [r7, #28]
 8001406:	4910      	ldr	r1, [pc, #64]	; (8001448 <readIMUTask+0x88>)
 8001408:	4810      	ldr	r0, [pc, #64]	; (800144c <readIMUTask+0x8c>)
 800140a:	f000 f827 	bl	800145c <addtoIMUQueue>
    addtoIMUQueue("G", "Y", gy_y);
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	490f      	ldr	r1, [pc, #60]	; (8001450 <readIMUTask+0x90>)
 8001412:	480e      	ldr	r0, [pc, #56]	; (800144c <readIMUTask+0x8c>)
 8001414:	f000 f822 	bl	800145c <addtoIMUQueue>
    addtoIMUQueue("G", "Z", gy_z);
 8001418:	697a      	ldr	r2, [r7, #20]
 800141a:	490e      	ldr	r1, [pc, #56]	; (8001454 <readIMUTask+0x94>)
 800141c:	480b      	ldr	r0, [pc, #44]	; (800144c <readIMUTask+0x8c>)
 800141e:	f000 f81d 	bl	800145c <addtoIMUQueue>
    addtoIMUQueue("A", "X", ax_x);
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	4908      	ldr	r1, [pc, #32]	; (8001448 <readIMUTask+0x88>)
 8001426:	480c      	ldr	r0, [pc, #48]	; (8001458 <readIMUTask+0x98>)
 8001428:	f000 f818 	bl	800145c <addtoIMUQueue>
    addtoIMUQueue("A", "Y", ax_y);
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	4908      	ldr	r1, [pc, #32]	; (8001450 <readIMUTask+0x90>)
 8001430:	4809      	ldr	r0, [pc, #36]	; (8001458 <readIMUTask+0x98>)
 8001432:	f000 f813 	bl	800145c <addtoIMUQueue>
    addtoIMUQueue("A", "Z", ax_z);
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	4906      	ldr	r1, [pc, #24]	; (8001454 <readIMUTask+0x94>)
 800143a:	4807      	ldr	r0, [pc, #28]	; (8001458 <readIMUTask+0x98>)
 800143c:	f000 f80e 	bl	800145c <addtoIMUQueue>

    osDelay(100);
 8001440:	2064      	movs	r0, #100	; 0x64
 8001442:	f004 ff0f 	bl	8006264 <osDelay>
    gy_x.float_value = gyro(GYRO_X);
 8001446:	e7bf      	b.n	80013c8 <readIMUTask+0x8>
 8001448:	080095ec 	.word	0x080095ec
 800144c:	080095f0 	.word	0x080095f0
 8001450:	080095f4 	.word	0x080095f4
 8001454:	080095f8 	.word	0x080095f8
 8001458:	080095fc 	.word	0x080095fc

0800145c <addtoIMUQueue>:


/*
 * Stores the data gathered from the IMU into the queue
 */
void addtoIMUQueue(char* type, char* dimension, union FloatBytes data){
 800145c:	b580      	push	{r7, lr}
 800145e:	b088      	sub	sp, #32
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
    IMU_msg_t imu_message;

    imu_message.imu_type = type[0];
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	753b      	strb	r3, [r7, #20]
    imu_message.dimension = dimension[0];
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	757b      	strb	r3, [r7, #21]
    for (int i = 0; i < 4; i++) {
 8001474:	2300      	movs	r3, #0
 8001476:	61fb      	str	r3, [r7, #28]
 8001478:	e00c      	b.n	8001494 <addtoIMUQueue+0x38>
        imu_message.data[i] = data.bytes[i];
 800147a:	1d3a      	adds	r2, r7, #4
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	4413      	add	r3, r2
 8001480:	7819      	ldrb	r1, [r3, #0]
 8001482:	f107 0216 	add.w	r2, r7, #22
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	4413      	add	r3, r2
 800148a:	460a      	mov	r2, r1
 800148c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3301      	adds	r3, #1
 8001492:	61fb      	str	r3, [r7, #28]
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	2b03      	cmp	r3, #3
 8001498:	ddef      	ble.n	800147a <addtoIMUQueue+0x1e>
    }

    osMessageQueuePut(imuMessageQueueHandle, &imu_message, 0U, 0U);
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <addtoIMUQueue+0x58>)
 800149c:	6818      	ldr	r0, [r3, #0]
 800149e:	f107 0114 	add.w	r1, r7, #20
 80014a2:	2300      	movs	r3, #0
 80014a4:	2200      	movs	r2, #0
 80014a6:	f004 ff91 	bl	80063cc <osMessageQueuePut>
}
 80014aa:	bf00      	nop
 80014ac:	3720      	adds	r7, #32
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	200000c0 	.word	0x200000c0

080014b8 <transmitIMUTask>:

/*
 * Sends the IMU data over UART
 */
__NO_RETURN void transmitIMUTask(void *argument){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08c      	sub	sp, #48	; 0x30
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  IMU_msg_t imu_message;

  while(1)
  {
    // Check if there are messages in the queue
    if (osMessageQueueGetCount(imuMessageQueueHandle) == 0) {
 80014c0:	4b32      	ldr	r3, [pc, #200]	; (800158c <transmitIMUTask+0xd4>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f005 f867 	bl	8006598 <osMessageQueueGetCount>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d101      	bne.n	80014d4 <transmitIMUTask+0x1c>
        osThreadYield();
 80014d0:	f004 fda2 	bl	8006018 <osThreadYield>
    }

    imu_queue_status = osMessageQueueGet(imuMessageQueueHandle, &imu_message, NULL, osWaitForever);
 80014d4:	4b2d      	ldr	r3, [pc, #180]	; (800158c <transmitIMUTask+0xd4>)
 80014d6:	6818      	ldr	r0, [r3, #0]
 80014d8:	f107 011c 	add.w	r1, r7, #28
 80014dc:	f04f 33ff 	mov.w	r3, #4294967295
 80014e0:	2200      	movs	r2, #0
 80014e2:	f004 ffe7 	bl	80064b4 <osMessageQueueGet>
 80014e6:	6278      	str	r0, [r7, #36]	; 0x24

    if (imu_queue_status != osOK){
 80014e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <transmitIMUTask+0x3a>
      osThreadYield();
 80014ee:	f004 fd93 	bl	8006018 <osThreadYield>
    }
    uint8_t imu_buffer[IMU_MESSAGE_LEN] = {0};
 80014f2:	2300      	movs	r3, #0
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	f107 030c 	add.w	r3, r7, #12
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	731a      	strb	r2, [r3, #12]

    // TIMESTAMP
    for (uint8_t i=0; i<IMU_MESSAGE_LEN - 9; i++) {
 8001504:	2300      	movs	r3, #0
 8001506:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800150a:	e00b      	b.n	8001524 <transmitIMUTask+0x6c>
      // send 'D' as placeholder
        imu_buffer[i] = 'D';
 800150c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001510:	3330      	adds	r3, #48	; 0x30
 8001512:	443b      	add	r3, r7
 8001514:	2244      	movs	r2, #68	; 0x44
 8001516:	f803 2c28 	strb.w	r2, [r3, #-40]
    for (uint8_t i=0; i<IMU_MESSAGE_LEN - 9; i++) {
 800151a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800151e:	3301      	adds	r3, #1
 8001520:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001524:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001528:	2b07      	cmp	r3, #7
 800152a:	d9ef      	bls.n	800150c <transmitIMUTask+0x54>
    }

    // IMU ID
    imu_buffer[IMU_MESSAGE_LEN - 9] = '@';
 800152c:	2340      	movs	r3, #64	; 0x40
 800152e:	743b      	strb	r3, [r7, #16]

    // IMU Data from queue
    imu_buffer[IMU_MESSAGE_LEN - 8] = imu_message.imu_type;
 8001530:	7f3b      	ldrb	r3, [r7, #28]
 8001532:	747b      	strb	r3, [r7, #17]
    imu_buffer[IMU_MESSAGE_LEN - 7] = imu_message.dimension;
 8001534:	7f7b      	ldrb	r3, [r7, #29]
 8001536:	74bb      	strb	r3, [r7, #18]

    for (int i = 0; i < 4; i++) {
 8001538:	2300      	movs	r3, #0
 800153a:	62bb      	str	r3, [r7, #40]	; 0x28
 800153c:	e00d      	b.n	800155a <transmitIMUTask+0xa2>
        imu_buffer[i + IMU_MESSAGE_LEN - 6] = imu_message.data[i];
 800153e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001540:	330b      	adds	r3, #11
 8001542:	f107 011e 	add.w	r1, r7, #30
 8001546:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001548:	440a      	add	r2, r1
 800154a:	7812      	ldrb	r2, [r2, #0]
 800154c:	3330      	adds	r3, #48	; 0x30
 800154e:	443b      	add	r3, r7
 8001550:	f803 2c28 	strb.w	r2, [r3, #-40]
    for (int i = 0; i < 4; i++) {
 8001554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001556:	3301      	adds	r3, #1
 8001558:	62bb      	str	r3, [r7, #40]	; 0x28
 800155a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800155c:	2b03      	cmp	r3, #3
 800155e:	ddee      	ble.n	800153e <transmitIMUTask+0x86>
    }

    // NEW LINE
    imu_buffer[IMU_MESSAGE_LEN - 2] = '\r';
 8001560:	230d      	movs	r3, #13
 8001562:	75fb      	strb	r3, [r7, #23]

    // CARRIAGE RETURN
    imu_buffer[IMU_MESSAGE_LEN - 1] = '\n';
 8001564:	230a      	movs	r3, #10
 8001566:	763b      	strb	r3, [r7, #24]

    HAL_UART_Transmit(&huart3, imu_buffer, sizeof(imu_buffer), 1000);
 8001568:	f107 0108 	add.w	r1, r7, #8
 800156c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001570:	2211      	movs	r2, #17
 8001572:	4807      	ldr	r0, [pc, #28]	; (8001590 <transmitIMUTask+0xd8>)
 8001574:	f003 fe5b 	bl	800522e <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart1, imu_buffer, sizeof(imu_buffer), 1000);
 8001578:	f107 0108 	add.w	r1, r7, #8
 800157c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001580:	2211      	movs	r2, #17
 8001582:	4804      	ldr	r0, [pc, #16]	; (8001594 <transmitIMUTask+0xdc>)
 8001584:	f003 fe53 	bl	800522e <HAL_UART_Transmit>
  {
 8001588:	e79a      	b.n	80014c0 <transmitIMUTask+0x8>
 800158a:	bf00      	nop
 800158c:	200000c0 	.word	0x200000c0
 8001590:	20000284 	.word	0x20000284
 8001594:	20000240 	.word	0x20000240

08001598 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159e:	f107 0310 	add.w	r3, r7, #16
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ac:	4b2d      	ldr	r3, [pc, #180]	; (8001664 <MX_GPIO_Init+0xcc>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	4a2c      	ldr	r2, [pc, #176]	; (8001664 <MX_GPIO_Init+0xcc>)
 80015b2:	f043 0310 	orr.w	r3, r3, #16
 80015b6:	6193      	str	r3, [r2, #24]
 80015b8:	4b2a      	ldr	r3, [pc, #168]	; (8001664 <MX_GPIO_Init+0xcc>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	f003 0310 	and.w	r3, r3, #16
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015c4:	4b27      	ldr	r3, [pc, #156]	; (8001664 <MX_GPIO_Init+0xcc>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	4a26      	ldr	r2, [pc, #152]	; (8001664 <MX_GPIO_Init+0xcc>)
 80015ca:	f043 0320 	orr.w	r3, r3, #32
 80015ce:	6193      	str	r3, [r2, #24]
 80015d0:	4b24      	ldr	r3, [pc, #144]	; (8001664 <MX_GPIO_Init+0xcc>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	f003 0320 	and.w	r3, r3, #32
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015dc:	4b21      	ldr	r3, [pc, #132]	; (8001664 <MX_GPIO_Init+0xcc>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	4a20      	ldr	r2, [pc, #128]	; (8001664 <MX_GPIO_Init+0xcc>)
 80015e2:	f043 0304 	orr.w	r3, r3, #4
 80015e6:	6193      	str	r3, [r2, #24]
 80015e8:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <MX_GPIO_Init+0xcc>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	f003 0304 	and.w	r3, r3, #4
 80015f0:	607b      	str	r3, [r7, #4]
 80015f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f4:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <MX_GPIO_Init+0xcc>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	4a1a      	ldr	r2, [pc, #104]	; (8001664 <MX_GPIO_Init+0xcc>)
 80015fa:	f043 0308 	orr.w	r3, r3, #8
 80015fe:	6193      	str	r3, [r2, #24]
 8001600:	4b18      	ldr	r3, [pc, #96]	; (8001664 <MX_GPIO_Init+0xcc>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	f003 0308 	and.w	r3, r3, #8
 8001608:	603b      	str	r3, [r7, #0]
 800160a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(KERNEL_LED_GPIO_Port, KERNEL_LED_Pin, GPIO_PIN_RESET);
 800160c:	2200      	movs	r2, #0
 800160e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001612:	4815      	ldr	r0, [pc, #84]	; (8001668 <MX_GPIO_Init+0xd0>)
 8001614:	f001 fef8 	bl	8003408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001618:	2200      	movs	r2, #0
 800161a:	2120      	movs	r1, #32
 800161c:	4813      	ldr	r0, [pc, #76]	; (800166c <MX_GPIO_Init+0xd4>)
 800161e:	f001 fef3 	bl	8003408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KERNEL_LED_Pin;
 8001622:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001626:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001628:	2301      	movs	r3, #1
 800162a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2302      	movs	r3, #2
 8001632:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KERNEL_LED_GPIO_Port, &GPIO_InitStruct);
 8001634:	f107 0310 	add.w	r3, r7, #16
 8001638:	4619      	mov	r1, r3
 800163a:	480b      	ldr	r0, [pc, #44]	; (8001668 <MX_GPIO_Init+0xd0>)
 800163c:	f001 fd60 	bl	8003100 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001640:	2320      	movs	r3, #32
 8001642:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001644:	2301      	movs	r3, #1
 8001646:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164c:	2302      	movs	r3, #2
 800164e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001650:	f107 0310 	add.w	r3, r7, #16
 8001654:	4619      	mov	r1, r3
 8001656:	4805      	ldr	r0, [pc, #20]	; (800166c <MX_GPIO_Init+0xd4>)
 8001658:	f001 fd52 	bl	8003100 <HAL_GPIO_Init>

}
 800165c:	bf00      	nop
 800165e:	3720      	adds	r7, #32
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40021000 	.word	0x40021000
 8001668:	40011000 	.word	0x40011000
 800166c:	40010800 	.word	0x40010800

08001670 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001674:	4b12      	ldr	r3, [pc, #72]	; (80016c0 <MX_I2C1_Init+0x50>)
 8001676:	4a13      	ldr	r2, [pc, #76]	; (80016c4 <MX_I2C1_Init+0x54>)
 8001678:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800167a:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <MX_I2C1_Init+0x50>)
 800167c:	4a12      	ldr	r2, [pc, #72]	; (80016c8 <MX_I2C1_Init+0x58>)
 800167e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001680:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <MX_I2C1_Init+0x50>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001686:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <MX_I2C1_Init+0x50>)
 8001688:	2200      	movs	r2, #0
 800168a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <MX_I2C1_Init+0x50>)
 800168e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001692:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001694:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <MX_I2C1_Init+0x50>)
 8001696:	2200      	movs	r2, #0
 8001698:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <MX_I2C1_Init+0x50>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016a0:	4b07      	ldr	r3, [pc, #28]	; (80016c0 <MX_I2C1_Init+0x50>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016a6:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <MX_I2C1_Init+0x50>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016ac:	4804      	ldr	r0, [pc, #16]	; (80016c0 <MX_I2C1_Init+0x50>)
 80016ae:	f001 fedd 	bl	800346c <HAL_I2C_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016b8:	f000 f8cc 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000114 	.word	0x20000114
 80016c4:	40005400 	.word	0x40005400
 80016c8:	000186a0 	.word	0x000186a0

080016cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b088      	sub	sp, #32
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 0310 	add.w	r3, r7, #16
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a15      	ldr	r2, [pc, #84]	; (800173c <HAL_I2C_MspInit+0x70>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d123      	bne.n	8001734 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ec:	4b14      	ldr	r3, [pc, #80]	; (8001740 <HAL_I2C_MspInit+0x74>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	4a13      	ldr	r2, [pc, #76]	; (8001740 <HAL_I2C_MspInit+0x74>)
 80016f2:	f043 0308 	orr.w	r3, r3, #8
 80016f6:	6193      	str	r3, [r2, #24]
 80016f8:	4b11      	ldr	r3, [pc, #68]	; (8001740 <HAL_I2C_MspInit+0x74>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	f003 0308 	and.w	r3, r3, #8
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001704:	23c0      	movs	r3, #192	; 0xc0
 8001706:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001708:	2312      	movs	r3, #18
 800170a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800170c:	2303      	movs	r3, #3
 800170e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001710:	f107 0310 	add.w	r3, r7, #16
 8001714:	4619      	mov	r1, r3
 8001716:	480b      	ldr	r0, [pc, #44]	; (8001744 <HAL_I2C_MspInit+0x78>)
 8001718:	f001 fcf2 	bl	8003100 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800171c:	4b08      	ldr	r3, [pc, #32]	; (8001740 <HAL_I2C_MspInit+0x74>)
 800171e:	69db      	ldr	r3, [r3, #28]
 8001720:	4a07      	ldr	r2, [pc, #28]	; (8001740 <HAL_I2C_MspInit+0x74>)
 8001722:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001726:	61d3      	str	r3, [r2, #28]
 8001728:	4b05      	ldr	r3, [pc, #20]	; (8001740 <HAL_I2C_MspInit+0x74>)
 800172a:	69db      	ldr	r3, [r3, #28]
 800172c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001734:	bf00      	nop
 8001736:	3720      	adds	r7, #32
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40005400 	.word	0x40005400
 8001740:	40021000 	.word	0x40021000
 8001744:	40010c00 	.word	0x40010c00

08001748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800174c:	f000 faa0 	bl	8001c90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001750:	f000 f828 	bl	80017a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001754:	f7ff ff20 	bl	8001598 <MX_GPIO_Init>
  MX_DMA_Init();
 8001758:	f7ff fb72 	bl	8000e40 <MX_DMA_Init>
  MX_CAN_Init();
 800175c:	f7ff fa9c 	bl	8000c98 <MX_CAN_Init>
  MX_USART3_UART_Init();
 8001760:	f000 f984 	bl	8001a6c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001764:	f7ff ff84 	bl	8001670 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001768:	f000 f956 	bl	8001a18 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // <----- CAN set-up ------>
  Can_Init();
 800176c:	f7ff fb4e 	bl	8000e0c <Can_Init>




  // USART DMA Interrupt Enable
  HAL_UART_Receive_DMA(&huart1, uart_rx_buffer, UART_RXBUFFER_SIZE);
 8001770:	2203      	movs	r2, #3
 8001772:	4909      	ldr	r1, [pc, #36]	; (8001798 <main+0x50>)
 8001774:	4809      	ldr	r0, [pc, #36]	; (800179c <main+0x54>)
 8001776:	f003 fdec 	bl	8005352 <HAL_UART_Receive_DMA>
  //Disable half transfer interrupt
 __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <main+0x58>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <main+0x58>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 0204 	bic.w	r2, r2, #4
 8001788:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800178a:	f004 fb35 	bl	8005df8 <osKernelInitialize>
  MX_FREERTOS_Init();
 800178e:	f7ff fc6d 	bl	800106c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001792:	f004 fb63 	bl	8005e5c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001796:	e7fe      	b.n	8001796 <main+0x4e>
 8001798:	200001f4 	.word	0x200001f4
 800179c:	20000240 	.word	0x20000240
 80017a0:	200002c8 	.word	0x200002c8

080017a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b090      	sub	sp, #64	; 0x40
 80017a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017aa:	f107 0318 	add.w	r3, r7, #24
 80017ae:	2228      	movs	r2, #40	; 0x28
 80017b0:	2100      	movs	r1, #0
 80017b2:	4618      	mov	r0, r3
 80017b4:	f007 fdba 	bl	800932c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017b8:	1d3b      	adds	r3, r7, #4
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	60da      	str	r2, [r3, #12]
 80017c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017c6:	2301      	movs	r3, #1
 80017c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80017d0:	2300      	movs	r3, #0
 80017d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017d4:	2301      	movs	r3, #1
 80017d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017d8:	2302      	movs	r3, #2
 80017da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80017e2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80017e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017e8:	f107 0318 	add.w	r3, r7, #24
 80017ec:	4618      	mov	r0, r3
 80017ee:	f002 fe3d 	bl	800446c <HAL_RCC_OscConfig>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80017f8:	f000 f82c 	bl	8001854 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017fc:	230f      	movs	r3, #15
 80017fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001800:	2302      	movs	r3, #2
 8001802:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001804:	2300      	movs	r3, #0
 8001806:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800180c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001812:	1d3b      	adds	r3, r7, #4
 8001814:	2102      	movs	r1, #2
 8001816:	4618      	mov	r0, r3
 8001818:	f003 f8aa 	bl	8004970 <HAL_RCC_ClockConfig>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001822:	f000 f817 	bl	8001854 <Error_Handler>
  }
}
 8001826:	bf00      	nop
 8001828:	3740      	adds	r7, #64	; 0x40
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a04      	ldr	r2, [pc, #16]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d101      	bne.n	8001846 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001842:	f000 fa3b 	bl	8001cbc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40012c00 	.word	0x40012c00

08001854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001858:	b672      	cpsid	i
}
 800185a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800185c:	e7fe      	b.n	800185c <Error_Handler+0x8>
	...

08001860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001866:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <HAL_MspInit+0x68>)
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	4a17      	ldr	r2, [pc, #92]	; (80018c8 <HAL_MspInit+0x68>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	6193      	str	r3, [r2, #24]
 8001872:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <HAL_MspInit+0x68>)
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800187e:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <HAL_MspInit+0x68>)
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	4a11      	ldr	r2, [pc, #68]	; (80018c8 <HAL_MspInit+0x68>)
 8001884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001888:	61d3      	str	r3, [r2, #28]
 800188a:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <HAL_MspInit+0x68>)
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001896:	2200      	movs	r2, #0
 8001898:	210f      	movs	r1, #15
 800189a:	f06f 0001 	mvn.w	r0, #1
 800189e:	f001 f966 	bl	8002b6e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018a2:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <HAL_MspInit+0x6c>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	4a04      	ldr	r2, [pc, #16]	; (80018cc <HAL_MspInit+0x6c>)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018be:	bf00      	nop
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40021000 	.word	0x40021000
 80018cc:	40010000 	.word	0x40010000

080018d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08c      	sub	sp, #48	; 0x30
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80018d8:	2300      	movs	r3, #0
 80018da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80018e0:	2200      	movs	r2, #0
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	2019      	movs	r0, #25
 80018e6:	f001 f942 	bl	8002b6e <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80018ea:	2019      	movs	r0, #25
 80018ec:	f001 f95b 	bl	8002ba6 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80018f0:	4b1e      	ldr	r3, [pc, #120]	; (800196c <HAL_InitTick+0x9c>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	4a1d      	ldr	r2, [pc, #116]	; (800196c <HAL_InitTick+0x9c>)
 80018f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018fa:	6193      	str	r3, [r2, #24]
 80018fc:	4b1b      	ldr	r3, [pc, #108]	; (800196c <HAL_InitTick+0x9c>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001908:	f107 0210 	add.w	r2, r7, #16
 800190c:	f107 0314 	add.w	r3, r7, #20
 8001910:	4611      	mov	r1, r2
 8001912:	4618      	mov	r0, r3
 8001914:	f003 f9a6 	bl	8004c64 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001918:	f003 f990 	bl	8004c3c <HAL_RCC_GetPCLK2Freq>
 800191c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800191e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001920:	4a13      	ldr	r2, [pc, #76]	; (8001970 <HAL_InitTick+0xa0>)
 8001922:	fba2 2303 	umull	r2, r3, r2, r3
 8001926:	0c9b      	lsrs	r3, r3, #18
 8001928:	3b01      	subs	r3, #1
 800192a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <HAL_InitTick+0xa4>)
 800192e:	4a12      	ldr	r2, [pc, #72]	; (8001978 <HAL_InitTick+0xa8>)
 8001930:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001932:	4b10      	ldr	r3, [pc, #64]	; (8001974 <HAL_InitTick+0xa4>)
 8001934:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001938:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800193a:	4a0e      	ldr	r2, [pc, #56]	; (8001974 <HAL_InitTick+0xa4>)
 800193c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800193e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001940:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <HAL_InitTick+0xa4>)
 8001942:	2200      	movs	r2, #0
 8001944:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001946:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <HAL_InitTick+0xa4>)
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800194c:	4809      	ldr	r0, [pc, #36]	; (8001974 <HAL_InitTick+0xa4>)
 800194e:	f003 f9d7 	bl	8004d00 <HAL_TIM_Base_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d104      	bne.n	8001962 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001958:	4806      	ldr	r0, [pc, #24]	; (8001974 <HAL_InitTick+0xa4>)
 800195a:	f003 fa29 	bl	8004db0 <HAL_TIM_Base_Start_IT>
 800195e:	4603      	mov	r3, r0
 8001960:	e000      	b.n	8001964 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
}
 8001964:	4618      	mov	r0, r3
 8001966:	3730      	adds	r7, #48	; 0x30
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40021000 	.word	0x40021000
 8001970:	431bde83 	.word	0x431bde83
 8001974:	200001f8 	.word	0x200001f8
 8001978:	40012c00 	.word	0x40012c00

0800197c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001980:	e7fe      	b.n	8001980 <NMI_Handler+0x4>

08001982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001986:	e7fe      	b.n	8001986 <HardFault_Handler+0x4>

08001988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800198c:	e7fe      	b.n	800198c <MemManage_Handler+0x4>

0800198e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001992:	e7fe      	b.n	8001992 <BusFault_Handler+0x4>

08001994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001998:	e7fe      	b.n	8001998 <UsageFault_Handler+0x4>

0800199a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800199a:	b480      	push	{r7}
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr
	...

080019a8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80019ac:	4802      	ldr	r0, [pc, #8]	; (80019b8 <DMA1_Channel5_IRQHandler+0x10>)
 80019ae:	f001 fa73 	bl	8002e98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	200002c8 	.word	0x200002c8

080019bc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80019c0:	4802      	ldr	r0, [pc, #8]	; (80019cc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80019c2:	f000 fdfc 	bl	80025be <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000080 	.word	0x20000080

080019d0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019d4:	4802      	ldr	r0, [pc, #8]	; (80019e0 <TIM1_UP_IRQHandler+0x10>)
 80019d6:	f003 fa3d 	bl	8004e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	200001f8 	.word	0x200001f8

080019e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019e8:	4802      	ldr	r0, [pc, #8]	; (80019f4 <USART1_IRQHandler+0x10>)
 80019ea:	f003 fce3 	bl	80053b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	20000240 	.word	0x20000240

080019f8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80019fc:	4802      	ldr	r0, [pc, #8]	; (8001a08 <USART3_IRQHandler+0x10>)
 80019fe:	f003 fcd9 	bl	80053b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000284 	.word	0x20000284

08001a0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr

08001a18 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a1c:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <MX_USART1_UART_Init+0x4c>)
 8001a1e:	4a12      	ldr	r2, [pc, #72]	; (8001a68 <MX_USART1_UART_Init+0x50>)
 8001a20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8001a22:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <MX_USART1_UART_Init+0x4c>)
 8001a24:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001a28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <MX_USART1_UART_Init+0x4c>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a30:	4b0c      	ldr	r3, [pc, #48]	; (8001a64 <MX_USART1_UART_Init+0x4c>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a36:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <MX_USART1_UART_Init+0x4c>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a3c:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <MX_USART1_UART_Init+0x4c>)
 8001a3e:	220c      	movs	r2, #12
 8001a40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a42:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <MX_USART1_UART_Init+0x4c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a48:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <MX_USART1_UART_Init+0x4c>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a4e:	4805      	ldr	r0, [pc, #20]	; (8001a64 <MX_USART1_UART_Init+0x4c>)
 8001a50:	f003 fba0 	bl	8005194 <HAL_UART_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a5a:	f7ff fefb 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000240 	.word	0x20000240
 8001a68:	40013800 	.word	0x40013800

08001a6c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a70:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <MX_USART3_UART_Init+0x4c>)
 8001a72:	4a12      	ldr	r2, [pc, #72]	; (8001abc <MX_USART3_UART_Init+0x50>)
 8001a74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 8001a76:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <MX_USART3_UART_Init+0x4c>)
 8001a78:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001a7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a7e:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <MX_USART3_UART_Init+0x4c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <MX_USART3_UART_Init+0x4c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <MX_USART3_UART_Init+0x4c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a90:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <MX_USART3_UART_Init+0x4c>)
 8001a92:	220c      	movs	r2, #12
 8001a94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a96:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <MX_USART3_UART_Init+0x4c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <MX_USART3_UART_Init+0x4c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001aa2:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <MX_USART3_UART_Init+0x4c>)
 8001aa4:	f003 fb76 	bl	8005194 <HAL_UART_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001aae:	f7ff fed1 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000284 	.word	0x20000284
 8001abc:	40004800 	.word	0x40004800

08001ac0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08a      	sub	sp, #40	; 0x28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	f107 0318 	add.w	r3, r7, #24
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a53      	ldr	r2, [pc, #332]	; (8001c28 <HAL_UART_MspInit+0x168>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d160      	bne.n	8001ba2 <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ae0:	4b52      	ldr	r3, [pc, #328]	; (8001c2c <HAL_UART_MspInit+0x16c>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	4a51      	ldr	r2, [pc, #324]	; (8001c2c <HAL_UART_MspInit+0x16c>)
 8001ae6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aea:	6193      	str	r3, [r2, #24]
 8001aec:	4b4f      	ldr	r3, [pc, #316]	; (8001c2c <HAL_UART_MspInit+0x16c>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001af4:	617b      	str	r3, [r7, #20]
 8001af6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af8:	4b4c      	ldr	r3, [pc, #304]	; (8001c2c <HAL_UART_MspInit+0x16c>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	4a4b      	ldr	r2, [pc, #300]	; (8001c2c <HAL_UART_MspInit+0x16c>)
 8001afe:	f043 0304 	orr.w	r3, r3, #4
 8001b02:	6193      	str	r3, [r2, #24]
 8001b04:	4b49      	ldr	r3, [pc, #292]	; (8001c2c <HAL_UART_MspInit+0x16c>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1e:	f107 0318 	add.w	r3, r7, #24
 8001b22:	4619      	mov	r1, r3
 8001b24:	4842      	ldr	r0, [pc, #264]	; (8001c30 <HAL_UART_MspInit+0x170>)
 8001b26:	f001 faeb 	bl	8003100 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b30:	2300      	movs	r3, #0
 8001b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b38:	f107 0318 	add.w	r3, r7, #24
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	483c      	ldr	r0, [pc, #240]	; (8001c30 <HAL_UART_MspInit+0x170>)
 8001b40:	f001 fade 	bl	8003100 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001b44:	4b3b      	ldr	r3, [pc, #236]	; (8001c34 <HAL_UART_MspInit+0x174>)
 8001b46:	4a3c      	ldr	r2, [pc, #240]	; (8001c38 <HAL_UART_MspInit+0x178>)
 8001b48:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b4a:	4b3a      	ldr	r3, [pc, #232]	; (8001c34 <HAL_UART_MspInit+0x174>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b50:	4b38      	ldr	r3, [pc, #224]	; (8001c34 <HAL_UART_MspInit+0x174>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b56:	4b37      	ldr	r3, [pc, #220]	; (8001c34 <HAL_UART_MspInit+0x174>)
 8001b58:	2280      	movs	r2, #128	; 0x80
 8001b5a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b5c:	4b35      	ldr	r3, [pc, #212]	; (8001c34 <HAL_UART_MspInit+0x174>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b62:	4b34      	ldr	r3, [pc, #208]	; (8001c34 <HAL_UART_MspInit+0x174>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001b68:	4b32      	ldr	r3, [pc, #200]	; (8001c34 <HAL_UART_MspInit+0x174>)
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b6e:	4b31      	ldr	r3, [pc, #196]	; (8001c34 <HAL_UART_MspInit+0x174>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001b74:	482f      	ldr	r0, [pc, #188]	; (8001c34 <HAL_UART_MspInit+0x174>)
 8001b76:	f001 f825 	bl	8002bc4 <HAL_DMA_Init>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001b80:	f7ff fe68 	bl	8001854 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a2b      	ldr	r2, [pc, #172]	; (8001c34 <HAL_UART_MspInit+0x174>)
 8001b88:	639a      	str	r2, [r3, #56]	; 0x38
 8001b8a:	4a2a      	ldr	r2, [pc, #168]	; (8001c34 <HAL_UART_MspInit+0x174>)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001b90:	2200      	movs	r2, #0
 8001b92:	2105      	movs	r1, #5
 8001b94:	2025      	movs	r0, #37	; 0x25
 8001b96:	f000 ffea 	bl	8002b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b9a:	2025      	movs	r0, #37	; 0x25
 8001b9c:	f001 f803 	bl	8002ba6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ba0:	e03e      	b.n	8001c20 <HAL_UART_MspInit+0x160>
  else if(uartHandle->Instance==USART3)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a25      	ldr	r2, [pc, #148]	; (8001c3c <HAL_UART_MspInit+0x17c>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d139      	bne.n	8001c20 <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bac:	4b1f      	ldr	r3, [pc, #124]	; (8001c2c <HAL_UART_MspInit+0x16c>)
 8001bae:	69db      	ldr	r3, [r3, #28]
 8001bb0:	4a1e      	ldr	r2, [pc, #120]	; (8001c2c <HAL_UART_MspInit+0x16c>)
 8001bb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bb6:	61d3      	str	r3, [r2, #28]
 8001bb8:	4b1c      	ldr	r3, [pc, #112]	; (8001c2c <HAL_UART_MspInit+0x16c>)
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc4:	4b19      	ldr	r3, [pc, #100]	; (8001c2c <HAL_UART_MspInit+0x16c>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	4a18      	ldr	r2, [pc, #96]	; (8001c2c <HAL_UART_MspInit+0x16c>)
 8001bca:	f043 0308 	orr.w	r3, r3, #8
 8001bce:	6193      	str	r3, [r2, #24]
 8001bd0:	4b16      	ldr	r3, [pc, #88]	; (8001c2c <HAL_UART_MspInit+0x16c>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	f003 0308 	and.w	r3, r3, #8
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be2:	2302      	movs	r3, #2
 8001be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001be6:	2303      	movs	r3, #3
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bea:	f107 0318 	add.w	r3, r7, #24
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4813      	ldr	r0, [pc, #76]	; (8001c40 <HAL_UART_MspInit+0x180>)
 8001bf2:	f001 fa85 	bl	8003100 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001bf6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c04:	f107 0318 	add.w	r3, r7, #24
 8001c08:	4619      	mov	r1, r3
 8001c0a:	480d      	ldr	r0, [pc, #52]	; (8001c40 <HAL_UART_MspInit+0x180>)
 8001c0c:	f001 fa78 	bl	8003100 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001c10:	2200      	movs	r2, #0
 8001c12:	2105      	movs	r1, #5
 8001c14:	2027      	movs	r0, #39	; 0x27
 8001c16:	f000 ffaa 	bl	8002b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c1a:	2027      	movs	r0, #39	; 0x27
 8001c1c:	f000 ffc3 	bl	8002ba6 <HAL_NVIC_EnableIRQ>
}
 8001c20:	bf00      	nop
 8001c22:	3728      	adds	r7, #40	; 0x28
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40013800 	.word	0x40013800
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40010800 	.word	0x40010800
 8001c34:	200002c8 	.word	0x200002c8
 8001c38:	40020058 	.word	0x40020058
 8001c3c:	40004800 	.word	0x40004800
 8001c40:	40010c00 	.word	0x40010c00

08001c44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c44:	480c      	ldr	r0, [pc, #48]	; (8001c78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c46:	490d      	ldr	r1, [pc, #52]	; (8001c7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c48:	4a0d      	ldr	r2, [pc, #52]	; (8001c80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c4c:	e002      	b.n	8001c54 <LoopCopyDataInit>

08001c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c52:	3304      	adds	r3, #4

08001c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c58:	d3f9      	bcc.n	8001c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c5a:	4a0a      	ldr	r2, [pc, #40]	; (8001c84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c5c:	4c0a      	ldr	r4, [pc, #40]	; (8001c88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c60:	e001      	b.n	8001c66 <LoopFillZerobss>

08001c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c64:	3204      	adds	r2, #4

08001c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c68:	d3fb      	bcc.n	8001c62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c6a:	f7ff fecf 	bl	8001a0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c6e:	f007 fbbb 	bl	80093e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c72:	f7ff fd69 	bl	8001748 <main>
  bx lr
 8001c76:	4770      	bx	lr
  ldr r0, =_sdata
 8001c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c7c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001c80:	08009750 	.word	0x08009750
  ldr r2, =_sbss
 8001c84:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001c88:	20002650 	.word	0x20002650

08001c8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c8c:	e7fe      	b.n	8001c8c <ADC1_2_IRQHandler>
	...

08001c90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c94:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <HAL_Init+0x28>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a07      	ldr	r2, [pc, #28]	; (8001cb8 <HAL_Init+0x28>)
 8001c9a:	f043 0310 	orr.w	r3, r3, #16
 8001c9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ca0:	2003      	movs	r0, #3
 8001ca2:	f000 ff59 	bl	8002b58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ca6:	200f      	movs	r0, #15
 8001ca8:	f7ff fe12 	bl	80018d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cac:	f7ff fdd8 	bl	8001860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40022000 	.word	0x40022000

08001cbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc0:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <HAL_IncTick+0x1c>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <HAL_IncTick+0x20>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4413      	add	r3, r2
 8001ccc:	4a03      	ldr	r2, [pc, #12]	; (8001cdc <HAL_IncTick+0x20>)
 8001cce:	6013      	str	r3, [r2, #0]
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr
 8001cd8:	20000008 	.word	0x20000008
 8001cdc:	2000030c 	.word	0x2000030c

08001ce0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce4:	4b02      	ldr	r3, [pc, #8]	; (8001cf0 <HAL_GetTick+0x10>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr
 8001cf0:	2000030c 	.word	0x2000030c

08001cf4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e0ed      	b.n	8001ee2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d102      	bne.n	8001d18 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7fe fff6 	bl	8000d04 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f042 0201 	orr.w	r2, r2, #1
 8001d26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d28:	f7ff ffda 	bl	8001ce0 <HAL_GetTick>
 8001d2c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d2e:	e012      	b.n	8001d56 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d30:	f7ff ffd6 	bl	8001ce0 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b0a      	cmp	r3, #10
 8001d3c:	d90b      	bls.n	8001d56 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d42:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2205      	movs	r2, #5
 8001d4e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e0c5      	b.n	8001ee2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0e5      	beq.n	8001d30 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 0202 	bic.w	r2, r2, #2
 8001d72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d74:	f7ff ffb4 	bl	8001ce0 <HAL_GetTick>
 8001d78:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d7a:	e012      	b.n	8001da2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d7c:	f7ff ffb0 	bl	8001ce0 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b0a      	cmp	r3, #10
 8001d88:	d90b      	bls.n	8001da2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2205      	movs	r2, #5
 8001d9a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e09f      	b.n	8001ee2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1e5      	bne.n	8001d7c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	7e1b      	ldrb	r3, [r3, #24]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d108      	bne.n	8001dca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	e007      	b.n	8001dda <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	7e5b      	ldrb	r3, [r3, #25]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d108      	bne.n	8001df4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	e007      	b.n	8001e04 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e02:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	7e9b      	ldrb	r3, [r3, #26]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d108      	bne.n	8001e1e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 0220 	orr.w	r2, r2, #32
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	e007      	b.n	8001e2e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0220 	bic.w	r2, r2, #32
 8001e2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	7edb      	ldrb	r3, [r3, #27]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d108      	bne.n	8001e48 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 0210 	bic.w	r2, r2, #16
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	e007      	b.n	8001e58 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0210 	orr.w	r2, r2, #16
 8001e56:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	7f1b      	ldrb	r3, [r3, #28]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d108      	bne.n	8001e72 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0208 	orr.w	r2, r2, #8
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	e007      	b.n	8001e82 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0208 	bic.w	r2, r2, #8
 8001e80:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	7f5b      	ldrb	r3, [r3, #29]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d108      	bne.n	8001e9c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f042 0204 	orr.w	r2, r2, #4
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	e007      	b.n	8001eac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0204 	bic.w	r2, r2, #4
 8001eaa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	431a      	orrs	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	695b      	ldr	r3, [r3, #20]
 8001ec0:	ea42 0103 	orr.w	r1, r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	1e5a      	subs	r2, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b087      	sub	sp, #28
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
 8001ef2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f00:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001f02:	7cfb      	ldrb	r3, [r7, #19]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d003      	beq.n	8001f10 <HAL_CAN_ConfigFilter+0x26>
 8001f08:	7cfb      	ldrb	r3, [r7, #19]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	f040 80aa 	bne.w	8002064 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f16:	f043 0201 	orr.w	r2, r3, #1
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	f003 031f 	and.w	r3, r3, #31
 8001f28:	2201      	movs	r2, #1
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	401a      	ands	r2, r3
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d123      	bne.n	8001f92 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	43db      	mvns	r3, r3
 8001f54:	401a      	ands	r2, r3
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f6c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	3248      	adds	r2, #72	; 0x48
 8001f72:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f86:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f88:	6979      	ldr	r1, [r7, #20]
 8001f8a:	3348      	adds	r3, #72	; 0x48
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	440b      	add	r3, r1
 8001f90:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d122      	bne.n	8001fe0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001fba:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	3248      	adds	r2, #72	; 0x48
 8001fc0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fd4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fd6:	6979      	ldr	r1, [r7, #20]
 8001fd8:	3348      	adds	r3, #72	; 0x48
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	440b      	add	r3, r1
 8001fde:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d109      	bne.n	8001ffc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001ffa:	e007      	b.n	800200c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	431a      	orrs	r2, r3
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d109      	bne.n	8002028 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	43db      	mvns	r3, r3
 800201e:	401a      	ands	r2, r3
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002026:	e007      	b.n	8002038 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	431a      	orrs	r2, r3
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d107      	bne.n	8002050 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	431a      	orrs	r2, r3
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002056:	f023 0201 	bic.w	r2, r3, #1
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002060:	2300      	movs	r3, #0
 8002062:	e006      	b.n	8002072 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002068:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
  }
}
 8002072:	4618      	mov	r0, r3
 8002074:	371c      	adds	r7, #28
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr

0800207c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 3020 	ldrb.w	r3, [r3, #32]
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b01      	cmp	r3, #1
 800208e:	d12e      	bne.n	80020ee <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2202      	movs	r2, #2
 8002094:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0201 	bic.w	r2, r2, #1
 80020a6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80020a8:	f7ff fe1a 	bl	8001ce0 <HAL_GetTick>
 80020ac:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80020ae:	e012      	b.n	80020d6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020b0:	f7ff fe16 	bl	8001ce0 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b0a      	cmp	r3, #10
 80020bc:	d90b      	bls.n	80020d6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2205      	movs	r2, #5
 80020ce:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e012      	b.n	80020fc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1e5      	bne.n	80020b0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80020ea:	2300      	movs	r3, #0
 80020ec:	e006      	b.n	80020fc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
  }
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002104:	b480      	push	{r7}
 8002106:	b089      	sub	sp, #36	; 0x24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
 8002110:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002118:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002122:	7ffb      	ldrb	r3, [r7, #31]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d003      	beq.n	8002130 <HAL_CAN_AddTxMessage+0x2c>
 8002128:	7ffb      	ldrb	r3, [r7, #31]
 800212a:	2b02      	cmp	r3, #2
 800212c:	f040 80b8 	bne.w	80022a0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10a      	bne.n	8002150 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002140:	2b00      	cmp	r3, #0
 8002142:	d105      	bne.n	8002150 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 80a0 	beq.w	8002290 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	0e1b      	lsrs	r3, r3, #24
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	2b02      	cmp	r3, #2
 800215e:	d907      	bls.n	8002170 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e09e      	b.n	80022ae <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002170:	2201      	movs	r2, #1
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	409a      	lsls	r2, r3
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10d      	bne.n	800219e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800218c:	68f9      	ldr	r1, [r7, #12]
 800218e:	6809      	ldr	r1, [r1, #0]
 8002190:	431a      	orrs	r2, r3
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	3318      	adds	r3, #24
 8002196:	011b      	lsls	r3, r3, #4
 8002198:	440b      	add	r3, r1
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	e00f      	b.n	80021be <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021a8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021ae:	68f9      	ldr	r1, [r7, #12]
 80021b0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80021b2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	3318      	adds	r3, #24
 80021b8:	011b      	lsls	r3, r3, #4
 80021ba:	440b      	add	r3, r1
 80021bc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6819      	ldr	r1, [r3, #0]
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	691a      	ldr	r2, [r3, #16]
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	3318      	adds	r3, #24
 80021ca:	011b      	lsls	r3, r3, #4
 80021cc:	440b      	add	r3, r1
 80021ce:	3304      	adds	r3, #4
 80021d0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	7d1b      	ldrb	r3, [r3, #20]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d111      	bne.n	80021fe <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	3318      	adds	r3, #24
 80021e2:	011b      	lsls	r3, r3, #4
 80021e4:	4413      	add	r3, r2
 80021e6:	3304      	adds	r3, #4
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	6811      	ldr	r1, [r2, #0]
 80021ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	3318      	adds	r3, #24
 80021f6:	011b      	lsls	r3, r3, #4
 80021f8:	440b      	add	r3, r1
 80021fa:	3304      	adds	r3, #4
 80021fc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3307      	adds	r3, #7
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	061a      	lsls	r2, r3, #24
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3306      	adds	r3, #6
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	041b      	lsls	r3, r3, #16
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3305      	adds	r3, #5
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	021b      	lsls	r3, r3, #8
 8002218:	4313      	orrs	r3, r2
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	3204      	adds	r2, #4
 800221e:	7812      	ldrb	r2, [r2, #0]
 8002220:	4610      	mov	r0, r2
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	6811      	ldr	r1, [r2, #0]
 8002226:	ea43 0200 	orr.w	r2, r3, r0
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	011b      	lsls	r3, r3, #4
 800222e:	440b      	add	r3, r1
 8002230:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002234:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3303      	adds	r3, #3
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	061a      	lsls	r2, r3, #24
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	3302      	adds	r3, #2
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	041b      	lsls	r3, r3, #16
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3301      	adds	r3, #1
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	021b      	lsls	r3, r3, #8
 8002250:	4313      	orrs	r3, r2
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	7812      	ldrb	r2, [r2, #0]
 8002256:	4610      	mov	r0, r2
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	6811      	ldr	r1, [r2, #0]
 800225c:	ea43 0200 	orr.w	r2, r3, r0
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	011b      	lsls	r3, r3, #4
 8002264:	440b      	add	r3, r1
 8002266:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800226a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	3318      	adds	r3, #24
 8002274:	011b      	lsls	r3, r3, #4
 8002276:	4413      	add	r3, r2
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	6811      	ldr	r1, [r2, #0]
 800227e:	f043 0201 	orr.w	r2, r3, #1
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	3318      	adds	r3, #24
 8002286:	011b      	lsls	r3, r3, #4
 8002288:	440b      	add	r3, r1
 800228a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800228c:	2300      	movs	r3, #0
 800228e:	e00e      	b.n	80022ae <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e006      	b.n	80022ae <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
  }
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3724      	adds	r7, #36	; 0x24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc80      	pop	{r7}
 80022b6:	4770      	bx	lr

080022b8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80022b8:	b480      	push	{r7}
 80022ba:	b087      	sub	sp, #28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
 80022c4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022cc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80022ce:	7dfb      	ldrb	r3, [r7, #23]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d003      	beq.n	80022dc <HAL_CAN_GetRxMessage+0x24>
 80022d4:	7dfb      	ldrb	r3, [r7, #23]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	f040 80f3 	bne.w	80024c2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10e      	bne.n	8002300 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	f003 0303 	and.w	r3, r3, #3
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d116      	bne.n	800231e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e0e7      	b.n	80024d0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	f003 0303 	and.w	r3, r3, #3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d107      	bne.n	800231e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002312:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e0d8      	b.n	80024d0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	331b      	adds	r3, #27
 8002326:	011b      	lsls	r3, r3, #4
 8002328:	4413      	add	r3, r2
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0204 	and.w	r2, r3, #4
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d10c      	bne.n	8002356 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	331b      	adds	r3, #27
 8002344:	011b      	lsls	r3, r3, #4
 8002346:	4413      	add	r3, r2
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	0d5b      	lsrs	r3, r3, #21
 800234c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	e00b      	b.n	800236e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	331b      	adds	r3, #27
 800235e:	011b      	lsls	r3, r3, #4
 8002360:	4413      	add	r3, r2
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	08db      	lsrs	r3, r3, #3
 8002366:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	331b      	adds	r3, #27
 8002376:	011b      	lsls	r3, r3, #4
 8002378:	4413      	add	r3, r2
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0202 	and.w	r2, r3, #2
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	331b      	adds	r3, #27
 800238c:	011b      	lsls	r3, r3, #4
 800238e:	4413      	add	r3, r2
 8002390:	3304      	adds	r3, #4
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 020f 	and.w	r2, r3, #15
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	331b      	adds	r3, #27
 80023a4:	011b      	lsls	r3, r3, #4
 80023a6:	4413      	add	r3, r2
 80023a8:	3304      	adds	r3, #4
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	0a1b      	lsrs	r3, r3, #8
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	331b      	adds	r3, #27
 80023bc:	011b      	lsls	r3, r3, #4
 80023be:	4413      	add	r3, r2
 80023c0:	3304      	adds	r3, #4
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	0c1b      	lsrs	r3, r3, #16
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	011b      	lsls	r3, r3, #4
 80023d4:	4413      	add	r3, r2
 80023d6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	011b      	lsls	r3, r3, #4
 80023ea:	4413      	add	r3, r2
 80023ec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	0a1a      	lsrs	r2, r3, #8
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	3301      	adds	r3, #1
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	4413      	add	r3, r2
 8002406:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	0c1a      	lsrs	r2, r3, #16
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	3302      	adds	r3, #2
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	011b      	lsls	r3, r3, #4
 800241e:	4413      	add	r3, r2
 8002420:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	0e1a      	lsrs	r2, r3, #24
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	3303      	adds	r3, #3
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	011b      	lsls	r3, r3, #4
 8002438:	4413      	add	r3, r2
 800243a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	3304      	adds	r3, #4
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	4413      	add	r3, r2
 8002452:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	0a1a      	lsrs	r2, r3, #8
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	3305      	adds	r3, #5
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	011b      	lsls	r3, r3, #4
 800246a:	4413      	add	r3, r2
 800246c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	0c1a      	lsrs	r2, r3, #16
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	3306      	adds	r3, #6
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	4413      	add	r3, r2
 8002486:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	0e1a      	lsrs	r2, r3, #24
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	3307      	adds	r3, #7
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d108      	bne.n	80024ae <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0220 	orr.w	r2, r2, #32
 80024aa:	60da      	str	r2, [r3, #12]
 80024ac:	e007      	b.n	80024be <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	691a      	ldr	r2, [r3, #16]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f042 0220 	orr.w	r2, r2, #32
 80024bc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80024be:	2300      	movs	r3, #0
 80024c0:	e006      	b.n	80024d0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
  }
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	371c      	adds	r7, #28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr

080024da <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80024da:	b480      	push	{r7}
 80024dc:	b085      	sub	sp, #20
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
 80024e2:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024ee:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80024f0:	7afb      	ldrb	r3, [r7, #11]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d002      	beq.n	80024fc <HAL_CAN_GetRxFifoFillLevel+0x22>
 80024f6:	7afb      	ldrb	r3, [r7, #11]
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d10f      	bne.n	800251c <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d106      	bne.n	8002510 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f003 0303 	and.w	r3, r3, #3
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	e005      	b.n	800251c <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800251c:	68fb      	ldr	r3, [r7, #12]
}
 800251e:	4618      	mov	r0, r3
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr

08002528 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002538:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800253a:	7bfb      	ldrb	r3, [r7, #15]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d002      	beq.n	8002546 <HAL_CAN_ActivateNotification+0x1e>
 8002540:	7bfb      	ldrb	r3, [r7, #15]
 8002542:	2b02      	cmp	r3, #2
 8002544:	d109      	bne.n	800255a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6959      	ldr	r1, [r3, #20]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002556:	2300      	movs	r3, #0
 8002558:	e006      	b.n	8002568 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
  }
}
 8002568:	4618      	mov	r0, r3
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr

08002572 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8002572:	b480      	push	{r7}
 8002574:	b085      	sub	sp, #20
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
 800257a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002582:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002584:	7bfb      	ldrb	r3, [r7, #15]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d002      	beq.n	8002590 <HAL_CAN_DeactivateNotification+0x1e>
 800258a:	7bfb      	ldrb	r3, [r7, #15]
 800258c:	2b02      	cmp	r3, #2
 800258e:	d10a      	bne.n	80025a6 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6959      	ldr	r1, [r3, #20]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	43da      	mvns	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	400a      	ands	r2, r1
 80025a0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	e006      	b.n	80025b4 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
  }
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr

080025be <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b08a      	sub	sp, #40	; 0x28
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80025c6:	2300      	movs	r3, #0
 80025c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80025fa:	6a3b      	ldr	r3, [r7, #32]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b00      	cmp	r3, #0
 8002602:	d07c      	beq.n	80026fe <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d023      	beq.n	8002656 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2201      	movs	r2, #1
 8002614:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d003      	beq.n	8002628 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 f983 	bl	800292c <HAL_CAN_TxMailbox0CompleteCallback>
 8002626:	e016      	b.n	8002656 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	f003 0304 	and.w	r3, r3, #4
 800262e:	2b00      	cmp	r3, #0
 8002630:	d004      	beq.n	800263c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002634:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002638:	627b      	str	r3, [r7, #36]	; 0x24
 800263a:	e00c      	b.n	8002656 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	2b00      	cmp	r3, #0
 8002644:	d004      	beq.n	8002650 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800264c:	627b      	str	r3, [r7, #36]	; 0x24
 800264e:	e002      	b.n	8002656 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 f986 	bl	8002962 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265c:	2b00      	cmp	r3, #0
 800265e:	d024      	beq.n	80026aa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002668:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002670:	2b00      	cmp	r3, #0
 8002672:	d003      	beq.n	800267c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 f962 	bl	800293e <HAL_CAN_TxMailbox1CompleteCallback>
 800267a:	e016      	b.n	80026aa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002682:	2b00      	cmp	r3, #0
 8002684:	d004      	beq.n	8002690 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
 800268e:	e00c      	b.n	80026aa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002696:	2b00      	cmp	r3, #0
 8002698:	d004      	beq.n	80026a4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24
 80026a2:	e002      	b.n	80026aa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f965 	bl	8002974 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d024      	beq.n	80026fe <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80026bc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 f941 	bl	8002950 <HAL_CAN_TxMailbox2CompleteCallback>
 80026ce:	e016      	b.n	80026fe <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d004      	beq.n	80026e4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026e0:	627b      	str	r3, [r7, #36]	; 0x24
 80026e2:	e00c      	b.n	80026fe <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d004      	beq.n	80026f8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f4:	627b      	str	r3, [r7, #36]	; 0x24
 80026f6:	e002      	b.n	80026fe <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 f944 	bl	8002986 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	f003 0308 	and.w	r3, r3, #8
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00c      	beq.n	8002722 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f003 0310 	and.w	r3, r3, #16
 800270e:	2b00      	cmp	r3, #0
 8002710:	d007      	beq.n	8002722 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002718:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2210      	movs	r2, #16
 8002720:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00b      	beq.n	8002744 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b00      	cmp	r3, #0
 8002734:	d006      	beq.n	8002744 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2208      	movs	r2, #8
 800273c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 f92a 	bl	8002998 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002744:	6a3b      	ldr	r3, [r7, #32]
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d009      	beq.n	8002762 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f003 0303 	and.w	r3, r3, #3
 8002758:	2b00      	cmp	r3, #0
 800275a:	d002      	beq.n	8002762 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7fe fb39 	bl	8000dd4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00c      	beq.n	8002786 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	f003 0310 	and.w	r3, r3, #16
 8002772:	2b00      	cmp	r3, #0
 8002774:	d007      	beq.n	8002786 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800277c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2210      	movs	r2, #16
 8002784:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	f003 0320 	and.w	r3, r3, #32
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00b      	beq.n	80027a8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	2b00      	cmp	r3, #0
 8002798:	d006      	beq.n	80027a8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2208      	movs	r2, #8
 80027a0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f90a 	bl	80029bc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	f003 0310 	and.w	r3, r3, #16
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d009      	beq.n	80027c6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	f003 0303 	and.w	r3, r3, #3
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 f8f2 	bl	80029aa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80027c6:	6a3b      	ldr	r3, [r7, #32]
 80027c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00b      	beq.n	80027e8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f003 0310 	and.w	r3, r3, #16
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d006      	beq.n	80027e8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2210      	movs	r2, #16
 80027e0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f8f3 	bl	80029ce <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80027e8:	6a3b      	ldr	r3, [r7, #32]
 80027ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00b      	beq.n	800280a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	f003 0308 	and.w	r3, r3, #8
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d006      	beq.n	800280a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2208      	movs	r2, #8
 8002802:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 f8eb 	bl	80029e0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800280a:	6a3b      	ldr	r3, [r7, #32]
 800280c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d07b      	beq.n	800290c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	f003 0304 	and.w	r3, r3, #4
 800281a:	2b00      	cmp	r3, #0
 800281c:	d072      	beq.n	8002904 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800281e:	6a3b      	ldr	r3, [r7, #32]
 8002820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002824:	2b00      	cmp	r3, #0
 8002826:	d008      	beq.n	800283a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	f043 0301 	orr.w	r3, r3, #1
 8002838:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002840:	2b00      	cmp	r3, #0
 8002842:	d008      	beq.n	8002856 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	f043 0302 	orr.w	r3, r3, #2
 8002854:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002856:	6a3b      	ldr	r3, [r7, #32]
 8002858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800285c:	2b00      	cmp	r3, #0
 800285e:	d008      	beq.n	8002872 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	f043 0304 	orr.w	r3, r3, #4
 8002870:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002872:	6a3b      	ldr	r3, [r7, #32]
 8002874:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002878:	2b00      	cmp	r3, #0
 800287a:	d043      	beq.n	8002904 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002882:	2b00      	cmp	r3, #0
 8002884:	d03e      	beq.n	8002904 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800288c:	2b60      	cmp	r3, #96	; 0x60
 800288e:	d02b      	beq.n	80028e8 <HAL_CAN_IRQHandler+0x32a>
 8002890:	2b60      	cmp	r3, #96	; 0x60
 8002892:	d82e      	bhi.n	80028f2 <HAL_CAN_IRQHandler+0x334>
 8002894:	2b50      	cmp	r3, #80	; 0x50
 8002896:	d022      	beq.n	80028de <HAL_CAN_IRQHandler+0x320>
 8002898:	2b50      	cmp	r3, #80	; 0x50
 800289a:	d82a      	bhi.n	80028f2 <HAL_CAN_IRQHandler+0x334>
 800289c:	2b40      	cmp	r3, #64	; 0x40
 800289e:	d019      	beq.n	80028d4 <HAL_CAN_IRQHandler+0x316>
 80028a0:	2b40      	cmp	r3, #64	; 0x40
 80028a2:	d826      	bhi.n	80028f2 <HAL_CAN_IRQHandler+0x334>
 80028a4:	2b30      	cmp	r3, #48	; 0x30
 80028a6:	d010      	beq.n	80028ca <HAL_CAN_IRQHandler+0x30c>
 80028a8:	2b30      	cmp	r3, #48	; 0x30
 80028aa:	d822      	bhi.n	80028f2 <HAL_CAN_IRQHandler+0x334>
 80028ac:	2b10      	cmp	r3, #16
 80028ae:	d002      	beq.n	80028b6 <HAL_CAN_IRQHandler+0x2f8>
 80028b0:	2b20      	cmp	r3, #32
 80028b2:	d005      	beq.n	80028c0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80028b4:	e01d      	b.n	80028f2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	f043 0308 	orr.w	r3, r3, #8
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028be:	e019      	b.n	80028f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	f043 0310 	orr.w	r3, r3, #16
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028c8:	e014      	b.n	80028f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	f043 0320 	orr.w	r3, r3, #32
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028d2:	e00f      	b.n	80028f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028dc:	e00a      	b.n	80028f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028e6:	e005      	b.n	80028f4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028f0:	e000      	b.n	80028f4 <HAL_CAN_IRQHandler+0x336>
            break;
 80028f2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	699a      	ldr	r2, [r3, #24]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002902:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2204      	movs	r2, #4
 800290a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	2b00      	cmp	r3, #0
 8002910:	d008      	beq.n	8002924 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	431a      	orrs	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 f867 	bl	80029f2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002924:	bf00      	nop
 8002926:	3728      	adds	r7, #40	; 0x28
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	bc80      	pop	{r7}
 800293c:	4770      	bx	lr

0800293e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr

08002950 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr

08002962 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr

08002974 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr

08002986 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr

08002998 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc80      	pop	{r7}
 80029a8:	4770      	bx	lr

080029aa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr

080029bc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr

080029ce <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr

080029e0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bc80      	pop	{r7}
 80029f0:	4770      	bx	lr

080029f2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr

08002a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a14:	4b0c      	ldr	r3, [pc, #48]	; (8002a48 <__NVIC_SetPriorityGrouping+0x44>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a20:	4013      	ands	r3, r2
 8002a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a36:	4a04      	ldr	r2, [pc, #16]	; (8002a48 <__NVIC_SetPriorityGrouping+0x44>)
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	60d3      	str	r3, [r2, #12]
}
 8002a3c:	bf00      	nop
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	e000ed00 	.word	0xe000ed00

08002a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a50:	4b04      	ldr	r3, [pc, #16]	; (8002a64 <__NVIC_GetPriorityGrouping+0x18>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	0a1b      	lsrs	r3, r3, #8
 8002a56:	f003 0307 	and.w	r3, r3, #7
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	e000ed00 	.word	0xe000ed00

08002a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	db0b      	blt.n	8002a92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a7a:	79fb      	ldrb	r3, [r7, #7]
 8002a7c:	f003 021f 	and.w	r2, r3, #31
 8002a80:	4906      	ldr	r1, [pc, #24]	; (8002a9c <__NVIC_EnableIRQ+0x34>)
 8002a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a86:	095b      	lsrs	r3, r3, #5
 8002a88:	2001      	movs	r0, #1
 8002a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr
 8002a9c:	e000e100 	.word	0xe000e100

08002aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	6039      	str	r1, [r7, #0]
 8002aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	db0a      	blt.n	8002aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	490c      	ldr	r1, [pc, #48]	; (8002aec <__NVIC_SetPriority+0x4c>)
 8002aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abe:	0112      	lsls	r2, r2, #4
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	440b      	add	r3, r1
 8002ac4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ac8:	e00a      	b.n	8002ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	4908      	ldr	r1, [pc, #32]	; (8002af0 <__NVIC_SetPriority+0x50>)
 8002ad0:	79fb      	ldrb	r3, [r7, #7]
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	3b04      	subs	r3, #4
 8002ad8:	0112      	lsls	r2, r2, #4
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	440b      	add	r3, r1
 8002ade:	761a      	strb	r2, [r3, #24]
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bc80      	pop	{r7}
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	e000e100 	.word	0xe000e100
 8002af0:	e000ed00 	.word	0xe000ed00

08002af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b089      	sub	sp, #36	; 0x24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f1c3 0307 	rsb	r3, r3, #7
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	bf28      	it	cs
 8002b12:	2304      	movcs	r3, #4
 8002b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	3304      	adds	r3, #4
 8002b1a:	2b06      	cmp	r3, #6
 8002b1c:	d902      	bls.n	8002b24 <NVIC_EncodePriority+0x30>
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	3b03      	subs	r3, #3
 8002b22:	e000      	b.n	8002b26 <NVIC_EncodePriority+0x32>
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b28:	f04f 32ff 	mov.w	r2, #4294967295
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43da      	mvns	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	401a      	ands	r2, r3
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	fa01 f303 	lsl.w	r3, r1, r3
 8002b46:	43d9      	mvns	r1, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b4c:	4313      	orrs	r3, r2
         );
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3724      	adds	r7, #36	; 0x24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr

08002b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f7ff ff4f 	bl	8002a04 <__NVIC_SetPriorityGrouping>
}
 8002b66:	bf00      	nop
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b086      	sub	sp, #24
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	4603      	mov	r3, r0
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	607a      	str	r2, [r7, #4]
 8002b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b80:	f7ff ff64 	bl	8002a4c <__NVIC_GetPriorityGrouping>
 8002b84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	68b9      	ldr	r1, [r7, #8]
 8002b8a:	6978      	ldr	r0, [r7, #20]
 8002b8c:	f7ff ffb2 	bl	8002af4 <NVIC_EncodePriority>
 8002b90:	4602      	mov	r2, r0
 8002b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b96:	4611      	mov	r1, r2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff ff81 	bl	8002aa0 <__NVIC_SetPriority>
}
 8002b9e:	bf00      	nop
 8002ba0:	3718      	adds	r7, #24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b082      	sub	sp, #8
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	4603      	mov	r3, r0
 8002bae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff ff57 	bl	8002a68 <__NVIC_EnableIRQ>
}
 8002bba:	bf00      	nop
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
	...

08002bc4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e043      	b.n	8002c62 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	461a      	mov	r2, r3
 8002be0:	4b22      	ldr	r3, [pc, #136]	; (8002c6c <HAL_DMA_Init+0xa8>)
 8002be2:	4413      	add	r3, r2
 8002be4:	4a22      	ldr	r2, [pc, #136]	; (8002c70 <HAL_DMA_Init+0xac>)
 8002be6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bea:	091b      	lsrs	r3, r3, #4
 8002bec:	009a      	lsls	r2, r3, #2
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a1f      	ldr	r2, [pc, #124]	; (8002c74 <HAL_DMA_Init+0xb0>)
 8002bf6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002c0e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002c12:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002c1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	695b      	ldr	r3, [r3, #20]
 8002c2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr
 8002c6c:	bffdfff8 	.word	0xbffdfff8
 8002c70:	cccccccd 	.word	0xcccccccd
 8002c74:	40020000 	.word	0x40020000

08002c78 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
 8002c84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c86:	2300      	movs	r3, #0
 8002c88:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d101      	bne.n	8002c98 <HAL_DMA_Start_IT+0x20>
 8002c94:	2302      	movs	r3, #2
 8002c96:	e04a      	b.n	8002d2e <HAL_DMA_Start_IT+0xb6>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d13a      	bne.n	8002d20 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2202      	movs	r2, #2
 8002cae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 0201 	bic.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	68b9      	ldr	r1, [r7, #8]
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 f9e8 	bl	80030a4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d008      	beq.n	8002cee <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 020e 	orr.w	r2, r2, #14
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	e00f      	b.n	8002d0e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 0204 	bic.w	r2, r2, #4
 8002cfc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f042 020a 	orr.w	r2, r2, #10
 8002d0c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f042 0201 	orr.w	r2, r2, #1
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	e005      	b.n	8002d2c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002d28:	2302      	movs	r3, #2
 8002d2a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3718      	adds	r7, #24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b085      	sub	sp, #20
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d008      	beq.n	8002d5e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2204      	movs	r2, #4
 8002d50:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e020      	b.n	8002da0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 020e 	bic.w	r2, r2, #14
 8002d6c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 0201 	bic.w	r2, r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d86:	2101      	movs	r1, #1
 8002d88:	fa01 f202 	lsl.w	r2, r1, r2
 8002d8c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bc80      	pop	{r7}
 8002da8:	4770      	bx	lr
	...

08002dac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002db4:	2300      	movs	r3, #0
 8002db6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d005      	beq.n	8002dce <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2204      	movs	r2, #4
 8002dc6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	73fb      	strb	r3, [r7, #15]
 8002dcc:	e051      	b.n	8002e72 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 020e 	bic.w	r2, r2, #14
 8002ddc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0201 	bic.w	r2, r2, #1
 8002dec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a22      	ldr	r2, [pc, #136]	; (8002e7c <HAL_DMA_Abort_IT+0xd0>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d029      	beq.n	8002e4c <HAL_DMA_Abort_IT+0xa0>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a20      	ldr	r2, [pc, #128]	; (8002e80 <HAL_DMA_Abort_IT+0xd4>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d022      	beq.n	8002e48 <HAL_DMA_Abort_IT+0x9c>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a1f      	ldr	r2, [pc, #124]	; (8002e84 <HAL_DMA_Abort_IT+0xd8>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d01a      	beq.n	8002e42 <HAL_DMA_Abort_IT+0x96>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a1d      	ldr	r2, [pc, #116]	; (8002e88 <HAL_DMA_Abort_IT+0xdc>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d012      	beq.n	8002e3c <HAL_DMA_Abort_IT+0x90>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a1c      	ldr	r2, [pc, #112]	; (8002e8c <HAL_DMA_Abort_IT+0xe0>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d00a      	beq.n	8002e36 <HAL_DMA_Abort_IT+0x8a>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a1a      	ldr	r2, [pc, #104]	; (8002e90 <HAL_DMA_Abort_IT+0xe4>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d102      	bne.n	8002e30 <HAL_DMA_Abort_IT+0x84>
 8002e2a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002e2e:	e00e      	b.n	8002e4e <HAL_DMA_Abort_IT+0xa2>
 8002e30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e34:	e00b      	b.n	8002e4e <HAL_DMA_Abort_IT+0xa2>
 8002e36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e3a:	e008      	b.n	8002e4e <HAL_DMA_Abort_IT+0xa2>
 8002e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e40:	e005      	b.n	8002e4e <HAL_DMA_Abort_IT+0xa2>
 8002e42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e46:	e002      	b.n	8002e4e <HAL_DMA_Abort_IT+0xa2>
 8002e48:	2310      	movs	r3, #16
 8002e4a:	e000      	b.n	8002e4e <HAL_DMA_Abort_IT+0xa2>
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	4a11      	ldr	r2, [pc, #68]	; (8002e94 <HAL_DMA_Abort_IT+0xe8>)
 8002e50:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	4798      	blx	r3
    } 
  }
  return status;
 8002e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	40020008 	.word	0x40020008
 8002e80:	4002001c 	.word	0x4002001c
 8002e84:	40020030 	.word	0x40020030
 8002e88:	40020044 	.word	0x40020044
 8002e8c:	40020058 	.word	0x40020058
 8002e90:	4002006c 	.word	0x4002006c
 8002e94:	40020000 	.word	0x40020000

08002e98 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb4:	2204      	movs	r2, #4
 8002eb6:	409a      	lsls	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d04f      	beq.n	8002f60 <HAL_DMA_IRQHandler+0xc8>
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	f003 0304 	and.w	r3, r3, #4
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d04a      	beq.n	8002f60 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0320 	and.w	r3, r3, #32
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d107      	bne.n	8002ee8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 0204 	bic.w	r2, r2, #4
 8002ee6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a66      	ldr	r2, [pc, #408]	; (8003088 <HAL_DMA_IRQHandler+0x1f0>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d029      	beq.n	8002f46 <HAL_DMA_IRQHandler+0xae>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a65      	ldr	r2, [pc, #404]	; (800308c <HAL_DMA_IRQHandler+0x1f4>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d022      	beq.n	8002f42 <HAL_DMA_IRQHandler+0xaa>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a63      	ldr	r2, [pc, #396]	; (8003090 <HAL_DMA_IRQHandler+0x1f8>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d01a      	beq.n	8002f3c <HAL_DMA_IRQHandler+0xa4>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a62      	ldr	r2, [pc, #392]	; (8003094 <HAL_DMA_IRQHandler+0x1fc>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d012      	beq.n	8002f36 <HAL_DMA_IRQHandler+0x9e>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a60      	ldr	r2, [pc, #384]	; (8003098 <HAL_DMA_IRQHandler+0x200>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d00a      	beq.n	8002f30 <HAL_DMA_IRQHandler+0x98>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a5f      	ldr	r2, [pc, #380]	; (800309c <HAL_DMA_IRQHandler+0x204>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d102      	bne.n	8002f2a <HAL_DMA_IRQHandler+0x92>
 8002f24:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002f28:	e00e      	b.n	8002f48 <HAL_DMA_IRQHandler+0xb0>
 8002f2a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002f2e:	e00b      	b.n	8002f48 <HAL_DMA_IRQHandler+0xb0>
 8002f30:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f34:	e008      	b.n	8002f48 <HAL_DMA_IRQHandler+0xb0>
 8002f36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f3a:	e005      	b.n	8002f48 <HAL_DMA_IRQHandler+0xb0>
 8002f3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f40:	e002      	b.n	8002f48 <HAL_DMA_IRQHandler+0xb0>
 8002f42:	2340      	movs	r3, #64	; 0x40
 8002f44:	e000      	b.n	8002f48 <HAL_DMA_IRQHandler+0xb0>
 8002f46:	2304      	movs	r3, #4
 8002f48:	4a55      	ldr	r2, [pc, #340]	; (80030a0 <HAL_DMA_IRQHandler+0x208>)
 8002f4a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 8094 	beq.w	800307e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002f5e:	e08e      	b.n	800307e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	2202      	movs	r2, #2
 8002f66:	409a      	lsls	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d056      	beq.n	800301e <HAL_DMA_IRQHandler+0x186>
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d051      	beq.n	800301e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0320 	and.w	r3, r3, #32
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10b      	bne.n	8002fa0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 020a 	bic.w	r2, r2, #10
 8002f96:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a38      	ldr	r2, [pc, #224]	; (8003088 <HAL_DMA_IRQHandler+0x1f0>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d029      	beq.n	8002ffe <HAL_DMA_IRQHandler+0x166>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a37      	ldr	r2, [pc, #220]	; (800308c <HAL_DMA_IRQHandler+0x1f4>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d022      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x162>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a35      	ldr	r2, [pc, #212]	; (8003090 <HAL_DMA_IRQHandler+0x1f8>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d01a      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x15c>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a34      	ldr	r2, [pc, #208]	; (8003094 <HAL_DMA_IRQHandler+0x1fc>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d012      	beq.n	8002fee <HAL_DMA_IRQHandler+0x156>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a32      	ldr	r2, [pc, #200]	; (8003098 <HAL_DMA_IRQHandler+0x200>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d00a      	beq.n	8002fe8 <HAL_DMA_IRQHandler+0x150>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a31      	ldr	r2, [pc, #196]	; (800309c <HAL_DMA_IRQHandler+0x204>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d102      	bne.n	8002fe2 <HAL_DMA_IRQHandler+0x14a>
 8002fdc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002fe0:	e00e      	b.n	8003000 <HAL_DMA_IRQHandler+0x168>
 8002fe2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fe6:	e00b      	b.n	8003000 <HAL_DMA_IRQHandler+0x168>
 8002fe8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fec:	e008      	b.n	8003000 <HAL_DMA_IRQHandler+0x168>
 8002fee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ff2:	e005      	b.n	8003000 <HAL_DMA_IRQHandler+0x168>
 8002ff4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ff8:	e002      	b.n	8003000 <HAL_DMA_IRQHandler+0x168>
 8002ffa:	2320      	movs	r3, #32
 8002ffc:	e000      	b.n	8003000 <HAL_DMA_IRQHandler+0x168>
 8002ffe:	2302      	movs	r3, #2
 8003000:	4a27      	ldr	r2, [pc, #156]	; (80030a0 <HAL_DMA_IRQHandler+0x208>)
 8003002:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003010:	2b00      	cmp	r3, #0
 8003012:	d034      	beq.n	800307e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800301c:	e02f      	b.n	800307e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	2208      	movs	r2, #8
 8003024:	409a      	lsls	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	4013      	ands	r3, r2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d028      	beq.n	8003080 <HAL_DMA_IRQHandler+0x1e8>
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	f003 0308 	and.w	r3, r3, #8
 8003034:	2b00      	cmp	r3, #0
 8003036:	d023      	beq.n	8003080 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 020e 	bic.w	r2, r2, #14
 8003046:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003050:	2101      	movs	r1, #1
 8003052:	fa01 f202 	lsl.w	r2, r1, r2
 8003056:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003072:	2b00      	cmp	r3, #0
 8003074:	d004      	beq.n	8003080 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	4798      	blx	r3
    }
  }
  return;
 800307e:	bf00      	nop
 8003080:	bf00      	nop
}
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40020008 	.word	0x40020008
 800308c:	4002001c 	.word	0x4002001c
 8003090:	40020030 	.word	0x40020030
 8003094:	40020044 	.word	0x40020044
 8003098:	40020058 	.word	0x40020058
 800309c:	4002006c 	.word	0x4002006c
 80030a0:	40020000 	.word	0x40020000

080030a4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
 80030b0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ba:	2101      	movs	r1, #1
 80030bc:	fa01 f202 	lsl.w	r2, r1, r2
 80030c0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b10      	cmp	r3, #16
 80030d0:	d108      	bne.n	80030e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68ba      	ldr	r2, [r7, #8]
 80030e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80030e2:	e007      	b.n	80030f4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68ba      	ldr	r2, [r7, #8]
 80030ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	60da      	str	r2, [r3, #12]
}
 80030f4:	bf00      	nop
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bc80      	pop	{r7}
 80030fc:	4770      	bx	lr
	...

08003100 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003100:	b480      	push	{r7}
 8003102:	b08b      	sub	sp, #44	; 0x2c
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800310a:	2300      	movs	r3, #0
 800310c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800310e:	2300      	movs	r3, #0
 8003110:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003112:	e169      	b.n	80033e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003114:	2201      	movs	r2, #1
 8003116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	69fa      	ldr	r2, [r7, #28]
 8003124:	4013      	ands	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	429a      	cmp	r2, r3
 800312e:	f040 8158 	bne.w	80033e2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	4a9a      	ldr	r2, [pc, #616]	; (80033a0 <HAL_GPIO_Init+0x2a0>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d05e      	beq.n	80031fa <HAL_GPIO_Init+0xfa>
 800313c:	4a98      	ldr	r2, [pc, #608]	; (80033a0 <HAL_GPIO_Init+0x2a0>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d875      	bhi.n	800322e <HAL_GPIO_Init+0x12e>
 8003142:	4a98      	ldr	r2, [pc, #608]	; (80033a4 <HAL_GPIO_Init+0x2a4>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d058      	beq.n	80031fa <HAL_GPIO_Init+0xfa>
 8003148:	4a96      	ldr	r2, [pc, #600]	; (80033a4 <HAL_GPIO_Init+0x2a4>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d86f      	bhi.n	800322e <HAL_GPIO_Init+0x12e>
 800314e:	4a96      	ldr	r2, [pc, #600]	; (80033a8 <HAL_GPIO_Init+0x2a8>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d052      	beq.n	80031fa <HAL_GPIO_Init+0xfa>
 8003154:	4a94      	ldr	r2, [pc, #592]	; (80033a8 <HAL_GPIO_Init+0x2a8>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d869      	bhi.n	800322e <HAL_GPIO_Init+0x12e>
 800315a:	4a94      	ldr	r2, [pc, #592]	; (80033ac <HAL_GPIO_Init+0x2ac>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d04c      	beq.n	80031fa <HAL_GPIO_Init+0xfa>
 8003160:	4a92      	ldr	r2, [pc, #584]	; (80033ac <HAL_GPIO_Init+0x2ac>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d863      	bhi.n	800322e <HAL_GPIO_Init+0x12e>
 8003166:	4a92      	ldr	r2, [pc, #584]	; (80033b0 <HAL_GPIO_Init+0x2b0>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d046      	beq.n	80031fa <HAL_GPIO_Init+0xfa>
 800316c:	4a90      	ldr	r2, [pc, #576]	; (80033b0 <HAL_GPIO_Init+0x2b0>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d85d      	bhi.n	800322e <HAL_GPIO_Init+0x12e>
 8003172:	2b12      	cmp	r3, #18
 8003174:	d82a      	bhi.n	80031cc <HAL_GPIO_Init+0xcc>
 8003176:	2b12      	cmp	r3, #18
 8003178:	d859      	bhi.n	800322e <HAL_GPIO_Init+0x12e>
 800317a:	a201      	add	r2, pc, #4	; (adr r2, 8003180 <HAL_GPIO_Init+0x80>)
 800317c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003180:	080031fb 	.word	0x080031fb
 8003184:	080031d5 	.word	0x080031d5
 8003188:	080031e7 	.word	0x080031e7
 800318c:	08003229 	.word	0x08003229
 8003190:	0800322f 	.word	0x0800322f
 8003194:	0800322f 	.word	0x0800322f
 8003198:	0800322f 	.word	0x0800322f
 800319c:	0800322f 	.word	0x0800322f
 80031a0:	0800322f 	.word	0x0800322f
 80031a4:	0800322f 	.word	0x0800322f
 80031a8:	0800322f 	.word	0x0800322f
 80031ac:	0800322f 	.word	0x0800322f
 80031b0:	0800322f 	.word	0x0800322f
 80031b4:	0800322f 	.word	0x0800322f
 80031b8:	0800322f 	.word	0x0800322f
 80031bc:	0800322f 	.word	0x0800322f
 80031c0:	0800322f 	.word	0x0800322f
 80031c4:	080031dd 	.word	0x080031dd
 80031c8:	080031f1 	.word	0x080031f1
 80031cc:	4a79      	ldr	r2, [pc, #484]	; (80033b4 <HAL_GPIO_Init+0x2b4>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d013      	beq.n	80031fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80031d2:	e02c      	b.n	800322e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	623b      	str	r3, [r7, #32]
          break;
 80031da:	e029      	b.n	8003230 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	3304      	adds	r3, #4
 80031e2:	623b      	str	r3, [r7, #32]
          break;
 80031e4:	e024      	b.n	8003230 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	3308      	adds	r3, #8
 80031ec:	623b      	str	r3, [r7, #32]
          break;
 80031ee:	e01f      	b.n	8003230 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	330c      	adds	r3, #12
 80031f6:	623b      	str	r3, [r7, #32]
          break;
 80031f8:	e01a      	b.n	8003230 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d102      	bne.n	8003208 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003202:	2304      	movs	r3, #4
 8003204:	623b      	str	r3, [r7, #32]
          break;
 8003206:	e013      	b.n	8003230 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d105      	bne.n	800321c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003210:	2308      	movs	r3, #8
 8003212:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	69fa      	ldr	r2, [r7, #28]
 8003218:	611a      	str	r2, [r3, #16]
          break;
 800321a:	e009      	b.n	8003230 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800321c:	2308      	movs	r3, #8
 800321e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	69fa      	ldr	r2, [r7, #28]
 8003224:	615a      	str	r2, [r3, #20]
          break;
 8003226:	e003      	b.n	8003230 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003228:	2300      	movs	r3, #0
 800322a:	623b      	str	r3, [r7, #32]
          break;
 800322c:	e000      	b.n	8003230 <HAL_GPIO_Init+0x130>
          break;
 800322e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	2bff      	cmp	r3, #255	; 0xff
 8003234:	d801      	bhi.n	800323a <HAL_GPIO_Init+0x13a>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	e001      	b.n	800323e <HAL_GPIO_Init+0x13e>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	3304      	adds	r3, #4
 800323e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	2bff      	cmp	r3, #255	; 0xff
 8003244:	d802      	bhi.n	800324c <HAL_GPIO_Init+0x14c>
 8003246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	e002      	b.n	8003252 <HAL_GPIO_Init+0x152>
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	3b08      	subs	r3, #8
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	210f      	movs	r1, #15
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	fa01 f303 	lsl.w	r3, r1, r3
 8003260:	43db      	mvns	r3, r3
 8003262:	401a      	ands	r2, r3
 8003264:	6a39      	ldr	r1, [r7, #32]
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	fa01 f303 	lsl.w	r3, r1, r3
 800326c:	431a      	orrs	r2, r3
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	f000 80b1 	beq.w	80033e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003280:	4b4d      	ldr	r3, [pc, #308]	; (80033b8 <HAL_GPIO_Init+0x2b8>)
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	4a4c      	ldr	r2, [pc, #304]	; (80033b8 <HAL_GPIO_Init+0x2b8>)
 8003286:	f043 0301 	orr.w	r3, r3, #1
 800328a:	6193      	str	r3, [r2, #24]
 800328c:	4b4a      	ldr	r3, [pc, #296]	; (80033b8 <HAL_GPIO_Init+0x2b8>)
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	f003 0301 	and.w	r3, r3, #1
 8003294:	60bb      	str	r3, [r7, #8]
 8003296:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003298:	4a48      	ldr	r2, [pc, #288]	; (80033bc <HAL_GPIO_Init+0x2bc>)
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	089b      	lsrs	r3, r3, #2
 800329e:	3302      	adds	r3, #2
 80032a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80032a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a8:	f003 0303 	and.w	r3, r3, #3
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	220f      	movs	r2, #15
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	43db      	mvns	r3, r3
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	4013      	ands	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a40      	ldr	r2, [pc, #256]	; (80033c0 <HAL_GPIO_Init+0x2c0>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d013      	beq.n	80032ec <HAL_GPIO_Init+0x1ec>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a3f      	ldr	r2, [pc, #252]	; (80033c4 <HAL_GPIO_Init+0x2c4>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d00d      	beq.n	80032e8 <HAL_GPIO_Init+0x1e8>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a3e      	ldr	r2, [pc, #248]	; (80033c8 <HAL_GPIO_Init+0x2c8>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d007      	beq.n	80032e4 <HAL_GPIO_Init+0x1e4>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a3d      	ldr	r2, [pc, #244]	; (80033cc <HAL_GPIO_Init+0x2cc>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d101      	bne.n	80032e0 <HAL_GPIO_Init+0x1e0>
 80032dc:	2303      	movs	r3, #3
 80032de:	e006      	b.n	80032ee <HAL_GPIO_Init+0x1ee>
 80032e0:	2304      	movs	r3, #4
 80032e2:	e004      	b.n	80032ee <HAL_GPIO_Init+0x1ee>
 80032e4:	2302      	movs	r3, #2
 80032e6:	e002      	b.n	80032ee <HAL_GPIO_Init+0x1ee>
 80032e8:	2301      	movs	r3, #1
 80032ea:	e000      	b.n	80032ee <HAL_GPIO_Init+0x1ee>
 80032ec:	2300      	movs	r3, #0
 80032ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032f0:	f002 0203 	and.w	r2, r2, #3
 80032f4:	0092      	lsls	r2, r2, #2
 80032f6:	4093      	lsls	r3, r2
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80032fe:	492f      	ldr	r1, [pc, #188]	; (80033bc <HAL_GPIO_Init+0x2bc>)
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	089b      	lsrs	r3, r3, #2
 8003304:	3302      	adds	r3, #2
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d006      	beq.n	8003326 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003318:	4b2d      	ldr	r3, [pc, #180]	; (80033d0 <HAL_GPIO_Init+0x2d0>)
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	492c      	ldr	r1, [pc, #176]	; (80033d0 <HAL_GPIO_Init+0x2d0>)
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	4313      	orrs	r3, r2
 8003322:	600b      	str	r3, [r1, #0]
 8003324:	e006      	b.n	8003334 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003326:	4b2a      	ldr	r3, [pc, #168]	; (80033d0 <HAL_GPIO_Init+0x2d0>)
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	43db      	mvns	r3, r3
 800332e:	4928      	ldr	r1, [pc, #160]	; (80033d0 <HAL_GPIO_Init+0x2d0>)
 8003330:	4013      	ands	r3, r2
 8003332:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d006      	beq.n	800334e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003340:	4b23      	ldr	r3, [pc, #140]	; (80033d0 <HAL_GPIO_Init+0x2d0>)
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	4922      	ldr	r1, [pc, #136]	; (80033d0 <HAL_GPIO_Init+0x2d0>)
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	4313      	orrs	r3, r2
 800334a:	604b      	str	r3, [r1, #4]
 800334c:	e006      	b.n	800335c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800334e:	4b20      	ldr	r3, [pc, #128]	; (80033d0 <HAL_GPIO_Init+0x2d0>)
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	43db      	mvns	r3, r3
 8003356:	491e      	ldr	r1, [pc, #120]	; (80033d0 <HAL_GPIO_Init+0x2d0>)
 8003358:	4013      	ands	r3, r2
 800335a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d006      	beq.n	8003376 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003368:	4b19      	ldr	r3, [pc, #100]	; (80033d0 <HAL_GPIO_Init+0x2d0>)
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	4918      	ldr	r1, [pc, #96]	; (80033d0 <HAL_GPIO_Init+0x2d0>)
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	4313      	orrs	r3, r2
 8003372:	608b      	str	r3, [r1, #8]
 8003374:	e006      	b.n	8003384 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003376:	4b16      	ldr	r3, [pc, #88]	; (80033d0 <HAL_GPIO_Init+0x2d0>)
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	43db      	mvns	r3, r3
 800337e:	4914      	ldr	r1, [pc, #80]	; (80033d0 <HAL_GPIO_Init+0x2d0>)
 8003380:	4013      	ands	r3, r2
 8003382:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d021      	beq.n	80033d4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003390:	4b0f      	ldr	r3, [pc, #60]	; (80033d0 <HAL_GPIO_Init+0x2d0>)
 8003392:	68da      	ldr	r2, [r3, #12]
 8003394:	490e      	ldr	r1, [pc, #56]	; (80033d0 <HAL_GPIO_Init+0x2d0>)
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	4313      	orrs	r3, r2
 800339a:	60cb      	str	r3, [r1, #12]
 800339c:	e021      	b.n	80033e2 <HAL_GPIO_Init+0x2e2>
 800339e:	bf00      	nop
 80033a0:	10320000 	.word	0x10320000
 80033a4:	10310000 	.word	0x10310000
 80033a8:	10220000 	.word	0x10220000
 80033ac:	10210000 	.word	0x10210000
 80033b0:	10120000 	.word	0x10120000
 80033b4:	10110000 	.word	0x10110000
 80033b8:	40021000 	.word	0x40021000
 80033bc:	40010000 	.word	0x40010000
 80033c0:	40010800 	.word	0x40010800
 80033c4:	40010c00 	.word	0x40010c00
 80033c8:	40011000 	.word	0x40011000
 80033cc:	40011400 	.word	0x40011400
 80033d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80033d4:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <HAL_GPIO_Init+0x304>)
 80033d6:	68da      	ldr	r2, [r3, #12]
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	43db      	mvns	r3, r3
 80033dc:	4909      	ldr	r1, [pc, #36]	; (8003404 <HAL_GPIO_Init+0x304>)
 80033de:	4013      	ands	r3, r2
 80033e0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	3301      	adds	r3, #1
 80033e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ee:	fa22 f303 	lsr.w	r3, r2, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f47f ae8e 	bne.w	8003114 <HAL_GPIO_Init+0x14>
  }
}
 80033f8:	bf00      	nop
 80033fa:	bf00      	nop
 80033fc:	372c      	adds	r7, #44	; 0x2c
 80033fe:	46bd      	mov	sp, r7
 8003400:	bc80      	pop	{r7}
 8003402:	4770      	bx	lr
 8003404:	40010400 	.word	0x40010400

08003408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	460b      	mov	r3, r1
 8003412:	807b      	strh	r3, [r7, #2]
 8003414:	4613      	mov	r3, r2
 8003416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003418:	787b      	ldrb	r3, [r7, #1]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800341e:	887a      	ldrh	r2, [r7, #2]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003424:	e003      	b.n	800342e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003426:	887b      	ldrh	r3, [r7, #2]
 8003428:	041a      	lsls	r2, r3, #16
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	611a      	str	r2, [r3, #16]
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	bc80      	pop	{r7}
 8003436:	4770      	bx	lr

08003438 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	460b      	mov	r3, r1
 8003442:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800344a:	887a      	ldrh	r2, [r7, #2]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4013      	ands	r3, r2
 8003450:	041a      	lsls	r2, r3, #16
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	43d9      	mvns	r1, r3
 8003456:	887b      	ldrh	r3, [r7, #2]
 8003458:	400b      	ands	r3, r1
 800345a:	431a      	orrs	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	611a      	str	r2, [r3, #16]
}
 8003460:	bf00      	nop
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	bc80      	pop	{r7}
 8003468:	4770      	bx	lr
	...

0800346c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e12b      	b.n	80036d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d106      	bne.n	8003498 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f7fe f91a 	bl	80016cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2224      	movs	r2, #36	; 0x24
 800349c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0201 	bic.w	r2, r2, #1
 80034ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034d0:	f001 fba0 	bl	8004c14 <HAL_RCC_GetPCLK1Freq>
 80034d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	4a81      	ldr	r2, [pc, #516]	; (80036e0 <HAL_I2C_Init+0x274>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d807      	bhi.n	80034f0 <HAL_I2C_Init+0x84>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4a80      	ldr	r2, [pc, #512]	; (80036e4 <HAL_I2C_Init+0x278>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	bf94      	ite	ls
 80034e8:	2301      	movls	r3, #1
 80034ea:	2300      	movhi	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	e006      	b.n	80034fe <HAL_I2C_Init+0x92>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4a7d      	ldr	r2, [pc, #500]	; (80036e8 <HAL_I2C_Init+0x27c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	bf94      	ite	ls
 80034f8:	2301      	movls	r3, #1
 80034fa:	2300      	movhi	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e0e7      	b.n	80036d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4a78      	ldr	r2, [pc, #480]	; (80036ec <HAL_I2C_Init+0x280>)
 800350a:	fba2 2303 	umull	r2, r3, r2, r3
 800350e:	0c9b      	lsrs	r3, r3, #18
 8003510:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	430a      	orrs	r2, r1
 8003524:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	4a6a      	ldr	r2, [pc, #424]	; (80036e0 <HAL_I2C_Init+0x274>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d802      	bhi.n	8003540 <HAL_I2C_Init+0xd4>
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	3301      	adds	r3, #1
 800353e:	e009      	b.n	8003554 <HAL_I2C_Init+0xe8>
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003546:	fb02 f303 	mul.w	r3, r2, r3
 800354a:	4a69      	ldr	r2, [pc, #420]	; (80036f0 <HAL_I2C_Init+0x284>)
 800354c:	fba2 2303 	umull	r2, r3, r2, r3
 8003550:	099b      	lsrs	r3, r3, #6
 8003552:	3301      	adds	r3, #1
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6812      	ldr	r2, [r2, #0]
 8003558:	430b      	orrs	r3, r1
 800355a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003566:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	495c      	ldr	r1, [pc, #368]	; (80036e0 <HAL_I2C_Init+0x274>)
 8003570:	428b      	cmp	r3, r1
 8003572:	d819      	bhi.n	80035a8 <HAL_I2C_Init+0x13c>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	1e59      	subs	r1, r3, #1
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003582:	1c59      	adds	r1, r3, #1
 8003584:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003588:	400b      	ands	r3, r1
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00a      	beq.n	80035a4 <HAL_I2C_Init+0x138>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	1e59      	subs	r1, r3, #1
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	fbb1 f3f3 	udiv	r3, r1, r3
 800359c:	3301      	adds	r3, #1
 800359e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035a2:	e051      	b.n	8003648 <HAL_I2C_Init+0x1dc>
 80035a4:	2304      	movs	r3, #4
 80035a6:	e04f      	b.n	8003648 <HAL_I2C_Init+0x1dc>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d111      	bne.n	80035d4 <HAL_I2C_Init+0x168>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	1e58      	subs	r0, r3, #1
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6859      	ldr	r1, [r3, #4]
 80035b8:	460b      	mov	r3, r1
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	440b      	add	r3, r1
 80035be:	fbb0 f3f3 	udiv	r3, r0, r3
 80035c2:	3301      	adds	r3, #1
 80035c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	bf0c      	ite	eq
 80035cc:	2301      	moveq	r3, #1
 80035ce:	2300      	movne	r3, #0
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	e012      	b.n	80035fa <HAL_I2C_Init+0x18e>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	1e58      	subs	r0, r3, #1
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6859      	ldr	r1, [r3, #4]
 80035dc:	460b      	mov	r3, r1
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	0099      	lsls	r1, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ea:	3301      	adds	r3, #1
 80035ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	bf0c      	ite	eq
 80035f4:	2301      	moveq	r3, #1
 80035f6:	2300      	movne	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <HAL_I2C_Init+0x196>
 80035fe:	2301      	movs	r3, #1
 8003600:	e022      	b.n	8003648 <HAL_I2C_Init+0x1dc>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10e      	bne.n	8003628 <HAL_I2C_Init+0x1bc>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	1e58      	subs	r0, r3, #1
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6859      	ldr	r1, [r3, #4]
 8003612:	460b      	mov	r3, r1
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	440b      	add	r3, r1
 8003618:	fbb0 f3f3 	udiv	r3, r0, r3
 800361c:	3301      	adds	r3, #1
 800361e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003626:	e00f      	b.n	8003648 <HAL_I2C_Init+0x1dc>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	1e58      	subs	r0, r3, #1
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6859      	ldr	r1, [r3, #4]
 8003630:	460b      	mov	r3, r1
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	0099      	lsls	r1, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	fbb0 f3f3 	udiv	r3, r0, r3
 800363e:	3301      	adds	r3, #1
 8003640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003644:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	6809      	ldr	r1, [r1, #0]
 800364c:	4313      	orrs	r3, r2
 800364e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69da      	ldr	r2, [r3, #28]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	431a      	orrs	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003676:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6911      	ldr	r1, [r2, #16]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	68d2      	ldr	r2, [r2, #12]
 8003682:	4311      	orrs	r1, r2
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6812      	ldr	r2, [r2, #0]
 8003688:	430b      	orrs	r3, r1
 800368a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	695a      	ldr	r2, [r3, #20]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0201 	orr.w	r2, r2, #1
 80036b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2220      	movs	r2, #32
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	000186a0 	.word	0x000186a0
 80036e4:	001e847f 	.word	0x001e847f
 80036e8:	003d08ff 	.word	0x003d08ff
 80036ec:	431bde83 	.word	0x431bde83
 80036f0:	10624dd3 	.word	0x10624dd3

080036f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b088      	sub	sp, #32
 80036f8:	af02      	add	r7, sp, #8
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	4608      	mov	r0, r1
 80036fe:	4611      	mov	r1, r2
 8003700:	461a      	mov	r2, r3
 8003702:	4603      	mov	r3, r0
 8003704:	817b      	strh	r3, [r7, #10]
 8003706:	460b      	mov	r3, r1
 8003708:	813b      	strh	r3, [r7, #8]
 800370a:	4613      	mov	r3, r2
 800370c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800370e:	f7fe fae7 	bl	8001ce0 <HAL_GetTick>
 8003712:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b20      	cmp	r3, #32
 800371e:	f040 80d9 	bne.w	80038d4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	2319      	movs	r3, #25
 8003728:	2201      	movs	r2, #1
 800372a:	496d      	ldr	r1, [pc, #436]	; (80038e0 <HAL_I2C_Mem_Write+0x1ec>)
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f000 fcc1 	bl	80040b4 <I2C_WaitOnFlagUntilTimeout>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003738:	2302      	movs	r3, #2
 800373a:	e0cc      	b.n	80038d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <HAL_I2C_Mem_Write+0x56>
 8003746:	2302      	movs	r3, #2
 8003748:	e0c5      	b.n	80038d6 <HAL_I2C_Mem_Write+0x1e2>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b01      	cmp	r3, #1
 800375e:	d007      	beq.n	8003770 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f042 0201 	orr.w	r2, r2, #1
 800376e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800377e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2221      	movs	r2, #33	; 0x21
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2240      	movs	r2, #64	; 0x40
 800378c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6a3a      	ldr	r2, [r7, #32]
 800379a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80037a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4a4d      	ldr	r2, [pc, #308]	; (80038e4 <HAL_I2C_Mem_Write+0x1f0>)
 80037b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037b2:	88f8      	ldrh	r0, [r7, #6]
 80037b4:	893a      	ldrh	r2, [r7, #8]
 80037b6:	8979      	ldrh	r1, [r7, #10]
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	9301      	str	r3, [sp, #4]
 80037bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	4603      	mov	r3, r0
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 faf8 	bl	8003db8 <I2C_RequestMemoryWrite>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d052      	beq.n	8003874 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e081      	b.n	80038d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 fd42 	bl	8004260 <I2C_WaitOnTXEFlagUntilTimeout>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00d      	beq.n	80037fe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d107      	bne.n	80037fa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e06b      	b.n	80038d6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003802:	781a      	ldrb	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380e:	1c5a      	adds	r2, r3, #1
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003818:	3b01      	subs	r3, #1
 800381a:	b29a      	uxth	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003824:	b29b      	uxth	r3, r3
 8003826:	3b01      	subs	r3, #1
 8003828:	b29a      	uxth	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b04      	cmp	r3, #4
 800383a:	d11b      	bne.n	8003874 <HAL_I2C_Mem_Write+0x180>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003840:	2b00      	cmp	r3, #0
 8003842:	d017      	beq.n	8003874 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	781a      	ldrb	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	1c5a      	adds	r2, r3, #1
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385e:	3b01      	subs	r3, #1
 8003860:	b29a      	uxth	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386a:	b29b      	uxth	r3, r3
 800386c:	3b01      	subs	r3, #1
 800386e:	b29a      	uxth	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1aa      	bne.n	80037d2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f000 fd2e 	bl	80042e2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00d      	beq.n	80038a8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003890:	2b04      	cmp	r3, #4
 8003892:	d107      	bne.n	80038a4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038a2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e016      	b.n	80038d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80038d0:	2300      	movs	r3, #0
 80038d2:	e000      	b.n	80038d6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80038d4:	2302      	movs	r3, #2
  }
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	00100002 	.word	0x00100002
 80038e4:	ffff0000 	.word	0xffff0000

080038e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08c      	sub	sp, #48	; 0x30
 80038ec:	af02      	add	r7, sp, #8
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	4608      	mov	r0, r1
 80038f2:	4611      	mov	r1, r2
 80038f4:	461a      	mov	r2, r3
 80038f6:	4603      	mov	r3, r0
 80038f8:	817b      	strh	r3, [r7, #10]
 80038fa:	460b      	mov	r3, r1
 80038fc:	813b      	strh	r3, [r7, #8]
 80038fe:	4613      	mov	r3, r2
 8003900:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003902:	2300      	movs	r3, #0
 8003904:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003906:	f7fe f9eb 	bl	8001ce0 <HAL_GetTick>
 800390a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b20      	cmp	r3, #32
 8003916:	f040 8244 	bne.w	8003da2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	2319      	movs	r3, #25
 8003920:	2201      	movs	r2, #1
 8003922:	4982      	ldr	r1, [pc, #520]	; (8003b2c <HAL_I2C_Mem_Read+0x244>)
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f000 fbc5 	bl	80040b4 <I2C_WaitOnFlagUntilTimeout>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003930:	2302      	movs	r3, #2
 8003932:	e237      	b.n	8003da4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800393a:	2b01      	cmp	r3, #1
 800393c:	d101      	bne.n	8003942 <HAL_I2C_Mem_Read+0x5a>
 800393e:	2302      	movs	r3, #2
 8003940:	e230      	b.n	8003da4 <HAL_I2C_Mem_Read+0x4bc>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0301 	and.w	r3, r3, #1
 8003954:	2b01      	cmp	r3, #1
 8003956:	d007      	beq.n	8003968 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 0201 	orr.w	r2, r2, #1
 8003966:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003976:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2222      	movs	r2, #34	; 0x22
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2240      	movs	r2, #64	; 0x40
 8003984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003992:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003998:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399e:	b29a      	uxth	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4a62      	ldr	r2, [pc, #392]	; (8003b30 <HAL_I2C_Mem_Read+0x248>)
 80039a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039aa:	88f8      	ldrh	r0, [r7, #6]
 80039ac:	893a      	ldrh	r2, [r7, #8]
 80039ae:	8979      	ldrh	r1, [r7, #10]
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	9301      	str	r3, [sp, #4]
 80039b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b6:	9300      	str	r3, [sp, #0]
 80039b8:	4603      	mov	r3, r0
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 fa92 	bl	8003ee4 <I2C_RequestMemoryRead>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e1ec      	b.n	8003da4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d113      	bne.n	80039fa <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039d2:	2300      	movs	r3, #0
 80039d4:	61fb      	str	r3, [r7, #28]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	61fb      	str	r3, [r7, #28]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	61fb      	str	r3, [r7, #28]
 80039e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	e1c0      	b.n	8003d7c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d11e      	bne.n	8003a40 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a10:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a12:	b672      	cpsid	i
}
 8003a14:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a16:	2300      	movs	r3, #0
 8003a18:	61bb      	str	r3, [r7, #24]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	61bb      	str	r3, [r7, #24]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	61bb      	str	r3, [r7, #24]
 8003a2a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a3a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003a3c:	b662      	cpsie	i
}
 8003a3e:	e035      	b.n	8003aac <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d11e      	bne.n	8003a86 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a56:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a58:	b672      	cpsid	i
}
 8003a5a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	617b      	str	r3, [r7, #20]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	617b      	str	r3, [r7, #20]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	617b      	str	r3, [r7, #20]
 8003a70:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a80:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003a82:	b662      	cpsie	i
}
 8003a84:	e012      	b.n	8003aac <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a94:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a96:	2300      	movs	r3, #0
 8003a98:	613b      	str	r3, [r7, #16]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	613b      	str	r3, [r7, #16]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	613b      	str	r3, [r7, #16]
 8003aaa:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003aac:	e166      	b.n	8003d7c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab2:	2b03      	cmp	r3, #3
 8003ab4:	f200 811f 	bhi.w	8003cf6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d123      	bne.n	8003b08 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f000 fc4d 	bl	8004364 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e167      	b.n	8003da4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	691a      	ldr	r2, [r3, #16]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	b2d2      	uxtb	r2, r2
 8003ae0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	1c5a      	adds	r2, r3, #1
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	3b01      	subs	r3, #1
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b06:	e139      	b.n	8003d7c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d152      	bne.n	8003bb6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b16:	2200      	movs	r2, #0
 8003b18:	4906      	ldr	r1, [pc, #24]	; (8003b34 <HAL_I2C_Mem_Read+0x24c>)
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 faca 	bl	80040b4 <I2C_WaitOnFlagUntilTimeout>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d008      	beq.n	8003b38 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e13c      	b.n	8003da4 <HAL_I2C_Mem_Read+0x4bc>
 8003b2a:	bf00      	nop
 8003b2c:	00100002 	.word	0x00100002
 8003b30:	ffff0000 	.word	0xffff0000
 8003b34:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003b38:	b672      	cpsid	i
}
 8003b3a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	691a      	ldr	r2, [r3, #16]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5e:	1c5a      	adds	r2, r3, #1
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	3b01      	subs	r3, #1
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003b7e:	b662      	cpsie	i
}
 8003b80:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	691a      	ldr	r2, [r3, #16]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8c:	b2d2      	uxtb	r2, r2
 8003b8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	3b01      	subs	r3, #1
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bb4:	e0e2      	b.n	8003d7c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	497b      	ldr	r1, [pc, #492]	; (8003dac <HAL_I2C_Mem_Read+0x4c4>)
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f000 fa77 	bl	80040b4 <I2C_WaitOnFlagUntilTimeout>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e0e9      	b.n	8003da4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bde:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003be0:	b672      	cpsid	i
}
 8003be2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	691a      	ldr	r2, [r3, #16]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	b2d2      	uxtb	r2, r2
 8003bf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	1c5a      	adds	r2, r3, #1
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c00:	3b01      	subs	r3, #1
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003c16:	4b66      	ldr	r3, [pc, #408]	; (8003db0 <HAL_I2C_Mem_Read+0x4c8>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	08db      	lsrs	r3, r3, #3
 8003c1c:	4a65      	ldr	r2, [pc, #404]	; (8003db4 <HAL_I2C_Mem_Read+0x4cc>)
 8003c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c22:	0a1a      	lsrs	r2, r3, #8
 8003c24:	4613      	mov	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4413      	add	r3, r2
 8003c2a:	00da      	lsls	r2, r3, #3
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003c30:	6a3b      	ldr	r3, [r7, #32]
 8003c32:	3b01      	subs	r3, #1
 8003c34:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d118      	bne.n	8003c6e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2220      	movs	r2, #32
 8003c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	f043 0220 	orr.w	r2, r3, #32
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003c5e:	b662      	cpsie	i
}
 8003c60:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e09a      	b.n	8003da4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	f003 0304 	and.w	r3, r3, #4
 8003c78:	2b04      	cmp	r3, #4
 8003c7a:	d1d9      	bne.n	8003c30 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	691a      	ldr	r2, [r3, #16]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c96:	b2d2      	uxtb	r2, r2
 8003c98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9e:	1c5a      	adds	r2, r3, #1
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003cbe:	b662      	cpsie	i
}
 8003cc0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	691a      	ldr	r2, [r3, #16]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	b2d2      	uxtb	r2, r2
 8003cce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	1c5a      	adds	r2, r3, #1
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	3b01      	subs	r3, #1
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cf4:	e042      	b.n	8003d7c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f000 fb32 	bl	8004364 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e04c      	b.n	8003da4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	691a      	ldr	r2, [r3, #16]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d14:	b2d2      	uxtb	r2, r2
 8003d16:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	1c5a      	adds	r2, r3, #1
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d26:	3b01      	subs	r3, #1
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	f003 0304 	and.w	r3, r3, #4
 8003d46:	2b04      	cmp	r3, #4
 8003d48:	d118      	bne.n	8003d7c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	691a      	ldr	r2, [r3, #16]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	b2d2      	uxtb	r2, r2
 8003d56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d66:	3b01      	subs	r3, #1
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	3b01      	subs	r3, #1
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f47f ae94 	bne.w	8003aae <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	e000      	b.n	8003da4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003da2:	2302      	movs	r3, #2
  }
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3728      	adds	r7, #40	; 0x28
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	00010004 	.word	0x00010004
 8003db0:	20000000 	.word	0x20000000
 8003db4:	14f8b589 	.word	0x14f8b589

08003db8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b088      	sub	sp, #32
 8003dbc:	af02      	add	r7, sp, #8
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	4608      	mov	r0, r1
 8003dc2:	4611      	mov	r1, r2
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	817b      	strh	r3, [r7, #10]
 8003dca:	460b      	mov	r3, r1
 8003dcc:	813b      	strh	r3, [r7, #8]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003de0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f000 f960 	bl	80040b4 <I2C_WaitOnFlagUntilTimeout>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00d      	beq.n	8003e16 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e08:	d103      	bne.n	8003e12 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e10:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e05f      	b.n	8003ed6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e16:	897b      	ldrh	r3, [r7, #10]
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e24:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	6a3a      	ldr	r2, [r7, #32]
 8003e2a:	492d      	ldr	r1, [pc, #180]	; (8003ee0 <I2C_RequestMemoryWrite+0x128>)
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f000 f998 	bl	8004162 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e04c      	b.n	8003ed6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	617b      	str	r3, [r7, #20]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	617b      	str	r3, [r7, #20]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	617b      	str	r3, [r7, #20]
 8003e50:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e54:	6a39      	ldr	r1, [r7, #32]
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 fa02 	bl	8004260 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00d      	beq.n	8003e7e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	d107      	bne.n	8003e7a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e78:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e02b      	b.n	8003ed6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e7e:	88fb      	ldrh	r3, [r7, #6]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d105      	bne.n	8003e90 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e84:	893b      	ldrh	r3, [r7, #8]
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	611a      	str	r2, [r3, #16]
 8003e8e:	e021      	b.n	8003ed4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e90:	893b      	ldrh	r3, [r7, #8]
 8003e92:	0a1b      	lsrs	r3, r3, #8
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea0:	6a39      	ldr	r1, [r7, #32]
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 f9dc 	bl	8004260 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00d      	beq.n	8003eca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d107      	bne.n	8003ec6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ec4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e005      	b.n	8003ed6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003eca:	893b      	ldrh	r3, [r7, #8]
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3718      	adds	r7, #24
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	00010002 	.word	0x00010002

08003ee4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b088      	sub	sp, #32
 8003ee8:	af02      	add	r7, sp, #8
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	4608      	mov	r0, r1
 8003eee:	4611      	mov	r1, r2
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	817b      	strh	r3, [r7, #10]
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	813b      	strh	r3, [r7, #8]
 8003efa:	4613      	mov	r3, r2
 8003efc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f0c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	6a3b      	ldr	r3, [r7, #32]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 f8c2 	bl	80040b4 <I2C_WaitOnFlagUntilTimeout>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00d      	beq.n	8003f52 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f44:	d103      	bne.n	8003f4e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e0aa      	b.n	80040a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f52:	897b      	ldrh	r3, [r7, #10]
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	461a      	mov	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f64:	6a3a      	ldr	r2, [r7, #32]
 8003f66:	4952      	ldr	r1, [pc, #328]	; (80040b0 <I2C_RequestMemoryRead+0x1cc>)
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 f8fa 	bl	8004162 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e097      	b.n	80040a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f78:	2300      	movs	r3, #0
 8003f7a:	617b      	str	r3, [r7, #20]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	617b      	str	r3, [r7, #20]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	617b      	str	r3, [r7, #20]
 8003f8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f90:	6a39      	ldr	r1, [r7, #32]
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f000 f964 	bl	8004260 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00d      	beq.n	8003fba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	2b04      	cmp	r3, #4
 8003fa4:	d107      	bne.n	8003fb6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e076      	b.n	80040a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fba:	88fb      	ldrh	r3, [r7, #6]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d105      	bne.n	8003fcc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fc0:	893b      	ldrh	r3, [r7, #8]
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	611a      	str	r2, [r3, #16]
 8003fca:	e021      	b.n	8004010 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003fcc:	893b      	ldrh	r3, [r7, #8]
 8003fce:	0a1b      	lsrs	r3, r3, #8
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fdc:	6a39      	ldr	r1, [r7, #32]
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f000 f93e 	bl	8004260 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00d      	beq.n	8004006 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	2b04      	cmp	r3, #4
 8003ff0:	d107      	bne.n	8004002 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004000:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e050      	b.n	80040a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004006:	893b      	ldrh	r3, [r7, #8]
 8004008:	b2da      	uxtb	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004012:	6a39      	ldr	r1, [r7, #32]
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f000 f923 	bl	8004260 <I2C_WaitOnTXEFlagUntilTimeout>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00d      	beq.n	800403c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004024:	2b04      	cmp	r3, #4
 8004026:	d107      	bne.n	8004038 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004036:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e035      	b.n	80040a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800404a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	6a3b      	ldr	r3, [r7, #32]
 8004052:	2200      	movs	r2, #0
 8004054:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f000 f82b 	bl	80040b4 <I2C_WaitOnFlagUntilTimeout>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00d      	beq.n	8004080 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004072:	d103      	bne.n	800407c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f44f 7200 	mov.w	r2, #512	; 0x200
 800407a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e013      	b.n	80040a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004080:	897b      	ldrh	r3, [r7, #10]
 8004082:	b2db      	uxtb	r3, r3
 8004084:	f043 0301 	orr.w	r3, r3, #1
 8004088:	b2da      	uxtb	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004092:	6a3a      	ldr	r2, [r7, #32]
 8004094:	4906      	ldr	r1, [pc, #24]	; (80040b0 <I2C_RequestMemoryRead+0x1cc>)
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f000 f863 	bl	8004162 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e000      	b.n	80040a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3718      	adds	r7, #24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	00010002 	.word	0x00010002

080040b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	603b      	str	r3, [r7, #0]
 80040c0:	4613      	mov	r3, r2
 80040c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040c4:	e025      	b.n	8004112 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040cc:	d021      	beq.n	8004112 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ce:	f7fd fe07 	bl	8001ce0 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d302      	bcc.n	80040e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d116      	bne.n	8004112 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2220      	movs	r2, #32
 80040ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	f043 0220 	orr.w	r2, r3, #32
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e023      	b.n	800415a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	0c1b      	lsrs	r3, r3, #16
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b01      	cmp	r3, #1
 800411a:	d10d      	bne.n	8004138 <I2C_WaitOnFlagUntilTimeout+0x84>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	43da      	mvns	r2, r3
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	4013      	ands	r3, r2
 8004128:	b29b      	uxth	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	bf0c      	ite	eq
 800412e:	2301      	moveq	r3, #1
 8004130:	2300      	movne	r3, #0
 8004132:	b2db      	uxtb	r3, r3
 8004134:	461a      	mov	r2, r3
 8004136:	e00c      	b.n	8004152 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	43da      	mvns	r2, r3
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	4013      	ands	r3, r2
 8004144:	b29b      	uxth	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	bf0c      	ite	eq
 800414a:	2301      	moveq	r3, #1
 800414c:	2300      	movne	r3, #0
 800414e:	b2db      	uxtb	r3, r3
 8004150:	461a      	mov	r2, r3
 8004152:	79fb      	ldrb	r3, [r7, #7]
 8004154:	429a      	cmp	r2, r3
 8004156:	d0b6      	beq.n	80040c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b084      	sub	sp, #16
 8004166:	af00      	add	r7, sp, #0
 8004168:	60f8      	str	r0, [r7, #12]
 800416a:	60b9      	str	r1, [r7, #8]
 800416c:	607a      	str	r2, [r7, #4]
 800416e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004170:	e051      	b.n	8004216 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800417c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004180:	d123      	bne.n	80041ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004190:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800419a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2220      	movs	r2, #32
 80041a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	f043 0204 	orr.w	r2, r3, #4
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e046      	b.n	8004258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d0:	d021      	beq.n	8004216 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041d2:	f7fd fd85 	bl	8001ce0 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d302      	bcc.n	80041e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d116      	bne.n	8004216 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2220      	movs	r2, #32
 80041f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004202:	f043 0220 	orr.w	r2, r3, #32
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e020      	b.n	8004258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	0c1b      	lsrs	r3, r3, #16
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b01      	cmp	r3, #1
 800421e:	d10c      	bne.n	800423a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	43da      	mvns	r2, r3
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	4013      	ands	r3, r2
 800422c:	b29b      	uxth	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	bf14      	ite	ne
 8004232:	2301      	movne	r3, #1
 8004234:	2300      	moveq	r3, #0
 8004236:	b2db      	uxtb	r3, r3
 8004238:	e00b      	b.n	8004252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	43da      	mvns	r2, r3
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	4013      	ands	r3, r2
 8004246:	b29b      	uxth	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	bf14      	ite	ne
 800424c:	2301      	movne	r3, #1
 800424e:	2300      	moveq	r3, #0
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d18d      	bne.n	8004172 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800426c:	e02d      	b.n	80042ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 f8ce 	bl	8004410 <I2C_IsAcknowledgeFailed>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e02d      	b.n	80042da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004284:	d021      	beq.n	80042ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004286:	f7fd fd2b 	bl	8001ce0 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	429a      	cmp	r2, r3
 8004294:	d302      	bcc.n	800429c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d116      	bne.n	80042ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2220      	movs	r2, #32
 80042a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	f043 0220 	orr.w	r2, r3, #32
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e007      	b.n	80042da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d4:	2b80      	cmp	r3, #128	; 0x80
 80042d6:	d1ca      	bne.n	800426e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b084      	sub	sp, #16
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	60f8      	str	r0, [r7, #12]
 80042ea:	60b9      	str	r1, [r7, #8]
 80042ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042ee:	e02d      	b.n	800434c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 f88d 	bl	8004410 <I2C_IsAcknowledgeFailed>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e02d      	b.n	800435c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004306:	d021      	beq.n	800434c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004308:	f7fd fcea 	bl	8001ce0 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	429a      	cmp	r2, r3
 8004316:	d302      	bcc.n	800431e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d116      	bne.n	800434c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2220      	movs	r2, #32
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004338:	f043 0220 	orr.w	r2, r3, #32
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e007      	b.n	800435c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	f003 0304 	and.w	r3, r3, #4
 8004356:	2b04      	cmp	r3, #4
 8004358:	d1ca      	bne.n	80042f0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004370:	e042      	b.n	80043f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	f003 0310 	and.w	r3, r3, #16
 800437c:	2b10      	cmp	r3, #16
 800437e:	d119      	bne.n	80043b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f06f 0210 	mvn.w	r2, #16
 8004388:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2220      	movs	r2, #32
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e029      	b.n	8004408 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b4:	f7fd fc94 	bl	8001ce0 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d302      	bcc.n	80043ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d116      	bne.n	80043f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2220      	movs	r2, #32
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e4:	f043 0220 	orr.w	r2, r3, #32
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e007      	b.n	8004408 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004402:	2b40      	cmp	r3, #64	; 0x40
 8004404:	d1b5      	bne.n	8004372 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004426:	d11b      	bne.n	8004460 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004430:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2220      	movs	r2, #32
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444c:	f043 0204 	orr.w	r2, r3, #4
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e000      	b.n	8004462 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	bc80      	pop	{r7}
 800446a:	4770      	bx	lr

0800446c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e272      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 8087 	beq.w	800459a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800448c:	4b92      	ldr	r3, [pc, #584]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f003 030c 	and.w	r3, r3, #12
 8004494:	2b04      	cmp	r3, #4
 8004496:	d00c      	beq.n	80044b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004498:	4b8f      	ldr	r3, [pc, #572]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f003 030c 	and.w	r3, r3, #12
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	d112      	bne.n	80044ca <HAL_RCC_OscConfig+0x5e>
 80044a4:	4b8c      	ldr	r3, [pc, #560]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b0:	d10b      	bne.n	80044ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b2:	4b89      	ldr	r3, [pc, #548]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d06c      	beq.n	8004598 <HAL_RCC_OscConfig+0x12c>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d168      	bne.n	8004598 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e24c      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d2:	d106      	bne.n	80044e2 <HAL_RCC_OscConfig+0x76>
 80044d4:	4b80      	ldr	r3, [pc, #512]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a7f      	ldr	r2, [pc, #508]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80044da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044de:	6013      	str	r3, [r2, #0]
 80044e0:	e02e      	b.n	8004540 <HAL_RCC_OscConfig+0xd4>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10c      	bne.n	8004504 <HAL_RCC_OscConfig+0x98>
 80044ea:	4b7b      	ldr	r3, [pc, #492]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a7a      	ldr	r2, [pc, #488]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80044f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044f4:	6013      	str	r3, [r2, #0]
 80044f6:	4b78      	ldr	r3, [pc, #480]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a77      	ldr	r2, [pc, #476]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80044fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004500:	6013      	str	r3, [r2, #0]
 8004502:	e01d      	b.n	8004540 <HAL_RCC_OscConfig+0xd4>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800450c:	d10c      	bne.n	8004528 <HAL_RCC_OscConfig+0xbc>
 800450e:	4b72      	ldr	r3, [pc, #456]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a71      	ldr	r2, [pc, #452]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 8004514:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	4b6f      	ldr	r3, [pc, #444]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a6e      	ldr	r2, [pc, #440]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 8004520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004524:	6013      	str	r3, [r2, #0]
 8004526:	e00b      	b.n	8004540 <HAL_RCC_OscConfig+0xd4>
 8004528:	4b6b      	ldr	r3, [pc, #428]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a6a      	ldr	r2, [pc, #424]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 800452e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004532:	6013      	str	r3, [r2, #0]
 8004534:	4b68      	ldr	r3, [pc, #416]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a67      	ldr	r2, [pc, #412]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 800453a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800453e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d013      	beq.n	8004570 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004548:	f7fd fbca 	bl	8001ce0 <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004550:	f7fd fbc6 	bl	8001ce0 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b64      	cmp	r3, #100	; 0x64
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e200      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004562:	4b5d      	ldr	r3, [pc, #372]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0f0      	beq.n	8004550 <HAL_RCC_OscConfig+0xe4>
 800456e:	e014      	b.n	800459a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004570:	f7fd fbb6 	bl	8001ce0 <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004576:	e008      	b.n	800458a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004578:	f7fd fbb2 	bl	8001ce0 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b64      	cmp	r3, #100	; 0x64
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e1ec      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800458a:	4b53      	ldr	r3, [pc, #332]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1f0      	bne.n	8004578 <HAL_RCC_OscConfig+0x10c>
 8004596:	e000      	b.n	800459a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d063      	beq.n	800466e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045a6:	4b4c      	ldr	r3, [pc, #304]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f003 030c 	and.w	r3, r3, #12
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00b      	beq.n	80045ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80045b2:	4b49      	ldr	r3, [pc, #292]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f003 030c 	and.w	r3, r3, #12
 80045ba:	2b08      	cmp	r3, #8
 80045bc:	d11c      	bne.n	80045f8 <HAL_RCC_OscConfig+0x18c>
 80045be:	4b46      	ldr	r3, [pc, #280]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d116      	bne.n	80045f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ca:	4b43      	ldr	r3, [pc, #268]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d005      	beq.n	80045e2 <HAL_RCC_OscConfig+0x176>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d001      	beq.n	80045e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e1c0      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045e2:	4b3d      	ldr	r3, [pc, #244]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	4939      	ldr	r1, [pc, #228]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045f6:	e03a      	b.n	800466e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d020      	beq.n	8004642 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004600:	4b36      	ldr	r3, [pc, #216]	; (80046dc <HAL_RCC_OscConfig+0x270>)
 8004602:	2201      	movs	r2, #1
 8004604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004606:	f7fd fb6b 	bl	8001ce0 <HAL_GetTick>
 800460a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800460c:	e008      	b.n	8004620 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800460e:	f7fd fb67 	bl	8001ce0 <HAL_GetTick>
 8004612:	4602      	mov	r2, r0
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	2b02      	cmp	r3, #2
 800461a:	d901      	bls.n	8004620 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e1a1      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004620:	4b2d      	ldr	r3, [pc, #180]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0302 	and.w	r3, r3, #2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d0f0      	beq.n	800460e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800462c:	4b2a      	ldr	r3, [pc, #168]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	00db      	lsls	r3, r3, #3
 800463a:	4927      	ldr	r1, [pc, #156]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 800463c:	4313      	orrs	r3, r2
 800463e:	600b      	str	r3, [r1, #0]
 8004640:	e015      	b.n	800466e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004642:	4b26      	ldr	r3, [pc, #152]	; (80046dc <HAL_RCC_OscConfig+0x270>)
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004648:	f7fd fb4a 	bl	8001ce0 <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004650:	f7fd fb46 	bl	8001ce0 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e180      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004662:	4b1d      	ldr	r3, [pc, #116]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1f0      	bne.n	8004650 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0308 	and.w	r3, r3, #8
 8004676:	2b00      	cmp	r3, #0
 8004678:	d03a      	beq.n	80046f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d019      	beq.n	80046b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004682:	4b17      	ldr	r3, [pc, #92]	; (80046e0 <HAL_RCC_OscConfig+0x274>)
 8004684:	2201      	movs	r2, #1
 8004686:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004688:	f7fd fb2a 	bl	8001ce0 <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800468e:	e008      	b.n	80046a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004690:	f7fd fb26 	bl	8001ce0 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e160      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046a2:	4b0d      	ldr	r3, [pc, #52]	; (80046d8 <HAL_RCC_OscConfig+0x26c>)
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0f0      	beq.n	8004690 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80046ae:	2001      	movs	r0, #1
 80046b0:	f000 fb08 	bl	8004cc4 <RCC_Delay>
 80046b4:	e01c      	b.n	80046f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046b6:	4b0a      	ldr	r3, [pc, #40]	; (80046e0 <HAL_RCC_OscConfig+0x274>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046bc:	f7fd fb10 	bl	8001ce0 <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046c2:	e00f      	b.n	80046e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046c4:	f7fd fb0c 	bl	8001ce0 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d908      	bls.n	80046e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e146      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
 80046d6:	bf00      	nop
 80046d8:	40021000 	.word	0x40021000
 80046dc:	42420000 	.word	0x42420000
 80046e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046e4:	4b92      	ldr	r3, [pc, #584]	; (8004930 <HAL_RCC_OscConfig+0x4c4>)
 80046e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1e9      	bne.n	80046c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 80a6 	beq.w	800484a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046fe:	2300      	movs	r3, #0
 8004700:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004702:	4b8b      	ldr	r3, [pc, #556]	; (8004930 <HAL_RCC_OscConfig+0x4c4>)
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10d      	bne.n	800472a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800470e:	4b88      	ldr	r3, [pc, #544]	; (8004930 <HAL_RCC_OscConfig+0x4c4>)
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	4a87      	ldr	r2, [pc, #540]	; (8004930 <HAL_RCC_OscConfig+0x4c4>)
 8004714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004718:	61d3      	str	r3, [r2, #28]
 800471a:	4b85      	ldr	r3, [pc, #532]	; (8004930 <HAL_RCC_OscConfig+0x4c4>)
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004722:	60bb      	str	r3, [r7, #8]
 8004724:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004726:	2301      	movs	r3, #1
 8004728:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800472a:	4b82      	ldr	r3, [pc, #520]	; (8004934 <HAL_RCC_OscConfig+0x4c8>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004732:	2b00      	cmp	r3, #0
 8004734:	d118      	bne.n	8004768 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004736:	4b7f      	ldr	r3, [pc, #508]	; (8004934 <HAL_RCC_OscConfig+0x4c8>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a7e      	ldr	r2, [pc, #504]	; (8004934 <HAL_RCC_OscConfig+0x4c8>)
 800473c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004740:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004742:	f7fd facd 	bl	8001ce0 <HAL_GetTick>
 8004746:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004748:	e008      	b.n	800475c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800474a:	f7fd fac9 	bl	8001ce0 <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	2b64      	cmp	r3, #100	; 0x64
 8004756:	d901      	bls.n	800475c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e103      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800475c:	4b75      	ldr	r3, [pc, #468]	; (8004934 <HAL_RCC_OscConfig+0x4c8>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0f0      	beq.n	800474a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d106      	bne.n	800477e <HAL_RCC_OscConfig+0x312>
 8004770:	4b6f      	ldr	r3, [pc, #444]	; (8004930 <HAL_RCC_OscConfig+0x4c4>)
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	4a6e      	ldr	r2, [pc, #440]	; (8004930 <HAL_RCC_OscConfig+0x4c4>)
 8004776:	f043 0301 	orr.w	r3, r3, #1
 800477a:	6213      	str	r3, [r2, #32]
 800477c:	e02d      	b.n	80047da <HAL_RCC_OscConfig+0x36e>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10c      	bne.n	80047a0 <HAL_RCC_OscConfig+0x334>
 8004786:	4b6a      	ldr	r3, [pc, #424]	; (8004930 <HAL_RCC_OscConfig+0x4c4>)
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	4a69      	ldr	r2, [pc, #420]	; (8004930 <HAL_RCC_OscConfig+0x4c4>)
 800478c:	f023 0301 	bic.w	r3, r3, #1
 8004790:	6213      	str	r3, [r2, #32]
 8004792:	4b67      	ldr	r3, [pc, #412]	; (8004930 <HAL_RCC_OscConfig+0x4c4>)
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	4a66      	ldr	r2, [pc, #408]	; (8004930 <HAL_RCC_OscConfig+0x4c4>)
 8004798:	f023 0304 	bic.w	r3, r3, #4
 800479c:	6213      	str	r3, [r2, #32]
 800479e:	e01c      	b.n	80047da <HAL_RCC_OscConfig+0x36e>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	2b05      	cmp	r3, #5
 80047a6:	d10c      	bne.n	80047c2 <HAL_RCC_OscConfig+0x356>
 80047a8:	4b61      	ldr	r3, [pc, #388]	; (8004930 <HAL_RCC_OscConfig+0x4c4>)
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	4a60      	ldr	r2, [pc, #384]	; (8004930 <HAL_RCC_OscConfig+0x4c4>)
 80047ae:	f043 0304 	orr.w	r3, r3, #4
 80047b2:	6213      	str	r3, [r2, #32]
 80047b4:	4b5e      	ldr	r3, [pc, #376]	; (8004930 <HAL_RCC_OscConfig+0x4c4>)
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	4a5d      	ldr	r2, [pc, #372]	; (8004930 <HAL_RCC_OscConfig+0x4c4>)
 80047ba:	f043 0301 	orr.w	r3, r3, #1
 80047be:	6213      	str	r3, [r2, #32]
 80047c0:	e00b      	b.n	80047da <HAL_RCC_OscConfig+0x36e>
 80047c2:	4b5b      	ldr	r3, [pc, #364]	; (8004930 <HAL_RCC_OscConfig+0x4c4>)
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	4a5a      	ldr	r2, [pc, #360]	; (8004930 <HAL_RCC_OscConfig+0x4c4>)
 80047c8:	f023 0301 	bic.w	r3, r3, #1
 80047cc:	6213      	str	r3, [r2, #32]
 80047ce:	4b58      	ldr	r3, [pc, #352]	; (8004930 <HAL_RCC_OscConfig+0x4c4>)
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	4a57      	ldr	r2, [pc, #348]	; (8004930 <HAL_RCC_OscConfig+0x4c4>)
 80047d4:	f023 0304 	bic.w	r3, r3, #4
 80047d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d015      	beq.n	800480e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047e2:	f7fd fa7d 	bl	8001ce0 <HAL_GetTick>
 80047e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e8:	e00a      	b.n	8004800 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ea:	f7fd fa79 	bl	8001ce0 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d901      	bls.n	8004800 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e0b1      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004800:	4b4b      	ldr	r3, [pc, #300]	; (8004930 <HAL_RCC_OscConfig+0x4c4>)
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d0ee      	beq.n	80047ea <HAL_RCC_OscConfig+0x37e>
 800480c:	e014      	b.n	8004838 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800480e:	f7fd fa67 	bl	8001ce0 <HAL_GetTick>
 8004812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004814:	e00a      	b.n	800482c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004816:	f7fd fa63 	bl	8001ce0 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	f241 3288 	movw	r2, #5000	; 0x1388
 8004824:	4293      	cmp	r3, r2
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e09b      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800482c:	4b40      	ldr	r3, [pc, #256]	; (8004930 <HAL_RCC_OscConfig+0x4c4>)
 800482e:	6a1b      	ldr	r3, [r3, #32]
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d1ee      	bne.n	8004816 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004838:	7dfb      	ldrb	r3, [r7, #23]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d105      	bne.n	800484a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800483e:	4b3c      	ldr	r3, [pc, #240]	; (8004930 <HAL_RCC_OscConfig+0x4c4>)
 8004840:	69db      	ldr	r3, [r3, #28]
 8004842:	4a3b      	ldr	r2, [pc, #236]	; (8004930 <HAL_RCC_OscConfig+0x4c4>)
 8004844:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004848:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	2b00      	cmp	r3, #0
 8004850:	f000 8087 	beq.w	8004962 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004854:	4b36      	ldr	r3, [pc, #216]	; (8004930 <HAL_RCC_OscConfig+0x4c4>)
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f003 030c 	and.w	r3, r3, #12
 800485c:	2b08      	cmp	r3, #8
 800485e:	d061      	beq.n	8004924 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	69db      	ldr	r3, [r3, #28]
 8004864:	2b02      	cmp	r3, #2
 8004866:	d146      	bne.n	80048f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004868:	4b33      	ldr	r3, [pc, #204]	; (8004938 <HAL_RCC_OscConfig+0x4cc>)
 800486a:	2200      	movs	r2, #0
 800486c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486e:	f7fd fa37 	bl	8001ce0 <HAL_GetTick>
 8004872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004874:	e008      	b.n	8004888 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004876:	f7fd fa33 	bl	8001ce0 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d901      	bls.n	8004888 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e06d      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004888:	4b29      	ldr	r3, [pc, #164]	; (8004930 <HAL_RCC_OscConfig+0x4c4>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1f0      	bne.n	8004876 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800489c:	d108      	bne.n	80048b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800489e:	4b24      	ldr	r3, [pc, #144]	; (8004930 <HAL_RCC_OscConfig+0x4c4>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	4921      	ldr	r1, [pc, #132]	; (8004930 <HAL_RCC_OscConfig+0x4c4>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048b0:	4b1f      	ldr	r3, [pc, #124]	; (8004930 <HAL_RCC_OscConfig+0x4c4>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6a19      	ldr	r1, [r3, #32]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	430b      	orrs	r3, r1
 80048c2:	491b      	ldr	r1, [pc, #108]	; (8004930 <HAL_RCC_OscConfig+0x4c4>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048c8:	4b1b      	ldr	r3, [pc, #108]	; (8004938 <HAL_RCC_OscConfig+0x4cc>)
 80048ca:	2201      	movs	r2, #1
 80048cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ce:	f7fd fa07 	bl	8001ce0 <HAL_GetTick>
 80048d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048d4:	e008      	b.n	80048e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048d6:	f7fd fa03 	bl	8001ce0 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d901      	bls.n	80048e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e03d      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048e8:	4b11      	ldr	r3, [pc, #68]	; (8004930 <HAL_RCC_OscConfig+0x4c4>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d0f0      	beq.n	80048d6 <HAL_RCC_OscConfig+0x46a>
 80048f4:	e035      	b.n	8004962 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048f6:	4b10      	ldr	r3, [pc, #64]	; (8004938 <HAL_RCC_OscConfig+0x4cc>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048fc:	f7fd f9f0 	bl	8001ce0 <HAL_GetTick>
 8004900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004902:	e008      	b.n	8004916 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004904:	f7fd f9ec 	bl	8001ce0 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e026      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004916:	4b06      	ldr	r3, [pc, #24]	; (8004930 <HAL_RCC_OscConfig+0x4c4>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1f0      	bne.n	8004904 <HAL_RCC_OscConfig+0x498>
 8004922:	e01e      	b.n	8004962 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	69db      	ldr	r3, [r3, #28]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d107      	bne.n	800493c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e019      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
 8004930:	40021000 	.word	0x40021000
 8004934:	40007000 	.word	0x40007000
 8004938:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800493c:	4b0b      	ldr	r3, [pc, #44]	; (800496c <HAL_RCC_OscConfig+0x500>)
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	429a      	cmp	r2, r3
 800494e:	d106      	bne.n	800495e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800495a:	429a      	cmp	r2, r3
 800495c:	d001      	beq.n	8004962 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e000      	b.n	8004964 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3718      	adds	r7, #24
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	40021000 	.word	0x40021000

08004970 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d101      	bne.n	8004984 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e0d0      	b.n	8004b26 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004984:	4b6a      	ldr	r3, [pc, #424]	; (8004b30 <HAL_RCC_ClockConfig+0x1c0>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	429a      	cmp	r2, r3
 8004990:	d910      	bls.n	80049b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004992:	4b67      	ldr	r3, [pc, #412]	; (8004b30 <HAL_RCC_ClockConfig+0x1c0>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f023 0207 	bic.w	r2, r3, #7
 800499a:	4965      	ldr	r1, [pc, #404]	; (8004b30 <HAL_RCC_ClockConfig+0x1c0>)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	4313      	orrs	r3, r2
 80049a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049a2:	4b63      	ldr	r3, [pc, #396]	; (8004b30 <HAL_RCC_ClockConfig+0x1c0>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d001      	beq.n	80049b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e0b8      	b.n	8004b26 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d020      	beq.n	8004a02 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0304 	and.w	r3, r3, #4
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d005      	beq.n	80049d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049cc:	4b59      	ldr	r3, [pc, #356]	; (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	4a58      	ldr	r2, [pc, #352]	; (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 80049d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80049d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0308 	and.w	r3, r3, #8
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d005      	beq.n	80049f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049e4:	4b53      	ldr	r3, [pc, #332]	; (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	4a52      	ldr	r2, [pc, #328]	; (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 80049ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80049ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049f0:	4b50      	ldr	r3, [pc, #320]	; (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	494d      	ldr	r1, [pc, #308]	; (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d040      	beq.n	8004a90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d107      	bne.n	8004a26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a16:	4b47      	ldr	r3, [pc, #284]	; (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d115      	bne.n	8004a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e07f      	b.n	8004b26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d107      	bne.n	8004a3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a2e:	4b41      	ldr	r3, [pc, #260]	; (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d109      	bne.n	8004a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e073      	b.n	8004b26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a3e:	4b3d      	ldr	r3, [pc, #244]	; (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e06b      	b.n	8004b26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a4e:	4b39      	ldr	r3, [pc, #228]	; (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f023 0203 	bic.w	r2, r3, #3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	4936      	ldr	r1, [pc, #216]	; (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a60:	f7fd f93e 	bl	8001ce0 <HAL_GetTick>
 8004a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a66:	e00a      	b.n	8004a7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a68:	f7fd f93a 	bl	8001ce0 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e053      	b.n	8004b26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a7e:	4b2d      	ldr	r3, [pc, #180]	; (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f003 020c 	and.w	r2, r3, #12
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d1eb      	bne.n	8004a68 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a90:	4b27      	ldr	r3, [pc, #156]	; (8004b30 <HAL_RCC_ClockConfig+0x1c0>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0307 	and.w	r3, r3, #7
 8004a98:	683a      	ldr	r2, [r7, #0]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d210      	bcs.n	8004ac0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a9e:	4b24      	ldr	r3, [pc, #144]	; (8004b30 <HAL_RCC_ClockConfig+0x1c0>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f023 0207 	bic.w	r2, r3, #7
 8004aa6:	4922      	ldr	r1, [pc, #136]	; (8004b30 <HAL_RCC_ClockConfig+0x1c0>)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aae:	4b20      	ldr	r3, [pc, #128]	; (8004b30 <HAL_RCC_ClockConfig+0x1c0>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0307 	and.w	r3, r3, #7
 8004ab6:	683a      	ldr	r2, [r7, #0]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d001      	beq.n	8004ac0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e032      	b.n	8004b26 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0304 	and.w	r3, r3, #4
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d008      	beq.n	8004ade <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004acc:	4b19      	ldr	r3, [pc, #100]	; (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	4916      	ldr	r1, [pc, #88]	; (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0308 	and.w	r3, r3, #8
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d009      	beq.n	8004afe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004aea:	4b12      	ldr	r3, [pc, #72]	; (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	00db      	lsls	r3, r3, #3
 8004af8:	490e      	ldr	r1, [pc, #56]	; (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004afe:	f000 f821 	bl	8004b44 <HAL_RCC_GetSysClockFreq>
 8004b02:	4602      	mov	r2, r0
 8004b04:	4b0b      	ldr	r3, [pc, #44]	; (8004b34 <HAL_RCC_ClockConfig+0x1c4>)
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	091b      	lsrs	r3, r3, #4
 8004b0a:	f003 030f 	and.w	r3, r3, #15
 8004b0e:	490a      	ldr	r1, [pc, #40]	; (8004b38 <HAL_RCC_ClockConfig+0x1c8>)
 8004b10:	5ccb      	ldrb	r3, [r1, r3]
 8004b12:	fa22 f303 	lsr.w	r3, r2, r3
 8004b16:	4a09      	ldr	r2, [pc, #36]	; (8004b3c <HAL_RCC_ClockConfig+0x1cc>)
 8004b18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b1a:	4b09      	ldr	r3, [pc, #36]	; (8004b40 <HAL_RCC_ClockConfig+0x1d0>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7fc fed6 	bl	80018d0 <HAL_InitTick>

  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3710      	adds	r7, #16
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	40022000 	.word	0x40022000
 8004b34:	40021000 	.word	0x40021000
 8004b38:	08009730 	.word	0x08009730
 8004b3c:	20000000 	.word	0x20000000
 8004b40:	20000004 	.word	0x20000004

08004b44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b44:	b490      	push	{r4, r7}
 8004b46:	b08a      	sub	sp, #40	; 0x28
 8004b48:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004b4a:	4b29      	ldr	r3, [pc, #164]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0xac>)
 8004b4c:	1d3c      	adds	r4, r7, #4
 8004b4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004b54:	f240 2301 	movw	r3, #513	; 0x201
 8004b58:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	61fb      	str	r3, [r7, #28]
 8004b5e:	2300      	movs	r3, #0
 8004b60:	61bb      	str	r3, [r7, #24]
 8004b62:	2300      	movs	r3, #0
 8004b64:	627b      	str	r3, [r7, #36]	; 0x24
 8004b66:	2300      	movs	r3, #0
 8004b68:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b6e:	4b21      	ldr	r3, [pc, #132]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	f003 030c 	and.w	r3, r3, #12
 8004b7a:	2b04      	cmp	r3, #4
 8004b7c:	d002      	beq.n	8004b84 <HAL_RCC_GetSysClockFreq+0x40>
 8004b7e:	2b08      	cmp	r3, #8
 8004b80:	d003      	beq.n	8004b8a <HAL_RCC_GetSysClockFreq+0x46>
 8004b82:	e02b      	b.n	8004bdc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b84:	4b1c      	ldr	r3, [pc, #112]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b86:	623b      	str	r3, [r7, #32]
      break;
 8004b88:	e02b      	b.n	8004be2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	0c9b      	lsrs	r3, r3, #18
 8004b8e:	f003 030f 	and.w	r3, r3, #15
 8004b92:	3328      	adds	r3, #40	; 0x28
 8004b94:	443b      	add	r3, r7
 8004b96:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004b9a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d012      	beq.n	8004bcc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ba6:	4b13      	ldr	r3, [pc, #76]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	0c5b      	lsrs	r3, r3, #17
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	3328      	adds	r3, #40	; 0x28
 8004bb2:	443b      	add	r3, r7
 8004bb4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004bb8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	4a0e      	ldr	r2, [pc, #56]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004bbe:	fb03 f202 	mul.w	r2, r3, r2
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8004bca:	e004      	b.n	8004bd6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	4a0b      	ldr	r2, [pc, #44]	; (8004bfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bd0:	fb02 f303 	mul.w	r3, r2, r3
 8004bd4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	623b      	str	r3, [r7, #32]
      break;
 8004bda:	e002      	b.n	8004be2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004bdc:	4b06      	ldr	r3, [pc, #24]	; (8004bf8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004bde:	623b      	str	r3, [r7, #32]
      break;
 8004be0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004be2:	6a3b      	ldr	r3, [r7, #32]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3728      	adds	r7, #40	; 0x28
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bc90      	pop	{r4, r7}
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	08009600 	.word	0x08009600
 8004bf4:	40021000 	.word	0x40021000
 8004bf8:	007a1200 	.word	0x007a1200
 8004bfc:	003d0900 	.word	0x003d0900

08004c00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c00:	b480      	push	{r7}
 8004c02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c04:	4b02      	ldr	r3, [pc, #8]	; (8004c10 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c06:	681b      	ldr	r3, [r3, #0]
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bc80      	pop	{r7}
 8004c0e:	4770      	bx	lr
 8004c10:	20000000 	.word	0x20000000

08004c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c18:	f7ff fff2 	bl	8004c00 <HAL_RCC_GetHCLKFreq>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	4b05      	ldr	r3, [pc, #20]	; (8004c34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	0a1b      	lsrs	r3, r3, #8
 8004c24:	f003 0307 	and.w	r3, r3, #7
 8004c28:	4903      	ldr	r1, [pc, #12]	; (8004c38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c2a:	5ccb      	ldrb	r3, [r1, r3]
 8004c2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	40021000 	.word	0x40021000
 8004c38:	08009740 	.word	0x08009740

08004c3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c40:	f7ff ffde 	bl	8004c00 <HAL_RCC_GetHCLKFreq>
 8004c44:	4602      	mov	r2, r0
 8004c46:	4b05      	ldr	r3, [pc, #20]	; (8004c5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	0adb      	lsrs	r3, r3, #11
 8004c4c:	f003 0307 	and.w	r3, r3, #7
 8004c50:	4903      	ldr	r1, [pc, #12]	; (8004c60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c52:	5ccb      	ldrb	r3, [r1, r3]
 8004c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	40021000 	.word	0x40021000
 8004c60:	08009740 	.word	0x08009740

08004c64 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	220f      	movs	r2, #15
 8004c72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004c74:	4b11      	ldr	r3, [pc, #68]	; (8004cbc <HAL_RCC_GetClockConfig+0x58>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f003 0203 	and.w	r2, r3, #3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004c80:	4b0e      	ldr	r3, [pc, #56]	; (8004cbc <HAL_RCC_GetClockConfig+0x58>)
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004c8c:	4b0b      	ldr	r3, [pc, #44]	; (8004cbc <HAL_RCC_GetClockConfig+0x58>)
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004c98:	4b08      	ldr	r3, [pc, #32]	; (8004cbc <HAL_RCC_GetClockConfig+0x58>)
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	08db      	lsrs	r3, r3, #3
 8004c9e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004ca6:	4b06      	ldr	r3, [pc, #24]	; (8004cc0 <HAL_RCC_GetClockConfig+0x5c>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0207 	and.w	r2, r3, #7
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004cb2:	bf00      	nop
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bc80      	pop	{r7}
 8004cba:	4770      	bx	lr
 8004cbc:	40021000 	.word	0x40021000
 8004cc0:	40022000 	.word	0x40022000

08004cc4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004ccc:	4b0a      	ldr	r3, [pc, #40]	; (8004cf8 <RCC_Delay+0x34>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a0a      	ldr	r2, [pc, #40]	; (8004cfc <RCC_Delay+0x38>)
 8004cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd6:	0a5b      	lsrs	r3, r3, #9
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	fb02 f303 	mul.w	r3, r2, r3
 8004cde:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004ce0:	bf00      	nop
  }
  while (Delay --);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	1e5a      	subs	r2, r3, #1
 8004ce6:	60fa      	str	r2, [r7, #12]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1f9      	bne.n	8004ce0 <RCC_Delay+0x1c>
}
 8004cec:	bf00      	nop
 8004cee:	bf00      	nop
 8004cf0:	3714      	adds	r7, #20
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bc80      	pop	{r7}
 8004cf6:	4770      	bx	lr
 8004cf8:	20000000 	.word	0x20000000
 8004cfc:	10624dd3 	.word	0x10624dd3

08004d00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d101      	bne.n	8004d12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e041      	b.n	8004d96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d106      	bne.n	8004d2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f839 	bl	8004d9e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2202      	movs	r2, #2
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	3304      	adds	r3, #4
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	4610      	mov	r0, r2
 8004d40:	f000 f9b4 	bl	80050ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b083      	sub	sp, #12
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004da6:	bf00      	nop
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bc80      	pop	{r7}
 8004dae:	4770      	bx	lr

08004db0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d001      	beq.n	8004dc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e03a      	b.n	8004e3e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68da      	ldr	r2, [r3, #12]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f042 0201 	orr.w	r2, r2, #1
 8004dde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a18      	ldr	r2, [pc, #96]	; (8004e48 <HAL_TIM_Base_Start_IT+0x98>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d00e      	beq.n	8004e08 <HAL_TIM_Base_Start_IT+0x58>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df2:	d009      	beq.n	8004e08 <HAL_TIM_Base_Start_IT+0x58>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a14      	ldr	r2, [pc, #80]	; (8004e4c <HAL_TIM_Base_Start_IT+0x9c>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d004      	beq.n	8004e08 <HAL_TIM_Base_Start_IT+0x58>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a13      	ldr	r2, [pc, #76]	; (8004e50 <HAL_TIM_Base_Start_IT+0xa0>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d111      	bne.n	8004e2c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f003 0307 	and.w	r3, r3, #7
 8004e12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2b06      	cmp	r3, #6
 8004e18:	d010      	beq.n	8004e3c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f042 0201 	orr.w	r2, r2, #1
 8004e28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e2a:	e007      	b.n	8004e3c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 0201 	orr.w	r2, r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bc80      	pop	{r7}
 8004e46:	4770      	bx	lr
 8004e48:	40012c00 	.word	0x40012c00
 8004e4c:	40000400 	.word	0x40000400
 8004e50:	40000800 	.word	0x40000800

08004e54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	f003 0302 	and.w	r3, r3, #2
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d122      	bne.n	8004eb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d11b      	bne.n	8004eb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f06f 0202 	mvn.w	r2, #2
 8004e80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	f003 0303 	and.w	r3, r3, #3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 f8ed 	bl	8005076 <HAL_TIM_IC_CaptureCallback>
 8004e9c:	e005      	b.n	8004eaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 f8e0 	bl	8005064 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 f8ef 	bl	8005088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	f003 0304 	and.w	r3, r3, #4
 8004eba:	2b04      	cmp	r3, #4
 8004ebc:	d122      	bne.n	8004f04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	f003 0304 	and.w	r3, r3, #4
 8004ec8:	2b04      	cmp	r3, #4
 8004eca:	d11b      	bne.n	8004f04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f06f 0204 	mvn.w	r2, #4
 8004ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2202      	movs	r2, #2
 8004eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f8c3 	bl	8005076 <HAL_TIM_IC_CaptureCallback>
 8004ef0:	e005      	b.n	8004efe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f8b6 	bl	8005064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 f8c5 	bl	8005088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	f003 0308 	and.w	r3, r3, #8
 8004f0e:	2b08      	cmp	r3, #8
 8004f10:	d122      	bne.n	8004f58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	f003 0308 	and.w	r3, r3, #8
 8004f1c:	2b08      	cmp	r3, #8
 8004f1e:	d11b      	bne.n	8004f58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f06f 0208 	mvn.w	r2, #8
 8004f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2204      	movs	r2, #4
 8004f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	f003 0303 	and.w	r3, r3, #3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 f899 	bl	8005076 <HAL_TIM_IC_CaptureCallback>
 8004f44:	e005      	b.n	8004f52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f88c 	bl	8005064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 f89b 	bl	8005088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	f003 0310 	and.w	r3, r3, #16
 8004f62:	2b10      	cmp	r3, #16
 8004f64:	d122      	bne.n	8004fac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f003 0310 	and.w	r3, r3, #16
 8004f70:	2b10      	cmp	r3, #16
 8004f72:	d11b      	bne.n	8004fac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f06f 0210 	mvn.w	r2, #16
 8004f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2208      	movs	r2, #8
 8004f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	69db      	ldr	r3, [r3, #28]
 8004f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f86f 	bl	8005076 <HAL_TIM_IC_CaptureCallback>
 8004f98:	e005      	b.n	8004fa6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f862 	bl	8005064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 f871 	bl	8005088 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d10e      	bne.n	8004fd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	f003 0301 	and.w	r3, r3, #1
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d107      	bne.n	8004fd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f06f 0201 	mvn.w	r2, #1
 8004fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7fc fc2c 	bl	8001830 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe2:	2b80      	cmp	r3, #128	; 0x80
 8004fe4:	d10e      	bne.n	8005004 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff0:	2b80      	cmp	r3, #128	; 0x80
 8004ff2:	d107      	bne.n	8005004 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f8bf 	bl	8005182 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800500e:	2b40      	cmp	r3, #64	; 0x40
 8005010:	d10e      	bne.n	8005030 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501c:	2b40      	cmp	r3, #64	; 0x40
 800501e:	d107      	bne.n	8005030 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f835 	bl	800509a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	f003 0320 	and.w	r3, r3, #32
 800503a:	2b20      	cmp	r3, #32
 800503c:	d10e      	bne.n	800505c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	f003 0320 	and.w	r3, r3, #32
 8005048:	2b20      	cmp	r3, #32
 800504a:	d107      	bne.n	800505c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f06f 0220 	mvn.w	r2, #32
 8005054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f88a 	bl	8005170 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800505c:	bf00      	nop
 800505e:	3708      	adds	r7, #8
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	bc80      	pop	{r7}
 8005074:	4770      	bx	lr

08005076 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005076:	b480      	push	{r7}
 8005078:	b083      	sub	sp, #12
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800507e:	bf00      	nop
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	bc80      	pop	{r7}
 8005086:	4770      	bx	lr

08005088 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	bc80      	pop	{r7}
 8005098:	4770      	bx	lr

0800509a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800509a:	b480      	push	{r7}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050a2:	bf00      	nop
 80050a4:	370c      	adds	r7, #12
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bc80      	pop	{r7}
 80050aa:	4770      	bx	lr

080050ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a29      	ldr	r2, [pc, #164]	; (8005164 <TIM_Base_SetConfig+0xb8>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d00b      	beq.n	80050dc <TIM_Base_SetConfig+0x30>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ca:	d007      	beq.n	80050dc <TIM_Base_SetConfig+0x30>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a26      	ldr	r2, [pc, #152]	; (8005168 <TIM_Base_SetConfig+0xbc>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d003      	beq.n	80050dc <TIM_Base_SetConfig+0x30>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a25      	ldr	r2, [pc, #148]	; (800516c <TIM_Base_SetConfig+0xc0>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d108      	bne.n	80050ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a1c      	ldr	r2, [pc, #112]	; (8005164 <TIM_Base_SetConfig+0xb8>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d00b      	beq.n	800510e <TIM_Base_SetConfig+0x62>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050fc:	d007      	beq.n	800510e <TIM_Base_SetConfig+0x62>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a19      	ldr	r2, [pc, #100]	; (8005168 <TIM_Base_SetConfig+0xbc>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d003      	beq.n	800510e <TIM_Base_SetConfig+0x62>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a18      	ldr	r2, [pc, #96]	; (800516c <TIM_Base_SetConfig+0xc0>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d108      	bne.n	8005120 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005114:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	4313      	orrs	r3, r2
 800511e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	4313      	orrs	r3, r2
 800512c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	689a      	ldr	r2, [r3, #8]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a07      	ldr	r2, [pc, #28]	; (8005164 <TIM_Base_SetConfig+0xb8>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d103      	bne.n	8005154 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	691a      	ldr	r2, [r3, #16]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	615a      	str	r2, [r3, #20]
}
 800515a:	bf00      	nop
 800515c:	3714      	adds	r7, #20
 800515e:	46bd      	mov	sp, r7
 8005160:	bc80      	pop	{r7}
 8005162:	4770      	bx	lr
 8005164:	40012c00 	.word	0x40012c00
 8005168:	40000400 	.word	0x40000400
 800516c:	40000800 	.word	0x40000800

08005170 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	bc80      	pop	{r7}
 8005180:	4770      	bx	lr

08005182 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005182:	b480      	push	{r7}
 8005184:	b083      	sub	sp, #12
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800518a:	bf00      	nop
 800518c:	370c      	adds	r7, #12
 800518e:	46bd      	mov	sp, r7
 8005190:	bc80      	pop	{r7}
 8005192:	4770      	bx	lr

08005194 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e03f      	b.n	8005226 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d106      	bne.n	80051c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7fc fc80 	bl	8001ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2224      	movs	r2, #36	; 0x24
 80051c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68da      	ldr	r2, [r3, #12]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 fd7f 	bl	8005cdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	691a      	ldr	r2, [r3, #16]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	695a      	ldr	r2, [r3, #20]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68da      	ldr	r2, [r3, #12]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800520c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2220      	movs	r2, #32
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2220      	movs	r2, #32
 8005220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b08a      	sub	sp, #40	; 0x28
 8005232:	af02      	add	r7, sp, #8
 8005234:	60f8      	str	r0, [r7, #12]
 8005236:	60b9      	str	r1, [r7, #8]
 8005238:	603b      	str	r3, [r7, #0]
 800523a:	4613      	mov	r3, r2
 800523c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800523e:	2300      	movs	r3, #0
 8005240:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b20      	cmp	r3, #32
 800524c:	d17c      	bne.n	8005348 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d002      	beq.n	800525a <HAL_UART_Transmit+0x2c>
 8005254:	88fb      	ldrh	r3, [r7, #6]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d101      	bne.n	800525e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e075      	b.n	800534a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005264:	2b01      	cmp	r3, #1
 8005266:	d101      	bne.n	800526c <HAL_UART_Transmit+0x3e>
 8005268:	2302      	movs	r3, #2
 800526a:	e06e      	b.n	800534a <HAL_UART_Transmit+0x11c>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2221      	movs	r2, #33	; 0x21
 800527e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005282:	f7fc fd2d 	bl	8001ce0 <HAL_GetTick>
 8005286:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	88fa      	ldrh	r2, [r7, #6]
 800528c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	88fa      	ldrh	r2, [r7, #6]
 8005292:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800529c:	d108      	bne.n	80052b0 <HAL_UART_Transmit+0x82>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d104      	bne.n	80052b0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80052a6:	2300      	movs	r3, #0
 80052a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	61bb      	str	r3, [r7, #24]
 80052ae:	e003      	b.n	80052b8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052b4:	2300      	movs	r3, #0
 80052b6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80052c0:	e02a      	b.n	8005318 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	2200      	movs	r2, #0
 80052ca:	2180      	movs	r1, #128	; 0x80
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f000 faf1 	bl	80058b4 <UART_WaitOnFlagUntilTimeout>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d001      	beq.n	80052dc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e036      	b.n	800534a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10b      	bne.n	80052fa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	881b      	ldrh	r3, [r3, #0]
 80052e6:	461a      	mov	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	3302      	adds	r3, #2
 80052f6:	61bb      	str	r3, [r7, #24]
 80052f8:	e007      	b.n	800530a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	781a      	ldrb	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	3301      	adds	r3, #1
 8005308:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800530e:	b29b      	uxth	r3, r3
 8005310:	3b01      	subs	r3, #1
 8005312:	b29a      	uxth	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800531c:	b29b      	uxth	r3, r3
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1cf      	bne.n	80052c2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	9300      	str	r3, [sp, #0]
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	2200      	movs	r2, #0
 800532a:	2140      	movs	r1, #64	; 0x40
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	f000 fac1 	bl	80058b4 <UART_WaitOnFlagUntilTimeout>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d001      	beq.n	800533c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e006      	b.n	800534a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2220      	movs	r2, #32
 8005340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005344:	2300      	movs	r3, #0
 8005346:	e000      	b.n	800534a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005348:	2302      	movs	r3, #2
  }
}
 800534a:	4618      	mov	r0, r3
 800534c:	3720      	adds	r7, #32
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}

08005352 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005352:	b580      	push	{r7, lr}
 8005354:	b084      	sub	sp, #16
 8005356:	af00      	add	r7, sp, #0
 8005358:	60f8      	str	r0, [r7, #12]
 800535a:	60b9      	str	r1, [r7, #8]
 800535c:	4613      	mov	r3, r2
 800535e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b20      	cmp	r3, #32
 800536a:	d11d      	bne.n	80053a8 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d002      	beq.n	8005378 <HAL_UART_Receive_DMA+0x26>
 8005372:	88fb      	ldrh	r3, [r7, #6]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d101      	bne.n	800537c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e016      	b.n	80053aa <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005382:	2b01      	cmp	r3, #1
 8005384:	d101      	bne.n	800538a <HAL_UART_Receive_DMA+0x38>
 8005386:	2302      	movs	r3, #2
 8005388:	e00f      	b.n	80053aa <HAL_UART_Receive_DMA+0x58>
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8005398:	88fb      	ldrh	r3, [r7, #6]
 800539a:	461a      	mov	r2, r3
 800539c:	68b9      	ldr	r1, [r7, #8]
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f000 fad2 	bl	8005948 <UART_Start_Receive_DMA>
 80053a4:	4603      	mov	r3, r0
 80053a6:	e000      	b.n	80053aa <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80053a8:	2302      	movs	r3, #2
  }
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
	...

080053b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b08a      	sub	sp, #40	; 0x28
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80053d4:	2300      	movs	r3, #0
 80053d6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80053d8:	2300      	movs	r3, #0
 80053da:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80053dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053de:	f003 030f 	and.w	r3, r3, #15
 80053e2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10d      	bne.n	8005406 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	f003 0320 	and.w	r3, r3, #32
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d008      	beq.n	8005406 <HAL_UART_IRQHandler+0x52>
 80053f4:	6a3b      	ldr	r3, [r7, #32]
 80053f6:	f003 0320 	and.w	r3, r3, #32
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d003      	beq.n	8005406 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 fbc2 	bl	8005b88 <UART_Receive_IT>
      return;
 8005404:	e17b      	b.n	80056fe <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005406:	69bb      	ldr	r3, [r7, #24]
 8005408:	2b00      	cmp	r3, #0
 800540a:	f000 80b1 	beq.w	8005570 <HAL_UART_IRQHandler+0x1bc>
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	f003 0301 	and.w	r3, r3, #1
 8005414:	2b00      	cmp	r3, #0
 8005416:	d105      	bne.n	8005424 <HAL_UART_IRQHandler+0x70>
 8005418:	6a3b      	ldr	r3, [r7, #32]
 800541a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800541e:	2b00      	cmp	r3, #0
 8005420:	f000 80a6 	beq.w	8005570 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b00      	cmp	r3, #0
 800542c:	d00a      	beq.n	8005444 <HAL_UART_IRQHandler+0x90>
 800542e:	6a3b      	ldr	r3, [r7, #32]
 8005430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005434:	2b00      	cmp	r3, #0
 8005436:	d005      	beq.n	8005444 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543c:	f043 0201 	orr.w	r2, r3, #1
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005446:	f003 0304 	and.w	r3, r3, #4
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00a      	beq.n	8005464 <HAL_UART_IRQHandler+0xb0>
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	2b00      	cmp	r3, #0
 8005456:	d005      	beq.n	8005464 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545c:	f043 0202 	orr.w	r2, r3, #2
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00a      	beq.n	8005484 <HAL_UART_IRQHandler+0xd0>
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	2b00      	cmp	r3, #0
 8005476:	d005      	beq.n	8005484 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547c:	f043 0204 	orr.w	r2, r3, #4
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005486:	f003 0308 	and.w	r3, r3, #8
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00f      	beq.n	80054ae <HAL_UART_IRQHandler+0xfa>
 800548e:	6a3b      	ldr	r3, [r7, #32]
 8005490:	f003 0320 	and.w	r3, r3, #32
 8005494:	2b00      	cmp	r3, #0
 8005496:	d104      	bne.n	80054a2 <HAL_UART_IRQHandler+0xee>
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d005      	beq.n	80054ae <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a6:	f043 0208 	orr.w	r2, r3, #8
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	f000 811e 	beq.w	80056f4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ba:	f003 0320 	and.w	r3, r3, #32
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d007      	beq.n	80054d2 <HAL_UART_IRQHandler+0x11e>
 80054c2:	6a3b      	ldr	r3, [r7, #32]
 80054c4:	f003 0320 	and.w	r3, r3, #32
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d002      	beq.n	80054d2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 fb5b 	bl	8005b88 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054dc:	2b00      	cmp	r3, #0
 80054de:	bf14      	ite	ne
 80054e0:	2301      	movne	r3, #1
 80054e2:	2300      	moveq	r3, #0
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ec:	f003 0308 	and.w	r3, r3, #8
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d102      	bne.n	80054fa <HAL_UART_IRQHandler+0x146>
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d031      	beq.n	800555e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 fa9d 	bl	8005a3a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800550a:	2b00      	cmp	r3, #0
 800550c:	d023      	beq.n	8005556 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	695a      	ldr	r2, [r3, #20]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800551c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005522:	2b00      	cmp	r3, #0
 8005524:	d013      	beq.n	800554e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552a:	4a76      	ldr	r2, [pc, #472]	; (8005704 <HAL_UART_IRQHandler+0x350>)
 800552c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005532:	4618      	mov	r0, r3
 8005534:	f7fd fc3a 	bl	8002dac <HAL_DMA_Abort_IT>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d016      	beq.n	800556c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005548:	4610      	mov	r0, r2
 800554a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800554c:	e00e      	b.n	800556c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f8ec 	bl	800572c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005554:	e00a      	b.n	800556c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f8e8 	bl	800572c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800555c:	e006      	b.n	800556c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f8e4 	bl	800572c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800556a:	e0c3      	b.n	80056f4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800556c:	bf00      	nop
    return;
 800556e:	e0c1      	b.n	80056f4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005574:	2b01      	cmp	r3, #1
 8005576:	f040 80a1 	bne.w	80056bc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	f003 0310 	and.w	r3, r3, #16
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 809b 	beq.w	80056bc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005586:	6a3b      	ldr	r3, [r7, #32]
 8005588:	f003 0310 	and.w	r3, r3, #16
 800558c:	2b00      	cmp	r3, #0
 800558e:	f000 8095 	beq.w	80056bc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005592:	2300      	movs	r3, #0
 8005594:	60fb      	str	r3, [r7, #12]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	60fb      	str	r3, [r7, #12]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	60fb      	str	r3, [r7, #12]
 80055a6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d04e      	beq.n	8005654 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80055c0:	8a3b      	ldrh	r3, [r7, #16]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	f000 8098 	beq.w	80056f8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055cc:	8a3a      	ldrh	r2, [r7, #16]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	f080 8092 	bcs.w	80056f8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	8a3a      	ldrh	r2, [r7, #16]
 80055d8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	2b20      	cmp	r3, #32
 80055e2:	d02b      	beq.n	800563c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68da      	ldr	r2, [r3, #12]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055f2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	695a      	ldr	r2, [r3, #20]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f022 0201 	bic.w	r2, r2, #1
 8005602:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	695a      	ldr	r2, [r3, #20]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005612:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2220      	movs	r2, #32
 8005618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68da      	ldr	r2, [r3, #12]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f022 0210 	bic.w	r2, r2, #16
 8005630:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005636:	4618      	mov	r0, r3
 8005638:	f7fd fb7d 	bl	8002d36 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005644:	b29b      	uxth	r3, r3
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	b29b      	uxth	r3, r3
 800564a:	4619      	mov	r1, r3
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 f876 	bl	800573e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005652:	e051      	b.n	80056f8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800565c:	b29b      	uxth	r3, r3
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005666:	b29b      	uxth	r3, r3
 8005668:	2b00      	cmp	r3, #0
 800566a:	d047      	beq.n	80056fc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 800566c:	8a7b      	ldrh	r3, [r7, #18]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d044      	beq.n	80056fc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68da      	ldr	r2, [r3, #12]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005680:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	695a      	ldr	r2, [r3, #20]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f022 0201 	bic.w	r2, r2, #1
 8005690:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2220      	movs	r2, #32
 8005696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68da      	ldr	r2, [r3, #12]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f022 0210 	bic.w	r2, r2, #16
 80056ae:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80056b0:	8a7b      	ldrh	r3, [r7, #18]
 80056b2:	4619      	mov	r1, r3
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f000 f842 	bl	800573e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80056ba:	e01f      	b.n	80056fc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80056bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d008      	beq.n	80056d8 <HAL_UART_IRQHandler+0x324>
 80056c6:	6a3b      	ldr	r3, [r7, #32]
 80056c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d003      	beq.n	80056d8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 f9f2 	bl	8005aba <UART_Transmit_IT>
    return;
 80056d6:	e012      	b.n	80056fe <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00d      	beq.n	80056fe <HAL_UART_IRQHandler+0x34a>
 80056e2:	6a3b      	ldr	r3, [r7, #32]
 80056e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d008      	beq.n	80056fe <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 fa33 	bl	8005b58 <UART_EndTransmit_IT>
    return;
 80056f2:	e004      	b.n	80056fe <HAL_UART_IRQHandler+0x34a>
    return;
 80056f4:	bf00      	nop
 80056f6:	e002      	b.n	80056fe <HAL_UART_IRQHandler+0x34a>
      return;
 80056f8:	bf00      	nop
 80056fa:	e000      	b.n	80056fe <HAL_UART_IRQHandler+0x34a>
      return;
 80056fc:	bf00      	nop
  }
}
 80056fe:	3728      	adds	r7, #40	; 0x28
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	08005a93 	.word	0x08005a93

08005708 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005710:	bf00      	nop
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	bc80      	pop	{r7}
 8005718:	4770      	bx	lr

0800571a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800571a:	b480      	push	{r7}
 800571c:	b083      	sub	sp, #12
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005722:	bf00      	nop
 8005724:	370c      	adds	r7, #12
 8005726:	46bd      	mov	sp, r7
 8005728:	bc80      	pop	{r7}
 800572a:	4770      	bx	lr

0800572c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	bc80      	pop	{r7}
 800573c:	4770      	bx	lr

0800573e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800573e:	b480      	push	{r7}
 8005740:	b083      	sub	sp, #12
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
 8005746:	460b      	mov	r3, r1
 8005748:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800574a:	bf00      	nop
 800574c:	370c      	adds	r7, #12
 800574e:	46bd      	mov	sp, r7
 8005750:	bc80      	pop	{r7}
 8005752:	4770      	bx	lr

08005754 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005760:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0320 	and.w	r3, r3, #32
 800576c:	2b00      	cmp	r3, #0
 800576e:	d12a      	bne.n	80057c6 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68da      	ldr	r2, [r3, #12]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005784:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	695a      	ldr	r2, [r3, #20]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f022 0201 	bic.w	r2, r2, #1
 8005794:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	695a      	ldr	r2, [r3, #20]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057a4:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2220      	movs	r2, #32
 80057aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d107      	bne.n	80057c6 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68da      	ldr	r2, [r3, #12]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f022 0210 	bic.w	r2, r2, #16
 80057c4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d106      	bne.n	80057dc <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057d2:	4619      	mov	r1, r3
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f7ff ffb2 	bl	800573e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80057da:	e002      	b.n	80057e2 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f7fb fcbf 	bl	8001160 <HAL_UART_RxCpltCallback>
}
 80057e2:	bf00      	nop
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b084      	sub	sp, #16
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d108      	bne.n	8005812 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005804:	085b      	lsrs	r3, r3, #1
 8005806:	b29b      	uxth	r3, r3
 8005808:	4619      	mov	r1, r3
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f7ff ff97 	bl	800573e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005810:	e002      	b.n	8005818 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f7ff ff81 	bl	800571a <HAL_UART_RxHalfCpltCallback>
}
 8005818:	bf00      	nop
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005828:	2300      	movs	r3, #0
 800582a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005830:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800583c:	2b00      	cmp	r3, #0
 800583e:	bf14      	ite	ne
 8005840:	2301      	movne	r3, #1
 8005842:	2300      	moveq	r3, #0
 8005844:	b2db      	uxtb	r3, r3
 8005846:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800584e:	b2db      	uxtb	r3, r3
 8005850:	2b21      	cmp	r3, #33	; 0x21
 8005852:	d108      	bne.n	8005866 <UART_DMAError+0x46>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d005      	beq.n	8005866 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	2200      	movs	r2, #0
 800585e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005860:	68b8      	ldr	r0, [r7, #8]
 8005862:	f000 f8d5 	bl	8005a10 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005870:	2b00      	cmp	r3, #0
 8005872:	bf14      	ite	ne
 8005874:	2301      	movne	r3, #1
 8005876:	2300      	moveq	r3, #0
 8005878:	b2db      	uxtb	r3, r3
 800587a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2b22      	cmp	r3, #34	; 0x22
 8005886:	d108      	bne.n	800589a <UART_DMAError+0x7a>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d005      	beq.n	800589a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	2200      	movs	r2, #0
 8005892:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005894:	68b8      	ldr	r0, [r7, #8]
 8005896:	f000 f8d0 	bl	8005a3a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589e:	f043 0210 	orr.w	r2, r3, #16
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058a6:	68b8      	ldr	r0, [r7, #8]
 80058a8:	f7ff ff40 	bl	800572c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058ac:	bf00      	nop
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	603b      	str	r3, [r7, #0]
 80058c0:	4613      	mov	r3, r2
 80058c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058c4:	e02c      	b.n	8005920 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058cc:	d028      	beq.n	8005920 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d007      	beq.n	80058e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80058d4:	f7fc fa04 	bl	8001ce0 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	69ba      	ldr	r2, [r7, #24]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d21d      	bcs.n	8005920 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68da      	ldr	r2, [r3, #12]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80058f2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	695a      	ldr	r2, [r3, #20]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f022 0201 	bic.w	r2, r2, #1
 8005902:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2220      	movs	r2, #32
 8005908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2220      	movs	r2, #32
 8005910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	e00f      	b.n	8005940 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	4013      	ands	r3, r2
 800592a:	68ba      	ldr	r2, [r7, #8]
 800592c:	429a      	cmp	r2, r3
 800592e:	bf0c      	ite	eq
 8005930:	2301      	moveq	r3, #1
 8005932:	2300      	movne	r3, #0
 8005934:	b2db      	uxtb	r3, r3
 8005936:	461a      	mov	r2, r3
 8005938:	79fb      	ldrb	r3, [r7, #7]
 800593a:	429a      	cmp	r2, r3
 800593c:	d0c3      	beq.n	80058c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3710      	adds	r7, #16
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	4613      	mov	r3, r2
 8005954:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005956:	68ba      	ldr	r2, [r7, #8]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	88fa      	ldrh	r2, [r7, #6]
 8005960:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2222      	movs	r2, #34	; 0x22
 800596c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005974:	4a23      	ldr	r2, [pc, #140]	; (8005a04 <UART_Start_Receive_DMA+0xbc>)
 8005976:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597c:	4a22      	ldr	r2, [pc, #136]	; (8005a08 <UART_Start_Receive_DMA+0xc0>)
 800597e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005984:	4a21      	ldr	r2, [pc, #132]	; (8005a0c <UART_Start_Receive_DMA+0xc4>)
 8005986:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598c:	2200      	movs	r2, #0
 800598e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005990:	f107 0308 	add.w	r3, r7, #8
 8005994:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	3304      	adds	r3, #4
 80059a0:	4619      	mov	r1, r3
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	681a      	ldr	r2, [r3, #0]
 80059a6:	88fb      	ldrh	r3, [r7, #6]
 80059a8:	f7fd f966 	bl	8002c78 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80059ac:	2300      	movs	r3, #0
 80059ae:	613b      	str	r3, [r7, #16]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	613b      	str	r3, [r7, #16]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	613b      	str	r3, [r7, #16]
 80059c0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68da      	ldr	r2, [r3, #12]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059d8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	695a      	ldr	r2, [r3, #20]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f042 0201 	orr.w	r2, r2, #1
 80059e8:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	695a      	ldr	r2, [r3, #20]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059f8:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3718      	adds	r7, #24
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	08005755 	.word	0x08005755
 8005a08:	080057eb 	.word	0x080057eb
 8005a0c:	08005821 	.word	0x08005821

08005a10 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68da      	ldr	r2, [r3, #12]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005a26:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bc80      	pop	{r7}
 8005a38:	4770      	bx	lr

08005a3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b083      	sub	sp, #12
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68da      	ldr	r2, [r3, #12]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005a50:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	695a      	ldr	r2, [r3, #20]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f022 0201 	bic.w	r2, r2, #1
 8005a60:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d107      	bne.n	8005a7a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68da      	ldr	r2, [r3, #12]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f022 0210 	bic.w	r2, r2, #16
 8005a78:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2220      	movs	r2, #32
 8005a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bc80      	pop	{r7}
 8005a90:	4770      	bx	lr

08005a92 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a92:	b580      	push	{r7, lr}
 8005a94:	b084      	sub	sp, #16
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f7ff fe3d 	bl	800572c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ab2:	bf00      	nop
 8005ab4:	3710      	adds	r7, #16
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}

08005aba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005aba:	b480      	push	{r7}
 8005abc:	b085      	sub	sp, #20
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b21      	cmp	r3, #33	; 0x21
 8005acc:	d13e      	bne.n	8005b4c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ad6:	d114      	bne.n	8005b02 <UART_Transmit_IT+0x48>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d110      	bne.n	8005b02 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a1b      	ldr	r3, [r3, #32]
 8005ae4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	881b      	ldrh	r3, [r3, #0]
 8005aea:	461a      	mov	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005af4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a1b      	ldr	r3, [r3, #32]
 8005afa:	1c9a      	adds	r2, r3, #2
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	621a      	str	r2, [r3, #32]
 8005b00:	e008      	b.n	8005b14 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	1c59      	adds	r1, r3, #1
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	6211      	str	r1, [r2, #32]
 8005b0c:	781a      	ldrb	r2, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	4619      	mov	r1, r3
 8005b22:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d10f      	bne.n	8005b48 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68da      	ldr	r2, [r3, #12]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b36:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68da      	ldr	r2, [r3, #12]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b46:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	e000      	b.n	8005b4e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005b4c:	2302      	movs	r3, #2
  }
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bc80      	pop	{r7}
 8005b56:	4770      	bx	lr

08005b58 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68da      	ldr	r2, [r3, #12]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b6e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2220      	movs	r2, #32
 8005b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f7ff fdc5 	bl	8005708 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3708      	adds	r7, #8
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	2b22      	cmp	r3, #34	; 0x22
 8005b9a:	f040 8099 	bne.w	8005cd0 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ba6:	d117      	bne.n	8005bd8 <UART_Receive_IT+0x50>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d113      	bne.n	8005bd8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb8:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd0:	1c9a      	adds	r2, r3, #2
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	629a      	str	r2, [r3, #40]	; 0x28
 8005bd6:	e026      	b.n	8005c26 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bdc:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005bde:	2300      	movs	r3, #0
 8005be0:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bea:	d007      	beq.n	8005bfc <UART_Receive_IT+0x74>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d10a      	bne.n	8005c0a <UART_Receive_IT+0x82>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d106      	bne.n	8005c0a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	b2da      	uxtb	r2, r3
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	701a      	strb	r2, [r3, #0]
 8005c08:	e008      	b.n	8005c1c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c20:	1c5a      	adds	r2, r3, #1
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	4619      	mov	r1, r3
 8005c34:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d148      	bne.n	8005ccc <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68da      	ldr	r2, [r3, #12]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f022 0220 	bic.w	r2, r2, #32
 8005c48:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68da      	ldr	r2, [r3, #12]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c58:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	695a      	ldr	r2, [r3, #20]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f022 0201 	bic.w	r2, r2, #1
 8005c68:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2220      	movs	r2, #32
 8005c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d123      	bne.n	8005cc2 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68da      	ldr	r2, [r3, #12]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f022 0210 	bic.w	r2, r2, #16
 8005c8e:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f003 0310 	and.w	r3, r3, #16
 8005c9a:	2b10      	cmp	r3, #16
 8005c9c:	d10a      	bne.n	8005cb4 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	60fb      	str	r3, [r7, #12]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	60fb      	str	r3, [r7, #12]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	60fb      	str	r3, [r7, #12]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005cb8:	4619      	mov	r1, r3
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f7ff fd3f 	bl	800573e <HAL_UARTEx_RxEventCallback>
 8005cc0:	e002      	b.n	8005cc8 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7fb fa4c 	bl	8001160 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	e002      	b.n	8005cd2 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	e000      	b.n	8005cd2 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005cd0:	2302      	movs	r3, #2
  }
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3718      	adds	r7, #24
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
	...

08005cdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	68da      	ldr	r2, [r3, #12]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	689a      	ldr	r2, [r3, #8]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	431a      	orrs	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	695b      	ldr	r3, [r3, #20]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005d16:	f023 030c 	bic.w	r3, r3, #12
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	6812      	ldr	r2, [r2, #0]
 8005d1e:	68b9      	ldr	r1, [r7, #8]
 8005d20:	430b      	orrs	r3, r1
 8005d22:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	699a      	ldr	r2, [r3, #24]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	430a      	orrs	r2, r1
 8005d38:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a2c      	ldr	r2, [pc, #176]	; (8005df0 <UART_SetConfig+0x114>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d103      	bne.n	8005d4c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005d44:	f7fe ff7a 	bl	8004c3c <HAL_RCC_GetPCLK2Freq>
 8005d48:	60f8      	str	r0, [r7, #12]
 8005d4a:	e002      	b.n	8005d52 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005d4c:	f7fe ff62 	bl	8004c14 <HAL_RCC_GetPCLK1Freq>
 8005d50:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	4613      	mov	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	009a      	lsls	r2, r3, #2
 8005d5c:	441a      	add	r2, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d68:	4a22      	ldr	r2, [pc, #136]	; (8005df4 <UART_SetConfig+0x118>)
 8005d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d6e:	095b      	lsrs	r3, r3, #5
 8005d70:	0119      	lsls	r1, r3, #4
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	4613      	mov	r3, r2
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	009a      	lsls	r2, r3, #2
 8005d7c:	441a      	add	r2, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d88:	4b1a      	ldr	r3, [pc, #104]	; (8005df4 <UART_SetConfig+0x118>)
 8005d8a:	fba3 0302 	umull	r0, r3, r3, r2
 8005d8e:	095b      	lsrs	r3, r3, #5
 8005d90:	2064      	movs	r0, #100	; 0x64
 8005d92:	fb00 f303 	mul.w	r3, r0, r3
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	011b      	lsls	r3, r3, #4
 8005d9a:	3332      	adds	r3, #50	; 0x32
 8005d9c:	4a15      	ldr	r2, [pc, #84]	; (8005df4 <UART_SetConfig+0x118>)
 8005d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005da2:	095b      	lsrs	r3, r3, #5
 8005da4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005da8:	4419      	add	r1, r3
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	4613      	mov	r3, r2
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	4413      	add	r3, r2
 8005db2:	009a      	lsls	r2, r3, #2
 8005db4:	441a      	add	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005dc0:	4b0c      	ldr	r3, [pc, #48]	; (8005df4 <UART_SetConfig+0x118>)
 8005dc2:	fba3 0302 	umull	r0, r3, r3, r2
 8005dc6:	095b      	lsrs	r3, r3, #5
 8005dc8:	2064      	movs	r0, #100	; 0x64
 8005dca:	fb00 f303 	mul.w	r3, r0, r3
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	011b      	lsls	r3, r3, #4
 8005dd2:	3332      	adds	r3, #50	; 0x32
 8005dd4:	4a07      	ldr	r2, [pc, #28]	; (8005df4 <UART_SetConfig+0x118>)
 8005dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dda:	095b      	lsrs	r3, r3, #5
 8005ddc:	f003 020f 	and.w	r2, r3, #15
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	440a      	add	r2, r1
 8005de6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005de8:	bf00      	nop
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	40013800 	.word	0x40013800
 8005df4:	51eb851f 	.word	0x51eb851f

08005df8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dfe:	f3ef 8305 	mrs	r3, IPSR
 8005e02:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e04:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10f      	bne.n	8005e2a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e0a:	f3ef 8310 	mrs	r3, PRIMASK
 8005e0e:	607b      	str	r3, [r7, #4]
  return(result);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d109      	bne.n	8005e2a <osKernelInitialize+0x32>
 8005e16:	4b10      	ldr	r3, [pc, #64]	; (8005e58 <osKernelInitialize+0x60>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	d109      	bne.n	8005e32 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e1e:	f3ef 8311 	mrs	r3, BASEPRI
 8005e22:	603b      	str	r3, [r7, #0]
  return(result);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005e2a:	f06f 0305 	mvn.w	r3, #5
 8005e2e:	60fb      	str	r3, [r7, #12]
 8005e30:	e00c      	b.n	8005e4c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005e32:	4b09      	ldr	r3, [pc, #36]	; (8005e58 <osKernelInitialize+0x60>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d105      	bne.n	8005e46 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005e3a:	4b07      	ldr	r3, [pc, #28]	; (8005e58 <osKernelInitialize+0x60>)
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005e40:	2300      	movs	r3, #0
 8005e42:	60fb      	str	r3, [r7, #12]
 8005e44:	e002      	b.n	8005e4c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005e46:	f04f 33ff 	mov.w	r3, #4294967295
 8005e4a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3714      	adds	r7, #20
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bc80      	pop	{r7}
 8005e56:	4770      	bx	lr
 8005e58:	20000310 	.word	0x20000310

08005e5c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b084      	sub	sp, #16
 8005e60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e62:	f3ef 8305 	mrs	r3, IPSR
 8005e66:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e68:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d10f      	bne.n	8005e8e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e6e:	f3ef 8310 	mrs	r3, PRIMASK
 8005e72:	607b      	str	r3, [r7, #4]
  return(result);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d109      	bne.n	8005e8e <osKernelStart+0x32>
 8005e7a:	4b11      	ldr	r3, [pc, #68]	; (8005ec0 <osKernelStart+0x64>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d109      	bne.n	8005e96 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e82:	f3ef 8311 	mrs	r3, BASEPRI
 8005e86:	603b      	str	r3, [r7, #0]
  return(result);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d003      	beq.n	8005e96 <osKernelStart+0x3a>
    stat = osErrorISR;
 8005e8e:	f06f 0305 	mvn.w	r3, #5
 8005e92:	60fb      	str	r3, [r7, #12]
 8005e94:	e00e      	b.n	8005eb4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8005e96:	4b0a      	ldr	r3, [pc, #40]	; (8005ec0 <osKernelStart+0x64>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d107      	bne.n	8005eae <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8005e9e:	4b08      	ldr	r3, [pc, #32]	; (8005ec0 <osKernelStart+0x64>)
 8005ea0:	2202      	movs	r2, #2
 8005ea2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005ea4:	f001 fc4c 	bl	8007740 <vTaskStartScheduler>
      stat = osOK;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	60fb      	str	r3, [r7, #12]
 8005eac:	e002      	b.n	8005eb4 <osKernelStart+0x58>
    } else {
      stat = osError;
 8005eae:	f04f 33ff 	mov.w	r3, #4294967295
 8005eb2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	20000310 	.word	0x20000310

08005ec4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b092      	sub	sp, #72	; 0x48
 8005ec8:	af04      	add	r7, sp, #16
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ed4:	f3ef 8305 	mrs	r3, IPSR
 8005ed8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f040 8094 	bne.w	800600a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ee2:	f3ef 8310 	mrs	r3, PRIMASK
 8005ee6:	623b      	str	r3, [r7, #32]
  return(result);
 8005ee8:	6a3b      	ldr	r3, [r7, #32]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f040 808d 	bne.w	800600a <osThreadNew+0x146>
 8005ef0:	4b48      	ldr	r3, [pc, #288]	; (8006014 <osThreadNew+0x150>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d106      	bne.n	8005f06 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005ef8:	f3ef 8311 	mrs	r3, BASEPRI
 8005efc:	61fb      	str	r3, [r7, #28]
  return(result);
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f040 8082 	bne.w	800600a <osThreadNew+0x146>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d07e      	beq.n	800600a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005f0c:	2380      	movs	r3, #128	; 0x80
 8005f0e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005f10:	2318      	movs	r3, #24
 8005f12:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8005f14:	2300      	movs	r3, #0
 8005f16:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005f18:	f107 031b 	add.w	r3, r7, #27
 8005f1c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8005f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f22:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d045      	beq.n	8005fb6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d002      	beq.n	8005f38 <osThreadNew+0x74>
        name = attr->name;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d002      	beq.n	8005f46 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	699b      	ldr	r3, [r3, #24]
 8005f44:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d008      	beq.n	8005f5e <osThreadNew+0x9a>
 8005f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4e:	2b38      	cmp	r3, #56	; 0x38
 8005f50:	d805      	bhi.n	8005f5e <osThreadNew+0x9a>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d001      	beq.n	8005f62 <osThreadNew+0x9e>
        return (NULL);
 8005f5e:	2300      	movs	r3, #0
 8005f60:	e054      	b.n	800600c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d003      	beq.n	8005f72 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	089b      	lsrs	r3, r3, #2
 8005f70:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00e      	beq.n	8005f98 <osThreadNew+0xd4>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	2bb7      	cmp	r3, #183	; 0xb7
 8005f80:	d90a      	bls.n	8005f98 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d006      	beq.n	8005f98 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	695b      	ldr	r3, [r3, #20]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d002      	beq.n	8005f98 <osThreadNew+0xd4>
        mem = 1;
 8005f92:	2301      	movs	r3, #1
 8005f94:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f96:	e010      	b.n	8005fba <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d10c      	bne.n	8005fba <osThreadNew+0xf6>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d108      	bne.n	8005fba <osThreadNew+0xf6>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d104      	bne.n	8005fba <osThreadNew+0xf6>
          mem = 0;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fb4:	e001      	b.n	8005fba <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8005fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d110      	bne.n	8005fe2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005fc8:	9202      	str	r2, [sp, #8]
 8005fca:	9301      	str	r3, [sp, #4]
 8005fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fce:	9300      	str	r3, [sp, #0]
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fd4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f001 f9ce 	bl	8007378 <xTaskCreateStatic>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	617b      	str	r3, [r7, #20]
 8005fe0:	e013      	b.n	800600a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d110      	bne.n	800600a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	f107 0314 	add.w	r3, r7, #20
 8005ff0:	9301      	str	r3, [sp, #4]
 8005ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff4:	9300      	str	r3, [sp, #0]
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f001 fa18 	bl	8007430 <xTaskCreate>
 8006000:	4603      	mov	r3, r0
 8006002:	2b01      	cmp	r3, #1
 8006004:	d001      	beq.n	800600a <osThreadNew+0x146>
          hTask = NULL;
 8006006:	2300      	movs	r3, #0
 8006008:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800600a:	697b      	ldr	r3, [r7, #20]
}
 800600c:	4618      	mov	r0, r3
 800600e:	3738      	adds	r7, #56	; 0x38
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	20000310 	.word	0x20000310

08006018 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800601e:	f3ef 8305 	mrs	r3, IPSR
 8006022:	60bb      	str	r3, [r7, #8]
  return(result);
 8006024:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006026:	2b00      	cmp	r3, #0
 8006028:	d10f      	bne.n	800604a <osThreadYield+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800602a:	f3ef 8310 	mrs	r3, PRIMASK
 800602e:	607b      	str	r3, [r7, #4]
  return(result);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d109      	bne.n	800604a <osThreadYield+0x32>
 8006036:	4b0f      	ldr	r3, [pc, #60]	; (8006074 <osThreadYield+0x5c>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2b02      	cmp	r3, #2
 800603c:	d109      	bne.n	8006052 <osThreadYield+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800603e:	f3ef 8311 	mrs	r3, BASEPRI
 8006042:	603b      	str	r3, [r7, #0]
  return(result);
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d003      	beq.n	8006052 <osThreadYield+0x3a>
    stat = osErrorISR;
 800604a:	f06f 0305 	mvn.w	r3, #5
 800604e:	60fb      	str	r3, [r7, #12]
 8006050:	e009      	b.n	8006066 <osThreadYield+0x4e>
  } else {
    stat = osOK;
 8006052:	2300      	movs	r3, #0
 8006054:	60fb      	str	r3, [r7, #12]
    taskYIELD();
 8006056:	4b08      	ldr	r3, [pc, #32]	; (8006078 <osThreadYield+0x60>)
 8006058:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800605c:	601a      	str	r2, [r3, #0]
 800605e:	f3bf 8f4f 	dsb	sy
 8006062:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8006066:	68fb      	ldr	r3, [r7, #12]
}
 8006068:	4618      	mov	r0, r3
 800606a:	3714      	adds	r7, #20
 800606c:	46bd      	mov	sp, r7
 800606e:	bc80      	pop	{r7}
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	20000310 	.word	0x20000310
 8006078:	e000ed04 	.word	0xe000ed04

0800607c <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800607c:	b580      	push	{r7, lr}
 800607e:	b08a      	sub	sp, #40	; 0x28
 8006080:	af02      	add	r7, sp, #8
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d002      	beq.n	8006096 <osThreadFlagsSet+0x1a>
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	da03      	bge.n	800609e <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8006096:	f06f 0303 	mvn.w	r3, #3
 800609a:	60fb      	str	r3, [r7, #12]
 800609c:	e045      	b.n	800612a <osThreadFlagsSet+0xae>
  }
  else {
    rflags = (uint32_t)osError;
 800609e:	f04f 33ff 	mov.w	r3, #4294967295
 80060a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060a4:	f3ef 8305 	mrs	r3, IPSR
 80060a8:	61bb      	str	r3, [r7, #24]
  return(result);
 80060aa:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10f      	bne.n	80060d0 <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060b0:	f3ef 8310 	mrs	r3, PRIMASK
 80060b4:	617b      	str	r3, [r7, #20]
  return(result);
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d109      	bne.n	80060d0 <osThreadFlagsSet+0x54>
 80060bc:	4b1d      	ldr	r3, [pc, #116]	; (8006134 <osThreadFlagsSet+0xb8>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d125      	bne.n	8006110 <osThreadFlagsSet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80060c4:	f3ef 8311 	mrs	r3, BASEPRI
 80060c8:	613b      	str	r3, [r7, #16]
  return(result);
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d01f      	beq.n	8006110 <osThreadFlagsSet+0x94>
      yield = pdFALSE;
 80060d0:	2300      	movs	r3, #0
 80060d2:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 80060d4:	f107 0308 	add.w	r3, r7, #8
 80060d8:	9300      	str	r3, [sp, #0]
 80060da:	2300      	movs	r3, #0
 80060dc:	2201      	movs	r2, #1
 80060de:	6839      	ldr	r1, [r7, #0]
 80060e0:	69f8      	ldr	r0, [r7, #28]
 80060e2:	f002 f925 	bl	8008330 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 80060e6:	f107 030c 	add.w	r3, r7, #12
 80060ea:	2200      	movs	r2, #0
 80060ec:	9200      	str	r2, [sp, #0]
 80060ee:	2200      	movs	r2, #0
 80060f0:	2100      	movs	r1, #0
 80060f2:	69f8      	ldr	r0, [r7, #28]
 80060f4:	f002 f91c 	bl	8008330 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d015      	beq.n	800612a <osThreadFlagsSet+0xae>
 80060fe:	4b0e      	ldr	r3, [pc, #56]	; (8006138 <osThreadFlagsSet+0xbc>)
 8006100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006104:	601a      	str	r2, [r3, #0]
 8006106:	f3bf 8f4f 	dsb	sy
 800610a:	f3bf 8f6f 	isb	sy
 800610e:	e00c      	b.n	800612a <osThreadFlagsSet+0xae>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8006110:	2300      	movs	r3, #0
 8006112:	2201      	movs	r2, #1
 8006114:	6839      	ldr	r1, [r7, #0]
 8006116:	69f8      	ldr	r0, [r7, #28]
 8006118:	f002 f860 	bl	80081dc <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800611c:	f107 030c 	add.w	r3, r7, #12
 8006120:	2200      	movs	r2, #0
 8006122:	2100      	movs	r1, #0
 8006124:	69f8      	ldr	r0, [r7, #28]
 8006126:	f002 f859 	bl	80081dc <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800612a:	68fb      	ldr	r3, [r7, #12]
}
 800612c:	4618      	mov	r0, r3
 800612e:	3720      	adds	r7, #32
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	20000310 	.word	0x20000310
 8006138:	e000ed04 	.word	0xe000ed04

0800613c <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800613c:	b580      	push	{r7, lr}
 800613e:	b08e      	sub	sp, #56	; 0x38
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006148:	f3ef 8305 	mrs	r3, IPSR
 800614c:	61fb      	str	r3, [r7, #28]
  return(result);
 800614e:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8006150:	2b00      	cmp	r3, #0
 8006152:	d10f      	bne.n	8006174 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006154:	f3ef 8310 	mrs	r3, PRIMASK
 8006158:	61bb      	str	r3, [r7, #24]
  return(result);
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d109      	bne.n	8006174 <osThreadFlagsWait+0x38>
 8006160:	4b3f      	ldr	r3, [pc, #252]	; (8006260 <osThreadFlagsWait+0x124>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2b02      	cmp	r3, #2
 8006166:	d109      	bne.n	800617c <osThreadFlagsWait+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006168:	f3ef 8311 	mrs	r3, BASEPRI
 800616c:	617b      	str	r3, [r7, #20]
  return(result);
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d003      	beq.n	800617c <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 8006174:	f06f 0305 	mvn.w	r3, #5
 8006178:	637b      	str	r3, [r7, #52]	; 0x34
 800617a:	e06b      	b.n	8006254 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2b00      	cmp	r3, #0
 8006180:	da03      	bge.n	800618a <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 8006182:	f06f 0303 	mvn.w	r3, #3
 8006186:	637b      	str	r3, [r7, #52]	; 0x34
 8006188:	e064      	b.n	8006254 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	f003 0302 	and.w	r3, r3, #2
 8006190:	2b00      	cmp	r3, #0
 8006192:	d002      	beq.n	800619a <osThreadFlagsWait+0x5e>
      clear = 0U;
 8006194:	2300      	movs	r3, #0
 8006196:	633b      	str	r3, [r7, #48]	; 0x30
 8006198:	e001      	b.n	800619e <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 800619e:	2300      	movs	r3, #0
 80061a0:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 80061a6:	f001 fbe7 	bl	8007978 <xTaskGetTickCount>
 80061aa:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 80061ac:	f107 0210 	add.w	r2, r7, #16
 80061b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80061b4:	2000      	movs	r0, #0
 80061b6:	f001 ffb1 	bl	800811c <xTaskNotifyWait>
 80061ba:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 80061bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d137      	bne.n	8006232 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 80061c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	4013      	ands	r3, r2
 80061c8:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061ce:	4313      	orrs	r3, r2
 80061d0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	f003 0301 	and.w	r3, r3, #1
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00c      	beq.n	80061f6 <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061e0:	4013      	ands	r3, r2
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d032      	beq.n	800624e <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10f      	bne.n	800620e <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 80061ee:	f06f 0302 	mvn.w	r3, #2
 80061f2:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 80061f4:	e02e      	b.n	8006254 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061fa:	4013      	ands	r3, r2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d128      	bne.n	8006252 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d103      	bne.n	800620e <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 8006206:	f06f 0302 	mvn.w	r3, #2
 800620a:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800620c:	e022      	b.n	8006254 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800620e:	f001 fbb3 	bl	8007978 <xTaskGetTickCount>
 8006212:	4602      	mov	r2, r0
 8006214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 800621a:	6a3a      	ldr	r2, [r7, #32]
 800621c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621e:	429a      	cmp	r2, r3
 8006220:	d902      	bls.n	8006228 <osThreadFlagsWait+0xec>
          tout  = 0;
 8006222:	2300      	movs	r3, #0
 8006224:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006226:	e00e      	b.n	8006246 <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 8006228:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800622a:	6a3b      	ldr	r3, [r7, #32]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006230:	e009      	b.n	8006246 <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d103      	bne.n	8006240 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 8006238:	f06f 0302 	mvn.w	r3, #2
 800623c:	637b      	str	r3, [r7, #52]	; 0x34
 800623e:	e002      	b.n	8006246 <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8006240:	f06f 0301 	mvn.w	r3, #1
 8006244:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 8006246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1af      	bne.n	80061ac <osThreadFlagsWait+0x70>
 800624c:	e002      	b.n	8006254 <osThreadFlagsWait+0x118>
            break;
 800624e:	bf00      	nop
 8006250:	e000      	b.n	8006254 <osThreadFlagsWait+0x118>
            break;
 8006252:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8006254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006256:	4618      	mov	r0, r3
 8006258:	3738      	adds	r7, #56	; 0x38
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	20000310 	.word	0x20000310

08006264 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800626c:	f3ef 8305 	mrs	r3, IPSR
 8006270:	613b      	str	r3, [r7, #16]
  return(result);
 8006272:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006274:	2b00      	cmp	r3, #0
 8006276:	d10f      	bne.n	8006298 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006278:	f3ef 8310 	mrs	r3, PRIMASK
 800627c:	60fb      	str	r3, [r7, #12]
  return(result);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d109      	bne.n	8006298 <osDelay+0x34>
 8006284:	4b0d      	ldr	r3, [pc, #52]	; (80062bc <osDelay+0x58>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2b02      	cmp	r3, #2
 800628a:	d109      	bne.n	80062a0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800628c:	f3ef 8311 	mrs	r3, BASEPRI
 8006290:	60bb      	str	r3, [r7, #8]
  return(result);
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d003      	beq.n	80062a0 <osDelay+0x3c>
    stat = osErrorISR;
 8006298:	f06f 0305 	mvn.w	r3, #5
 800629c:	617b      	str	r3, [r7, #20]
 800629e:	e007      	b.n	80062b0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80062a0:	2300      	movs	r3, #0
 80062a2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d002      	beq.n	80062b0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f001 fa14 	bl	80076d8 <vTaskDelay>
    }
  }

  return (stat);
 80062b0:	697b      	ldr	r3, [r7, #20]
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3718      	adds	r7, #24
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	20000310 	.word	0x20000310

080062c0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b08c      	sub	sp, #48	; 0x30
 80062c4:	af02      	add	r7, sp, #8
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80062cc:	2300      	movs	r3, #0
 80062ce:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062d0:	f3ef 8305 	mrs	r3, IPSR
 80062d4:	61bb      	str	r3, [r7, #24]
  return(result);
 80062d6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d16f      	bne.n	80063bc <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062dc:	f3ef 8310 	mrs	r3, PRIMASK
 80062e0:	617b      	str	r3, [r7, #20]
  return(result);
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d169      	bne.n	80063bc <osMessageQueueNew+0xfc>
 80062e8:	4b37      	ldr	r3, [pc, #220]	; (80063c8 <osMessageQueueNew+0x108>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2b02      	cmp	r3, #2
 80062ee:	d105      	bne.n	80062fc <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80062f0:	f3ef 8311 	mrs	r3, BASEPRI
 80062f4:	613b      	str	r3, [r7, #16]
  return(result);
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d15f      	bne.n	80063bc <osMessageQueueNew+0xfc>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d05c      	beq.n	80063bc <osMessageQueueNew+0xfc>
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d059      	beq.n	80063bc <osMessageQueueNew+0xfc>
    mem = -1;
 8006308:	f04f 33ff 	mov.w	r3, #4294967295
 800630c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d029      	beq.n	8006368 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d012      	beq.n	8006342 <osMessageQueueNew+0x82>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	2b4f      	cmp	r3, #79	; 0x4f
 8006322:	d90e      	bls.n	8006342 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00a      	beq.n	8006342 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	695a      	ldr	r2, [r3, #20]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	68b9      	ldr	r1, [r7, #8]
 8006334:	fb01 f303 	mul.w	r3, r1, r3
 8006338:	429a      	cmp	r2, r3
 800633a:	d302      	bcc.n	8006342 <osMessageQueueNew+0x82>
        mem = 1;
 800633c:	2301      	movs	r3, #1
 800633e:	623b      	str	r3, [r7, #32]
 8006340:	e014      	b.n	800636c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d110      	bne.n	800636c <osMessageQueueNew+0xac>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10c      	bne.n	800636c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006356:	2b00      	cmp	r3, #0
 8006358:	d108      	bne.n	800636c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d104      	bne.n	800636c <osMessageQueueNew+0xac>
          mem = 0;
 8006362:	2300      	movs	r3, #0
 8006364:	623b      	str	r3, [r7, #32]
 8006366:	e001      	b.n	800636c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8006368:	2300      	movs	r3, #0
 800636a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800636c:	6a3b      	ldr	r3, [r7, #32]
 800636e:	2b01      	cmp	r3, #1
 8006370:	d10b      	bne.n	800638a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	691a      	ldr	r2, [r3, #16]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	2100      	movs	r1, #0
 800637c:	9100      	str	r1, [sp, #0]
 800637e:	68b9      	ldr	r1, [r7, #8]
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f000 fa85 	bl	8006890 <xQueueGenericCreateStatic>
 8006386:	6278      	str	r0, [r7, #36]	; 0x24
 8006388:	e008      	b.n	800639c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800638a:	6a3b      	ldr	r3, [r7, #32]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d105      	bne.n	800639c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006390:	2200      	movs	r2, #0
 8006392:	68b9      	ldr	r1, [r7, #8]
 8006394:	68f8      	ldr	r0, [r7, #12]
 8006396:	f000 faf2 	bl	800697e <xQueueGenericCreate>
 800639a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800639c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00c      	beq.n	80063bc <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d003      	beq.n	80063b0 <osMessageQueueNew+0xf0>
        name = attr->name;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	61fb      	str	r3, [r7, #28]
 80063ae:	e001      	b.n	80063b4 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80063b0:	2300      	movs	r3, #0
 80063b2:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80063b4:	69f9      	ldr	r1, [r7, #28]
 80063b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80063b8:	f000 ff82 	bl	80072c0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80063bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3728      	adds	r7, #40	; 0x28
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	20000310 	.word	0x20000310

080063cc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b08a      	sub	sp, #40	; 0x28
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	603b      	str	r3, [r7, #0]
 80063d8:	4613      	mov	r3, r2
 80063da:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80063e0:	2300      	movs	r3, #0
 80063e2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063e4:	f3ef 8305 	mrs	r3, IPSR
 80063e8:	61fb      	str	r3, [r7, #28]
  return(result);
 80063ea:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d10f      	bne.n	8006410 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063f0:	f3ef 8310 	mrs	r3, PRIMASK
 80063f4:	61bb      	str	r3, [r7, #24]
  return(result);
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d109      	bne.n	8006410 <osMessageQueuePut+0x44>
 80063fc:	4b2b      	ldr	r3, [pc, #172]	; (80064ac <osMessageQueuePut+0xe0>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2b02      	cmp	r3, #2
 8006402:	d12e      	bne.n	8006462 <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006404:	f3ef 8311 	mrs	r3, BASEPRI
 8006408:	617b      	str	r3, [r7, #20]
  return(result);
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d028      	beq.n	8006462 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006410:	6a3b      	ldr	r3, [r7, #32]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d005      	beq.n	8006422 <osMessageQueuePut+0x56>
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d002      	beq.n	8006422 <osMessageQueuePut+0x56>
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d003      	beq.n	800642a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8006422:	f06f 0303 	mvn.w	r3, #3
 8006426:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006428:	e039      	b.n	800649e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800642a:	2300      	movs	r3, #0
 800642c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800642e:	f107 0210 	add.w	r2, r7, #16
 8006432:	2300      	movs	r3, #0
 8006434:	68b9      	ldr	r1, [r7, #8]
 8006436:	6a38      	ldr	r0, [r7, #32]
 8006438:	f000 fc00 	bl	8006c3c <xQueueGenericSendFromISR>
 800643c:	4603      	mov	r3, r0
 800643e:	2b01      	cmp	r3, #1
 8006440:	d003      	beq.n	800644a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8006442:	f06f 0302 	mvn.w	r3, #2
 8006446:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006448:	e029      	b.n	800649e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d026      	beq.n	800649e <osMessageQueuePut+0xd2>
 8006450:	4b17      	ldr	r3, [pc, #92]	; (80064b0 <osMessageQueuePut+0xe4>)
 8006452:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006456:	601a      	str	r2, [r3, #0]
 8006458:	f3bf 8f4f 	dsb	sy
 800645c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006460:	e01d      	b.n	800649e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006462:	6a3b      	ldr	r3, [r7, #32]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d002      	beq.n	800646e <osMessageQueuePut+0xa2>
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d103      	bne.n	8006476 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800646e:	f06f 0303 	mvn.w	r3, #3
 8006472:	627b      	str	r3, [r7, #36]	; 0x24
 8006474:	e014      	b.n	80064a0 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006476:	2300      	movs	r3, #0
 8006478:	683a      	ldr	r2, [r7, #0]
 800647a:	68b9      	ldr	r1, [r7, #8]
 800647c:	6a38      	ldr	r0, [r7, #32]
 800647e:	f000 fadf 	bl	8006a40 <xQueueGenericSend>
 8006482:	4603      	mov	r3, r0
 8006484:	2b01      	cmp	r3, #1
 8006486:	d00b      	beq.n	80064a0 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d003      	beq.n	8006496 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800648e:	f06f 0301 	mvn.w	r3, #1
 8006492:	627b      	str	r3, [r7, #36]	; 0x24
 8006494:	e004      	b.n	80064a0 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8006496:	f06f 0302 	mvn.w	r3, #2
 800649a:	627b      	str	r3, [r7, #36]	; 0x24
 800649c:	e000      	b.n	80064a0 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800649e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 80064a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3728      	adds	r7, #40	; 0x28
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	20000310 	.word	0x20000310
 80064b0:	e000ed04 	.word	0xe000ed04

080064b4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b08a      	sub	sp, #40	; 0x28
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
 80064c0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80064c6:	2300      	movs	r3, #0
 80064c8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064ca:	f3ef 8305 	mrs	r3, IPSR
 80064ce:	61fb      	str	r3, [r7, #28]
  return(result);
 80064d0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10f      	bne.n	80064f6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064d6:	f3ef 8310 	mrs	r3, PRIMASK
 80064da:	61bb      	str	r3, [r7, #24]
  return(result);
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d109      	bne.n	80064f6 <osMessageQueueGet+0x42>
 80064e2:	4b2b      	ldr	r3, [pc, #172]	; (8006590 <osMessageQueueGet+0xdc>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d12e      	bne.n	8006548 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064ea:	f3ef 8311 	mrs	r3, BASEPRI
 80064ee:	617b      	str	r3, [r7, #20]
  return(result);
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d028      	beq.n	8006548 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80064f6:	6a3b      	ldr	r3, [r7, #32]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d005      	beq.n	8006508 <osMessageQueueGet+0x54>
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d002      	beq.n	8006508 <osMessageQueueGet+0x54>
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d003      	beq.n	8006510 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8006508:	f06f 0303 	mvn.w	r3, #3
 800650c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800650e:	e038      	b.n	8006582 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8006510:	2300      	movs	r3, #0
 8006512:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006514:	f107 0310 	add.w	r3, r7, #16
 8006518:	461a      	mov	r2, r3
 800651a:	68b9      	ldr	r1, [r7, #8]
 800651c:	6a38      	ldr	r0, [r7, #32]
 800651e:	f000 fd05 	bl	8006f2c <xQueueReceiveFromISR>
 8006522:	4603      	mov	r3, r0
 8006524:	2b01      	cmp	r3, #1
 8006526:	d003      	beq.n	8006530 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8006528:	f06f 0302 	mvn.w	r3, #2
 800652c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800652e:	e028      	b.n	8006582 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d025      	beq.n	8006582 <osMessageQueueGet+0xce>
 8006536:	4b17      	ldr	r3, [pc, #92]	; (8006594 <osMessageQueueGet+0xe0>)
 8006538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006546:	e01c      	b.n	8006582 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006548:	6a3b      	ldr	r3, [r7, #32]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d002      	beq.n	8006554 <osMessageQueueGet+0xa0>
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d103      	bne.n	800655c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8006554:	f06f 0303 	mvn.w	r3, #3
 8006558:	627b      	str	r3, [r7, #36]	; 0x24
 800655a:	e013      	b.n	8006584 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800655c:	683a      	ldr	r2, [r7, #0]
 800655e:	68b9      	ldr	r1, [r7, #8]
 8006560:	6a38      	ldr	r0, [r7, #32]
 8006562:	f000 fc03 	bl	8006d6c <xQueueReceive>
 8006566:	4603      	mov	r3, r0
 8006568:	2b01      	cmp	r3, #1
 800656a:	d00b      	beq.n	8006584 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d003      	beq.n	800657a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8006572:	f06f 0301 	mvn.w	r3, #1
 8006576:	627b      	str	r3, [r7, #36]	; 0x24
 8006578:	e004      	b.n	8006584 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800657a:	f06f 0302 	mvn.w	r3, #2
 800657e:	627b      	str	r3, [r7, #36]	; 0x24
 8006580:	e000      	b.n	8006584 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006582:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006586:	4618      	mov	r0, r3
 8006588:	3728      	adds	r7, #40	; 0x28
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	20000310 	.word	0x20000310
 8006594:	e000ed04 	.word	0xe000ed04

08006598 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8006598:	b580      	push	{r7, lr}
 800659a:	b088      	sub	sp, #32
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d102      	bne.n	80065b0 <osMessageQueueGetCount+0x18>
    count = 0U;
 80065aa:	2300      	movs	r3, #0
 80065ac:	61fb      	str	r3, [r7, #28]
 80065ae:	e01e      	b.n	80065ee <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065b0:	f3ef 8305 	mrs	r3, IPSR
 80065b4:	617b      	str	r3, [r7, #20]
  return(result);
 80065b6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d10f      	bne.n	80065dc <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065bc:	f3ef 8310 	mrs	r3, PRIMASK
 80065c0:	613b      	str	r3, [r7, #16]
  return(result);
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d109      	bne.n	80065dc <osMessageQueueGetCount+0x44>
 80065c8:	4b0b      	ldr	r3, [pc, #44]	; (80065f8 <osMessageQueueGetCount+0x60>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d10a      	bne.n	80065e6 <osMessageQueueGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065d0:	f3ef 8311 	mrs	r3, BASEPRI
 80065d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d004      	beq.n	80065e6 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80065dc:	69b8      	ldr	r0, [r7, #24]
 80065de:	f000 fd43 	bl	8007068 <uxQueueMessagesWaitingFromISR>
 80065e2:	61f8      	str	r0, [r7, #28]
 80065e4:	e003      	b.n	80065ee <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80065e6:	69b8      	ldr	r0, [r7, #24]
 80065e8:	f000 fd20 	bl	800702c <uxQueueMessagesWaiting>
 80065ec:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 80065ee:	69fb      	ldr	r3, [r7, #28]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3720      	adds	r7, #32
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	20000310 	.word	0x20000310

080065fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	4a06      	ldr	r2, [pc, #24]	; (8006624 <vApplicationGetIdleTaskMemory+0x28>)
 800660c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	4a05      	ldr	r2, [pc, #20]	; (8006628 <vApplicationGetIdleTaskMemory+0x2c>)
 8006612:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2280      	movs	r2, #128	; 0x80
 8006618:	601a      	str	r2, [r3, #0]
}
 800661a:	bf00      	nop
 800661c:	3714      	adds	r7, #20
 800661e:	46bd      	mov	sp, r7
 8006620:	bc80      	pop	{r7}
 8006622:	4770      	bx	lr
 8006624:	20000314 	.word	0x20000314
 8006628:	200003cc 	.word	0x200003cc

0800662c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800662c:	b480      	push	{r7}
 800662e:	b085      	sub	sp, #20
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	4a07      	ldr	r2, [pc, #28]	; (8006658 <vApplicationGetTimerTaskMemory+0x2c>)
 800663c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	4a06      	ldr	r2, [pc, #24]	; (800665c <vApplicationGetTimerTaskMemory+0x30>)
 8006642:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f44f 7280 	mov.w	r2, #256	; 0x100
 800664a:	601a      	str	r2, [r3, #0]
}
 800664c:	bf00      	nop
 800664e:	3714      	adds	r7, #20
 8006650:	46bd      	mov	sp, r7
 8006652:	bc80      	pop	{r7}
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	200005cc 	.word	0x200005cc
 800665c:	20000684 	.word	0x20000684

08006660 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f103 0208 	add.w	r2, r3, #8
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f04f 32ff 	mov.w	r2, #4294967295
 8006678:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f103 0208 	add.w	r2, r3, #8
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f103 0208 	add.w	r2, r3, #8
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	bc80      	pop	{r7}
 800669c:	4770      	bx	lr

0800669e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800669e:	b480      	push	{r7}
 80066a0:	b083      	sub	sp, #12
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80066ac:	bf00      	nop
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bc80      	pop	{r7}
 80066b4:	4770      	bx	lr

080066b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066b6:	b480      	push	{r7}
 80066b8:	b085      	sub	sp, #20
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
 80066be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	689a      	ldr	r2, [r3, #8]
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	683a      	ldr	r2, [r7, #0]
 80066da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	683a      	ldr	r2, [r7, #0]
 80066e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	1c5a      	adds	r2, r3, #1
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	601a      	str	r2, [r3, #0]
}
 80066f2:	bf00      	nop
 80066f4:	3714      	adds	r7, #20
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bc80      	pop	{r7}
 80066fa:	4770      	bx	lr

080066fc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006712:	d103      	bne.n	800671c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	60fb      	str	r3, [r7, #12]
 800671a:	e00c      	b.n	8006736 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	3308      	adds	r3, #8
 8006720:	60fb      	str	r3, [r7, #12]
 8006722:	e002      	b.n	800672a <vListInsert+0x2e>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	60fb      	str	r3, [r7, #12]
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	429a      	cmp	r2, r3
 8006734:	d2f6      	bcs.n	8006724 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	685a      	ldr	r2, [r3, #4]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	683a      	ldr	r2, [r7, #0]
 8006744:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	683a      	ldr	r2, [r7, #0]
 8006750:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	1c5a      	adds	r2, r3, #1
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	601a      	str	r2, [r3, #0]
}
 8006762:	bf00      	nop
 8006764:	3714      	adds	r7, #20
 8006766:	46bd      	mov	sp, r7
 8006768:	bc80      	pop	{r7}
 800676a:	4770      	bx	lr

0800676c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	6892      	ldr	r2, [r2, #8]
 8006782:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	6852      	ldr	r2, [r2, #4]
 800678c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	429a      	cmp	r2, r3
 8006796:	d103      	bne.n	80067a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	689a      	ldr	r2, [r3, #8]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	1e5a      	subs	r2, r3, #1
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3714      	adds	r7, #20
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bc80      	pop	{r7}
 80067bc:	4770      	bx	lr
	...

080067c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d10a      	bne.n	80067ea <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80067d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d8:	f383 8811 	msr	BASEPRI, r3
 80067dc:	f3bf 8f6f 	isb	sy
 80067e0:	f3bf 8f4f 	dsb	sy
 80067e4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80067e6:	bf00      	nop
 80067e8:	e7fe      	b.n	80067e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80067ea:	f002 fac7 	bl	8008d7c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067f6:	68f9      	ldr	r1, [r7, #12]
 80067f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80067fa:	fb01 f303 	mul.w	r3, r1, r3
 80067fe:	441a      	add	r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2200      	movs	r2, #0
 8006808:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800681a:	3b01      	subs	r3, #1
 800681c:	68f9      	ldr	r1, [r7, #12]
 800681e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006820:	fb01 f303 	mul.w	r3, r1, r3
 8006824:	441a      	add	r2, r3
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	22ff      	movs	r2, #255	; 0xff
 800682e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	22ff      	movs	r2, #255	; 0xff
 8006836:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d114      	bne.n	800686a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d01a      	beq.n	800687e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	3310      	adds	r3, #16
 800684c:	4618      	mov	r0, r3
 800684e:	f001 fa13 	bl	8007c78 <xTaskRemoveFromEventList>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d012      	beq.n	800687e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006858:	4b0c      	ldr	r3, [pc, #48]	; (800688c <xQueueGenericReset+0xcc>)
 800685a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800685e:	601a      	str	r2, [r3, #0]
 8006860:	f3bf 8f4f 	dsb	sy
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	e009      	b.n	800687e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	3310      	adds	r3, #16
 800686e:	4618      	mov	r0, r3
 8006870:	f7ff fef6 	bl	8006660 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	3324      	adds	r3, #36	; 0x24
 8006878:	4618      	mov	r0, r3
 800687a:	f7ff fef1 	bl	8006660 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800687e:	f002 faad 	bl	8008ddc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006882:	2301      	movs	r3, #1
}
 8006884:	4618      	mov	r0, r3
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	e000ed04 	.word	0xe000ed04

08006890 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006890:	b580      	push	{r7, lr}
 8006892:	b08e      	sub	sp, #56	; 0x38
 8006894:	af02      	add	r7, sp, #8
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	607a      	str	r2, [r7, #4]
 800689c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d10a      	bne.n	80068ba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80068a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a8:	f383 8811 	msr	BASEPRI, r3
 80068ac:	f3bf 8f6f 	isb	sy
 80068b0:	f3bf 8f4f 	dsb	sy
 80068b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80068b6:	bf00      	nop
 80068b8:	e7fe      	b.n	80068b8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d10a      	bne.n	80068d6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80068c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c4:	f383 8811 	msr	BASEPRI, r3
 80068c8:	f3bf 8f6f 	isb	sy
 80068cc:	f3bf 8f4f 	dsb	sy
 80068d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80068d2:	bf00      	nop
 80068d4:	e7fe      	b.n	80068d4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d002      	beq.n	80068e2 <xQueueGenericCreateStatic+0x52>
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d001      	beq.n	80068e6 <xQueueGenericCreateStatic+0x56>
 80068e2:	2301      	movs	r3, #1
 80068e4:	e000      	b.n	80068e8 <xQueueGenericCreateStatic+0x58>
 80068e6:	2300      	movs	r3, #0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d10a      	bne.n	8006902 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80068ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f0:	f383 8811 	msr	BASEPRI, r3
 80068f4:	f3bf 8f6f 	isb	sy
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	623b      	str	r3, [r7, #32]
}
 80068fe:	bf00      	nop
 8006900:	e7fe      	b.n	8006900 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d102      	bne.n	800690e <xQueueGenericCreateStatic+0x7e>
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d101      	bne.n	8006912 <xQueueGenericCreateStatic+0x82>
 800690e:	2301      	movs	r3, #1
 8006910:	e000      	b.n	8006914 <xQueueGenericCreateStatic+0x84>
 8006912:	2300      	movs	r3, #0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d10a      	bne.n	800692e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691c:	f383 8811 	msr	BASEPRI, r3
 8006920:	f3bf 8f6f 	isb	sy
 8006924:	f3bf 8f4f 	dsb	sy
 8006928:	61fb      	str	r3, [r7, #28]
}
 800692a:	bf00      	nop
 800692c:	e7fe      	b.n	800692c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800692e:	2350      	movs	r3, #80	; 0x50
 8006930:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	2b50      	cmp	r3, #80	; 0x50
 8006936:	d00a      	beq.n	800694e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693c:	f383 8811 	msr	BASEPRI, r3
 8006940:	f3bf 8f6f 	isb	sy
 8006944:	f3bf 8f4f 	dsb	sy
 8006948:	61bb      	str	r3, [r7, #24]
}
 800694a:	bf00      	nop
 800694c:	e7fe      	b.n	800694c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006954:	2b00      	cmp	r3, #0
 8006956:	d00d      	beq.n	8006974 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695a:	2201      	movs	r2, #1
 800695c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006960:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006966:	9300      	str	r3, [sp, #0]
 8006968:	4613      	mov	r3, r2
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	68b9      	ldr	r1, [r7, #8]
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f000 f843 	bl	80069fa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006976:	4618      	mov	r0, r3
 8006978:	3730      	adds	r7, #48	; 0x30
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}

0800697e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800697e:	b580      	push	{r7, lr}
 8006980:	b08a      	sub	sp, #40	; 0x28
 8006982:	af02      	add	r7, sp, #8
 8006984:	60f8      	str	r0, [r7, #12]
 8006986:	60b9      	str	r1, [r7, #8]
 8006988:	4613      	mov	r3, r2
 800698a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d10a      	bne.n	80069a8 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006996:	f383 8811 	msr	BASEPRI, r3
 800699a:	f3bf 8f6f 	isb	sy
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	613b      	str	r3, [r7, #16]
}
 80069a4:	bf00      	nop
 80069a6:	e7fe      	b.n	80069a6 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d102      	bne.n	80069b4 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80069ae:	2300      	movs	r3, #0
 80069b0:	61fb      	str	r3, [r7, #28]
 80069b2:	e004      	b.n	80069be <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	68ba      	ldr	r2, [r7, #8]
 80069b8:	fb02 f303 	mul.w	r3, r2, r3
 80069bc:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	3350      	adds	r3, #80	; 0x50
 80069c2:	4618      	mov	r0, r3
 80069c4:	f002 fada 	bl	8008f7c <pvPortMalloc>
 80069c8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00f      	beq.n	80069f0 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	3350      	adds	r3, #80	; 0x50
 80069d4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80069de:	79fa      	ldrb	r2, [r7, #7]
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	9300      	str	r3, [sp, #0]
 80069e4:	4613      	mov	r3, r2
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	68b9      	ldr	r1, [r7, #8]
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f000 f805 	bl	80069fa <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80069f0:	69bb      	ldr	r3, [r7, #24]
	}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3720      	adds	r7, #32
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80069fa:	b580      	push	{r7, lr}
 80069fc:	b084      	sub	sp, #16
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	60f8      	str	r0, [r7, #12]
 8006a02:	60b9      	str	r1, [r7, #8]
 8006a04:	607a      	str	r2, [r7, #4]
 8006a06:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d103      	bne.n	8006a16 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	69ba      	ldr	r2, [r7, #24]
 8006a12:	601a      	str	r2, [r3, #0]
 8006a14:	e002      	b.n	8006a1c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	68ba      	ldr	r2, [r7, #8]
 8006a26:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006a28:	2101      	movs	r1, #1
 8006a2a:	69b8      	ldr	r0, [r7, #24]
 8006a2c:	f7ff fec8 	bl	80067c0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	78fa      	ldrb	r2, [r7, #3]
 8006a34:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006a38:	bf00      	nop
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b08e      	sub	sp, #56	; 0x38
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]
 8006a4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10a      	bne.n	8006a72 <xQueueGenericSend+0x32>
	__asm volatile
 8006a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a60:	f383 8811 	msr	BASEPRI, r3
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006a6e:	bf00      	nop
 8006a70:	e7fe      	b.n	8006a70 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d103      	bne.n	8006a80 <xQueueGenericSend+0x40>
 8006a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d101      	bne.n	8006a84 <xQueueGenericSend+0x44>
 8006a80:	2301      	movs	r3, #1
 8006a82:	e000      	b.n	8006a86 <xQueueGenericSend+0x46>
 8006a84:	2300      	movs	r3, #0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d10a      	bne.n	8006aa0 <xQueueGenericSend+0x60>
	__asm volatile
 8006a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8e:	f383 8811 	msr	BASEPRI, r3
 8006a92:	f3bf 8f6f 	isb	sy
 8006a96:	f3bf 8f4f 	dsb	sy
 8006a9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006a9c:	bf00      	nop
 8006a9e:	e7fe      	b.n	8006a9e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d103      	bne.n	8006aae <xQueueGenericSend+0x6e>
 8006aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d101      	bne.n	8006ab2 <xQueueGenericSend+0x72>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e000      	b.n	8006ab4 <xQueueGenericSend+0x74>
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d10a      	bne.n	8006ace <xQueueGenericSend+0x8e>
	__asm volatile
 8006ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006abc:	f383 8811 	msr	BASEPRI, r3
 8006ac0:	f3bf 8f6f 	isb	sy
 8006ac4:	f3bf 8f4f 	dsb	sy
 8006ac8:	623b      	str	r3, [r7, #32]
}
 8006aca:	bf00      	nop
 8006acc:	e7fe      	b.n	8006acc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ace:	f001 fa99 	bl	8008004 <xTaskGetSchedulerState>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d102      	bne.n	8006ade <xQueueGenericSend+0x9e>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d101      	bne.n	8006ae2 <xQueueGenericSend+0xa2>
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e000      	b.n	8006ae4 <xQueueGenericSend+0xa4>
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d10a      	bne.n	8006afe <xQueueGenericSend+0xbe>
	__asm volatile
 8006ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aec:	f383 8811 	msr	BASEPRI, r3
 8006af0:	f3bf 8f6f 	isb	sy
 8006af4:	f3bf 8f4f 	dsb	sy
 8006af8:	61fb      	str	r3, [r7, #28]
}
 8006afa:	bf00      	nop
 8006afc:	e7fe      	b.n	8006afc <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006afe:	f002 f93d 	bl	8008d7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d302      	bcc.n	8006b14 <xQueueGenericSend+0xd4>
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d129      	bne.n	8006b68 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b14:	683a      	ldr	r2, [r7, #0]
 8006b16:	68b9      	ldr	r1, [r7, #8]
 8006b18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b1a:	f000 fac0 	bl	800709e <prvCopyDataToQueue>
 8006b1e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d010      	beq.n	8006b4a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2a:	3324      	adds	r3, #36	; 0x24
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f001 f8a3 	bl	8007c78 <xTaskRemoveFromEventList>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d013      	beq.n	8006b60 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006b38:	4b3f      	ldr	r3, [pc, #252]	; (8006c38 <xQueueGenericSend+0x1f8>)
 8006b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b3e:	601a      	str	r2, [r3, #0]
 8006b40:	f3bf 8f4f 	dsb	sy
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	e00a      	b.n	8006b60 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d007      	beq.n	8006b60 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006b50:	4b39      	ldr	r3, [pc, #228]	; (8006c38 <xQueueGenericSend+0x1f8>)
 8006b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b56:	601a      	str	r2, [r3, #0]
 8006b58:	f3bf 8f4f 	dsb	sy
 8006b5c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006b60:	f002 f93c 	bl	8008ddc <vPortExitCritical>
				return pdPASS;
 8006b64:	2301      	movs	r3, #1
 8006b66:	e063      	b.n	8006c30 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d103      	bne.n	8006b76 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b6e:	f002 f935 	bl	8008ddc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006b72:	2300      	movs	r3, #0
 8006b74:	e05c      	b.n	8006c30 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d106      	bne.n	8006b8a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b7c:	f107 0314 	add.w	r3, r7, #20
 8006b80:	4618      	mov	r0, r3
 8006b82:	f001 f8dd 	bl	8007d40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b86:	2301      	movs	r3, #1
 8006b88:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b8a:	f002 f927 	bl	8008ddc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b8e:	f000 fe47 	bl	8007820 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b92:	f002 f8f3 	bl	8008d7c <vPortEnterCritical>
 8006b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b9c:	b25b      	sxtb	r3, r3
 8006b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba2:	d103      	bne.n	8006bac <xQueueGenericSend+0x16c>
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bb2:	b25b      	sxtb	r3, r3
 8006bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb8:	d103      	bne.n	8006bc2 <xQueueGenericSend+0x182>
 8006bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bc2:	f002 f90b 	bl	8008ddc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006bc6:	1d3a      	adds	r2, r7, #4
 8006bc8:	f107 0314 	add.w	r3, r7, #20
 8006bcc:	4611      	mov	r1, r2
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f001 f8cc 	bl	8007d6c <xTaskCheckForTimeOut>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d124      	bne.n	8006c24 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006bda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bdc:	f000 fb57 	bl	800728e <prvIsQueueFull>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d018      	beq.n	8006c18 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be8:	3310      	adds	r3, #16
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	4611      	mov	r1, r2
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f000 fff2 	bl	8007bd8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006bf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bf6:	f000 fae2 	bl	80071be <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006bfa:	f000 fe1f 	bl	800783c <xTaskResumeAll>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f47f af7c 	bne.w	8006afe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006c06:	4b0c      	ldr	r3, [pc, #48]	; (8006c38 <xQueueGenericSend+0x1f8>)
 8006c08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c0c:	601a      	str	r2, [r3, #0]
 8006c0e:	f3bf 8f4f 	dsb	sy
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	e772      	b.n	8006afe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006c18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c1a:	f000 fad0 	bl	80071be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c1e:	f000 fe0d 	bl	800783c <xTaskResumeAll>
 8006c22:	e76c      	b.n	8006afe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006c24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c26:	f000 faca 	bl	80071be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c2a:	f000 fe07 	bl	800783c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006c2e:	2300      	movs	r3, #0
		}
	}
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3738      	adds	r7, #56	; 0x38
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	e000ed04 	.word	0xe000ed04

08006c3c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b08e      	sub	sp, #56	; 0x38
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]
 8006c48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d10a      	bne.n	8006c6a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c58:	f383 8811 	msr	BASEPRI, r3
 8006c5c:	f3bf 8f6f 	isb	sy
 8006c60:	f3bf 8f4f 	dsb	sy
 8006c64:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c66:	bf00      	nop
 8006c68:	e7fe      	b.n	8006c68 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d103      	bne.n	8006c78 <xQueueGenericSendFromISR+0x3c>
 8006c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d101      	bne.n	8006c7c <xQueueGenericSendFromISR+0x40>
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e000      	b.n	8006c7e <xQueueGenericSendFromISR+0x42>
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d10a      	bne.n	8006c98 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c86:	f383 8811 	msr	BASEPRI, r3
 8006c8a:	f3bf 8f6f 	isb	sy
 8006c8e:	f3bf 8f4f 	dsb	sy
 8006c92:	623b      	str	r3, [r7, #32]
}
 8006c94:	bf00      	nop
 8006c96:	e7fe      	b.n	8006c96 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d103      	bne.n	8006ca6 <xQueueGenericSendFromISR+0x6a>
 8006c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d101      	bne.n	8006caa <xQueueGenericSendFromISR+0x6e>
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e000      	b.n	8006cac <xQueueGenericSendFromISR+0x70>
 8006caa:	2300      	movs	r3, #0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10a      	bne.n	8006cc6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb4:	f383 8811 	msr	BASEPRI, r3
 8006cb8:	f3bf 8f6f 	isb	sy
 8006cbc:	f3bf 8f4f 	dsb	sy
 8006cc0:	61fb      	str	r3, [r7, #28]
}
 8006cc2:	bf00      	nop
 8006cc4:	e7fe      	b.n	8006cc4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006cc6:	f002 f91b 	bl	8008f00 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006cca:	f3ef 8211 	mrs	r2, BASEPRI
 8006cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd2:	f383 8811 	msr	BASEPRI, r3
 8006cd6:	f3bf 8f6f 	isb	sy
 8006cda:	f3bf 8f4f 	dsb	sy
 8006cde:	61ba      	str	r2, [r7, #24]
 8006ce0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006ce2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d302      	bcc.n	8006cf8 <xQueueGenericSendFromISR+0xbc>
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d12c      	bne.n	8006d52 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d02:	683a      	ldr	r2, [r7, #0]
 8006d04:	68b9      	ldr	r1, [r7, #8]
 8006d06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d08:	f000 f9c9 	bl	800709e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006d0c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d14:	d112      	bne.n	8006d3c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d016      	beq.n	8006d4c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d20:	3324      	adds	r3, #36	; 0x24
 8006d22:	4618      	mov	r0, r3
 8006d24:	f000 ffa8 	bl	8007c78 <xTaskRemoveFromEventList>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00e      	beq.n	8006d4c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00b      	beq.n	8006d4c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	601a      	str	r2, [r3, #0]
 8006d3a:	e007      	b.n	8006d4c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006d3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006d40:	3301      	adds	r3, #1
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	b25a      	sxtb	r2, r3
 8006d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006d50:	e001      	b.n	8006d56 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006d52:	2300      	movs	r3, #0
 8006d54:	637b      	str	r3, [r7, #52]	; 0x34
 8006d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d58:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006d60:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3738      	adds	r7, #56	; 0x38
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b08c      	sub	sp, #48	; 0x30
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10a      	bne.n	8006d9c <xQueueReceive+0x30>
	__asm volatile
 8006d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8a:	f383 8811 	msr	BASEPRI, r3
 8006d8e:	f3bf 8f6f 	isb	sy
 8006d92:	f3bf 8f4f 	dsb	sy
 8006d96:	623b      	str	r3, [r7, #32]
}
 8006d98:	bf00      	nop
 8006d9a:	e7fe      	b.n	8006d9a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d103      	bne.n	8006daa <xQueueReceive+0x3e>
 8006da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d101      	bne.n	8006dae <xQueueReceive+0x42>
 8006daa:	2301      	movs	r3, #1
 8006dac:	e000      	b.n	8006db0 <xQueueReceive+0x44>
 8006dae:	2300      	movs	r3, #0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d10a      	bne.n	8006dca <xQueueReceive+0x5e>
	__asm volatile
 8006db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db8:	f383 8811 	msr	BASEPRI, r3
 8006dbc:	f3bf 8f6f 	isb	sy
 8006dc0:	f3bf 8f4f 	dsb	sy
 8006dc4:	61fb      	str	r3, [r7, #28]
}
 8006dc6:	bf00      	nop
 8006dc8:	e7fe      	b.n	8006dc8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006dca:	f001 f91b 	bl	8008004 <xTaskGetSchedulerState>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d102      	bne.n	8006dda <xQueueReceive+0x6e>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d101      	bne.n	8006dde <xQueueReceive+0x72>
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e000      	b.n	8006de0 <xQueueReceive+0x74>
 8006dde:	2300      	movs	r3, #0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d10a      	bne.n	8006dfa <xQueueReceive+0x8e>
	__asm volatile
 8006de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de8:	f383 8811 	msr	BASEPRI, r3
 8006dec:	f3bf 8f6f 	isb	sy
 8006df0:	f3bf 8f4f 	dsb	sy
 8006df4:	61bb      	str	r3, [r7, #24]
}
 8006df6:	bf00      	nop
 8006df8:	e7fe      	b.n	8006df8 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006dfa:	f001 ffbf 	bl	8008d7c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e02:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d01f      	beq.n	8006e4a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e0a:	68b9      	ldr	r1, [r7, #8]
 8006e0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e0e:	f000 f9b0 	bl	8007172 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e14:	1e5a      	subs	r2, r3, #1
 8006e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e18:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00f      	beq.n	8006e42 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e24:	3310      	adds	r3, #16
 8006e26:	4618      	mov	r0, r3
 8006e28:	f000 ff26 	bl	8007c78 <xTaskRemoveFromEventList>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d007      	beq.n	8006e42 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e32:	4b3d      	ldr	r3, [pc, #244]	; (8006f28 <xQueueReceive+0x1bc>)
 8006e34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e38:	601a      	str	r2, [r3, #0]
 8006e3a:	f3bf 8f4f 	dsb	sy
 8006e3e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e42:	f001 ffcb 	bl	8008ddc <vPortExitCritical>
				return pdPASS;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e069      	b.n	8006f1e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d103      	bne.n	8006e58 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e50:	f001 ffc4 	bl	8008ddc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e54:	2300      	movs	r3, #0
 8006e56:	e062      	b.n	8006f1e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d106      	bne.n	8006e6c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e5e:	f107 0310 	add.w	r3, r7, #16
 8006e62:	4618      	mov	r0, r3
 8006e64:	f000 ff6c 	bl	8007d40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e6c:	f001 ffb6 	bl	8008ddc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e70:	f000 fcd6 	bl	8007820 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e74:	f001 ff82 	bl	8008d7c <vPortEnterCritical>
 8006e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e7e:	b25b      	sxtb	r3, r3
 8006e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e84:	d103      	bne.n	8006e8e <xQueueReceive+0x122>
 8006e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e94:	b25b      	sxtb	r3, r3
 8006e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e9a:	d103      	bne.n	8006ea4 <xQueueReceive+0x138>
 8006e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ea4:	f001 ff9a 	bl	8008ddc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ea8:	1d3a      	adds	r2, r7, #4
 8006eaa:	f107 0310 	add.w	r3, r7, #16
 8006eae:	4611      	mov	r1, r2
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f000 ff5b 	bl	8007d6c <xTaskCheckForTimeOut>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d123      	bne.n	8006f04 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ebc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ebe:	f000 f9d0 	bl	8007262 <prvIsQueueEmpty>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d017      	beq.n	8006ef8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eca:	3324      	adds	r3, #36	; 0x24
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	4611      	mov	r1, r2
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f000 fe81 	bl	8007bd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ed6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ed8:	f000 f971 	bl	80071be <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006edc:	f000 fcae 	bl	800783c <xTaskResumeAll>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d189      	bne.n	8006dfa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006ee6:	4b10      	ldr	r3, [pc, #64]	; (8006f28 <xQueueReceive+0x1bc>)
 8006ee8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eec:	601a      	str	r2, [r3, #0]
 8006eee:	f3bf 8f4f 	dsb	sy
 8006ef2:	f3bf 8f6f 	isb	sy
 8006ef6:	e780      	b.n	8006dfa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006ef8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006efa:	f000 f960 	bl	80071be <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006efe:	f000 fc9d 	bl	800783c <xTaskResumeAll>
 8006f02:	e77a      	b.n	8006dfa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006f04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f06:	f000 f95a 	bl	80071be <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f0a:	f000 fc97 	bl	800783c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f10:	f000 f9a7 	bl	8007262 <prvIsQueueEmpty>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f43f af6f 	beq.w	8006dfa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f1c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3730      	adds	r7, #48	; 0x30
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	e000ed04 	.word	0xe000ed04

08006f2c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b08e      	sub	sp, #56	; 0x38
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d10a      	bne.n	8006f58 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f46:	f383 8811 	msr	BASEPRI, r3
 8006f4a:	f3bf 8f6f 	isb	sy
 8006f4e:	f3bf 8f4f 	dsb	sy
 8006f52:	623b      	str	r3, [r7, #32]
}
 8006f54:	bf00      	nop
 8006f56:	e7fe      	b.n	8006f56 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d103      	bne.n	8006f66 <xQueueReceiveFromISR+0x3a>
 8006f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d101      	bne.n	8006f6a <xQueueReceiveFromISR+0x3e>
 8006f66:	2301      	movs	r3, #1
 8006f68:	e000      	b.n	8006f6c <xQueueReceiveFromISR+0x40>
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d10a      	bne.n	8006f86 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f74:	f383 8811 	msr	BASEPRI, r3
 8006f78:	f3bf 8f6f 	isb	sy
 8006f7c:	f3bf 8f4f 	dsb	sy
 8006f80:	61fb      	str	r3, [r7, #28]
}
 8006f82:	bf00      	nop
 8006f84:	e7fe      	b.n	8006f84 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f86:	f001 ffbb 	bl	8008f00 <vPortValidateInterruptPriority>
	__asm volatile
 8006f8a:	f3ef 8211 	mrs	r2, BASEPRI
 8006f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f92:	f383 8811 	msr	BASEPRI, r3
 8006f96:	f3bf 8f6f 	isb	sy
 8006f9a:	f3bf 8f4f 	dsb	sy
 8006f9e:	61ba      	str	r2, [r7, #24]
 8006fa0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006fa2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006faa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d02f      	beq.n	8007012 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006fbc:	68b9      	ldr	r1, [r7, #8]
 8006fbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fc0:	f000 f8d7 	bl	8007172 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc6:	1e5a      	subs	r2, r3, #1
 8006fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006fcc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd4:	d112      	bne.n	8006ffc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d016      	beq.n	800700c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe0:	3310      	adds	r3, #16
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f000 fe48 	bl	8007c78 <xTaskRemoveFromEventList>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00e      	beq.n	800700c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00b      	beq.n	800700c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	601a      	str	r2, [r3, #0]
 8006ffa:	e007      	b.n	800700c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006ffc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007000:	3301      	adds	r3, #1
 8007002:	b2db      	uxtb	r3, r3
 8007004:	b25a      	sxtb	r2, r3
 8007006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007008:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800700c:	2301      	movs	r3, #1
 800700e:	637b      	str	r3, [r7, #52]	; 0x34
 8007010:	e001      	b.n	8007016 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8007012:	2300      	movs	r3, #0
 8007014:	637b      	str	r3, [r7, #52]	; 0x34
 8007016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007018:	613b      	str	r3, [r7, #16]
	__asm volatile
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	f383 8811 	msr	BASEPRI, r3
}
 8007020:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007024:	4618      	mov	r0, r3
 8007026:	3738      	adds	r7, #56	; 0x38
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10a      	bne.n	8007050 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800703a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703e:	f383 8811 	msr	BASEPRI, r3
 8007042:	f3bf 8f6f 	isb	sy
 8007046:	f3bf 8f4f 	dsb	sy
 800704a:	60bb      	str	r3, [r7, #8]
}
 800704c:	bf00      	nop
 800704e:	e7fe      	b.n	800704e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8007050:	f001 fe94 	bl	8008d7c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007058:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800705a:	f001 febf 	bl	8008ddc <vPortExitCritical>

	return uxReturn;
 800705e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007060:	4618      	mov	r0, r3
 8007062:	3710      	adds	r7, #16
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8007068:	b480      	push	{r7}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d10a      	bne.n	800708c <uxQueueMessagesWaitingFromISR+0x24>
	__asm volatile
 8007076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707a:	f383 8811 	msr	BASEPRI, r3
 800707e:	f3bf 8f6f 	isb	sy
 8007082:	f3bf 8f4f 	dsb	sy
 8007086:	60bb      	str	r3, [r7, #8]
}
 8007088:	bf00      	nop
 800708a:	e7fe      	b.n	800708a <uxQueueMessagesWaitingFromISR+0x22>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007090:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8007092:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007094:	4618      	mov	r0, r3
 8007096:	3714      	adds	r7, #20
 8007098:	46bd      	mov	sp, r7
 800709a:	bc80      	pop	{r7}
 800709c:	4770      	bx	lr

0800709e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b086      	sub	sp, #24
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	60f8      	str	r0, [r7, #12]
 80070a6:	60b9      	str	r1, [r7, #8]
 80070a8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80070aa:	2300      	movs	r3, #0
 80070ac:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d10d      	bne.n	80070d8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d14d      	bne.n	8007160 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	4618      	mov	r0, r3
 80070ca:	f000 ffb9 	bl	8008040 <xTaskPriorityDisinherit>
 80070ce:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	605a      	str	r2, [r3, #4]
 80070d6:	e043      	b.n	8007160 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d119      	bne.n	8007112 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6898      	ldr	r0, [r3, #8]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e6:	461a      	mov	r2, r3
 80070e8:	68b9      	ldr	r1, [r7, #8]
 80070ea:	f002 f9a3 	bl	8009434 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	689a      	ldr	r2, [r3, #8]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f6:	441a      	add	r2, r3
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	689a      	ldr	r2, [r3, #8]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	429a      	cmp	r2, r3
 8007106:	d32b      	bcc.n	8007160 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	609a      	str	r2, [r3, #8]
 8007110:	e026      	b.n	8007160 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	68d8      	ldr	r0, [r3, #12]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711a:	461a      	mov	r2, r3
 800711c:	68b9      	ldr	r1, [r7, #8]
 800711e:	f002 f989 	bl	8009434 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	68da      	ldr	r2, [r3, #12]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712a:	425b      	negs	r3, r3
 800712c:	441a      	add	r2, r3
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	68da      	ldr	r2, [r3, #12]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	429a      	cmp	r2, r3
 800713c:	d207      	bcs.n	800714e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	685a      	ldr	r2, [r3, #4]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007146:	425b      	negs	r3, r3
 8007148:	441a      	add	r2, r3
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2b02      	cmp	r3, #2
 8007152:	d105      	bne.n	8007160 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d002      	beq.n	8007160 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	3b01      	subs	r3, #1
 800715e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	1c5a      	adds	r2, r3, #1
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007168:	697b      	ldr	r3, [r7, #20]
}
 800716a:	4618      	mov	r0, r3
 800716c:	3718      	adds	r7, #24
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}

08007172 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007172:	b580      	push	{r7, lr}
 8007174:	b082      	sub	sp, #8
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
 800717a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007180:	2b00      	cmp	r3, #0
 8007182:	d018      	beq.n	80071b6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	68da      	ldr	r2, [r3, #12]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718c:	441a      	add	r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	68da      	ldr	r2, [r3, #12]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	429a      	cmp	r2, r3
 800719c:	d303      	bcc.n	80071a6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	68d9      	ldr	r1, [r3, #12]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ae:	461a      	mov	r2, r3
 80071b0:	6838      	ldr	r0, [r7, #0]
 80071b2:	f002 f93f 	bl	8009434 <memcpy>
	}
}
 80071b6:	bf00      	nop
 80071b8:	3708      	adds	r7, #8
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b084      	sub	sp, #16
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80071c6:	f001 fdd9 	bl	8008d7c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071d0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071d2:	e011      	b.n	80071f8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d012      	beq.n	8007202 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	3324      	adds	r3, #36	; 0x24
 80071e0:	4618      	mov	r0, r3
 80071e2:	f000 fd49 	bl	8007c78 <xTaskRemoveFromEventList>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d001      	beq.n	80071f0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80071ec:	f000 fe20 	bl	8007e30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80071f0:	7bfb      	ldrb	r3, [r7, #15]
 80071f2:	3b01      	subs	r3, #1
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80071f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	dce9      	bgt.n	80071d4 <prvUnlockQueue+0x16>
 8007200:	e000      	b.n	8007204 <prvUnlockQueue+0x46>
					break;
 8007202:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	22ff      	movs	r2, #255	; 0xff
 8007208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800720c:	f001 fde6 	bl	8008ddc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007210:	f001 fdb4 	bl	8008d7c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800721a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800721c:	e011      	b.n	8007242 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d012      	beq.n	800724c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	3310      	adds	r3, #16
 800722a:	4618      	mov	r0, r3
 800722c:	f000 fd24 	bl	8007c78 <xTaskRemoveFromEventList>
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d001      	beq.n	800723a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007236:	f000 fdfb 	bl	8007e30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800723a:	7bbb      	ldrb	r3, [r7, #14]
 800723c:	3b01      	subs	r3, #1
 800723e:	b2db      	uxtb	r3, r3
 8007240:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007242:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007246:	2b00      	cmp	r3, #0
 8007248:	dce9      	bgt.n	800721e <prvUnlockQueue+0x60>
 800724a:	e000      	b.n	800724e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800724c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	22ff      	movs	r2, #255	; 0xff
 8007252:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007256:	f001 fdc1 	bl	8008ddc <vPortExitCritical>
}
 800725a:	bf00      	nop
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b084      	sub	sp, #16
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800726a:	f001 fd87 	bl	8008d7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007272:	2b00      	cmp	r3, #0
 8007274:	d102      	bne.n	800727c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007276:	2301      	movs	r3, #1
 8007278:	60fb      	str	r3, [r7, #12]
 800727a:	e001      	b.n	8007280 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800727c:	2300      	movs	r3, #0
 800727e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007280:	f001 fdac 	bl	8008ddc <vPortExitCritical>

	return xReturn;
 8007284:	68fb      	ldr	r3, [r7, #12]
}
 8007286:	4618      	mov	r0, r3
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b084      	sub	sp, #16
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007296:	f001 fd71 	bl	8008d7c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d102      	bne.n	80072ac <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80072a6:	2301      	movs	r3, #1
 80072a8:	60fb      	str	r3, [r7, #12]
 80072aa:	e001      	b.n	80072b0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80072ac:	2300      	movs	r3, #0
 80072ae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80072b0:	f001 fd94 	bl	8008ddc <vPortExitCritical>

	return xReturn;
 80072b4:	68fb      	ldr	r3, [r7, #12]
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3710      	adds	r7, #16
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
	...

080072c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80072ca:	2300      	movs	r3, #0
 80072cc:	60fb      	str	r3, [r7, #12]
 80072ce:	e014      	b.n	80072fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80072d0:	4a0e      	ldr	r2, [pc, #56]	; (800730c <vQueueAddToRegistry+0x4c>)
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d10b      	bne.n	80072f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80072dc:	490b      	ldr	r1, [pc, #44]	; (800730c <vQueueAddToRegistry+0x4c>)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	683a      	ldr	r2, [r7, #0]
 80072e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80072e6:	4a09      	ldr	r2, [pc, #36]	; (800730c <vQueueAddToRegistry+0x4c>)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	00db      	lsls	r3, r3, #3
 80072ec:	4413      	add	r3, r2
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80072f2:	e006      	b.n	8007302 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	3301      	adds	r3, #1
 80072f8:	60fb      	str	r3, [r7, #12]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2b07      	cmp	r3, #7
 80072fe:	d9e7      	bls.n	80072d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007300:	bf00      	nop
 8007302:	bf00      	nop
 8007304:	3714      	adds	r7, #20
 8007306:	46bd      	mov	sp, r7
 8007308:	bc80      	pop	{r7}
 800730a:	4770      	bx	lr
 800730c:	20000a84 	.word	0x20000a84

08007310 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007310:	b580      	push	{r7, lr}
 8007312:	b086      	sub	sp, #24
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007320:	f001 fd2c 	bl	8008d7c <vPortEnterCritical>
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800732a:	b25b      	sxtb	r3, r3
 800732c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007330:	d103      	bne.n	800733a <vQueueWaitForMessageRestricted+0x2a>
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	2200      	movs	r2, #0
 8007336:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007340:	b25b      	sxtb	r3, r3
 8007342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007346:	d103      	bne.n	8007350 <vQueueWaitForMessageRestricted+0x40>
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	2200      	movs	r2, #0
 800734c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007350:	f001 fd44 	bl	8008ddc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007358:	2b00      	cmp	r3, #0
 800735a:	d106      	bne.n	800736a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	3324      	adds	r3, #36	; 0x24
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	68b9      	ldr	r1, [r7, #8]
 8007364:	4618      	mov	r0, r3
 8007366:	f000 fc5b 	bl	8007c20 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800736a:	6978      	ldr	r0, [r7, #20]
 800736c:	f7ff ff27 	bl	80071be <prvUnlockQueue>
	}
 8007370:	bf00      	nop
 8007372:	3718      	adds	r7, #24
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007378:	b580      	push	{r7, lr}
 800737a:	b08e      	sub	sp, #56	; 0x38
 800737c:	af04      	add	r7, sp, #16
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	607a      	str	r2, [r7, #4]
 8007384:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007388:	2b00      	cmp	r3, #0
 800738a:	d10a      	bne.n	80073a2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800738c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007390:	f383 8811 	msr	BASEPRI, r3
 8007394:	f3bf 8f6f 	isb	sy
 8007398:	f3bf 8f4f 	dsb	sy
 800739c:	623b      	str	r3, [r7, #32]
}
 800739e:	bf00      	nop
 80073a0:	e7fe      	b.n	80073a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80073a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d10a      	bne.n	80073be <xTaskCreateStatic+0x46>
	__asm volatile
 80073a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ac:	f383 8811 	msr	BASEPRI, r3
 80073b0:	f3bf 8f6f 	isb	sy
 80073b4:	f3bf 8f4f 	dsb	sy
 80073b8:	61fb      	str	r3, [r7, #28]
}
 80073ba:	bf00      	nop
 80073bc:	e7fe      	b.n	80073bc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80073be:	23b8      	movs	r3, #184	; 0xb8
 80073c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	2bb8      	cmp	r3, #184	; 0xb8
 80073c6:	d00a      	beq.n	80073de <xTaskCreateStatic+0x66>
	__asm volatile
 80073c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073cc:	f383 8811 	msr	BASEPRI, r3
 80073d0:	f3bf 8f6f 	isb	sy
 80073d4:	f3bf 8f4f 	dsb	sy
 80073d8:	61bb      	str	r3, [r7, #24]
}
 80073da:	bf00      	nop
 80073dc:	e7fe      	b.n	80073dc <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80073de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d01e      	beq.n	8007422 <xTaskCreateStatic+0xaa>
 80073e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d01b      	beq.n	8007422 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80073ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ec:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80073ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073f2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80073f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f6:	2202      	movs	r2, #2
 80073f8:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80073fc:	2300      	movs	r3, #0
 80073fe:	9303      	str	r3, [sp, #12]
 8007400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007402:	9302      	str	r3, [sp, #8]
 8007404:	f107 0314 	add.w	r3, r7, #20
 8007408:	9301      	str	r3, [sp, #4]
 800740a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740c:	9300      	str	r3, [sp, #0]
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	68b9      	ldr	r1, [r7, #8]
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f000 f851 	bl	80074bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800741a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800741c:	f000 f8ec 	bl	80075f8 <prvAddNewTaskToReadyList>
 8007420:	e001      	b.n	8007426 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8007422:	2300      	movs	r3, #0
 8007424:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007426:	697b      	ldr	r3, [r7, #20]
	}
 8007428:	4618      	mov	r0, r3
 800742a:	3728      	adds	r7, #40	; 0x28
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007430:	b580      	push	{r7, lr}
 8007432:	b08c      	sub	sp, #48	; 0x30
 8007434:	af04      	add	r7, sp, #16
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	603b      	str	r3, [r7, #0]
 800743c:	4613      	mov	r3, r2
 800743e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007440:	88fb      	ldrh	r3, [r7, #6]
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	4618      	mov	r0, r3
 8007446:	f001 fd99 	bl	8008f7c <pvPortMalloc>
 800744a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00e      	beq.n	8007470 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007452:	20b8      	movs	r0, #184	; 0xb8
 8007454:	f001 fd92 	bl	8008f7c <pvPortMalloc>
 8007458:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d003      	beq.n	8007468 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	697a      	ldr	r2, [r7, #20]
 8007464:	631a      	str	r2, [r3, #48]	; 0x30
 8007466:	e005      	b.n	8007474 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007468:	6978      	ldr	r0, [r7, #20]
 800746a:	f001 fe4b 	bl	8009104 <vPortFree>
 800746e:	e001      	b.n	8007474 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007470:	2300      	movs	r3, #0
 8007472:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d017      	beq.n	80074aa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	2200      	movs	r2, #0
 800747e:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007482:	88fa      	ldrh	r2, [r7, #6]
 8007484:	2300      	movs	r3, #0
 8007486:	9303      	str	r3, [sp, #12]
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	9302      	str	r3, [sp, #8]
 800748c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748e:	9301      	str	r3, [sp, #4]
 8007490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007492:	9300      	str	r3, [sp, #0]
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	68b9      	ldr	r1, [r7, #8]
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f000 f80f 	bl	80074bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800749e:	69f8      	ldr	r0, [r7, #28]
 80074a0:	f000 f8aa 	bl	80075f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80074a4:	2301      	movs	r3, #1
 80074a6:	61bb      	str	r3, [r7, #24]
 80074a8:	e002      	b.n	80074b0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80074aa:	f04f 33ff 	mov.w	r3, #4294967295
 80074ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80074b0:	69bb      	ldr	r3, [r7, #24]
	}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3720      	adds	r7, #32
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}
	...

080074bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b088      	sub	sp, #32
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
 80074c8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80074ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074cc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	461a      	mov	r2, r3
 80074d4:	21a5      	movs	r1, #165	; 0xa5
 80074d6:	f001 ff29 	bl	800932c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80074da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80074e4:	3b01      	subs	r3, #1
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	4413      	add	r3, r2
 80074ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	f023 0307 	bic.w	r3, r3, #7
 80074f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80074f4:	69bb      	ldr	r3, [r7, #24]
 80074f6:	f003 0307 	and.w	r3, r3, #7
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d00a      	beq.n	8007514 <prvInitialiseNewTask+0x58>
	__asm volatile
 80074fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007502:	f383 8811 	msr	BASEPRI, r3
 8007506:	f3bf 8f6f 	isb	sy
 800750a:	f3bf 8f4f 	dsb	sy
 800750e:	617b      	str	r3, [r7, #20]
}
 8007510:	bf00      	nop
 8007512:	e7fe      	b.n	8007512 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007514:	2300      	movs	r3, #0
 8007516:	61fb      	str	r3, [r7, #28]
 8007518:	e012      	b.n	8007540 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800751a:	68ba      	ldr	r2, [r7, #8]
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	4413      	add	r3, r2
 8007520:	7819      	ldrb	r1, [r3, #0]
 8007522:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	4413      	add	r3, r2
 8007528:	3334      	adds	r3, #52	; 0x34
 800752a:	460a      	mov	r2, r1
 800752c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800752e:	68ba      	ldr	r2, [r7, #8]
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	4413      	add	r3, r2
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d006      	beq.n	8007548 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800753a:	69fb      	ldr	r3, [r7, #28]
 800753c:	3301      	adds	r3, #1
 800753e:	61fb      	str	r3, [r7, #28]
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	2b1f      	cmp	r3, #31
 8007544:	d9e9      	bls.n	800751a <prvInitialiseNewTask+0x5e>
 8007546:	e000      	b.n	800754a <prvInitialiseNewTask+0x8e>
		{
			break;
 8007548:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800754a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754c:	2200      	movs	r2, #0
 800754e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007554:	2b37      	cmp	r3, #55	; 0x37
 8007556:	d901      	bls.n	800755c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007558:	2337      	movs	r3, #55	; 0x37
 800755a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800755c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007560:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007564:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007566:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8007568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756a:	2200      	movs	r2, #0
 800756c:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800756e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007570:	3304      	adds	r3, #4
 8007572:	4618      	mov	r0, r3
 8007574:	f7ff f893 	bl	800669e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757a:	3318      	adds	r3, #24
 800757c:	4618      	mov	r0, r3
 800757e:	f7ff f88e 	bl	800669e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007586:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800758e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007590:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007596:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759a:	2200      	movs	r2, #0
 800759c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80075a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a2:	2200      	movs	r2, #0
 80075a4:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80075a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075aa:	3364      	adds	r3, #100	; 0x64
 80075ac:	224c      	movs	r2, #76	; 0x4c
 80075ae:	2100      	movs	r1, #0
 80075b0:	4618      	mov	r0, r3
 80075b2:	f001 febb 	bl	800932c <memset>
 80075b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b8:	4a0c      	ldr	r2, [pc, #48]	; (80075ec <prvInitialiseNewTask+0x130>)
 80075ba:	669a      	str	r2, [r3, #104]	; 0x68
 80075bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075be:	4a0c      	ldr	r2, [pc, #48]	; (80075f0 <prvInitialiseNewTask+0x134>)
 80075c0:	66da      	str	r2, [r3, #108]	; 0x6c
 80075c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c4:	4a0b      	ldr	r2, [pc, #44]	; (80075f4 <prvInitialiseNewTask+0x138>)
 80075c6:	671a      	str	r2, [r3, #112]	; 0x70
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80075c8:	683a      	ldr	r2, [r7, #0]
 80075ca:	68f9      	ldr	r1, [r7, #12]
 80075cc:	69b8      	ldr	r0, [r7, #24]
 80075ce:	f001 fae7 	bl	8008ba0 <pxPortInitialiseStack>
 80075d2:	4602      	mov	r2, r0
 80075d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80075d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d002      	beq.n	80075e4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80075de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075e2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075e4:	bf00      	nop
 80075e6:	3720      	adds	r7, #32
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	20002510 	.word	0x20002510
 80075f0:	20002578 	.word	0x20002578
 80075f4:	200025e0 	.word	0x200025e0

080075f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007600:	f001 fbbc 	bl	8008d7c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007604:	4b2d      	ldr	r3, [pc, #180]	; (80076bc <prvAddNewTaskToReadyList+0xc4>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	3301      	adds	r3, #1
 800760a:	4a2c      	ldr	r2, [pc, #176]	; (80076bc <prvAddNewTaskToReadyList+0xc4>)
 800760c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800760e:	4b2c      	ldr	r3, [pc, #176]	; (80076c0 <prvAddNewTaskToReadyList+0xc8>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d109      	bne.n	800762a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007616:	4a2a      	ldr	r2, [pc, #168]	; (80076c0 <prvAddNewTaskToReadyList+0xc8>)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800761c:	4b27      	ldr	r3, [pc, #156]	; (80076bc <prvAddNewTaskToReadyList+0xc4>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2b01      	cmp	r3, #1
 8007622:	d110      	bne.n	8007646 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007624:	f000 fc28 	bl	8007e78 <prvInitialiseTaskLists>
 8007628:	e00d      	b.n	8007646 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800762a:	4b26      	ldr	r3, [pc, #152]	; (80076c4 <prvAddNewTaskToReadyList+0xcc>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d109      	bne.n	8007646 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007632:	4b23      	ldr	r3, [pc, #140]	; (80076c0 <prvAddNewTaskToReadyList+0xc8>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763c:	429a      	cmp	r2, r3
 800763e:	d802      	bhi.n	8007646 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007640:	4a1f      	ldr	r2, [pc, #124]	; (80076c0 <prvAddNewTaskToReadyList+0xc8>)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007646:	4b20      	ldr	r3, [pc, #128]	; (80076c8 <prvAddNewTaskToReadyList+0xd0>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	3301      	adds	r3, #1
 800764c:	4a1e      	ldr	r2, [pc, #120]	; (80076c8 <prvAddNewTaskToReadyList+0xd0>)
 800764e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007650:	4b1d      	ldr	r3, [pc, #116]	; (80076c8 <prvAddNewTaskToReadyList+0xd0>)
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800765c:	4b1b      	ldr	r3, [pc, #108]	; (80076cc <prvAddNewTaskToReadyList+0xd4>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	429a      	cmp	r2, r3
 8007662:	d903      	bls.n	800766c <prvAddNewTaskToReadyList+0x74>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007668:	4a18      	ldr	r2, [pc, #96]	; (80076cc <prvAddNewTaskToReadyList+0xd4>)
 800766a:	6013      	str	r3, [r2, #0]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007670:	4613      	mov	r3, r2
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	4413      	add	r3, r2
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	4a15      	ldr	r2, [pc, #84]	; (80076d0 <prvAddNewTaskToReadyList+0xd8>)
 800767a:	441a      	add	r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	3304      	adds	r3, #4
 8007680:	4619      	mov	r1, r3
 8007682:	4610      	mov	r0, r2
 8007684:	f7ff f817 	bl	80066b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007688:	f001 fba8 	bl	8008ddc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800768c:	4b0d      	ldr	r3, [pc, #52]	; (80076c4 <prvAddNewTaskToReadyList+0xcc>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d00e      	beq.n	80076b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007694:	4b0a      	ldr	r3, [pc, #40]	; (80076c0 <prvAddNewTaskToReadyList+0xc8>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769e:	429a      	cmp	r2, r3
 80076a0:	d207      	bcs.n	80076b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80076a2:	4b0c      	ldr	r3, [pc, #48]	; (80076d4 <prvAddNewTaskToReadyList+0xdc>)
 80076a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076a8:	601a      	str	r2, [r3, #0]
 80076aa:	f3bf 8f4f 	dsb	sy
 80076ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076b2:	bf00      	nop
 80076b4:	3708      	adds	r7, #8
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	20000f98 	.word	0x20000f98
 80076c0:	20000ac4 	.word	0x20000ac4
 80076c4:	20000fa4 	.word	0x20000fa4
 80076c8:	20000fb4 	.word	0x20000fb4
 80076cc:	20000fa0 	.word	0x20000fa0
 80076d0:	20000ac8 	.word	0x20000ac8
 80076d4:	e000ed04 	.word	0xe000ed04

080076d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80076e0:	2300      	movs	r3, #0
 80076e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d017      	beq.n	800771a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80076ea:	4b13      	ldr	r3, [pc, #76]	; (8007738 <vTaskDelay+0x60>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00a      	beq.n	8007708 <vTaskDelay+0x30>
	__asm volatile
 80076f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f6:	f383 8811 	msr	BASEPRI, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	60bb      	str	r3, [r7, #8]
}
 8007704:	bf00      	nop
 8007706:	e7fe      	b.n	8007706 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007708:	f000 f88a 	bl	8007820 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800770c:	2100      	movs	r1, #0
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fee0 	bl	80084d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007714:	f000 f892 	bl	800783c <xTaskResumeAll>
 8007718:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d107      	bne.n	8007730 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007720:	4b06      	ldr	r3, [pc, #24]	; (800773c <vTaskDelay+0x64>)
 8007722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007726:	601a      	str	r2, [r3, #0]
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007730:	bf00      	nop
 8007732:	3710      	adds	r7, #16
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}
 8007738:	20000fc0 	.word	0x20000fc0
 800773c:	e000ed04 	.word	0xe000ed04

08007740 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b08a      	sub	sp, #40	; 0x28
 8007744:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007746:	2300      	movs	r3, #0
 8007748:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800774a:	2300      	movs	r3, #0
 800774c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800774e:	463a      	mov	r2, r7
 8007750:	1d39      	adds	r1, r7, #4
 8007752:	f107 0308 	add.w	r3, r7, #8
 8007756:	4618      	mov	r0, r3
 8007758:	f7fe ff50 	bl	80065fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800775c:	6839      	ldr	r1, [r7, #0]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	68ba      	ldr	r2, [r7, #8]
 8007762:	9202      	str	r2, [sp, #8]
 8007764:	9301      	str	r3, [sp, #4]
 8007766:	2300      	movs	r3, #0
 8007768:	9300      	str	r3, [sp, #0]
 800776a:	2300      	movs	r3, #0
 800776c:	460a      	mov	r2, r1
 800776e:	4924      	ldr	r1, [pc, #144]	; (8007800 <vTaskStartScheduler+0xc0>)
 8007770:	4824      	ldr	r0, [pc, #144]	; (8007804 <vTaskStartScheduler+0xc4>)
 8007772:	f7ff fe01 	bl	8007378 <xTaskCreateStatic>
 8007776:	4603      	mov	r3, r0
 8007778:	4a23      	ldr	r2, [pc, #140]	; (8007808 <vTaskStartScheduler+0xc8>)
 800777a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800777c:	4b22      	ldr	r3, [pc, #136]	; (8007808 <vTaskStartScheduler+0xc8>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d002      	beq.n	800778a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007784:	2301      	movs	r3, #1
 8007786:	617b      	str	r3, [r7, #20]
 8007788:	e001      	b.n	800778e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800778a:	2300      	movs	r3, #0
 800778c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	2b01      	cmp	r3, #1
 8007792:	d102      	bne.n	800779a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007794:	f000 fef2 	bl	800857c <xTimerCreateTimerTask>
 8007798:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	2b01      	cmp	r3, #1
 800779e:	d11b      	bne.n	80077d8 <vTaskStartScheduler+0x98>
	__asm volatile
 80077a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a4:	f383 8811 	msr	BASEPRI, r3
 80077a8:	f3bf 8f6f 	isb	sy
 80077ac:	f3bf 8f4f 	dsb	sy
 80077b0:	613b      	str	r3, [r7, #16]
}
 80077b2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80077b4:	4b15      	ldr	r3, [pc, #84]	; (800780c <vTaskStartScheduler+0xcc>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	3364      	adds	r3, #100	; 0x64
 80077ba:	4a15      	ldr	r2, [pc, #84]	; (8007810 <vTaskStartScheduler+0xd0>)
 80077bc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80077be:	4b15      	ldr	r3, [pc, #84]	; (8007814 <vTaskStartScheduler+0xd4>)
 80077c0:	f04f 32ff 	mov.w	r2, #4294967295
 80077c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80077c6:	4b14      	ldr	r3, [pc, #80]	; (8007818 <vTaskStartScheduler+0xd8>)
 80077c8:	2201      	movs	r2, #1
 80077ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80077cc:	4b13      	ldr	r3, [pc, #76]	; (800781c <vTaskStartScheduler+0xdc>)
 80077ce:	2200      	movs	r2, #0
 80077d0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80077d2:	f001 fa61 	bl	8008c98 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80077d6:	e00e      	b.n	80077f6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077de:	d10a      	bne.n	80077f6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80077e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e4:	f383 8811 	msr	BASEPRI, r3
 80077e8:	f3bf 8f6f 	isb	sy
 80077ec:	f3bf 8f4f 	dsb	sy
 80077f0:	60fb      	str	r3, [r7, #12]
}
 80077f2:	bf00      	nop
 80077f4:	e7fe      	b.n	80077f4 <vTaskStartScheduler+0xb4>
}
 80077f6:	bf00      	nop
 80077f8:	3718      	adds	r7, #24
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	08009610 	.word	0x08009610
 8007804:	08007e49 	.word	0x08007e49
 8007808:	20000fbc 	.word	0x20000fbc
 800780c:	20000ac4 	.word	0x20000ac4
 8007810:	2000005c 	.word	0x2000005c
 8007814:	20000fb8 	.word	0x20000fb8
 8007818:	20000fa4 	.word	0x20000fa4
 800781c:	20000f9c 	.word	0x20000f9c

08007820 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007820:	b480      	push	{r7}
 8007822:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007824:	4b04      	ldr	r3, [pc, #16]	; (8007838 <vTaskSuspendAll+0x18>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	3301      	adds	r3, #1
 800782a:	4a03      	ldr	r2, [pc, #12]	; (8007838 <vTaskSuspendAll+0x18>)
 800782c:	6013      	str	r3, [r2, #0]
}
 800782e:	bf00      	nop
 8007830:	46bd      	mov	sp, r7
 8007832:	bc80      	pop	{r7}
 8007834:	4770      	bx	lr
 8007836:	bf00      	nop
 8007838:	20000fc0 	.word	0x20000fc0

0800783c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007842:	2300      	movs	r3, #0
 8007844:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007846:	2300      	movs	r3, #0
 8007848:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800784a:	4b42      	ldr	r3, [pc, #264]	; (8007954 <xTaskResumeAll+0x118>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d10a      	bne.n	8007868 <xTaskResumeAll+0x2c>
	__asm volatile
 8007852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007856:	f383 8811 	msr	BASEPRI, r3
 800785a:	f3bf 8f6f 	isb	sy
 800785e:	f3bf 8f4f 	dsb	sy
 8007862:	603b      	str	r3, [r7, #0]
}
 8007864:	bf00      	nop
 8007866:	e7fe      	b.n	8007866 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007868:	f001 fa88 	bl	8008d7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800786c:	4b39      	ldr	r3, [pc, #228]	; (8007954 <xTaskResumeAll+0x118>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	3b01      	subs	r3, #1
 8007872:	4a38      	ldr	r2, [pc, #224]	; (8007954 <xTaskResumeAll+0x118>)
 8007874:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007876:	4b37      	ldr	r3, [pc, #220]	; (8007954 <xTaskResumeAll+0x118>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d162      	bne.n	8007944 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800787e:	4b36      	ldr	r3, [pc, #216]	; (8007958 <xTaskResumeAll+0x11c>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d05e      	beq.n	8007944 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007886:	e02f      	b.n	80078e8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007888:	4b34      	ldr	r3, [pc, #208]	; (800795c <xTaskResumeAll+0x120>)
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	3318      	adds	r3, #24
 8007894:	4618      	mov	r0, r3
 8007896:	f7fe ff69 	bl	800676c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	3304      	adds	r3, #4
 800789e:	4618      	mov	r0, r3
 80078a0:	f7fe ff64 	bl	800676c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078a8:	4b2d      	ldr	r3, [pc, #180]	; (8007960 <xTaskResumeAll+0x124>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d903      	bls.n	80078b8 <xTaskResumeAll+0x7c>
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b4:	4a2a      	ldr	r2, [pc, #168]	; (8007960 <xTaskResumeAll+0x124>)
 80078b6:	6013      	str	r3, [r2, #0]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078bc:	4613      	mov	r3, r2
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	4413      	add	r3, r2
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	4a27      	ldr	r2, [pc, #156]	; (8007964 <xTaskResumeAll+0x128>)
 80078c6:	441a      	add	r2, r3
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	3304      	adds	r3, #4
 80078cc:	4619      	mov	r1, r3
 80078ce:	4610      	mov	r0, r2
 80078d0:	f7fe fef1 	bl	80066b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078d8:	4b23      	ldr	r3, [pc, #140]	; (8007968 <xTaskResumeAll+0x12c>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078de:	429a      	cmp	r2, r3
 80078e0:	d302      	bcc.n	80078e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80078e2:	4b22      	ldr	r3, [pc, #136]	; (800796c <xTaskResumeAll+0x130>)
 80078e4:	2201      	movs	r2, #1
 80078e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078e8:	4b1c      	ldr	r3, [pc, #112]	; (800795c <xTaskResumeAll+0x120>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1cb      	bne.n	8007888 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d001      	beq.n	80078fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80078f6:	f000 fb61 	bl	8007fbc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80078fa:	4b1d      	ldr	r3, [pc, #116]	; (8007970 <xTaskResumeAll+0x134>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d010      	beq.n	8007928 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007906:	f000 f845 	bl	8007994 <xTaskIncrementTick>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d002      	beq.n	8007916 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007910:	4b16      	ldr	r3, [pc, #88]	; (800796c <xTaskResumeAll+0x130>)
 8007912:	2201      	movs	r2, #1
 8007914:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	3b01      	subs	r3, #1
 800791a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d1f1      	bne.n	8007906 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8007922:	4b13      	ldr	r3, [pc, #76]	; (8007970 <xTaskResumeAll+0x134>)
 8007924:	2200      	movs	r2, #0
 8007926:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007928:	4b10      	ldr	r3, [pc, #64]	; (800796c <xTaskResumeAll+0x130>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d009      	beq.n	8007944 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007930:	2301      	movs	r3, #1
 8007932:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007934:	4b0f      	ldr	r3, [pc, #60]	; (8007974 <xTaskResumeAll+0x138>)
 8007936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800793a:	601a      	str	r2, [r3, #0]
 800793c:	f3bf 8f4f 	dsb	sy
 8007940:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007944:	f001 fa4a 	bl	8008ddc <vPortExitCritical>

	return xAlreadyYielded;
 8007948:	68bb      	ldr	r3, [r7, #8]
}
 800794a:	4618      	mov	r0, r3
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	20000fc0 	.word	0x20000fc0
 8007958:	20000f98 	.word	0x20000f98
 800795c:	20000f58 	.word	0x20000f58
 8007960:	20000fa0 	.word	0x20000fa0
 8007964:	20000ac8 	.word	0x20000ac8
 8007968:	20000ac4 	.word	0x20000ac4
 800796c:	20000fac 	.word	0x20000fac
 8007970:	20000fa8 	.word	0x20000fa8
 8007974:	e000ed04 	.word	0xe000ed04

08007978 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800797e:	4b04      	ldr	r3, [pc, #16]	; (8007990 <xTaskGetTickCount+0x18>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007984:	687b      	ldr	r3, [r7, #4]
}
 8007986:	4618      	mov	r0, r3
 8007988:	370c      	adds	r7, #12
 800798a:	46bd      	mov	sp, r7
 800798c:	bc80      	pop	{r7}
 800798e:	4770      	bx	lr
 8007990:	20000f9c 	.word	0x20000f9c

08007994 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b086      	sub	sp, #24
 8007998:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800799a:	2300      	movs	r3, #0
 800799c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800799e:	4b51      	ldr	r3, [pc, #324]	; (8007ae4 <xTaskIncrementTick+0x150>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	f040 808e 	bne.w	8007ac4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80079a8:	4b4f      	ldr	r3, [pc, #316]	; (8007ae8 <xTaskIncrementTick+0x154>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	3301      	adds	r3, #1
 80079ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80079b0:	4a4d      	ldr	r2, [pc, #308]	; (8007ae8 <xTaskIncrementTick+0x154>)
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d120      	bne.n	80079fe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80079bc:	4b4b      	ldr	r3, [pc, #300]	; (8007aec <xTaskIncrementTick+0x158>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d00a      	beq.n	80079dc <xTaskIncrementTick+0x48>
	__asm volatile
 80079c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ca:	f383 8811 	msr	BASEPRI, r3
 80079ce:	f3bf 8f6f 	isb	sy
 80079d2:	f3bf 8f4f 	dsb	sy
 80079d6:	603b      	str	r3, [r7, #0]
}
 80079d8:	bf00      	nop
 80079da:	e7fe      	b.n	80079da <xTaskIncrementTick+0x46>
 80079dc:	4b43      	ldr	r3, [pc, #268]	; (8007aec <xTaskIncrementTick+0x158>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	60fb      	str	r3, [r7, #12]
 80079e2:	4b43      	ldr	r3, [pc, #268]	; (8007af0 <xTaskIncrementTick+0x15c>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a41      	ldr	r2, [pc, #260]	; (8007aec <xTaskIncrementTick+0x158>)
 80079e8:	6013      	str	r3, [r2, #0]
 80079ea:	4a41      	ldr	r2, [pc, #260]	; (8007af0 <xTaskIncrementTick+0x15c>)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6013      	str	r3, [r2, #0]
 80079f0:	4b40      	ldr	r3, [pc, #256]	; (8007af4 <xTaskIncrementTick+0x160>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	3301      	adds	r3, #1
 80079f6:	4a3f      	ldr	r2, [pc, #252]	; (8007af4 <xTaskIncrementTick+0x160>)
 80079f8:	6013      	str	r3, [r2, #0]
 80079fa:	f000 fadf 	bl	8007fbc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80079fe:	4b3e      	ldr	r3, [pc, #248]	; (8007af8 <xTaskIncrementTick+0x164>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d34e      	bcc.n	8007aa6 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a08:	4b38      	ldr	r3, [pc, #224]	; (8007aec <xTaskIncrementTick+0x158>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d101      	bne.n	8007a16 <xTaskIncrementTick+0x82>
 8007a12:	2301      	movs	r3, #1
 8007a14:	e000      	b.n	8007a18 <xTaskIncrementTick+0x84>
 8007a16:	2300      	movs	r3, #0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d004      	beq.n	8007a26 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a1c:	4b36      	ldr	r3, [pc, #216]	; (8007af8 <xTaskIncrementTick+0x164>)
 8007a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a22:	601a      	str	r2, [r3, #0]
					break;
 8007a24:	e03f      	b.n	8007aa6 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007a26:	4b31      	ldr	r3, [pc, #196]	; (8007aec <xTaskIncrementTick+0x158>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007a36:	693a      	ldr	r2, [r7, #16]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d203      	bcs.n	8007a46 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007a3e:	4a2e      	ldr	r2, [pc, #184]	; (8007af8 <xTaskIncrementTick+0x164>)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6013      	str	r3, [r2, #0]
						break;
 8007a44:	e02f      	b.n	8007aa6 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	3304      	adds	r3, #4
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f7fe fe8e 	bl	800676c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d004      	beq.n	8007a62 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	3318      	adds	r3, #24
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7fe fe85 	bl	800676c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a66:	4b25      	ldr	r3, [pc, #148]	; (8007afc <xTaskIncrementTick+0x168>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d903      	bls.n	8007a76 <xTaskIncrementTick+0xe2>
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a72:	4a22      	ldr	r2, [pc, #136]	; (8007afc <xTaskIncrementTick+0x168>)
 8007a74:	6013      	str	r3, [r2, #0]
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	4413      	add	r3, r2
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	4a1f      	ldr	r2, [pc, #124]	; (8007b00 <xTaskIncrementTick+0x16c>)
 8007a84:	441a      	add	r2, r3
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	3304      	adds	r3, #4
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	4610      	mov	r0, r2
 8007a8e:	f7fe fe12 	bl	80066b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a96:	4b1b      	ldr	r3, [pc, #108]	; (8007b04 <xTaskIncrementTick+0x170>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d3b3      	bcc.n	8007a08 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007aa4:	e7b0      	b.n	8007a08 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007aa6:	4b17      	ldr	r3, [pc, #92]	; (8007b04 <xTaskIncrementTick+0x170>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aac:	4914      	ldr	r1, [pc, #80]	; (8007b00 <xTaskIncrementTick+0x16c>)
 8007aae:	4613      	mov	r3, r2
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	4413      	add	r3, r2
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	440b      	add	r3, r1
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d907      	bls.n	8007ace <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	617b      	str	r3, [r7, #20]
 8007ac2:	e004      	b.n	8007ace <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007ac4:	4b10      	ldr	r3, [pc, #64]	; (8007b08 <xTaskIncrementTick+0x174>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	4a0f      	ldr	r2, [pc, #60]	; (8007b08 <xTaskIncrementTick+0x174>)
 8007acc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007ace:	4b0f      	ldr	r3, [pc, #60]	; (8007b0c <xTaskIncrementTick+0x178>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d001      	beq.n	8007ada <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007ada:	697b      	ldr	r3, [r7, #20]
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3718      	adds	r7, #24
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	20000fc0 	.word	0x20000fc0
 8007ae8:	20000f9c 	.word	0x20000f9c
 8007aec:	20000f50 	.word	0x20000f50
 8007af0:	20000f54 	.word	0x20000f54
 8007af4:	20000fb0 	.word	0x20000fb0
 8007af8:	20000fb8 	.word	0x20000fb8
 8007afc:	20000fa0 	.word	0x20000fa0
 8007b00:	20000ac8 	.word	0x20000ac8
 8007b04:	20000ac4 	.word	0x20000ac4
 8007b08:	20000fa8 	.word	0x20000fa8
 8007b0c:	20000fac 	.word	0x20000fac

08007b10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007b10:	b480      	push	{r7}
 8007b12:	b085      	sub	sp, #20
 8007b14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007b16:	4b2a      	ldr	r3, [pc, #168]	; (8007bc0 <vTaskSwitchContext+0xb0>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d003      	beq.n	8007b26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007b1e:	4b29      	ldr	r3, [pc, #164]	; (8007bc4 <vTaskSwitchContext+0xb4>)
 8007b20:	2201      	movs	r2, #1
 8007b22:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007b24:	e046      	b.n	8007bb4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007b26:	4b27      	ldr	r3, [pc, #156]	; (8007bc4 <vTaskSwitchContext+0xb4>)
 8007b28:	2200      	movs	r2, #0
 8007b2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007b2c:	4b26      	ldr	r3, [pc, #152]	; (8007bc8 <vTaskSwitchContext+0xb8>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	60fb      	str	r3, [r7, #12]
 8007b32:	e010      	b.n	8007b56 <vTaskSwitchContext+0x46>
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d10a      	bne.n	8007b50 <vTaskSwitchContext+0x40>
	__asm volatile
 8007b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3e:	f383 8811 	msr	BASEPRI, r3
 8007b42:	f3bf 8f6f 	isb	sy
 8007b46:	f3bf 8f4f 	dsb	sy
 8007b4a:	607b      	str	r3, [r7, #4]
}
 8007b4c:	bf00      	nop
 8007b4e:	e7fe      	b.n	8007b4e <vTaskSwitchContext+0x3e>
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	3b01      	subs	r3, #1
 8007b54:	60fb      	str	r3, [r7, #12]
 8007b56:	491d      	ldr	r1, [pc, #116]	; (8007bcc <vTaskSwitchContext+0xbc>)
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	4413      	add	r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	440b      	add	r3, r1
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d0e4      	beq.n	8007b34 <vTaskSwitchContext+0x24>
 8007b6a:	68fa      	ldr	r2, [r7, #12]
 8007b6c:	4613      	mov	r3, r2
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	4413      	add	r3, r2
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	4a15      	ldr	r2, [pc, #84]	; (8007bcc <vTaskSwitchContext+0xbc>)
 8007b76:	4413      	add	r3, r2
 8007b78:	60bb      	str	r3, [r7, #8]
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	685a      	ldr	r2, [r3, #4]
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	605a      	str	r2, [r3, #4]
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	685a      	ldr	r2, [r3, #4]
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	3308      	adds	r3, #8
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d104      	bne.n	8007b9a <vTaskSwitchContext+0x8a>
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	685a      	ldr	r2, [r3, #4]
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	605a      	str	r2, [r3, #4]
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	4a0b      	ldr	r2, [pc, #44]	; (8007bd0 <vTaskSwitchContext+0xc0>)
 8007ba2:	6013      	str	r3, [r2, #0]
 8007ba4:	4a08      	ldr	r2, [pc, #32]	; (8007bc8 <vTaskSwitchContext+0xb8>)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007baa:	4b09      	ldr	r3, [pc, #36]	; (8007bd0 <vTaskSwitchContext+0xc0>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	3364      	adds	r3, #100	; 0x64
 8007bb0:	4a08      	ldr	r2, [pc, #32]	; (8007bd4 <vTaskSwitchContext+0xc4>)
 8007bb2:	6013      	str	r3, [r2, #0]
}
 8007bb4:	bf00      	nop
 8007bb6:	3714      	adds	r7, #20
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bc80      	pop	{r7}
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	20000fc0 	.word	0x20000fc0
 8007bc4:	20000fac 	.word	0x20000fac
 8007bc8:	20000fa0 	.word	0x20000fa0
 8007bcc:	20000ac8 	.word	0x20000ac8
 8007bd0:	20000ac4 	.word	0x20000ac4
 8007bd4:	2000005c 	.word	0x2000005c

08007bd8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d10a      	bne.n	8007bfe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bec:	f383 8811 	msr	BASEPRI, r3
 8007bf0:	f3bf 8f6f 	isb	sy
 8007bf4:	f3bf 8f4f 	dsb	sy
 8007bf8:	60fb      	str	r3, [r7, #12]
}
 8007bfa:	bf00      	nop
 8007bfc:	e7fe      	b.n	8007bfc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007bfe:	4b07      	ldr	r3, [pc, #28]	; (8007c1c <vTaskPlaceOnEventList+0x44>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	3318      	adds	r3, #24
 8007c04:	4619      	mov	r1, r3
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f7fe fd78 	bl	80066fc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007c0c:	2101      	movs	r1, #1
 8007c0e:	6838      	ldr	r0, [r7, #0]
 8007c10:	f000 fc60 	bl	80084d4 <prvAddCurrentTaskToDelayedList>
}
 8007c14:	bf00      	nop
 8007c16:	3710      	adds	r7, #16
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}
 8007c1c:	20000ac4 	.word	0x20000ac4

08007c20 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b086      	sub	sp, #24
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d10a      	bne.n	8007c48 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c36:	f383 8811 	msr	BASEPRI, r3
 8007c3a:	f3bf 8f6f 	isb	sy
 8007c3e:	f3bf 8f4f 	dsb	sy
 8007c42:	617b      	str	r3, [r7, #20]
}
 8007c44:	bf00      	nop
 8007c46:	e7fe      	b.n	8007c46 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c48:	4b0a      	ldr	r3, [pc, #40]	; (8007c74 <vTaskPlaceOnEventListRestricted+0x54>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	3318      	adds	r3, #24
 8007c4e:	4619      	mov	r1, r3
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f7fe fd30 	bl	80066b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d002      	beq.n	8007c62 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c60:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007c62:	6879      	ldr	r1, [r7, #4]
 8007c64:	68b8      	ldr	r0, [r7, #8]
 8007c66:	f000 fc35 	bl	80084d4 <prvAddCurrentTaskToDelayedList>
	}
 8007c6a:	bf00      	nop
 8007c6c:	3718      	adds	r7, #24
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop
 8007c74:	20000ac4 	.word	0x20000ac4

08007c78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b086      	sub	sp, #24
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	68db      	ldr	r3, [r3, #12]
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d10a      	bne.n	8007ca4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c92:	f383 8811 	msr	BASEPRI, r3
 8007c96:	f3bf 8f6f 	isb	sy
 8007c9a:	f3bf 8f4f 	dsb	sy
 8007c9e:	60fb      	str	r3, [r7, #12]
}
 8007ca0:	bf00      	nop
 8007ca2:	e7fe      	b.n	8007ca2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	3318      	adds	r3, #24
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7fe fd5f 	bl	800676c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cae:	4b1e      	ldr	r3, [pc, #120]	; (8007d28 <xTaskRemoveFromEventList+0xb0>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d11d      	bne.n	8007cf2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	3304      	adds	r3, #4
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7fe fd56 	bl	800676c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cc4:	4b19      	ldr	r3, [pc, #100]	; (8007d2c <xTaskRemoveFromEventList+0xb4>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d903      	bls.n	8007cd4 <xTaskRemoveFromEventList+0x5c>
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd0:	4a16      	ldr	r2, [pc, #88]	; (8007d2c <xTaskRemoveFromEventList+0xb4>)
 8007cd2:	6013      	str	r3, [r2, #0]
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cd8:	4613      	mov	r3, r2
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	4413      	add	r3, r2
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	4a13      	ldr	r2, [pc, #76]	; (8007d30 <xTaskRemoveFromEventList+0xb8>)
 8007ce2:	441a      	add	r2, r3
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	3304      	adds	r3, #4
 8007ce8:	4619      	mov	r1, r3
 8007cea:	4610      	mov	r0, r2
 8007cec:	f7fe fce3 	bl	80066b6 <vListInsertEnd>
 8007cf0:	e005      	b.n	8007cfe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	3318      	adds	r3, #24
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	480e      	ldr	r0, [pc, #56]	; (8007d34 <xTaskRemoveFromEventList+0xbc>)
 8007cfa:	f7fe fcdc 	bl	80066b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d02:	4b0d      	ldr	r3, [pc, #52]	; (8007d38 <xTaskRemoveFromEventList+0xc0>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d905      	bls.n	8007d18 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007d10:	4b0a      	ldr	r3, [pc, #40]	; (8007d3c <xTaskRemoveFromEventList+0xc4>)
 8007d12:	2201      	movs	r2, #1
 8007d14:	601a      	str	r2, [r3, #0]
 8007d16:	e001      	b.n	8007d1c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007d1c:	697b      	ldr	r3, [r7, #20]
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3718      	adds	r7, #24
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	20000fc0 	.word	0x20000fc0
 8007d2c:	20000fa0 	.word	0x20000fa0
 8007d30:	20000ac8 	.word	0x20000ac8
 8007d34:	20000f58 	.word	0x20000f58
 8007d38:	20000ac4 	.word	0x20000ac4
 8007d3c:	20000fac 	.word	0x20000fac

08007d40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d48:	4b06      	ldr	r3, [pc, #24]	; (8007d64 <vTaskInternalSetTimeOutState+0x24>)
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007d50:	4b05      	ldr	r3, [pc, #20]	; (8007d68 <vTaskInternalSetTimeOutState+0x28>)
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	605a      	str	r2, [r3, #4]
}
 8007d58:	bf00      	nop
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bc80      	pop	{r7}
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	20000fb0 	.word	0x20000fb0
 8007d68:	20000f9c 	.word	0x20000f9c

08007d6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b088      	sub	sp, #32
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d10a      	bne.n	8007d92 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d80:	f383 8811 	msr	BASEPRI, r3
 8007d84:	f3bf 8f6f 	isb	sy
 8007d88:	f3bf 8f4f 	dsb	sy
 8007d8c:	613b      	str	r3, [r7, #16]
}
 8007d8e:	bf00      	nop
 8007d90:	e7fe      	b.n	8007d90 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d10a      	bne.n	8007dae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9c:	f383 8811 	msr	BASEPRI, r3
 8007da0:	f3bf 8f6f 	isb	sy
 8007da4:	f3bf 8f4f 	dsb	sy
 8007da8:	60fb      	str	r3, [r7, #12]
}
 8007daa:	bf00      	nop
 8007dac:	e7fe      	b.n	8007dac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007dae:	f000 ffe5 	bl	8008d7c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007db2:	4b1d      	ldr	r3, [pc, #116]	; (8007e28 <xTaskCheckForTimeOut+0xbc>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	69ba      	ldr	r2, [r7, #24]
 8007dbe:	1ad3      	subs	r3, r2, r3
 8007dc0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dca:	d102      	bne.n	8007dd2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	61fb      	str	r3, [r7, #28]
 8007dd0:	e023      	b.n	8007e1a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	4b15      	ldr	r3, [pc, #84]	; (8007e2c <xTaskCheckForTimeOut+0xc0>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d007      	beq.n	8007dee <xTaskCheckForTimeOut+0x82>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	69ba      	ldr	r2, [r7, #24]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d302      	bcc.n	8007dee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007de8:	2301      	movs	r3, #1
 8007dea:	61fb      	str	r3, [r7, #28]
 8007dec:	e015      	b.n	8007e1a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	697a      	ldr	r2, [r7, #20]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d20b      	bcs.n	8007e10 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	1ad2      	subs	r2, r2, r3
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f7ff ff9b 	bl	8007d40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	61fb      	str	r3, [r7, #28]
 8007e0e:	e004      	b.n	8007e1a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	2200      	movs	r2, #0
 8007e14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007e16:	2301      	movs	r3, #1
 8007e18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007e1a:	f000 ffdf 	bl	8008ddc <vPortExitCritical>

	return xReturn;
 8007e1e:	69fb      	ldr	r3, [r7, #28]
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3720      	adds	r7, #32
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	20000f9c 	.word	0x20000f9c
 8007e2c:	20000fb0 	.word	0x20000fb0

08007e30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007e30:	b480      	push	{r7}
 8007e32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007e34:	4b03      	ldr	r3, [pc, #12]	; (8007e44 <vTaskMissedYield+0x14>)
 8007e36:	2201      	movs	r2, #1
 8007e38:	601a      	str	r2, [r3, #0]
}
 8007e3a:	bf00      	nop
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bc80      	pop	{r7}
 8007e40:	4770      	bx	lr
 8007e42:	bf00      	nop
 8007e44:	20000fac 	.word	0x20000fac

08007e48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e50:	f000 f852 	bl	8007ef8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e54:	4b06      	ldr	r3, [pc, #24]	; (8007e70 <prvIdleTask+0x28>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d9f9      	bls.n	8007e50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e5c:	4b05      	ldr	r3, [pc, #20]	; (8007e74 <prvIdleTask+0x2c>)
 8007e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e62:	601a      	str	r2, [r3, #0]
 8007e64:	f3bf 8f4f 	dsb	sy
 8007e68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007e6c:	e7f0      	b.n	8007e50 <prvIdleTask+0x8>
 8007e6e:	bf00      	nop
 8007e70:	20000ac8 	.word	0x20000ac8
 8007e74:	e000ed04 	.word	0xe000ed04

08007e78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e7e:	2300      	movs	r3, #0
 8007e80:	607b      	str	r3, [r7, #4]
 8007e82:	e00c      	b.n	8007e9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e84:	687a      	ldr	r2, [r7, #4]
 8007e86:	4613      	mov	r3, r2
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	4413      	add	r3, r2
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	4a12      	ldr	r2, [pc, #72]	; (8007ed8 <prvInitialiseTaskLists+0x60>)
 8007e90:	4413      	add	r3, r2
 8007e92:	4618      	mov	r0, r3
 8007e94:	f7fe fbe4 	bl	8006660 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	607b      	str	r3, [r7, #4]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2b37      	cmp	r3, #55	; 0x37
 8007ea2:	d9ef      	bls.n	8007e84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ea4:	480d      	ldr	r0, [pc, #52]	; (8007edc <prvInitialiseTaskLists+0x64>)
 8007ea6:	f7fe fbdb 	bl	8006660 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007eaa:	480d      	ldr	r0, [pc, #52]	; (8007ee0 <prvInitialiseTaskLists+0x68>)
 8007eac:	f7fe fbd8 	bl	8006660 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007eb0:	480c      	ldr	r0, [pc, #48]	; (8007ee4 <prvInitialiseTaskLists+0x6c>)
 8007eb2:	f7fe fbd5 	bl	8006660 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007eb6:	480c      	ldr	r0, [pc, #48]	; (8007ee8 <prvInitialiseTaskLists+0x70>)
 8007eb8:	f7fe fbd2 	bl	8006660 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ebc:	480b      	ldr	r0, [pc, #44]	; (8007eec <prvInitialiseTaskLists+0x74>)
 8007ebe:	f7fe fbcf 	bl	8006660 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ec2:	4b0b      	ldr	r3, [pc, #44]	; (8007ef0 <prvInitialiseTaskLists+0x78>)
 8007ec4:	4a05      	ldr	r2, [pc, #20]	; (8007edc <prvInitialiseTaskLists+0x64>)
 8007ec6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ec8:	4b0a      	ldr	r3, [pc, #40]	; (8007ef4 <prvInitialiseTaskLists+0x7c>)
 8007eca:	4a05      	ldr	r2, [pc, #20]	; (8007ee0 <prvInitialiseTaskLists+0x68>)
 8007ecc:	601a      	str	r2, [r3, #0]
}
 8007ece:	bf00      	nop
 8007ed0:	3708      	adds	r7, #8
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
 8007ed6:	bf00      	nop
 8007ed8:	20000ac8 	.word	0x20000ac8
 8007edc:	20000f28 	.word	0x20000f28
 8007ee0:	20000f3c 	.word	0x20000f3c
 8007ee4:	20000f58 	.word	0x20000f58
 8007ee8:	20000f6c 	.word	0x20000f6c
 8007eec:	20000f84 	.word	0x20000f84
 8007ef0:	20000f50 	.word	0x20000f50
 8007ef4:	20000f54 	.word	0x20000f54

08007ef8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b082      	sub	sp, #8
 8007efc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007efe:	e019      	b.n	8007f34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007f00:	f000 ff3c 	bl	8008d7c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007f04:	4b10      	ldr	r3, [pc, #64]	; (8007f48 <prvCheckTasksWaitingTermination+0x50>)
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	3304      	adds	r3, #4
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7fe fc2b 	bl	800676c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007f16:	4b0d      	ldr	r3, [pc, #52]	; (8007f4c <prvCheckTasksWaitingTermination+0x54>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	4a0b      	ldr	r2, [pc, #44]	; (8007f4c <prvCheckTasksWaitingTermination+0x54>)
 8007f1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007f20:	4b0b      	ldr	r3, [pc, #44]	; (8007f50 <prvCheckTasksWaitingTermination+0x58>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	3b01      	subs	r3, #1
 8007f26:	4a0a      	ldr	r2, [pc, #40]	; (8007f50 <prvCheckTasksWaitingTermination+0x58>)
 8007f28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007f2a:	f000 ff57 	bl	8008ddc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 f810 	bl	8007f54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f34:	4b06      	ldr	r3, [pc, #24]	; (8007f50 <prvCheckTasksWaitingTermination+0x58>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d1e1      	bne.n	8007f00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007f3c:	bf00      	nop
 8007f3e:	bf00      	nop
 8007f40:	3708      	adds	r7, #8
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	20000f6c 	.word	0x20000f6c
 8007f4c:	20000f98 	.word	0x20000f98
 8007f50:	20000f80 	.word	0x20000f80

08007f54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	3364      	adds	r3, #100	; 0x64
 8007f60:	4618      	mov	r0, r3
 8007f62:	f001 f9eb 	bl	800933c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d108      	bne.n	8007f82 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f74:	4618      	mov	r0, r3
 8007f76:	f001 f8c5 	bl	8009104 <vPortFree>
				vPortFree( pxTCB );
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f001 f8c2 	bl	8009104 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f80:	e018      	b.n	8007fb4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d103      	bne.n	8007f94 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f001 f8b9 	bl	8009104 <vPortFree>
	}
 8007f92:	e00f      	b.n	8007fb4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f893 30b5 	ldrb.w	r3, [r3, #181]	; 0xb5
 8007f9a:	2b02      	cmp	r3, #2
 8007f9c:	d00a      	beq.n	8007fb4 <prvDeleteTCB+0x60>
	__asm volatile
 8007f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa2:	f383 8811 	msr	BASEPRI, r3
 8007fa6:	f3bf 8f6f 	isb	sy
 8007faa:	f3bf 8f4f 	dsb	sy
 8007fae:	60fb      	str	r3, [r7, #12]
}
 8007fb0:	bf00      	nop
 8007fb2:	e7fe      	b.n	8007fb2 <prvDeleteTCB+0x5e>
	}
 8007fb4:	bf00      	nop
 8007fb6:	3710      	adds	r7, #16
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fc2:	4b0e      	ldr	r3, [pc, #56]	; (8007ffc <prvResetNextTaskUnblockTime+0x40>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d101      	bne.n	8007fd0 <prvResetNextTaskUnblockTime+0x14>
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e000      	b.n	8007fd2 <prvResetNextTaskUnblockTime+0x16>
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d004      	beq.n	8007fe0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007fd6:	4b0a      	ldr	r3, [pc, #40]	; (8008000 <prvResetNextTaskUnblockTime+0x44>)
 8007fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8007fdc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007fde:	e008      	b.n	8007ff2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007fe0:	4b06      	ldr	r3, [pc, #24]	; (8007ffc <prvResetNextTaskUnblockTime+0x40>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	4a04      	ldr	r2, [pc, #16]	; (8008000 <prvResetNextTaskUnblockTime+0x44>)
 8007ff0:	6013      	str	r3, [r2, #0]
}
 8007ff2:	bf00      	nop
 8007ff4:	370c      	adds	r7, #12
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bc80      	pop	{r7}
 8007ffa:	4770      	bx	lr
 8007ffc:	20000f50 	.word	0x20000f50
 8008000:	20000fb8 	.word	0x20000fb8

08008004 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800800a:	4b0b      	ldr	r3, [pc, #44]	; (8008038 <xTaskGetSchedulerState+0x34>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d102      	bne.n	8008018 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008012:	2301      	movs	r3, #1
 8008014:	607b      	str	r3, [r7, #4]
 8008016:	e008      	b.n	800802a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008018:	4b08      	ldr	r3, [pc, #32]	; (800803c <xTaskGetSchedulerState+0x38>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d102      	bne.n	8008026 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008020:	2302      	movs	r3, #2
 8008022:	607b      	str	r3, [r7, #4]
 8008024:	e001      	b.n	800802a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008026:	2300      	movs	r3, #0
 8008028:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800802a:	687b      	ldr	r3, [r7, #4]
	}
 800802c:	4618      	mov	r0, r3
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	bc80      	pop	{r7}
 8008034:	4770      	bx	lr
 8008036:	bf00      	nop
 8008038:	20000fa4 	.word	0x20000fa4
 800803c:	20000fc0 	.word	0x20000fc0

08008040 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008040:	b580      	push	{r7, lr}
 8008042:	b086      	sub	sp, #24
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800804c:	2300      	movs	r3, #0
 800804e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d056      	beq.n	8008104 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008056:	4b2e      	ldr	r3, [pc, #184]	; (8008110 <xTaskPriorityDisinherit+0xd0>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	693a      	ldr	r2, [r7, #16]
 800805c:	429a      	cmp	r2, r3
 800805e:	d00a      	beq.n	8008076 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008064:	f383 8811 	msr	BASEPRI, r3
 8008068:	f3bf 8f6f 	isb	sy
 800806c:	f3bf 8f4f 	dsb	sy
 8008070:	60fb      	str	r3, [r7, #12]
}
 8008072:	bf00      	nop
 8008074:	e7fe      	b.n	8008074 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800807a:	2b00      	cmp	r3, #0
 800807c:	d10a      	bne.n	8008094 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800807e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008082:	f383 8811 	msr	BASEPRI, r3
 8008086:	f3bf 8f6f 	isb	sy
 800808a:	f3bf 8f4f 	dsb	sy
 800808e:	60bb      	str	r3, [r7, #8]
}
 8008090:	bf00      	nop
 8008092:	e7fe      	b.n	8008092 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008098:	1e5a      	subs	r2, r3, #1
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d02c      	beq.n	8008104 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d128      	bne.n	8008104 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	3304      	adds	r3, #4
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7fe fb58 	bl	800676c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080d4:	4b0f      	ldr	r3, [pc, #60]	; (8008114 <xTaskPriorityDisinherit+0xd4>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	429a      	cmp	r2, r3
 80080da:	d903      	bls.n	80080e4 <xTaskPriorityDisinherit+0xa4>
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e0:	4a0c      	ldr	r2, [pc, #48]	; (8008114 <xTaskPriorityDisinherit+0xd4>)
 80080e2:	6013      	str	r3, [r2, #0]
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080e8:	4613      	mov	r3, r2
 80080ea:	009b      	lsls	r3, r3, #2
 80080ec:	4413      	add	r3, r2
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	4a09      	ldr	r2, [pc, #36]	; (8008118 <xTaskPriorityDisinherit+0xd8>)
 80080f2:	441a      	add	r2, r3
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	3304      	adds	r3, #4
 80080f8:	4619      	mov	r1, r3
 80080fa:	4610      	mov	r0, r2
 80080fc:	f7fe fadb 	bl	80066b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008100:	2301      	movs	r3, #1
 8008102:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008104:	697b      	ldr	r3, [r7, #20]
	}
 8008106:	4618      	mov	r0, r3
 8008108:	3718      	adds	r7, #24
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}
 800810e:	bf00      	nop
 8008110:	20000ac4 	.word	0x20000ac4
 8008114:	20000fa0 	.word	0x20000fa0
 8008118:	20000ac8 	.word	0x20000ac8

0800811c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800811c:	b580      	push	{r7, lr}
 800811e:	b086      	sub	sp, #24
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	607a      	str	r2, [r7, #4]
 8008128:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800812a:	f000 fe27 	bl	8008d7c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800812e:	4b29      	ldr	r3, [pc, #164]	; (80081d4 <xTaskNotifyWait+0xb8>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8008136:	b2db      	uxtb	r3, r3
 8008138:	2b02      	cmp	r3, #2
 800813a:	d01c      	beq.n	8008176 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800813c:	4b25      	ldr	r3, [pc, #148]	; (80081d4 <xTaskNotifyWait+0xb8>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	43d2      	mvns	r2, r2
 8008148:	400a      	ands	r2, r1
 800814a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800814e:	4b21      	ldr	r3, [pc, #132]	; (80081d4 <xTaskNotifyWait+0xb8>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2201      	movs	r2, #1
 8008154:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

				if( xTicksToWait > ( TickType_t ) 0 )
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00b      	beq.n	8008176 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800815e:	2101      	movs	r1, #1
 8008160:	6838      	ldr	r0, [r7, #0]
 8008162:	f000 f9b7 	bl	80084d4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8008166:	4b1c      	ldr	r3, [pc, #112]	; (80081d8 <xTaskNotifyWait+0xbc>)
 8008168:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800816c:	601a      	str	r2, [r3, #0]
 800816e:	f3bf 8f4f 	dsb	sy
 8008172:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008176:	f000 fe31 	bl	8008ddc <vPortExitCritical>

		taskENTER_CRITICAL();
 800817a:	f000 fdff 	bl	8008d7c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d005      	beq.n	8008190 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8008184:	4b13      	ldr	r3, [pc, #76]	; (80081d4 <xTaskNotifyWait+0xb8>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008190:	4b10      	ldr	r3, [pc, #64]	; (80081d4 <xTaskNotifyWait+0xb8>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8008198:	b2db      	uxtb	r3, r3
 800819a:	2b02      	cmp	r3, #2
 800819c:	d002      	beq.n	80081a4 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800819e:	2300      	movs	r3, #0
 80081a0:	617b      	str	r3, [r7, #20]
 80081a2:	e00a      	b.n	80081ba <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80081a4:	4b0b      	ldr	r3, [pc, #44]	; (80081d4 <xTaskNotifyWait+0xb8>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80081ac:	68ba      	ldr	r2, [r7, #8]
 80081ae:	43d2      	mvns	r2, r2
 80081b0:	400a      	ands	r2, r1
 80081b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
				xReturn = pdTRUE;
 80081b6:	2301      	movs	r3, #1
 80081b8:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80081ba:	4b06      	ldr	r3, [pc, #24]	; (80081d4 <xTaskNotifyWait+0xb8>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
		}
		taskEXIT_CRITICAL();
 80081c4:	f000 fe0a 	bl	8008ddc <vPortExitCritical>

		return xReturn;
 80081c8:	697b      	ldr	r3, [r7, #20]
	}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3718      	adds	r7, #24
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	20000ac4 	.word	0x20000ac4
 80081d8:	e000ed04 	.word	0xe000ed04

080081dc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b08a      	sub	sp, #40	; 0x28
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	603b      	str	r3, [r7, #0]
 80081e8:	4613      	mov	r3, r2
 80081ea:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80081ec:	2301      	movs	r3, #1
 80081ee:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d10a      	bne.n	800820c <xTaskGenericNotify+0x30>
	__asm volatile
 80081f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fa:	f383 8811 	msr	BASEPRI, r3
 80081fe:	f3bf 8f6f 	isb	sy
 8008202:	f3bf 8f4f 	dsb	sy
 8008206:	61bb      	str	r3, [r7, #24]
}
 8008208:	bf00      	nop
 800820a:	e7fe      	b.n	800820a <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8008210:	f000 fdb4 	bl	8008d7c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d004      	beq.n	8008224 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800821a:	6a3b      	ldr	r3, [r7, #32]
 800821c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008224:	6a3b      	ldr	r3, [r7, #32]
 8008226:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800822a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800822c:	6a3b      	ldr	r3, [r7, #32]
 800822e:	2202      	movs	r2, #2
 8008230:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

			switch( eAction )
 8008234:	79fb      	ldrb	r3, [r7, #7]
 8008236:	2b04      	cmp	r3, #4
 8008238:	d82d      	bhi.n	8008296 <xTaskGenericNotify+0xba>
 800823a:	a201      	add	r2, pc, #4	; (adr r2, 8008240 <xTaskGenericNotify+0x64>)
 800823c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008240:	08008297 	.word	0x08008297
 8008244:	08008255 	.word	0x08008255
 8008248:	08008267 	.word	0x08008267
 800824c:	08008277 	.word	0x08008277
 8008250:	08008281 	.word	0x08008281
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008254:	6a3b      	ldr	r3, [r7, #32]
 8008256:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	431a      	orrs	r2, r3
 800825e:	6a3b      	ldr	r3, [r7, #32]
 8008260:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
					break;
 8008264:	e017      	b.n	8008296 <xTaskGenericNotify+0xba>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8008266:	6a3b      	ldr	r3, [r7, #32]
 8008268:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800826c:	1c5a      	adds	r2, r3, #1
 800826e:	6a3b      	ldr	r3, [r7, #32]
 8008270:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
					break;
 8008274:	e00f      	b.n	8008296 <xTaskGenericNotify+0xba>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008276:	6a3b      	ldr	r3, [r7, #32]
 8008278:	68ba      	ldr	r2, [r7, #8]
 800827a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
					break;
 800827e:	e00a      	b.n	8008296 <xTaskGenericNotify+0xba>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008280:	7ffb      	ldrb	r3, [r7, #31]
 8008282:	2b02      	cmp	r3, #2
 8008284:	d004      	beq.n	8008290 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008286:	6a3b      	ldr	r3, [r7, #32]
 8008288:	68ba      	ldr	r2, [r7, #8]
 800828a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800828e:	e001      	b.n	8008294 <xTaskGenericNotify+0xb8>
						xReturn = pdFAIL;
 8008290:	2300      	movs	r3, #0
 8008292:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8008294:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008296:	7ffb      	ldrb	r3, [r7, #31]
 8008298:	2b01      	cmp	r3, #1
 800829a:	d13a      	bne.n	8008312 <xTaskGenericNotify+0x136>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800829c:	6a3b      	ldr	r3, [r7, #32]
 800829e:	3304      	adds	r3, #4
 80082a0:	4618      	mov	r0, r3
 80082a2:	f7fe fa63 	bl	800676c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80082a6:	6a3b      	ldr	r3, [r7, #32]
 80082a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082aa:	4b1d      	ldr	r3, [pc, #116]	; (8008320 <xTaskGenericNotify+0x144>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d903      	bls.n	80082ba <xTaskGenericNotify+0xde>
 80082b2:	6a3b      	ldr	r3, [r7, #32]
 80082b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b6:	4a1a      	ldr	r2, [pc, #104]	; (8008320 <xTaskGenericNotify+0x144>)
 80082b8:	6013      	str	r3, [r2, #0]
 80082ba:	6a3b      	ldr	r3, [r7, #32]
 80082bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082be:	4613      	mov	r3, r2
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	4413      	add	r3, r2
 80082c4:	009b      	lsls	r3, r3, #2
 80082c6:	4a17      	ldr	r2, [pc, #92]	; (8008324 <xTaskGenericNotify+0x148>)
 80082c8:	441a      	add	r2, r3
 80082ca:	6a3b      	ldr	r3, [r7, #32]
 80082cc:	3304      	adds	r3, #4
 80082ce:	4619      	mov	r1, r3
 80082d0:	4610      	mov	r0, r2
 80082d2:	f7fe f9f0 	bl	80066b6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80082d6:	6a3b      	ldr	r3, [r7, #32]
 80082d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00a      	beq.n	80082f4 <xTaskGenericNotify+0x118>
	__asm volatile
 80082de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e2:	f383 8811 	msr	BASEPRI, r3
 80082e6:	f3bf 8f6f 	isb	sy
 80082ea:	f3bf 8f4f 	dsb	sy
 80082ee:	617b      	str	r3, [r7, #20]
}
 80082f0:	bf00      	nop
 80082f2:	e7fe      	b.n	80082f2 <xTaskGenericNotify+0x116>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80082f4:	6a3b      	ldr	r3, [r7, #32]
 80082f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082f8:	4b0b      	ldr	r3, [pc, #44]	; (8008328 <xTaskGenericNotify+0x14c>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082fe:	429a      	cmp	r2, r3
 8008300:	d907      	bls.n	8008312 <xTaskGenericNotify+0x136>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8008302:	4b0a      	ldr	r3, [pc, #40]	; (800832c <xTaskGenericNotify+0x150>)
 8008304:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008308:	601a      	str	r2, [r3, #0]
 800830a:	f3bf 8f4f 	dsb	sy
 800830e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008312:	f000 fd63 	bl	8008ddc <vPortExitCritical>

		return xReturn;
 8008316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008318:	4618      	mov	r0, r3
 800831a:	3728      	adds	r7, #40	; 0x28
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}
 8008320:	20000fa0 	.word	0x20000fa0
 8008324:	20000ac8 	.word	0x20000ac8
 8008328:	20000ac4 	.word	0x20000ac4
 800832c:	e000ed04 	.word	0xe000ed04

08008330 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008330:	b580      	push	{r7, lr}
 8008332:	b08e      	sub	sp, #56	; 0x38
 8008334:	af00      	add	r7, sp, #0
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	60b9      	str	r1, [r7, #8]
 800833a:	603b      	str	r3, [r7, #0]
 800833c:	4613      	mov	r3, r2
 800833e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8008340:	2301      	movs	r3, #1
 8008342:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d10a      	bne.n	8008360 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800834a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800834e:	f383 8811 	msr	BASEPRI, r3
 8008352:	f3bf 8f6f 	isb	sy
 8008356:	f3bf 8f4f 	dsb	sy
 800835a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800835c:	bf00      	nop
 800835e:	e7fe      	b.n	800835e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008360:	f000 fdce 	bl	8008f00 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8008368:	f3ef 8211 	mrs	r2, BASEPRI
 800836c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008370:	f383 8811 	msr	BASEPRI, r3
 8008374:	f3bf 8f6f 	isb	sy
 8008378:	f3bf 8f4f 	dsb	sy
 800837c:	623a      	str	r2, [r7, #32]
 800837e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8008380:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008382:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d004      	beq.n	8008394 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800838a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008396:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 800839a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800839e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a0:	2202      	movs	r2, #2
 80083a2:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4

			switch( eAction )
 80083a6:	79fb      	ldrb	r3, [r7, #7]
 80083a8:	2b04      	cmp	r3, #4
 80083aa:	d82f      	bhi.n	800840c <xTaskGenericNotifyFromISR+0xdc>
 80083ac:	a201      	add	r2, pc, #4	; (adr r2, 80083b4 <xTaskGenericNotifyFromISR+0x84>)
 80083ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b2:	bf00      	nop
 80083b4:	0800840d 	.word	0x0800840d
 80083b8:	080083c9 	.word	0x080083c9
 80083bc:	080083db 	.word	0x080083db
 80083c0:	080083eb 	.word	0x080083eb
 80083c4:	080083f5 	.word	0x080083f5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80083c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	431a      	orrs	r2, r3
 80083d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
					break;
 80083d8:	e018      	b.n	800840c <xTaskGenericNotifyFromISR+0xdc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80083da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80083e0:	1c5a      	adds	r2, r3, #1
 80083e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
					break;
 80083e8:	e010      	b.n	800840c <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80083ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ec:	68ba      	ldr	r2, [r7, #8]
 80083ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
					break;
 80083f2:	e00b      	b.n	800840c <xTaskGenericNotifyFromISR+0xdc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80083f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80083f8:	2b02      	cmp	r3, #2
 80083fa:	d004      	beq.n	8008406 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80083fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fe:	68ba      	ldr	r2, [r7, #8]
 8008400:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8008404:	e001      	b.n	800840a <xTaskGenericNotifyFromISR+0xda>
						xReturn = pdFAIL;
 8008406:	2300      	movs	r3, #0
 8008408:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800840a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800840c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008410:	2b01      	cmp	r3, #1
 8008412:	d147      	bne.n	80084a4 <xTaskGenericNotifyFromISR+0x174>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00a      	beq.n	8008432 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800841c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008420:	f383 8811 	msr	BASEPRI, r3
 8008424:	f3bf 8f6f 	isb	sy
 8008428:	f3bf 8f4f 	dsb	sy
 800842c:	61bb      	str	r3, [r7, #24]
}
 800842e:	bf00      	nop
 8008430:	e7fe      	b.n	8008430 <xTaskGenericNotifyFromISR+0x100>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008432:	4b22      	ldr	r3, [pc, #136]	; (80084bc <xTaskGenericNotifyFromISR+0x18c>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d11d      	bne.n	8008476 <xTaskGenericNotifyFromISR+0x146>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800843a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843c:	3304      	adds	r3, #4
 800843e:	4618      	mov	r0, r3
 8008440:	f7fe f994 	bl	800676c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008448:	4b1d      	ldr	r3, [pc, #116]	; (80084c0 <xTaskGenericNotifyFromISR+0x190>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	429a      	cmp	r2, r3
 800844e:	d903      	bls.n	8008458 <xTaskGenericNotifyFromISR+0x128>
 8008450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008454:	4a1a      	ldr	r2, [pc, #104]	; (80084c0 <xTaskGenericNotifyFromISR+0x190>)
 8008456:	6013      	str	r3, [r2, #0]
 8008458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800845c:	4613      	mov	r3, r2
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	4413      	add	r3, r2
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	4a17      	ldr	r2, [pc, #92]	; (80084c4 <xTaskGenericNotifyFromISR+0x194>)
 8008466:	441a      	add	r2, r3
 8008468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846a:	3304      	adds	r3, #4
 800846c:	4619      	mov	r1, r3
 800846e:	4610      	mov	r0, r2
 8008470:	f7fe f921 	bl	80066b6 <vListInsertEnd>
 8008474:	e005      	b.n	8008482 <xTaskGenericNotifyFromISR+0x152>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8008476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008478:	3318      	adds	r3, #24
 800847a:	4619      	mov	r1, r3
 800847c:	4812      	ldr	r0, [pc, #72]	; (80084c8 <xTaskGenericNotifyFromISR+0x198>)
 800847e:	f7fe f91a 	bl	80066b6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008486:	4b11      	ldr	r3, [pc, #68]	; (80084cc <xTaskGenericNotifyFromISR+0x19c>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800848c:	429a      	cmp	r2, r3
 800848e:	d909      	bls.n	80084a4 <xTaskGenericNotifyFromISR+0x174>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8008490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008492:	2b00      	cmp	r3, #0
 8008494:	d003      	beq.n	800849e <xTaskGenericNotifyFromISR+0x16e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8008496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008498:	2201      	movs	r2, #1
 800849a:	601a      	str	r2, [r3, #0]
 800849c:	e002      	b.n	80084a4 <xTaskGenericNotifyFromISR+0x174>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 800849e:	4b0c      	ldr	r3, [pc, #48]	; (80084d0 <xTaskGenericNotifyFromISR+0x1a0>)
 80084a0:	2201      	movs	r2, #1
 80084a2:	601a      	str	r2, [r3, #0]
 80084a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a6:	617b      	str	r3, [r7, #20]
	__asm volatile
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	f383 8811 	msr	BASEPRI, r3
}
 80084ae:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80084b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3738      	adds	r7, #56	; 0x38
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop
 80084bc:	20000fc0 	.word	0x20000fc0
 80084c0:	20000fa0 	.word	0x20000fa0
 80084c4:	20000ac8 	.word	0x20000ac8
 80084c8:	20000f58 	.word	0x20000f58
 80084cc:	20000ac4 	.word	0x20000ac4
 80084d0:	20000fac 	.word	0x20000fac

080084d4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80084de:	4b21      	ldr	r3, [pc, #132]	; (8008564 <prvAddCurrentTaskToDelayedList+0x90>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084e4:	4b20      	ldr	r3, [pc, #128]	; (8008568 <prvAddCurrentTaskToDelayedList+0x94>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	3304      	adds	r3, #4
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7fe f93e 	bl	800676c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f6:	d10a      	bne.n	800850e <prvAddCurrentTaskToDelayedList+0x3a>
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d007      	beq.n	800850e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084fe:	4b1a      	ldr	r3, [pc, #104]	; (8008568 <prvAddCurrentTaskToDelayedList+0x94>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	3304      	adds	r3, #4
 8008504:	4619      	mov	r1, r3
 8008506:	4819      	ldr	r0, [pc, #100]	; (800856c <prvAddCurrentTaskToDelayedList+0x98>)
 8008508:	f7fe f8d5 	bl	80066b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800850c:	e026      	b.n	800855c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4413      	add	r3, r2
 8008514:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008516:	4b14      	ldr	r3, [pc, #80]	; (8008568 <prvAddCurrentTaskToDelayedList+0x94>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	68ba      	ldr	r2, [r7, #8]
 800851c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800851e:	68ba      	ldr	r2, [r7, #8]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	429a      	cmp	r2, r3
 8008524:	d209      	bcs.n	800853a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008526:	4b12      	ldr	r3, [pc, #72]	; (8008570 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	4b0f      	ldr	r3, [pc, #60]	; (8008568 <prvAddCurrentTaskToDelayedList+0x94>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	3304      	adds	r3, #4
 8008530:	4619      	mov	r1, r3
 8008532:	4610      	mov	r0, r2
 8008534:	f7fe f8e2 	bl	80066fc <vListInsert>
}
 8008538:	e010      	b.n	800855c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800853a:	4b0e      	ldr	r3, [pc, #56]	; (8008574 <prvAddCurrentTaskToDelayedList+0xa0>)
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	4b0a      	ldr	r3, [pc, #40]	; (8008568 <prvAddCurrentTaskToDelayedList+0x94>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	3304      	adds	r3, #4
 8008544:	4619      	mov	r1, r3
 8008546:	4610      	mov	r0, r2
 8008548:	f7fe f8d8 	bl	80066fc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800854c:	4b0a      	ldr	r3, [pc, #40]	; (8008578 <prvAddCurrentTaskToDelayedList+0xa4>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	68ba      	ldr	r2, [r7, #8]
 8008552:	429a      	cmp	r2, r3
 8008554:	d202      	bcs.n	800855c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008556:	4a08      	ldr	r2, [pc, #32]	; (8008578 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	6013      	str	r3, [r2, #0]
}
 800855c:	bf00      	nop
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	20000f9c 	.word	0x20000f9c
 8008568:	20000ac4 	.word	0x20000ac4
 800856c:	20000f84 	.word	0x20000f84
 8008570:	20000f54 	.word	0x20000f54
 8008574:	20000f50 	.word	0x20000f50
 8008578:	20000fb8 	.word	0x20000fb8

0800857c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b08a      	sub	sp, #40	; 0x28
 8008580:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008582:	2300      	movs	r3, #0
 8008584:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008586:	f000 facb 	bl	8008b20 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800858a:	4b1c      	ldr	r3, [pc, #112]	; (80085fc <xTimerCreateTimerTask+0x80>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d021      	beq.n	80085d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008592:	2300      	movs	r3, #0
 8008594:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008596:	2300      	movs	r3, #0
 8008598:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800859a:	1d3a      	adds	r2, r7, #4
 800859c:	f107 0108 	add.w	r1, r7, #8
 80085a0:	f107 030c 	add.w	r3, r7, #12
 80085a4:	4618      	mov	r0, r3
 80085a6:	f7fe f841 	bl	800662c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80085aa:	6879      	ldr	r1, [r7, #4]
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	9202      	str	r2, [sp, #8]
 80085b2:	9301      	str	r3, [sp, #4]
 80085b4:	2302      	movs	r3, #2
 80085b6:	9300      	str	r3, [sp, #0]
 80085b8:	2300      	movs	r3, #0
 80085ba:	460a      	mov	r2, r1
 80085bc:	4910      	ldr	r1, [pc, #64]	; (8008600 <xTimerCreateTimerTask+0x84>)
 80085be:	4811      	ldr	r0, [pc, #68]	; (8008604 <xTimerCreateTimerTask+0x88>)
 80085c0:	f7fe feda 	bl	8007378 <xTaskCreateStatic>
 80085c4:	4603      	mov	r3, r0
 80085c6:	4a10      	ldr	r2, [pc, #64]	; (8008608 <xTimerCreateTimerTask+0x8c>)
 80085c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80085ca:	4b0f      	ldr	r3, [pc, #60]	; (8008608 <xTimerCreateTimerTask+0x8c>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d001      	beq.n	80085d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80085d2:	2301      	movs	r3, #1
 80085d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d10a      	bne.n	80085f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80085dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e0:	f383 8811 	msr	BASEPRI, r3
 80085e4:	f3bf 8f6f 	isb	sy
 80085e8:	f3bf 8f4f 	dsb	sy
 80085ec:	613b      	str	r3, [r7, #16]
}
 80085ee:	bf00      	nop
 80085f0:	e7fe      	b.n	80085f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80085f2:	697b      	ldr	r3, [r7, #20]
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3718      	adds	r7, #24
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}
 80085fc:	20000ff4 	.word	0x20000ff4
 8008600:	08009618 	.word	0x08009618
 8008604:	08008729 	.word	0x08008729
 8008608:	20000ff8 	.word	0x20000ff8

0800860c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b08a      	sub	sp, #40	; 0x28
 8008610:	af00      	add	r7, sp, #0
 8008612:	60f8      	str	r0, [r7, #12]
 8008614:	60b9      	str	r1, [r7, #8]
 8008616:	607a      	str	r2, [r7, #4]
 8008618:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800861a:	2300      	movs	r3, #0
 800861c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d10a      	bne.n	800863a <xTimerGenericCommand+0x2e>
	__asm volatile
 8008624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008628:	f383 8811 	msr	BASEPRI, r3
 800862c:	f3bf 8f6f 	isb	sy
 8008630:	f3bf 8f4f 	dsb	sy
 8008634:	623b      	str	r3, [r7, #32]
}
 8008636:	bf00      	nop
 8008638:	e7fe      	b.n	8008638 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800863a:	4b1a      	ldr	r3, [pc, #104]	; (80086a4 <xTimerGenericCommand+0x98>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d02a      	beq.n	8008698 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	2b05      	cmp	r3, #5
 8008652:	dc18      	bgt.n	8008686 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008654:	f7ff fcd6 	bl	8008004 <xTaskGetSchedulerState>
 8008658:	4603      	mov	r3, r0
 800865a:	2b02      	cmp	r3, #2
 800865c:	d109      	bne.n	8008672 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800865e:	4b11      	ldr	r3, [pc, #68]	; (80086a4 <xTimerGenericCommand+0x98>)
 8008660:	6818      	ldr	r0, [r3, #0]
 8008662:	f107 0110 	add.w	r1, r7, #16
 8008666:	2300      	movs	r3, #0
 8008668:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800866a:	f7fe f9e9 	bl	8006a40 <xQueueGenericSend>
 800866e:	6278      	str	r0, [r7, #36]	; 0x24
 8008670:	e012      	b.n	8008698 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008672:	4b0c      	ldr	r3, [pc, #48]	; (80086a4 <xTimerGenericCommand+0x98>)
 8008674:	6818      	ldr	r0, [r3, #0]
 8008676:	f107 0110 	add.w	r1, r7, #16
 800867a:	2300      	movs	r3, #0
 800867c:	2200      	movs	r2, #0
 800867e:	f7fe f9df 	bl	8006a40 <xQueueGenericSend>
 8008682:	6278      	str	r0, [r7, #36]	; 0x24
 8008684:	e008      	b.n	8008698 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008686:	4b07      	ldr	r3, [pc, #28]	; (80086a4 <xTimerGenericCommand+0x98>)
 8008688:	6818      	ldr	r0, [r3, #0]
 800868a:	f107 0110 	add.w	r1, r7, #16
 800868e:	2300      	movs	r3, #0
 8008690:	683a      	ldr	r2, [r7, #0]
 8008692:	f7fe fad3 	bl	8006c3c <xQueueGenericSendFromISR>
 8008696:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800869a:	4618      	mov	r0, r3
 800869c:	3728      	adds	r7, #40	; 0x28
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	20000ff4 	.word	0x20000ff4

080086a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b088      	sub	sp, #32
 80086ac:	af02      	add	r7, sp, #8
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80086b2:	4b1c      	ldr	r3, [pc, #112]	; (8008724 <prvProcessExpiredTimer+0x7c>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	68db      	ldr	r3, [r3, #12]
 80086ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	3304      	adds	r3, #4
 80086c0:	4618      	mov	r0, r3
 80086c2:	f7fe f853 	bl	800676c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	69db      	ldr	r3, [r3, #28]
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d122      	bne.n	8008714 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	699a      	ldr	r2, [r3, #24]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	18d1      	adds	r1, r2, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	683a      	ldr	r2, [r7, #0]
 80086da:	6978      	ldr	r0, [r7, #20]
 80086dc:	f000 f8c8 	bl	8008870 <prvInsertTimerInActiveList>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d016      	beq.n	8008714 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80086e6:	2300      	movs	r3, #0
 80086e8:	9300      	str	r3, [sp, #0]
 80086ea:	2300      	movs	r3, #0
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	2100      	movs	r1, #0
 80086f0:	6978      	ldr	r0, [r7, #20]
 80086f2:	f7ff ff8b 	bl	800860c <xTimerGenericCommand>
 80086f6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d10a      	bne.n	8008714 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80086fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008702:	f383 8811 	msr	BASEPRI, r3
 8008706:	f3bf 8f6f 	isb	sy
 800870a:	f3bf 8f4f 	dsb	sy
 800870e:	60fb      	str	r3, [r7, #12]
}
 8008710:	bf00      	nop
 8008712:	e7fe      	b.n	8008712 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008718:	6978      	ldr	r0, [r7, #20]
 800871a:	4798      	blx	r3
}
 800871c:	bf00      	nop
 800871e:	3718      	adds	r7, #24
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}
 8008724:	20000fec 	.word	0x20000fec

08008728 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b084      	sub	sp, #16
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008730:	f107 0308 	add.w	r3, r7, #8
 8008734:	4618      	mov	r0, r3
 8008736:	f000 f857 	bl	80087e8 <prvGetNextExpireTime>
 800873a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800873c:	68bb      	ldr	r3, [r7, #8]
 800873e:	4619      	mov	r1, r3
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f000 f803 	bl	800874c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008746:	f000 f8d5 	bl	80088f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800874a:	e7f1      	b.n	8008730 <prvTimerTask+0x8>

0800874c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
 8008754:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008756:	f7ff f863 	bl	8007820 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800875a:	f107 0308 	add.w	r3, r7, #8
 800875e:	4618      	mov	r0, r3
 8008760:	f000 f866 	bl	8008830 <prvSampleTimeNow>
 8008764:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d130      	bne.n	80087ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d10a      	bne.n	8008788 <prvProcessTimerOrBlockTask+0x3c>
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	429a      	cmp	r2, r3
 8008778:	d806      	bhi.n	8008788 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800877a:	f7ff f85f 	bl	800783c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800877e:	68f9      	ldr	r1, [r7, #12]
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f7ff ff91 	bl	80086a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008786:	e024      	b.n	80087d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d008      	beq.n	80087a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800878e:	4b13      	ldr	r3, [pc, #76]	; (80087dc <prvProcessTimerOrBlockTask+0x90>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	bf0c      	ite	eq
 8008798:	2301      	moveq	r3, #1
 800879a:	2300      	movne	r3, #0
 800879c:	b2db      	uxtb	r3, r3
 800879e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80087a0:	4b0f      	ldr	r3, [pc, #60]	; (80087e0 <prvProcessTimerOrBlockTask+0x94>)
 80087a2:	6818      	ldr	r0, [r3, #0]
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	1ad3      	subs	r3, r2, r3
 80087aa:	683a      	ldr	r2, [r7, #0]
 80087ac:	4619      	mov	r1, r3
 80087ae:	f7fe fdaf 	bl	8007310 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80087b2:	f7ff f843 	bl	800783c <xTaskResumeAll>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d10a      	bne.n	80087d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80087bc:	4b09      	ldr	r3, [pc, #36]	; (80087e4 <prvProcessTimerOrBlockTask+0x98>)
 80087be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087c2:	601a      	str	r2, [r3, #0]
 80087c4:	f3bf 8f4f 	dsb	sy
 80087c8:	f3bf 8f6f 	isb	sy
}
 80087cc:	e001      	b.n	80087d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80087ce:	f7ff f835 	bl	800783c <xTaskResumeAll>
}
 80087d2:	bf00      	nop
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	bf00      	nop
 80087dc:	20000ff0 	.word	0x20000ff0
 80087e0:	20000ff4 	.word	0x20000ff4
 80087e4:	e000ed04 	.word	0xe000ed04

080087e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80087e8:	b480      	push	{r7}
 80087ea:	b085      	sub	sp, #20
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80087f0:	4b0e      	ldr	r3, [pc, #56]	; (800882c <prvGetNextExpireTime+0x44>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	bf0c      	ite	eq
 80087fa:	2301      	moveq	r3, #1
 80087fc:	2300      	movne	r3, #0
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	461a      	mov	r2, r3
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d105      	bne.n	800881a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800880e:	4b07      	ldr	r3, [pc, #28]	; (800882c <prvGetNextExpireTime+0x44>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	60fb      	str	r3, [r7, #12]
 8008818:	e001      	b.n	800881e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800881a:	2300      	movs	r3, #0
 800881c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800881e:	68fb      	ldr	r3, [r7, #12]
}
 8008820:	4618      	mov	r0, r3
 8008822:	3714      	adds	r7, #20
 8008824:	46bd      	mov	sp, r7
 8008826:	bc80      	pop	{r7}
 8008828:	4770      	bx	lr
 800882a:	bf00      	nop
 800882c:	20000fec 	.word	0x20000fec

08008830 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008838:	f7ff f89e 	bl	8007978 <xTaskGetTickCount>
 800883c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800883e:	4b0b      	ldr	r3, [pc, #44]	; (800886c <prvSampleTimeNow+0x3c>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	429a      	cmp	r2, r3
 8008846:	d205      	bcs.n	8008854 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008848:	f000 f908 	bl	8008a5c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	601a      	str	r2, [r3, #0]
 8008852:	e002      	b.n	800885a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800885a:	4a04      	ldr	r2, [pc, #16]	; (800886c <prvSampleTimeNow+0x3c>)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008860:	68fb      	ldr	r3, [r7, #12]
}
 8008862:	4618      	mov	r0, r3
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	20000ffc 	.word	0x20000ffc

08008870 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b086      	sub	sp, #24
 8008874:	af00      	add	r7, sp, #0
 8008876:	60f8      	str	r0, [r7, #12]
 8008878:	60b9      	str	r1, [r7, #8]
 800887a:	607a      	str	r2, [r7, #4]
 800887c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800887e:	2300      	movs	r3, #0
 8008880:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	68ba      	ldr	r2, [r7, #8]
 8008886:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	68fa      	ldr	r2, [r7, #12]
 800888c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800888e:	68ba      	ldr	r2, [r7, #8]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	429a      	cmp	r2, r3
 8008894:	d812      	bhi.n	80088bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	1ad2      	subs	r2, r2, r3
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	699b      	ldr	r3, [r3, #24]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d302      	bcc.n	80088aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80088a4:	2301      	movs	r3, #1
 80088a6:	617b      	str	r3, [r7, #20]
 80088a8:	e01b      	b.n	80088e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80088aa:	4b10      	ldr	r3, [pc, #64]	; (80088ec <prvInsertTimerInActiveList+0x7c>)
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	3304      	adds	r3, #4
 80088b2:	4619      	mov	r1, r3
 80088b4:	4610      	mov	r0, r2
 80088b6:	f7fd ff21 	bl	80066fc <vListInsert>
 80088ba:	e012      	b.n	80088e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80088bc:	687a      	ldr	r2, [r7, #4]
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d206      	bcs.n	80088d2 <prvInsertTimerInActiveList+0x62>
 80088c4:	68ba      	ldr	r2, [r7, #8]
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d302      	bcc.n	80088d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80088cc:	2301      	movs	r3, #1
 80088ce:	617b      	str	r3, [r7, #20]
 80088d0:	e007      	b.n	80088e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80088d2:	4b07      	ldr	r3, [pc, #28]	; (80088f0 <prvInsertTimerInActiveList+0x80>)
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	3304      	adds	r3, #4
 80088da:	4619      	mov	r1, r3
 80088dc:	4610      	mov	r0, r2
 80088de:	f7fd ff0d 	bl	80066fc <vListInsert>
		}
	}

	return xProcessTimerNow;
 80088e2:	697b      	ldr	r3, [r7, #20]
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3718      	adds	r7, #24
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}
 80088ec:	20000ff0 	.word	0x20000ff0
 80088f0:	20000fec 	.word	0x20000fec

080088f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b08e      	sub	sp, #56	; 0x38
 80088f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80088fa:	e09d      	b.n	8008a38 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	da18      	bge.n	8008934 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008902:	1d3b      	adds	r3, r7, #4
 8008904:	3304      	adds	r3, #4
 8008906:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800890a:	2b00      	cmp	r3, #0
 800890c:	d10a      	bne.n	8008924 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800890e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008912:	f383 8811 	msr	BASEPRI, r3
 8008916:	f3bf 8f6f 	isb	sy
 800891a:	f3bf 8f4f 	dsb	sy
 800891e:	61fb      	str	r3, [r7, #28]
}
 8008920:	bf00      	nop
 8008922:	e7fe      	b.n	8008922 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800892a:	6850      	ldr	r0, [r2, #4]
 800892c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800892e:	6892      	ldr	r2, [r2, #8]
 8008930:	4611      	mov	r1, r2
 8008932:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2b00      	cmp	r3, #0
 8008938:	db7e      	blt.n	8008a38 <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800893e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008940:	695b      	ldr	r3, [r3, #20]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d004      	beq.n	8008950 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008948:	3304      	adds	r3, #4
 800894a:	4618      	mov	r0, r3
 800894c:	f7fd ff0e 	bl	800676c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008950:	463b      	mov	r3, r7
 8008952:	4618      	mov	r0, r3
 8008954:	f7ff ff6c 	bl	8008830 <prvSampleTimeNow>
 8008958:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2b09      	cmp	r3, #9
 800895e:	d86a      	bhi.n	8008a36 <prvProcessReceivedCommands+0x142>
 8008960:	a201      	add	r2, pc, #4	; (adr r2, 8008968 <prvProcessReceivedCommands+0x74>)
 8008962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008966:	bf00      	nop
 8008968:	08008991 	.word	0x08008991
 800896c:	08008991 	.word	0x08008991
 8008970:	08008991 	.word	0x08008991
 8008974:	08008a39 	.word	0x08008a39
 8008978:	080089ed 	.word	0x080089ed
 800897c:	08008a25 	.word	0x08008a25
 8008980:	08008991 	.word	0x08008991
 8008984:	08008991 	.word	0x08008991
 8008988:	08008a39 	.word	0x08008a39
 800898c:	080089ed 	.word	0x080089ed
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008990:	68ba      	ldr	r2, [r7, #8]
 8008992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008994:	699b      	ldr	r3, [r3, #24]
 8008996:	18d1      	adds	r1, r2, r3
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800899c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800899e:	f7ff ff67 	bl	8008870 <prvInsertTimerInActiveList>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d047      	beq.n	8008a38 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80089a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089ae:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80089b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b2:	69db      	ldr	r3, [r3, #28]
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d13f      	bne.n	8008a38 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80089b8:	68ba      	ldr	r2, [r7, #8]
 80089ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089bc:	699b      	ldr	r3, [r3, #24]
 80089be:	441a      	add	r2, r3
 80089c0:	2300      	movs	r3, #0
 80089c2:	9300      	str	r3, [sp, #0]
 80089c4:	2300      	movs	r3, #0
 80089c6:	2100      	movs	r1, #0
 80089c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089ca:	f7ff fe1f 	bl	800860c <xTimerGenericCommand>
 80089ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80089d0:	6a3b      	ldr	r3, [r7, #32]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d130      	bne.n	8008a38 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80089d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089da:	f383 8811 	msr	BASEPRI, r3
 80089de:	f3bf 8f6f 	isb	sy
 80089e2:	f3bf 8f4f 	dsb	sy
 80089e6:	61bb      	str	r3, [r7, #24]
}
 80089e8:	bf00      	nop
 80089ea:	e7fe      	b.n	80089ea <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80089ec:	68ba      	ldr	r2, [r7, #8]
 80089ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80089f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f4:	699b      	ldr	r3, [r3, #24]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d10a      	bne.n	8008a10 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80089fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089fe:	f383 8811 	msr	BASEPRI, r3
 8008a02:	f3bf 8f6f 	isb	sy
 8008a06:	f3bf 8f4f 	dsb	sy
 8008a0a:	617b      	str	r3, [r7, #20]
}
 8008a0c:	bf00      	nop
 8008a0e:	e7fe      	b.n	8008a0e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a12:	699a      	ldr	r2, [r3, #24]
 8008a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a16:	18d1      	adds	r1, r2, r3
 8008a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a1e:	f7ff ff27 	bl	8008870 <prvInsertTimerInActiveList>
					break;
 8008a22:	e009      	b.n	8008a38 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a26:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d104      	bne.n	8008a38 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8008a2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a30:	f000 fb68 	bl	8009104 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008a34:	e000      	b.n	8008a38 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8008a36:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a38:	4b07      	ldr	r3, [pc, #28]	; (8008a58 <prvProcessReceivedCommands+0x164>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	1d39      	adds	r1, r7, #4
 8008a3e:	2200      	movs	r2, #0
 8008a40:	4618      	mov	r0, r3
 8008a42:	f7fe f993 	bl	8006d6c <xQueueReceive>
 8008a46:	4603      	mov	r3, r0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	f47f af57 	bne.w	80088fc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008a4e:	bf00      	nop
 8008a50:	bf00      	nop
 8008a52:	3730      	adds	r7, #48	; 0x30
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	20000ff4 	.word	0x20000ff4

08008a5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b088      	sub	sp, #32
 8008a60:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a62:	e045      	b.n	8008af0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a64:	4b2c      	ldr	r3, [pc, #176]	; (8008b18 <prvSwitchTimerLists+0xbc>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a6e:	4b2a      	ldr	r3, [pc, #168]	; (8008b18 <prvSwitchTimerLists+0xbc>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	3304      	adds	r3, #4
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f7fd fe75 	bl	800676c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a86:	68f8      	ldr	r0, [r7, #12]
 8008a88:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	69db      	ldr	r3, [r3, #28]
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d12e      	bne.n	8008af0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	699b      	ldr	r3, [r3, #24]
 8008a96:	693a      	ldr	r2, [r7, #16]
 8008a98:	4413      	add	r3, r2
 8008a9a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008a9c:	68ba      	ldr	r2, [r7, #8]
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d90e      	bls.n	8008ac2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	68ba      	ldr	r2, [r7, #8]
 8008aa8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	68fa      	ldr	r2, [r7, #12]
 8008aae:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008ab0:	4b19      	ldr	r3, [pc, #100]	; (8008b18 <prvSwitchTimerLists+0xbc>)
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	3304      	adds	r3, #4
 8008ab8:	4619      	mov	r1, r3
 8008aba:	4610      	mov	r0, r2
 8008abc:	f7fd fe1e 	bl	80066fc <vListInsert>
 8008ac0:	e016      	b.n	8008af0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	9300      	str	r3, [sp, #0]
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	693a      	ldr	r2, [r7, #16]
 8008aca:	2100      	movs	r1, #0
 8008acc:	68f8      	ldr	r0, [r7, #12]
 8008ace:	f7ff fd9d 	bl	800860c <xTimerGenericCommand>
 8008ad2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d10a      	bne.n	8008af0 <prvSwitchTimerLists+0x94>
	__asm volatile
 8008ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ade:	f383 8811 	msr	BASEPRI, r3
 8008ae2:	f3bf 8f6f 	isb	sy
 8008ae6:	f3bf 8f4f 	dsb	sy
 8008aea:	603b      	str	r3, [r7, #0]
}
 8008aec:	bf00      	nop
 8008aee:	e7fe      	b.n	8008aee <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008af0:	4b09      	ldr	r3, [pc, #36]	; (8008b18 <prvSwitchTimerLists+0xbc>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d1b4      	bne.n	8008a64 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008afa:	4b07      	ldr	r3, [pc, #28]	; (8008b18 <prvSwitchTimerLists+0xbc>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008b00:	4b06      	ldr	r3, [pc, #24]	; (8008b1c <prvSwitchTimerLists+0xc0>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a04      	ldr	r2, [pc, #16]	; (8008b18 <prvSwitchTimerLists+0xbc>)
 8008b06:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008b08:	4a04      	ldr	r2, [pc, #16]	; (8008b1c <prvSwitchTimerLists+0xc0>)
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	6013      	str	r3, [r2, #0]
}
 8008b0e:	bf00      	nop
 8008b10:	3718      	adds	r7, #24
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	20000fec 	.word	0x20000fec
 8008b1c:	20000ff0 	.word	0x20000ff0

08008b20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008b26:	f000 f929 	bl	8008d7c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008b2a:	4b15      	ldr	r3, [pc, #84]	; (8008b80 <prvCheckForValidListAndQueue+0x60>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d120      	bne.n	8008b74 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008b32:	4814      	ldr	r0, [pc, #80]	; (8008b84 <prvCheckForValidListAndQueue+0x64>)
 8008b34:	f7fd fd94 	bl	8006660 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008b38:	4813      	ldr	r0, [pc, #76]	; (8008b88 <prvCheckForValidListAndQueue+0x68>)
 8008b3a:	f7fd fd91 	bl	8006660 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008b3e:	4b13      	ldr	r3, [pc, #76]	; (8008b8c <prvCheckForValidListAndQueue+0x6c>)
 8008b40:	4a10      	ldr	r2, [pc, #64]	; (8008b84 <prvCheckForValidListAndQueue+0x64>)
 8008b42:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008b44:	4b12      	ldr	r3, [pc, #72]	; (8008b90 <prvCheckForValidListAndQueue+0x70>)
 8008b46:	4a10      	ldr	r2, [pc, #64]	; (8008b88 <prvCheckForValidListAndQueue+0x68>)
 8008b48:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	9300      	str	r3, [sp, #0]
 8008b4e:	4b11      	ldr	r3, [pc, #68]	; (8008b94 <prvCheckForValidListAndQueue+0x74>)
 8008b50:	4a11      	ldr	r2, [pc, #68]	; (8008b98 <prvCheckForValidListAndQueue+0x78>)
 8008b52:	2110      	movs	r1, #16
 8008b54:	200a      	movs	r0, #10
 8008b56:	f7fd fe9b 	bl	8006890 <xQueueGenericCreateStatic>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	4a08      	ldr	r2, [pc, #32]	; (8008b80 <prvCheckForValidListAndQueue+0x60>)
 8008b5e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008b60:	4b07      	ldr	r3, [pc, #28]	; (8008b80 <prvCheckForValidListAndQueue+0x60>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d005      	beq.n	8008b74 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008b68:	4b05      	ldr	r3, [pc, #20]	; (8008b80 <prvCheckForValidListAndQueue+0x60>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	490b      	ldr	r1, [pc, #44]	; (8008b9c <prvCheckForValidListAndQueue+0x7c>)
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f7fe fba6 	bl	80072c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b74:	f000 f932 	bl	8008ddc <vPortExitCritical>
}
 8008b78:	bf00      	nop
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	20000ff4 	.word	0x20000ff4
 8008b84:	20000fc4 	.word	0x20000fc4
 8008b88:	20000fd8 	.word	0x20000fd8
 8008b8c:	20000fec 	.word	0x20000fec
 8008b90:	20000ff0 	.word	0x20000ff0
 8008b94:	200010a0 	.word	0x200010a0
 8008b98:	20001000 	.word	0x20001000
 8008b9c:	08009620 	.word	0x08009620

08008ba0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b085      	sub	sp, #20
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	60b9      	str	r1, [r7, #8]
 8008baa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	3b04      	subs	r3, #4
 8008bb0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008bb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	3b04      	subs	r3, #4
 8008bbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	f023 0201 	bic.w	r2, r3, #1
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	3b04      	subs	r3, #4
 8008bce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008bd0:	4a08      	ldr	r2, [pc, #32]	; (8008bf4 <pxPortInitialiseStack+0x54>)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	3b14      	subs	r3, #20
 8008bda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	3b20      	subs	r3, #32
 8008be6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008be8:	68fb      	ldr	r3, [r7, #12]
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3714      	adds	r7, #20
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bc80      	pop	{r7}
 8008bf2:	4770      	bx	lr
 8008bf4:	08008bf9 	.word	0x08008bf9

08008bf8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008c02:	4b12      	ldr	r3, [pc, #72]	; (8008c4c <prvTaskExitError+0x54>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c0a:	d00a      	beq.n	8008c22 <prvTaskExitError+0x2a>
	__asm volatile
 8008c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c10:	f383 8811 	msr	BASEPRI, r3
 8008c14:	f3bf 8f6f 	isb	sy
 8008c18:	f3bf 8f4f 	dsb	sy
 8008c1c:	60fb      	str	r3, [r7, #12]
}
 8008c1e:	bf00      	nop
 8008c20:	e7fe      	b.n	8008c20 <prvTaskExitError+0x28>
	__asm volatile
 8008c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c26:	f383 8811 	msr	BASEPRI, r3
 8008c2a:	f3bf 8f6f 	isb	sy
 8008c2e:	f3bf 8f4f 	dsb	sy
 8008c32:	60bb      	str	r3, [r7, #8]
}
 8008c34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008c36:	bf00      	nop
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d0fc      	beq.n	8008c38 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008c3e:	bf00      	nop
 8008c40:	bf00      	nop
 8008c42:	3714      	adds	r7, #20
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bc80      	pop	{r7}
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop
 8008c4c:	2000000c 	.word	0x2000000c

08008c50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008c50:	4b07      	ldr	r3, [pc, #28]	; (8008c70 <pxCurrentTCBConst2>)
 8008c52:	6819      	ldr	r1, [r3, #0]
 8008c54:	6808      	ldr	r0, [r1, #0]
 8008c56:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008c5a:	f380 8809 	msr	PSP, r0
 8008c5e:	f3bf 8f6f 	isb	sy
 8008c62:	f04f 0000 	mov.w	r0, #0
 8008c66:	f380 8811 	msr	BASEPRI, r0
 8008c6a:	f04e 0e0d 	orr.w	lr, lr, #13
 8008c6e:	4770      	bx	lr

08008c70 <pxCurrentTCBConst2>:
 8008c70:	20000ac4 	.word	0x20000ac4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008c74:	bf00      	nop
 8008c76:	bf00      	nop

08008c78 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008c78:	4806      	ldr	r0, [pc, #24]	; (8008c94 <prvPortStartFirstTask+0x1c>)
 8008c7a:	6800      	ldr	r0, [r0, #0]
 8008c7c:	6800      	ldr	r0, [r0, #0]
 8008c7e:	f380 8808 	msr	MSP, r0
 8008c82:	b662      	cpsie	i
 8008c84:	b661      	cpsie	f
 8008c86:	f3bf 8f4f 	dsb	sy
 8008c8a:	f3bf 8f6f 	isb	sy
 8008c8e:	df00      	svc	0
 8008c90:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008c92:	bf00      	nop
 8008c94:	e000ed08 	.word	0xe000ed08

08008c98 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008c9e:	4b32      	ldr	r3, [pc, #200]	; (8008d68 <xPortStartScheduler+0xd0>)
 8008ca0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	22ff      	movs	r2, #255	; 0xff
 8008cae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008cb8:	78fb      	ldrb	r3, [r7, #3]
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008cc0:	b2da      	uxtb	r2, r3
 8008cc2:	4b2a      	ldr	r3, [pc, #168]	; (8008d6c <xPortStartScheduler+0xd4>)
 8008cc4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008cc6:	4b2a      	ldr	r3, [pc, #168]	; (8008d70 <xPortStartScheduler+0xd8>)
 8008cc8:	2207      	movs	r2, #7
 8008cca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ccc:	e009      	b.n	8008ce2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008cce:	4b28      	ldr	r3, [pc, #160]	; (8008d70 <xPortStartScheduler+0xd8>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	3b01      	subs	r3, #1
 8008cd4:	4a26      	ldr	r2, [pc, #152]	; (8008d70 <xPortStartScheduler+0xd8>)
 8008cd6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008cd8:	78fb      	ldrb	r3, [r7, #3]
 8008cda:	b2db      	uxtb	r3, r3
 8008cdc:	005b      	lsls	r3, r3, #1
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ce2:	78fb      	ldrb	r3, [r7, #3]
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cea:	2b80      	cmp	r3, #128	; 0x80
 8008cec:	d0ef      	beq.n	8008cce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008cee:	4b20      	ldr	r3, [pc, #128]	; (8008d70 <xPortStartScheduler+0xd8>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f1c3 0307 	rsb	r3, r3, #7
 8008cf6:	2b04      	cmp	r3, #4
 8008cf8:	d00a      	beq.n	8008d10 <xPortStartScheduler+0x78>
	__asm volatile
 8008cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cfe:	f383 8811 	msr	BASEPRI, r3
 8008d02:	f3bf 8f6f 	isb	sy
 8008d06:	f3bf 8f4f 	dsb	sy
 8008d0a:	60bb      	str	r3, [r7, #8]
}
 8008d0c:	bf00      	nop
 8008d0e:	e7fe      	b.n	8008d0e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008d10:	4b17      	ldr	r3, [pc, #92]	; (8008d70 <xPortStartScheduler+0xd8>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	021b      	lsls	r3, r3, #8
 8008d16:	4a16      	ldr	r2, [pc, #88]	; (8008d70 <xPortStartScheduler+0xd8>)
 8008d18:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008d1a:	4b15      	ldr	r3, [pc, #84]	; (8008d70 <xPortStartScheduler+0xd8>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d22:	4a13      	ldr	r2, [pc, #76]	; (8008d70 <xPortStartScheduler+0xd8>)
 8008d24:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	b2da      	uxtb	r2, r3
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008d2e:	4b11      	ldr	r3, [pc, #68]	; (8008d74 <xPortStartScheduler+0xdc>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a10      	ldr	r2, [pc, #64]	; (8008d74 <xPortStartScheduler+0xdc>)
 8008d34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008d38:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008d3a:	4b0e      	ldr	r3, [pc, #56]	; (8008d74 <xPortStartScheduler+0xdc>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a0d      	ldr	r2, [pc, #52]	; (8008d74 <xPortStartScheduler+0xdc>)
 8008d40:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008d44:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008d46:	f000 f8b9 	bl	8008ebc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008d4a:	4b0b      	ldr	r3, [pc, #44]	; (8008d78 <xPortStartScheduler+0xe0>)
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008d50:	f7ff ff92 	bl	8008c78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008d54:	f7fe fedc 	bl	8007b10 <vTaskSwitchContext>
	prvTaskExitError();
 8008d58:	f7ff ff4e 	bl	8008bf8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008d5c:	2300      	movs	r3, #0
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	e000e400 	.word	0xe000e400
 8008d6c:	200010f0 	.word	0x200010f0
 8008d70:	200010f4 	.word	0x200010f4
 8008d74:	e000ed20 	.word	0xe000ed20
 8008d78:	2000000c 	.word	0x2000000c

08008d7c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
	__asm volatile
 8008d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d86:	f383 8811 	msr	BASEPRI, r3
 8008d8a:	f3bf 8f6f 	isb	sy
 8008d8e:	f3bf 8f4f 	dsb	sy
 8008d92:	607b      	str	r3, [r7, #4]
}
 8008d94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008d96:	4b0f      	ldr	r3, [pc, #60]	; (8008dd4 <vPortEnterCritical+0x58>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	4a0d      	ldr	r2, [pc, #52]	; (8008dd4 <vPortEnterCritical+0x58>)
 8008d9e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008da0:	4b0c      	ldr	r3, [pc, #48]	; (8008dd4 <vPortEnterCritical+0x58>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d10f      	bne.n	8008dc8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008da8:	4b0b      	ldr	r3, [pc, #44]	; (8008dd8 <vPortEnterCritical+0x5c>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d00a      	beq.n	8008dc8 <vPortEnterCritical+0x4c>
	__asm volatile
 8008db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db6:	f383 8811 	msr	BASEPRI, r3
 8008dba:	f3bf 8f6f 	isb	sy
 8008dbe:	f3bf 8f4f 	dsb	sy
 8008dc2:	603b      	str	r3, [r7, #0]
}
 8008dc4:	bf00      	nop
 8008dc6:	e7fe      	b.n	8008dc6 <vPortEnterCritical+0x4a>
	}
}
 8008dc8:	bf00      	nop
 8008dca:	370c      	adds	r7, #12
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bc80      	pop	{r7}
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop
 8008dd4:	2000000c 	.word	0x2000000c
 8008dd8:	e000ed04 	.word	0xe000ed04

08008ddc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008de2:	4b11      	ldr	r3, [pc, #68]	; (8008e28 <vPortExitCritical+0x4c>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d10a      	bne.n	8008e00 <vPortExitCritical+0x24>
	__asm volatile
 8008dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dee:	f383 8811 	msr	BASEPRI, r3
 8008df2:	f3bf 8f6f 	isb	sy
 8008df6:	f3bf 8f4f 	dsb	sy
 8008dfa:	607b      	str	r3, [r7, #4]
}
 8008dfc:	bf00      	nop
 8008dfe:	e7fe      	b.n	8008dfe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008e00:	4b09      	ldr	r3, [pc, #36]	; (8008e28 <vPortExitCritical+0x4c>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	3b01      	subs	r3, #1
 8008e06:	4a08      	ldr	r2, [pc, #32]	; (8008e28 <vPortExitCritical+0x4c>)
 8008e08:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008e0a:	4b07      	ldr	r3, [pc, #28]	; (8008e28 <vPortExitCritical+0x4c>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d105      	bne.n	8008e1e <vPortExitCritical+0x42>
 8008e12:	2300      	movs	r3, #0
 8008e14:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	f383 8811 	msr	BASEPRI, r3
}
 8008e1c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008e1e:	bf00      	nop
 8008e20:	370c      	adds	r7, #12
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bc80      	pop	{r7}
 8008e26:	4770      	bx	lr
 8008e28:	2000000c 	.word	0x2000000c
 8008e2c:	00000000 	.word	0x00000000

08008e30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008e30:	f3ef 8009 	mrs	r0, PSP
 8008e34:	f3bf 8f6f 	isb	sy
 8008e38:	4b0d      	ldr	r3, [pc, #52]	; (8008e70 <pxCurrentTCBConst>)
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008e40:	6010      	str	r0, [r2, #0]
 8008e42:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008e46:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008e4a:	f380 8811 	msr	BASEPRI, r0
 8008e4e:	f7fe fe5f 	bl	8007b10 <vTaskSwitchContext>
 8008e52:	f04f 0000 	mov.w	r0, #0
 8008e56:	f380 8811 	msr	BASEPRI, r0
 8008e5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008e5e:	6819      	ldr	r1, [r3, #0]
 8008e60:	6808      	ldr	r0, [r1, #0]
 8008e62:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008e66:	f380 8809 	msr	PSP, r0
 8008e6a:	f3bf 8f6f 	isb	sy
 8008e6e:	4770      	bx	lr

08008e70 <pxCurrentTCBConst>:
 8008e70:	20000ac4 	.word	0x20000ac4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008e74:	bf00      	nop
 8008e76:	bf00      	nop

08008e78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
	__asm volatile
 8008e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e82:	f383 8811 	msr	BASEPRI, r3
 8008e86:	f3bf 8f6f 	isb	sy
 8008e8a:	f3bf 8f4f 	dsb	sy
 8008e8e:	607b      	str	r3, [r7, #4]
}
 8008e90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008e92:	f7fe fd7f 	bl	8007994 <xTaskIncrementTick>
 8008e96:	4603      	mov	r3, r0
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d003      	beq.n	8008ea4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008e9c:	4b06      	ldr	r3, [pc, #24]	; (8008eb8 <SysTick_Handler+0x40>)
 8008e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ea2:	601a      	str	r2, [r3, #0]
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	f383 8811 	msr	BASEPRI, r3
}
 8008eae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008eb0:	bf00      	nop
 8008eb2:	3708      	adds	r7, #8
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	e000ed04 	.word	0xe000ed04

08008ebc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008ec0:	4b0a      	ldr	r3, [pc, #40]	; (8008eec <vPortSetupTimerInterrupt+0x30>)
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008ec6:	4b0a      	ldr	r3, [pc, #40]	; (8008ef0 <vPortSetupTimerInterrupt+0x34>)
 8008ec8:	2200      	movs	r2, #0
 8008eca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008ecc:	4b09      	ldr	r3, [pc, #36]	; (8008ef4 <vPortSetupTimerInterrupt+0x38>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a09      	ldr	r2, [pc, #36]	; (8008ef8 <vPortSetupTimerInterrupt+0x3c>)
 8008ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ed6:	099b      	lsrs	r3, r3, #6
 8008ed8:	4a08      	ldr	r2, [pc, #32]	; (8008efc <vPortSetupTimerInterrupt+0x40>)
 8008eda:	3b01      	subs	r3, #1
 8008edc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008ede:	4b03      	ldr	r3, [pc, #12]	; (8008eec <vPortSetupTimerInterrupt+0x30>)
 8008ee0:	2207      	movs	r2, #7
 8008ee2:	601a      	str	r2, [r3, #0]
}
 8008ee4:	bf00      	nop
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bc80      	pop	{r7}
 8008eea:	4770      	bx	lr
 8008eec:	e000e010 	.word	0xe000e010
 8008ef0:	e000e018 	.word	0xe000e018
 8008ef4:	20000000 	.word	0x20000000
 8008ef8:	10624dd3 	.word	0x10624dd3
 8008efc:	e000e014 	.word	0xe000e014

08008f00 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008f00:	b480      	push	{r7}
 8008f02:	b085      	sub	sp, #20
 8008f04:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008f06:	f3ef 8305 	mrs	r3, IPSR
 8008f0a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2b0f      	cmp	r3, #15
 8008f10:	d914      	bls.n	8008f3c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008f12:	4a16      	ldr	r2, [pc, #88]	; (8008f6c <vPortValidateInterruptPriority+0x6c>)
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	4413      	add	r3, r2
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008f1c:	4b14      	ldr	r3, [pc, #80]	; (8008f70 <vPortValidateInterruptPriority+0x70>)
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	7afa      	ldrb	r2, [r7, #11]
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d20a      	bcs.n	8008f3c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f2a:	f383 8811 	msr	BASEPRI, r3
 8008f2e:	f3bf 8f6f 	isb	sy
 8008f32:	f3bf 8f4f 	dsb	sy
 8008f36:	607b      	str	r3, [r7, #4]
}
 8008f38:	bf00      	nop
 8008f3a:	e7fe      	b.n	8008f3a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008f3c:	4b0d      	ldr	r3, [pc, #52]	; (8008f74 <vPortValidateInterruptPriority+0x74>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008f44:	4b0c      	ldr	r3, [pc, #48]	; (8008f78 <vPortValidateInterruptPriority+0x78>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d90a      	bls.n	8008f62 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f50:	f383 8811 	msr	BASEPRI, r3
 8008f54:	f3bf 8f6f 	isb	sy
 8008f58:	f3bf 8f4f 	dsb	sy
 8008f5c:	603b      	str	r3, [r7, #0]
}
 8008f5e:	bf00      	nop
 8008f60:	e7fe      	b.n	8008f60 <vPortValidateInterruptPriority+0x60>
	}
 8008f62:	bf00      	nop
 8008f64:	3714      	adds	r7, #20
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bc80      	pop	{r7}
 8008f6a:	4770      	bx	lr
 8008f6c:	e000e3f0 	.word	0xe000e3f0
 8008f70:	200010f0 	.word	0x200010f0
 8008f74:	e000ed0c 	.word	0xe000ed0c
 8008f78:	200010f4 	.word	0x200010f4

08008f7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b08a      	sub	sp, #40	; 0x28
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008f84:	2300      	movs	r3, #0
 8008f86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008f88:	f7fe fc4a 	bl	8007820 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008f8c:	4b58      	ldr	r3, [pc, #352]	; (80090f0 <pvPortMalloc+0x174>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d101      	bne.n	8008f98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008f94:	f000 f910 	bl	80091b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008f98:	4b56      	ldr	r3, [pc, #344]	; (80090f4 <pvPortMalloc+0x178>)
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	4013      	ands	r3, r2
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	f040 808e 	bne.w	80090c2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d01d      	beq.n	8008fe8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008fac:	2208      	movs	r2, #8
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f003 0307 	and.w	r3, r3, #7
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d014      	beq.n	8008fe8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f023 0307 	bic.w	r3, r3, #7
 8008fc4:	3308      	adds	r3, #8
 8008fc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f003 0307 	and.w	r3, r3, #7
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d00a      	beq.n	8008fe8 <pvPortMalloc+0x6c>
	__asm volatile
 8008fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd6:	f383 8811 	msr	BASEPRI, r3
 8008fda:	f3bf 8f6f 	isb	sy
 8008fde:	f3bf 8f4f 	dsb	sy
 8008fe2:	617b      	str	r3, [r7, #20]
}
 8008fe4:	bf00      	nop
 8008fe6:	e7fe      	b.n	8008fe6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d069      	beq.n	80090c2 <pvPortMalloc+0x146>
 8008fee:	4b42      	ldr	r3, [pc, #264]	; (80090f8 <pvPortMalloc+0x17c>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d864      	bhi.n	80090c2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008ff8:	4b40      	ldr	r3, [pc, #256]	; (80090fc <pvPortMalloc+0x180>)
 8008ffa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008ffc:	4b3f      	ldr	r3, [pc, #252]	; (80090fc <pvPortMalloc+0x180>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009002:	e004      	b.n	800900e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009006:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800900e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	429a      	cmp	r2, r3
 8009016:	d903      	bls.n	8009020 <pvPortMalloc+0xa4>
 8009018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d1f1      	bne.n	8009004 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009020:	4b33      	ldr	r3, [pc, #204]	; (80090f0 <pvPortMalloc+0x174>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009026:	429a      	cmp	r2, r3
 8009028:	d04b      	beq.n	80090c2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800902a:	6a3b      	ldr	r3, [r7, #32]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	2208      	movs	r2, #8
 8009030:	4413      	add	r3, r2
 8009032:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009036:	681a      	ldr	r2, [r3, #0]
 8009038:	6a3b      	ldr	r3, [r7, #32]
 800903a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800903c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903e:	685a      	ldr	r2, [r3, #4]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	1ad2      	subs	r2, r2, r3
 8009044:	2308      	movs	r3, #8
 8009046:	005b      	lsls	r3, r3, #1
 8009048:	429a      	cmp	r2, r3
 800904a:	d91f      	bls.n	800908c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800904c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	4413      	add	r3, r2
 8009052:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009054:	69bb      	ldr	r3, [r7, #24]
 8009056:	f003 0307 	and.w	r3, r3, #7
 800905a:	2b00      	cmp	r3, #0
 800905c:	d00a      	beq.n	8009074 <pvPortMalloc+0xf8>
	__asm volatile
 800905e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009062:	f383 8811 	msr	BASEPRI, r3
 8009066:	f3bf 8f6f 	isb	sy
 800906a:	f3bf 8f4f 	dsb	sy
 800906e:	613b      	str	r3, [r7, #16]
}
 8009070:	bf00      	nop
 8009072:	e7fe      	b.n	8009072 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009076:	685a      	ldr	r2, [r3, #4]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	1ad2      	subs	r2, r2, r3
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009086:	69b8      	ldr	r0, [r7, #24]
 8009088:	f000 f8f8 	bl	800927c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800908c:	4b1a      	ldr	r3, [pc, #104]	; (80090f8 <pvPortMalloc+0x17c>)
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	1ad3      	subs	r3, r2, r3
 8009096:	4a18      	ldr	r2, [pc, #96]	; (80090f8 <pvPortMalloc+0x17c>)
 8009098:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800909a:	4b17      	ldr	r3, [pc, #92]	; (80090f8 <pvPortMalloc+0x17c>)
 800909c:	681a      	ldr	r2, [r3, #0]
 800909e:	4b18      	ldr	r3, [pc, #96]	; (8009100 <pvPortMalloc+0x184>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d203      	bcs.n	80090ae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80090a6:	4b14      	ldr	r3, [pc, #80]	; (80090f8 <pvPortMalloc+0x17c>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a15      	ldr	r2, [pc, #84]	; (8009100 <pvPortMalloc+0x184>)
 80090ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80090ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b0:	685a      	ldr	r2, [r3, #4]
 80090b2:	4b10      	ldr	r3, [pc, #64]	; (80090f4 <pvPortMalloc+0x178>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	431a      	orrs	r2, r3
 80090b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80090bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090be:	2200      	movs	r2, #0
 80090c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80090c2:	f7fe fbbb 	bl	800783c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80090c6:	69fb      	ldr	r3, [r7, #28]
 80090c8:	f003 0307 	and.w	r3, r3, #7
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d00a      	beq.n	80090e6 <pvPortMalloc+0x16a>
	__asm volatile
 80090d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d4:	f383 8811 	msr	BASEPRI, r3
 80090d8:	f3bf 8f6f 	isb	sy
 80090dc:	f3bf 8f4f 	dsb	sy
 80090e0:	60fb      	str	r3, [r7, #12]
}
 80090e2:	bf00      	nop
 80090e4:	e7fe      	b.n	80090e4 <pvPortMalloc+0x168>
	return pvReturn;
 80090e6:	69fb      	ldr	r3, [r7, #28]
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3728      	adds	r7, #40	; 0x28
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}
 80090f0:	20002500 	.word	0x20002500
 80090f4:	2000250c 	.word	0x2000250c
 80090f8:	20002504 	.word	0x20002504
 80090fc:	200024f8 	.word	0x200024f8
 8009100:	20002508 	.word	0x20002508

08009104 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b086      	sub	sp, #24
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d048      	beq.n	80091a8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009116:	2308      	movs	r3, #8
 8009118:	425b      	negs	r3, r3
 800911a:	697a      	ldr	r2, [r7, #20]
 800911c:	4413      	add	r3, r2
 800911e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	685a      	ldr	r2, [r3, #4]
 8009128:	4b21      	ldr	r3, [pc, #132]	; (80091b0 <vPortFree+0xac>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4013      	ands	r3, r2
 800912e:	2b00      	cmp	r3, #0
 8009130:	d10a      	bne.n	8009148 <vPortFree+0x44>
	__asm volatile
 8009132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009136:	f383 8811 	msr	BASEPRI, r3
 800913a:	f3bf 8f6f 	isb	sy
 800913e:	f3bf 8f4f 	dsb	sy
 8009142:	60fb      	str	r3, [r7, #12]
}
 8009144:	bf00      	nop
 8009146:	e7fe      	b.n	8009146 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d00a      	beq.n	8009166 <vPortFree+0x62>
	__asm volatile
 8009150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009154:	f383 8811 	msr	BASEPRI, r3
 8009158:	f3bf 8f6f 	isb	sy
 800915c:	f3bf 8f4f 	dsb	sy
 8009160:	60bb      	str	r3, [r7, #8]
}
 8009162:	bf00      	nop
 8009164:	e7fe      	b.n	8009164 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	685a      	ldr	r2, [r3, #4]
 800916a:	4b11      	ldr	r3, [pc, #68]	; (80091b0 <vPortFree+0xac>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4013      	ands	r3, r2
 8009170:	2b00      	cmp	r3, #0
 8009172:	d019      	beq.n	80091a8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d115      	bne.n	80091a8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	685a      	ldr	r2, [r3, #4]
 8009180:	4b0b      	ldr	r3, [pc, #44]	; (80091b0 <vPortFree+0xac>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	43db      	mvns	r3, r3
 8009186:	401a      	ands	r2, r3
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800918c:	f7fe fb48 	bl	8007820 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	685a      	ldr	r2, [r3, #4]
 8009194:	4b07      	ldr	r3, [pc, #28]	; (80091b4 <vPortFree+0xb0>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4413      	add	r3, r2
 800919a:	4a06      	ldr	r2, [pc, #24]	; (80091b4 <vPortFree+0xb0>)
 800919c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800919e:	6938      	ldr	r0, [r7, #16]
 80091a0:	f000 f86c 	bl	800927c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80091a4:	f7fe fb4a 	bl	800783c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80091a8:	bf00      	nop
 80091aa:	3718      	adds	r7, #24
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}
 80091b0:	2000250c 	.word	0x2000250c
 80091b4:	20002504 	.word	0x20002504

080091b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80091b8:	b480      	push	{r7}
 80091ba:	b085      	sub	sp, #20
 80091bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80091be:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80091c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80091c4:	4b27      	ldr	r3, [pc, #156]	; (8009264 <prvHeapInit+0xac>)
 80091c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f003 0307 	and.w	r3, r3, #7
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d00c      	beq.n	80091ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	3307      	adds	r3, #7
 80091d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f023 0307 	bic.w	r3, r3, #7
 80091de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80091e0:	68ba      	ldr	r2, [r7, #8]
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	1ad3      	subs	r3, r2, r3
 80091e6:	4a1f      	ldr	r2, [pc, #124]	; (8009264 <prvHeapInit+0xac>)
 80091e8:	4413      	add	r3, r2
 80091ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80091f0:	4a1d      	ldr	r2, [pc, #116]	; (8009268 <prvHeapInit+0xb0>)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80091f6:	4b1c      	ldr	r3, [pc, #112]	; (8009268 <prvHeapInit+0xb0>)
 80091f8:	2200      	movs	r2, #0
 80091fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	68ba      	ldr	r2, [r7, #8]
 8009200:	4413      	add	r3, r2
 8009202:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009204:	2208      	movs	r2, #8
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	1a9b      	subs	r3, r3, r2
 800920a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f023 0307 	bic.w	r3, r3, #7
 8009212:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	4a15      	ldr	r2, [pc, #84]	; (800926c <prvHeapInit+0xb4>)
 8009218:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800921a:	4b14      	ldr	r3, [pc, #80]	; (800926c <prvHeapInit+0xb4>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2200      	movs	r2, #0
 8009220:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009222:	4b12      	ldr	r3, [pc, #72]	; (800926c <prvHeapInit+0xb4>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	2200      	movs	r2, #0
 8009228:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	68fa      	ldr	r2, [r7, #12]
 8009232:	1ad2      	subs	r2, r2, r3
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009238:	4b0c      	ldr	r3, [pc, #48]	; (800926c <prvHeapInit+0xb4>)
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	4a0a      	ldr	r2, [pc, #40]	; (8009270 <prvHeapInit+0xb8>)
 8009246:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	4a09      	ldr	r2, [pc, #36]	; (8009274 <prvHeapInit+0xbc>)
 800924e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009250:	4b09      	ldr	r3, [pc, #36]	; (8009278 <prvHeapInit+0xc0>)
 8009252:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009256:	601a      	str	r2, [r3, #0]
}
 8009258:	bf00      	nop
 800925a:	3714      	adds	r7, #20
 800925c:	46bd      	mov	sp, r7
 800925e:	bc80      	pop	{r7}
 8009260:	4770      	bx	lr
 8009262:	bf00      	nop
 8009264:	200010f8 	.word	0x200010f8
 8009268:	200024f8 	.word	0x200024f8
 800926c:	20002500 	.word	0x20002500
 8009270:	20002508 	.word	0x20002508
 8009274:	20002504 	.word	0x20002504
 8009278:	2000250c 	.word	0x2000250c

0800927c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800927c:	b480      	push	{r7}
 800927e:	b085      	sub	sp, #20
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009284:	4b27      	ldr	r3, [pc, #156]	; (8009324 <prvInsertBlockIntoFreeList+0xa8>)
 8009286:	60fb      	str	r3, [r7, #12]
 8009288:	e002      	b.n	8009290 <prvInsertBlockIntoFreeList+0x14>
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	60fb      	str	r3, [r7, #12]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	687a      	ldr	r2, [r7, #4]
 8009296:	429a      	cmp	r2, r3
 8009298:	d8f7      	bhi.n	800928a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	68ba      	ldr	r2, [r7, #8]
 80092a4:	4413      	add	r3, r2
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d108      	bne.n	80092be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	685a      	ldr	r2, [r3, #4]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	441a      	add	r2, r3
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	68ba      	ldr	r2, [r7, #8]
 80092c8:	441a      	add	r2, r3
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d118      	bne.n	8009304 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	4b14      	ldr	r3, [pc, #80]	; (8009328 <prvInsertBlockIntoFreeList+0xac>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	429a      	cmp	r2, r3
 80092dc:	d00d      	beq.n	80092fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	685a      	ldr	r2, [r3, #4]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	441a      	add	r2, r3
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	601a      	str	r2, [r3, #0]
 80092f8:	e008      	b.n	800930c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80092fa:	4b0b      	ldr	r3, [pc, #44]	; (8009328 <prvInsertBlockIntoFreeList+0xac>)
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	601a      	str	r2, [r3, #0]
 8009302:	e003      	b.n	800930c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800930c:	68fa      	ldr	r2, [r7, #12]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	429a      	cmp	r2, r3
 8009312:	d002      	beq.n	800931a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800931a:	bf00      	nop
 800931c:	3714      	adds	r7, #20
 800931e:	46bd      	mov	sp, r7
 8009320:	bc80      	pop	{r7}
 8009322:	4770      	bx	lr
 8009324:	200024f8 	.word	0x200024f8
 8009328:	20002500 	.word	0x20002500

0800932c <memset>:
 800932c:	4603      	mov	r3, r0
 800932e:	4402      	add	r2, r0
 8009330:	4293      	cmp	r3, r2
 8009332:	d100      	bne.n	8009336 <memset+0xa>
 8009334:	4770      	bx	lr
 8009336:	f803 1b01 	strb.w	r1, [r3], #1
 800933a:	e7f9      	b.n	8009330 <memset+0x4>

0800933c <_reclaim_reent>:
 800933c:	4b29      	ldr	r3, [pc, #164]	; (80093e4 <_reclaim_reent+0xa8>)
 800933e:	b570      	push	{r4, r5, r6, lr}
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4604      	mov	r4, r0
 8009344:	4283      	cmp	r3, r0
 8009346:	d04b      	beq.n	80093e0 <_reclaim_reent+0xa4>
 8009348:	69c3      	ldr	r3, [r0, #28]
 800934a:	b143      	cbz	r3, 800935e <_reclaim_reent+0x22>
 800934c:	68db      	ldr	r3, [r3, #12]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d144      	bne.n	80093dc <_reclaim_reent+0xa0>
 8009352:	69e3      	ldr	r3, [r4, #28]
 8009354:	6819      	ldr	r1, [r3, #0]
 8009356:	b111      	cbz	r1, 800935e <_reclaim_reent+0x22>
 8009358:	4620      	mov	r0, r4
 800935a:	f000 f879 	bl	8009450 <_free_r>
 800935e:	6961      	ldr	r1, [r4, #20]
 8009360:	b111      	cbz	r1, 8009368 <_reclaim_reent+0x2c>
 8009362:	4620      	mov	r0, r4
 8009364:	f000 f874 	bl	8009450 <_free_r>
 8009368:	69e1      	ldr	r1, [r4, #28]
 800936a:	b111      	cbz	r1, 8009372 <_reclaim_reent+0x36>
 800936c:	4620      	mov	r0, r4
 800936e:	f000 f86f 	bl	8009450 <_free_r>
 8009372:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009374:	b111      	cbz	r1, 800937c <_reclaim_reent+0x40>
 8009376:	4620      	mov	r0, r4
 8009378:	f000 f86a 	bl	8009450 <_free_r>
 800937c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800937e:	b111      	cbz	r1, 8009386 <_reclaim_reent+0x4a>
 8009380:	4620      	mov	r0, r4
 8009382:	f000 f865 	bl	8009450 <_free_r>
 8009386:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009388:	b111      	cbz	r1, 8009390 <_reclaim_reent+0x54>
 800938a:	4620      	mov	r0, r4
 800938c:	f000 f860 	bl	8009450 <_free_r>
 8009390:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009392:	b111      	cbz	r1, 800939a <_reclaim_reent+0x5e>
 8009394:	4620      	mov	r0, r4
 8009396:	f000 f85b 	bl	8009450 <_free_r>
 800939a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800939c:	b111      	cbz	r1, 80093a4 <_reclaim_reent+0x68>
 800939e:	4620      	mov	r0, r4
 80093a0:	f000 f856 	bl	8009450 <_free_r>
 80093a4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80093a6:	b111      	cbz	r1, 80093ae <_reclaim_reent+0x72>
 80093a8:	4620      	mov	r0, r4
 80093aa:	f000 f851 	bl	8009450 <_free_r>
 80093ae:	6a23      	ldr	r3, [r4, #32]
 80093b0:	b1b3      	cbz	r3, 80093e0 <_reclaim_reent+0xa4>
 80093b2:	4620      	mov	r0, r4
 80093b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80093b8:	4718      	bx	r3
 80093ba:	5949      	ldr	r1, [r1, r5]
 80093bc:	b941      	cbnz	r1, 80093d0 <_reclaim_reent+0x94>
 80093be:	3504      	adds	r5, #4
 80093c0:	69e3      	ldr	r3, [r4, #28]
 80093c2:	2d80      	cmp	r5, #128	; 0x80
 80093c4:	68d9      	ldr	r1, [r3, #12]
 80093c6:	d1f8      	bne.n	80093ba <_reclaim_reent+0x7e>
 80093c8:	4620      	mov	r0, r4
 80093ca:	f000 f841 	bl	8009450 <_free_r>
 80093ce:	e7c0      	b.n	8009352 <_reclaim_reent+0x16>
 80093d0:	680e      	ldr	r6, [r1, #0]
 80093d2:	4620      	mov	r0, r4
 80093d4:	f000 f83c 	bl	8009450 <_free_r>
 80093d8:	4631      	mov	r1, r6
 80093da:	e7ef      	b.n	80093bc <_reclaim_reent+0x80>
 80093dc:	2500      	movs	r5, #0
 80093de:	e7ef      	b.n	80093c0 <_reclaim_reent+0x84>
 80093e0:	bd70      	pop	{r4, r5, r6, pc}
 80093e2:	bf00      	nop
 80093e4:	2000005c 	.word	0x2000005c

080093e8 <__libc_init_array>:
 80093e8:	b570      	push	{r4, r5, r6, lr}
 80093ea:	2600      	movs	r6, #0
 80093ec:	4d0c      	ldr	r5, [pc, #48]	; (8009420 <__libc_init_array+0x38>)
 80093ee:	4c0d      	ldr	r4, [pc, #52]	; (8009424 <__libc_init_array+0x3c>)
 80093f0:	1b64      	subs	r4, r4, r5
 80093f2:	10a4      	asrs	r4, r4, #2
 80093f4:	42a6      	cmp	r6, r4
 80093f6:	d109      	bne.n	800940c <__libc_init_array+0x24>
 80093f8:	f000 f87e 	bl	80094f8 <_init>
 80093fc:	2600      	movs	r6, #0
 80093fe:	4d0a      	ldr	r5, [pc, #40]	; (8009428 <__libc_init_array+0x40>)
 8009400:	4c0a      	ldr	r4, [pc, #40]	; (800942c <__libc_init_array+0x44>)
 8009402:	1b64      	subs	r4, r4, r5
 8009404:	10a4      	asrs	r4, r4, #2
 8009406:	42a6      	cmp	r6, r4
 8009408:	d105      	bne.n	8009416 <__libc_init_array+0x2e>
 800940a:	bd70      	pop	{r4, r5, r6, pc}
 800940c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009410:	4798      	blx	r3
 8009412:	3601      	adds	r6, #1
 8009414:	e7ee      	b.n	80093f4 <__libc_init_array+0xc>
 8009416:	f855 3b04 	ldr.w	r3, [r5], #4
 800941a:	4798      	blx	r3
 800941c:	3601      	adds	r6, #1
 800941e:	e7f2      	b.n	8009406 <__libc_init_array+0x1e>
 8009420:	08009748 	.word	0x08009748
 8009424:	08009748 	.word	0x08009748
 8009428:	08009748 	.word	0x08009748
 800942c:	0800974c 	.word	0x0800974c

08009430 <__retarget_lock_acquire_recursive>:
 8009430:	4770      	bx	lr

08009432 <__retarget_lock_release_recursive>:
 8009432:	4770      	bx	lr

08009434 <memcpy>:
 8009434:	440a      	add	r2, r1
 8009436:	4291      	cmp	r1, r2
 8009438:	f100 33ff 	add.w	r3, r0, #4294967295
 800943c:	d100      	bne.n	8009440 <memcpy+0xc>
 800943e:	4770      	bx	lr
 8009440:	b510      	push	{r4, lr}
 8009442:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009446:	4291      	cmp	r1, r2
 8009448:	f803 4f01 	strb.w	r4, [r3, #1]!
 800944c:	d1f9      	bne.n	8009442 <memcpy+0xe>
 800944e:	bd10      	pop	{r4, pc}

08009450 <_free_r>:
 8009450:	b538      	push	{r3, r4, r5, lr}
 8009452:	4605      	mov	r5, r0
 8009454:	2900      	cmp	r1, #0
 8009456:	d040      	beq.n	80094da <_free_r+0x8a>
 8009458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800945c:	1f0c      	subs	r4, r1, #4
 800945e:	2b00      	cmp	r3, #0
 8009460:	bfb8      	it	lt
 8009462:	18e4      	addlt	r4, r4, r3
 8009464:	f000 f83c 	bl	80094e0 <__malloc_lock>
 8009468:	4a1c      	ldr	r2, [pc, #112]	; (80094dc <_free_r+0x8c>)
 800946a:	6813      	ldr	r3, [r2, #0]
 800946c:	b933      	cbnz	r3, 800947c <_free_r+0x2c>
 800946e:	6063      	str	r3, [r4, #4]
 8009470:	6014      	str	r4, [r2, #0]
 8009472:	4628      	mov	r0, r5
 8009474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009478:	f000 b838 	b.w	80094ec <__malloc_unlock>
 800947c:	42a3      	cmp	r3, r4
 800947e:	d908      	bls.n	8009492 <_free_r+0x42>
 8009480:	6820      	ldr	r0, [r4, #0]
 8009482:	1821      	adds	r1, r4, r0
 8009484:	428b      	cmp	r3, r1
 8009486:	bf01      	itttt	eq
 8009488:	6819      	ldreq	r1, [r3, #0]
 800948a:	685b      	ldreq	r3, [r3, #4]
 800948c:	1809      	addeq	r1, r1, r0
 800948e:	6021      	streq	r1, [r4, #0]
 8009490:	e7ed      	b.n	800946e <_free_r+0x1e>
 8009492:	461a      	mov	r2, r3
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	b10b      	cbz	r3, 800949c <_free_r+0x4c>
 8009498:	42a3      	cmp	r3, r4
 800949a:	d9fa      	bls.n	8009492 <_free_r+0x42>
 800949c:	6811      	ldr	r1, [r2, #0]
 800949e:	1850      	adds	r0, r2, r1
 80094a0:	42a0      	cmp	r0, r4
 80094a2:	d10b      	bne.n	80094bc <_free_r+0x6c>
 80094a4:	6820      	ldr	r0, [r4, #0]
 80094a6:	4401      	add	r1, r0
 80094a8:	1850      	adds	r0, r2, r1
 80094aa:	4283      	cmp	r3, r0
 80094ac:	6011      	str	r1, [r2, #0]
 80094ae:	d1e0      	bne.n	8009472 <_free_r+0x22>
 80094b0:	6818      	ldr	r0, [r3, #0]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	4408      	add	r0, r1
 80094b6:	6010      	str	r0, [r2, #0]
 80094b8:	6053      	str	r3, [r2, #4]
 80094ba:	e7da      	b.n	8009472 <_free_r+0x22>
 80094bc:	d902      	bls.n	80094c4 <_free_r+0x74>
 80094be:	230c      	movs	r3, #12
 80094c0:	602b      	str	r3, [r5, #0]
 80094c2:	e7d6      	b.n	8009472 <_free_r+0x22>
 80094c4:	6820      	ldr	r0, [r4, #0]
 80094c6:	1821      	adds	r1, r4, r0
 80094c8:	428b      	cmp	r3, r1
 80094ca:	bf01      	itttt	eq
 80094cc:	6819      	ldreq	r1, [r3, #0]
 80094ce:	685b      	ldreq	r3, [r3, #4]
 80094d0:	1809      	addeq	r1, r1, r0
 80094d2:	6021      	streq	r1, [r4, #0]
 80094d4:	6063      	str	r3, [r4, #4]
 80094d6:	6054      	str	r4, [r2, #4]
 80094d8:	e7cb      	b.n	8009472 <_free_r+0x22>
 80094da:	bd38      	pop	{r3, r4, r5, pc}
 80094dc:	2000264c 	.word	0x2000264c

080094e0 <__malloc_lock>:
 80094e0:	4801      	ldr	r0, [pc, #4]	; (80094e8 <__malloc_lock+0x8>)
 80094e2:	f7ff bfa5 	b.w	8009430 <__retarget_lock_acquire_recursive>
 80094e6:	bf00      	nop
 80094e8:	20002648 	.word	0x20002648

080094ec <__malloc_unlock>:
 80094ec:	4801      	ldr	r0, [pc, #4]	; (80094f4 <__malloc_unlock+0x8>)
 80094ee:	f7ff bfa0 	b.w	8009432 <__retarget_lock_release_recursive>
 80094f2:	bf00      	nop
 80094f4:	20002648 	.word	0x20002648

080094f8 <_init>:
 80094f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094fa:	bf00      	nop
 80094fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094fe:	bc08      	pop	{r3}
 8009500:	469e      	mov	lr, r3
 8009502:	4770      	bx	lr

08009504 <_fini>:
 8009504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009506:	bf00      	nop
 8009508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800950a:	bc08      	pop	{r3}
 800950c:	469e      	mov	lr, r3
 800950e:	4770      	bx	lr
