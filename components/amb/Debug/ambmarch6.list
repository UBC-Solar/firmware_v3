
ambmarch6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002830  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002a14  08002a14  00012a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a4c  08002a4c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a4c  08002a4c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a4c  08002a4c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a4c  08002a4c  00012a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a50  08002a50  00012a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002a54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  08002a60  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08002a60  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba39  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002015  00000000  00000000  0002ba6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  0002da88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b18  00000000  00000000  0002e6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e9e  00000000  00000000  0002f1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df3c  00000000  00000000  0004906e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a3ad  00000000  00000000  00056faa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f1357  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003194  00000000  00000000  000f13ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	080029fc 	.word	0x080029fc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	080029fc 	.word	0x080029fc

08000224 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b084      	sub	sp, #16
 8000228:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000234:	4b18      	ldr	r3, [pc, #96]	; (8000298 <MX_ADC1_Init+0x74>)
 8000236:	4a19      	ldr	r2, [pc, #100]	; (800029c <MX_ADC1_Init+0x78>)
 8000238:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800023a:	4b17      	ldr	r3, [pc, #92]	; (8000298 <MX_ADC1_Init+0x74>)
 800023c:	2200      	movs	r2, #0
 800023e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000240:	4b15      	ldr	r3, [pc, #84]	; (8000298 <MX_ADC1_Init+0x74>)
 8000242:	2201      	movs	r2, #1
 8000244:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000246:	4b14      	ldr	r3, [pc, #80]	; (8000298 <MX_ADC1_Init+0x74>)
 8000248:	2200      	movs	r2, #0
 800024a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800024c:	4b12      	ldr	r3, [pc, #72]	; (8000298 <MX_ADC1_Init+0x74>)
 800024e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000252:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000254:	4b10      	ldr	r3, [pc, #64]	; (8000298 <MX_ADC1_Init+0x74>)
 8000256:	2200      	movs	r2, #0
 8000258:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800025a:	4b0f      	ldr	r3, [pc, #60]	; (8000298 <MX_ADC1_Init+0x74>)
 800025c:	2201      	movs	r2, #1
 800025e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000260:	480d      	ldr	r0, [pc, #52]	; (8000298 <MX_ADC1_Init+0x74>)
 8000262:	f000 fb7f 	bl	8000964 <HAL_ADC_Init>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800026c:	f000 f9f8 	bl	8000660 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000270:	2300      	movs	r3, #0
 8000272:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000274:	2301      	movs	r3, #1
 8000276:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000278:	2300      	movs	r3, #0
 800027a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	4619      	mov	r1, r3
 8000280:	4805      	ldr	r0, [pc, #20]	; (8000298 <MX_ADC1_Init+0x74>)
 8000282:	f000 fe0d 	bl	8000ea0 <HAL_ADC_ConfigChannel>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800028c:	f000 f9e8 	bl	8000660 <Error_Handler>
  }

}
 8000290:	bf00      	nop
 8000292:	3710      	adds	r7, #16
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	20000028 	.word	0x20000028
 800029c:	40012400 	.word	0x40012400

080002a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b08a      	sub	sp, #40	; 0x28
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a8:	f107 0318 	add.w	r3, r7, #24
 80002ac:	2200      	movs	r2, #0
 80002ae:	601a      	str	r2, [r3, #0]
 80002b0:	605a      	str	r2, [r3, #4]
 80002b2:	609a      	str	r2, [r3, #8]
 80002b4:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4a2a      	ldr	r2, [pc, #168]	; (8000364 <HAL_ADC_MspInit+0xc4>)
 80002bc:	4293      	cmp	r3, r2
 80002be:	d14d      	bne.n	800035c <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002c0:	4b29      	ldr	r3, [pc, #164]	; (8000368 <HAL_ADC_MspInit+0xc8>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	4a28      	ldr	r2, [pc, #160]	; (8000368 <HAL_ADC_MspInit+0xc8>)
 80002c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002ca:	6193      	str	r3, [r2, #24]
 80002cc:	4b26      	ldr	r3, [pc, #152]	; (8000368 <HAL_ADC_MspInit+0xc8>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002d4:	617b      	str	r3, [r7, #20]
 80002d6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d8:	4b23      	ldr	r3, [pc, #140]	; (8000368 <HAL_ADC_MspInit+0xc8>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	4a22      	ldr	r2, [pc, #136]	; (8000368 <HAL_ADC_MspInit+0xc8>)
 80002de:	f043 0304 	orr.w	r3, r3, #4
 80002e2:	6193      	str	r3, [r2, #24]
 80002e4:	4b20      	ldr	r3, [pc, #128]	; (8000368 <HAL_ADC_MspInit+0xc8>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	f003 0304 	and.w	r3, r3, #4
 80002ec:	613b      	str	r3, [r7, #16]
 80002ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80002f0:	4b1d      	ldr	r3, [pc, #116]	; (8000368 <HAL_ADC_MspInit+0xc8>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	4a1c      	ldr	r2, [pc, #112]	; (8000368 <HAL_ADC_MspInit+0xc8>)
 80002f6:	f043 0310 	orr.w	r3, r3, #16
 80002fa:	6193      	str	r3, [r2, #24]
 80002fc:	4b1a      	ldr	r3, [pc, #104]	; (8000368 <HAL_ADC_MspInit+0xc8>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	f003 0310 	and.w	r3, r3, #16
 8000304:	60fb      	str	r3, [r7, #12]
 8000306:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000308:	4b17      	ldr	r3, [pc, #92]	; (8000368 <HAL_ADC_MspInit+0xc8>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	4a16      	ldr	r2, [pc, #88]	; (8000368 <HAL_ADC_MspInit+0xc8>)
 800030e:	f043 0308 	orr.w	r3, r3, #8
 8000312:	6193      	str	r3, [r2, #24]
 8000314:	4b14      	ldr	r3, [pc, #80]	; (8000368 <HAL_ADC_MspInit+0xc8>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	f003 0308 	and.w	r3, r3, #8
 800031c:	60bb      	str	r3, [r7, #8]
 800031e:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|TEMP_2_Pin|TEMP_3_Pin|TEMP_4_Pin
 8000320:	23ff      	movs	r3, #255	; 0xff
 8000322:	61bb      	str	r3, [r7, #24]
                          |ISENSE2_Pin|VSENSE2_Pin|VSENSE1_Pin|ISENSE1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000324:	2303      	movs	r3, #3
 8000326:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000328:	f107 0318 	add.w	r3, r7, #24
 800032c:	4619      	mov	r1, r3
 800032e:	480f      	ldr	r0, [pc, #60]	; (800036c <HAL_ADC_MspInit+0xcc>)
 8000330:	f001 f91a 	bl	8001568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TEMP_5_Pin|TEMP_6_Pin;
 8000334:	2330      	movs	r3, #48	; 0x30
 8000336:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000338:	2303      	movs	r3, #3
 800033a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800033c:	f107 0318 	add.w	r3, r7, #24
 8000340:	4619      	mov	r1, r3
 8000342:	480b      	ldr	r0, [pc, #44]	; (8000370 <HAL_ADC_MspInit+0xd0>)
 8000344:	f001 f910 	bl	8001568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TEMP_7_Pin|TEMP_8_Pin;
 8000348:	2303      	movs	r3, #3
 800034a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800034c:	2303      	movs	r3, #3
 800034e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000350:	f107 0318 	add.w	r3, r7, #24
 8000354:	4619      	mov	r1, r3
 8000356:	4807      	ldr	r0, [pc, #28]	; (8000374 <HAL_ADC_MspInit+0xd4>)
 8000358:	f001 f906 	bl	8001568 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800035c:	bf00      	nop
 800035e:	3728      	adds	r7, #40	; 0x28
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	40012400 	.word	0x40012400
 8000368:	40021000 	.word	0x40021000
 800036c:	40010800 	.word	0x40010800
 8000370:	40011000 	.word	0x40011000
 8000374:	40010c00 	.word	0x40010c00

08000378 <ADC_Select_CH5>:
		Error_Handler();
	}
}

void ADC_Select_CH5(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b084      	sub	sp, #16
 800037c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	2200      	movs	r2, #0
 8000382:	601a      	str	r2, [r3, #0]
 8000384:	605a      	str	r2, [r3, #4]
 8000386:	609a      	str	r2, [r3, #8]
	/*Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. */
	sConfig.Channel = ADC_CHANNEL_5;
 8000388:	2305      	movs	r3, #5
 800038a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = 1;
 800038c:	2301      	movs	r3, #1
 800038e:	60bb      	str	r3, [r7, #8]
	// Not sure about below sampling time
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000390:	2302      	movs	r3, #2
 8000392:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000394:	1d3b      	adds	r3, r7, #4
 8000396:	4619      	mov	r1, r3
 8000398:	4805      	ldr	r0, [pc, #20]	; (80003b0 <ADC_Select_CH5+0x38>)
 800039a:	f000 fd81 	bl	8000ea0 <HAL_ADC_ConfigChannel>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <ADC_Select_CH5+0x30>
	{
		Error_Handler();
 80003a4:	f000 f95c 	bl	8000660 <Error_Handler>
	}
}
 80003a8:	bf00      	nop
 80003aa:	3710      	adds	r7, #16
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	20000028 	.word	0x20000028

080003b4 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0

  hcan.Instance = CAN1;
 80003b8:	4b16      	ldr	r3, [pc, #88]	; (8000414 <MX_CAN_Init+0x60>)
 80003ba:	4a17      	ldr	r2, [pc, #92]	; (8000418 <MX_CAN_Init+0x64>)
 80003bc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80003be:	4b15      	ldr	r3, [pc, #84]	; (8000414 <MX_CAN_Init+0x60>)
 80003c0:	2210      	movs	r2, #16
 80003c2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80003c4:	4b13      	ldr	r3, [pc, #76]	; (8000414 <MX_CAN_Init+0x60>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003ca:	4b12      	ldr	r3, [pc, #72]	; (8000414 <MX_CAN_Init+0x60>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80003d0:	4b10      	ldr	r3, [pc, #64]	; (8000414 <MX_CAN_Init+0x60>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80003d6:	4b0f      	ldr	r3, [pc, #60]	; (8000414 <MX_CAN_Init+0x60>)
 80003d8:	2200      	movs	r2, #0
 80003da:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80003dc:	4b0d      	ldr	r3, [pc, #52]	; (8000414 <MX_CAN_Init+0x60>)
 80003de:	2200      	movs	r2, #0
 80003e0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80003e2:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <MX_CAN_Init+0x60>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80003e8:	4b0a      	ldr	r3, [pc, #40]	; (8000414 <MX_CAN_Init+0x60>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80003ee:	4b09      	ldr	r3, [pc, #36]	; (8000414 <MX_CAN_Init+0x60>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80003f4:	4b07      	ldr	r3, [pc, #28]	; (8000414 <MX_CAN_Init+0x60>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80003fa:	4b06      	ldr	r3, [pc, #24]	; (8000414 <MX_CAN_Init+0x60>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000400:	4804      	ldr	r0, [pc, #16]	; (8000414 <MX_CAN_Init+0x60>)
 8000402:	f000 fed1 	bl	80011a8 <HAL_CAN_Init>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 800040c:	f000 f928 	bl	8000660 <Error_Handler>
  }

}
 8000410:	bf00      	nop
 8000412:	bd80      	pop	{r7, pc}
 8000414:	20000058 	.word	0x20000058
 8000418:	40006400 	.word	0x40006400

0800041c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b08a      	sub	sp, #40	; 0x28
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000424:	f107 0314 	add.w	r3, r7, #20
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
 800042c:	605a      	str	r2, [r3, #4]
 800042e:	609a      	str	r2, [r3, #8]
 8000430:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4a25      	ldr	r2, [pc, #148]	; (80004cc <HAL_CAN_MspInit+0xb0>)
 8000438:	4293      	cmp	r3, r2
 800043a:	d143      	bne.n	80004c4 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800043c:	4b24      	ldr	r3, [pc, #144]	; (80004d0 <HAL_CAN_MspInit+0xb4>)
 800043e:	69db      	ldr	r3, [r3, #28]
 8000440:	4a23      	ldr	r2, [pc, #140]	; (80004d0 <HAL_CAN_MspInit+0xb4>)
 8000442:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000446:	61d3      	str	r3, [r2, #28]
 8000448:	4b21      	ldr	r3, [pc, #132]	; (80004d0 <HAL_CAN_MspInit+0xb4>)
 800044a:	69db      	ldr	r3, [r3, #28]
 800044c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000450:	613b      	str	r3, [r7, #16]
 8000452:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000454:	4b1e      	ldr	r3, [pc, #120]	; (80004d0 <HAL_CAN_MspInit+0xb4>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	4a1d      	ldr	r2, [pc, #116]	; (80004d0 <HAL_CAN_MspInit+0xb4>)
 800045a:	f043 0308 	orr.w	r3, r3, #8
 800045e:	6193      	str	r3, [r2, #24]
 8000460:	4b1b      	ldr	r3, [pc, #108]	; (80004d0 <HAL_CAN_MspInit+0xb4>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	f003 0308 	and.w	r3, r3, #8
 8000468:	60fb      	str	r3, [r7, #12]
 800046a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800046c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000470:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000472:	2300      	movs	r3, #0
 8000474:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000476:	2300      	movs	r3, #0
 8000478:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800047a:	f107 0314 	add.w	r3, r7, #20
 800047e:	4619      	mov	r1, r3
 8000480:	4814      	ldr	r0, [pc, #80]	; (80004d4 <HAL_CAN_MspInit+0xb8>)
 8000482:	f001 f871 	bl	8001568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000486:	f44f 7300 	mov.w	r3, #512	; 0x200
 800048a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800048c:	2302      	movs	r3, #2
 800048e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000490:	2303      	movs	r3, #3
 8000492:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000494:	f107 0314 	add.w	r3, r7, #20
 8000498:	4619      	mov	r1, r3
 800049a:	480e      	ldr	r0, [pc, #56]	; (80004d4 <HAL_CAN_MspInit+0xb8>)
 800049c:	f001 f864 	bl	8001568 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80004a0:	4b0d      	ldr	r3, [pc, #52]	; (80004d8 <HAL_CAN_MspInit+0xbc>)
 80004a2:	685b      	ldr	r3, [r3, #4]
 80004a4:	627b      	str	r3, [r7, #36]	; 0x24
 80004a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004a8:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80004ac:	627b      	str	r3, [r7, #36]	; 0x24
 80004ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004b0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80004b4:	627b      	str	r3, [r7, #36]	; 0x24
 80004b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004bc:	627b      	str	r3, [r7, #36]	; 0x24
 80004be:	4a06      	ldr	r2, [pc, #24]	; (80004d8 <HAL_CAN_MspInit+0xbc>)
 80004c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004c2:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80004c4:	bf00      	nop
 80004c6:	3728      	adds	r7, #40	; 0x28
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	40006400 	.word	0x40006400
 80004d0:	40021000 	.word	0x40021000
 80004d4:	40010c00 	.word	0x40010c00
 80004d8:	40010000 	.word	0x40010000

080004dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	b085      	sub	sp, #20
 80004e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004e2:	4b1a      	ldr	r3, [pc, #104]	; (800054c <MX_GPIO_Init+0x70>)
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	4a19      	ldr	r2, [pc, #100]	; (800054c <MX_GPIO_Init+0x70>)
 80004e8:	f043 0320 	orr.w	r3, r3, #32
 80004ec:	6193      	str	r3, [r2, #24]
 80004ee:	4b17      	ldr	r3, [pc, #92]	; (800054c <MX_GPIO_Init+0x70>)
 80004f0:	699b      	ldr	r3, [r3, #24]
 80004f2:	f003 0320 	and.w	r3, r3, #32
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	4b14      	ldr	r3, [pc, #80]	; (800054c <MX_GPIO_Init+0x70>)
 80004fc:	699b      	ldr	r3, [r3, #24]
 80004fe:	4a13      	ldr	r2, [pc, #76]	; (800054c <MX_GPIO_Init+0x70>)
 8000500:	f043 0304 	orr.w	r3, r3, #4
 8000504:	6193      	str	r3, [r2, #24]
 8000506:	4b11      	ldr	r3, [pc, #68]	; (800054c <MX_GPIO_Init+0x70>)
 8000508:	699b      	ldr	r3, [r3, #24]
 800050a:	f003 0304 	and.w	r3, r3, #4
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000512:	4b0e      	ldr	r3, [pc, #56]	; (800054c <MX_GPIO_Init+0x70>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	4a0d      	ldr	r2, [pc, #52]	; (800054c <MX_GPIO_Init+0x70>)
 8000518:	f043 0310 	orr.w	r3, r3, #16
 800051c:	6193      	str	r3, [r2, #24]
 800051e:	4b0b      	ldr	r3, [pc, #44]	; (800054c <MX_GPIO_Init+0x70>)
 8000520:	699b      	ldr	r3, [r3, #24]
 8000522:	f003 0310 	and.w	r3, r3, #16
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800052a:	4b08      	ldr	r3, [pc, #32]	; (800054c <MX_GPIO_Init+0x70>)
 800052c:	699b      	ldr	r3, [r3, #24]
 800052e:	4a07      	ldr	r2, [pc, #28]	; (800054c <MX_GPIO_Init+0x70>)
 8000530:	f043 0308 	orr.w	r3, r3, #8
 8000534:	6193      	str	r3, [r2, #24]
 8000536:	4b05      	ldr	r3, [pc, #20]	; (800054c <MX_GPIO_Init+0x70>)
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	f003 0308 	and.w	r3, r3, #8
 800053e:	603b      	str	r3, [r7, #0]
 8000540:	683b      	ldr	r3, [r7, #0]

}
 8000542:	bf00      	nop
 8000544:	3714      	adds	r7, #20
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr
 800054c:	40021000 	.word	0x40021000

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000556:	f000 f97f 	bl	8000858 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055a:	f000 f82f 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055e:	f7ff ffbd 	bl	80004dc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000562:	f7ff fe5f 	bl	8000224 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000566:	f000 f8e1 	bl	800072c <MX_TIM1_Init>
  MX_CAN_Init();
 800056a:	f7ff ff23 	bl	80003b4 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc1);
 800056e:	4811      	ldr	r0, [pc, #68]	; (80005b4 <main+0x64>)
 8000570:	f000 fae2 	bl	8000b38 <HAL_ADC_Start>
   *
   *
   */

  // Values from ADC; index 0 = voltage, 1 = current; 2 = raw temperature
  uint32_t ADC_VAL[3] = {0};
 8000574:	463b      	mov	r3, r7
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
  uint32_t voltage_measurement = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	60fb      	str	r3, [r7, #12]
//  }

  // if (HAL_OK != HAL_ADC_Start_DMA(&hadc1, temperatures, ADC_BUF_SIZE))
	  // Error_Handler();

  if (HAL_OK != HAL_TIM_Base_Start(&htim1)) {
 8000582:	480d      	ldr	r0, [pc, #52]	; (80005b8 <main+0x68>)
 8000584:	f001 ff76 	bl	8002474 <HAL_TIM_Base_Start>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <main+0x42>
	  Error_Handler();
 800058e:	f000 f867 	bl	8000660 <Error_Handler>

	  //code here
	  //read ADC, process, then output to CANbus

	  /* Channel 0 - Voltage from Voltage Sensor */
	  ADC_Select_CH5();
 8000592:	f7ff fef1 	bl	8000378 <ADC_Select_CH5>
	  HAL_ADC_PollForConversion(&hadc1, 1000);		// arguments: ADC_HandleTypeDef * hadc, uint32_t timeout = 1 second
 8000596:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800059a:	4806      	ldr	r0, [pc, #24]	; (80005b4 <main+0x64>)
 800059c:	f000 fb7a 	bl	8000c94 <HAL_ADC_PollForConversion>
	  voltage_measurement = HAL_ADC_GetValue(&hadc1);
 80005a0:	4804      	ldr	r0, [pc, #16]	; (80005b4 <main+0x64>)
 80005a2:	f000 fc71 	bl	8000e88 <HAL_ADC_GetValue>
 80005a6:	60f8      	str	r0, [r7, #12]
	  ADC_VAL[2] = HAL_ADC_GetValue(&hadc1);
	  HAL_ADCEx_InjectedStop(&hadc1);
	  // Modify below line to include conversion model for temperature
 	  // uint32_t Temp = ADC_VAL[2]; */

	  HAL_Delay (1000);
 80005a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ac:	f000 f9b6 	bl	800091c <HAL_Delay>
  {
 80005b0:	e7ef      	b.n	8000592 <main+0x42>
 80005b2:	bf00      	nop
 80005b4:	20000028 	.word	0x20000028
 80005b8:	20000080 	.word	0x20000080

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b096      	sub	sp, #88	; 0x58
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005c6:	2228      	movs	r2, #40	; 0x28
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 fa0e 	bl	80029ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 031c 	add.w	r3, r7, #28
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]
 80005ee:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f0:	2302      	movs	r3, #2
 80005f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f4:	2301      	movs	r3, #1
 80005f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f8:	2310      	movs	r3, #16
 80005fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005fc:	2300      	movs	r3, #0
 80005fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000600:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000604:	4618      	mov	r0, r3
 8000606:	f001 f943 	bl	8001890 <HAL_RCC_OscConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000610:	f000 f826 	bl	8000660 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000614:	230f      	movs	r3, #15
 8000616:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000618:	2300      	movs	r3, #0
 800061a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000628:	f107 031c 	add.w	r3, r7, #28
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f001 fbae 	bl	8001d90 <HAL_RCC_ClockConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800063a:	f000 f811 	bl	8000660 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800063e:	2302      	movs	r3, #2
 8000640:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000642:	2300      	movs	r3, #0
 8000644:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	4618      	mov	r0, r3
 800064a:	f001 fd27 	bl	800209c <HAL_RCCEx_PeriphCLKConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000654:	f000 f804 	bl	8000660 <Error_Handler>
  }
}
 8000658:	bf00      	nop
 800065a:	3758      	adds	r7, #88	; 0x58
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000664:	b672      	cpsid	i
}
 8000666:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000668:	e7fe      	b.n	8000668 <Error_Handler+0x8>
	...

0800066c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800066c:	b480      	push	{r7}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000672:	4b15      	ldr	r3, [pc, #84]	; (80006c8 <HAL_MspInit+0x5c>)
 8000674:	699b      	ldr	r3, [r3, #24]
 8000676:	4a14      	ldr	r2, [pc, #80]	; (80006c8 <HAL_MspInit+0x5c>)
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	6193      	str	r3, [r2, #24]
 800067e:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <HAL_MspInit+0x5c>)
 8000680:	699b      	ldr	r3, [r3, #24]
 8000682:	f003 0301 	and.w	r3, r3, #1
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800068a:	4b0f      	ldr	r3, [pc, #60]	; (80006c8 <HAL_MspInit+0x5c>)
 800068c:	69db      	ldr	r3, [r3, #28]
 800068e:	4a0e      	ldr	r2, [pc, #56]	; (80006c8 <HAL_MspInit+0x5c>)
 8000690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000694:	61d3      	str	r3, [r2, #28]
 8000696:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <HAL_MspInit+0x5c>)
 8000698:	69db      	ldr	r3, [r3, #28]
 800069a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006a2:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <HAL_MspInit+0x60>)
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	4a04      	ldr	r2, [pc, #16]	; (80006cc <HAL_MspInit+0x60>)
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006be:	bf00      	nop
 80006c0:	3714      	adds	r7, #20
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr
 80006c8:	40021000 	.word	0x40021000
 80006cc:	40010000 	.word	0x40010000

080006d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006d4:	e7fe      	b.n	80006d4 <NMI_Handler+0x4>

080006d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006da:	e7fe      	b.n	80006da <HardFault_Handler+0x4>

080006dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <MemManage_Handler+0x4>

080006e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006e2:	b480      	push	{r7}
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <BusFault_Handler+0x4>

080006e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <UsageFault_Handler+0x4>

080006ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr

080006fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006fa:	b480      	push	{r7}
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006fe:	bf00      	nop
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr

08000706 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000706:	b480      	push	{r7}
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	bc80      	pop	{r7}
 8000710:	4770      	bx	lr

08000712 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000716:	f000 f8e5 	bl	80008e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}

0800071e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr
	...

0800072c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000732:	f107 0308 	add.w	r3, r7, #8
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000740:	463b      	mov	r3, r7
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000748:	4b1f      	ldr	r3, [pc, #124]	; (80007c8 <MX_TIM1_Init+0x9c>)
 800074a:	4a20      	ldr	r2, [pc, #128]	; (80007cc <MX_TIM1_Init+0xa0>)
 800074c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47999;
 800074e:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <MX_TIM1_Init+0x9c>)
 8000750:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000754:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000756:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <MX_TIM1_Init+0x9c>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 800075c:	4b1a      	ldr	r3, [pc, #104]	; (80007c8 <MX_TIM1_Init+0x9c>)
 800075e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000762:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000764:	4b18      	ldr	r3, [pc, #96]	; (80007c8 <MX_TIM1_Init+0x9c>)
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <MX_TIM1_Init+0x9c>)
 800076c:	2200      	movs	r2, #0
 800076e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000770:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <MX_TIM1_Init+0x9c>)
 8000772:	2200      	movs	r2, #0
 8000774:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000776:	4814      	ldr	r0, [pc, #80]	; (80007c8 <MX_TIM1_Init+0x9c>)
 8000778:	f001 fe2c 	bl	80023d4 <HAL_TIM_Base_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000782:	f7ff ff6d 	bl	8000660 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800078c:	f107 0308 	add.w	r3, r7, #8
 8000790:	4619      	mov	r1, r3
 8000792:	480d      	ldr	r0, [pc, #52]	; (80007c8 <MX_TIM1_Init+0x9c>)
 8000794:	f001 fec6 	bl	8002524 <HAL_TIM_ConfigClockSource>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800079e:	f7ff ff5f 	bl	8000660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80007a2:	2320      	movs	r3, #32
 80007a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007aa:	463b      	mov	r3, r7
 80007ac:	4619      	mov	r1, r3
 80007ae:	4806      	ldr	r0, [pc, #24]	; (80007c8 <MX_TIM1_Init+0x9c>)
 80007b0:	f002 f88c 	bl	80028cc <HAL_TIMEx_MasterConfigSynchronization>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80007ba:	f7ff ff51 	bl	8000660 <Error_Handler>
  }

}
 80007be:	bf00      	nop
 80007c0:	3718      	adds	r7, #24
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000080 	.word	0x20000080
 80007cc:	40012c00 	.word	0x40012c00

080007d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a09      	ldr	r2, [pc, #36]	; (8000804 <HAL_TIM_Base_MspInit+0x34>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d10b      	bne.n	80007fa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <HAL_TIM_Base_MspInit+0x38>)
 80007e4:	699b      	ldr	r3, [r3, #24]
 80007e6:	4a08      	ldr	r2, [pc, #32]	; (8000808 <HAL_TIM_Base_MspInit+0x38>)
 80007e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007ec:	6193      	str	r3, [r2, #24]
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <HAL_TIM_Base_MspInit+0x38>)
 80007f0:	699b      	ldr	r3, [r3, #24]
 80007f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80007fa:	bf00      	nop
 80007fc:	3714      	adds	r7, #20
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr
 8000804:	40012c00 	.word	0x40012c00
 8000808:	40021000 	.word	0x40021000

0800080c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800080c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800080e:	e003      	b.n	8000818 <LoopCopyDataInit>

08000810 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000810:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000812:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000814:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000816:	3104      	adds	r1, #4

08000818 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000818:	480a      	ldr	r0, [pc, #40]	; (8000844 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800081c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800081e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000820:	d3f6      	bcc.n	8000810 <CopyDataInit>
  ldr r2, =_sbss
 8000822:	4a0a      	ldr	r2, [pc, #40]	; (800084c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000824:	e002      	b.n	800082c <LoopFillZerobss>

08000826 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000826:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000828:	f842 3b04 	str.w	r3, [r2], #4

0800082c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800082c:	4b08      	ldr	r3, [pc, #32]	; (8000850 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800082e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000830:	d3f9      	bcc.n	8000826 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000832:	f7ff ff74 	bl	800071e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000836:	f002 f8b5 	bl	80029a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800083a:	f7ff fe89 	bl	8000550 <main>
  bx lr
 800083e:	4770      	bx	lr
  ldr r3, =_sidata
 8000840:	08002a54 	.word	0x08002a54
  ldr r0, =_sdata
 8000844:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000848:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800084c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000850:	200000cc 	.word	0x200000cc

08000854 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000854:	e7fe      	b.n	8000854 <ADC1_2_IRQHandler>
	...

08000858 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800085c:	4b08      	ldr	r3, [pc, #32]	; (8000880 <HAL_Init+0x28>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a07      	ldr	r2, [pc, #28]	; (8000880 <HAL_Init+0x28>)
 8000862:	f043 0310 	orr.w	r3, r3, #16
 8000866:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000868:	2003      	movs	r0, #3
 800086a:	f000 fe49 	bl	8001500 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800086e:	2000      	movs	r0, #0
 8000870:	f000 f808 	bl	8000884 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000874:	f7ff fefa 	bl	800066c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000878:	2300      	movs	r3, #0
}
 800087a:	4618      	mov	r0, r3
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40022000 	.word	0x40022000

08000884 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <HAL_InitTick+0x54>)
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <HAL_InitTick+0x58>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	4619      	mov	r1, r3
 8000896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800089a:	fbb3 f3f1 	udiv	r3, r3, r1
 800089e:	fbb2 f3f3 	udiv	r3, r2, r3
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 fe53 	bl	800154e <HAL_SYSTICK_Config>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
 80008b0:	e00e      	b.n	80008d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2b0f      	cmp	r3, #15
 80008b6:	d80a      	bhi.n	80008ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008b8:	2200      	movs	r2, #0
 80008ba:	6879      	ldr	r1, [r7, #4]
 80008bc:	f04f 30ff 	mov.w	r0, #4294967295
 80008c0:	f000 fe29 	bl	8001516 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008c4:	4a06      	ldr	r2, [pc, #24]	; (80008e0 <HAL_InitTick+0x5c>)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ca:	2300      	movs	r3, #0
 80008cc:	e000      	b.n	80008d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000000 	.word	0x20000000
 80008dc:	20000008 	.word	0x20000008
 80008e0:	20000004 	.word	0x20000004

080008e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008e8:	4b05      	ldr	r3, [pc, #20]	; (8000900 <HAL_IncTick+0x1c>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	461a      	mov	r2, r3
 80008ee:	4b05      	ldr	r3, [pc, #20]	; (8000904 <HAL_IncTick+0x20>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4413      	add	r3, r2
 80008f4:	4a03      	ldr	r2, [pc, #12]	; (8000904 <HAL_IncTick+0x20>)
 80008f6:	6013      	str	r3, [r2, #0]
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr
 8000900:	20000008 	.word	0x20000008
 8000904:	200000c8 	.word	0x200000c8

08000908 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  return uwTick;
 800090c:	4b02      	ldr	r3, [pc, #8]	; (8000918 <HAL_GetTick+0x10>)
 800090e:	681b      	ldr	r3, [r3, #0]
}
 8000910:	4618      	mov	r0, r3
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr
 8000918:	200000c8 	.word	0x200000c8

0800091c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000924:	f7ff fff0 	bl	8000908 <HAL_GetTick>
 8000928:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000934:	d005      	beq.n	8000942 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000936:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <HAL_Delay+0x44>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	461a      	mov	r2, r3
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	4413      	add	r3, r2
 8000940:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000942:	bf00      	nop
 8000944:	f7ff ffe0 	bl	8000908 <HAL_GetTick>
 8000948:	4602      	mov	r2, r0
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	68fa      	ldr	r2, [r7, #12]
 8000950:	429a      	cmp	r2, r3
 8000952:	d8f7      	bhi.n	8000944 <HAL_Delay+0x28>
  {
  }
}
 8000954:	bf00      	nop
 8000956:	bf00      	nop
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000008 	.word	0x20000008

08000964 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800096c:	2300      	movs	r3, #0
 800096e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000970:	2300      	movs	r3, #0
 8000972:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d101      	bne.n	8000986 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
 8000984:	e0ce      	b.n	8000b24 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	689b      	ldr	r3, [r3, #8]
 800098a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000990:	2b00      	cmp	r3, #0
 8000992:	d109      	bne.n	80009a8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2200      	movs	r2, #0
 8000998:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2200      	movs	r2, #0
 800099e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f7ff fc7c 	bl	80002a0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f000 fbc3 	bl	8001134 <ADC_ConversionStop_Disable>
 80009ae:	4603      	mov	r3, r0
 80009b0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b6:	f003 0310 	and.w	r3, r3, #16
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	f040 80a9 	bne.w	8000b12 <HAL_ADC_Init+0x1ae>
 80009c0:	7dfb      	ldrb	r3, [r7, #23]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	f040 80a5 	bne.w	8000b12 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80009d0:	f023 0302 	bic.w	r3, r3, #2
 80009d4:	f043 0202 	orr.w	r2, r3, #2
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4951      	ldr	r1, [pc, #324]	; (8000b2c <HAL_ADC_Init+0x1c8>)
 80009e6:	428b      	cmp	r3, r1
 80009e8:	d10a      	bne.n	8000a00 <HAL_ADC_Init+0x9c>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	69db      	ldr	r3, [r3, #28]
 80009ee:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80009f2:	d002      	beq.n	80009fa <HAL_ADC_Init+0x96>
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	69db      	ldr	r3, [r3, #28]
 80009f8:	e004      	b.n	8000a04 <HAL_ADC_Init+0xa0>
 80009fa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80009fe:	e001      	b.n	8000a04 <HAL_ADC_Init+0xa0>
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a04:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	7b1b      	ldrb	r3, [r3, #12]
 8000a0a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a0c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a0e:	68ba      	ldr	r2, [r7, #8]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a1c:	d003      	beq.n	8000a26 <HAL_ADC_Init+0xc2>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d102      	bne.n	8000a2c <HAL_ADC_Init+0xc8>
 8000a26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a2a:	e000      	b.n	8000a2e <HAL_ADC_Init+0xca>
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	4313      	orrs	r3, r2
 8000a32:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	7d1b      	ldrb	r3, [r3, #20]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d119      	bne.n	8000a70 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	7b1b      	ldrb	r3, [r3, #12]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d109      	bne.n	8000a58 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	3b01      	subs	r3, #1
 8000a4a:	035a      	lsls	r2, r3, #13
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a54:	613b      	str	r3, [r7, #16]
 8000a56:	e00b      	b.n	8000a70 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a5c:	f043 0220 	orr.w	r2, r3, #32
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a68:	f043 0201 	orr.w	r2, r3, #1
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	430a      	orrs	r2, r1
 8000a82:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	689a      	ldr	r2, [r3, #8]
 8000a8a:	4b29      	ldr	r3, [pc, #164]	; (8000b30 <HAL_ADC_Init+0x1cc>)
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	6812      	ldr	r2, [r2, #0]
 8000a92:	68b9      	ldr	r1, [r7, #8]
 8000a94:	430b      	orrs	r3, r1
 8000a96:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000aa0:	d003      	beq.n	8000aaa <HAL_ADC_Init+0x146>
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	689b      	ldr	r3, [r3, #8]
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d104      	bne.n	8000ab4 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	691b      	ldr	r3, [r3, #16]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	051b      	lsls	r3, r3, #20
 8000ab2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aba:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	68fa      	ldr	r2, [r7, #12]
 8000ac4:	430a      	orrs	r2, r1
 8000ac6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	689a      	ldr	r2, [r3, #8]
 8000ace:	4b19      	ldr	r3, [pc, #100]	; (8000b34 <HAL_ADC_Init+0x1d0>)
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	68ba      	ldr	r2, [r7, #8]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d10b      	bne.n	8000af0 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2200      	movs	r2, #0
 8000adc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ae2:	f023 0303 	bic.w	r3, r3, #3
 8000ae6:	f043 0201 	orr.w	r2, r3, #1
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000aee:	e018      	b.n	8000b22 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af4:	f023 0312 	bic.w	r3, r3, #18
 8000af8:	f043 0210 	orr.w	r2, r3, #16
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b04:	f043 0201 	orr.w	r2, r3, #1
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b10:	e007      	b.n	8000b22 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b16:	f043 0210 	orr.w	r2, r3, #16
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3718      	adds	r7, #24
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40013c00 	.word	0x40013c00
 8000b30:	ffe1f7fd 	.word	0xffe1f7fd
 8000b34:	ff1f0efe 	.word	0xff1f0efe

08000b38 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b40:	2300      	movs	r3, #0
 8000b42:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d101      	bne.n	8000b52 <HAL_ADC_Start+0x1a>
 8000b4e:	2302      	movs	r3, #2
 8000b50:	e098      	b.n	8000c84 <HAL_ADC_Start+0x14c>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2201      	movs	r2, #1
 8000b56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f000 fa98 	bl	8001090 <ADC_Enable>
 8000b60:	4603      	mov	r3, r0
 8000b62:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000b64:	7bfb      	ldrb	r3, [r7, #15]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f040 8087 	bne.w	8000c7a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000b74:	f023 0301 	bic.w	r3, r3, #1
 8000b78:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a41      	ldr	r2, [pc, #260]	; (8000c8c <HAL_ADC_Start+0x154>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d105      	bne.n	8000b96 <HAL_ADC_Start+0x5e>
 8000b8a:	4b41      	ldr	r3, [pc, #260]	; (8000c90 <HAL_ADC_Start+0x158>)
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d115      	bne.n	8000bc2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b9a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d026      	beq.n	8000bfe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bb4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000bb8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000bc0:	e01d      	b.n	8000bfe <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a2f      	ldr	r2, [pc, #188]	; (8000c90 <HAL_ADC_Start+0x158>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d004      	beq.n	8000be2 <HAL_ADC_Start+0xaa>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a2b      	ldr	r2, [pc, #172]	; (8000c8c <HAL_ADC_Start+0x154>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d10d      	bne.n	8000bfe <HAL_ADC_Start+0xc6>
 8000be2:	4b2b      	ldr	r3, [pc, #172]	; (8000c90 <HAL_ADC_Start+0x158>)
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d007      	beq.n	8000bfe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000bf6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d006      	beq.n	8000c18 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c0e:	f023 0206 	bic.w	r2, r3, #6
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c16:	e002      	b.n	8000c1e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2200      	movs	r2, #0
 8000c22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f06f 0202 	mvn.w	r2, #2
 8000c2e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000c3a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000c3e:	d113      	bne.n	8000c68 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000c44:	4a11      	ldr	r2, [pc, #68]	; (8000c8c <HAL_ADC_Start+0x154>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d105      	bne.n	8000c56 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000c4a:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <HAL_ADC_Start+0x158>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d108      	bne.n	8000c68 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	689a      	ldr	r2, [r3, #8]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	e00c      	b.n	8000c82 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	689a      	ldr	r2, [r3, #8]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	e003      	b.n	8000c82 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40012800 	.word	0x40012800
 8000c90:	40012400 	.word	0x40012400

08000c94 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000c94:	b590      	push	{r4, r7, lr}
 8000c96:	b087      	sub	sp, #28
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000caa:	f7ff fe2d 	bl	8000908 <HAL_GetTick>
 8000cae:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d00b      	beq.n	8000cd6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc2:	f043 0220 	orr.w	r2, r3, #32
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e0c8      	b.n	8000e68 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d12a      	bne.n	8000d3a <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d123      	bne.n	8000d3a <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000cf2:	e01a      	b.n	8000d2a <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cfa:	d016      	beq.n	8000d2a <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d007      	beq.n	8000d12 <HAL_ADC_PollForConversion+0x7e>
 8000d02:	f7ff fe01 	bl	8000908 <HAL_GetTick>
 8000d06:	4602      	mov	r2, r0
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	683a      	ldr	r2, [r7, #0]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d20b      	bcs.n	8000d2a <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d16:	f043 0204 	orr.w	r2, r3, #4
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2200      	movs	r2, #0
 8000d22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000d26:	2303      	movs	r3, #3
 8000d28:	e09e      	b.n	8000e68 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f003 0302 	and.w	r3, r3, #2
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d0dd      	beq.n	8000cf4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000d38:	e06c      	b.n	8000e14 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000d3a:	4b4d      	ldr	r3, [pc, #308]	; (8000e70 <HAL_ADC_PollForConversion+0x1dc>)
 8000d3c:	681c      	ldr	r4, [r3, #0]
 8000d3e:	2002      	movs	r0, #2
 8000d40:	f001 fa62 	bl	8002208 <HAL_RCCEx_GetPeriphCLKFreq>
 8000d44:	4603      	mov	r3, r0
 8000d46:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	6919      	ldr	r1, [r3, #16]
 8000d50:	4b48      	ldr	r3, [pc, #288]	; (8000e74 <HAL_ADC_PollForConversion+0x1e0>)
 8000d52:	400b      	ands	r3, r1
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d118      	bne.n	8000d8a <HAL_ADC_PollForConversion+0xf6>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	68d9      	ldr	r1, [r3, #12]
 8000d5e:	4b46      	ldr	r3, [pc, #280]	; (8000e78 <HAL_ADC_PollForConversion+0x1e4>)
 8000d60:	400b      	ands	r3, r1
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d111      	bne.n	8000d8a <HAL_ADC_PollForConversion+0xf6>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	6919      	ldr	r1, [r3, #16]
 8000d6c:	4b43      	ldr	r3, [pc, #268]	; (8000e7c <HAL_ADC_PollForConversion+0x1e8>)
 8000d6e:	400b      	ands	r3, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d108      	bne.n	8000d86 <HAL_ADC_PollForConversion+0xf2>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	68d9      	ldr	r1, [r3, #12]
 8000d7a:	4b41      	ldr	r3, [pc, #260]	; (8000e80 <HAL_ADC_PollForConversion+0x1ec>)
 8000d7c:	400b      	ands	r3, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d101      	bne.n	8000d86 <HAL_ADC_PollForConversion+0xf2>
 8000d82:	2314      	movs	r3, #20
 8000d84:	e020      	b.n	8000dc8 <HAL_ADC_PollForConversion+0x134>
 8000d86:	2329      	movs	r3, #41	; 0x29
 8000d88:	e01e      	b.n	8000dc8 <HAL_ADC_PollForConversion+0x134>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	6919      	ldr	r1, [r3, #16]
 8000d90:	4b3a      	ldr	r3, [pc, #232]	; (8000e7c <HAL_ADC_PollForConversion+0x1e8>)
 8000d92:	400b      	ands	r3, r1
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d106      	bne.n	8000da6 <HAL_ADC_PollForConversion+0x112>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	68d9      	ldr	r1, [r3, #12]
 8000d9e:	4b38      	ldr	r3, [pc, #224]	; (8000e80 <HAL_ADC_PollForConversion+0x1ec>)
 8000da0:	400b      	ands	r3, r1
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d00d      	beq.n	8000dc2 <HAL_ADC_PollForConversion+0x12e>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	6919      	ldr	r1, [r3, #16]
 8000dac:	4b35      	ldr	r3, [pc, #212]	; (8000e84 <HAL_ADC_PollForConversion+0x1f0>)
 8000dae:	400b      	ands	r3, r1
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d108      	bne.n	8000dc6 <HAL_ADC_PollForConversion+0x132>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	68d9      	ldr	r1, [r3, #12]
 8000dba:	4b32      	ldr	r3, [pc, #200]	; (8000e84 <HAL_ADC_PollForConversion+0x1f0>)
 8000dbc:	400b      	ands	r3, r1
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d101      	bne.n	8000dc6 <HAL_ADC_PollForConversion+0x132>
 8000dc2:	2354      	movs	r3, #84	; 0x54
 8000dc4:	e000      	b.n	8000dc8 <HAL_ADC_PollForConversion+0x134>
 8000dc6:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000dc8:	fb02 f303 	mul.w	r3, r2, r3
 8000dcc:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000dce:	e01d      	b.n	8000e0c <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd6:	d016      	beq.n	8000e06 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d007      	beq.n	8000dee <HAL_ADC_PollForConversion+0x15a>
 8000dde:	f7ff fd93 	bl	8000908 <HAL_GetTick>
 8000de2:	4602      	mov	r2, r0
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	1ad3      	subs	r3, r2, r3
 8000de8:	683a      	ldr	r2, [r7, #0]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d20b      	bcs.n	8000e06 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df2:	f043 0204 	orr.w	r2, r3, #4
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000e02:	2303      	movs	r3, #3
 8000e04:	e030      	b.n	8000e68 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d8dd      	bhi.n	8000dd0 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f06f 0212 	mvn.w	r2, #18
 8000e1c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e22:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000e34:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e38:	d115      	bne.n	8000e66 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d111      	bne.n	8000e66 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d105      	bne.n	8000e66 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5e:	f043 0201 	orr.w	r2, r3, #1
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000e66:	2300      	movs	r3, #0
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	371c      	adds	r7, #28
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd90      	pop	{r4, r7, pc}
 8000e70:	20000000 	.word	0x20000000
 8000e74:	24924924 	.word	0x24924924
 8000e78:	00924924 	.word	0x00924924
 8000e7c:	12492492 	.word	0x12492492
 8000e80:	00492492 	.word	0x00492492
 8000e84:	00249249 	.word	0x00249249

08000e88 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr

08000ea0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d101      	bne.n	8000ec0 <HAL_ADC_ConfigChannel+0x20>
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	e0dc      	b.n	800107a <HAL_ADC_ConfigChannel+0x1da>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	2b06      	cmp	r3, #6
 8000ece:	d81c      	bhi.n	8000f0a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685a      	ldr	r2, [r3, #4]
 8000eda:	4613      	mov	r3, r2
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	4413      	add	r3, r2
 8000ee0:	3b05      	subs	r3, #5
 8000ee2:	221f      	movs	r2, #31
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	4019      	ands	r1, r3
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	6818      	ldr	r0, [r3, #0]
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685a      	ldr	r2, [r3, #4]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	4413      	add	r3, r2
 8000efa:	3b05      	subs	r3, #5
 8000efc:	fa00 f203 	lsl.w	r2, r0, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	430a      	orrs	r2, r1
 8000f06:	635a      	str	r2, [r3, #52]	; 0x34
 8000f08:	e03c      	b.n	8000f84 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	2b0c      	cmp	r3, #12
 8000f10:	d81c      	bhi.n	8000f4c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685a      	ldr	r2, [r3, #4]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	4413      	add	r3, r2
 8000f22:	3b23      	subs	r3, #35	; 0x23
 8000f24:	221f      	movs	r2, #31
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	4019      	ands	r1, r3
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	6818      	ldr	r0, [r3, #0]
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685a      	ldr	r2, [r3, #4]
 8000f36:	4613      	mov	r3, r2
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	4413      	add	r3, r2
 8000f3c:	3b23      	subs	r3, #35	; 0x23
 8000f3e:	fa00 f203 	lsl.w	r2, r0, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	430a      	orrs	r2, r1
 8000f48:	631a      	str	r2, [r3, #48]	; 0x30
 8000f4a:	e01b      	b.n	8000f84 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685a      	ldr	r2, [r3, #4]
 8000f56:	4613      	mov	r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	4413      	add	r3, r2
 8000f5c:	3b41      	subs	r3, #65	; 0x41
 8000f5e:	221f      	movs	r2, #31
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	4019      	ands	r1, r3
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	6818      	ldr	r0, [r3, #0]
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685a      	ldr	r2, [r3, #4]
 8000f70:	4613      	mov	r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	4413      	add	r3, r2
 8000f76:	3b41      	subs	r3, #65	; 0x41
 8000f78:	fa00 f203 	lsl.w	r2, r0, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	430a      	orrs	r2, r1
 8000f82:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b09      	cmp	r3, #9
 8000f8a:	d91c      	bls.n	8000fc6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	68d9      	ldr	r1, [r3, #12]
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	4613      	mov	r3, r2
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	4413      	add	r3, r2
 8000f9c:	3b1e      	subs	r3, #30
 8000f9e:	2207      	movs	r2, #7
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	4019      	ands	r1, r3
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	6898      	ldr	r0, [r3, #8]
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	4413      	add	r3, r2
 8000fb6:	3b1e      	subs	r3, #30
 8000fb8:	fa00 f203 	lsl.w	r2, r0, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	60da      	str	r2, [r3, #12]
 8000fc4:	e019      	b.n	8000ffa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	6919      	ldr	r1, [r3, #16]
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	4413      	add	r3, r2
 8000fd6:	2207      	movs	r2, #7
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	4019      	ands	r1, r3
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	6898      	ldr	r0, [r3, #8]
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	4413      	add	r3, r2
 8000fee:	fa00 f203 	lsl.w	r2, r0, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2b10      	cmp	r3, #16
 8001000:	d003      	beq.n	800100a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001006:	2b11      	cmp	r3, #17
 8001008:	d132      	bne.n	8001070 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a1d      	ldr	r2, [pc, #116]	; (8001084 <HAL_ADC_ConfigChannel+0x1e4>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d125      	bne.n	8001060 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d126      	bne.n	8001070 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001030:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b10      	cmp	r3, #16
 8001038:	d11a      	bne.n	8001070 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800103a:	4b13      	ldr	r3, [pc, #76]	; (8001088 <HAL_ADC_ConfigChannel+0x1e8>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a13      	ldr	r2, [pc, #76]	; (800108c <HAL_ADC_ConfigChannel+0x1ec>)
 8001040:	fba2 2303 	umull	r2, r3, r2, r3
 8001044:	0c9a      	lsrs	r2, r3, #18
 8001046:	4613      	mov	r3, r2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	4413      	add	r3, r2
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001050:	e002      	b.n	8001058 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	3b01      	subs	r3, #1
 8001056:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1f9      	bne.n	8001052 <HAL_ADC_ConfigChannel+0x1b2>
 800105e:	e007      	b.n	8001070 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001064:	f043 0220 	orr.w	r2, r3, #32
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001078:	7bfb      	ldrb	r3, [r7, #15]
}
 800107a:	4618      	mov	r0, r3
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr
 8001084:	40012400 	.word	0x40012400
 8001088:	20000000 	.word	0x20000000
 800108c:	431bde83 	.word	0x431bde83

08001090 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800109c:	2300      	movs	r3, #0
 800109e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d039      	beq.n	8001122 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	689a      	ldr	r2, [r3, #8]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f042 0201 	orr.w	r2, r2, #1
 80010bc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010be:	4b1b      	ldr	r3, [pc, #108]	; (800112c <ADC_Enable+0x9c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a1b      	ldr	r2, [pc, #108]	; (8001130 <ADC_Enable+0xa0>)
 80010c4:	fba2 2303 	umull	r2, r3, r2, r3
 80010c8:	0c9b      	lsrs	r3, r3, #18
 80010ca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80010cc:	e002      	b.n	80010d4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	3b01      	subs	r3, #1
 80010d2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1f9      	bne.n	80010ce <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80010da:	f7ff fc15 	bl	8000908 <HAL_GetTick>
 80010de:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80010e0:	e018      	b.n	8001114 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80010e2:	f7ff fc11 	bl	8000908 <HAL_GetTick>
 80010e6:	4602      	mov	r2, r0
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d911      	bls.n	8001114 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f4:	f043 0210 	orr.w	r2, r3, #16
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001100:	f043 0201 	orr.w	r2, r3, #1
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e007      	b.n	8001124 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	2b01      	cmp	r3, #1
 8001120:	d1df      	bne.n	80010e2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001122:	2300      	movs	r3, #0
}
 8001124:	4618      	mov	r0, r3
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000000 	.word	0x20000000
 8001130:	431bde83 	.word	0x431bde83

08001134 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	2b01      	cmp	r3, #1
 800114c:	d127      	bne.n	800119e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f022 0201 	bic.w	r2, r2, #1
 800115c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800115e:	f7ff fbd3 	bl	8000908 <HAL_GetTick>
 8001162:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001164:	e014      	b.n	8001190 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001166:	f7ff fbcf 	bl	8000908 <HAL_GetTick>
 800116a:	4602      	mov	r2, r0
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	2b02      	cmp	r3, #2
 8001172:	d90d      	bls.n	8001190 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001178:	f043 0210 	orr.w	r2, r3, #16
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001184:	f043 0201 	orr.w	r2, r3, #1
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e007      	b.n	80011a0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	2b01      	cmp	r3, #1
 800119c:	d0e3      	beq.n	8001166 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800119e:	2300      	movs	r3, #0
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d101      	bne.n	80011ba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e0ed      	b.n	8001396 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d102      	bne.n	80011cc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff f928 	bl	800041c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f022 0202 	bic.w	r2, r2, #2
 80011da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011dc:	f7ff fb94 	bl	8000908 <HAL_GetTick>
 80011e0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011e2:	e012      	b.n	800120a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011e4:	f7ff fb90 	bl	8000908 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b0a      	cmp	r3, #10
 80011f0:	d90b      	bls.n	800120a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2205      	movs	r2, #5
 8001202:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e0c5      	b.n	8001396 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1e5      	bne.n	80011e4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f042 0201 	orr.w	r2, r2, #1
 8001226:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001228:	f7ff fb6e 	bl	8000908 <HAL_GetTick>
 800122c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800122e:	e012      	b.n	8001256 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001230:	f7ff fb6a 	bl	8000908 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b0a      	cmp	r3, #10
 800123c:	d90b      	bls.n	8001256 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001242:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2205      	movs	r2, #5
 800124e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e09f      	b.n	8001396 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0e5      	beq.n	8001230 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	7e1b      	ldrb	r3, [r3, #24]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d108      	bne.n	800127e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	e007      	b.n	800128e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800128c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	7e5b      	ldrb	r3, [r3, #25]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d108      	bne.n	80012a8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	e007      	b.n	80012b8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	7e9b      	ldrb	r3, [r3, #26]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d108      	bne.n	80012d2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f042 0220 	orr.w	r2, r2, #32
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	e007      	b.n	80012e2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f022 0220 	bic.w	r2, r2, #32
 80012e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	7edb      	ldrb	r3, [r3, #27]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d108      	bne.n	80012fc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f022 0210 	bic.w	r2, r2, #16
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	e007      	b.n	800130c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f042 0210 	orr.w	r2, r2, #16
 800130a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	7f1b      	ldrb	r3, [r3, #28]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d108      	bne.n	8001326 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f042 0208 	orr.w	r2, r2, #8
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	e007      	b.n	8001336 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f022 0208 	bic.w	r2, r2, #8
 8001334:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	7f5b      	ldrb	r3, [r3, #29]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d108      	bne.n	8001350 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f042 0204 	orr.w	r2, r2, #4
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	e007      	b.n	8001360 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 0204 	bic.w	r2, r2, #4
 800135e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	431a      	orrs	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	431a      	orrs	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	695b      	ldr	r3, [r3, #20]
 8001374:	ea42 0103 	orr.w	r1, r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	1e5a      	subs	r2, r3, #1
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	430a      	orrs	r2, r1
 8001384:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2201      	movs	r2, #1
 8001390:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <__NVIC_SetPriorityGrouping+0x44>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013b6:	68ba      	ldr	r2, [r7, #8]
 80013b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013bc:	4013      	ands	r3, r2
 80013be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013d2:	4a04      	ldr	r2, [pc, #16]	; (80013e4 <__NVIC_SetPriorityGrouping+0x44>)
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	60d3      	str	r3, [r2, #12]
}
 80013d8:	bf00      	nop
 80013da:	3714      	adds	r7, #20
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013ec:	4b04      	ldr	r3, [pc, #16]	; (8001400 <__NVIC_GetPriorityGrouping+0x18>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	0a1b      	lsrs	r3, r3, #8
 80013f2:	f003 0307 	and.w	r3, r3, #7
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bc80      	pop	{r7}
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	6039      	str	r1, [r7, #0]
 800140e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001414:	2b00      	cmp	r3, #0
 8001416:	db0a      	blt.n	800142e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	b2da      	uxtb	r2, r3
 800141c:	490c      	ldr	r1, [pc, #48]	; (8001450 <__NVIC_SetPriority+0x4c>)
 800141e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001422:	0112      	lsls	r2, r2, #4
 8001424:	b2d2      	uxtb	r2, r2
 8001426:	440b      	add	r3, r1
 8001428:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800142c:	e00a      	b.n	8001444 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	b2da      	uxtb	r2, r3
 8001432:	4908      	ldr	r1, [pc, #32]	; (8001454 <__NVIC_SetPriority+0x50>)
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	f003 030f 	and.w	r3, r3, #15
 800143a:	3b04      	subs	r3, #4
 800143c:	0112      	lsls	r2, r2, #4
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	440b      	add	r3, r1
 8001442:	761a      	strb	r2, [r3, #24]
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	e000e100 	.word	0xe000e100
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001458:	b480      	push	{r7}
 800145a:	b089      	sub	sp, #36	; 0x24
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	f1c3 0307 	rsb	r3, r3, #7
 8001472:	2b04      	cmp	r3, #4
 8001474:	bf28      	it	cs
 8001476:	2304      	movcs	r3, #4
 8001478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3304      	adds	r3, #4
 800147e:	2b06      	cmp	r3, #6
 8001480:	d902      	bls.n	8001488 <NVIC_EncodePriority+0x30>
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3b03      	subs	r3, #3
 8001486:	e000      	b.n	800148a <NVIC_EncodePriority+0x32>
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800148c:	f04f 32ff 	mov.w	r2, #4294967295
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43da      	mvns	r2, r3
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	401a      	ands	r2, r3
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a0:	f04f 31ff 	mov.w	r1, #4294967295
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	fa01 f303 	lsl.w	r3, r1, r3
 80014aa:	43d9      	mvns	r1, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b0:	4313      	orrs	r3, r2
         );
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3724      	adds	r7, #36	; 0x24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr

080014bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014cc:	d301      	bcc.n	80014d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ce:	2301      	movs	r3, #1
 80014d0:	e00f      	b.n	80014f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014d2:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <SysTick_Config+0x40>)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014da:	210f      	movs	r1, #15
 80014dc:	f04f 30ff 	mov.w	r0, #4294967295
 80014e0:	f7ff ff90 	bl	8001404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014e4:	4b05      	ldr	r3, [pc, #20]	; (80014fc <SysTick_Config+0x40>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ea:	4b04      	ldr	r3, [pc, #16]	; (80014fc <SysTick_Config+0x40>)
 80014ec:	2207      	movs	r2, #7
 80014ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	e000e010 	.word	0xe000e010

08001500 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff ff49 	bl	80013a0 <__NVIC_SetPriorityGrouping>
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001516:	b580      	push	{r7, lr}
 8001518:	b086      	sub	sp, #24
 800151a:	af00      	add	r7, sp, #0
 800151c:	4603      	mov	r3, r0
 800151e:	60b9      	str	r1, [r7, #8]
 8001520:	607a      	str	r2, [r7, #4]
 8001522:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001528:	f7ff ff5e 	bl	80013e8 <__NVIC_GetPriorityGrouping>
 800152c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	68b9      	ldr	r1, [r7, #8]
 8001532:	6978      	ldr	r0, [r7, #20]
 8001534:	f7ff ff90 	bl	8001458 <NVIC_EncodePriority>
 8001538:	4602      	mov	r2, r0
 800153a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800153e:	4611      	mov	r1, r2
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ff5f 	bl	8001404 <__NVIC_SetPriority>
}
 8001546:	bf00      	nop
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff ffb0 	bl	80014bc <SysTick_Config>
 800155c:	4603      	mov	r3, r0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
	...

08001568 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001568:	b480      	push	{r7}
 800156a:	b08b      	sub	sp, #44	; 0x2c
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001572:	2300      	movs	r3, #0
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001576:	2300      	movs	r3, #0
 8001578:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800157a:	e179      	b.n	8001870 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800157c:	2201      	movs	r2, #1
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	69fa      	ldr	r2, [r7, #28]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	429a      	cmp	r2, r3
 8001596:	f040 8168 	bne.w	800186a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	4aa0      	ldr	r2, [pc, #640]	; (8001820 <HAL_GPIO_Init+0x2b8>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d05e      	beq.n	8001662 <HAL_GPIO_Init+0xfa>
 80015a4:	4a9e      	ldr	r2, [pc, #632]	; (8001820 <HAL_GPIO_Init+0x2b8>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d875      	bhi.n	8001696 <HAL_GPIO_Init+0x12e>
 80015aa:	4a9e      	ldr	r2, [pc, #632]	; (8001824 <HAL_GPIO_Init+0x2bc>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d058      	beq.n	8001662 <HAL_GPIO_Init+0xfa>
 80015b0:	4a9c      	ldr	r2, [pc, #624]	; (8001824 <HAL_GPIO_Init+0x2bc>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d86f      	bhi.n	8001696 <HAL_GPIO_Init+0x12e>
 80015b6:	4a9c      	ldr	r2, [pc, #624]	; (8001828 <HAL_GPIO_Init+0x2c0>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d052      	beq.n	8001662 <HAL_GPIO_Init+0xfa>
 80015bc:	4a9a      	ldr	r2, [pc, #616]	; (8001828 <HAL_GPIO_Init+0x2c0>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d869      	bhi.n	8001696 <HAL_GPIO_Init+0x12e>
 80015c2:	4a9a      	ldr	r2, [pc, #616]	; (800182c <HAL_GPIO_Init+0x2c4>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d04c      	beq.n	8001662 <HAL_GPIO_Init+0xfa>
 80015c8:	4a98      	ldr	r2, [pc, #608]	; (800182c <HAL_GPIO_Init+0x2c4>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d863      	bhi.n	8001696 <HAL_GPIO_Init+0x12e>
 80015ce:	4a98      	ldr	r2, [pc, #608]	; (8001830 <HAL_GPIO_Init+0x2c8>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d046      	beq.n	8001662 <HAL_GPIO_Init+0xfa>
 80015d4:	4a96      	ldr	r2, [pc, #600]	; (8001830 <HAL_GPIO_Init+0x2c8>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d85d      	bhi.n	8001696 <HAL_GPIO_Init+0x12e>
 80015da:	2b12      	cmp	r3, #18
 80015dc:	d82a      	bhi.n	8001634 <HAL_GPIO_Init+0xcc>
 80015de:	2b12      	cmp	r3, #18
 80015e0:	d859      	bhi.n	8001696 <HAL_GPIO_Init+0x12e>
 80015e2:	a201      	add	r2, pc, #4	; (adr r2, 80015e8 <HAL_GPIO_Init+0x80>)
 80015e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e8:	08001663 	.word	0x08001663
 80015ec:	0800163d 	.word	0x0800163d
 80015f0:	0800164f 	.word	0x0800164f
 80015f4:	08001691 	.word	0x08001691
 80015f8:	08001697 	.word	0x08001697
 80015fc:	08001697 	.word	0x08001697
 8001600:	08001697 	.word	0x08001697
 8001604:	08001697 	.word	0x08001697
 8001608:	08001697 	.word	0x08001697
 800160c:	08001697 	.word	0x08001697
 8001610:	08001697 	.word	0x08001697
 8001614:	08001697 	.word	0x08001697
 8001618:	08001697 	.word	0x08001697
 800161c:	08001697 	.word	0x08001697
 8001620:	08001697 	.word	0x08001697
 8001624:	08001697 	.word	0x08001697
 8001628:	08001697 	.word	0x08001697
 800162c:	08001645 	.word	0x08001645
 8001630:	08001659 	.word	0x08001659
 8001634:	4a7f      	ldr	r2, [pc, #508]	; (8001834 <HAL_GPIO_Init+0x2cc>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d013      	beq.n	8001662 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800163a:	e02c      	b.n	8001696 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	623b      	str	r3, [r7, #32]
          break;
 8001642:	e029      	b.n	8001698 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	3304      	adds	r3, #4
 800164a:	623b      	str	r3, [r7, #32]
          break;
 800164c:	e024      	b.n	8001698 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	3308      	adds	r3, #8
 8001654:	623b      	str	r3, [r7, #32]
          break;
 8001656:	e01f      	b.n	8001698 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	330c      	adds	r3, #12
 800165e:	623b      	str	r3, [r7, #32]
          break;
 8001660:	e01a      	b.n	8001698 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d102      	bne.n	8001670 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800166a:	2304      	movs	r3, #4
 800166c:	623b      	str	r3, [r7, #32]
          break;
 800166e:	e013      	b.n	8001698 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d105      	bne.n	8001684 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001678:	2308      	movs	r3, #8
 800167a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	69fa      	ldr	r2, [r7, #28]
 8001680:	611a      	str	r2, [r3, #16]
          break;
 8001682:	e009      	b.n	8001698 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001684:	2308      	movs	r3, #8
 8001686:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	69fa      	ldr	r2, [r7, #28]
 800168c:	615a      	str	r2, [r3, #20]
          break;
 800168e:	e003      	b.n	8001698 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001690:	2300      	movs	r3, #0
 8001692:	623b      	str	r3, [r7, #32]
          break;
 8001694:	e000      	b.n	8001698 <HAL_GPIO_Init+0x130>
          break;
 8001696:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	2bff      	cmp	r3, #255	; 0xff
 800169c:	d801      	bhi.n	80016a2 <HAL_GPIO_Init+0x13a>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	e001      	b.n	80016a6 <HAL_GPIO_Init+0x13e>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	3304      	adds	r3, #4
 80016a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	2bff      	cmp	r3, #255	; 0xff
 80016ac:	d802      	bhi.n	80016b4 <HAL_GPIO_Init+0x14c>
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	e002      	b.n	80016ba <HAL_GPIO_Init+0x152>
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b6:	3b08      	subs	r3, #8
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	210f      	movs	r1, #15
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	fa01 f303 	lsl.w	r3, r1, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	401a      	ands	r2, r3
 80016cc:	6a39      	ldr	r1, [r7, #32]
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	fa01 f303 	lsl.w	r3, r1, r3
 80016d4:	431a      	orrs	r2, r3
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 80c1 	beq.w	800186a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016e8:	4b53      	ldr	r3, [pc, #332]	; (8001838 <HAL_GPIO_Init+0x2d0>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	4a52      	ldr	r2, [pc, #328]	; (8001838 <HAL_GPIO_Init+0x2d0>)
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	6193      	str	r3, [r2, #24]
 80016f4:	4b50      	ldr	r3, [pc, #320]	; (8001838 <HAL_GPIO_Init+0x2d0>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001700:	4a4e      	ldr	r2, [pc, #312]	; (800183c <HAL_GPIO_Init+0x2d4>)
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	089b      	lsrs	r3, r3, #2
 8001706:	3302      	adds	r3, #2
 8001708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800170c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001710:	f003 0303 	and.w	r3, r3, #3
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	220f      	movs	r2, #15
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43db      	mvns	r3, r3
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	4013      	ands	r3, r2
 8001722:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a46      	ldr	r2, [pc, #280]	; (8001840 <HAL_GPIO_Init+0x2d8>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d01f      	beq.n	800176c <HAL_GPIO_Init+0x204>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4a45      	ldr	r2, [pc, #276]	; (8001844 <HAL_GPIO_Init+0x2dc>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d019      	beq.n	8001768 <HAL_GPIO_Init+0x200>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4a44      	ldr	r2, [pc, #272]	; (8001848 <HAL_GPIO_Init+0x2e0>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d013      	beq.n	8001764 <HAL_GPIO_Init+0x1fc>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a43      	ldr	r2, [pc, #268]	; (800184c <HAL_GPIO_Init+0x2e4>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d00d      	beq.n	8001760 <HAL_GPIO_Init+0x1f8>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a42      	ldr	r2, [pc, #264]	; (8001850 <HAL_GPIO_Init+0x2e8>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d007      	beq.n	800175c <HAL_GPIO_Init+0x1f4>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a41      	ldr	r2, [pc, #260]	; (8001854 <HAL_GPIO_Init+0x2ec>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d101      	bne.n	8001758 <HAL_GPIO_Init+0x1f0>
 8001754:	2305      	movs	r3, #5
 8001756:	e00a      	b.n	800176e <HAL_GPIO_Init+0x206>
 8001758:	2306      	movs	r3, #6
 800175a:	e008      	b.n	800176e <HAL_GPIO_Init+0x206>
 800175c:	2304      	movs	r3, #4
 800175e:	e006      	b.n	800176e <HAL_GPIO_Init+0x206>
 8001760:	2303      	movs	r3, #3
 8001762:	e004      	b.n	800176e <HAL_GPIO_Init+0x206>
 8001764:	2302      	movs	r3, #2
 8001766:	e002      	b.n	800176e <HAL_GPIO_Init+0x206>
 8001768:	2301      	movs	r3, #1
 800176a:	e000      	b.n	800176e <HAL_GPIO_Init+0x206>
 800176c:	2300      	movs	r3, #0
 800176e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001770:	f002 0203 	and.w	r2, r2, #3
 8001774:	0092      	lsls	r2, r2, #2
 8001776:	4093      	lsls	r3, r2
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	4313      	orrs	r3, r2
 800177c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800177e:	492f      	ldr	r1, [pc, #188]	; (800183c <HAL_GPIO_Init+0x2d4>)
 8001780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001782:	089b      	lsrs	r3, r3, #2
 8001784:	3302      	adds	r3, #2
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d006      	beq.n	80017a6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001798:	4b2f      	ldr	r3, [pc, #188]	; (8001858 <HAL_GPIO_Init+0x2f0>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	492e      	ldr	r1, [pc, #184]	; (8001858 <HAL_GPIO_Init+0x2f0>)
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	600b      	str	r3, [r1, #0]
 80017a4:	e006      	b.n	80017b4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017a6:	4b2c      	ldr	r3, [pc, #176]	; (8001858 <HAL_GPIO_Init+0x2f0>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	43db      	mvns	r3, r3
 80017ae:	492a      	ldr	r1, [pc, #168]	; (8001858 <HAL_GPIO_Init+0x2f0>)
 80017b0:	4013      	ands	r3, r2
 80017b2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d006      	beq.n	80017ce <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017c0:	4b25      	ldr	r3, [pc, #148]	; (8001858 <HAL_GPIO_Init+0x2f0>)
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	4924      	ldr	r1, [pc, #144]	; (8001858 <HAL_GPIO_Init+0x2f0>)
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	604b      	str	r3, [r1, #4]
 80017cc:	e006      	b.n	80017dc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017ce:	4b22      	ldr	r3, [pc, #136]	; (8001858 <HAL_GPIO_Init+0x2f0>)
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	43db      	mvns	r3, r3
 80017d6:	4920      	ldr	r1, [pc, #128]	; (8001858 <HAL_GPIO_Init+0x2f0>)
 80017d8:	4013      	ands	r3, r2
 80017da:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d006      	beq.n	80017f6 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017e8:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <HAL_GPIO_Init+0x2f0>)
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	491a      	ldr	r1, [pc, #104]	; (8001858 <HAL_GPIO_Init+0x2f0>)
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	608b      	str	r3, [r1, #8]
 80017f4:	e006      	b.n	8001804 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017f6:	4b18      	ldr	r3, [pc, #96]	; (8001858 <HAL_GPIO_Init+0x2f0>)
 80017f8:	689a      	ldr	r2, [r3, #8]
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	43db      	mvns	r3, r3
 80017fe:	4916      	ldr	r1, [pc, #88]	; (8001858 <HAL_GPIO_Init+0x2f0>)
 8001800:	4013      	ands	r3, r2
 8001802:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d025      	beq.n	800185c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <HAL_GPIO_Init+0x2f0>)
 8001812:	68da      	ldr	r2, [r3, #12]
 8001814:	4910      	ldr	r1, [pc, #64]	; (8001858 <HAL_GPIO_Init+0x2f0>)
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	4313      	orrs	r3, r2
 800181a:	60cb      	str	r3, [r1, #12]
 800181c:	e025      	b.n	800186a <HAL_GPIO_Init+0x302>
 800181e:	bf00      	nop
 8001820:	10320000 	.word	0x10320000
 8001824:	10310000 	.word	0x10310000
 8001828:	10220000 	.word	0x10220000
 800182c:	10210000 	.word	0x10210000
 8001830:	10120000 	.word	0x10120000
 8001834:	10110000 	.word	0x10110000
 8001838:	40021000 	.word	0x40021000
 800183c:	40010000 	.word	0x40010000
 8001840:	40010800 	.word	0x40010800
 8001844:	40010c00 	.word	0x40010c00
 8001848:	40011000 	.word	0x40011000
 800184c:	40011400 	.word	0x40011400
 8001850:	40011800 	.word	0x40011800
 8001854:	40011c00 	.word	0x40011c00
 8001858:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800185c:	4b0b      	ldr	r3, [pc, #44]	; (800188c <HAL_GPIO_Init+0x324>)
 800185e:	68da      	ldr	r2, [r3, #12]
 8001860:	69bb      	ldr	r3, [r7, #24]
 8001862:	43db      	mvns	r3, r3
 8001864:	4909      	ldr	r1, [pc, #36]	; (800188c <HAL_GPIO_Init+0x324>)
 8001866:	4013      	ands	r3, r2
 8001868:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	3301      	adds	r3, #1
 800186e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001876:	fa22 f303 	lsr.w	r3, r2, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	f47f ae7e 	bne.w	800157c <HAL_GPIO_Init+0x14>
  }
}
 8001880:	bf00      	nop
 8001882:	bf00      	nop
 8001884:	372c      	adds	r7, #44	; 0x2c
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr
 800188c:	40010400 	.word	0x40010400

08001890 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e26c      	b.n	8001d7c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f000 8087 	beq.w	80019be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018b0:	4b92      	ldr	r3, [pc, #584]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 030c 	and.w	r3, r3, #12
 80018b8:	2b04      	cmp	r3, #4
 80018ba:	d00c      	beq.n	80018d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018bc:	4b8f      	ldr	r3, [pc, #572]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 030c 	and.w	r3, r3, #12
 80018c4:	2b08      	cmp	r3, #8
 80018c6:	d112      	bne.n	80018ee <HAL_RCC_OscConfig+0x5e>
 80018c8:	4b8c      	ldr	r3, [pc, #560]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d4:	d10b      	bne.n	80018ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d6:	4b89      	ldr	r3, [pc, #548]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d06c      	beq.n	80019bc <HAL_RCC_OscConfig+0x12c>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d168      	bne.n	80019bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e246      	b.n	8001d7c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018f6:	d106      	bne.n	8001906 <HAL_RCC_OscConfig+0x76>
 80018f8:	4b80      	ldr	r3, [pc, #512]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a7f      	ldr	r2, [pc, #508]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 80018fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001902:	6013      	str	r3, [r2, #0]
 8001904:	e02e      	b.n	8001964 <HAL_RCC_OscConfig+0xd4>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d10c      	bne.n	8001928 <HAL_RCC_OscConfig+0x98>
 800190e:	4b7b      	ldr	r3, [pc, #492]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a7a      	ldr	r2, [pc, #488]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001914:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	4b78      	ldr	r3, [pc, #480]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a77      	ldr	r2, [pc, #476]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001920:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	e01d      	b.n	8001964 <HAL_RCC_OscConfig+0xd4>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001930:	d10c      	bne.n	800194c <HAL_RCC_OscConfig+0xbc>
 8001932:	4b72      	ldr	r3, [pc, #456]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a71      	ldr	r2, [pc, #452]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001938:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	4b6f      	ldr	r3, [pc, #444]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a6e      	ldr	r2, [pc, #440]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	e00b      	b.n	8001964 <HAL_RCC_OscConfig+0xd4>
 800194c:	4b6b      	ldr	r3, [pc, #428]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a6a      	ldr	r2, [pc, #424]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001956:	6013      	str	r3, [r2, #0]
 8001958:	4b68      	ldr	r3, [pc, #416]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a67      	ldr	r2, [pc, #412]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 800195e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001962:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d013      	beq.n	8001994 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800196c:	f7fe ffcc 	bl	8000908 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001974:	f7fe ffc8 	bl	8000908 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b64      	cmp	r3, #100	; 0x64
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e1fa      	b.n	8001d7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001986:	4b5d      	ldr	r3, [pc, #372]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0f0      	beq.n	8001974 <HAL_RCC_OscConfig+0xe4>
 8001992:	e014      	b.n	80019be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001994:	f7fe ffb8 	bl	8000908 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800199c:	f7fe ffb4 	bl	8000908 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b64      	cmp	r3, #100	; 0x64
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e1e6      	b.n	8001d7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ae:	4b53      	ldr	r3, [pc, #332]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1f0      	bne.n	800199c <HAL_RCC_OscConfig+0x10c>
 80019ba:	e000      	b.n	80019be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d063      	beq.n	8001a92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019ca:	4b4c      	ldr	r3, [pc, #304]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f003 030c 	and.w	r3, r3, #12
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00b      	beq.n	80019ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019d6:	4b49      	ldr	r3, [pc, #292]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f003 030c 	and.w	r3, r3, #12
 80019de:	2b08      	cmp	r3, #8
 80019e0:	d11c      	bne.n	8001a1c <HAL_RCC_OscConfig+0x18c>
 80019e2:	4b46      	ldr	r3, [pc, #280]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d116      	bne.n	8001a1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ee:	4b43      	ldr	r3, [pc, #268]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d005      	beq.n	8001a06 <HAL_RCC_OscConfig+0x176>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d001      	beq.n	8001a06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e1ba      	b.n	8001d7c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a06:	4b3d      	ldr	r3, [pc, #244]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	4939      	ldr	r1, [pc, #228]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a1a:	e03a      	b.n	8001a92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d020      	beq.n	8001a66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a24:	4b36      	ldr	r3, [pc, #216]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2a:	f7fe ff6d 	bl	8000908 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a32:	f7fe ff69 	bl	8000908 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e19b      	b.n	8001d7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a44:	4b2d      	ldr	r3, [pc, #180]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0f0      	beq.n	8001a32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a50:	4b2a      	ldr	r3, [pc, #168]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	4927      	ldr	r1, [pc, #156]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	600b      	str	r3, [r1, #0]
 8001a64:	e015      	b.n	8001a92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a66:	4b26      	ldr	r3, [pc, #152]	; (8001b00 <HAL_RCC_OscConfig+0x270>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6c:	f7fe ff4c 	bl	8000908 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a74:	f7fe ff48 	bl	8000908 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e17a      	b.n	8001d7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a86:	4b1d      	ldr	r3, [pc, #116]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f0      	bne.n	8001a74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0308 	and.w	r3, r3, #8
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d03a      	beq.n	8001b14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d019      	beq.n	8001ada <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aa6:	4b17      	ldr	r3, [pc, #92]	; (8001b04 <HAL_RCC_OscConfig+0x274>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aac:	f7fe ff2c 	bl	8000908 <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab4:	f7fe ff28 	bl	8000908 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e15a      	b.n	8001d7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ac6:	4b0d      	ldr	r3, [pc, #52]	; (8001afc <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0f0      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ad2:	2001      	movs	r0, #1
 8001ad4:	f000 fac4 	bl	8002060 <RCC_Delay>
 8001ad8:	e01c      	b.n	8001b14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ada:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <HAL_RCC_OscConfig+0x274>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae0:	f7fe ff12 	bl	8000908 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae6:	e00f      	b.n	8001b08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ae8:	f7fe ff0e 	bl	8000908 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d908      	bls.n	8001b08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e140      	b.n	8001d7c <HAL_RCC_OscConfig+0x4ec>
 8001afa:	bf00      	nop
 8001afc:	40021000 	.word	0x40021000
 8001b00:	42420000 	.word	0x42420000
 8001b04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b08:	4b9e      	ldr	r3, [pc, #632]	; (8001d84 <HAL_RCC_OscConfig+0x4f4>)
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1e9      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 80a6 	beq.w	8001c6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b22:	2300      	movs	r3, #0
 8001b24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b26:	4b97      	ldr	r3, [pc, #604]	; (8001d84 <HAL_RCC_OscConfig+0x4f4>)
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10d      	bne.n	8001b4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b32:	4b94      	ldr	r3, [pc, #592]	; (8001d84 <HAL_RCC_OscConfig+0x4f4>)
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	4a93      	ldr	r2, [pc, #588]	; (8001d84 <HAL_RCC_OscConfig+0x4f4>)
 8001b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b3c:	61d3      	str	r3, [r2, #28]
 8001b3e:	4b91      	ldr	r3, [pc, #580]	; (8001d84 <HAL_RCC_OscConfig+0x4f4>)
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4e:	4b8e      	ldr	r3, [pc, #568]	; (8001d88 <HAL_RCC_OscConfig+0x4f8>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d118      	bne.n	8001b8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b5a:	4b8b      	ldr	r3, [pc, #556]	; (8001d88 <HAL_RCC_OscConfig+0x4f8>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a8a      	ldr	r2, [pc, #552]	; (8001d88 <HAL_RCC_OscConfig+0x4f8>)
 8001b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b66:	f7fe fecf 	bl	8000908 <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b6e:	f7fe fecb 	bl	8000908 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b64      	cmp	r3, #100	; 0x64
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e0fd      	b.n	8001d7c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b80:	4b81      	ldr	r3, [pc, #516]	; (8001d88 <HAL_RCC_OscConfig+0x4f8>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0f0      	beq.n	8001b6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d106      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x312>
 8001b94:	4b7b      	ldr	r3, [pc, #492]	; (8001d84 <HAL_RCC_OscConfig+0x4f4>)
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	4a7a      	ldr	r2, [pc, #488]	; (8001d84 <HAL_RCC_OscConfig+0x4f4>)
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	6213      	str	r3, [r2, #32]
 8001ba0:	e02d      	b.n	8001bfe <HAL_RCC_OscConfig+0x36e>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d10c      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x334>
 8001baa:	4b76      	ldr	r3, [pc, #472]	; (8001d84 <HAL_RCC_OscConfig+0x4f4>)
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	4a75      	ldr	r2, [pc, #468]	; (8001d84 <HAL_RCC_OscConfig+0x4f4>)
 8001bb0:	f023 0301 	bic.w	r3, r3, #1
 8001bb4:	6213      	str	r3, [r2, #32]
 8001bb6:	4b73      	ldr	r3, [pc, #460]	; (8001d84 <HAL_RCC_OscConfig+0x4f4>)
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	4a72      	ldr	r2, [pc, #456]	; (8001d84 <HAL_RCC_OscConfig+0x4f4>)
 8001bbc:	f023 0304 	bic.w	r3, r3, #4
 8001bc0:	6213      	str	r3, [r2, #32]
 8001bc2:	e01c      	b.n	8001bfe <HAL_RCC_OscConfig+0x36e>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	2b05      	cmp	r3, #5
 8001bca:	d10c      	bne.n	8001be6 <HAL_RCC_OscConfig+0x356>
 8001bcc:	4b6d      	ldr	r3, [pc, #436]	; (8001d84 <HAL_RCC_OscConfig+0x4f4>)
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	4a6c      	ldr	r2, [pc, #432]	; (8001d84 <HAL_RCC_OscConfig+0x4f4>)
 8001bd2:	f043 0304 	orr.w	r3, r3, #4
 8001bd6:	6213      	str	r3, [r2, #32]
 8001bd8:	4b6a      	ldr	r3, [pc, #424]	; (8001d84 <HAL_RCC_OscConfig+0x4f4>)
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	4a69      	ldr	r2, [pc, #420]	; (8001d84 <HAL_RCC_OscConfig+0x4f4>)
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	6213      	str	r3, [r2, #32]
 8001be4:	e00b      	b.n	8001bfe <HAL_RCC_OscConfig+0x36e>
 8001be6:	4b67      	ldr	r3, [pc, #412]	; (8001d84 <HAL_RCC_OscConfig+0x4f4>)
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	4a66      	ldr	r2, [pc, #408]	; (8001d84 <HAL_RCC_OscConfig+0x4f4>)
 8001bec:	f023 0301 	bic.w	r3, r3, #1
 8001bf0:	6213      	str	r3, [r2, #32]
 8001bf2:	4b64      	ldr	r3, [pc, #400]	; (8001d84 <HAL_RCC_OscConfig+0x4f4>)
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	4a63      	ldr	r2, [pc, #396]	; (8001d84 <HAL_RCC_OscConfig+0x4f4>)
 8001bf8:	f023 0304 	bic.w	r3, r3, #4
 8001bfc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d015      	beq.n	8001c32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c06:	f7fe fe7f 	bl	8000908 <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c0c:	e00a      	b.n	8001c24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c0e:	f7fe fe7b 	bl	8000908 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e0ab      	b.n	8001d7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c24:	4b57      	ldr	r3, [pc, #348]	; (8001d84 <HAL_RCC_OscConfig+0x4f4>)
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0ee      	beq.n	8001c0e <HAL_RCC_OscConfig+0x37e>
 8001c30:	e014      	b.n	8001c5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c32:	f7fe fe69 	bl	8000908 <HAL_GetTick>
 8001c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c38:	e00a      	b.n	8001c50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c3a:	f7fe fe65 	bl	8000908 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e095      	b.n	8001d7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c50:	4b4c      	ldr	r3, [pc, #304]	; (8001d84 <HAL_RCC_OscConfig+0x4f4>)
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1ee      	bne.n	8001c3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c5c:	7dfb      	ldrb	r3, [r7, #23]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d105      	bne.n	8001c6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c62:	4b48      	ldr	r3, [pc, #288]	; (8001d84 <HAL_RCC_OscConfig+0x4f4>)
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	4a47      	ldr	r2, [pc, #284]	; (8001d84 <HAL_RCC_OscConfig+0x4f4>)
 8001c68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f000 8081 	beq.w	8001d7a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c78:	4b42      	ldr	r3, [pc, #264]	; (8001d84 <HAL_RCC_OscConfig+0x4f4>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 030c 	and.w	r3, r3, #12
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	d061      	beq.n	8001d48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69db      	ldr	r3, [r3, #28]
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d146      	bne.n	8001d1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8c:	4b3f      	ldr	r3, [pc, #252]	; (8001d8c <HAL_RCC_OscConfig+0x4fc>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c92:	f7fe fe39 	bl	8000908 <HAL_GetTick>
 8001c96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c9a:	f7fe fe35 	bl	8000908 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e067      	b.n	8001d7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cac:	4b35      	ldr	r3, [pc, #212]	; (8001d84 <HAL_RCC_OscConfig+0x4f4>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1f0      	bne.n	8001c9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6a1b      	ldr	r3, [r3, #32]
 8001cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc0:	d108      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cc2:	4b30      	ldr	r3, [pc, #192]	; (8001d84 <HAL_RCC_OscConfig+0x4f4>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	492d      	ldr	r1, [pc, #180]	; (8001d84 <HAL_RCC_OscConfig+0x4f4>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cd4:	4b2b      	ldr	r3, [pc, #172]	; (8001d84 <HAL_RCC_OscConfig+0x4f4>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a19      	ldr	r1, [r3, #32]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce4:	430b      	orrs	r3, r1
 8001ce6:	4927      	ldr	r1, [pc, #156]	; (8001d84 <HAL_RCC_OscConfig+0x4f4>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cec:	4b27      	ldr	r3, [pc, #156]	; (8001d8c <HAL_RCC_OscConfig+0x4fc>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf2:	f7fe fe09 	bl	8000908 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cfa:	f7fe fe05 	bl	8000908 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e037      	b.n	8001d7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d0c:	4b1d      	ldr	r3, [pc, #116]	; (8001d84 <HAL_RCC_OscConfig+0x4f4>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0f0      	beq.n	8001cfa <HAL_RCC_OscConfig+0x46a>
 8001d18:	e02f      	b.n	8001d7a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d1a:	4b1c      	ldr	r3, [pc, #112]	; (8001d8c <HAL_RCC_OscConfig+0x4fc>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d20:	f7fe fdf2 	bl	8000908 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d28:	f7fe fdee 	bl	8000908 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e020      	b.n	8001d7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d3a:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <HAL_RCC_OscConfig+0x4f4>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x498>
 8001d46:	e018      	b.n	8001d7a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d101      	bne.n	8001d54 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e013      	b.n	8001d7c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d54:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <HAL_RCC_OscConfig+0x4f4>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d106      	bne.n	8001d76 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d001      	beq.n	8001d7a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e000      	b.n	8001d7c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40021000 	.word	0x40021000
 8001d88:	40007000 	.word	0x40007000
 8001d8c:	42420060 	.word	0x42420060

08001d90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e0d0      	b.n	8001f46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001da4:	4b6a      	ldr	r3, [pc, #424]	; (8001f50 <HAL_RCC_ClockConfig+0x1c0>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d910      	bls.n	8001dd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db2:	4b67      	ldr	r3, [pc, #412]	; (8001f50 <HAL_RCC_ClockConfig+0x1c0>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f023 0207 	bic.w	r2, r3, #7
 8001dba:	4965      	ldr	r1, [pc, #404]	; (8001f50 <HAL_RCC_ClockConfig+0x1c0>)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc2:	4b63      	ldr	r3, [pc, #396]	; (8001f50 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d001      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e0b8      	b.n	8001f46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d020      	beq.n	8001e22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d005      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dec:	4b59      	ldr	r3, [pc, #356]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	4a58      	ldr	r2, [pc, #352]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001df2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001df6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0308 	and.w	r3, r3, #8
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d005      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e04:	4b53      	ldr	r3, [pc, #332]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	4a52      	ldr	r2, [pc, #328]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e10:	4b50      	ldr	r3, [pc, #320]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	494d      	ldr	r1, [pc, #308]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d040      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d107      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e36:	4b47      	ldr	r3, [pc, #284]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d115      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e07f      	b.n	8001f46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d107      	bne.n	8001e5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e4e:	4b41      	ldr	r3, [pc, #260]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d109      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e073      	b.n	8001f46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e5e:	4b3d      	ldr	r3, [pc, #244]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e06b      	b.n	8001f46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e6e:	4b39      	ldr	r3, [pc, #228]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f023 0203 	bic.w	r2, r3, #3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	4936      	ldr	r1, [pc, #216]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e80:	f7fe fd42 	bl	8000908 <HAL_GetTick>
 8001e84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e86:	e00a      	b.n	8001e9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e88:	f7fe fd3e 	bl	8000908 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e053      	b.n	8001f46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e9e:	4b2d      	ldr	r3, [pc, #180]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 020c 	and.w	r2, r3, #12
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d1eb      	bne.n	8001e88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001eb0:	4b27      	ldr	r3, [pc, #156]	; (8001f50 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d210      	bcs.n	8001ee0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ebe:	4b24      	ldr	r3, [pc, #144]	; (8001f50 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f023 0207 	bic.w	r2, r3, #7
 8001ec6:	4922      	ldr	r1, [pc, #136]	; (8001f50 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ece:	4b20      	ldr	r3, [pc, #128]	; (8001f50 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d001      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e032      	b.n	8001f46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d008      	beq.n	8001efe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eec:	4b19      	ldr	r3, [pc, #100]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	4916      	ldr	r1, [pc, #88]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d009      	beq.n	8001f1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f0a:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	490e      	ldr	r1, [pc, #56]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f1e:	f000 f821 	bl	8001f64 <HAL_RCC_GetSysClockFreq>
 8001f22:	4602      	mov	r2, r0
 8001f24:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <HAL_RCC_ClockConfig+0x1c4>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	091b      	lsrs	r3, r3, #4
 8001f2a:	f003 030f 	and.w	r3, r3, #15
 8001f2e:	490a      	ldr	r1, [pc, #40]	; (8001f58 <HAL_RCC_ClockConfig+0x1c8>)
 8001f30:	5ccb      	ldrb	r3, [r1, r3]
 8001f32:	fa22 f303 	lsr.w	r3, r2, r3
 8001f36:	4a09      	ldr	r2, [pc, #36]	; (8001f5c <HAL_RCC_ClockConfig+0x1cc>)
 8001f38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f3a:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <HAL_RCC_ClockConfig+0x1d0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe fca0 	bl	8000884 <HAL_InitTick>

  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40022000 	.word	0x40022000
 8001f54:	40021000 	.word	0x40021000
 8001f58:	08002a34 	.word	0x08002a34
 8001f5c:	20000000 	.word	0x20000000
 8001f60:	20000004 	.word	0x20000004

08001f64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f64:	b490      	push	{r4, r7}
 8001f66:	b08a      	sub	sp, #40	; 0x28
 8001f68:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f6a:	4b2a      	ldr	r3, [pc, #168]	; (8002014 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f6c:	1d3c      	adds	r4, r7, #4
 8001f6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f74:	f240 2301 	movw	r3, #513	; 0x201
 8001f78:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61bb      	str	r3, [r7, #24]
 8001f82:	2300      	movs	r3, #0
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f8e:	4b22      	ldr	r3, [pc, #136]	; (8002018 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f003 030c 	and.w	r3, r3, #12
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	d002      	beq.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x40>
 8001f9e:	2b08      	cmp	r3, #8
 8001fa0:	d003      	beq.n	8001faa <HAL_RCC_GetSysClockFreq+0x46>
 8001fa2:	e02d      	b.n	8002000 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fa4:	4b1d      	ldr	r3, [pc, #116]	; (800201c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fa6:	623b      	str	r3, [r7, #32]
      break;
 8001fa8:	e02d      	b.n	8002006 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	0c9b      	lsrs	r3, r3, #18
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fb6:	4413      	add	r3, r2
 8001fb8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001fbc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d013      	beq.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fc8:	4b13      	ldr	r3, [pc, #76]	; (8002018 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	0c5b      	lsrs	r3, r3, #17
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fd6:	4413      	add	r3, r2
 8001fd8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001fdc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	4a0e      	ldr	r2, [pc, #56]	; (800201c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fe2:	fb02 f203 	mul.w	r2, r2, r3
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24
 8001fee:	e004      	b.n	8001ffa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	4a0b      	ldr	r2, [pc, #44]	; (8002020 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ff4:	fb02 f303 	mul.w	r3, r2, r3
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	623b      	str	r3, [r7, #32]
      break;
 8001ffe:	e002      	b.n	8002006 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002000:	4b06      	ldr	r3, [pc, #24]	; (800201c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002002:	623b      	str	r3, [r7, #32]
      break;
 8002004:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002006:	6a3b      	ldr	r3, [r7, #32]
}
 8002008:	4618      	mov	r0, r3
 800200a:	3728      	adds	r7, #40	; 0x28
 800200c:	46bd      	mov	sp, r7
 800200e:	bc90      	pop	{r4, r7}
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	08002a14 	.word	0x08002a14
 8002018:	40021000 	.word	0x40021000
 800201c:	007a1200 	.word	0x007a1200
 8002020:	003d0900 	.word	0x003d0900

08002024 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002028:	4b02      	ldr	r3, [pc, #8]	; (8002034 <HAL_RCC_GetHCLKFreq+0x10>)
 800202a:	681b      	ldr	r3, [r3, #0]
}
 800202c:	4618      	mov	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr
 8002034:	20000000 	.word	0x20000000

08002038 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800203c:	f7ff fff2 	bl	8002024 <HAL_RCC_GetHCLKFreq>
 8002040:	4602      	mov	r2, r0
 8002042:	4b05      	ldr	r3, [pc, #20]	; (8002058 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	0adb      	lsrs	r3, r3, #11
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	4903      	ldr	r1, [pc, #12]	; (800205c <HAL_RCC_GetPCLK2Freq+0x24>)
 800204e:	5ccb      	ldrb	r3, [r1, r3]
 8002050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002054:	4618      	mov	r0, r3
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40021000 	.word	0x40021000
 800205c:	08002a44 	.word	0x08002a44

08002060 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002068:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <RCC_Delay+0x34>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a0a      	ldr	r2, [pc, #40]	; (8002098 <RCC_Delay+0x38>)
 800206e:	fba2 2303 	umull	r2, r3, r2, r3
 8002072:	0a5b      	lsrs	r3, r3, #9
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	fb02 f303 	mul.w	r3, r2, r3
 800207a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800207c:	bf00      	nop
  }
  while (Delay --);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	1e5a      	subs	r2, r3, #1
 8002082:	60fa      	str	r2, [r7, #12]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1f9      	bne.n	800207c <RCC_Delay+0x1c>
}
 8002088:	bf00      	nop
 800208a:	bf00      	nop
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr
 8002094:	20000000 	.word	0x20000000
 8002098:	10624dd3 	.word	0x10624dd3

0800209c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	613b      	str	r3, [r7, #16]
 80020a8:	2300      	movs	r3, #0
 80020aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d07d      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80020b8:	2300      	movs	r3, #0
 80020ba:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020bc:	4b4f      	ldr	r3, [pc, #316]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d10d      	bne.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c8:	4b4c      	ldr	r3, [pc, #304]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	4a4b      	ldr	r2, [pc, #300]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d2:	61d3      	str	r3, [r2, #28]
 80020d4:	4b49      	ldr	r3, [pc, #292]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020d6:	69db      	ldr	r3, [r3, #28]
 80020d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020e0:	2301      	movs	r3, #1
 80020e2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e4:	4b46      	ldr	r3, [pc, #280]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d118      	bne.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020f0:	4b43      	ldr	r3, [pc, #268]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a42      	ldr	r2, [pc, #264]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020fc:	f7fe fc04 	bl	8000908 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002102:	e008      	b.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002104:	f7fe fc00 	bl	8000908 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b64      	cmp	r3, #100	; 0x64
 8002110:	d901      	bls.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e06d      	b.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002116:	4b3a      	ldr	r3, [pc, #232]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0f0      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002122:	4b36      	ldr	r3, [pc, #216]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800212a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d02e      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	429a      	cmp	r2, r3
 800213e:	d027      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002140:	4b2e      	ldr	r3, [pc, #184]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002148:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800214a:	4b2e      	ldr	r3, [pc, #184]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800214c:	2201      	movs	r2, #1
 800214e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002150:	4b2c      	ldr	r3, [pc, #176]	; (8002204 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002156:	4a29      	ldr	r2, [pc, #164]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	d014      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002166:	f7fe fbcf 	bl	8000908 <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800216c:	e00a      	b.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800216e:	f7fe fbcb 	bl	8000908 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	f241 3288 	movw	r2, #5000	; 0x1388
 800217c:	4293      	cmp	r3, r2
 800217e:	d901      	bls.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e036      	b.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002184:	4b1d      	ldr	r3, [pc, #116]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0ee      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002190:	4b1a      	ldr	r3, [pc, #104]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	4917      	ldr	r1, [pc, #92]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021a2:	7dfb      	ldrb	r3, [r7, #23]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d105      	bne.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021a8:	4b14      	ldr	r3, [pc, #80]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	4a13      	ldr	r2, [pc, #76]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d008      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021c0:	4b0e      	ldr	r3, [pc, #56]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	490b      	ldr	r1, [pc, #44]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0310 	and.w	r3, r3, #16
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d008      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021de:	4b07      	ldr	r3, [pc, #28]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	695b      	ldr	r3, [r3, #20]
 80021ea:	4904      	ldr	r1, [pc, #16]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40021000 	.word	0x40021000
 8002200:	40007000 	.word	0x40007000
 8002204:	42420440 	.word	0x42420440

08002208 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002208:	b590      	push	{r4, r7, lr}
 800220a:	b08d      	sub	sp, #52	; 0x34
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002210:	4b6b      	ldr	r3, [pc, #428]	; (80023c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002212:	f107 040c 	add.w	r4, r7, #12
 8002216:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002218:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800221c:	f240 2301 	movw	r3, #513	; 0x201
 8002220:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002222:	2300      	movs	r3, #0
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
 8002226:	2300      	movs	r3, #0
 8002228:	62fb      	str	r3, [r7, #44]	; 0x2c
 800222a:	2300      	movs	r3, #0
 800222c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800222e:	2300      	movs	r3, #0
 8002230:	61fb      	str	r3, [r7, #28]
 8002232:	2300      	movs	r3, #0
 8002234:	62bb      	str	r3, [r7, #40]	; 0x28
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3b01      	subs	r3, #1
 800223a:	2b0f      	cmp	r3, #15
 800223c:	f200 80b6 	bhi.w	80023ac <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8002240:	a201      	add	r2, pc, #4	; (adr r2, 8002248 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8002242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002246:	bf00      	nop
 8002248:	0800232b 	.word	0x0800232b
 800224c:	08002391 	.word	0x08002391
 8002250:	080023ad 	.word	0x080023ad
 8002254:	0800231b 	.word	0x0800231b
 8002258:	080023ad 	.word	0x080023ad
 800225c:	080023ad 	.word	0x080023ad
 8002260:	080023ad 	.word	0x080023ad
 8002264:	08002323 	.word	0x08002323
 8002268:	080023ad 	.word	0x080023ad
 800226c:	080023ad 	.word	0x080023ad
 8002270:	080023ad 	.word	0x080023ad
 8002274:	080023ad 	.word	0x080023ad
 8002278:	080023ad 	.word	0x080023ad
 800227c:	080023ad 	.word	0x080023ad
 8002280:	080023ad 	.word	0x080023ad
 8002284:	08002289 	.word	0x08002289
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8002288:	4b4e      	ldr	r3, [pc, #312]	; (80023c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800228e:	4b4d      	ldr	r3, [pc, #308]	; (80023c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 808a 	beq.w	80023b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	0c9b      	lsrs	r3, r3, #18
 80022a0:	f003 030f 	and.w	r3, r3, #15
 80022a4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80022a8:	4413      	add	r3, r2
 80022aa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80022ae:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d018      	beq.n	80022ec <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022ba:	4b42      	ldr	r3, [pc, #264]	; (80023c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	0c5b      	lsrs	r3, r3, #17
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80022c8:	4413      	add	r3, r2
 80022ca:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80022ce:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00d      	beq.n	80022f6 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80022da:	4a3b      	ldr	r2, [pc, #236]	; (80023c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 80022dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022de:	fbb2 f2f3 	udiv	r2, r2, r3
 80022e2:	6a3b      	ldr	r3, [r7, #32]
 80022e4:	fb02 f303 	mul.w	r3, r2, r3
 80022e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022ea:	e004      	b.n	80022f6 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022ec:	6a3b      	ldr	r3, [r7, #32]
 80022ee:	4a37      	ldr	r2, [pc, #220]	; (80023cc <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 80022f0:	fb02 f303 	mul.w	r3, r2, r3
 80022f4:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80022f6:	4b33      	ldr	r3, [pc, #204]	; (80023c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002302:	d102      	bne.n	800230a <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8002304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002306:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8002308:	e052      	b.n	80023b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          frequency = (pllclk * 2) / 3;
 800230a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	4a30      	ldr	r2, [pc, #192]	; (80023d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 8002310:	fba2 2303 	umull	r2, r3, r2, r3
 8002314:	085b      	lsrs	r3, r3, #1
 8002316:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002318:	e04a      	b.n	80023b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 800231a:	f7ff fe23 	bl	8001f64 <HAL_RCC_GetSysClockFreq>
 800231e:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002320:	e049      	b.n	80023b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002322:	f7ff fe1f 	bl	8001f64 <HAL_RCC_GetSysClockFreq>
 8002326:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002328:	e045      	b.n	80023b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 800232a:	4b26      	ldr	r3, [pc, #152]	; (80023c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002336:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800233a:	d108      	bne.n	800234e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSE_VALUE;
 8002346:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800234a:	62bb      	str	r3, [r7, #40]	; 0x28
 800234c:	e01f      	b.n	800238e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002354:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002358:	d109      	bne.n	800236e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 800235a:	4b1a      	ldr	r3, [pc, #104]	; (80023c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
        frequency = LSI_VALUE;
 8002366:	f649 4340 	movw	r3, #40000	; 0x9c40
 800236a:	62bb      	str	r3, [r7, #40]	; 0x28
 800236c:	e00f      	b.n	800238e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002374:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002378:	d11c      	bne.n	80023b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800237a:	4b12      	ldr	r3, [pc, #72]	; (80023c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d016      	beq.n	80023b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      {
        frequency = HSE_VALUE / 128U;
 8002386:	f24f 4324 	movw	r3, #62500	; 0xf424
 800238a:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 800238c:	e012      	b.n	80023b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800238e:	e011      	b.n	80023b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002390:	f7ff fe52 	bl	8002038 <HAL_RCC_GetPCLK2Freq>
 8002394:	4602      	mov	r2, r0
 8002396:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	0b9b      	lsrs	r3, r3, #14
 800239c:	f003 0303 	and.w	r3, r3, #3
 80023a0:	3301      	adds	r3, #1
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80023aa:	e004      	b.n	80023b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    default:
    {
      break;
 80023ac:	bf00      	nop
 80023ae:	e002      	b.n	80023b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 80023b0:	bf00      	nop
 80023b2:	e000      	b.n	80023b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 80023b4:	bf00      	nop
    }
  }
  return (frequency);
 80023b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3734      	adds	r7, #52	; 0x34
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd90      	pop	{r4, r7, pc}
 80023c0:	08002a24 	.word	0x08002a24
 80023c4:	40021000 	.word	0x40021000
 80023c8:	007a1200 	.word	0x007a1200
 80023cc:	003d0900 	.word	0x003d0900
 80023d0:	aaaaaaab 	.word	0xaaaaaaab

080023d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e041      	b.n	800246a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d106      	bne.n	8002400 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7fe f9e8 	bl	80007d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2202      	movs	r2, #2
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3304      	adds	r3, #4
 8002410:	4619      	mov	r1, r3
 8002412:	4610      	mov	r0, r2
 8002414:	f000 f94a 	bl	80026ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
	...

08002474 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b01      	cmp	r3, #1
 8002486:	d001      	beq.n	800248c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e03c      	b.n	8002506 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2202      	movs	r2, #2
 8002490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a1d      	ldr	r2, [pc, #116]	; (8002510 <HAL_TIM_Base_Start+0x9c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d018      	beq.n	80024d0 <HAL_TIM_Base_Start+0x5c>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a1c      	ldr	r2, [pc, #112]	; (8002514 <HAL_TIM_Base_Start+0xa0>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d013      	beq.n	80024d0 <HAL_TIM_Base_Start+0x5c>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b0:	d00e      	beq.n	80024d0 <HAL_TIM_Base_Start+0x5c>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a18      	ldr	r2, [pc, #96]	; (8002518 <HAL_TIM_Base_Start+0xa4>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d009      	beq.n	80024d0 <HAL_TIM_Base_Start+0x5c>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a16      	ldr	r2, [pc, #88]	; (800251c <HAL_TIM_Base_Start+0xa8>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d004      	beq.n	80024d0 <HAL_TIM_Base_Start+0x5c>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a15      	ldr	r2, [pc, #84]	; (8002520 <HAL_TIM_Base_Start+0xac>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d111      	bne.n	80024f4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2b06      	cmp	r3, #6
 80024e0:	d010      	beq.n	8002504 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f042 0201 	orr.w	r2, r2, #1
 80024f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024f2:	e007      	b.n	8002504 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0201 	orr.w	r2, r2, #1
 8002502:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr
 8002510:	40012c00 	.word	0x40012c00
 8002514:	40013400 	.word	0x40013400
 8002518:	40000400 	.word	0x40000400
 800251c:	40000800 	.word	0x40000800
 8002520:	40000c00 	.word	0x40000c00

08002524 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002534:	2b01      	cmp	r3, #1
 8002536:	d101      	bne.n	800253c <HAL_TIM_ConfigClockSource+0x18>
 8002538:	2302      	movs	r3, #2
 800253a:	e0b3      	b.n	80026a4 <HAL_TIM_ConfigClockSource+0x180>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2202      	movs	r2, #2
 8002548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800255a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002562:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002574:	d03e      	beq.n	80025f4 <HAL_TIM_ConfigClockSource+0xd0>
 8002576:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800257a:	f200 8087 	bhi.w	800268c <HAL_TIM_ConfigClockSource+0x168>
 800257e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002582:	f000 8085 	beq.w	8002690 <HAL_TIM_ConfigClockSource+0x16c>
 8002586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800258a:	d87f      	bhi.n	800268c <HAL_TIM_ConfigClockSource+0x168>
 800258c:	2b70      	cmp	r3, #112	; 0x70
 800258e:	d01a      	beq.n	80025c6 <HAL_TIM_ConfigClockSource+0xa2>
 8002590:	2b70      	cmp	r3, #112	; 0x70
 8002592:	d87b      	bhi.n	800268c <HAL_TIM_ConfigClockSource+0x168>
 8002594:	2b60      	cmp	r3, #96	; 0x60
 8002596:	d050      	beq.n	800263a <HAL_TIM_ConfigClockSource+0x116>
 8002598:	2b60      	cmp	r3, #96	; 0x60
 800259a:	d877      	bhi.n	800268c <HAL_TIM_ConfigClockSource+0x168>
 800259c:	2b50      	cmp	r3, #80	; 0x50
 800259e:	d03c      	beq.n	800261a <HAL_TIM_ConfigClockSource+0xf6>
 80025a0:	2b50      	cmp	r3, #80	; 0x50
 80025a2:	d873      	bhi.n	800268c <HAL_TIM_ConfigClockSource+0x168>
 80025a4:	2b40      	cmp	r3, #64	; 0x40
 80025a6:	d058      	beq.n	800265a <HAL_TIM_ConfigClockSource+0x136>
 80025a8:	2b40      	cmp	r3, #64	; 0x40
 80025aa:	d86f      	bhi.n	800268c <HAL_TIM_ConfigClockSource+0x168>
 80025ac:	2b30      	cmp	r3, #48	; 0x30
 80025ae:	d064      	beq.n	800267a <HAL_TIM_ConfigClockSource+0x156>
 80025b0:	2b30      	cmp	r3, #48	; 0x30
 80025b2:	d86b      	bhi.n	800268c <HAL_TIM_ConfigClockSource+0x168>
 80025b4:	2b20      	cmp	r3, #32
 80025b6:	d060      	beq.n	800267a <HAL_TIM_ConfigClockSource+0x156>
 80025b8:	2b20      	cmp	r3, #32
 80025ba:	d867      	bhi.n	800268c <HAL_TIM_ConfigClockSource+0x168>
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d05c      	beq.n	800267a <HAL_TIM_ConfigClockSource+0x156>
 80025c0:	2b10      	cmp	r3, #16
 80025c2:	d05a      	beq.n	800267a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80025c4:	e062      	b.n	800268c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6818      	ldr	r0, [r3, #0]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	6899      	ldr	r1, [r3, #8]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f000 f95a 	bl	800288e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	609a      	str	r2, [r3, #8]
      break;
 80025f2:	e04e      	b.n	8002692 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6818      	ldr	r0, [r3, #0]
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	6899      	ldr	r1, [r3, #8]
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f000 f943 	bl	800288e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689a      	ldr	r2, [r3, #8]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002616:	609a      	str	r2, [r3, #8]
      break;
 8002618:	e03b      	b.n	8002692 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6818      	ldr	r0, [r3, #0]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	6859      	ldr	r1, [r3, #4]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	461a      	mov	r2, r3
 8002628:	f000 f8ba 	bl	80027a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2150      	movs	r1, #80	; 0x50
 8002632:	4618      	mov	r0, r3
 8002634:	f000 f911 	bl	800285a <TIM_ITRx_SetConfig>
      break;
 8002638:	e02b      	b.n	8002692 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6818      	ldr	r0, [r3, #0]
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	6859      	ldr	r1, [r3, #4]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	461a      	mov	r2, r3
 8002648:	f000 f8d8 	bl	80027fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2160      	movs	r1, #96	; 0x60
 8002652:	4618      	mov	r0, r3
 8002654:	f000 f901 	bl	800285a <TIM_ITRx_SetConfig>
      break;
 8002658:	e01b      	b.n	8002692 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6818      	ldr	r0, [r3, #0]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	6859      	ldr	r1, [r3, #4]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	461a      	mov	r2, r3
 8002668:	f000 f89a 	bl	80027a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2140      	movs	r1, #64	; 0x40
 8002672:	4618      	mov	r0, r3
 8002674:	f000 f8f1 	bl	800285a <TIM_ITRx_SetConfig>
      break;
 8002678:	e00b      	b.n	8002692 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4619      	mov	r1, r3
 8002684:	4610      	mov	r0, r2
 8002686:	f000 f8e8 	bl	800285a <TIM_ITRx_SetConfig>
        break;
 800268a:	e002      	b.n	8002692 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800268c:	bf00      	nop
 800268e:	e000      	b.n	8002692 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002690:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a33      	ldr	r2, [pc, #204]	; (800278c <TIM_Base_SetConfig+0xe0>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d013      	beq.n	80026ec <TIM_Base_SetConfig+0x40>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a32      	ldr	r2, [pc, #200]	; (8002790 <TIM_Base_SetConfig+0xe4>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d00f      	beq.n	80026ec <TIM_Base_SetConfig+0x40>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026d2:	d00b      	beq.n	80026ec <TIM_Base_SetConfig+0x40>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a2f      	ldr	r2, [pc, #188]	; (8002794 <TIM_Base_SetConfig+0xe8>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d007      	beq.n	80026ec <TIM_Base_SetConfig+0x40>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a2e      	ldr	r2, [pc, #184]	; (8002798 <TIM_Base_SetConfig+0xec>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d003      	beq.n	80026ec <TIM_Base_SetConfig+0x40>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	4a2d      	ldr	r2, [pc, #180]	; (800279c <TIM_Base_SetConfig+0xf0>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d108      	bne.n	80026fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a22      	ldr	r2, [pc, #136]	; (800278c <TIM_Base_SetConfig+0xe0>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d013      	beq.n	800272e <TIM_Base_SetConfig+0x82>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a21      	ldr	r2, [pc, #132]	; (8002790 <TIM_Base_SetConfig+0xe4>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d00f      	beq.n	800272e <TIM_Base_SetConfig+0x82>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002714:	d00b      	beq.n	800272e <TIM_Base_SetConfig+0x82>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a1e      	ldr	r2, [pc, #120]	; (8002794 <TIM_Base_SetConfig+0xe8>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d007      	beq.n	800272e <TIM_Base_SetConfig+0x82>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a1d      	ldr	r2, [pc, #116]	; (8002798 <TIM_Base_SetConfig+0xec>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d003      	beq.n	800272e <TIM_Base_SetConfig+0x82>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a1c      	ldr	r2, [pc, #112]	; (800279c <TIM_Base_SetConfig+0xf0>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d108      	bne.n	8002740 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	4313      	orrs	r3, r2
 800273e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	4313      	orrs	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a09      	ldr	r2, [pc, #36]	; (800278c <TIM_Base_SetConfig+0xe0>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d003      	beq.n	8002774 <TIM_Base_SetConfig+0xc8>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a08      	ldr	r2, [pc, #32]	; (8002790 <TIM_Base_SetConfig+0xe4>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d103      	bne.n	800277c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	691a      	ldr	r2, [r3, #16]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	615a      	str	r2, [r3, #20]
}
 8002782:	bf00      	nop
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr
 800278c:	40012c00 	.word	0x40012c00
 8002790:	40013400 	.word	0x40013400
 8002794:	40000400 	.word	0x40000400
 8002798:	40000800 	.word	0x40000800
 800279c:	40000c00 	.word	0x40000c00

080027a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b087      	sub	sp, #28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	f023 0201 	bic.w	r2, r3, #1
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f023 030a 	bic.w	r3, r3, #10
 80027dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	621a      	str	r2, [r3, #32]
}
 80027f2:	bf00      	nop
 80027f4:	371c      	adds	r7, #28
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr

080027fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b087      	sub	sp, #28
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	f023 0210 	bic.w	r2, r3, #16
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002826:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	031b      	lsls	r3, r3, #12
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	4313      	orrs	r3, r2
 8002830:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002838:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	011b      	lsls	r3, r3, #4
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	4313      	orrs	r3, r2
 8002842:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	621a      	str	r2, [r3, #32]
}
 8002850:	bf00      	nop
 8002852:	371c      	adds	r7, #28
 8002854:	46bd      	mov	sp, r7
 8002856:	bc80      	pop	{r7}
 8002858:	4770      	bx	lr

0800285a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800285a:	b480      	push	{r7}
 800285c:	b085      	sub	sp, #20
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
 8002862:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002870:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	4313      	orrs	r3, r2
 8002878:	f043 0307 	orr.w	r3, r3, #7
 800287c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	609a      	str	r2, [r3, #8]
}
 8002884:	bf00      	nop
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr

0800288e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800288e:	b480      	push	{r7}
 8002890:	b087      	sub	sp, #28
 8002892:	af00      	add	r7, sp, #0
 8002894:	60f8      	str	r0, [r7, #12]
 8002896:	60b9      	str	r1, [r7, #8]
 8002898:	607a      	str	r2, [r7, #4]
 800289a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028a8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	021a      	lsls	r2, r3, #8
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	431a      	orrs	r2, r3
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	609a      	str	r2, [r3, #8]
}
 80028c2:	bf00      	nop
 80028c4:	371c      	adds	r7, #28
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr

080028cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d101      	bne.n	80028e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028e0:	2302      	movs	r3, #2
 80028e2:	e050      	b.n	8002986 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2202      	movs	r2, #2
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800290a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	4313      	orrs	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a1b      	ldr	r2, [pc, #108]	; (8002990 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d018      	beq.n	800295a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a19      	ldr	r2, [pc, #100]	; (8002994 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d013      	beq.n	800295a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800293a:	d00e      	beq.n	800295a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a15      	ldr	r2, [pc, #84]	; (8002998 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d009      	beq.n	800295a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a14      	ldr	r2, [pc, #80]	; (800299c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d004      	beq.n	800295a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a12      	ldr	r2, [pc, #72]	; (80029a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d10c      	bne.n	8002974 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002960:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	4313      	orrs	r3, r2
 800296a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr
 8002990:	40012c00 	.word	0x40012c00
 8002994:	40013400 	.word	0x40013400
 8002998:	40000400 	.word	0x40000400
 800299c:	40000800 	.word	0x40000800
 80029a0:	40000c00 	.word	0x40000c00

080029a4 <__libc_init_array>:
 80029a4:	b570      	push	{r4, r5, r6, lr}
 80029a6:	2600      	movs	r6, #0
 80029a8:	4d0c      	ldr	r5, [pc, #48]	; (80029dc <__libc_init_array+0x38>)
 80029aa:	4c0d      	ldr	r4, [pc, #52]	; (80029e0 <__libc_init_array+0x3c>)
 80029ac:	1b64      	subs	r4, r4, r5
 80029ae:	10a4      	asrs	r4, r4, #2
 80029b0:	42a6      	cmp	r6, r4
 80029b2:	d109      	bne.n	80029c8 <__libc_init_array+0x24>
 80029b4:	f000 f822 	bl	80029fc <_init>
 80029b8:	2600      	movs	r6, #0
 80029ba:	4d0a      	ldr	r5, [pc, #40]	; (80029e4 <__libc_init_array+0x40>)
 80029bc:	4c0a      	ldr	r4, [pc, #40]	; (80029e8 <__libc_init_array+0x44>)
 80029be:	1b64      	subs	r4, r4, r5
 80029c0:	10a4      	asrs	r4, r4, #2
 80029c2:	42a6      	cmp	r6, r4
 80029c4:	d105      	bne.n	80029d2 <__libc_init_array+0x2e>
 80029c6:	bd70      	pop	{r4, r5, r6, pc}
 80029c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80029cc:	4798      	blx	r3
 80029ce:	3601      	adds	r6, #1
 80029d0:	e7ee      	b.n	80029b0 <__libc_init_array+0xc>
 80029d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80029d6:	4798      	blx	r3
 80029d8:	3601      	adds	r6, #1
 80029da:	e7f2      	b.n	80029c2 <__libc_init_array+0x1e>
 80029dc:	08002a4c 	.word	0x08002a4c
 80029e0:	08002a4c 	.word	0x08002a4c
 80029e4:	08002a4c 	.word	0x08002a4c
 80029e8:	08002a50 	.word	0x08002a50

080029ec <memset>:
 80029ec:	4603      	mov	r3, r0
 80029ee:	4402      	add	r2, r0
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d100      	bne.n	80029f6 <memset+0xa>
 80029f4:	4770      	bx	lr
 80029f6:	f803 1b01 	strb.w	r1, [r3], #1
 80029fa:	e7f9      	b.n	80029f0 <memset+0x4>

080029fc <_init>:
 80029fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029fe:	bf00      	nop
 8002a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a02:	bc08      	pop	{r3}
 8002a04:	469e      	mov	lr, r3
 8002a06:	4770      	bx	lr

08002a08 <_fini>:
 8002a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a0a:	bf00      	nop
 8002a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a0e:	bc08      	pop	{r3}
 8002a10:	469e      	mov	lr, r3
 8002a12:	4770      	bx	lr
