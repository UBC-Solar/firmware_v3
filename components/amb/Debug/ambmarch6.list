
ambmarch6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032ac  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003494  08003494  00013494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034cc  080034cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080034cc  080034cc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034cc  080034cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034cc  080034cc  000134cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034d0  080034d0  000134d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080034d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  20000010  080034e0  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000194  080034e0  00020194  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba00  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000201f  00000000  00000000  0002ba35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  0002da58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b08  00000000  00000000  0002e678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019eaa  00000000  00000000  0002f180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e070  00000000  00000000  0004902a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a3b5  00000000  00000000  0005709a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f144f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003248  00000000  00000000  000f14a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000010 	.word	0x20000010
 8000204:	00000000 	.word	0x00000000
 8000208:	0800347c 	.word	0x0800347c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000014 	.word	0x20000014
 8000224:	0800347c 	.word	0x0800347c

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009d4:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <MX_ADC1_Init+0x74>)
 80009d6:	4a19      	ldr	r2, [pc, #100]	; (8000a3c <MX_ADC1_Init+0x78>)
 80009d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009da:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <MX_ADC1_Init+0x74>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80009e0:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <MX_ADC1_Init+0x74>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009e6:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <MX_ADC1_Init+0x74>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <MX_ADC1_Init+0x74>)
 80009ee:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80009f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009f4:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <MX_ADC1_Init+0x74>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80009fa:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <MX_ADC1_Init+0x74>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a00:	480d      	ldr	r0, [pc, #52]	; (8000a38 <MX_ADC1_Init+0x74>)
 8000a02:	f000 fcef 	bl	80013e4 <HAL_ADC_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000a0c:	f000 fb68 	bl	80010e0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a14:	2301      	movs	r3, #1
 8000a16:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4805      	ldr	r0, [pc, #20]	; (8000a38 <MX_ADC1_Init+0x74>)
 8000a22:	f000 ff7d 	bl	8001920 <HAL_ADC_ConfigChannel>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000a2c:	f000 fb58 	bl	80010e0 <Error_Handler>
  }

}
 8000a30:	bf00      	nop
 8000a32:	3710      	adds	r7, #16
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	200000f0 	.word	0x200000f0
 8000a3c:	40012400 	.word	0x40012400

08000a40 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	; 0x28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 0318 	add.w	r3, r7, #24
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a2a      	ldr	r2, [pc, #168]	; (8000b04 <HAL_ADC_MspInit+0xc4>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d14d      	bne.n	8000afc <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a60:	4b29      	ldr	r3, [pc, #164]	; (8000b08 <HAL_ADC_MspInit+0xc8>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	4a28      	ldr	r2, [pc, #160]	; (8000b08 <HAL_ADC_MspInit+0xc8>)
 8000a66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a6a:	6193      	str	r3, [r2, #24]
 8000a6c:	4b26      	ldr	r3, [pc, #152]	; (8000b08 <HAL_ADC_MspInit+0xc8>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a74:	617b      	str	r3, [r7, #20]
 8000a76:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a78:	4b23      	ldr	r3, [pc, #140]	; (8000b08 <HAL_ADC_MspInit+0xc8>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	4a22      	ldr	r2, [pc, #136]	; (8000b08 <HAL_ADC_MspInit+0xc8>)
 8000a7e:	f043 0304 	orr.w	r3, r3, #4
 8000a82:	6193      	str	r3, [r2, #24]
 8000a84:	4b20      	ldr	r3, [pc, #128]	; (8000b08 <HAL_ADC_MspInit+0xc8>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	f003 0304 	and.w	r3, r3, #4
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a90:	4b1d      	ldr	r3, [pc, #116]	; (8000b08 <HAL_ADC_MspInit+0xc8>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	4a1c      	ldr	r2, [pc, #112]	; (8000b08 <HAL_ADC_MspInit+0xc8>)
 8000a96:	f043 0310 	orr.w	r3, r3, #16
 8000a9a:	6193      	str	r3, [r2, #24]
 8000a9c:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <HAL_ADC_MspInit+0xc8>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	f003 0310 	and.w	r3, r3, #16
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa8:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <HAL_ADC_MspInit+0xc8>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	4a16      	ldr	r2, [pc, #88]	; (8000b08 <HAL_ADC_MspInit+0xc8>)
 8000aae:	f043 0308 	orr.w	r3, r3, #8
 8000ab2:	6193      	str	r3, [r2, #24]
 8000ab4:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <HAL_ADC_MspInit+0xc8>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	f003 0308 	and.w	r3, r3, #8
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	68bb      	ldr	r3, [r7, #8]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = TEMP_1_Pin|TEMP_2_Pin|TEMP_3_Pin|TEMP_4_Pin
 8000ac0:	23ff      	movs	r3, #255	; 0xff
 8000ac2:	61bb      	str	r3, [r7, #24]
                          |ISENSE2_Pin|VSENSE2_Pin|VSENSE1_Pin|ISENSE1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac8:	f107 0318 	add.w	r3, r7, #24
 8000acc:	4619      	mov	r1, r3
 8000ace:	480f      	ldr	r0, [pc, #60]	; (8000b0c <HAL_ADC_MspInit+0xcc>)
 8000ad0:	f001 fa8a 	bl	8001fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TEMP_5_Pin|TEMP_6_Pin;
 8000ad4:	2330      	movs	r3, #48	; 0x30
 8000ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000adc:	f107 0318 	add.w	r3, r7, #24
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	480b      	ldr	r0, [pc, #44]	; (8000b10 <HAL_ADC_MspInit+0xd0>)
 8000ae4:	f001 fa80 	bl	8001fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TEMP_7_Pin|TEMP_8_Pin;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aec:	2303      	movs	r3, #3
 8000aee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af0:	f107 0318 	add.w	r3, r7, #24
 8000af4:	4619      	mov	r1, r3
 8000af6:	4807      	ldr	r0, [pc, #28]	; (8000b14 <HAL_ADC_MspInit+0xd4>)
 8000af8:	f001 fa76 	bl	8001fe8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000afc:	bf00      	nop
 8000afe:	3728      	adds	r7, #40	; 0x28
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40012400 	.word	0x40012400
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	40010800 	.word	0x40010800
 8000b10:	40011000 	.word	0x40011000
 8000b14:	40010c00 	.word	0x40010c00

08000b18 <ADC_Select>:


/* Function takes channel as argument to set configuration */

void ADC_Select(uint8_t channel)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	71fb      	strb	r3, [r7, #7]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000b22:	f107 030c 	add.w	r3, r7, #12
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]

	switch(channel) {
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	2b0f      	cmp	r3, #15
 8000b32:	d847      	bhi.n	8000bc4 <ADC_Select+0xac>
 8000b34:	a201      	add	r2, pc, #4	; (adr r2, 8000b3c <ADC_Select+0x24>)
 8000b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b3a:	bf00      	nop
 8000b3c:	08000b7d 	.word	0x08000b7d
 8000b40:	08000b83 	.word	0x08000b83
 8000b44:	08000b89 	.word	0x08000b89
 8000b48:	08000b8f 	.word	0x08000b8f
 8000b4c:	08000b95 	.word	0x08000b95
 8000b50:	08000b9b 	.word	0x08000b9b
 8000b54:	08000ba1 	.word	0x08000ba1
 8000b58:	08000ba7 	.word	0x08000ba7
 8000b5c:	08000bad 	.word	0x08000bad
 8000b60:	08000bb3 	.word	0x08000bb3
 8000b64:	08000bc5 	.word	0x08000bc5
 8000b68:	08000bc5 	.word	0x08000bc5
 8000b6c:	08000bc5 	.word	0x08000bc5
 8000b70:	08000bc5 	.word	0x08000bc5
 8000b74:	08000bb9 	.word	0x08000bb9
 8000b78:	08000bbf 	.word	0x08000bbf
		case 0:		// TEMP_1
			sConfig.Channel = ADC_CHANNEL_0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60fb      	str	r3, [r7, #12]
			break;
 8000b80:	e020      	b.n	8000bc4 <ADC_Select+0xac>
		case 1:		// TEMP_2
			sConfig.Channel = ADC_CHANNEL_1;
 8000b82:	2301      	movs	r3, #1
 8000b84:	60fb      	str	r3, [r7, #12]
			break;
 8000b86:	e01d      	b.n	8000bc4 <ADC_Select+0xac>
		case 2:		// TEMP_3
			sConfig.Channel = ADC_CHANNEL_2;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	60fb      	str	r3, [r7, #12]
			break;
 8000b8c:	e01a      	b.n	8000bc4 <ADC_Select+0xac>
		case 3:		// TEMP_4
			sConfig.Channel = ADC_CHANNEL_3;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	60fb      	str	r3, [r7, #12]
			break;
 8000b92:	e017      	b.n	8000bc4 <ADC_Select+0xac>
		case 4:		// ISENSE2
			sConfig.Channel = ADC_CHANNEL_4;
 8000b94:	2304      	movs	r3, #4
 8000b96:	60fb      	str	r3, [r7, #12]
			break;
 8000b98:	e014      	b.n	8000bc4 <ADC_Select+0xac>
		case 5:		// VSENSE2
			sConfig.Channel = ADC_CHANNEL_5;
 8000b9a:	2305      	movs	r3, #5
 8000b9c:	60fb      	str	r3, [r7, #12]
			break;
 8000b9e:	e011      	b.n	8000bc4 <ADC_Select+0xac>
		case 6:		// VSENSE1
			sConfig.Channel = ADC_CHANNEL_6;
 8000ba0:	2306      	movs	r3, #6
 8000ba2:	60fb      	str	r3, [r7, #12]
			break;
 8000ba4:	e00e      	b.n	8000bc4 <ADC_Select+0xac>
		case 7:		// ISENSE1
			sConfig.Channel = ADC_CHANNEL_7;
 8000ba6:	2307      	movs	r3, #7
 8000ba8:	60fb      	str	r3, [r7, #12]
			break;
 8000baa:	e00b      	b.n	8000bc4 <ADC_Select+0xac>
		case 8:		// TEMP_7
			sConfig.Channel = ADC_CHANNEL_8;
 8000bac:	2308      	movs	r3, #8
 8000bae:	60fb      	str	r3, [r7, #12]
			break;
 8000bb0:	e008      	b.n	8000bc4 <ADC_Select+0xac>
		case 9:		// TEMP_8
			sConfig.Channel = ADC_CHANNEL_9;
 8000bb2:	2309      	movs	r3, #9
 8000bb4:	60fb      	str	r3, [r7, #12]
			break;
 8000bb6:	e005      	b.n	8000bc4 <ADC_Select+0xac>
			break;
		case 13:	// NOT IN USE
			//sConfig.Channel = ADC_CHANNEL_13;
			break;
		case 14:	// TEMP_5
			sConfig.Channel = ADC_CHANNEL_14;
 8000bb8:	230e      	movs	r3, #14
 8000bba:	60fb      	str	r3, [r7, #12]
			break;
 8000bbc:	e002      	b.n	8000bc4 <ADC_Select+0xac>
		case 15:	// TEMP_6
			sConfig.Channel = ADC_CHANNEL_15;
 8000bbe:	230f      	movs	r3, #15
 8000bc0:	60fb      	str	r3, [r7, #12]
			break;
 8000bc2:	bf00      	nop
	}

	sConfig.Rank = 1;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;	// may need to change?
 8000bc8:	2302      	movs	r3, #2
 8000bca:	617b      	str	r3, [r7, #20]

	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bcc:	f107 030c 	add.w	r3, r7, #12
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4806      	ldr	r0, [pc, #24]	; (8000bec <ADC_Select+0xd4>)
 8000bd4:	f000 fea4 	bl	8001920 <HAL_ADC_ConfigChannel>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <ADC_Select+0xca>
	{
		Error_Handler();
 8000bde:	f000 fa7f 	bl	80010e0 <Error_Handler>
	}
}
 8000be2:	bf00      	nop
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200000f0 	.word	0x200000f0

08000bf0 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0

  hcan.Instance = CAN1;
 8000bf4:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <MX_CAN_Init+0x60>)
 8000bf6:	4a17      	ldr	r2, [pc, #92]	; (8000c54 <MX_CAN_Init+0x64>)
 8000bf8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <MX_CAN_Init+0x60>)
 8000bfc:	2210      	movs	r2, #16
 8000bfe:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000c00:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <MX_CAN_Init+0x60>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c06:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <MX_CAN_Init+0x60>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000c0c:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <MX_CAN_Init+0x60>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000c12:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <MX_CAN_Init+0x60>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000c18:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <MX_CAN_Init+0x60>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <MX_CAN_Init+0x60>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000c24:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <MX_CAN_Init+0x60>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <MX_CAN_Init+0x60>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000c30:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <MX_CAN_Init+0x60>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <MX_CAN_Init+0x60>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000c3c:	4804      	ldr	r0, [pc, #16]	; (8000c50 <MX_CAN_Init+0x60>)
 8000c3e:	f000 fff3 	bl	8001c28 <HAL_CAN_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000c48:	f000 fa4a 	bl	80010e0 <Error_Handler>
  }

}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000120 	.word	0x20000120
 8000c54:	40006400 	.word	0x40006400

08000c58 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	; 0x28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a25      	ldr	r2, [pc, #148]	; (8000d08 <HAL_CAN_MspInit+0xb0>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d143      	bne.n	8000d00 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c78:	4b24      	ldr	r3, [pc, #144]	; (8000d0c <HAL_CAN_MspInit+0xb4>)
 8000c7a:	69db      	ldr	r3, [r3, #28]
 8000c7c:	4a23      	ldr	r2, [pc, #140]	; (8000d0c <HAL_CAN_MspInit+0xb4>)
 8000c7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c82:	61d3      	str	r3, [r2, #28]
 8000c84:	4b21      	ldr	r3, [pc, #132]	; (8000d0c <HAL_CAN_MspInit+0xb4>)
 8000c86:	69db      	ldr	r3, [r3, #28]
 8000c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c90:	4b1e      	ldr	r3, [pc, #120]	; (8000d0c <HAL_CAN_MspInit+0xb4>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	4a1d      	ldr	r2, [pc, #116]	; (8000d0c <HAL_CAN_MspInit+0xb4>)
 8000c96:	f043 0308 	orr.w	r3, r3, #8
 8000c9a:	6193      	str	r3, [r2, #24]
 8000c9c:	4b1b      	ldr	r3, [pc, #108]	; (8000d0c <HAL_CAN_MspInit+0xb4>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	f003 0308 	and.w	r3, r3, #8
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ca8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4814      	ldr	r0, [pc, #80]	; (8000d10 <HAL_CAN_MspInit+0xb8>)
 8000cbe:	f001 f993 	bl	8001fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	480e      	ldr	r0, [pc, #56]	; (8000d10 <HAL_CAN_MspInit+0xb8>)
 8000cd8:	f001 f986 	bl	8001fe8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000cdc:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <HAL_CAN_MspInit+0xbc>)
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce4:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8000cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cec:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8000cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8000cfa:	4a06      	ldr	r2, [pc, #24]	; (8000d14 <HAL_CAN_MspInit+0xbc>)
 8000cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfe:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000d00:	bf00      	nop
 8000d02:	3728      	adds	r7, #40	; 0x28
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40006400 	.word	0x40006400
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	40010c00 	.word	0x40010c00
 8000d14:	40010000 	.word	0x40010000

08000d18 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1e:	4b1a      	ldr	r3, [pc, #104]	; (8000d88 <MX_GPIO_Init+0x70>)
 8000d20:	699b      	ldr	r3, [r3, #24]
 8000d22:	4a19      	ldr	r2, [pc, #100]	; (8000d88 <MX_GPIO_Init+0x70>)
 8000d24:	f043 0320 	orr.w	r3, r3, #32
 8000d28:	6193      	str	r3, [r2, #24]
 8000d2a:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <MX_GPIO_Init+0x70>)
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	f003 0320 	and.w	r3, r3, #32
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <MX_GPIO_Init+0x70>)
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	4a13      	ldr	r2, [pc, #76]	; (8000d88 <MX_GPIO_Init+0x70>)
 8000d3c:	f043 0304 	orr.w	r3, r3, #4
 8000d40:	6193      	str	r3, [r2, #24]
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <MX_GPIO_Init+0x70>)
 8000d44:	699b      	ldr	r3, [r3, #24]
 8000d46:	f003 0304 	and.w	r3, r3, #4
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <MX_GPIO_Init+0x70>)
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	4a0d      	ldr	r2, [pc, #52]	; (8000d88 <MX_GPIO_Init+0x70>)
 8000d54:	f043 0310 	orr.w	r3, r3, #16
 8000d58:	6193      	str	r3, [r2, #24]
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <MX_GPIO_Init+0x70>)
 8000d5c:	699b      	ldr	r3, [r3, #24]
 8000d5e:	f003 0310 	and.w	r3, r3, #16
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <MX_GPIO_Init+0x70>)
 8000d68:	699b      	ldr	r3, [r3, #24]
 8000d6a:	4a07      	ldr	r2, [pc, #28]	; (8000d88 <MX_GPIO_Init+0x70>)
 8000d6c:	f043 0308 	orr.w	r3, r3, #8
 8000d70:	6193      	str	r3, [r2, #24]
 8000d72:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <MX_GPIO_Init+0x70>)
 8000d74:	699b      	ldr	r3, [r3, #24]
 8000d76:	f003 0308 	and.w	r3, r3, #8
 8000d7a:	603b      	str	r3, [r7, #0]
 8000d7c:	683b      	ldr	r3, [r7, #0]

}
 8000d7e:	bf00      	nop
 8000d80:	3714      	adds	r7, #20
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	00000000 	.word	0x00000000

08000d90 <Convert_Values>:
/* USER CODE BEGIN 0 */

uint32_t ADC_VALUES[16] = {0};	// unprocessed ADC Values
double CONVERTED_VALUES[16] = {0};	// processed values

void Convert_Values(uint8_t index) {
 8000d90:	b590      	push	{r4, r7, lr}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
	/* Convert value with appropriate relationship given the index */

	switch(index) {
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	2b0f      	cmp	r3, #15
 8000d9e:	d860      	bhi.n	8000e62 <Convert_Values+0xd2>
 8000da0:	a201      	add	r2, pc, #4	; (adr r2, 8000da8 <Convert_Values+0x18>)
 8000da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da6:	bf00      	nop
 8000da8:	08000e61 	.word	0x08000e61
 8000dac:	08000e61 	.word	0x08000e61
 8000db0:	08000e61 	.word	0x08000e61
 8000db4:	08000e61 	.word	0x08000e61
 8000db8:	08000e61 	.word	0x08000e61
 8000dbc:	08000de9 	.word	0x08000de9
 8000dc0:	08000e25 	.word	0x08000e25
 8000dc4:	08000e61 	.word	0x08000e61
 8000dc8:	08000e61 	.word	0x08000e61
 8000dcc:	08000e61 	.word	0x08000e61
 8000dd0:	08000e63 	.word	0x08000e63
 8000dd4:	08000e63 	.word	0x08000e63
 8000dd8:	08000e63 	.word	0x08000e63
 8000ddc:	08000e63 	.word	0x08000e63
 8000de0:	08000e61 	.word	0x08000e61
 8000de4:	08000e61 	.word	0x08000e61
		case 5:
			/* Relationship for converting ADC for Vsense 1 and modify CONVERTED_VALUES[index] */
			CONVERTED_VALUES[index] = (ADC_VALUES[index] + 82.621) / 40.271;
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	4a29      	ldr	r2, [pc, #164]	; (8000e90 <Convert_Values+0x100>)
 8000dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff fb5b 	bl	80004ac <__aeabi_ui2d>
 8000df6:	a31e      	add	r3, pc, #120	; (adr r3, 8000e70 <Convert_Values+0xe0>)
 8000df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dfc:	f7ff fa1a 	bl	8000234 <__adddf3>
 8000e00:	4602      	mov	r2, r0
 8000e02:	460b      	mov	r3, r1
 8000e04:	4610      	mov	r0, r2
 8000e06:	4619      	mov	r1, r3
 8000e08:	79fc      	ldrb	r4, [r7, #7]
 8000e0a:	a31b      	add	r3, pc, #108	; (adr r3, 8000e78 <Convert_Values+0xe8>)
 8000e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e10:	f7ff fcf0 	bl	80007f4 <__aeabi_ddiv>
 8000e14:	4602      	mov	r2, r0
 8000e16:	460b      	mov	r3, r1
 8000e18:	481e      	ldr	r0, [pc, #120]	; (8000e94 <Convert_Values+0x104>)
 8000e1a:	00e1      	lsls	r1, r4, #3
 8000e1c:	4401      	add	r1, r0
 8000e1e:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 8000e22:	e01e      	b.n	8000e62 <Convert_Values+0xd2>
		case 6:
			/* Relationship for converting ADC for Vsense 1 and modify CONVERTED_VALUES[index] */
			CONVERTED_VALUES[index] = (ADC_VALUES[index] + 81.822) / 40.441;
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	4a1a      	ldr	r2, [pc, #104]	; (8000e90 <Convert_Values+0x100>)
 8000e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fb3d 	bl	80004ac <__aeabi_ui2d>
 8000e32:	a313      	add	r3, pc, #76	; (adr r3, 8000e80 <Convert_Values+0xf0>)
 8000e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e38:	f7ff f9fc 	bl	8000234 <__adddf3>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	460b      	mov	r3, r1
 8000e40:	4610      	mov	r0, r2
 8000e42:	4619      	mov	r1, r3
 8000e44:	79fc      	ldrb	r4, [r7, #7]
 8000e46:	a310      	add	r3, pc, #64	; (adr r3, 8000e88 <Convert_Values+0xf8>)
 8000e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e4c:	f7ff fcd2 	bl	80007f4 <__aeabi_ddiv>
 8000e50:	4602      	mov	r2, r0
 8000e52:	460b      	mov	r3, r1
 8000e54:	480f      	ldr	r0, [pc, #60]	; (8000e94 <Convert_Values+0x104>)
 8000e56:	00e1      	lsls	r1, r4, #3
 8000e58:	4401      	add	r1, r0
 8000e5a:	e9c1 2300 	strd	r2, r3, [r1]
			break;
 8000e5e:	e000      	b.n	8000e62 <Convert_Values+0xd2>
		case 8:
		case 9:
		case 14:
		case 15:
			/* Relationship for converting to temperature and modify CONVERTED_VALUES[index] */
			break;
 8000e60:	bf00      	nop
	}
}
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd90      	pop	{r4, r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	f3af 8000 	nop.w
 8000e70:	76c8b439 	.word	0x76c8b439
 8000e74:	4054a7be 	.word	0x4054a7be
 8000e78:	20c49ba6 	.word	0x20c49ba6
 8000e7c:	404422b0 	.word	0x404422b0
 8000e80:	a5e353f8 	.word	0xa5e353f8
 8000e84:	4054749b 	.word	0x4054749b
 8000e88:	b020c49c 	.word	0xb020c49c
 8000e8c:	40443872 	.word	0x40443872
 8000e90:	2000002c 	.word	0x2000002c
 8000e94:	20000070 	.word	0x20000070

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9c:	f000 fa1c 	bl	80012d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea0:	f000 f8cc 	bl	800103c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea4:	f7ff ff38 	bl	8000d18 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ea8:	f7ff fd8c 	bl	80009c4 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000eac:	f000 f97e 	bl	80011ac <MX_TIM1_Init>
  MX_CAN_Init();
 8000eb0:	f7ff fe9e 	bl	8000bf0 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc1);
 8000eb4:	485e      	ldr	r0, [pc, #376]	; (8001030 <main+0x198>)
 8000eb6:	f000 fb7f 	bl	80015b8 <HAL_ADC_Start>
//  }

  // if (HAL_OK != HAL_ADC_Start_DMA(&hadc1, temperatures, ADC_BUF_SIZE))
	  // Error_Handler();

  if (HAL_OK != HAL_TIM_Base_Start(&htim1)) {
 8000eba:	485e      	ldr	r0, [pc, #376]	; (8001034 <main+0x19c>)
 8000ebc:	f002 f81a 	bl	8002ef4 <HAL_TIM_Base_Start>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <main+0x32>
	  Error_Handler();
 8000ec6:	f000 f90b 	bl	80010e0 <Error_Handler>
    /* USER CODE BEGIN 3 */

	  //code here
	  //read ADC, process, then output to CANbus

	  ADC_Select((uint8_t) 6);	// VSENSE1
 8000eca:	2006      	movs	r0, #6
 8000ecc:	f7ff fe24 	bl	8000b18 <ADC_Select>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000ed0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ed4:	4856      	ldr	r0, [pc, #344]	; (8001030 <main+0x198>)
 8000ed6:	f000 fc1d 	bl	8001714 <HAL_ADC_PollForConversion>
	  ADC_VALUES[6] = HAL_ADC_GetValue(&hadc1);
 8000eda:	4855      	ldr	r0, [pc, #340]	; (8001030 <main+0x198>)
 8000edc:	f000 fd14 	bl	8001908 <HAL_ADC_GetValue>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	4a55      	ldr	r2, [pc, #340]	; (8001038 <main+0x1a0>)
 8000ee4:	6193      	str	r3, [r2, #24]
	  Convert_Values((uint8_t) 6);
 8000ee6:	2006      	movs	r0, #6
 8000ee8:	f7ff ff52 	bl	8000d90 <Convert_Values>

	  ADC_Select((uint8_t) 5); // VSENSE2
 8000eec:	2005      	movs	r0, #5
 8000eee:	f7ff fe13 	bl	8000b18 <ADC_Select>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000ef2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ef6:	484e      	ldr	r0, [pc, #312]	; (8001030 <main+0x198>)
 8000ef8:	f000 fc0c 	bl	8001714 <HAL_ADC_PollForConversion>
	  ADC_VALUES[5] = HAL_ADC_GetValue(&hadc1);
 8000efc:	484c      	ldr	r0, [pc, #304]	; (8001030 <main+0x198>)
 8000efe:	f000 fd03 	bl	8001908 <HAL_ADC_GetValue>
 8000f02:	4603      	mov	r3, r0
 8000f04:	4a4c      	ldr	r2, [pc, #304]	; (8001038 <main+0x1a0>)
 8000f06:	6153      	str	r3, [r2, #20]
	  Convert_Values((uint8_t) 5);
 8000f08:	2005      	movs	r0, #5
 8000f0a:	f7ff ff41 	bl	8000d90 <Convert_Values>

	  ADC_Select((uint8_t) 7);	// ISENSE1
 8000f0e:	2007      	movs	r0, #7
 8000f10:	f7ff fe02 	bl	8000b18 <ADC_Select>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000f14:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f18:	4845      	ldr	r0, [pc, #276]	; (8001030 <main+0x198>)
 8000f1a:	f000 fbfb 	bl	8001714 <HAL_ADC_PollForConversion>
	  ADC_VALUES[7] = HAL_ADC_GetValue(&hadc1);
 8000f1e:	4844      	ldr	r0, [pc, #272]	; (8001030 <main+0x198>)
 8000f20:	f000 fcf2 	bl	8001908 <HAL_ADC_GetValue>
 8000f24:	4603      	mov	r3, r0
 8000f26:	4a44      	ldr	r2, [pc, #272]	; (8001038 <main+0x1a0>)
 8000f28:	61d3      	str	r3, [r2, #28]

	  ADC_Select((uint8_t) 4);	// ISENSE2
 8000f2a:	2004      	movs	r0, #4
 8000f2c:	f7ff fdf4 	bl	8000b18 <ADC_Select>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000f30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f34:	483e      	ldr	r0, [pc, #248]	; (8001030 <main+0x198>)
 8000f36:	f000 fbed 	bl	8001714 <HAL_ADC_PollForConversion>
	  ADC_VALUES[4] = HAL_ADC_GetValue(&hadc1);
 8000f3a:	483d      	ldr	r0, [pc, #244]	; (8001030 <main+0x198>)
 8000f3c:	f000 fce4 	bl	8001908 <HAL_ADC_GetValue>
 8000f40:	4603      	mov	r3, r0
 8000f42:	4a3d      	ldr	r2, [pc, #244]	; (8001038 <main+0x1a0>)
 8000f44:	6113      	str	r3, [r2, #16]

	  ADC_Select((uint8_t) 0);	// TEMP_1
 8000f46:	2000      	movs	r0, #0
 8000f48:	f7ff fde6 	bl	8000b18 <ADC_Select>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000f4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f50:	4837      	ldr	r0, [pc, #220]	; (8001030 <main+0x198>)
 8000f52:	f000 fbdf 	bl	8001714 <HAL_ADC_PollForConversion>
	  ADC_VALUES[0] = HAL_ADC_GetValue(&hadc1);
 8000f56:	4836      	ldr	r0, [pc, #216]	; (8001030 <main+0x198>)
 8000f58:	f000 fcd6 	bl	8001908 <HAL_ADC_GetValue>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	4a36      	ldr	r2, [pc, #216]	; (8001038 <main+0x1a0>)
 8000f60:	6013      	str	r3, [r2, #0]

	  ADC_Select((uint8_t) 1); // TEMP_2
 8000f62:	2001      	movs	r0, #1
 8000f64:	f7ff fdd8 	bl	8000b18 <ADC_Select>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000f68:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f6c:	4830      	ldr	r0, [pc, #192]	; (8001030 <main+0x198>)
 8000f6e:	f000 fbd1 	bl	8001714 <HAL_ADC_PollForConversion>
	  ADC_VALUES[1] = HAL_ADC_GetValue(&hadc1);
 8000f72:	482f      	ldr	r0, [pc, #188]	; (8001030 <main+0x198>)
 8000f74:	f000 fcc8 	bl	8001908 <HAL_ADC_GetValue>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	4a2f      	ldr	r2, [pc, #188]	; (8001038 <main+0x1a0>)
 8000f7c:	6053      	str	r3, [r2, #4]

	  ADC_Select((uint8_t) 2);	// TEMP_3
 8000f7e:	2002      	movs	r0, #2
 8000f80:	f7ff fdca 	bl	8000b18 <ADC_Select>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000f84:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f88:	4829      	ldr	r0, [pc, #164]	; (8001030 <main+0x198>)
 8000f8a:	f000 fbc3 	bl	8001714 <HAL_ADC_PollForConversion>
	  ADC_VALUES[2] = HAL_ADC_GetValue(&hadc1);
 8000f8e:	4828      	ldr	r0, [pc, #160]	; (8001030 <main+0x198>)
 8000f90:	f000 fcba 	bl	8001908 <HAL_ADC_GetValue>
 8000f94:	4603      	mov	r3, r0
 8000f96:	4a28      	ldr	r2, [pc, #160]	; (8001038 <main+0x1a0>)
 8000f98:	6093      	str	r3, [r2, #8]

	  ADC_Select((uint8_t) 3);	// TEMP_4
 8000f9a:	2003      	movs	r0, #3
 8000f9c:	f7ff fdbc 	bl	8000b18 <ADC_Select>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000fa0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fa4:	4822      	ldr	r0, [pc, #136]	; (8001030 <main+0x198>)
 8000fa6:	f000 fbb5 	bl	8001714 <HAL_ADC_PollForConversion>
	  ADC_VALUES[3] = HAL_ADC_GetValue(&hadc1);
 8000faa:	4821      	ldr	r0, [pc, #132]	; (8001030 <main+0x198>)
 8000fac:	f000 fcac 	bl	8001908 <HAL_ADC_GetValue>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	4a21      	ldr	r2, [pc, #132]	; (8001038 <main+0x1a0>)
 8000fb4:	60d3      	str	r3, [r2, #12]

	  ADC_Select((uint8_t) 14);	// TEMP_5
 8000fb6:	200e      	movs	r0, #14
 8000fb8:	f7ff fdae 	bl	8000b18 <ADC_Select>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000fbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fc0:	481b      	ldr	r0, [pc, #108]	; (8001030 <main+0x198>)
 8000fc2:	f000 fba7 	bl	8001714 <HAL_ADC_PollForConversion>
	  ADC_VALUES[14] = HAL_ADC_GetValue(&hadc1);
 8000fc6:	481a      	ldr	r0, [pc, #104]	; (8001030 <main+0x198>)
 8000fc8:	f000 fc9e 	bl	8001908 <HAL_ADC_GetValue>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	4a1a      	ldr	r2, [pc, #104]	; (8001038 <main+0x1a0>)
 8000fd0:	6393      	str	r3, [r2, #56]	; 0x38

	  ADC_Select((uint8_t) 15); // TEMP_6
 8000fd2:	200f      	movs	r0, #15
 8000fd4:	f7ff fda0 	bl	8000b18 <ADC_Select>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000fd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000fdc:	4814      	ldr	r0, [pc, #80]	; (8001030 <main+0x198>)
 8000fde:	f000 fb99 	bl	8001714 <HAL_ADC_PollForConversion>
	  ADC_VALUES[15] = HAL_ADC_GetValue(&hadc1);
 8000fe2:	4813      	ldr	r0, [pc, #76]	; (8001030 <main+0x198>)
 8000fe4:	f000 fc90 	bl	8001908 <HAL_ADC_GetValue>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	4a13      	ldr	r2, [pc, #76]	; (8001038 <main+0x1a0>)
 8000fec:	63d3      	str	r3, [r2, #60]	; 0x3c

	  ADC_Select((uint8_t) 8);	// TEMP_7
 8000fee:	2008      	movs	r0, #8
 8000ff0:	f7ff fd92 	bl	8000b18 <ADC_Select>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000ff4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ff8:	480d      	ldr	r0, [pc, #52]	; (8001030 <main+0x198>)
 8000ffa:	f000 fb8b 	bl	8001714 <HAL_ADC_PollForConversion>
	  ADC_VALUES[8] = HAL_ADC_GetValue(&hadc1);
 8000ffe:	480c      	ldr	r0, [pc, #48]	; (8001030 <main+0x198>)
 8001000:	f000 fc82 	bl	8001908 <HAL_ADC_GetValue>
 8001004:	4603      	mov	r3, r0
 8001006:	4a0c      	ldr	r2, [pc, #48]	; (8001038 <main+0x1a0>)
 8001008:	6213      	str	r3, [r2, #32]

	  ADC_Select((uint8_t) 9);	// TEMP_8
 800100a:	2009      	movs	r0, #9
 800100c:	f7ff fd84 	bl	8000b18 <ADC_Select>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8001010:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001014:	4806      	ldr	r0, [pc, #24]	; (8001030 <main+0x198>)
 8001016:	f000 fb7d 	bl	8001714 <HAL_ADC_PollForConversion>
	  ADC_VALUES[9] = HAL_ADC_GetValue(&hadc1);
 800101a:	4805      	ldr	r0, [pc, #20]	; (8001030 <main+0x198>)
 800101c:	f000 fc74 	bl	8001908 <HAL_ADC_GetValue>
 8001020:	4603      	mov	r3, r0
 8001022:	4a05      	ldr	r2, [pc, #20]	; (8001038 <main+0x1a0>)
 8001024:	6253      	str	r3, [r2, #36]	; 0x24


	  HAL_Delay (1000);
 8001026:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800102a:	f000 f9b7 	bl	800139c <HAL_Delay>
	  ADC_Select((uint8_t) 6);	// VSENSE1
 800102e:	e74c      	b.n	8000eca <main+0x32>
 8001030:	200000f0 	.word	0x200000f0
 8001034:	20000148 	.word	0x20000148
 8001038:	2000002c 	.word	0x2000002c

0800103c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b096      	sub	sp, #88	; 0x58
 8001040:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001042:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001046:	2228      	movs	r2, #40	; 0x28
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f002 fa0e 	bl	800346c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001050:	f107 031c 	add.w	r3, r7, #28
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]
 800106c:	611a      	str	r2, [r3, #16]
 800106e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001070:	2302      	movs	r3, #2
 8001072:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001074:	2301      	movs	r3, #1
 8001076:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001078:	2310      	movs	r3, #16
 800107a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800107c:	2300      	movs	r3, #0
 800107e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001080:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001084:	4618      	mov	r0, r3
 8001086:	f001 f943 	bl	8002310 <HAL_RCC_OscConfig>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001090:	f000 f826 	bl	80010e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001094:	230f      	movs	r3, #15
 8001096:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001098:	2300      	movs	r3, #0
 800109a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800109c:	2300      	movs	r3, #0
 800109e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010a0:	2300      	movs	r3, #0
 80010a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010a8:	f107 031c 	add.w	r3, r7, #28
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f001 fbae 	bl	8002810 <HAL_RCC_ClockConfig>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <SystemClock_Config+0x82>
  {
    Error_Handler();
 80010ba:	f000 f811 	bl	80010e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010be:	2302      	movs	r3, #2
 80010c0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	4618      	mov	r0, r3
 80010ca:	f001 fd27 	bl	8002b1c <HAL_RCCEx_PeriphCLKConfig>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80010d4:	f000 f804 	bl	80010e0 <Error_Handler>
  }
}
 80010d8:	bf00      	nop
 80010da:	3758      	adds	r7, #88	; 0x58
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e4:	b672      	cpsid	i
}
 80010e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <Error_Handler+0x8>
	...

080010ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <HAL_MspInit+0x5c>)
 80010f4:	699b      	ldr	r3, [r3, #24]
 80010f6:	4a14      	ldr	r2, [pc, #80]	; (8001148 <HAL_MspInit+0x5c>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6193      	str	r3, [r2, #24]
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <HAL_MspInit+0x5c>)
 8001100:	699b      	ldr	r3, [r3, #24]
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	60bb      	str	r3, [r7, #8]
 8001108:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800110a:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <HAL_MspInit+0x5c>)
 800110c:	69db      	ldr	r3, [r3, #28]
 800110e:	4a0e      	ldr	r2, [pc, #56]	; (8001148 <HAL_MspInit+0x5c>)
 8001110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001114:	61d3      	str	r3, [r2, #28]
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <HAL_MspInit+0x5c>)
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001122:	4b0a      	ldr	r3, [pc, #40]	; (800114c <HAL_MspInit+0x60>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	4a04      	ldr	r2, [pc, #16]	; (800114c <HAL_MspInit+0x60>)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800113e:	bf00      	nop
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr
 8001148:	40021000 	.word	0x40021000
 800114c:	40010000 	.word	0x40010000

08001150 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001154:	e7fe      	b.n	8001154 <NMI_Handler+0x4>

08001156 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800115a:	e7fe      	b.n	800115a <HardFault_Handler+0x4>

0800115c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001160:	e7fe      	b.n	8001160 <MemManage_Handler+0x4>

08001162 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001166:	e7fe      	b.n	8001166 <BusFault_Handler+0x4>

08001168 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800116c:	e7fe      	b.n	800116c <UsageFault_Handler+0x4>

0800116e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	bc80      	pop	{r7}
 8001178:	4770      	bx	lr

0800117a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr

08001186 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr

08001192 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001196:	f000 f8e5 	bl	8001364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}

0800119e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr
	...

080011ac <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011b2:	f107 0308 	add.w	r3, r7, #8
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c0:	463b      	mov	r3, r7
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 80011c8:	4b1f      	ldr	r3, [pc, #124]	; (8001248 <MX_TIM1_Init+0x9c>)
 80011ca:	4a20      	ldr	r2, [pc, #128]	; (800124c <MX_TIM1_Init+0xa0>)
 80011cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 47999;
 80011ce:	4b1e      	ldr	r3, [pc, #120]	; (8001248 <MX_TIM1_Init+0x9c>)
 80011d0:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 80011d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d6:	4b1c      	ldr	r3, [pc, #112]	; (8001248 <MX_TIM1_Init+0x9c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 80011dc:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <MX_TIM1_Init+0x9c>)
 80011de:	f242 720f 	movw	r2, #9999	; 0x270f
 80011e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e4:	4b18      	ldr	r3, [pc, #96]	; (8001248 <MX_TIM1_Init+0x9c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011ea:	4b17      	ldr	r3, [pc, #92]	; (8001248 <MX_TIM1_Init+0x9c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f0:	4b15      	ldr	r3, [pc, #84]	; (8001248 <MX_TIM1_Init+0x9c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011f6:	4814      	ldr	r0, [pc, #80]	; (8001248 <MX_TIM1_Init+0x9c>)
 80011f8:	f001 fe2c 	bl	8002e54 <HAL_TIM_Base_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001202:	f7ff ff6d 	bl	80010e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001206:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800120a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800120c:	f107 0308 	add.w	r3, r7, #8
 8001210:	4619      	mov	r1, r3
 8001212:	480d      	ldr	r0, [pc, #52]	; (8001248 <MX_TIM1_Init+0x9c>)
 8001214:	f001 fec6 	bl	8002fa4 <HAL_TIM_ConfigClockSource>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800121e:	f7ff ff5f 	bl	80010e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001222:	2320      	movs	r3, #32
 8001224:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001226:	2300      	movs	r3, #0
 8001228:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800122a:	463b      	mov	r3, r7
 800122c:	4619      	mov	r1, r3
 800122e:	4806      	ldr	r0, [pc, #24]	; (8001248 <MX_TIM1_Init+0x9c>)
 8001230:	f002 f88c 	bl	800334c <HAL_TIMEx_MasterConfigSynchronization>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800123a:	f7ff ff51 	bl	80010e0 <Error_Handler>
  }

}
 800123e:	bf00      	nop
 8001240:	3718      	adds	r7, #24
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000148 	.word	0x20000148
 800124c:	40012c00 	.word	0x40012c00

08001250 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a09      	ldr	r2, [pc, #36]	; (8001284 <HAL_TIM_Base_MspInit+0x34>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d10b      	bne.n	800127a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <HAL_TIM_Base_MspInit+0x38>)
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	4a08      	ldr	r2, [pc, #32]	; (8001288 <HAL_TIM_Base_MspInit+0x38>)
 8001268:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800126c:	6193      	str	r3, [r2, #24]
 800126e:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_TIM_Base_MspInit+0x38>)
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800127a:	bf00      	nop
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr
 8001284:	40012c00 	.word	0x40012c00
 8001288:	40021000 	.word	0x40021000

0800128c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800128c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800128e:	e003      	b.n	8001298 <LoopCopyDataInit>

08001290 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001292:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001294:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001296:	3104      	adds	r1, #4

08001298 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001298:	480a      	ldr	r0, [pc, #40]	; (80012c4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800129a:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800129c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800129e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80012a0:	d3f6      	bcc.n	8001290 <CopyDataInit>
  ldr r2, =_sbss
 80012a2:	4a0a      	ldr	r2, [pc, #40]	; (80012cc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80012a4:	e002      	b.n	80012ac <LoopFillZerobss>

080012a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80012a8:	f842 3b04 	str.w	r3, [r2], #4

080012ac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80012ac:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80012ae:	429a      	cmp	r2, r3
  bcc FillZerobss
 80012b0:	d3f9      	bcc.n	80012a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012b2:	f7ff ff74 	bl	800119e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012b6:	f002 f8b5 	bl	8003424 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012ba:	f7ff fded 	bl	8000e98 <main>
  bx lr
 80012be:	4770      	bx	lr
  ldr r3, =_sidata
 80012c0:	080034d4 	.word	0x080034d4
  ldr r0, =_sdata
 80012c4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80012c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80012cc:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 80012d0:	20000194 	.word	0x20000194

080012d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012d4:	e7fe      	b.n	80012d4 <ADC1_2_IRQHandler>
	...

080012d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <HAL_Init+0x28>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a07      	ldr	r2, [pc, #28]	; (8001300 <HAL_Init+0x28>)
 80012e2:	f043 0310 	orr.w	r3, r3, #16
 80012e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012e8:	2003      	movs	r0, #3
 80012ea:	f000 fe49 	bl	8001f80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ee:	2000      	movs	r0, #0
 80012f0:	f000 f808 	bl	8001304 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012f4:	f7ff fefa 	bl	80010ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40022000 	.word	0x40022000

08001304 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <HAL_InitTick+0x54>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <HAL_InitTick+0x58>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	4619      	mov	r1, r3
 8001316:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131a:	fbb3 f3f1 	udiv	r3, r3, r1
 800131e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001322:	4618      	mov	r0, r3
 8001324:	f000 fe53 	bl	8001fce <HAL_SYSTICK_Config>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e00e      	b.n	8001350 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b0f      	cmp	r3, #15
 8001336:	d80a      	bhi.n	800134e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001338:	2200      	movs	r2, #0
 800133a:	6879      	ldr	r1, [r7, #4]
 800133c:	f04f 30ff 	mov.w	r0, #4294967295
 8001340:	f000 fe29 	bl	8001f96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001344:	4a06      	ldr	r2, [pc, #24]	; (8001360 <HAL_InitTick+0x5c>)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800134a:	2300      	movs	r3, #0
 800134c:	e000      	b.n	8001350 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
}
 8001350:	4618      	mov	r0, r3
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000000 	.word	0x20000000
 800135c:	20000008 	.word	0x20000008
 8001360:	20000004 	.word	0x20000004

08001364 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001368:	4b05      	ldr	r3, [pc, #20]	; (8001380 <HAL_IncTick+0x1c>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	461a      	mov	r2, r3
 800136e:	4b05      	ldr	r3, [pc, #20]	; (8001384 <HAL_IncTick+0x20>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4413      	add	r3, r2
 8001374:	4a03      	ldr	r2, [pc, #12]	; (8001384 <HAL_IncTick+0x20>)
 8001376:	6013      	str	r3, [r2, #0]
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr
 8001380:	20000008 	.word	0x20000008
 8001384:	20000190 	.word	0x20000190

08001388 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return uwTick;
 800138c:	4b02      	ldr	r3, [pc, #8]	; (8001398 <HAL_GetTick+0x10>)
 800138e:	681b      	ldr	r3, [r3, #0]
}
 8001390:	4618      	mov	r0, r3
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	20000190 	.word	0x20000190

0800139c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013a4:	f7ff fff0 	bl	8001388 <HAL_GetTick>
 80013a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b4:	d005      	beq.n	80013c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013b6:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <HAL_Delay+0x44>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	461a      	mov	r2, r3
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	4413      	add	r3, r2
 80013c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013c2:	bf00      	nop
 80013c4:	f7ff ffe0 	bl	8001388 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d8f7      	bhi.n	80013c4 <HAL_Delay+0x28>
  {
  }
}
 80013d4:	bf00      	nop
 80013d6:	bf00      	nop
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000008 	.word	0x20000008

080013e4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013ec:	2300      	movs	r3, #0
 80013ee:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80013f0:	2300      	movs	r3, #0
 80013f2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e0ce      	b.n	80015a4 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001410:	2b00      	cmp	r3, #0
 8001412:	d109      	bne.n	8001428 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff fb0c 	bl	8000a40 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f000 fbc3 	bl	8001bb4 <ADC_ConversionStop_Disable>
 800142e:	4603      	mov	r3, r0
 8001430:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001436:	f003 0310 	and.w	r3, r3, #16
 800143a:	2b00      	cmp	r3, #0
 800143c:	f040 80a9 	bne.w	8001592 <HAL_ADC_Init+0x1ae>
 8001440:	7dfb      	ldrb	r3, [r7, #23]
 8001442:	2b00      	cmp	r3, #0
 8001444:	f040 80a5 	bne.w	8001592 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001450:	f023 0302 	bic.w	r3, r3, #2
 8001454:	f043 0202 	orr.w	r2, r3, #2
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4951      	ldr	r1, [pc, #324]	; (80015ac <HAL_ADC_Init+0x1c8>)
 8001466:	428b      	cmp	r3, r1
 8001468:	d10a      	bne.n	8001480 <HAL_ADC_Init+0x9c>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001472:	d002      	beq.n	800147a <HAL_ADC_Init+0x96>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	69db      	ldr	r3, [r3, #28]
 8001478:	e004      	b.n	8001484 <HAL_ADC_Init+0xa0>
 800147a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800147e:	e001      	b.n	8001484 <HAL_ADC_Init+0xa0>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001484:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	7b1b      	ldrb	r3, [r3, #12]
 800148a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800148c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	4313      	orrs	r3, r2
 8001492:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800149c:	d003      	beq.n	80014a6 <HAL_ADC_Init+0xc2>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d102      	bne.n	80014ac <HAL_ADC_Init+0xc8>
 80014a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014aa:	e000      	b.n	80014ae <HAL_ADC_Init+0xca>
 80014ac:	2300      	movs	r3, #0
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	7d1b      	ldrb	r3, [r3, #20]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d119      	bne.n	80014f0 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	7b1b      	ldrb	r3, [r3, #12]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d109      	bne.n	80014d8 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	035a      	lsls	r2, r3, #13
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014d4:	613b      	str	r3, [r7, #16]
 80014d6:	e00b      	b.n	80014f0 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014dc:	f043 0220 	orr.w	r2, r3, #32
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e8:	f043 0201 	orr.w	r2, r3, #1
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	430a      	orrs	r2, r1
 8001502:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	689a      	ldr	r2, [r3, #8]
 800150a:	4b29      	ldr	r3, [pc, #164]	; (80015b0 <HAL_ADC_Init+0x1cc>)
 800150c:	4013      	ands	r3, r2
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	6812      	ldr	r2, [r2, #0]
 8001512:	68b9      	ldr	r1, [r7, #8]
 8001514:	430b      	orrs	r3, r1
 8001516:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001520:	d003      	beq.n	800152a <HAL_ADC_Init+0x146>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d104      	bne.n	8001534 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	3b01      	subs	r3, #1
 8001530:	051b      	lsls	r3, r3, #20
 8001532:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	430a      	orrs	r2, r1
 8001546:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	689a      	ldr	r2, [r3, #8]
 800154e:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <HAL_ADC_Init+0x1d0>)
 8001550:	4013      	ands	r3, r2
 8001552:	68ba      	ldr	r2, [r7, #8]
 8001554:	429a      	cmp	r2, r3
 8001556:	d10b      	bne.n	8001570 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001562:	f023 0303 	bic.w	r3, r3, #3
 8001566:	f043 0201 	orr.w	r2, r3, #1
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800156e:	e018      	b.n	80015a2 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001574:	f023 0312 	bic.w	r3, r3, #18
 8001578:	f043 0210 	orr.w	r2, r3, #16
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001584:	f043 0201 	orr.w	r2, r3, #1
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001590:	e007      	b.n	80015a2 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001596:	f043 0210 	orr.w	r2, r3, #16
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80015a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3718      	adds	r7, #24
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40013c00 	.word	0x40013c00
 80015b0:	ffe1f7fd 	.word	0xffe1f7fd
 80015b4:	ff1f0efe 	.word	0xff1f0efe

080015b8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015c0:	2300      	movs	r3, #0
 80015c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d101      	bne.n	80015d2 <HAL_ADC_Start+0x1a>
 80015ce:	2302      	movs	r3, #2
 80015d0:	e098      	b.n	8001704 <HAL_ADC_Start+0x14c>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 fa98 	bl	8001b10 <ADC_Enable>
 80015e0:	4603      	mov	r3, r0
 80015e2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f040 8087 	bne.w	80016fa <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015f4:	f023 0301 	bic.w	r3, r3, #1
 80015f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a41      	ldr	r2, [pc, #260]	; (800170c <HAL_ADC_Start+0x154>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d105      	bne.n	8001616 <HAL_ADC_Start+0x5e>
 800160a:	4b41      	ldr	r3, [pc, #260]	; (8001710 <HAL_ADC_Start+0x158>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d115      	bne.n	8001642 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800162c:	2b00      	cmp	r3, #0
 800162e:	d026      	beq.n	800167e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001634:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001638:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001640:	e01d      	b.n	800167e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001646:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a2f      	ldr	r2, [pc, #188]	; (8001710 <HAL_ADC_Start+0x158>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d004      	beq.n	8001662 <HAL_ADC_Start+0xaa>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a2b      	ldr	r2, [pc, #172]	; (800170c <HAL_ADC_Start+0x154>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d10d      	bne.n	800167e <HAL_ADC_Start+0xc6>
 8001662:	4b2b      	ldr	r3, [pc, #172]	; (8001710 <HAL_ADC_Start+0x158>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800166a:	2b00      	cmp	r3, #0
 800166c:	d007      	beq.n	800167e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001672:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001676:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001682:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d006      	beq.n	8001698 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168e:	f023 0206 	bic.w	r2, r3, #6
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	62da      	str	r2, [r3, #44]	; 0x2c
 8001696:	e002      	b.n	800169e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f06f 0202 	mvn.w	r2, #2
 80016ae:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80016ba:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80016be:	d113      	bne.n	80016e8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80016c4:	4a11      	ldr	r2, [pc, #68]	; (800170c <HAL_ADC_Start+0x154>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d105      	bne.n	80016d6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80016ca:	4b11      	ldr	r3, [pc, #68]	; (8001710 <HAL_ADC_Start+0x158>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d108      	bne.n	80016e8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	e00c      	b.n	8001702 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	689a      	ldr	r2, [r3, #8]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	e003      	b.n	8001702 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001702:	7bfb      	ldrb	r3, [r7, #15]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40012800 	.word	0x40012800
 8001710:	40012400 	.word	0x40012400

08001714 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001714:	b590      	push	{r4, r7, lr}
 8001716:	b087      	sub	sp, #28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800172a:	f7ff fe2d 	bl	8001388 <HAL_GetTick>
 800172e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800173a:	2b00      	cmp	r3, #0
 800173c:	d00b      	beq.n	8001756 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001742:	f043 0220 	orr.w	r2, r3, #32
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e0c8      	b.n	80018e8 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001760:	2b00      	cmp	r3, #0
 8001762:	d12a      	bne.n	80017ba <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800176e:	2b00      	cmp	r3, #0
 8001770:	d123      	bne.n	80017ba <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001772:	e01a      	b.n	80017aa <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800177a:	d016      	beq.n	80017aa <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d007      	beq.n	8001792 <HAL_ADC_PollForConversion+0x7e>
 8001782:	f7ff fe01 	bl	8001388 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	429a      	cmp	r2, r3
 8001790:	d20b      	bcs.n	80017aa <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001796:	f043 0204 	orr.w	r2, r3, #4
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e09e      	b.n	80018e8 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0dd      	beq.n	8001774 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80017b8:	e06c      	b.n	8001894 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80017ba:	4b4d      	ldr	r3, [pc, #308]	; (80018f0 <HAL_ADC_PollForConversion+0x1dc>)
 80017bc:	681c      	ldr	r4, [r3, #0]
 80017be:	2002      	movs	r0, #2
 80017c0:	f001 fa62 	bl	8002c88 <HAL_RCCEx_GetPeriphCLKFreq>
 80017c4:	4603      	mov	r3, r0
 80017c6:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6919      	ldr	r1, [r3, #16]
 80017d0:	4b48      	ldr	r3, [pc, #288]	; (80018f4 <HAL_ADC_PollForConversion+0x1e0>)
 80017d2:	400b      	ands	r3, r1
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d118      	bne.n	800180a <HAL_ADC_PollForConversion+0xf6>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	68d9      	ldr	r1, [r3, #12]
 80017de:	4b46      	ldr	r3, [pc, #280]	; (80018f8 <HAL_ADC_PollForConversion+0x1e4>)
 80017e0:	400b      	ands	r3, r1
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d111      	bne.n	800180a <HAL_ADC_PollForConversion+0xf6>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6919      	ldr	r1, [r3, #16]
 80017ec:	4b43      	ldr	r3, [pc, #268]	; (80018fc <HAL_ADC_PollForConversion+0x1e8>)
 80017ee:	400b      	ands	r3, r1
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d108      	bne.n	8001806 <HAL_ADC_PollForConversion+0xf2>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	68d9      	ldr	r1, [r3, #12]
 80017fa:	4b41      	ldr	r3, [pc, #260]	; (8001900 <HAL_ADC_PollForConversion+0x1ec>)
 80017fc:	400b      	ands	r3, r1
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_ADC_PollForConversion+0xf2>
 8001802:	2314      	movs	r3, #20
 8001804:	e020      	b.n	8001848 <HAL_ADC_PollForConversion+0x134>
 8001806:	2329      	movs	r3, #41	; 0x29
 8001808:	e01e      	b.n	8001848 <HAL_ADC_PollForConversion+0x134>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6919      	ldr	r1, [r3, #16]
 8001810:	4b3a      	ldr	r3, [pc, #232]	; (80018fc <HAL_ADC_PollForConversion+0x1e8>)
 8001812:	400b      	ands	r3, r1
 8001814:	2b00      	cmp	r3, #0
 8001816:	d106      	bne.n	8001826 <HAL_ADC_PollForConversion+0x112>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68d9      	ldr	r1, [r3, #12]
 800181e:	4b38      	ldr	r3, [pc, #224]	; (8001900 <HAL_ADC_PollForConversion+0x1ec>)
 8001820:	400b      	ands	r3, r1
 8001822:	2b00      	cmp	r3, #0
 8001824:	d00d      	beq.n	8001842 <HAL_ADC_PollForConversion+0x12e>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6919      	ldr	r1, [r3, #16]
 800182c:	4b35      	ldr	r3, [pc, #212]	; (8001904 <HAL_ADC_PollForConversion+0x1f0>)
 800182e:	400b      	ands	r3, r1
 8001830:	2b00      	cmp	r3, #0
 8001832:	d108      	bne.n	8001846 <HAL_ADC_PollForConversion+0x132>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	68d9      	ldr	r1, [r3, #12]
 800183a:	4b32      	ldr	r3, [pc, #200]	; (8001904 <HAL_ADC_PollForConversion+0x1f0>)
 800183c:	400b      	ands	r3, r1
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_ADC_PollForConversion+0x132>
 8001842:	2354      	movs	r3, #84	; 0x54
 8001844:	e000      	b.n	8001848 <HAL_ADC_PollForConversion+0x134>
 8001846:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001848:	fb02 f303 	mul.w	r3, r2, r3
 800184c:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800184e:	e01d      	b.n	800188c <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001856:	d016      	beq.n	8001886 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d007      	beq.n	800186e <HAL_ADC_PollForConversion+0x15a>
 800185e:	f7ff fd93 	bl	8001388 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	d20b      	bcs.n	8001886 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001872:	f043 0204 	orr.w	r2, r3, #4
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e030      	b.n	80018e8 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	3301      	adds	r3, #1
 800188a:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	429a      	cmp	r2, r3
 8001892:	d8dd      	bhi.n	8001850 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f06f 0212 	mvn.w	r2, #18
 800189c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80018b4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80018b8:	d115      	bne.n	80018e6 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d111      	bne.n	80018e6 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d105      	bne.n	80018e6 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018de:	f043 0201 	orr.w	r2, r3, #1
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	371c      	adds	r7, #28
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd90      	pop	{r4, r7, pc}
 80018f0:	20000000 	.word	0x20000000
 80018f4:	24924924 	.word	0x24924924
 80018f8:	00924924 	.word	0x00924924
 80018fc:	12492492 	.word	0x12492492
 8001900:	00492492 	.word	0x00492492
 8001904:	00249249 	.word	0x00249249

08001908 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001916:	4618      	mov	r0, r3
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr

08001920 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800192a:	2300      	movs	r3, #0
 800192c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800192e:	2300      	movs	r3, #0
 8001930:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001938:	2b01      	cmp	r3, #1
 800193a:	d101      	bne.n	8001940 <HAL_ADC_ConfigChannel+0x20>
 800193c:	2302      	movs	r3, #2
 800193e:	e0dc      	b.n	8001afa <HAL_ADC_ConfigChannel+0x1da>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b06      	cmp	r3, #6
 800194e:	d81c      	bhi.n	800198a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	3b05      	subs	r3, #5
 8001962:	221f      	movs	r2, #31
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	4019      	ands	r1, r3
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	6818      	ldr	r0, [r3, #0]
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685a      	ldr	r2, [r3, #4]
 8001974:	4613      	mov	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	3b05      	subs	r3, #5
 800197c:	fa00 f203 	lsl.w	r2, r0, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	635a      	str	r2, [r3, #52]	; 0x34
 8001988:	e03c      	b.n	8001a04 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	2b0c      	cmp	r3, #12
 8001990:	d81c      	bhi.n	80019cc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	4613      	mov	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	3b23      	subs	r3, #35	; 0x23
 80019a4:	221f      	movs	r2, #31
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	4019      	ands	r1, r3
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	6818      	ldr	r0, [r3, #0]
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685a      	ldr	r2, [r3, #4]
 80019b6:	4613      	mov	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	3b23      	subs	r3, #35	; 0x23
 80019be:	fa00 f203 	lsl.w	r2, r0, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	631a      	str	r2, [r3, #48]	; 0x30
 80019ca:	e01b      	b.n	8001a04 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	4613      	mov	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	4413      	add	r3, r2
 80019dc:	3b41      	subs	r3, #65	; 0x41
 80019de:	221f      	movs	r2, #31
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	4019      	ands	r1, r3
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	6818      	ldr	r0, [r3, #0]
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	4613      	mov	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	3b41      	subs	r3, #65	; 0x41
 80019f8:	fa00 f203 	lsl.w	r2, r0, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b09      	cmp	r3, #9
 8001a0a:	d91c      	bls.n	8001a46 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	68d9      	ldr	r1, [r3, #12]
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	4613      	mov	r3, r2
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	4413      	add	r3, r2
 8001a1c:	3b1e      	subs	r3, #30
 8001a1e:	2207      	movs	r2, #7
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	4019      	ands	r1, r3
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	6898      	ldr	r0, [r3, #8]
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4613      	mov	r3, r2
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	4413      	add	r3, r2
 8001a36:	3b1e      	subs	r3, #30
 8001a38:	fa00 f203 	lsl.w	r2, r0, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	430a      	orrs	r2, r1
 8001a42:	60da      	str	r2, [r3, #12]
 8001a44:	e019      	b.n	8001a7a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6919      	ldr	r1, [r3, #16]
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4613      	mov	r3, r2
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	4413      	add	r3, r2
 8001a56:	2207      	movs	r2, #7
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	4019      	ands	r1, r3
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	6898      	ldr	r0, [r3, #8]
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	4413      	add	r3, r2
 8001a6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2b10      	cmp	r3, #16
 8001a80:	d003      	beq.n	8001a8a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a86:	2b11      	cmp	r3, #17
 8001a88:	d132      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a1d      	ldr	r2, [pc, #116]	; (8001b04 <HAL_ADC_ConfigChannel+0x1e4>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d125      	bne.n	8001ae0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d126      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ab0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2b10      	cmp	r3, #16
 8001ab8:	d11a      	bne.n	8001af0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001aba:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <HAL_ADC_ConfigChannel+0x1e8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a13      	ldr	r2, [pc, #76]	; (8001b0c <HAL_ADC_ConfigChannel+0x1ec>)
 8001ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac4:	0c9a      	lsrs	r2, r3, #18
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ad0:	e002      	b.n	8001ad8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1f9      	bne.n	8001ad2 <HAL_ADC_ConfigChannel+0x1b2>
 8001ade:	e007      	b.n	8001af0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae4:	f043 0220 	orr.w	r2, r3, #32
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr
 8001b04:	40012400 	.word	0x40012400
 8001b08:	20000000 	.word	0x20000000
 8001b0c:	431bde83 	.word	0x431bde83

08001b10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d039      	beq.n	8001ba2 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f042 0201 	orr.w	r2, r2, #1
 8001b3c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b3e:	4b1b      	ldr	r3, [pc, #108]	; (8001bac <ADC_Enable+0x9c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a1b      	ldr	r2, [pc, #108]	; (8001bb0 <ADC_Enable+0xa0>)
 8001b44:	fba2 2303 	umull	r2, r3, r2, r3
 8001b48:	0c9b      	lsrs	r3, r3, #18
 8001b4a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b4c:	e002      	b.n	8001b54 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	3b01      	subs	r3, #1
 8001b52:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1f9      	bne.n	8001b4e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b5a:	f7ff fc15 	bl	8001388 <HAL_GetTick>
 8001b5e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b60:	e018      	b.n	8001b94 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b62:	f7ff fc11 	bl	8001388 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d911      	bls.n	8001b94 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b74:	f043 0210 	orr.w	r2, r3, #16
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b80:	f043 0201 	orr.w	r2, r3, #1
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e007      	b.n	8001ba4 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d1df      	bne.n	8001b62 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20000000 	.word	0x20000000
 8001bb0:	431bde83 	.word	0x431bde83

08001bb4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d127      	bne.n	8001c1e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 0201 	bic.w	r2, r2, #1
 8001bdc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001bde:	f7ff fbd3 	bl	8001388 <HAL_GetTick>
 8001be2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001be4:	e014      	b.n	8001c10 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001be6:	f7ff fbcf 	bl	8001388 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d90d      	bls.n	8001c10 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf8:	f043 0210 	orr.w	r2, r3, #16
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c04:	f043 0201 	orr.w	r2, r3, #1
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e007      	b.n	8001c20 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d0e3      	beq.n	8001be6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e0ed      	b.n	8001e16 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d102      	bne.n	8001c4c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff f806 	bl	8000c58 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 0202 	bic.w	r2, r2, #2
 8001c5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c5c:	f7ff fb94 	bl	8001388 <HAL_GetTick>
 8001c60:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c62:	e012      	b.n	8001c8a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c64:	f7ff fb90 	bl	8001388 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b0a      	cmp	r3, #10
 8001c70:	d90b      	bls.n	8001c8a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2205      	movs	r2, #5
 8001c82:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e0c5      	b.n	8001e16 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1e5      	bne.n	8001c64 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f042 0201 	orr.w	r2, r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ca8:	f7ff fb6e 	bl	8001388 <HAL_GetTick>
 8001cac:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001cae:	e012      	b.n	8001cd6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cb0:	f7ff fb6a 	bl	8001388 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b0a      	cmp	r3, #10
 8001cbc:	d90b      	bls.n	8001cd6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2205      	movs	r2, #5
 8001cce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e09f      	b.n	8001e16 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0e5      	beq.n	8001cb0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	7e1b      	ldrb	r3, [r3, #24]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d108      	bne.n	8001cfe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	e007      	b.n	8001d0e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	7e5b      	ldrb	r3, [r3, #25]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d108      	bne.n	8001d28 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	e007      	b.n	8001d38 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d36:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	7e9b      	ldrb	r3, [r3, #26]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d108      	bne.n	8001d52 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 0220 	orr.w	r2, r2, #32
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	e007      	b.n	8001d62 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f022 0220 	bic.w	r2, r2, #32
 8001d60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	7edb      	ldrb	r3, [r3, #27]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d108      	bne.n	8001d7c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 0210 	bic.w	r2, r2, #16
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	e007      	b.n	8001d8c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0210 	orr.w	r2, r2, #16
 8001d8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	7f1b      	ldrb	r3, [r3, #28]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d108      	bne.n	8001da6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0208 	orr.w	r2, r2, #8
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	e007      	b.n	8001db6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 0208 	bic.w	r2, r2, #8
 8001db4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	7f5b      	ldrb	r3, [r3, #29]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d108      	bne.n	8001dd0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f042 0204 	orr.w	r2, r2, #4
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	e007      	b.n	8001de0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0204 	bic.w	r2, r2, #4
 8001dde:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	431a      	orrs	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	695b      	ldr	r3, [r3, #20]
 8001df4:	ea42 0103 	orr.w	r1, r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	1e5a      	subs	r2, r3, #1
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
	...

08001e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e30:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <__NVIC_SetPriorityGrouping+0x44>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e36:	68ba      	ldr	r2, [r7, #8]
 8001e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e52:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <__NVIC_SetPriorityGrouping+0x44>)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	60d3      	str	r3, [r2, #12]
}
 8001e58:	bf00      	nop
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bc80      	pop	{r7}
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e6c:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <__NVIC_GetPriorityGrouping+0x18>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	0a1b      	lsrs	r3, r3, #8
 8001e72:	f003 0307 	and.w	r3, r3, #7
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	6039      	str	r1, [r7, #0]
 8001e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	db0a      	blt.n	8001eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	490c      	ldr	r1, [pc, #48]	; (8001ed0 <__NVIC_SetPriority+0x4c>)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	0112      	lsls	r2, r2, #4
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	440b      	add	r3, r1
 8001ea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eac:	e00a      	b.n	8001ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	4908      	ldr	r1, [pc, #32]	; (8001ed4 <__NVIC_SetPriority+0x50>)
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	3b04      	subs	r3, #4
 8001ebc:	0112      	lsls	r2, r2, #4
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	761a      	strb	r2, [r3, #24]
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bc80      	pop	{r7}
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	e000e100 	.word	0xe000e100
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b089      	sub	sp, #36	; 0x24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f1c3 0307 	rsb	r3, r3, #7
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	bf28      	it	cs
 8001ef6:	2304      	movcs	r3, #4
 8001ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	3304      	adds	r3, #4
 8001efe:	2b06      	cmp	r3, #6
 8001f00:	d902      	bls.n	8001f08 <NVIC_EncodePriority+0x30>
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	3b03      	subs	r3, #3
 8001f06:	e000      	b.n	8001f0a <NVIC_EncodePriority+0x32>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43da      	mvns	r2, r3
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	401a      	ands	r2, r3
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f20:	f04f 31ff 	mov.w	r1, #4294967295
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2a:	43d9      	mvns	r1, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f30:	4313      	orrs	r3, r2
         );
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3724      	adds	r7, #36	; 0x24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr

08001f3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f4c:	d301      	bcc.n	8001f52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e00f      	b.n	8001f72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f52:	4a0a      	ldr	r2, [pc, #40]	; (8001f7c <SysTick_Config+0x40>)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f5a:	210f      	movs	r1, #15
 8001f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f60:	f7ff ff90 	bl	8001e84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f64:	4b05      	ldr	r3, [pc, #20]	; (8001f7c <SysTick_Config+0x40>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f6a:	4b04      	ldr	r3, [pc, #16]	; (8001f7c <SysTick_Config+0x40>)
 8001f6c:	2207      	movs	r2, #7
 8001f6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	e000e010 	.word	0xe000e010

08001f80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7ff ff49 	bl	8001e20 <__NVIC_SetPriorityGrouping>
}
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b086      	sub	sp, #24
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	60b9      	str	r1, [r7, #8]
 8001fa0:	607a      	str	r2, [r7, #4]
 8001fa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fa8:	f7ff ff5e 	bl	8001e68 <__NVIC_GetPriorityGrouping>
 8001fac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	68b9      	ldr	r1, [r7, #8]
 8001fb2:	6978      	ldr	r0, [r7, #20]
 8001fb4:	f7ff ff90 	bl	8001ed8 <NVIC_EncodePriority>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fbe:	4611      	mov	r1, r2
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff ff5f 	bl	8001e84 <__NVIC_SetPriority>
}
 8001fc6:	bf00      	nop
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff ffb0 	bl	8001f3c <SysTick_Config>
 8001fdc:	4603      	mov	r3, r0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b08b      	sub	sp, #44	; 0x2c
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ffa:	e179      	b.n	80022f0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	69fa      	ldr	r2, [r7, #28]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	429a      	cmp	r2, r3
 8002016:	f040 8168 	bne.w	80022ea <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	4aa0      	ldr	r2, [pc, #640]	; (80022a0 <HAL_GPIO_Init+0x2b8>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d05e      	beq.n	80020e2 <HAL_GPIO_Init+0xfa>
 8002024:	4a9e      	ldr	r2, [pc, #632]	; (80022a0 <HAL_GPIO_Init+0x2b8>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d875      	bhi.n	8002116 <HAL_GPIO_Init+0x12e>
 800202a:	4a9e      	ldr	r2, [pc, #632]	; (80022a4 <HAL_GPIO_Init+0x2bc>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d058      	beq.n	80020e2 <HAL_GPIO_Init+0xfa>
 8002030:	4a9c      	ldr	r2, [pc, #624]	; (80022a4 <HAL_GPIO_Init+0x2bc>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d86f      	bhi.n	8002116 <HAL_GPIO_Init+0x12e>
 8002036:	4a9c      	ldr	r2, [pc, #624]	; (80022a8 <HAL_GPIO_Init+0x2c0>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d052      	beq.n	80020e2 <HAL_GPIO_Init+0xfa>
 800203c:	4a9a      	ldr	r2, [pc, #616]	; (80022a8 <HAL_GPIO_Init+0x2c0>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d869      	bhi.n	8002116 <HAL_GPIO_Init+0x12e>
 8002042:	4a9a      	ldr	r2, [pc, #616]	; (80022ac <HAL_GPIO_Init+0x2c4>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d04c      	beq.n	80020e2 <HAL_GPIO_Init+0xfa>
 8002048:	4a98      	ldr	r2, [pc, #608]	; (80022ac <HAL_GPIO_Init+0x2c4>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d863      	bhi.n	8002116 <HAL_GPIO_Init+0x12e>
 800204e:	4a98      	ldr	r2, [pc, #608]	; (80022b0 <HAL_GPIO_Init+0x2c8>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d046      	beq.n	80020e2 <HAL_GPIO_Init+0xfa>
 8002054:	4a96      	ldr	r2, [pc, #600]	; (80022b0 <HAL_GPIO_Init+0x2c8>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d85d      	bhi.n	8002116 <HAL_GPIO_Init+0x12e>
 800205a:	2b12      	cmp	r3, #18
 800205c:	d82a      	bhi.n	80020b4 <HAL_GPIO_Init+0xcc>
 800205e:	2b12      	cmp	r3, #18
 8002060:	d859      	bhi.n	8002116 <HAL_GPIO_Init+0x12e>
 8002062:	a201      	add	r2, pc, #4	; (adr r2, 8002068 <HAL_GPIO_Init+0x80>)
 8002064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002068:	080020e3 	.word	0x080020e3
 800206c:	080020bd 	.word	0x080020bd
 8002070:	080020cf 	.word	0x080020cf
 8002074:	08002111 	.word	0x08002111
 8002078:	08002117 	.word	0x08002117
 800207c:	08002117 	.word	0x08002117
 8002080:	08002117 	.word	0x08002117
 8002084:	08002117 	.word	0x08002117
 8002088:	08002117 	.word	0x08002117
 800208c:	08002117 	.word	0x08002117
 8002090:	08002117 	.word	0x08002117
 8002094:	08002117 	.word	0x08002117
 8002098:	08002117 	.word	0x08002117
 800209c:	08002117 	.word	0x08002117
 80020a0:	08002117 	.word	0x08002117
 80020a4:	08002117 	.word	0x08002117
 80020a8:	08002117 	.word	0x08002117
 80020ac:	080020c5 	.word	0x080020c5
 80020b0:	080020d9 	.word	0x080020d9
 80020b4:	4a7f      	ldr	r2, [pc, #508]	; (80022b4 <HAL_GPIO_Init+0x2cc>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d013      	beq.n	80020e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020ba:	e02c      	b.n	8002116 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	623b      	str	r3, [r7, #32]
          break;
 80020c2:	e029      	b.n	8002118 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	3304      	adds	r3, #4
 80020ca:	623b      	str	r3, [r7, #32]
          break;
 80020cc:	e024      	b.n	8002118 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	3308      	adds	r3, #8
 80020d4:	623b      	str	r3, [r7, #32]
          break;
 80020d6:	e01f      	b.n	8002118 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	330c      	adds	r3, #12
 80020de:	623b      	str	r3, [r7, #32]
          break;
 80020e0:	e01a      	b.n	8002118 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d102      	bne.n	80020f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020ea:	2304      	movs	r3, #4
 80020ec:	623b      	str	r3, [r7, #32]
          break;
 80020ee:	e013      	b.n	8002118 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d105      	bne.n	8002104 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020f8:	2308      	movs	r3, #8
 80020fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	69fa      	ldr	r2, [r7, #28]
 8002100:	611a      	str	r2, [r3, #16]
          break;
 8002102:	e009      	b.n	8002118 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002104:	2308      	movs	r3, #8
 8002106:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	69fa      	ldr	r2, [r7, #28]
 800210c:	615a      	str	r2, [r3, #20]
          break;
 800210e:	e003      	b.n	8002118 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002110:	2300      	movs	r3, #0
 8002112:	623b      	str	r3, [r7, #32]
          break;
 8002114:	e000      	b.n	8002118 <HAL_GPIO_Init+0x130>
          break;
 8002116:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	2bff      	cmp	r3, #255	; 0xff
 800211c:	d801      	bhi.n	8002122 <HAL_GPIO_Init+0x13a>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	e001      	b.n	8002126 <HAL_GPIO_Init+0x13e>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	3304      	adds	r3, #4
 8002126:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	2bff      	cmp	r3, #255	; 0xff
 800212c:	d802      	bhi.n	8002134 <HAL_GPIO_Init+0x14c>
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	e002      	b.n	800213a <HAL_GPIO_Init+0x152>
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	3b08      	subs	r3, #8
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	210f      	movs	r1, #15
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	fa01 f303 	lsl.w	r3, r1, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	401a      	ands	r2, r3
 800214c:	6a39      	ldr	r1, [r7, #32]
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	fa01 f303 	lsl.w	r3, r1, r3
 8002154:	431a      	orrs	r2, r3
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002162:	2b00      	cmp	r3, #0
 8002164:	f000 80c1 	beq.w	80022ea <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002168:	4b53      	ldr	r3, [pc, #332]	; (80022b8 <HAL_GPIO_Init+0x2d0>)
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	4a52      	ldr	r2, [pc, #328]	; (80022b8 <HAL_GPIO_Init+0x2d0>)
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	6193      	str	r3, [r2, #24]
 8002174:	4b50      	ldr	r3, [pc, #320]	; (80022b8 <HAL_GPIO_Init+0x2d0>)
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	60bb      	str	r3, [r7, #8]
 800217e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002180:	4a4e      	ldr	r2, [pc, #312]	; (80022bc <HAL_GPIO_Init+0x2d4>)
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	089b      	lsrs	r3, r3, #2
 8002186:	3302      	adds	r3, #2
 8002188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800218c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	f003 0303 	and.w	r3, r3, #3
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	220f      	movs	r2, #15
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	4013      	ands	r3, r2
 80021a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4a46      	ldr	r2, [pc, #280]	; (80022c0 <HAL_GPIO_Init+0x2d8>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d01f      	beq.n	80021ec <HAL_GPIO_Init+0x204>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a45      	ldr	r2, [pc, #276]	; (80022c4 <HAL_GPIO_Init+0x2dc>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d019      	beq.n	80021e8 <HAL_GPIO_Init+0x200>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a44      	ldr	r2, [pc, #272]	; (80022c8 <HAL_GPIO_Init+0x2e0>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d013      	beq.n	80021e4 <HAL_GPIO_Init+0x1fc>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a43      	ldr	r2, [pc, #268]	; (80022cc <HAL_GPIO_Init+0x2e4>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d00d      	beq.n	80021e0 <HAL_GPIO_Init+0x1f8>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a42      	ldr	r2, [pc, #264]	; (80022d0 <HAL_GPIO_Init+0x2e8>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d007      	beq.n	80021dc <HAL_GPIO_Init+0x1f4>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a41      	ldr	r2, [pc, #260]	; (80022d4 <HAL_GPIO_Init+0x2ec>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d101      	bne.n	80021d8 <HAL_GPIO_Init+0x1f0>
 80021d4:	2305      	movs	r3, #5
 80021d6:	e00a      	b.n	80021ee <HAL_GPIO_Init+0x206>
 80021d8:	2306      	movs	r3, #6
 80021da:	e008      	b.n	80021ee <HAL_GPIO_Init+0x206>
 80021dc:	2304      	movs	r3, #4
 80021de:	e006      	b.n	80021ee <HAL_GPIO_Init+0x206>
 80021e0:	2303      	movs	r3, #3
 80021e2:	e004      	b.n	80021ee <HAL_GPIO_Init+0x206>
 80021e4:	2302      	movs	r3, #2
 80021e6:	e002      	b.n	80021ee <HAL_GPIO_Init+0x206>
 80021e8:	2301      	movs	r3, #1
 80021ea:	e000      	b.n	80021ee <HAL_GPIO_Init+0x206>
 80021ec:	2300      	movs	r3, #0
 80021ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021f0:	f002 0203 	and.w	r2, r2, #3
 80021f4:	0092      	lsls	r2, r2, #2
 80021f6:	4093      	lsls	r3, r2
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021fe:	492f      	ldr	r1, [pc, #188]	; (80022bc <HAL_GPIO_Init+0x2d4>)
 8002200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002202:	089b      	lsrs	r3, r3, #2
 8002204:	3302      	adds	r3, #2
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d006      	beq.n	8002226 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002218:	4b2f      	ldr	r3, [pc, #188]	; (80022d8 <HAL_GPIO_Init+0x2f0>)
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	492e      	ldr	r1, [pc, #184]	; (80022d8 <HAL_GPIO_Init+0x2f0>)
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	4313      	orrs	r3, r2
 8002222:	600b      	str	r3, [r1, #0]
 8002224:	e006      	b.n	8002234 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002226:	4b2c      	ldr	r3, [pc, #176]	; (80022d8 <HAL_GPIO_Init+0x2f0>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	43db      	mvns	r3, r3
 800222e:	492a      	ldr	r1, [pc, #168]	; (80022d8 <HAL_GPIO_Init+0x2f0>)
 8002230:	4013      	ands	r3, r2
 8002232:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d006      	beq.n	800224e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002240:	4b25      	ldr	r3, [pc, #148]	; (80022d8 <HAL_GPIO_Init+0x2f0>)
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	4924      	ldr	r1, [pc, #144]	; (80022d8 <HAL_GPIO_Init+0x2f0>)
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	4313      	orrs	r3, r2
 800224a:	604b      	str	r3, [r1, #4]
 800224c:	e006      	b.n	800225c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800224e:	4b22      	ldr	r3, [pc, #136]	; (80022d8 <HAL_GPIO_Init+0x2f0>)
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	43db      	mvns	r3, r3
 8002256:	4920      	ldr	r1, [pc, #128]	; (80022d8 <HAL_GPIO_Init+0x2f0>)
 8002258:	4013      	ands	r3, r2
 800225a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d006      	beq.n	8002276 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002268:	4b1b      	ldr	r3, [pc, #108]	; (80022d8 <HAL_GPIO_Init+0x2f0>)
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	491a      	ldr	r1, [pc, #104]	; (80022d8 <HAL_GPIO_Init+0x2f0>)
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	4313      	orrs	r3, r2
 8002272:	608b      	str	r3, [r1, #8]
 8002274:	e006      	b.n	8002284 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002276:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <HAL_GPIO_Init+0x2f0>)
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	43db      	mvns	r3, r3
 800227e:	4916      	ldr	r1, [pc, #88]	; (80022d8 <HAL_GPIO_Init+0x2f0>)
 8002280:	4013      	ands	r3, r2
 8002282:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d025      	beq.n	80022dc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002290:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <HAL_GPIO_Init+0x2f0>)
 8002292:	68da      	ldr	r2, [r3, #12]
 8002294:	4910      	ldr	r1, [pc, #64]	; (80022d8 <HAL_GPIO_Init+0x2f0>)
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	4313      	orrs	r3, r2
 800229a:	60cb      	str	r3, [r1, #12]
 800229c:	e025      	b.n	80022ea <HAL_GPIO_Init+0x302>
 800229e:	bf00      	nop
 80022a0:	10320000 	.word	0x10320000
 80022a4:	10310000 	.word	0x10310000
 80022a8:	10220000 	.word	0x10220000
 80022ac:	10210000 	.word	0x10210000
 80022b0:	10120000 	.word	0x10120000
 80022b4:	10110000 	.word	0x10110000
 80022b8:	40021000 	.word	0x40021000
 80022bc:	40010000 	.word	0x40010000
 80022c0:	40010800 	.word	0x40010800
 80022c4:	40010c00 	.word	0x40010c00
 80022c8:	40011000 	.word	0x40011000
 80022cc:	40011400 	.word	0x40011400
 80022d0:	40011800 	.word	0x40011800
 80022d4:	40011c00 	.word	0x40011c00
 80022d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022dc:	4b0b      	ldr	r3, [pc, #44]	; (800230c <HAL_GPIO_Init+0x324>)
 80022de:	68da      	ldr	r2, [r3, #12]
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	43db      	mvns	r3, r3
 80022e4:	4909      	ldr	r1, [pc, #36]	; (800230c <HAL_GPIO_Init+0x324>)
 80022e6:	4013      	ands	r3, r2
 80022e8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	3301      	adds	r3, #1
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	fa22 f303 	lsr.w	r3, r2, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f47f ae7e 	bne.w	8001ffc <HAL_GPIO_Init+0x14>
  }
}
 8002300:	bf00      	nop
 8002302:	bf00      	nop
 8002304:	372c      	adds	r7, #44	; 0x2c
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr
 800230c:	40010400 	.word	0x40010400

08002310 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e26c      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	2b00      	cmp	r3, #0
 800232c:	f000 8087 	beq.w	800243e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002330:	4b92      	ldr	r3, [pc, #584]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 030c 	and.w	r3, r3, #12
 8002338:	2b04      	cmp	r3, #4
 800233a:	d00c      	beq.n	8002356 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800233c:	4b8f      	ldr	r3, [pc, #572]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 030c 	and.w	r3, r3, #12
 8002344:	2b08      	cmp	r3, #8
 8002346:	d112      	bne.n	800236e <HAL_RCC_OscConfig+0x5e>
 8002348:	4b8c      	ldr	r3, [pc, #560]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002354:	d10b      	bne.n	800236e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002356:	4b89      	ldr	r3, [pc, #548]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d06c      	beq.n	800243c <HAL_RCC_OscConfig+0x12c>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d168      	bne.n	800243c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e246      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002376:	d106      	bne.n	8002386 <HAL_RCC_OscConfig+0x76>
 8002378:	4b80      	ldr	r3, [pc, #512]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a7f      	ldr	r2, [pc, #508]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 800237e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002382:	6013      	str	r3, [r2, #0]
 8002384:	e02e      	b.n	80023e4 <HAL_RCC_OscConfig+0xd4>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10c      	bne.n	80023a8 <HAL_RCC_OscConfig+0x98>
 800238e:	4b7b      	ldr	r3, [pc, #492]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a7a      	ldr	r2, [pc, #488]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002394:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002398:	6013      	str	r3, [r2, #0]
 800239a:	4b78      	ldr	r3, [pc, #480]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a77      	ldr	r2, [pc, #476]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023a4:	6013      	str	r3, [r2, #0]
 80023a6:	e01d      	b.n	80023e4 <HAL_RCC_OscConfig+0xd4>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023b0:	d10c      	bne.n	80023cc <HAL_RCC_OscConfig+0xbc>
 80023b2:	4b72      	ldr	r3, [pc, #456]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a71      	ldr	r2, [pc, #452]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	4b6f      	ldr	r3, [pc, #444]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a6e      	ldr	r2, [pc, #440]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	e00b      	b.n	80023e4 <HAL_RCC_OscConfig+0xd4>
 80023cc:	4b6b      	ldr	r3, [pc, #428]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a6a      	ldr	r2, [pc, #424]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d6:	6013      	str	r3, [r2, #0]
 80023d8:	4b68      	ldr	r3, [pc, #416]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a67      	ldr	r2, [pc, #412]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80023de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d013      	beq.n	8002414 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ec:	f7fe ffcc 	bl	8001388 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f4:	f7fe ffc8 	bl	8001388 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b64      	cmp	r3, #100	; 0x64
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e1fa      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002406:	4b5d      	ldr	r3, [pc, #372]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0f0      	beq.n	80023f4 <HAL_RCC_OscConfig+0xe4>
 8002412:	e014      	b.n	800243e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002414:	f7fe ffb8 	bl	8001388 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800241c:	f7fe ffb4 	bl	8001388 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b64      	cmp	r3, #100	; 0x64
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e1e6      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800242e:	4b53      	ldr	r3, [pc, #332]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1f0      	bne.n	800241c <HAL_RCC_OscConfig+0x10c>
 800243a:	e000      	b.n	800243e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800243c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d063      	beq.n	8002512 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800244a:	4b4c      	ldr	r3, [pc, #304]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 030c 	and.w	r3, r3, #12
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00b      	beq.n	800246e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002456:	4b49      	ldr	r3, [pc, #292]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 030c 	and.w	r3, r3, #12
 800245e:	2b08      	cmp	r3, #8
 8002460:	d11c      	bne.n	800249c <HAL_RCC_OscConfig+0x18c>
 8002462:	4b46      	ldr	r3, [pc, #280]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d116      	bne.n	800249c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800246e:	4b43      	ldr	r3, [pc, #268]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d005      	beq.n	8002486 <HAL_RCC_OscConfig+0x176>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d001      	beq.n	8002486 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e1ba      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002486:	4b3d      	ldr	r3, [pc, #244]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	4939      	ldr	r1, [pc, #228]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002496:	4313      	orrs	r3, r2
 8002498:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249a:	e03a      	b.n	8002512 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d020      	beq.n	80024e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024a4:	4b36      	ldr	r3, [pc, #216]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 80024a6:	2201      	movs	r2, #1
 80024a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024aa:	f7fe ff6d 	bl	8001388 <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b0:	e008      	b.n	80024c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024b2:	f7fe ff69 	bl	8001388 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e19b      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c4:	4b2d      	ldr	r3, [pc, #180]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0f0      	beq.n	80024b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d0:	4b2a      	ldr	r3, [pc, #168]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	4927      	ldr	r1, [pc, #156]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	600b      	str	r3, [r1, #0]
 80024e4:	e015      	b.n	8002512 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024e6:	4b26      	ldr	r3, [pc, #152]	; (8002580 <HAL_RCC_OscConfig+0x270>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ec:	f7fe ff4c 	bl	8001388 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f4:	f7fe ff48 	bl	8001388 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e17a      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002506:	4b1d      	ldr	r3, [pc, #116]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1f0      	bne.n	80024f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0308 	and.w	r3, r3, #8
 800251a:	2b00      	cmp	r3, #0
 800251c:	d03a      	beq.n	8002594 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d019      	beq.n	800255a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002526:	4b17      	ldr	r3, [pc, #92]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 8002528:	2201      	movs	r2, #1
 800252a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252c:	f7fe ff2c 	bl	8001388 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002534:	f7fe ff28 	bl	8001388 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e15a      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002546:	4b0d      	ldr	r3, [pc, #52]	; (800257c <HAL_RCC_OscConfig+0x26c>)
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002552:	2001      	movs	r0, #1
 8002554:	f000 fac4 	bl	8002ae0 <RCC_Delay>
 8002558:	e01c      	b.n	8002594 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800255a:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <HAL_RCC_OscConfig+0x274>)
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002560:	f7fe ff12 	bl	8001388 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002566:	e00f      	b.n	8002588 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002568:	f7fe ff0e 	bl	8001388 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d908      	bls.n	8002588 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e140      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
 800257a:	bf00      	nop
 800257c:	40021000 	.word	0x40021000
 8002580:	42420000 	.word	0x42420000
 8002584:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002588:	4b9e      	ldr	r3, [pc, #632]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1e9      	bne.n	8002568 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 80a6 	beq.w	80026ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025a2:	2300      	movs	r3, #0
 80025a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025a6:	4b97      	ldr	r3, [pc, #604]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10d      	bne.n	80025ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b2:	4b94      	ldr	r3, [pc, #592]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	4a93      	ldr	r2, [pc, #588]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80025b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025bc:	61d3      	str	r3, [r2, #28]
 80025be:	4b91      	ldr	r3, [pc, #580]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c6:	60bb      	str	r3, [r7, #8]
 80025c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ca:	2301      	movs	r3, #1
 80025cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ce:	4b8e      	ldr	r3, [pc, #568]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d118      	bne.n	800260c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025da:	4b8b      	ldr	r3, [pc, #556]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a8a      	ldr	r2, [pc, #552]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 80025e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025e6:	f7fe fecf 	bl	8001388 <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ee:	f7fe fecb 	bl	8001388 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b64      	cmp	r3, #100	; 0x64
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e0fd      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002600:	4b81      	ldr	r3, [pc, #516]	; (8002808 <HAL_RCC_OscConfig+0x4f8>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0f0      	beq.n	80025ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d106      	bne.n	8002622 <HAL_RCC_OscConfig+0x312>
 8002614:	4b7b      	ldr	r3, [pc, #492]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	4a7a      	ldr	r2, [pc, #488]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	6213      	str	r3, [r2, #32]
 8002620:	e02d      	b.n	800267e <HAL_RCC_OscConfig+0x36e>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10c      	bne.n	8002644 <HAL_RCC_OscConfig+0x334>
 800262a:	4b76      	ldr	r3, [pc, #472]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	4a75      	ldr	r2, [pc, #468]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002630:	f023 0301 	bic.w	r3, r3, #1
 8002634:	6213      	str	r3, [r2, #32]
 8002636:	4b73      	ldr	r3, [pc, #460]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	4a72      	ldr	r2, [pc, #456]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800263c:	f023 0304 	bic.w	r3, r3, #4
 8002640:	6213      	str	r3, [r2, #32]
 8002642:	e01c      	b.n	800267e <HAL_RCC_OscConfig+0x36e>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	2b05      	cmp	r3, #5
 800264a:	d10c      	bne.n	8002666 <HAL_RCC_OscConfig+0x356>
 800264c:	4b6d      	ldr	r3, [pc, #436]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	4a6c      	ldr	r2, [pc, #432]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002652:	f043 0304 	orr.w	r3, r3, #4
 8002656:	6213      	str	r3, [r2, #32]
 8002658:	4b6a      	ldr	r3, [pc, #424]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	4a69      	ldr	r2, [pc, #420]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	6213      	str	r3, [r2, #32]
 8002664:	e00b      	b.n	800267e <HAL_RCC_OscConfig+0x36e>
 8002666:	4b67      	ldr	r3, [pc, #412]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	4a66      	ldr	r2, [pc, #408]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800266c:	f023 0301 	bic.w	r3, r3, #1
 8002670:	6213      	str	r3, [r2, #32]
 8002672:	4b64      	ldr	r3, [pc, #400]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	4a63      	ldr	r2, [pc, #396]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002678:	f023 0304 	bic.w	r3, r3, #4
 800267c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d015      	beq.n	80026b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002686:	f7fe fe7f 	bl	8001388 <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800268c:	e00a      	b.n	80026a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800268e:	f7fe fe7b 	bl	8001388 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	f241 3288 	movw	r2, #5000	; 0x1388
 800269c:	4293      	cmp	r3, r2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e0ab      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a4:	4b57      	ldr	r3, [pc, #348]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0ee      	beq.n	800268e <HAL_RCC_OscConfig+0x37e>
 80026b0:	e014      	b.n	80026dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b2:	f7fe fe69 	bl	8001388 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b8:	e00a      	b.n	80026d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ba:	f7fe fe65 	bl	8001388 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e095      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d0:	4b4c      	ldr	r3, [pc, #304]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1ee      	bne.n	80026ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026dc:	7dfb      	ldrb	r3, [r7, #23]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d105      	bne.n	80026ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e2:	4b48      	ldr	r3, [pc, #288]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	4a47      	ldr	r2, [pc, #284]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80026e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 8081 	beq.w	80027fa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026f8:	4b42      	ldr	r3, [pc, #264]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 030c 	and.w	r3, r3, #12
 8002700:	2b08      	cmp	r3, #8
 8002702:	d061      	beq.n	80027c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	69db      	ldr	r3, [r3, #28]
 8002708:	2b02      	cmp	r3, #2
 800270a:	d146      	bne.n	800279a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270c:	4b3f      	ldr	r3, [pc, #252]	; (800280c <HAL_RCC_OscConfig+0x4fc>)
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002712:	f7fe fe39 	bl	8001388 <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800271a:	f7fe fe35 	bl	8001388 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e067      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800272c:	4b35      	ldr	r3, [pc, #212]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1f0      	bne.n	800271a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002740:	d108      	bne.n	8002754 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002742:	4b30      	ldr	r3, [pc, #192]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	492d      	ldr	r1, [pc, #180]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002750:	4313      	orrs	r3, r2
 8002752:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002754:	4b2b      	ldr	r3, [pc, #172]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a19      	ldr	r1, [r3, #32]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	430b      	orrs	r3, r1
 8002766:	4927      	ldr	r1, [pc, #156]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 8002768:	4313      	orrs	r3, r2
 800276a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800276c:	4b27      	ldr	r3, [pc, #156]	; (800280c <HAL_RCC_OscConfig+0x4fc>)
 800276e:	2201      	movs	r2, #1
 8002770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002772:	f7fe fe09 	bl	8001388 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800277a:	f7fe fe05 	bl	8001388 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e037      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800278c:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0f0      	beq.n	800277a <HAL_RCC_OscConfig+0x46a>
 8002798:	e02f      	b.n	80027fa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800279a:	4b1c      	ldr	r3, [pc, #112]	; (800280c <HAL_RCC_OscConfig+0x4fc>)
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a0:	f7fe fdf2 	bl	8001388 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a8:	f7fe fdee 	bl	8001388 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e020      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ba:	4b12      	ldr	r3, [pc, #72]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f0      	bne.n	80027a8 <HAL_RCC_OscConfig+0x498>
 80027c6:	e018      	b.n	80027fa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e013      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027d4:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <HAL_RCC_OscConfig+0x4f4>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d106      	bne.n	80027f6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d001      	beq.n	80027fa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40021000 	.word	0x40021000
 8002808:	40007000 	.word	0x40007000
 800280c:	42420060 	.word	0x42420060

08002810 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e0d0      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002824:	4b6a      	ldr	r3, [pc, #424]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	429a      	cmp	r2, r3
 8002830:	d910      	bls.n	8002854 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002832:	4b67      	ldr	r3, [pc, #412]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f023 0207 	bic.w	r2, r3, #7
 800283a:	4965      	ldr	r1, [pc, #404]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	4313      	orrs	r3, r2
 8002840:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002842:	4b63      	ldr	r3, [pc, #396]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	429a      	cmp	r2, r3
 800284e:	d001      	beq.n	8002854 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e0b8      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d020      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	d005      	beq.n	8002878 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800286c:	4b59      	ldr	r3, [pc, #356]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	4a58      	ldr	r2, [pc, #352]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002872:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002876:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0308 	and.w	r3, r3, #8
 8002880:	2b00      	cmp	r3, #0
 8002882:	d005      	beq.n	8002890 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002884:	4b53      	ldr	r3, [pc, #332]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	4a52      	ldr	r2, [pc, #328]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800288a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800288e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002890:	4b50      	ldr	r3, [pc, #320]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	494d      	ldr	r1, [pc, #308]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d040      	beq.n	8002930 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d107      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b6:	4b47      	ldr	r3, [pc, #284]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d115      	bne.n	80028ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e07f      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d107      	bne.n	80028de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ce:	4b41      	ldr	r3, [pc, #260]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d109      	bne.n	80028ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e073      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028de:	4b3d      	ldr	r3, [pc, #244]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e06b      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ee:	4b39      	ldr	r3, [pc, #228]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f023 0203 	bic.w	r2, r3, #3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	4936      	ldr	r1, [pc, #216]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002900:	f7fe fd42 	bl	8001388 <HAL_GetTick>
 8002904:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002906:	e00a      	b.n	800291e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002908:	f7fe fd3e 	bl	8001388 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	f241 3288 	movw	r2, #5000	; 0x1388
 8002916:	4293      	cmp	r3, r2
 8002918:	d901      	bls.n	800291e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e053      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291e:	4b2d      	ldr	r3, [pc, #180]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f003 020c 	and.w	r2, r3, #12
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	429a      	cmp	r2, r3
 800292e:	d1eb      	bne.n	8002908 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002930:	4b27      	ldr	r3, [pc, #156]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d210      	bcs.n	8002960 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800293e:	4b24      	ldr	r3, [pc, #144]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f023 0207 	bic.w	r2, r3, #7
 8002946:	4922      	ldr	r1, [pc, #136]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	4313      	orrs	r3, r2
 800294c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800294e:	4b20      	ldr	r3, [pc, #128]	; (80029d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	429a      	cmp	r2, r3
 800295a:	d001      	beq.n	8002960 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e032      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	d008      	beq.n	800297e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800296c:	4b19      	ldr	r3, [pc, #100]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	4916      	ldr	r1, [pc, #88]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800297a:	4313      	orrs	r3, r2
 800297c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b00      	cmp	r3, #0
 8002988:	d009      	beq.n	800299e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800298a:	4b12      	ldr	r3, [pc, #72]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	490e      	ldr	r1, [pc, #56]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 800299a:	4313      	orrs	r3, r2
 800299c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800299e:	f000 f821 	bl	80029e4 <HAL_RCC_GetSysClockFreq>
 80029a2:	4602      	mov	r2, r0
 80029a4:	4b0b      	ldr	r3, [pc, #44]	; (80029d4 <HAL_RCC_ClockConfig+0x1c4>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	091b      	lsrs	r3, r3, #4
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	490a      	ldr	r1, [pc, #40]	; (80029d8 <HAL_RCC_ClockConfig+0x1c8>)
 80029b0:	5ccb      	ldrb	r3, [r1, r3]
 80029b2:	fa22 f303 	lsr.w	r3, r2, r3
 80029b6:	4a09      	ldr	r2, [pc, #36]	; (80029dc <HAL_RCC_ClockConfig+0x1cc>)
 80029b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029ba:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <HAL_RCC_ClockConfig+0x1d0>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fe fca0 	bl	8001304 <HAL_InitTick>

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	40022000 	.word	0x40022000
 80029d4:	40021000 	.word	0x40021000
 80029d8:	080034b4 	.word	0x080034b4
 80029dc:	20000000 	.word	0x20000000
 80029e0:	20000004 	.word	0x20000004

080029e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029e4:	b490      	push	{r4, r7}
 80029e6:	b08a      	sub	sp, #40	; 0x28
 80029e8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80029ea:	4b2a      	ldr	r3, [pc, #168]	; (8002a94 <HAL_RCC_GetSysClockFreq+0xb0>)
 80029ec:	1d3c      	adds	r4, r7, #4
 80029ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80029f4:	f240 2301 	movw	r3, #513	; 0x201
 80029f8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029fa:	2300      	movs	r3, #0
 80029fc:	61fb      	str	r3, [r7, #28]
 80029fe:	2300      	movs	r3, #0
 8002a00:	61bb      	str	r3, [r7, #24]
 8002a02:	2300      	movs	r3, #0
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
 8002a06:	2300      	movs	r3, #0
 8002a08:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a0e:	4b22      	ldr	r3, [pc, #136]	; (8002a98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	f003 030c 	and.w	r3, r3, #12
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d002      	beq.n	8002a24 <HAL_RCC_GetSysClockFreq+0x40>
 8002a1e:	2b08      	cmp	r3, #8
 8002a20:	d003      	beq.n	8002a2a <HAL_RCC_GetSysClockFreq+0x46>
 8002a22:	e02d      	b.n	8002a80 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a24:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a26:	623b      	str	r3, [r7, #32]
      break;
 8002a28:	e02d      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	0c9b      	lsrs	r3, r3, #18
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a36:	4413      	add	r3, r2
 8002a38:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002a3c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d013      	beq.n	8002a70 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a48:	4b13      	ldr	r3, [pc, #76]	; (8002a98 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	0c5b      	lsrs	r3, r3, #17
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a56:	4413      	add	r3, r2
 8002a58:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a5c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	4a0e      	ldr	r2, [pc, #56]	; (8002a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a62:	fb02 f203 	mul.w	r2, r2, r3
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a6e:	e004      	b.n	8002a7a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	4a0b      	ldr	r2, [pc, #44]	; (8002aa0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a74:	fb02 f303 	mul.w	r3, r2, r3
 8002a78:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	623b      	str	r3, [r7, #32]
      break;
 8002a7e:	e002      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a80:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a82:	623b      	str	r3, [r7, #32]
      break;
 8002a84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a86:	6a3b      	ldr	r3, [r7, #32]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3728      	adds	r7, #40	; 0x28
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc90      	pop	{r4, r7}
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	08003494 	.word	0x08003494
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	007a1200 	.word	0x007a1200
 8002aa0:	003d0900 	.word	0x003d0900

08002aa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aa8:	4b02      	ldr	r3, [pc, #8]	; (8002ab4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr
 8002ab4:	20000000 	.word	0x20000000

08002ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002abc:	f7ff fff2 	bl	8002aa4 <HAL_RCC_GetHCLKFreq>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	0adb      	lsrs	r3, r3, #11
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	4903      	ldr	r1, [pc, #12]	; (8002adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ace:	5ccb      	ldrb	r3, [r1, r3]
 8002ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	080034c4 	.word	0x080034c4

08002ae0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ae8:	4b0a      	ldr	r3, [pc, #40]	; (8002b14 <RCC_Delay+0x34>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a0a      	ldr	r2, [pc, #40]	; (8002b18 <RCC_Delay+0x38>)
 8002aee:	fba2 2303 	umull	r2, r3, r2, r3
 8002af2:	0a5b      	lsrs	r3, r3, #9
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	fb02 f303 	mul.w	r3, r2, r3
 8002afa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002afc:	bf00      	nop
  }
  while (Delay --);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	1e5a      	subs	r2, r3, #1
 8002b02:	60fa      	str	r2, [r7, #12]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1f9      	bne.n	8002afc <RCC_Delay+0x1c>
}
 8002b08:	bf00      	nop
 8002b0a:	bf00      	nop
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr
 8002b14:	20000000 	.word	0x20000000
 8002b18:	10624dd3 	.word	0x10624dd3

08002b1c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d07d      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b3c:	4b4f      	ldr	r3, [pc, #316]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d10d      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b48:	4b4c      	ldr	r3, [pc, #304]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	4a4b      	ldr	r2, [pc, #300]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b52:	61d3      	str	r3, [r2, #28]
 8002b54:	4b49      	ldr	r3, [pc, #292]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b5c:	60bb      	str	r3, [r7, #8]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b60:	2301      	movs	r3, #1
 8002b62:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b64:	4b46      	ldr	r3, [pc, #280]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d118      	bne.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b70:	4b43      	ldr	r3, [pc, #268]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a42      	ldr	r2, [pc, #264]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b7c:	f7fe fc04 	bl	8001388 <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b82:	e008      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b84:	f7fe fc00 	bl	8001388 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b64      	cmp	r3, #100	; 0x64
 8002b90:	d901      	bls.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e06d      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b96:	4b3a      	ldr	r3, [pc, #232]	; (8002c80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d0f0      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ba2:	4b36      	ldr	r3, [pc, #216]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002baa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d02e      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d027      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bc0:	4b2e      	ldr	r3, [pc, #184]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bc8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bca:	4b2e      	ldr	r3, [pc, #184]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bcc:	2201      	movs	r2, #1
 8002bce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bd0:	4b2c      	ldr	r3, [pc, #176]	; (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002bd6:	4a29      	ldr	r2, [pc, #164]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d014      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be6:	f7fe fbcf 	bl	8001388 <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bec:	e00a      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bee:	f7fe fbcb 	bl	8001388 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e036      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c04:	4b1d      	ldr	r3, [pc, #116]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d0ee      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c10:	4b1a      	ldr	r3, [pc, #104]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	4917      	ldr	r1, [pc, #92]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c22:	7dfb      	ldrb	r3, [r7, #23]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d105      	bne.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c28:	4b14      	ldr	r3, [pc, #80]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c2a:	69db      	ldr	r3, [r3, #28]
 8002c2c:	4a13      	ldr	r2, [pc, #76]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c32:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d008      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c40:	4b0e      	ldr	r3, [pc, #56]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	490b      	ldr	r1, [pc, #44]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0310 	and.w	r3, r3, #16
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d008      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c5e:	4b07      	ldr	r3, [pc, #28]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	4904      	ldr	r1, [pc, #16]	; (8002c7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3718      	adds	r7, #24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	40007000 	.word	0x40007000
 8002c84:	42420440 	.word	0x42420440

08002c88 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002c88:	b590      	push	{r4, r7, lr}
 8002c8a:	b08d      	sub	sp, #52	; 0x34
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002c90:	4b6b      	ldr	r3, [pc, #428]	; (8002e40 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002c92:	f107 040c 	add.w	r4, r7, #12
 8002c96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002c9c:	f240 2301 	movw	r3, #513	; 0x201
 8002ca0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002caa:	2300      	movs	r3, #0
 8002cac:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	61fb      	str	r3, [r7, #28]
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	2b0f      	cmp	r3, #15
 8002cbc:	f200 80b6 	bhi.w	8002e2c <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8002cc0:	a201      	add	r2, pc, #4	; (adr r2, 8002cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8002cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc6:	bf00      	nop
 8002cc8:	08002dab 	.word	0x08002dab
 8002ccc:	08002e11 	.word	0x08002e11
 8002cd0:	08002e2d 	.word	0x08002e2d
 8002cd4:	08002d9b 	.word	0x08002d9b
 8002cd8:	08002e2d 	.word	0x08002e2d
 8002cdc:	08002e2d 	.word	0x08002e2d
 8002ce0:	08002e2d 	.word	0x08002e2d
 8002ce4:	08002da3 	.word	0x08002da3
 8002ce8:	08002e2d 	.word	0x08002e2d
 8002cec:	08002e2d 	.word	0x08002e2d
 8002cf0:	08002e2d 	.word	0x08002e2d
 8002cf4:	08002e2d 	.word	0x08002e2d
 8002cf8:	08002e2d 	.word	0x08002e2d
 8002cfc:	08002e2d 	.word	0x08002e2d
 8002d00:	08002e2d 	.word	0x08002e2d
 8002d04:	08002d09 	.word	0x08002d09
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8002d08:	4b4e      	ldr	r3, [pc, #312]	; (8002e44 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002d0e:	4b4d      	ldr	r3, [pc, #308]	; (8002e44 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f000 808a 	beq.w	8002e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	0c9b      	lsrs	r3, r3, #18
 8002d20:	f003 030f 	and.w	r3, r3, #15
 8002d24:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002d28:	4413      	add	r3, r2
 8002d2a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002d2e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d018      	beq.n	8002d6c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d3a:	4b42      	ldr	r3, [pc, #264]	; (8002e44 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	0c5b      	lsrs	r3, r3, #17
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002d48:	4413      	add	r3, r2
 8002d4a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d4e:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00d      	beq.n	8002d76 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002d5a:	4a3b      	ldr	r2, [pc, #236]	; (8002e48 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d62:	6a3b      	ldr	r3, [r7, #32]
 8002d64:	fb02 f303 	mul.w	r3, r2, r3
 8002d68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d6a:	e004      	b.n	8002d76 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	4a37      	ldr	r2, [pc, #220]	; (8002e4c <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8002d70:	fb02 f303 	mul.w	r3, r2, r3
 8002d74:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002d76:	4b33      	ldr	r3, [pc, #204]	; (8002e44 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d82:	d102      	bne.n	8002d8a <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8002d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d86:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8002d88:	e052      	b.n	8002e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          frequency = (pllclk * 2) / 3;
 8002d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	4a30      	ldr	r2, [pc, #192]	; (8002e50 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 8002d90:	fba2 2303 	umull	r2, r3, r2, r3
 8002d94:	085b      	lsrs	r3, r3, #1
 8002d96:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002d98:	e04a      	b.n	8002e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002d9a:	f7ff fe23 	bl	80029e4 <HAL_RCC_GetSysClockFreq>
 8002d9e:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002da0:	e049      	b.n	8002e36 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002da2:	f7ff fe1f 	bl	80029e4 <HAL_RCC_GetSysClockFreq>
 8002da6:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002da8:	e045      	b.n	8002e36 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8002daa:	4b26      	ldr	r3, [pc, #152]	; (8002e44 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dba:	d108      	bne.n	8002dce <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSE_VALUE;
 8002dc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dca:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dcc:	e01f      	b.n	8002e0e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dd8:	d109      	bne.n	8002dee <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002dda:	4b1a      	ldr	r3, [pc, #104]	; (8002e44 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
        frequency = LSI_VALUE;
 8002de6:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002dea:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dec:	e00f      	b.n	8002e0e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002df4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002df8:	d11c      	bne.n	8002e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8002dfa:	4b12      	ldr	r3, [pc, #72]	; (8002e44 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d016      	beq.n	8002e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      {
        frequency = HSE_VALUE / 128U;
 8002e06:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002e0a:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8002e0c:	e012      	b.n	8002e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8002e0e:	e011      	b.n	8002e34 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002e10:	f7ff fe52 	bl	8002ab8 <HAL_RCC_GetPCLK2Freq>
 8002e14:	4602      	mov	r2, r0
 8002e16:	4b0b      	ldr	r3, [pc, #44]	; (8002e44 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	0b9b      	lsrs	r3, r3, #14
 8002e1c:	f003 0303 	and.w	r3, r3, #3
 8002e20:	3301      	adds	r3, #1
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e28:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002e2a:	e004      	b.n	8002e36 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    default:
    {
      break;
 8002e2c:	bf00      	nop
 8002e2e:	e002      	b.n	8002e36 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8002e30:	bf00      	nop
 8002e32:	e000      	b.n	8002e36 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8002e34:	bf00      	nop
    }
  }
  return (frequency);
 8002e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3734      	adds	r7, #52	; 0x34
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd90      	pop	{r4, r7, pc}
 8002e40:	080034a4 	.word	0x080034a4
 8002e44:	40021000 	.word	0x40021000
 8002e48:	007a1200 	.word	0x007a1200
 8002e4c:	003d0900 	.word	0x003d0900
 8002e50:	aaaaaaab 	.word	0xaaaaaaab

08002e54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e041      	b.n	8002eea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d106      	bne.n	8002e80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7fe f9e8 	bl	8001250 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3304      	adds	r3, #4
 8002e90:	4619      	mov	r1, r3
 8002e92:	4610      	mov	r0, r2
 8002e94:	f000 f94a 	bl	800312c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
	...

08002ef4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d001      	beq.n	8002f0c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e03c      	b.n	8002f86 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a1d      	ldr	r2, [pc, #116]	; (8002f90 <HAL_TIM_Base_Start+0x9c>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d018      	beq.n	8002f50 <HAL_TIM_Base_Start+0x5c>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a1c      	ldr	r2, [pc, #112]	; (8002f94 <HAL_TIM_Base_Start+0xa0>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d013      	beq.n	8002f50 <HAL_TIM_Base_Start+0x5c>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f30:	d00e      	beq.n	8002f50 <HAL_TIM_Base_Start+0x5c>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a18      	ldr	r2, [pc, #96]	; (8002f98 <HAL_TIM_Base_Start+0xa4>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d009      	beq.n	8002f50 <HAL_TIM_Base_Start+0x5c>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a16      	ldr	r2, [pc, #88]	; (8002f9c <HAL_TIM_Base_Start+0xa8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d004      	beq.n	8002f50 <HAL_TIM_Base_Start+0x5c>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a15      	ldr	r2, [pc, #84]	; (8002fa0 <HAL_TIM_Base_Start+0xac>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d111      	bne.n	8002f74 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2b06      	cmp	r3, #6
 8002f60:	d010      	beq.n	8002f84 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f042 0201 	orr.w	r2, r2, #1
 8002f70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f72:	e007      	b.n	8002f84 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0201 	orr.w	r2, r2, #1
 8002f82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3714      	adds	r7, #20
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bc80      	pop	{r7}
 8002f8e:	4770      	bx	lr
 8002f90:	40012c00 	.word	0x40012c00
 8002f94:	40013400 	.word	0x40013400
 8002f98:	40000400 	.word	0x40000400
 8002f9c:	40000800 	.word	0x40000800
 8002fa0:	40000c00 	.word	0x40000c00

08002fa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <HAL_TIM_ConfigClockSource+0x18>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	e0b3      	b.n	8003124 <HAL_TIM_ConfigClockSource+0x180>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fda:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fe2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ff4:	d03e      	beq.n	8003074 <HAL_TIM_ConfigClockSource+0xd0>
 8002ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ffa:	f200 8087 	bhi.w	800310c <HAL_TIM_ConfigClockSource+0x168>
 8002ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003002:	f000 8085 	beq.w	8003110 <HAL_TIM_ConfigClockSource+0x16c>
 8003006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800300a:	d87f      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0x168>
 800300c:	2b70      	cmp	r3, #112	; 0x70
 800300e:	d01a      	beq.n	8003046 <HAL_TIM_ConfigClockSource+0xa2>
 8003010:	2b70      	cmp	r3, #112	; 0x70
 8003012:	d87b      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0x168>
 8003014:	2b60      	cmp	r3, #96	; 0x60
 8003016:	d050      	beq.n	80030ba <HAL_TIM_ConfigClockSource+0x116>
 8003018:	2b60      	cmp	r3, #96	; 0x60
 800301a:	d877      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0x168>
 800301c:	2b50      	cmp	r3, #80	; 0x50
 800301e:	d03c      	beq.n	800309a <HAL_TIM_ConfigClockSource+0xf6>
 8003020:	2b50      	cmp	r3, #80	; 0x50
 8003022:	d873      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0x168>
 8003024:	2b40      	cmp	r3, #64	; 0x40
 8003026:	d058      	beq.n	80030da <HAL_TIM_ConfigClockSource+0x136>
 8003028:	2b40      	cmp	r3, #64	; 0x40
 800302a:	d86f      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0x168>
 800302c:	2b30      	cmp	r3, #48	; 0x30
 800302e:	d064      	beq.n	80030fa <HAL_TIM_ConfigClockSource+0x156>
 8003030:	2b30      	cmp	r3, #48	; 0x30
 8003032:	d86b      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0x168>
 8003034:	2b20      	cmp	r3, #32
 8003036:	d060      	beq.n	80030fa <HAL_TIM_ConfigClockSource+0x156>
 8003038:	2b20      	cmp	r3, #32
 800303a:	d867      	bhi.n	800310c <HAL_TIM_ConfigClockSource+0x168>
 800303c:	2b00      	cmp	r3, #0
 800303e:	d05c      	beq.n	80030fa <HAL_TIM_ConfigClockSource+0x156>
 8003040:	2b10      	cmp	r3, #16
 8003042:	d05a      	beq.n	80030fa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003044:	e062      	b.n	800310c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6818      	ldr	r0, [r3, #0]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	6899      	ldr	r1, [r3, #8]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	f000 f95a 	bl	800330e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003068:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	609a      	str	r2, [r3, #8]
      break;
 8003072:	e04e      	b.n	8003112 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6818      	ldr	r0, [r3, #0]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	6899      	ldr	r1, [r3, #8]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f000 f943 	bl	800330e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689a      	ldr	r2, [r3, #8]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003096:	609a      	str	r2, [r3, #8]
      break;
 8003098:	e03b      	b.n	8003112 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6818      	ldr	r0, [r3, #0]
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	6859      	ldr	r1, [r3, #4]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	461a      	mov	r2, r3
 80030a8:	f000 f8ba 	bl	8003220 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2150      	movs	r1, #80	; 0x50
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 f911 	bl	80032da <TIM_ITRx_SetConfig>
      break;
 80030b8:	e02b      	b.n	8003112 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6818      	ldr	r0, [r3, #0]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	6859      	ldr	r1, [r3, #4]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	461a      	mov	r2, r3
 80030c8:	f000 f8d8 	bl	800327c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2160      	movs	r1, #96	; 0x60
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 f901 	bl	80032da <TIM_ITRx_SetConfig>
      break;
 80030d8:	e01b      	b.n	8003112 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6818      	ldr	r0, [r3, #0]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	6859      	ldr	r1, [r3, #4]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	461a      	mov	r2, r3
 80030e8:	f000 f89a 	bl	8003220 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2140      	movs	r1, #64	; 0x40
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 f8f1 	bl	80032da <TIM_ITRx_SetConfig>
      break;
 80030f8:	e00b      	b.n	8003112 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4619      	mov	r1, r3
 8003104:	4610      	mov	r0, r2
 8003106:	f000 f8e8 	bl	80032da <TIM_ITRx_SetConfig>
        break;
 800310a:	e002      	b.n	8003112 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800310c:	bf00      	nop
 800310e:	e000      	b.n	8003112 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003110:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a33      	ldr	r2, [pc, #204]	; (800320c <TIM_Base_SetConfig+0xe0>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d013      	beq.n	800316c <TIM_Base_SetConfig+0x40>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a32      	ldr	r2, [pc, #200]	; (8003210 <TIM_Base_SetConfig+0xe4>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d00f      	beq.n	800316c <TIM_Base_SetConfig+0x40>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003152:	d00b      	beq.n	800316c <TIM_Base_SetConfig+0x40>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a2f      	ldr	r2, [pc, #188]	; (8003214 <TIM_Base_SetConfig+0xe8>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d007      	beq.n	800316c <TIM_Base_SetConfig+0x40>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a2e      	ldr	r2, [pc, #184]	; (8003218 <TIM_Base_SetConfig+0xec>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d003      	beq.n	800316c <TIM_Base_SetConfig+0x40>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a2d      	ldr	r2, [pc, #180]	; (800321c <TIM_Base_SetConfig+0xf0>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d108      	bne.n	800317e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	4313      	orrs	r3, r2
 800317c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a22      	ldr	r2, [pc, #136]	; (800320c <TIM_Base_SetConfig+0xe0>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d013      	beq.n	80031ae <TIM_Base_SetConfig+0x82>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a21      	ldr	r2, [pc, #132]	; (8003210 <TIM_Base_SetConfig+0xe4>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d00f      	beq.n	80031ae <TIM_Base_SetConfig+0x82>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003194:	d00b      	beq.n	80031ae <TIM_Base_SetConfig+0x82>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a1e      	ldr	r2, [pc, #120]	; (8003214 <TIM_Base_SetConfig+0xe8>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d007      	beq.n	80031ae <TIM_Base_SetConfig+0x82>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a1d      	ldr	r2, [pc, #116]	; (8003218 <TIM_Base_SetConfig+0xec>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d003      	beq.n	80031ae <TIM_Base_SetConfig+0x82>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a1c      	ldr	r2, [pc, #112]	; (800321c <TIM_Base_SetConfig+0xf0>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d108      	bne.n	80031c0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	4313      	orrs	r3, r2
 80031be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a09      	ldr	r2, [pc, #36]	; (800320c <TIM_Base_SetConfig+0xe0>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d003      	beq.n	80031f4 <TIM_Base_SetConfig+0xc8>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a08      	ldr	r2, [pc, #32]	; (8003210 <TIM_Base_SetConfig+0xe4>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d103      	bne.n	80031fc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	691a      	ldr	r2, [r3, #16]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	615a      	str	r2, [r3, #20]
}
 8003202:	bf00      	nop
 8003204:	3714      	adds	r7, #20
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr
 800320c:	40012c00 	.word	0x40012c00
 8003210:	40013400 	.word	0x40013400
 8003214:	40000400 	.word	0x40000400
 8003218:	40000800 	.word	0x40000800
 800321c:	40000c00 	.word	0x40000c00

08003220 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003220:	b480      	push	{r7}
 8003222:	b087      	sub	sp, #28
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	f023 0201 	bic.w	r2, r3, #1
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800324a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	011b      	lsls	r3, r3, #4
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	4313      	orrs	r3, r2
 8003254:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f023 030a 	bic.w	r3, r3, #10
 800325c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	4313      	orrs	r3, r2
 8003264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	621a      	str	r2, [r3, #32]
}
 8003272:	bf00      	nop
 8003274:	371c      	adds	r7, #28
 8003276:	46bd      	mov	sp, r7
 8003278:	bc80      	pop	{r7}
 800327a:	4770      	bx	lr

0800327c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800327c:	b480      	push	{r7}
 800327e:	b087      	sub	sp, #28
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	f023 0210 	bic.w	r2, r3, #16
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	031b      	lsls	r3, r3, #12
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	011b      	lsls	r3, r3, #4
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	621a      	str	r2, [r3, #32]
}
 80032d0:	bf00      	nop
 80032d2:	371c      	adds	r7, #28
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bc80      	pop	{r7}
 80032d8:	4770      	bx	lr

080032da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032da:	b480      	push	{r7}
 80032dc:	b085      	sub	sp, #20
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	f043 0307 	orr.w	r3, r3, #7
 80032fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	609a      	str	r2, [r3, #8]
}
 8003304:	bf00      	nop
 8003306:	3714      	adds	r7, #20
 8003308:	46bd      	mov	sp, r7
 800330a:	bc80      	pop	{r7}
 800330c:	4770      	bx	lr

0800330e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800330e:	b480      	push	{r7}
 8003310:	b087      	sub	sp, #28
 8003312:	af00      	add	r7, sp, #0
 8003314:	60f8      	str	r0, [r7, #12]
 8003316:	60b9      	str	r1, [r7, #8]
 8003318:	607a      	str	r2, [r7, #4]
 800331a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003328:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	021a      	lsls	r2, r3, #8
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	431a      	orrs	r2, r3
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	4313      	orrs	r3, r2
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	4313      	orrs	r3, r2
 800333a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	609a      	str	r2, [r3, #8]
}
 8003342:	bf00      	nop
 8003344:	371c      	adds	r7, #28
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr

0800334c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003360:	2302      	movs	r3, #2
 8003362:	e050      	b.n	8003406 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2202      	movs	r2, #2
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800338a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	4313      	orrs	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a1b      	ldr	r2, [pc, #108]	; (8003410 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d018      	beq.n	80033da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a19      	ldr	r2, [pc, #100]	; (8003414 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d013      	beq.n	80033da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ba:	d00e      	beq.n	80033da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a15      	ldr	r2, [pc, #84]	; (8003418 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d009      	beq.n	80033da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a14      	ldr	r2, [pc, #80]	; (800341c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d004      	beq.n	80033da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a12      	ldr	r2, [pc, #72]	; (8003420 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d10c      	bne.n	80033f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3714      	adds	r7, #20
 800340a:	46bd      	mov	sp, r7
 800340c:	bc80      	pop	{r7}
 800340e:	4770      	bx	lr
 8003410:	40012c00 	.word	0x40012c00
 8003414:	40013400 	.word	0x40013400
 8003418:	40000400 	.word	0x40000400
 800341c:	40000800 	.word	0x40000800
 8003420:	40000c00 	.word	0x40000c00

08003424 <__libc_init_array>:
 8003424:	b570      	push	{r4, r5, r6, lr}
 8003426:	2600      	movs	r6, #0
 8003428:	4d0c      	ldr	r5, [pc, #48]	; (800345c <__libc_init_array+0x38>)
 800342a:	4c0d      	ldr	r4, [pc, #52]	; (8003460 <__libc_init_array+0x3c>)
 800342c:	1b64      	subs	r4, r4, r5
 800342e:	10a4      	asrs	r4, r4, #2
 8003430:	42a6      	cmp	r6, r4
 8003432:	d109      	bne.n	8003448 <__libc_init_array+0x24>
 8003434:	f000 f822 	bl	800347c <_init>
 8003438:	2600      	movs	r6, #0
 800343a:	4d0a      	ldr	r5, [pc, #40]	; (8003464 <__libc_init_array+0x40>)
 800343c:	4c0a      	ldr	r4, [pc, #40]	; (8003468 <__libc_init_array+0x44>)
 800343e:	1b64      	subs	r4, r4, r5
 8003440:	10a4      	asrs	r4, r4, #2
 8003442:	42a6      	cmp	r6, r4
 8003444:	d105      	bne.n	8003452 <__libc_init_array+0x2e>
 8003446:	bd70      	pop	{r4, r5, r6, pc}
 8003448:	f855 3b04 	ldr.w	r3, [r5], #4
 800344c:	4798      	blx	r3
 800344e:	3601      	adds	r6, #1
 8003450:	e7ee      	b.n	8003430 <__libc_init_array+0xc>
 8003452:	f855 3b04 	ldr.w	r3, [r5], #4
 8003456:	4798      	blx	r3
 8003458:	3601      	adds	r6, #1
 800345a:	e7f2      	b.n	8003442 <__libc_init_array+0x1e>
 800345c:	080034cc 	.word	0x080034cc
 8003460:	080034cc 	.word	0x080034cc
 8003464:	080034cc 	.word	0x080034cc
 8003468:	080034d0 	.word	0x080034d0

0800346c <memset>:
 800346c:	4603      	mov	r3, r0
 800346e:	4402      	add	r2, r0
 8003470:	4293      	cmp	r3, r2
 8003472:	d100      	bne.n	8003476 <memset+0xa>
 8003474:	4770      	bx	lr
 8003476:	f803 1b01 	strb.w	r1, [r3], #1
 800347a:	e7f9      	b.n	8003470 <memset+0x4>

0800347c <_init>:
 800347c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800347e:	bf00      	nop
 8003480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003482:	bc08      	pop	{r3}
 8003484:	469e      	mov	lr, r3
 8003486:	4770      	bx	lr

08003488 <_fini>:
 8003488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800348a:	bf00      	nop
 800348c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800348e:	bc08      	pop	{r3}
 8003490:	469e      	mov	lr, r3
 8003492:	4770      	bx	lr
